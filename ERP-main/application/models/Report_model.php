<?php
/*
-- =============================================
-- File Name : Report_model.php
-- Project Name : SME ERP
-- Module Name : Report
-- Create date : 15 - September 2016
-- Description : This file contains all the report module queries.

-- REVISION HISTORY
-- Modified By : 15-05-2017 sub item configuration in the reports
-- =============================================*/
if (!defined('BASEPATH')) exit('No direct script access allowed');

use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class Report_model extends CI_Model
{
    function __contruct()
    {
        parent::__contruct();
    }

    function getColumnsByReport($reportCode)
    {
        $this->db->select("fieldID,fieldName,caption,isDefault,textAlign,isMandatory,isCalculate");
        $this->db->from("srp_erp_reporttemplate rt");
        $this->db->join('srp_erp_reporttemplatefields rf', 'rt.reportID = rf.reportID', 'INNER');
        $this->db->where("rt.documentCode", $reportCode);
        $this->db->where("rf.isVisible", 1);
        $this->db->order_by("rf.sortOrder ASC");
        $result = $this->db->get()->result_array();
        return $result;
    }

    function getColumnsDetailByReport($reportCode, $columns)
    {
        if (!empty($columns)) {
            $this->db->select("fieldName,caption,isDefault,textAlign,isMandatory,isCalculate,isDecimalPlaceAllowed");
            $this->db->from("srp_erp_reporttemplate rt");
            $this->db->join('srp_erp_reporttemplatefields rf', 'rt.reportID = rf.reportID', 'INNER');
            $this->db->where_in("rf.fieldName", $columns);
            $this->db->where("rt.documentCode", $reportCode);
            $this->db->order_by("rf.sortOrder ASC");
            $result = $this->db->get()->result_array();
            return $result;
        } else {
            return false;
        }
    }

    function get_item_ledger_report($fieldName = Null)
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");
        $documentID = $this->input->post("documentID");
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) {
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val . "' "; /*generate the query according to selectd items*/
                $i++;
            }
        }
        $docID = '';
        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND il.documentID IN ($documentID)";
        }
        $itmesOR .= ' ) ';
        $feilds = "";
        $feildsra = [];
        $feilds2 = "";
        $feilds3 = array();

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/


//            $fieldNameChk = $this->input->post("fieldNameChk");
            $key = array_search("transactionQTY", $fieldNameChk); // get key of transactionQTY in an array
            unset($fieldNameChk[$key]);
            foreach ($fieldNameChk as $val) {
                if ($val == "documentID") {
                    $feilds3[] = "'Opening Balance' as documentID";
                } else if ($val == "documentSystemCode") {
                    $feilds3[] = "'-' as documentSystemCode";
                } else if ($val == "documentDate") {
                    $feilds3[] = "'' as documentDate";
                } else if ($val == "segmentCode") {
                    $feilds3[] = "'-' as segmentCode";
                } else if ($val == "narration") {
                    $feilds3[] = "'-' as narration";
                } else if ($val == "referenceNumber") {
                    $feilds3[] = "'-' as referenceNumber";
                } else if ($val == "wareHouseLocation") {
                    $feilds3[] = "'-' as wareHouseLocation";
                } else if ($val == "barcode" || $val == "partNo") {
                    $feilds3[]= 'im.' . $val;
                } else {
                    $feilds3[] = 'il.' . $val;
                }
            }

            foreach ($fieldNameChk as $val) {
                if ($val == "wareHouseLocation") {
                    $feildsra[] = "srp_erp_warehousemaster.wareHouseLocation as wareHouseLocation";

                } else if ($val == "segmentCode") {
                    $feildsra[] = "srp_erp_segment.description as segmentCode";

                } else if ($val == "SUOMQty") {
                    $feildsra[] = "SUM(il.SUOMQty/il.convertionRate) as SUOMQty";
                } else if ($val == "barcode" || $val == "partNo") {
                    $feildsra[]= 'im.' . $val;
                } else {
                    $feildsra[] = 'il.' . $val;
                }
            }
            $feilds3 = join(',', $feilds3);
            $feilds = join(',', $feildsra);
            $feilds .= ",TRIM(TRAILING '.' FROM ((SUM( il.transactionQTY / il.convertionRate  )))) AS transactionQTY";
            $feilds3 .= ",TRIM(TRAILING '.' FROM ((SUM( il.transactionQTY / il.convertionRate  )))) AS transactionQTY";
            $feilds2 = join(',a.', $fieldNameChk);
            $feilds2 = "a." . $feilds2;
            $feilds2 .= ",a.transactionQTY";
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as localCostAsset";
                $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds .= ",(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
                $feilds2 .= ",a.localCostAsset";
                $feilds2 .= ",a.companyLocalWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyLocalAmount as avgCompanyLocalAmount";
                $feilds3 .= ",SUM(il.companyLocalAmount) as localCostAsset";
                $feilds3 .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
            }
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as rptCostAsset";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds .= ",(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";
                $feilds2 .= ",a.rptCostAsset";
                $feilds2 .= ",a.companyReportingWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyReportingAmount";
                $feilds3 .= ",SUM(il.companyReportingAmount) as rptCostAsset";
                $feilds3 .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";

            }
        }
        $result = $this->db->query("SELECT $feilds2,a.seconeryItemCode, a.documentAutoID,a.salesPrice,a.itemDescription,a.secondaryUOMID,a.itemSystemCode,a.transactionUOM,a.mainCategory,a.subCategory,a.subsubCategory,a.companyLocalCurrencyDecimalPlaces,a.companyReportingCurrencyDecimalPlaces,a.defaultUnitOfMeasure FROM ((SELECT $feilds,il.documentAutoID,il.salesPrice,im.itemDescription,suom.UnitShortCode as secondaryUOMID,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces,im.seconeryItemCode,im.defaultUnitOfMeasure
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN `srp_erp_unit_of_measure` `suom` ON `im`.`secondaryUOMID` = `suom`.`UnitID`
    LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = il.wareHouseAutoID
    LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = il.segmentID
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		LEFT JOIN
		 (SELECT
		IFNULL(description,'uncategorized') as description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `im`.`subSubCategoryID`)
		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND il.wareHouseAutoID IN (" . join(',', $location) . ") $docIDs GROUP BY il.itemAutoID,il.documentID,il.documentSystemCode,il.warehouseAutoID ORDER BY il.documentDate DESC)
UNION ALL
(SELECT $feilds3,il.documentAutoID,il.salesPrice,im.itemDescription,suom.UnitShortCode as secondaryUOMID,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces,im.seconeryItemCode,im.defaultUnitOfMeasure
        FROM srp_erp_itemledger il
        INNER JOIN `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN `srp_erp_unit_of_measure` `suom` ON `im`.`secondaryUOMID` = `suom`.`UnitID`
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		LEFT JOIN
    (SELECT
		IFNULL(description,'uncategorized') as description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `im`.`subSubCategoryID`)
		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate < '" . format_date($this->input->post("from")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND il.wareHouseAutoID IN (" . join(',', $location) . ") $docIDs GROUP BY il.itemAutoID ORDER BY il.documentDate DESC)) AS a ORDER BY documentDate ASC
")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_ledger_report_new()
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");
        $documentID = $this->input->post("documentID");
        $i = 1;
//        $itmesOR = '( ';
//        if (!empty($items)) {
//            foreach ($items as $item_val) {
//                if ($i != 1) {
//                    $itmesOR .= ' OR ';
//                }
//                $itmesOR .= " il.itemAutoID = '" . $item_val . "' "; /*generate the query according to selectd items*/
//                $i++;
//            }
//        }
//        $docID = '';
        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND il.documentID IN ($documentID)";
        }
//        $itmesOR .= ' ) ';
        $itmesOR = " il.itemAutoID IN (" . join(',', $items) . ")";
        $feilds = "";
        $feildsra = [];
        $feilds2 = "";
        $feilds3 = [];
        if (!empty($this->input->post("fieldNameChk"))) { /*generate the query according to selectd columns*/
            $fieldNameChk = $this->input->post("fieldNameChk");
            $key = array_search("transactionQTY", $fieldNameChk); // get key of transactionQTY in an array
            unset($fieldNameChk[$key]);
            foreach ($fieldNameChk as $val) {
                if ($val == "documentID") {
                    $feilds3[] = "'Opening Balance' as documentID";
                } else if ($val == "documentSystemCode") {
                    $feilds3[] = "'-' as documentSystemCode";
                } else if ($val == "documentDate") {
                    $feilds3[] = "'' as documentDate";
                } else if ($val == "segmentCode") {
                    $feilds3[] = "'-' as segmentCode";
                } else if ($val == "narration") {
                    $feilds3[] = "'-' as narration";
                } else if ($val == "referenceNumber") {
                    $feilds3[] = "'-' as referenceNumber";
                } else if ($val == "wareHouseLocation") {
                    $feilds3[] = "'-' as wareHouseLocation";
                } else if ($val == "barcode" || $val == "partNo") {
                    $feilds3[] = 'im.' . $val;
                } else if ($val == "seconeryItemCode") {

                }else if ($val == "itemDescription" ) {
                    $feilds3[] = "im.itemDescription as itemDescription1" ;

                } else {
                    $feilds3[] = 'il.' . $val;
                }
            }

            foreach ($fieldNameChk as $val) {
                if ($val == "wareHouseLocation") {
                    $feildsra[] = "srp_erp_warehousemaster.wareHouseLocation as wareHouseLocation";

                } else if ($val == "segmentCode") {
                    $feildsra[] = "srp_erp_segment.description as segmentCode";

                } else if ($val == "SUOMQty") {
                    $feildsra[] = "(il.SUOMQty/il.convertionRate) as SUOMQty";
                } else if ($val == "barcode" || $val == "partNo") {
                    $feildsra[] = 'im.' . $val;
                } else if ($val == "seconeryItemCode") {

                }else if ($val == "itemDescription" ) {
                    $feildsra[] = "im.itemDescription as itemDescription1" ;

                } else {
                    $feildsra[] = 'il.' . $val;
                }
            }
            $feilds3 = join(',', $feilds3);
            $feilds = join(',', $feildsra);
            $feilds .= ",(il.transactionQTY/il.convertionRate) as transactionQTY";
            $feilds3 .= ",SUM(il.transactionQTY/il.convertionRate) as transactionQTY";
            $feilds2 = join(',a.', $fieldNameChk);
            $feilds2 = "a." . $feilds2;
            $feilds2 .= ",a.transactionQTY";
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",(il.companyLocalAmount) as localCostAsset";
                $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds .= ",((il.companyLocalAmount) / (il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
                $feilds2 .= ",a.localCostAsset";
                $feilds2 .= ",a.companyLocalWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyLocalAmount as avgCompanyLocalAmount";
                $feilds3 .= ",SUM(il.companyLocalAmount) as localCostAsset";
                $feilds3 .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
            }
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",(il.companyReportingAmount) as rptCostAsset";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds .= ",((il.companyReportingAmount) / (il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";
                $feilds2 .= ",a.rptCostAsset";
                $feilds2 .= ",a.companyReportingWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyReportingAmount";
                $feilds3 .= ",SUM(il.companyReportingAmount) as rptCostAsset";
                $feilds3 .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";

            }
        }
        $result = $this->db->query("SELECT $feilds2, a.seconeryItemCode, a.documentAutoID,a.salesPrice,a.itemDescription,a.secondaryUOMID,a.itemSystemCode,a.transactionUOM,a.mainCategory,a.companyLocalCurrencyDecimalPlaces,a.companyReportingCurrencyDecimalPlaces, a.subSubCategoryID, a.subcategoryID FROM ((SELECT $feilds,il.documentAutoID,il.salesPrice,im.itemDescription,suom.UnitShortCode as secondaryUOMID,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces, im.subSubCategoryID, im.subcategoryID, im.seconeryItemCode
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN `srp_erp_unit_of_measure` `suom` ON `im`.`secondaryUOMID` = `suom`.`UnitID`
    LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = il.wareHouseAutoID
    LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = il.segmentID
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)

		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND il.wareHouseAutoID IN (" . join(',', $location) . ") $docIDs ORDER BY il.documentDate DESC)
UNION ALL
(SELECT $feilds3,il.documentAutoID,il.salesPrice,im.itemDescription,suom.UnitShortCode as secondaryUOMID,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces,im.subSubCategoryID,im.subcategoryID, im.seconeryItemCode
        FROM srp_erp_itemledger il
        INNER JOIN `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN `srp_erp_unit_of_measure` `suom` ON `im`.`secondaryUOMID` = `suom`.`UnitID`
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)

		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate < '" . format_date($this->input->post("from")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND il.wareHouseAutoID IN (" . join(',', $location) . ") $docIDs GROUP BY il.itemAutoID ORDER BY il.documentDate DESC)) AS a ORDER BY documentDate ASC
")->result_array();
//        echo $this->db->last_query();
        return $result;
    }

    function get_item_ledger_report_subsubcategory()
    {
        $company = $this->common_data['company_data']['company_id'];
        $subsubCategories = $this->db->query("SELECT itemCategoryID, description FROM srp_erp_itemcategory WHERE companyID = {$company}")->result_array();
        return $subsubCategories;
    }

    function get_item_ledger_group_report()
    {
        $location = $this->input->post("location");
        $company = $this->get_group_company();
        $items = $this->input->post("itemTo");
        $items = $this->get_group_items($items);
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) {
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val["ItemAutoID"] . "' "; /*generate the query according to selectd items*/
                $i++;
            }
        }
        $itmesOR .= ' ) ';
        $feilds = "";
        $feilds2 = "";
        $feildsra = [];
        $feilds3 = [];
        if (!empty($this->input->post("fieldNameChk"))) { /*generate the query according to selectd columns*/
            $fieldNameChk = $this->input->post("fieldNameChk");
            $key = array_search("transactionQTY", $fieldNameChk); // get key of transactionQTY in an array
            unset($fieldNameChk[$key]);
            foreach ($fieldNameChk as $val) {
                if ($val == "documentID") {
                    $feilds3[] = "'Opening Balance' as documentID";
                } else if ($val == "documentSystemCode") {
                    $feilds3[] = "'-' as documentSystemCode";
                } else if ($val == "documentDate") {
                    $feilds3[] = "'' as documentDate";
                } else if ($val == "segmentCode") {
                    $feilds3[] = "'-' as segmentCode";
                } else if ($val == "narration") {
                    $feilds3[] = "'-' as narration";
                } else if ($val == "referenceNumber") {
                    $feilds3[] = "'-' as referenceNumber";
                } else if ($val == "wareHouseLocation") {
                    $feilds3[] = "'-' as wareHouseLocation";
                } else {
                    $feilds3[] = 'il.' . $val;
                }
            }

            foreach ($fieldNameChk as $val) {
                if ($val == "wareHouseLocation") {
                    $feildsra[] = "whm.wareHouseLocation as wareHouseLocation";

                } else if ($val == "segmentCode") {
                    $feildsra[] = "gseg.description as segmentCode";

                } else {
                    $feildsra[] = 'il.' . $val;
                }
            }


            $feilds3 = join(',', $feilds3);
            $feilds = join(',', $feildsra);
            $feilds .= ",SUM(il.transactionQTY/il.convertionRate) as transactionQTY";
            $feilds3 .= ",SUM(il.transactionQTY/il.convertionRate) as transactionQTY";
            $feilds2 = join(',a.', $fieldNameChk);
            $feilds2 = "a." . $feilds2;
            $feilds2 .= ",a.transactionQTY";
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as localCostAsset";
                $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds .= ",(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
                $feilds2 .= ",a.localCostAsset";
                $feilds2 .= ",a.companyLocalWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyLocalAmount as avgCompanyLocalAmount";
                $feilds3 .= ",SUM(il.companyLocalAmount) as localCostAsset";
                $feilds3 .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyLocalAmount";
            }
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as rptCostAsset";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds .= ",(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";
                $feilds2 .= ",a.rptCostAsset";
                $feilds2 .= ",a.companyReportingWacAmountDecimalPlaces";
                $feilds2 .= ",a.avgCompanyReportingAmount";
                $feilds3 .= ",SUM(il.companyReportingAmount) as rptCostAsset";
                $feilds3 .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds3 .= ",(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as avgCompanyReportingAmount";

            }
        }
        $result = $this->db->query("SELECT $feilds2, a.documentAutoID,a.salesPrice,a.itemDescription,a.itemSystemCode,a.transactionUOM,a.mainCategory,a.subCategory,a.companyLocalCurrencyDecimalPlaces,a.companyReportingCurrencyDecimalPlaces FROM
((SELECT $feilds,il.documentAutoID,il.salesPrice,im.itemDescription,im.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,ic2.description as subCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces
        FROM srp_erp_itemledger il
        INNER JOIN (SELECT srp_erp_groupitemmaster.*,srp_erp_groupitemmasterdetails.itemAutoID as itemID,srp_erp_itemmaster.mainCategoryID AS itemMainCategoryID  FROM srp_erp_groupitemmaster INNER JOIN srp_erp_groupitemmasterdetails ON srp_erp_groupitemmaster.itemAutoID = srp_erp_groupitemmasterdetails.groupItemMasterID INNER JOIN srp_erp_itemmaster
	ON srp_erp_itemmaster.itemAutoID = srp_erp_groupitemmasterdetails.itemAutoID  WHERE groupID = " . current_companyID() . ") im ON im.itemID = `il`.`itemAutoID`
    INNER JOIN (SELECT srp_erp_groupwarehousemaster.*,srp_erp_groupwarehousedetails.warehosueMasterID as warehouseID FROM srp_erp_groupwarehousemaster INNER JOIN srp_erp_groupwarehousedetails ON srp_erp_groupwarehousemaster.wareHouseAutoID = srp_erp_groupwarehousedetails.groupWarehouseMasterID WHERE groupID = " . current_companyID() . " AND wareHouseAutoID IN (" . join(',', $location) . ")) whm ON whm.warehouseID = il.wareHouseAutoID
    LEFT JOIN (SELECT srp_erp_groupsegment.*,srp_erp_groupsegmentdetails.segmentID as groupSegmentID FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID WHERE groupID = " . current_companyID() . ") gseg ON gseg.groupSegmentID = il.segmentID
        INNER JOIN
    (SELECT srp_erp_groupitemcategory.*,srp_erp_groupitemcategorydetails.itemCategoryID as categoryID FROM srp_erp_groupitemcategory INNER JOIN srp_erp_groupitemcategorydetails ON srp_erp_groupitemcategory.itemCategoryID = srp_erp_groupitemcategorydetails.groupItemCategoryID WHERE groupID = " . current_companyID() . ") AS `ic1` ON (`ic1`.`categoryID` = `im`.`itemMainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_groupitemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND il.companyID in (" . join(',', $company) . ") GROUP BY im.itemAutoID,il.documentID,il.documentSystemCode ORDER BY il.documentDate DESC)
UNION ALL
(SELECT $feilds3,il.documentAutoID,il.salesPrice,il.itemDescription,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,ic2.description as subCategory,il.companyLocalCurrencyDecimalPlaces,il.companyReportingCurrencyDecimalPlaces
        FROM srp_erp_itemledger il
        INNER JOIN (SELECT srp_erp_groupitemmaster.*,srp_erp_groupitemmasterdetails.itemAutoID as itemID,srp_erp_itemmaster.mainCategoryID AS itemMainCategoryID  FROM srp_erp_groupitemmaster INNER JOIN srp_erp_groupitemmasterdetails ON srp_erp_groupitemmaster.itemAutoID = srp_erp_groupitemmasterdetails.groupItemMasterID INNER JOIN srp_erp_itemmaster
	ON srp_erp_itemmaster.itemAutoID = srp_erp_groupitemmasterdetails.itemAutoID  WHERE groupID = " . current_companyID() . ") im ON im.itemID = `il`.`itemAutoID`
    INNER JOIN (SELECT srp_erp_groupwarehousemaster.*,srp_erp_groupwarehousedetails.warehosueMasterID as warehouseID FROM srp_erp_groupwarehousemaster INNER JOIN srp_erp_groupwarehousedetails ON srp_erp_groupwarehousemaster.wareHouseAutoID = srp_erp_groupwarehousedetails.groupWarehouseMasterID WHERE groupID = " . current_companyID() . " AND wareHouseAutoID IN (" . join(',', $location) . ")) whm ON whm.warehouseID = il.wareHouseAutoID
    LEFT JOIN (SELECT srp_erp_groupsegment.*,srp_erp_groupsegmentdetails.segmentID as groupSegmentID FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID WHERE groupID = " . current_companyID() . ") gseg ON gseg.groupSegmentID = il.segmentID
        INNER JOIN
    (SELECT srp_erp_groupitemcategory.*,srp_erp_groupitemcategorydetails.itemCategoryID as categoryID FROM srp_erp_groupitemcategory INNER JOIN srp_erp_groupitemcategorydetails ON srp_erp_groupitemcategory.itemCategoryID = srp_erp_groupitemcategorydetails.groupItemCategoryID WHERE groupID = " . current_companyID() . ") AS `ic1` ON (`ic1`.`categoryID` = `im`.`itemMainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_groupitemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID) WHERE $itmesOR AND il.documentDate < '" . format_date($this->input->post("from")) . "' AND il.companyID in (" . join(',', $company) . ") GROUP BY im.itemAutoID ORDER BY il.documentDate DESC)) AS a ORDER BY documentDate ASC
")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_report($fieldName = Null)
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';

        $feilds = "";
        $feildsra = array();
        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
//        $fieldNameChk = $this->input->post("fieldNameChk");

        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/

            foreach ($fieldNameChk as $val) {
                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feildsra[]= 'im.' . $val;
                } else {
                    $feildsra[] = 'il.' . $val;
                }
            }


            $feilds = join(',', $feildsra);
            $feilds = "," . $feilds;
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as AssetValueRpt,(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyReportingWacAmount,(im.companyReportingSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyReportingSellingPrice as salesPrice";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as AssetValueLocal,(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyLocalWacAmount,(im.companyLocalSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyLocalSellingPrice as salesPrice";
            }
            $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
        }
        /*SUM(il.transactionQTY/il.convertionRate) as transactionQTY*/
        $result = $this->db->query("SELECT im.itemDescription,TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( il.transactionQTY / il.convertionRate  )), 4 )))))) AS transactionQTY,il.itemSystemCode,im.seconeryItemCode,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory,il.itemAutoID $feilds
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)

	LEFT JOIN
		 (SELECT
		IFNULL(description,'uncategorized') as description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `im`.`subSubCategoryID`)

		LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND wareHouseAutoID IN(" . join(',', $location) . ")  GROUP BY `il`.`itemAutoID` ORDER BY il.documentDate DESC")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_report_new()
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");

        $itmesOR = " il.itemAutoID IN (" . join(',', $items) . ")";
        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            $feilds = join(',il.', $fieldNameChk);
            $feilds = ",il." . $feilds;
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as AssetValueRpt,(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyReportingWacAmount,(im.companyReportingSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyReportingSellingPrice as salesPrice";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as AssetValueLocal,(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyLocalWacAmount,(im.companyLocalSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyLocalSellingPrice as salesPrice";
            }
            $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
        }
        $result = $this->db->query("SELECT im.itemDescription,SUM(il.transactionQTY/il.convertionRate) as transactionQTY,il.itemSystemCode,im.seconeryItemCode, im.mainCategoryID, im.subcategoryID, im.subSubCategoryID, il.itemAutoID $feilds
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND wareHouseAutoID IN(" . join(',', $location) . ")  GROUP BY `il`.`itemAutoID` ORDER BY il.documentDate DESC")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_group_report()
    {
        $location = $this->input->post("location");
        $company = $this->get_group_company();
        $items = $this->input->post("itemTo");
        $items = $this->get_group_items($items);
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val["ItemAutoID"] . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';

        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            $feilds = join(',il.', $fieldNameChk);
            $feilds = ",il." . $feilds;
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as AssetValueRpt,(SUM(il.companyReportingAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyReportingWacAmount,(im.companyReportingSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyReportingSellingPrice as salesPrice";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as AssetValueLocal,(SUM(il.companyLocalAmount) / SUM(il.transactionQTY/il.convertionRate)) as companyLocalWacAmount,(im.companyLocalSellingPrice * SUM(il.transactionQTY/il.convertionRate)) as RetailValue,im.companyLocalSellingPrice as salesPrice";
            }
            $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
        }
        $result = $this->db->query("SELECT  im.itemAutoID AS itemAutoID,im.itemDescription,SUM(il.transactionQTY/il.convertionRate) as transactionQTY,im.itemSystemCode,ic1.description as mainCategory,ic2.description as subCategory $feilds
        FROM srp_erp_itemledger il
        INNER JOIN (SELECT srp_erp_groupitemmaster.*,srp_erp_groupitemmasterdetails.itemAutoID as itemID,srp_erp_itemmaster.mainCategoryID AS itemMainCategoryID  FROM srp_erp_groupitemmaster INNER JOIN srp_erp_groupitemmasterdetails ON srp_erp_groupitemmaster.itemAutoID = srp_erp_groupitemmasterdetails.groupItemMasterID INNER JOIN srp_erp_itemmaster
	ON srp_erp_itemmaster.itemAutoID = srp_erp_groupitemmasterdetails.itemAutoID  WHERE groupID = " . current_companyID() . ") im ON im.itemID = `il`.`itemAutoID`
	INNER JOIN (SELECT srp_erp_groupwarehousemaster.*,srp_erp_groupwarehousedetails.warehosueMasterID as warehouseID FROM srp_erp_groupwarehousemaster INNER JOIN srp_erp_groupwarehousedetails ON srp_erp_groupwarehousemaster.wareHouseAutoID = srp_erp_groupwarehousedetails.groupWarehouseMasterID WHERE groupID = " . current_companyID() . " AND wareHouseAutoID IN (" . join(',', $location) . ")) whm ON whm.warehouseID = il.wareHouseAutoID
        INNER JOIN
    (SELECT srp_erp_groupitemcategory.*,srp_erp_groupitemcategorydetails.itemCategoryID as categoryID FROM srp_erp_groupitemcategory INNER JOIN srp_erp_groupitemcategorydetails ON srp_erp_groupitemcategory.itemCategoryID = srp_erp_groupitemcategorydetails.groupItemCategoryID WHERE groupID = " . current_companyID() . ") AS `ic1` ON (`ic1`.`categoryID` = `im`.`itemMainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_groupitemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID IN (" . join(',', $company) . ") GROUP BY `im`.`itemAutoID` ORDER BY il.documentDate DESC")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_total_asset($fieldName = Null)
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';
        $feilds = array();

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
//        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyReportingAmount) as TotalAssetValueRpt,SUM(im.companyReportingSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyLocalAmount) as TotalAssetValueLocal,SUM(im.companyLocalSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
        }
        $result = $this->db->query(" SELECT " . join(',', $feilds) . "
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`) WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND wareHouseAutoID IN(" . join(',', $location) . ") AND il.companyID = " . $this->common_data['company_data']['company_id'])->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_total_asset_new()
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");

        $itmesOR = " il.itemAutoID IN (" . join(',', $items) . ")";
        $feilds = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyReportingAmount) as TotalAssetValueRpt,SUM(im.companyReportingSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyLocalAmount) as TotalAssetValueLocal,SUM(im.companyLocalSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
        }
        $result = $this->db->query(" SELECT " . join(',', $feilds) . "
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
       WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND wareHouseAutoID IN(" . join(',', $location) . ") AND il.companyID = " . $this->common_data['company_data']['company_id'])->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_valuation_summary_total_asset_group()
    {
        $location = $this->input->post("location");
        $company = $this->get_group_company();
        $items = $this->input->post("itemTo");
        $items = $this->get_group_items($items);
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val["ItemAutoID"] . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';
        $feilds = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            if (in_array("companyReportingWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyReportingAmount) as TotalAssetValueRpt,SUM(im.companyReportingSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
            if (in_array("companyLocalWacAmount", $fieldNameChk)) {
                $feilds[] = "SUM(il.companyLocalAmount) as TotalAssetValueLocal,SUM(im.companyLocalSellingPrice * (il.transactionQTY/il.convertionRate)) as TotalRetailValue";
            }
        }
        $result = $this->db->query(" SELECT " . join(',', $feilds) . "
        FROM srp_erp_itemledger il
        INNER JOIN (SELECT srp_erp_groupitemmaster.*,srp_erp_groupitemmasterdetails.itemAutoID as itemID,srp_erp_itemmaster.mainCategoryID AS itemMainCategoryID  FROM srp_erp_groupitemmaster INNER JOIN srp_erp_groupitemmasterdetails ON srp_erp_groupitemmaster.itemAutoID = srp_erp_groupitemmasterdetails.groupItemMasterID INNER JOIN srp_erp_itemmaster
	ON srp_erp_itemmaster.itemAutoID = srp_erp_groupitemmasterdetails.itemAutoID  WHERE groupID = " . current_companyID() . ") im ON im.itemID = `il`.`itemAutoID`
	INNER JOIN (SELECT srp_erp_groupwarehousemaster.*,srp_erp_groupwarehousedetails.warehosueMasterID as warehouseID FROM srp_erp_groupwarehousemaster INNER JOIN srp_erp_groupwarehousedetails ON srp_erp_groupwarehousemaster.wareHouseAutoID = srp_erp_groupwarehousedetails.groupWarehouseMasterID WHERE groupID = " . current_companyID() . " AND wareHouseAutoID IN (" . join(',', $location) . ")) whm ON whm.warehouseID = il.wareHouseAutoID
        INNER JOIN
    (SELECT srp_erp_groupitemcategory.*,srp_erp_groupitemcategorydetails.itemCategoryID as categoryID FROM srp_erp_groupitemcategory INNER JOIN srp_erp_groupitemcategorydetails ON srp_erp_groupitemcategory.itemCategoryID = srp_erp_groupitemcategorydetails.groupItemCategoryID WHERE groupID = " . current_companyID() . ") AS `ic1` ON (`ic1`.`categoryID` = `im`.`itemMainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_groupitemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`) WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID IN (" . join(',', $company) . ")")->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_counting_report($fieldName = null)
    {
        $location = $this->input->post("location");
        $items = $this->input->post("itemTo");
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';
        $having = array();
        $feilds = "";
        $feildsra = array();
        $feilds1 = "";
        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
        //        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/

            foreach ($fieldNameChk as $val) {

                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feildsra[]= 'im.' . $val;
                }
            }
            $feilds1 = join(',', $feildsra);
            if (!empty($feilds1)){
                $feilds1 = $feilds1. ",";
            }

            if (in_array("AssetValueLocal", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as AssetValueLocal";
                $feilds .= ",(SUM(il.companyLocalAmount)/SUM(il.transactionQTY/il.convertionRate)) as companyLocalWacAmount";
                $feilds .= ",ROUND((SUM(il.companyLocalAmount)/SUM(il.transactionQTY/il.convertionRate))) as companyLocalWacAmountRound";
                $feilds .= ",CL.DecimalPlaces as companyLocalCurrencyDecimalPlaces";
                $having[] = 'companyLocalWacAmountRound != 0';
            }
            if (in_array("AssetValueRpt", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as AssetValueRpt";
                $feilds .= ",(SUM(il.companyReportingAmount)/SUM(il.transactionQTY/il.convertionRate)) as companyReportingWacAmount";
                $feilds .= ",ROUND((SUM(il.companyReportingAmount)/SUM(il.transactionQTY/il.convertionRate))) as companyReportingWacAmountRound";
                $feilds .= ",CR.DecimalPlaces as companyReportingCurrencyDecimalPlaces";
                $having[] = 'companyReportingWacAmountRound != 0';
            }
        }
        $result = $this->db->query("SELECT $feilds1 il.transactionUOM,im.defaultUnitOfMeasure,im.itemDescription,srp_erp_warehousemaster.wareHouseLocation, il.wareHouseAutoID,TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( il.transactionQTY / il.convertionRate  )), 4 )))))) AS transactionQTY, srp_erp_unit_of_measure.UnitShortCode AS SUOMCode, SUM(SUOMQty) AS SUOMQty,il.salesPrice,il.itemSystemCode,im.seconeryItemCode, ic1.description as mainCategory, im.isSubitemExist, im.itemAutoID, ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory $feilds
        FROM srp_erp_itemledger il
        INNER JOIN
                `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = il.wareHouseAutoID
                LEFT JOIN srp_erp_unit_of_measure ON srp_erp_unit_of_measure.unitID = il.SUOMID
                    INNER JOIN
                (SELECT
                    description,
                    itemCategoryID
                FROM
                    srp_erp_itemcategory
                GROUP BY
                    itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
                    INNER JOIN
                (SELECT
                    description,
                    itemCategoryID
                FROM
                    srp_erp_itemcategory
                GROUP BY
                    itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
                    LEFT JOIN
                    (SELECT
                    IFNULL(description,'uncategorized') as description,
                    itemCategoryID
                FROM
                    srp_erp_itemcategory
                GROUP BY
                    itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `im`.`subSubCategoryID`)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
            WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " AND il.wareHouseAutoID IN(" . join(',', $location) . ") GROUP BY `il`.`itemAutoID`,il.wareHouseAutoID  ORDER BY il.itemAutoID DESC")->result_array(); //HAVING (" . join(' OR ', $having) . ")
            //echo $this->db->last_query();
        return $result;
    }


    function get_item_counting_group_report()
    {
        $location = $this->input->post("location");
        $company = $this->get_group_company();
        $items = $this->input->post("itemTo");
        $items = $this->get_group_items($items);
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) { /*generate the query according to selectd items*/
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " il.itemAutoID = '" . $item_val["ItemAutoID"] . "' ";
                $i++;
            }
        }
        $itmesOR .= ' ) ';
        $having = array();
        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            if (in_array("AssetValueLocal", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyLocalAmount) as AssetValueLocal";
                $feilds .= ",(SUM(il.companyLocalAmount)/SUM(il.transactionQTY/il.convertionRate)) as companyLocalWacAmount";
                $feilds .= ",ROUND((SUM(il.companyLocalAmount)/SUM(il.transactionQTY/il.convertionRate))) as companyLocalWacAmountRound";
                $feilds .= ",CL.DecimalPlaces as companyLocalCurrencyDecimalPlaces";
                $having[] = 'companyLocalWacAmountRound != 0';
            }
            if (in_array("AssetValueRpt", $fieldNameChk)) {
                $feilds .= ",SUM(il.companyReportingAmount) as AssetValueRpt";
                $feilds .= ",(SUM(il.companyReportingAmount)/SUM(il.transactionQTY/il.convertionRate)) as companyReportingWacAmount";
                $feilds .= ",ROUND((SUM(il.companyReportingAmount)/SUM(il.transactionQTY/il.convertionRate))) as companyReportingWacAmountRound";
                $feilds .= ",CR.DecimalPlaces as companyReportingCurrencyDecimalPlaces";
                $having[] = 'companyReportingWacAmountRound != 0';
            }
        }
        $result = $this->db->query("SELECT il.transactionUOM,im.itemDescription,whm.wareHouseLocation, whm.wareHouseAutoID,SUM(il.transactionQTY/il.convertionRate) as transactionQTY,il.salesPrice,il.itemSystemCode,ic1.description as mainCategory, im.isSubitemExist, im.itemAutoID, ic2.description as subCategory $feilds
        FROM srp_erp_itemledger il
         INNER JOIN (SELECT srp_erp_groupitemmaster.*,srp_erp_groupitemmasterdetails.itemAutoID as itemID,srp_erp_itemmaster.mainCategoryID AS itemMainCategoryID  FROM srp_erp_groupitemmaster INNER JOIN srp_erp_groupitemmasterdetails ON srp_erp_groupitemmaster.itemAutoID = srp_erp_groupitemmasterdetails.groupItemMasterID INNER JOIN srp_erp_itemmaster
            ON srp_erp_itemmaster.itemAutoID = srp_erp_groupitemmasterdetails.itemAutoID  WHERE groupID = " . current_companyID() . ") im ON im.itemID = `il`.`itemAutoID`
            INNER JOIN (SELECT srp_erp_groupwarehousemaster.*,srp_erp_groupwarehousedetails.warehosueMasterID as warehouseID FROM srp_erp_groupwarehousemaster INNER JOIN srp_erp_groupwarehousedetails ON srp_erp_groupwarehousemaster.wareHouseAutoID = srp_erp_groupwarehousedetails.groupWarehouseMasterID WHERE groupID = " . current_companyID() . " AND wareHouseAutoID IN (" . join(',', $location) . ")) whm ON whm.warehouseID = il.wareHouseAutoID
                INNER JOIN
            (SELECT srp_erp_groupitemcategory.*,srp_erp_groupitemcategorydetails.itemCategoryID as categoryID FROM srp_erp_groupitemcategory INNER JOIN srp_erp_groupitemcategorydetails ON srp_erp_groupitemcategory.itemCategoryID = srp_erp_groupitemcategorydetails.groupItemCategoryID WHERE groupID = " . current_companyID() . ") AS `ic1` ON (`ic1`.`categoryID` = `im`.`itemMainCategoryID`)
                INNER JOIN
            (SELECT
                description,
                itemCategoryID
            FROM
                srp_erp_groupitemcategory
            GROUP BY
                itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
        WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' AND il.companyID IN (" . join(',', $company) . ") GROUP BY `im`.`itemAutoID`,whm.wareHouseAutoID HAVING (" . join(' OR ', $having) . ") ORDER BY im.itemAutoID DESC")->result_array();
                //echo $this->db->last_query();
        return $result;
    }

    function get_item_batch_counting_report($fieldName = null)
    {
        $location = $this->input->post("location");
        $items_select = $this->input->post("itemTo");
        $base_arr = array();
      
        $this->db->where_in('itemAutoID',$items_select);
        $this->db->from('srp_erp_itemmaster');
        $items = $this->db->get()->result_array();

        //Warehouse list
        $this->db->where_in('wh.wareHouseAutoID',$location);
        $this->db->from('srp_erp_warehousemaster as wh');
        $warehouse_list = $this->db->get()->result_array();


        $this->db->where_in('wi.itemAutoID',$items_select);
        $this->db->where_in('wi.wareHouseAutoID',$location);
        $this->db->from('srp_erp_warehousemaster as wh');
        $this->db->join('srp_erp_warehouseitems as wi','wh.wareHouseAutoID = wi.wareHouseAutoID','left');
        $warehouse_items = $this->db->get()->result_array();

        $base_warehouseitems_arr = array();
        foreach($warehouse_items as $key => $value){
            $base_warehouseitems_arr[$value['itemAutoID']][$value['wareHouseAutoID']] = $value;
        }

        //Batch list
        $this->db->where_in('itemMasterID',$items_select);
        $this->db->where_in('wareHouseAutoID',$location);
        $this->db->from('srp_erp_inventory_itembatch as ibat');
        $this->db->join('srp_erp_itemmaster as si','si.itemAutoID = ibat.itemMasterID','left');
        $warehouse_batch_items = $this->db->get()->result_array();

        $base_items_arr = array();
        foreach($warehouse_batch_items as $key => $batch_values){
            $base_items_arr[$batch_values['itemMasterID']][$batch_values['wareHouseAutoID']][] = $batch_values;
        }

        $base_arr = array('items'=> $items,'warehouse_list'=>$warehouse_list,'warehouse_items'=>$base_warehouseitems_arr,'warehouse_batch'=>$base_items_arr);
        
        return $base_arr;
        
    }



    function get_item_fast_moving_report($fieldName = Null)
    {
        $limit = ""; /*limit the record according to selected report type*/
        $segment = $this->input->post("segment");
        $customerID = $this->input->post("customerAutoID");
        $currentCompanyID = current_companyID();

        $documentID = $this->input->post("documentID");
        $segmentfltr = '';
        $customerfltr = '';
        if (!empty($segment)) {
            $segmentfltr = "AND segmentID IN(" . join(',', $segment) . ")";
        }
        if(!empty($customerID))
        {
            $customerfltr = "AND DocumentcustomerID IN(" . join(',', $customerID) . ")";
        }
        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND documentCode IN(" . $documentID . ")";
        } else {
            $docIDs = "AND documentCode IN('CINV','RV','POS','DO')";
        }
        if ($this->input->post("rptType") == 2) {
            $limit = "limit 10";
        } else if ($this->input->post("rptType") == 3) {
            $limit = "limit 20";
        } else {
            $limit = "";
        }

        $feilds = "";

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
//        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feilds .= 'im.' . $val . ',';

                }

                if ($val == "companyLocalAmount") {
                    $feilds .= "SUM(((il.transactionQTY/convertionRate)*-1) * il.salesPrice/il.companyLocalExchangeRate) as " . $val . ",";
                    $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= "SUM(((il.transactionQTY/convertionRate)*-1) * il.salesPrice/il.companyReportingExchangeRate) as " . $val . ",";
                    $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                }

            }
        }
        $result = $this->db->query("SELECT $feilds im.defaultUnitOfMeasure as UOM,im.itemDescription,TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( il.transactionQTY / il.convertionRate  )), 4 )))))) *-1 as transactionQTY,im.itemSystemCode,im.seconeryItemCode,im.currentStock,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory
        FROM srp_erp_itemledger il
        INNER JOIN
            `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . " AND im.mainCategory = 'Inventory'
            INNER JOIN ( SELECT description, categoryTypeID FROM srp_erp_itemcategory GROUP BY categoryTypeID ) AS `ic1` ON ( `ic1`.`categoryTypeID` = `im`.`financeCategory` )
                INNER JOIN
            (SELECT
                description, itemCategoryID
            FROM
                srp_erp_itemcategory GROUP BY itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
                LEFT JOIN
                (SELECT
                IFNULL(description,'uncategorized') as description,
                itemCategoryID
            FROM
                srp_erp_itemcategory
            GROUP BY
                itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `im`.`subSubCategoryID`)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
                LEFT JOIN (select
        documentID as DOCID,
        invoiceAutoID as DocumentAutoID,
        IFNULL(customerID,0)  as DocumentcustomerID
        from
        srp_erp_customerinvoicemaster
        where
        companyID = $currentCompanyID
        UNION ALL
        select
        documentID as DOCID,
        receiptVoucherAutoId as DocumentAutoID,
        IFNULL(customerID,0)    as DocumentcustomerID
        from
        srp_erp_customerreceiptmaster
        where
        companyID = $currentCompanyID
        UNION ALL
        select
        documentCode as  DOCID,
        InvoiceID as DocumentAutoID,
        IFNULL(customerID,0)   as DocumentcustomerID
        from
        srp_erp_pos_invoice
        where
        companyID = $currentCompanyID
        UNION ALL
        select
        documentID as  DOCID,
        DOAutoID as DocumentAutoID,
        customerID as DocumentcustomerID
        from
        srp_erp_deliveryorder
        where
        companyID = $currentCompanyID ) customer on customer.DocumentAutoID = il.documentAutoID AND customer.DOCID = il.documentID
         WHERE il.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND il.companyID = " . $this->common_data['company_data']['company_id'] . " $segmentfltr $docIDs $customerfltr  GROUP BY `il`.`itemAutoID` ORDER BY transactionQTY DESC $limit")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_finance_tb_report()
    {
        $finaceYearYN = getPolicyValues('HFY','All');
        $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
        $Date = (($finaceYearYN == 1) ? format_date($this->input->post("from")):$financialBeginingDate["beginingDate"]);
        $DocumentDate =  (($finaceYearYN == 1) ? format_date($this->input->post("to")):$financialBeginingDate["beginingDate"]);
        $DocumentDateFrom = (($finaceYearYN == 1) ? format_date($this->input->post("from")):$financialBeginingDate["beginingDate"]);
        $DocumentDateTo = (($finaceYearYN == 1) ? format_date($this->input->post("to")):format_date($this->input->post("from")));

        //Add segment filter
        $segment_arr = fetch_segment_for_reports();
        $field_segment = join(',',$segment_arr);

        switch ($this->input->post('rptType')) {
            case "1": /*Month Wise*/
                $months = get_month_list_from_date($Date, $DocumentDateTo, "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds2 .= "SUM(IF(a.documentDate < '" . $Date . "',a." . $val . ",0)) AS `openingBalance`,";
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds2 .= "SUM(if(b.masterCategory = 'BS',if(DATE_FORMAT(a.documentDate,'%Y-%m') <= '$key',a." . $val . ",0),if(DATE_FORMAT(a.documentDate,'%Y-%m') = '$key',a." . $val . ",0) )) as `" . $key . "`,";
                            }
                        }
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= $val . "DecimalPlaces,";
                        $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                    }
                }

                // AND srp_erp_generalledger.segmentID IN (".$field_segment.") 

                $sql = "SELECT $feilds2
                    b.GLDescription,b.masterCategory,b.GLSecondaryCode,b.systemAccountCode,b.GLAutoID FROM (
                    (SELECT $feilds srp_erp_generalledger.GLAutoID,srp_erp_generalledger.documentDate FROM srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE documentDate < '" . $DocumentDateFrom . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY GLAutoID,documentDate HAVING (" . join(' AND ', $having) . "))
                    UNION ALL
                    (SELECT $feilds GLAutoID,documentDate FROM srp_erp_generalledger
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE documentDate BETWEEN '" . $DocumentDateFrom . "' AND '" . $DocumentDateTo . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY GLAutoID,documentDate HAVING (" . join(' AND ', $having) . "))) AS a
                        LEFT JOIN
                    srp_erp_chartofaccounts b ON a.GLAutoID = b.GLAutoID GROUP BY a.GLAutoID ORDER BY b.GLSecondaryCode ASC";
               $result = $this->db->query($sql)->result_array();
                return $result;
                break;
            case "3": /*YTD*/
                $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selected columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        $feilds2 .= "SUM(a." . $val . ") as " . $val . ",";
                        $having[] = '(' . $val . '!= -0 AND ' . $val . ' != 0)';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= $val . "DecimalPlaces,";
                    }
                }
                $result = $this->db->query("SELECT $feilds2
                    b.GLDescription,b.masterCategory,b.GLSecondaryCode,b.systemAccountCode,b.GLAutoID FROM
                    ((SELECT $feilds srp_erp_generalledger.GLAutoID,srp_erp_generalledger.documentDate FROM srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE documentDate < '" . $DocumentDateFrom . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY GLAutoID)
                    UNION ALL (SELECT $feilds GLAutoID,documentDate FROM srp_erp_generalledger
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE documentDate BETWEEN '" . $DocumentDateFrom. "' AND '" . $DocumentDateTo . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY GLAutoID)) AS a
                    LEFT JOIN
                    srp_erp_chartofaccounts b ON a.GLAutoID = b.GLAutoID WHERE (" . join(' OR ', $having) . ") GROUP BY a.GLAutoID ORDER BY b.GLSecondaryCode ASC")->result_array();
                //echo $this->db->last_query();
                //AND (srp_erp_generalledger.segmentID IN (".$field_segment.") OR srp_erp_generalledger.segmentID IS NULL)
                return $result;
                break;
        }
    }


    function get_finance_tb_group_report()
    {
        switch ($this->input->post('rptType')) {
            case "1": /*Month Wise*/
                $company = $this->get_group_company();
                $financialBeginingDate = get_group_financial_year(format_date($this->input->post("from")));
                $months = get_month_list_from_date($financialBeginingDate["beginingDate"], format_date($this->input->post("from")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds2 .= "SUM(IF(a.documentDate < '" . $financialBeginingDate["beginingDate"] . "',a." . $val . ",0)) AS `openingBalance`,";
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds2 .= "SUM(if(b.masterCategory = 'BS',if(DATE_FORMAT(a.documentDate,'%Y-%m') <= '$key',a." . $val . ",0),if(DATE_FORMAT(a.documentDate,'%Y-%m') = '$key',a." . $val . ",0) )) as `" . $key . "`,";
                            }
                        }
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= $val . "DecimalPlaces,";
                        $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                    }
                }

                $sql = "SELECT $feilds2
    b.GLDescription,b.masterCategory,b.GLSecondaryCode,b.systemAccountCode,b.GLAutoID FROM (
    (SELECT $feilds coa.GLAutoID as GLAutoID,srp_erp_generalledger.documentDate FROM srp_erp_generalledger
    INNER JOIN (SELECT chartofAccountID,GLSecondaryCode,GLDescription,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . " AND masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    WHERE documentDate < '" . $financialBeginingDate["beginingDate"] . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ") GROUP BY GLAutoID,documentDate HAVING (" . join(' AND ', $having) . "))
    UNION ALL
    (SELECT $feilds coa.GLAutoID,documentDate FROM srp_erp_generalledger
    INNER JOIN (SELECT chartofAccountID,GLSecondaryCode,GLDescription,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    WHERE documentDate BETWEEN '" . $financialBeginingDate["beginingDate"] . "' AND '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ") GROUP BY GLAutoID,documentDate HAVING (" . join(' AND ', $having) . "))) AS a
        LEFT JOIN
    ( SELECT GLSecondaryCode,GLDescription,GLAutoID,masterCategory,systemAccountCode FROM srp_erp_groupchartofaccounts WHERE groupID = " . current_companyID() . ") b ON a.GLAutoID = b.GLAutoID GROUP BY a.GLAutoID ORDER BY b.GLSecondaryCode ASC";
                $result = $this->db->query($sql)->result_array();
                return $result;
                break;
            case "3": /*YTD*/
                $company = $this->get_group_company();
                $financialBeginingDate = get_group_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selected columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        $feilds2 .= "SUM(a." . $val . ") as " . $val . ",";
                        $having[] = '(' . $val . '!= -0 AND ' . $val . ' != 0)';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= $val . "DecimalPlaces,";
                    }
                }
                $result = $this->db->query("SELECT $feilds2
    b.GLDescription,b.masterCategory,b.GLSecondaryCode,b.systemAccountCode,b.GLAutoID FROM
    ((SELECT $feilds coa.GLAutoID,srp_erp_generalledger.documentDate FROM srp_erp_generalledger
    INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . " AND masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    WHERE documentDate < '" . $financialBeginingDate["beginingDate"] . "' AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ") GROUP BY coa.GLAutoID)
    UNION ALL (SELECT $feilds coa.GLAutoID,documentDate FROM srp_erp_generalledger
     LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
     INNER JOIN (SELECT chartofAccountID,GLSecondaryCode,GLDescription,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE documentDate BETWEEN '" . $financialBeginingDate["beginingDate"] . "' AND '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ") GROUP BY coa.GLAutoID)) AS a
        LEFT JOIN
        (SELECT GLSecondaryCode,GLDescription,GLAutoID,masterCategory,systemAccountCode FROM srp_erp_groupchartofaccounts WHERE groupID = " . current_companyID() . ") b ON a.GLAutoID = b.GLAutoID WHERE (" . join(' OR ', $having) . ") GROUP BY a.GLAutoID ORDER BY b.GLSecondaryCode ASC")->result_array();
                return $result;
                break;
        }
    }

    function get_finance_income_statement_report()
    {
        switch ($this->input->post('rptType')) { 
            case "4": /*Month Wise budget*/
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");
                $months = get_month_list_from_date(format_date($this->input->post("from")), format_date($this->input->post("to")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $feildsmain = "";
                $having = array();
                $having2 = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,";
                                $feildsmain .= "IFNULL(gl.`" . $key . "`,0)   AS `" . $key . "`, bd. `" . $key . "` AS `budget" . $key . "` ,";
                                $feilds2 .= "SUM(if(CONCAT(srp_erp_budgetdetail.budgetYear,'-',LPAD(srp_erp_budgetdetail.budgetMonth,2,0)) = '$key',srp_erp_budgetdetail." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                                $having2[] = "(`" . $key . "` != 0 OR bd.`" . $key . "` !=  0)";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feildsmain .= "IFNULL(gl.companyLocalAmountDecimalPlaces,bd.companyLocalAmountDecimalPlaces) as companyLocalAmountDecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feildsmain .= "IFNULL(gl.companyReportingAmountDecimalPlaces,bd.companyReportingAmountDecimalPlaces) as companyReportingAmountDecimalPlaces,";
                        }
                    }
                }


                $result = $this->db->query("SELECT $feildsmain
                    IFNULL(gl.masterAutoID,bd.masterAutoID) as masterAutoID,
                    IFNULL(gl.GLAutoID,bd.GLAutoID) as GLAutoID,
                    IFNULL(gl.documentDate,bd.documentDate) as documentDate,
                    IFNULL(gl.segmentID,bd.segmentID) as segmentID,
                    IFNULL(gl.masterCategory,bd.masterCategory) as masterCategory,
                    IFNULL(gl.GLDescription,bd.GLDescription) as GLDescription,
                    IFNULL(gl.accountCategoryTypeID,bd.accountCategoryTypeID) as accountCategoryTypeID,
                    IFNULL(gl.mainCategory,bd.mainCategory) as mainCategory,
                    IFNULL(gl.subCategory,bd.subCategory) as subCategory,
                    IFNULL(gl.subsubCategory,bd.subsubCategory) as subsubCategory
                FROM
                    (
                SELECT
                    $feilds2
                    $feilds3
                    srp_erp_chartofaccounts.masterAutoID,
                    srp_erp_chartofaccounts.GLAutoID,
                    srp_erp_budgetmaster.documentDate as documentDate,
                    srp_erp_budgetdetail.segmentID,
                    srp_erp_chartofaccounts.masterCategory,
                    srp_erp_chartofaccounts.GLDescription,
                    srp_erp_accountcategorytypes.accountCategoryTypeID,
                IF
                    ( srp_erp_chartofaccounts.subCategory = 'PLE', 'EXPENSE', IF ( srp_erp_chartofaccounts.subCategory = 'PLI', 'INCOME', 'ND' ) ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription AS subCategory,
                    ca2.GLDescription AS subsubCategory
                FROM
                    srp_erp_budgetdetail
                    INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_budgetdetail.GLAutoID = srp_erp_chartofaccounts.GLAutoID
                    AND srp_erp_chartofaccounts.masterCategory = 'PL'
                    AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "

                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID

                    LEFT JOIN ( SELECT GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . " ) ca2 ON ( ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID )



                    LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_budgetdetail.companyReportingCurrencyID )
                    LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_budgetdetail.companyLocalCurrencyID )

                WHERE
                    srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . "
                    AND srp_erp_budgetmaster.approvedYN = 1
                    AND srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ")
                    AND CONCAT( budgetYear, '-', LPAD( budgetMonth, 2, 0 ) ) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "'
                GROUP BY
                    GLAutoID
                    ) bd


                    LEFT JOIN (
                SELECT
                    $feilds
                    srp_erp_chartofaccounts.masterAutoID,
                    srp_erp_chartofaccounts.GLAutoID,
                    srp_erp_generalledger.documentDate,
                    srp_erp_generalledger.segmentID,
                    srp_erp_chartofaccounts.masterCategory,
                    srp_erp_chartofaccounts.GLDescription,
                    srp_erp_accountcategorytypes.accountCategoryTypeID,
                IF
                    ( srp_erp_chartofaccounts.subCategory = 'PLE', 'EXPENSE', IF ( srp_erp_chartofaccounts.subCategory = 'PLI', 'INCOME', 'ND' ) ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription AS subCategory,
                    ca2.GLDescription AS subsubCategory
                FROM
                    srp_erp_generalledger
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID
                    AND srp_erp_chartofaccounts.masterCategory = 'PL'
                    AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "

                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID

                    LEFT JOIN ( SELECT GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . " ) ca2 ON ( ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID )



                    LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID )
                    LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID )
                WHERE
                    srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'
                    AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                    AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")
                    GROUP BY
                    srp_erp_chartofaccounts.masterAutoID,
                    ca2.GLDescription,
                    srp_erp_chartofaccounts.accountCategoryTypeID,
                    srp_erp_chartofaccounts.GLAutoID,
                    srp_erp_chartofaccounts.GLDescription,
                    mainCategory
                    HAVING (" . join(' OR ', $having) . ")
                    ) gl On gl.GLAutoID=bd.GLAutoID


                    HAVING (" . join(' OR ', $having2) . ") ")->result_array();
                    //echo $this->db->last_query();
                    //exit();

                return $result;
                break;
            case "1": /*Month Wise*/
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");
                $months = get_month_list_from_date(format_date($this->input->post("from")), format_date($this->input->post("to")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,bd.`" . $key . "` as `budget$key`,";
                                $feilds2 .= "SUM(if(CONCAT(srp_erp_budgetdetail.budgetYear,'-',LPAD(srp_erp_budgetdetail.budgetMonth,2,0)) = '$key',srp_erp_budgetdetail." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }

                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                            GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                        ORDER BY GLAutoID
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID WHERE srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND  srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ") AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having) . ") 
                    ORDER BY sortOrder,srp_erp_chartofaccounts.GLAutoID")->result_array();
                // echo $this->db->last_query();
                return $result;
                break;
            case "5": // YTD Budget data
                $segment = $this->input->post("segment");
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";

                $feildsmain = "";
                $having = array();
                $having2 = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) {
                    foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") * -1 AS " . $val . ",";
                        $feilds2 .= "SUM(srp_erp_budgetdetail." . $val . ") AS " . $val . ",";

                        $feildsmain .= "IFNULL(gl." . $val . ",0)  AS " . $val . ", bd." . $val . " AS budget" . $val . ",";

                        $having[] = $val . ' != -0 OR ' . $val . ' != 0';
                        $having2[] = $val . ' != 0 OR bd.' . $val . ' != 0';

                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds2 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";

                            $feildsmain .= "IFNULL(gl.companyLocalAmountDecimalPlaces,bd.companyLocalAmountDecimalPlaces) as companyLocalAmountDecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds2 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feildsmain .= "IFNULL(gl.companyReportingAmountDecimalPlaces,bd.companyReportingAmountDecimalPlaces) as companyReportingAmountDecimalPlaces,";
                        }
                    }
                }
                $result = $this->db->query("SELECT $feildsmain
                        IFNULL(gl.masterAutoID,bd.masterAutoID) as masterAutoID,
                        IFNULL(gl.GLAutoID,bd.GLAutoID) as GLAutoID,
                        IFNULL(gl.documentDate,bd.documentDate) as documentDate,
                        IFNULL(gl.segmentID,bd.segmentID) as segmentID,
                        IFNULL(gl.masterCategory,bd.masterCategory) as masterCategory,
                        IFNULL(gl.GLDescription,bd.GLDescription) as GLDescription,
                        IFNULL(gl.accountCategoryTypeID,bd.accountCategoryTypeID) as accountCategoryTypeID,
                        IFNULL(gl.mainCategory,bd.mainCategory) as mainCategory,
                        IFNULL(gl.subCategory,bd.subCategory) as subCategory,
                        IFNULL(gl.subsubCategory,bd.subsubCategory) as subsubCategory
                    FROM
                        (
                    SELECT
                        $feilds2
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_budgetmaster.documentDate as documentDate,
                        srp_erp_budgetdetail.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        srp_erp_accountcategorytypes.accountCategoryTypeID,
                    IF
                        ( srp_erp_chartofaccounts.subCategory = 'PLE', 'EXPENSE', IF ( srp_erp_chartofaccounts.subCategory = 'PLI', 'INCOME', 'ND' ) ) AS mainCategory,
                        srp_erp_accountcategorytypes.CategoryTypeDescription AS subCategory,
                        ca2.GLDescription AS subsubCategory
                    FROM
                        srp_erp_budgetdetail
                        INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID



                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_budgetdetail.GLAutoID = srp_erp_chartofaccounts.GLAutoID
                        AND srp_erp_chartofaccounts.masterCategory = 'PL'
                        AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "

                        INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID

                        LEFT JOIN ( SELECT GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . " ) ca2 ON ( ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID )



                        LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_budgetdetail.companyReportingCurrencyID )
                        LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_budgetdetail.companyLocalCurrencyID )

                    WHERE
                        srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . "
                        AND srp_erp_budgetmaster.approvedYN = 1
                        AND srp_erp_chartofaccounts.accountDefaultType != '3'
                        AND srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ")
                        AND CONCAT( budgetYear, '-', LPAD( budgetMonth, 2, 0 ) ) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "'
                    GROUP BY
                        GLAutoID
                        ) bd


                        LEFT JOIN (
                    SELECT
                        $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        srp_erp_accountcategorytypes.accountCategoryTypeID,
                    IF
                        ( srp_erp_chartofaccounts.subCategory = 'PLE', 'EXPENSE', IF ( srp_erp_chartofaccounts.subCategory = 'PLI', 'INCOME', 'ND' ) ) AS mainCategory,
                        srp_erp_accountcategorytypes.CategoryTypeDescription AS subCategory,
                        ca2.GLDescription AS subsubCategory
                    FROM
                        srp_erp_generalledger
                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID
                        AND srp_erp_chartofaccounts.masterCategory = 'PL'
                        AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "

                        INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID

                        LEFT JOIN ( SELECT GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . " ) ca2 ON ( ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID )



                        LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID )
                        LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID )
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'
                        AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                        AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")
                        AND srp_erp_chartofaccounts.accountDefaultType != '3'
                        GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory
                        HAVING (" . join(' OR ', $having) . ")
                        ) gl On gl.GLAutoID=bd.GLAutoID


                        HAVING (" . join(' OR ', $having2) . ") ")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
            case "3": /*YTD*/
                $segment = $this->input->post("segment");
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) {
                    foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") * -1 as " . $val . ", bd." . $val . " as budget" . $val . ",";
                        $feilds2 .= "SUM(srp_erp_budgetdetail." . $val . ") as " . $val . ",";
                        $having[] = $val . ' != -0 OR ' . $val . ' != 0';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }
                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        srp_erp_accountcategorytypes.accountCategoryTypeID,
                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID WHERE srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND  srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ") AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder,srp_erp_chartofaccounts.GLAutoID;")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;


            case "7": /*YTD - LTD*/
                $newfromdate = null;
                $newtodate = null;

                $segment = $this->input->post("segment");
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $fromdateformatted = format_date($this->input->post("from"));
                $todateformatted = format_date($this->input->post("to"));
                $datefrom = strtotime($fromdateformatted . ' -1 year');
                $dateto = strtotime($todateformatted . ' -1 year');
                $newfromdate = date('Y-m-d', $datefrom);
                $newtodate = date('Y-m-d', $dateto);

                $feilds = "";
                $feildslytd = "";
                $feildslytdsum = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) {
                    foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") * -1 as " . $val . ", bd." . $val . " as budget" . $val . ",";
                        $feilds2 .= "SUM(srp_erp_budgetdetail." . $val . ") as " . $val . ",";
                        $feildslytd = "IFNULL(((lytd." . $val . ")),0) as lytd" . $val . ",";
                        $feildslytdsum = "SUM( srp_erp_generalledger." . $val . " ) * - 1 AS " . $val . ",";

                        $having[] = $val . ' != -0 OR ' . $val . ' != 0';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }


                $result = $this->db->query("SELECT $feilds $feildslytd
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        srp_erp_accountcategorytypes.accountCategoryTypeID,
                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID WHERE srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND  srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ") AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)

                    LEFT JOIN (SELECT
                        $feildslytdsum
                        IF( srp_erp_chartofaccounts.subCategory = 'PLE', 'EXPENSE', IF ( srp_erp_chartofaccounts.subCategory = 'PLI', 'INCOME', 'ND' ) ) AS mainCategory,
                        srp_erp_generalledger.GLAutoID as GLAutoID
                    FROM
                        srp_erp_generalledger
                        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID
                        AND srp_erp_chartofaccounts.masterCategory = 'PL'
                        AND srp_erp_chartofaccounts.accountDefaultType != '3'
                        AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                        INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID

                    LEFT JOIN ( SELECT GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "  ) ca2 ON ( ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID )
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($newfromdate) . "'
                        AND '" . format_date($newtodate) . "'
                        AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                        AND srp_erp_generalledger.segmentID IN (" . join(',', $segment) . ")
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory
                    HAVING (" . join(' OR ', $having) . ")) lytd on lytd.GLAutoID = srp_erp_generalledger.GLAutoID

                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder,srp_erp_chartofaccounts.GLAutoID;")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;

            case "8": /*Month Wise lytd*/

                $fromdateformatted = format_date($this->input->post("from"));
                $todateformatted = format_date($this->input->post("to"));
                $datefrom = strtotime($fromdateformatted . ' -1 year');
                $dateto = strtotime($todateformatted . ' -1 year');
                $newfromdate = date('Y-m-d', $datefrom);
                $newtodate = date('Y-m-d', $dateto);

                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");

                $months = get_month_list_from_date(format_date($this->input->post("from")), format_date($this->input->post("to")), "Y-m", "1 month"); /*calculate months*/
                $monthslytd = get_month_list_from_date(format_date($newfromdate), format_date($newtodate), "Y-m", "1 month"); /*calculate months lytd*/
                $feilds = "";
                $feildslytdmonth = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $having_monthwiseltd = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,bd.`" . $key . "` as `budget$key`,monthwiselytd.`" . $key . "` as `monthwise$key`,";
                                $feilds2 .= "SUM(if(CONCAT(srp_erp_budgetdetail.budgetYear,'-',LPAD(srp_erp_budgetdetail.budgetMonth,2,0)) = '$key',srp_erp_budgetdetail." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                            }

                        }
                        if (!empty($monthslytd)) {
                            foreach ($monthslytd as $key1 => $val2) {
                                $prevyear = explode('-', $key1);
                                $year = ($prevyear[0] + 1) . '-' . $prevyear[1];
                                $feildslytdmonth .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key1',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $year . "`,";
                                $having_monthwiseltd[] = "(`" . $year . "` != 0 OR `" . $year . "` != - 0)";

                            }
                        }


                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }

                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID WHERE srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND  srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ") AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)

                    LEFT JOIN (SELECT $feildslytdmonth
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($newfromdate) . "' AND '" . format_date($newtodate) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having_monthwiseltd) . ") ORDER BY sortOrder)monthwiselytd on monthwiselytd.GLAutoID = srp_erp_generalledger.GLAutoID



                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder,srp_erp_chartofaccounts.GLAutoID")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;


            case "9": /*Segment*/
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
              //  var_dump($segment);
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($segment)) {
                            foreach ($segment as $key) {
                                $feilds .= "SUM(if((srp_erp_generalledger.segmentID) = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,bd.`" . $key . "` as `budget$key`,";
                                $feilds2 .= "SUM(if(srp_erp_budgetdetail.segmentID = '$key',srp_erp_budgetdetail." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }

                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_generalledger.documentDate,
                        srp_erp_generalledger.segmentID,
                        srp_erp_segment.segmentCode,
                        srp_erp_segment.description,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    INNER JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_generalledger.segmentID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID WHERE srp_erp_budgetdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND  srp_erp_budgetdetail.segmentID IN(" . join(',', $segment) . ") AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE
                        srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_chartofaccounts.accountDefaultType != '3'
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder,srp_erp_chartofaccounts.GLAutoID")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;

        }
    }


    function get_finance_income_statement_group_report()
    {
        /*LEFT JOIN (
            SELECT chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND masterCategory = 'PL'
        ) ca2 ON (
            ca2.GLAutoID = coa.masterAutoID
        )*/
        switch ($this->input->post('rptType')) {
            case "4":
            case "1": /*Month Wise*/
                $company = $this->get_group_company();
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");
                $months = get_month_list_from_date(format_date($this->input->post("from")), format_date($this->input->post("to")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,SUM(bd.`" . $key . "`) as `budget$key`,";
                                $feilds2 .= "SUM(if(CONCAT(srp_erp_budgetdetail.budgetYear,'-',srp_erp_budgetdetail.budgetMonth) = '$key',srp_erp_budgetdetail." . $val . " * -1,0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }

                $result = $this->db->query("SELECT $feilds
	coa.masterAutoID,
	coa.GLAutoID,
	srp_erp_generalledger.documentDate,
	srp_erp_generalledger.segmentID,
	coa.masterCategory,
	coa.GLDescription,
	IF (
	coa.subCategory = 'PLE',
	'EXPENSE',

IF (
	coa.subCategory = 'PLI',
	'INCOME',
	'ND'
)
) AS mainCategory,
srp_erp_accountCategoryTypes.CategoryTypeDescription as subCategory,
ca2.GLDescription as subsubCategory
FROM
	srp_erp_generalledger
	LEFT JOIN srp_erp_groupsegmentdetails on srp_erp_groupsegmentdetails.segmentID = srp_erp_generalledger.segmentID
	LEFT JOIN srp_erp_groupsegment on srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID
INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,masterAutoID,GLAutoID,masterCategory,subCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND masterCategory = 'PL') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
INNER JOIN srp_erp_accountCategoryTypes ON srp_erp_accountCategoryTypes.accountCategoryTypeID = coa.accountCategoryTypeID
LEFT JOIN (SELECT GLSecondaryCode,GLDescription,accountCategoryTypeID,GLAutoID FROM srp_erp_groupchartofaccounts WHERE groupID =  " . current_companyID() . " AND masterCategory = 'PL' ) ca2 ON ( ca2.GLAutoID = coa.masterAutoID )
LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID
 WHERE srp_erp_budgetdetail.companyID IN (" . join(',', $company) . ") AND srp_erp_budgetdetail.segmentID IN (SELECT srp_erp_groupsegmentdetails.segmentID FROM srp_erp_groupsegment
INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID AND groupID = 1 WHERE srp_erp_groupsegment.segmentID IN (" . join(',', $segment) . ")) AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ") AND srp_erp_groupsegment.segmentID IN (" . join(',', $segment) . ")
GROUP BY
	coa.masterAutoID,
	ca2.GLDescription,
	coa.accountCategoryTypeID,
	coa.GLAutoID,
	coa.GLDescription,
	mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
            case "5":
            case "3": /*YTD*/
                $company = $this->get_group_company();
                $segment = $this->input->post("segment");
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $financialBeginingDate = get_group_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) {
                    foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                        $feilds .= "SUM(srp_erp_generalledger." . $val . ") * -1 as " . $val . ", SUM(bd." . $val . ") * -1 as budget" . $val . ",";
                        $feilds2 .= "SUM(srp_erp_budgetdetail." . $val . ") * -1 as " . $val . ",";
                        $having[] = $val . ' != -0 OR ' . $val . ' != 0';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }
                $result = $this->db->query("SELECT $feilds
	coa.masterAutoID,
	coa.GLAutoID,
	srp_erp_generalledger.documentDate,
	srp_erp_generalledger.segmentID,
	coa.masterCategory,
	coa.GLDescription,
	srp_erp_accountCategoryTypes.accountCategoryTypeID,
IF (
	coa.subCategory = 'PLE',
	'EXPENSE',

IF (
	coa.subCategory = 'PLI',
	'INCOME',
	'ND'
)
) AS mainCategory,
srp_erp_accountCategoryTypes.CategoryTypeDescription as subCategory,
ca2.GLDescription as subsubCategory
FROM
	srp_erp_generalledger
		LEFT JOIN srp_erp_groupsegmentdetails on srp_erp_groupsegmentdetails.segmentID = srp_erp_generalledger.segmentID
	LEFT JOIN srp_erp_groupsegment on srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID
INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,masterAutoID,GLAutoID,masterCategory,subCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND masterCategory = 'PL') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
INNER JOIN srp_erp_accountCategoryTypes ON srp_erp_accountCategoryTypes.accountCategoryTypeID = coa.accountCategoryTypeID
LEFT JOIN (SELECT GLSecondaryCode,GLDescription,accountCategoryTypeID,GLAutoID FROM srp_erp_groupchartofaccounts WHERE groupID =  " . current_companyID() . " AND masterCategory = 'PL' ) ca2 ON ( ca2.GLAutoID = coa.masterAutoID )
LEFT JOIN (SELECT $feilds2 srp_erp_budgetdetail.GLAutoID FROM srp_erp_budgetdetail INNER JOIN srp_erp_budgetmaster ON srp_erp_budgetdetail.budgetAutoID = srp_erp_budgetmaster.budgetAutoID
WHERE srp_erp_budgetdetail.companyID IN (" . join(',', $company) . ") AND srp_erp_budgetdetail.segmentID IN (SELECT srp_erp_groupsegmentdetails.segmentID FROM srp_erp_groupsegment
INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID AND groupID = 1 WHERE srp_erp_groupsegment.segmentID IN (" . join(',', $segment) . ")) AND CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "' GROUP BY GLAutoID) bd ON (bd.GLAutoID = srp_erp_generalledger.GLAutoID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ") AND srp_erp_groupsegment.segmentID IN (" . join(',', $segment) . ")
GROUP BY
	coa.masterAutoID,
	ca2.GLDescription,
	coa.accountCategoryTypeID,
	coa.GLAutoID,
	coa.GLDescription,
	mainCategory HAVING (" . join(' OR ', $having) . ") ORDER BY sortOrder;")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
        }
    }

    function get_finance_balance_sheet_report()
    {
        $finaceYearYN = getPolicyValues('HFY','All');
        $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
        $DocumentDate =  (($finaceYearYN == 1) ? format_date($this->input->post("to")):$financialBeginingDate["beginingDate"]);
        $DocumentDateFrom = (($finaceYearYN == 1) ? format_date($this->input->post("from")):$financialBeginingDate["beginingDate"]);
        $DocumentDateTo = (($finaceYearYN == 1) ? format_date($this->input->post("to")):format_date($this->input->post("from")));

        //Add segment filter
        $segment_arr = fetch_segment_for_reports();
        $field_segment = join(',',$segment_arr);


        switch ($this->input->post('rptType')) {
            case "1": /*Month Wise*/
                //$financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $months = get_month_list_from_date($DocumentDateFrom,$DocumentDateTo, "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selected columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(srp_erp_chartofaccounts.subCategory = 'BSA',if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . ",0),if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . " * -1,0)) ) as `" . $key . "`,";
                                $feilds2 .= "a.`" . $key . "` as `" . $key . "`,";
                                $feilds3 .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "`" . $key . "` != 0";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= "a." . $val . "DecimalPlaces,";
                    }
                }

                $result = $this->db->query("SELECT $feilds2
                    a.sortOrder,
                        a.GLDescription,
                    a.mainCategory,
                    a.subCategory,
                    a.subsubCategory,
                    a.masterCategory,
                    a.GLAutoID
                    FROM ((SELECT $feilds
                    srp_erp_accountcategorytypes.sortOrder,
                        srp_erp_chartofaccounts.GLDescription,
                    IF (
                    srp_erp_chartofaccounts.subCategory = 'BSA',
                        'ASSETS',
                    IF (
                    srp_erp_chartofaccounts.subCategory = 'BSL',
                        'LIABILITIES',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory,
                    srp_erp_chartofaccounts.masterCategory,
                    srp_erp_generalledger.GLAutoID
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                                    SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                                    ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                                )
                                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE
                        srp_erp_generalledger.documentDate <= '" . $DocumentDateTo. "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory ORDER BY sortOrder,mainCategory) UNION ALL
                                (SELECT $feilds3
                        7 as sortOrder,
                    'Retained Earnings' as GLDescription,
                    'LIABILITIES' AS mainCategory,
                    'Equity' as subCategory,
                     IFNULL( acc_equity.GLDescription, 'Equity') AS subsubCategory,
                    '-' as masterCategory,
                    '-' as GLAutoID
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    LEFT JOIN ( SELECT accounts.GLDescription, accounts.companyID FROM srp_erp_chartofaccounts as accounts where accountDefaultType = 2 AND accounts.companyID = ".$this->common_data['company_data']['company_id']." ) as acc_equity ON acc_equity.companyID = srp_erp_chartofaccounts.companyID

                    WHERE
                        srp_erp_generalledger.documentDate <= '" . $DocumentDateTo . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . ")) as a GROUP BY
                        a.mainCategory,a.subCategory,a.subsubCategory,a.GLDescription HAVING (" . join(' OR ', $having) . ") ORDER BY a.sortOrder,a.mainCategory")->result_array();
        //echo $this->db->last_query();
        //exit();
                return $result;
                break;
            case "3": /*YTD*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds .= "if(srp_erp_chartofaccounts.subCategory = 'BSA',SUM(srp_erp_generalledger." . $val . "),SUM(srp_erp_generalledger." . $val . ")*-1) as " . $val . ",";
                        $feilds3 .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        $feilds2 .= "SUM(a." . $val . ") as " . $val . ",";
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= "a." . $val . "DecimalPlaces,";
                        $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                    }
                }
                $sql = "SELECT $feilds2
                    a.sortOrder,
                    a.GLDescription,
                    a.mainCategory,
                    a.subCategory,
                    a.masterCategory,
                    a.GLAutoID,
                    a.subsubCategory
                    FROM ((SELECT $feilds
                    srp_erp_accountcategorytypes.sortOrder,
                        srp_erp_chartofaccounts.GLDescription,
                    IF (
                        srp_erp_chartofaccounts.subCategory = 'BSA',
                        'ASSETS',
                    IF (
                        srp_erp_chartofaccounts.subCategory = 'BSL',
                        'LIABILITIES',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_chartofaccounts.masterCategory,
                    srp_erp_generalledger.GLAutoID,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                            GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE
                        srp_erp_generalledger.documentDate <= '" . $DocumentDateTo. "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory ORDER BY sortOrder,mainCategory) UNION ALL
                        (SELECT $feilds3
                        7 AS sortOrder,
                        'Retained Earnings' AS GLDescription,
                        'LIABILITIES' AS mainCategory,
                        'BS' AS masterCategory,
                        '-' AS GLAutoID,
                        'Equity' AS subCategory,
                        IFNULL( acc_equity.GLDescription, 'Equity Accounts') AS subsubCategory
                    FROM
                        srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    LEFT JOIN ( SELECT accounts.GLDescription, accounts.companyID FROM srp_erp_chartofaccounts as accounts where accountDefaultType = 2 AND accounts.companyID = ".$this->common_data['company_data']['company_id']." ) as acc_equity ON acc_equity.companyID = srp_erp_chartofaccounts.companyID
                    WHERE
                        srp_erp_generalledger.documentDate <= '" . $DocumentDateTo . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . ")) as a GROUP BY
                        a.mainCategory,a.subCategory,a.subsubCategory,a.GLDescription HAVING (" . join(' AND ', $having) . ") ORDER BY a.mainCategory,a.sortOrder ASC";
                $result = $this->db->query($sql)->result_array();
                // echo $this->db->last_query();
                return $result;
                break;

                //AND (srp_erp_generalledger.segmentID IN (".$field_segment.") OR srp_erp_generalledger.segmentID IS NULL)
                //AND (srp_erp_generalledger.segmentID IN (".$field_segment.") OR srp_erp_generalledger.segmentID IS NULL)
        }
    }


    function get_finance_balance_sheet_group_report()
    {
        switch ($this->input->post('rptType')) {
            case "1": /*Month Wise*/
                $company = $this->get_group_company();
                $financialBeginingDate = get_group_financial_year(format_date($this->input->post("from")));
                $months = get_month_list_from_date($financialBeginingDate["beginingDate"], format_date($this->input->post("from")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selected columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                $feilds .= "SUM(if(coa.subCategory = 'BSA',if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . ",0),if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . " * -1,0)) ) as `" . $key . "`,";
                                $feilds2 .= "a.`" . $key . "` as `" . $key . "`,";
                                $feilds3 .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') <= '$key',srp_erp_generalledger." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "`" . $key . "` != 0";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= "a." . $val . "DecimalPlaces,";
                    }
                }

                $result = $this->db->query("SELECT $feilds2
a.sortOrder,
	a.GLDescription,
a.mainCategory,
a.subCategory,
a.subsubCategory,
 a.masterCategory,
a.GLAutoID
FROM ((SELECT $feilds
srp_erp_accountCategoryTypes.sortOrder,
	coa.GLDescription,
IF (
coa.subCategory = 'BSA',
	'ASSETS',
IF (
coa.subCategory = 'BSL',
	'LIABILITIES',
	'ND'
)
) AS mainCategory,
srp_erp_accountCategoryTypes.CategoryTypeDescription as subCategory,
ca2.GLDescription as subsubCategory,
coa.masterCategory,
coa.GLAutoID
FROM
	srp_erp_generalledger
INNER JOIN ( SELECT GLAutoID,chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,subCategory,masterCategory,masterAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
INNER JOIN srp_erp_accountCategoryTypes ON srp_erp_accountCategoryTypes.accountCategoryTypeID = coa.accountCategoryTypeID
LEFT JOIN (
               SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS'
) ca2 ON (
                ca2.chartofAccountID = coa.masterAutoID
            )
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ")
GROUP BY
	coa.masterAutoID,
	ca2.GLDescription,
	coa.accountCategoryTypeID,
	coa.GLAutoID,
	coa.GLDescription,
	mainCategory ORDER BY sortOrder,mainCategory) UNION ALL
            (SELECT $feilds3
	'9' as sortOrder,
'Retained Earnings' as GLDescription,
'LIABILITIES' AS mainCategory,
'Equity' as subCategory,
'Equity' as subsubCategory,
'-' as masterCategory,
'-' as GLAutoID
FROM
	srp_erp_generalledger
INNER JOIN ( SELECT GLAutoID,chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,subCategory,masterCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . "))) as a GROUP BY
	a.mainCategory,a.subCategory,a.subsubCategory,a.GLDescription HAVING (" . join(' OR ', $having) . ") ORDER BY a.sortOrder,a.mainCategory")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
            case "3": /*YTD*/
                $company = $this->get_group_company();
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        $feilds .= "if(coa.subCategory = 'BSA',SUM(srp_erp_generalledger." . $val . "),SUM(srp_erp_generalledger." . $val . ")*-1) as " . $val . ",";
                        $feilds3 .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        $feilds2 .= "SUM(a." . $val . ") as " . $val . ",";
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                            $feilds3 .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        $feilds2 .= "a." . $val . "DecimalPlaces,";
                        $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                    }
                }
                $sql = "SELECT $feilds2
a.sortOrder,
	a.GLDescription,
a.mainCategory,
a.subCategory,
a.masterCategory,
a.GLAutoID,
a.subsubCategory
FROM ((SELECT $feilds
srp_erp_accountCategoryTypes.sortOrder,
	coa.GLDescription,
IF (
	coa.subCategory = 'BSA',
	'ASSETS',
IF (
	coa.subCategory = 'BSL',
	'LIABILITIES',
	'ND'
)
) AS mainCategory,
coa.masterCategory,
coa.GLAutoID,
srp_erp_accountCategoryTypes.CategoryTypeDescription as subCategory,
ca2.GLDescription as subsubCategory
FROM
	srp_erp_generalledger
INNER JOIN ( SELECT GLAutoID,chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,subCategory,masterCategory,masterAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS') as coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
INNER JOIN srp_erp_accountCategoryTypes ON srp_erp_accountCategoryTypes.accountCategoryTypeID = coa.accountCategoryTypeID
LEFT JOIN (
               SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS'
) ca2 ON (
                ca2.chartofAccountID = coa.masterAutoID
            )
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ")
GROUP BY
	coa.masterAutoID,
	ca2.GLDescription,
	coa.accountCategoryTypeID,
	coa.GLAutoID,
	coa.GLDescription,
	mainCategory ORDER BY sortOrder,mainCategory) UNION ALL
	(SELECT $feilds3
	'9' as sortOrder,
'Retained Earnings' as GLDescription,
'LIABILITIES' AS mainCategory,
'Equity' as subCategory,
'Equity' as subsubCategory,
'-' as masterCategory,
'-' as GLAutoID
FROM
	srp_erp_generalledger
INNER JOIN ( SELECT GLAutoID,chartofAccountID,GLSecondaryCode,GLDescription,accountCategoryTypeID,subCategory,masterCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND srp_erp_groupchartofaccounts.masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
WHERE
	srp_erp_generalledger.documentDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . "))) as a GROUP BY
	a.mainCategory,a.subCategory,a.subsubCategory,a.GLDescription HAVING (" . join(' AND ', $having) . ") ORDER BY a.mainCategory,a.sortOrder DESC;";
                $result = $this->db->query($sql)->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
        }
    }

    function get_finance_general_ledger_report()
    {
        $segment = $this->input->post("segment");
        $glcode = $this->input->post("glCodeTo");
        $documentID = $this->input->post("documentID");
        $segmentFilter = array_filter(fetch_segment_reports(true));
        unset($segmentFilter['']);
        $segmentFilterCount = count($segmentFilter);
        $segmentCount = count($segment);
        $segmentQry = "";

        // if ($segmentFilterCount != $segmentCount) {
           $segmentQry = "AND (srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") OR srp_erp_generalledger.segmentID IS NULL OR srp_erp_generalledger.segmentID = 0) ";
        // }

        /*
        $i = 1;
        $segmentOR = '( ';
        if (!empty($segment)) { generate the query according to selectd segment
            foreach ($segment as $segment_val) {
                if ($i != 1) {
                    $segmentOR .= ' OR ';
                }
                $segmentOR .= " srp_erp_generalledger.segmentID = '" . $segment_val . "' ";
                $i++;
            }
        }
        $segmentOR .= ' ) ';*/
        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND srp_erp_generalledger.documentCode IN ($documentID)";
        }
        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("fieldNameChk");

        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "segmentID") {
                    $feilds[] = "CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID";
                } else if ($val == "partySystemCode") {
                    $feilds[] = "IF(cust.customerSystemCode IS NOT NULL,CONCAT(cust.customerSystemCode,'-',cust.customerName),IF (supp.supplierSystemCode IS NOT NULL,CONCAT(supp.supplierSystemCode,'-',supp.supplierName),'-')) AS partySystemCode";
                } else if ($val == "GLSecondaryCode") {
                    $feilds[] = "srp_erp_chartofaccounts." . $val;
                } else if ($val == "document") {
                    $feilds[] = "dc." . $val;
                } else {
                    $feilds[] = "srp_erp_generalledger." . $val;
                }

                $feilds2[] = "a." . $val;
                if ($val == "companyLocalAmount") {
                    $feilds3[] = "SUM(companyLocalAmount) as " . $val;
                    $feilds3[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "companyReportingAmount") {
                    $feilds3[] = "SUM(companyReportingAmount) as " . $val;
                    $feilds3[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "documentNarration") {
                    $feilds3[] = "'CF Balance' as " . $val;
                } elseif ($val == "documentDate") {
                    //$feilds3[] = "'1970-01-01' as documentDate";
                    $feilds3[] = "'' as documentDate";
                    $feilds2[] = "DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate";
                    $feilds2[] = "a.documentDate as documentDate2";
                    $feilds2[] = "a.documentDate as documentDateSort";
                } else {
                    $feilds3[] = "'-' as " . $val;
                }

            }
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.GLDescription,a.masterCategory,a.GLAutoID,a.systemGLCode FROM ((SELECT
  $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.systemGLCode
 FROM srp_erp_generalledger
 INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN (SELECT * FROM srp_erp_customermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY customerAutoID) cust ON srp_erp_generalledger.partyAutoID = cust.customerAutoID AND srp_erp_generalledger.partyType = 'CUS'
 LEFT JOIN (SELECT * FROM srp_erp_suppliermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY supplierAutoID) supp ON srp_erp_generalledger.partyAutoID = supp.supplierAutoID AND srp_erp_generalledger.partyType = 'SUP'
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . ") dc ON (dc.documentID = srp_erp_generalledger.documentCode)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") $segmentQry $docIDs AND srp_erp_generalledger.documentDate  BETWEEN '" . format_date($this->input->post("from")) . "'  AND '" . format_date($this->input->post("to")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
 ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC) UNION ALL
 (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID, srp_erp_generalledger.systemGLCode FROM srp_erp_generalledger
 INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ")  $segmentQry $docIDs AND srp_erp_chartofaccounts.masterCategory = 'BS'  AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.GLAutoID )) as a ORDER BY documentDate2 asc";
    

        $result = $this->db->query($sql)->result_array();
        // echo $this->db->last_query();
        return $result;
        
    }

    function get_educal_general_ledger_report()
    {
        $segment = $this->input->post("segment");
        $glcode = $this->input->post("glCodeTo");
        $documentID = $this->input->post("documentID");
        $segmentFilter = array_filter(fetch_segment_reports(true));
        unset($segmentFilter['']);
        $segmentFilterCount = count($segmentFilter);
        $segmentCount = count($segment);
        $segmentQry = "";
        if ($segmentFilterCount != $segmentCount) {
            $segmentQry = "AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")";
        }
        /*
        $i = 1;
        $segmentOR = '( ';
        if (!empty($segment)) { generate the query according to selectd segment
            foreach ($segment as $segment_val) {
                if ($i != 1) {
                    $segmentOR .= ' OR ';
                }
                $segmentOR .= " srp_erp_generalledger.segmentID = '" . $segment_val . "' ";
                $i++;
            }
        }
        $segmentOR .= ' ) ';*/
        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND srp_erp_generalledger.documentCode IN ($documentID)";
        }
        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "segmentID") {
                    $feilds[] = "CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID";
                } else if ($val == "partySystemCode") {
                    $feilds[] = "IF(eduStu.parentCode IS NOT NULL,CONCAT(eduStu.parentCode,'-',eduStu.ContactPerson),IF(cust.customerSystemCode IS NOT NULL,CONCAT(cust.customerSystemCode,'-',cust.customerName),IF (supp.supplierSystemCode IS NOT NULL,CONCAT(supp.supplierSystemCode,'-',supp.supplierName),'-'))) AS partySystemCode";
                } else if ($val == "GLSecondaryCode") {
                    $feilds[] = "srp_erp_chartofaccounts." . $val;
                } else if ($val == "document") {
                    $feilds[] = "dc." . $val;
                } else {
                    if($val == 'companyLocalAmount' || $val == 'transactionAmount' || $val == 'companyReportingAmount'){
                        $feilds[] = "SUM(srp_erp_generalledger." . $val . ") AS " .$val;
                    }
                    else{
                        $feilds[] = "srp_erp_generalledger." . $val;
                    }
                }

                $feilds2[] = "a." . $val;
                if ($val == "companyLocalAmount") {
                    $feilds3[] = "SUM(companyLocalAmount) as " . $val;
                    $feilds3[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "companyReportingAmount") {
                    $feilds3[] = "SUM(companyReportingAmount) as " . $val;
                    $feilds3[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "documentNarration") {
                    $feilds3[] = "'CF Balance' as " . $val;
                } elseif ($val == "documentDate") {
                    //$feilds3[] = "'1970-01-01' as documentDate";
                    $feilds3[] = "'' as documentDate";
                    $feilds2[] = "DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate";
                    $feilds2[] = "a.documentDate as documentDate2";
                    $feilds2[] = "a.documentDate as documentDateSort";
                } else {
                    $feilds3[] = "'-' as " . $val;
                }

            }
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.GLDescription,a.masterCategory,a.GLAutoID,a.systemGLCode FROM ((SELECT
  $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.systemGLCode
 FROM srp_erp_generalledger
 INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN (SELECT srp_studentdetails.PID,srp_studentdetails.StudentID,eduPrt.parentCode,eduPrt.ContactPerson FROM srp_studentdetails LEFT JOIN srp_parentdetails eduPrt ON eduPrt.PID=srp_studentdetails.PID WHERE eduPrt.isDeleted = 0 GROUP BY StudentID) eduStu ON srp_erp_generalledger.partyAutoID = eduStu.StudentID AND srp_erp_generalledger.partyType = 'STU'
 LEFT JOIN (SELECT * FROM srp_erp_customermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY customerAutoID) cust ON srp_erp_generalledger.partyAutoID = cust.customerAutoID AND srp_erp_generalledger.partyType = 'CUS'
 LEFT JOIN (SELECT * FROM srp_erp_suppliermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY supplierAutoID) supp ON srp_erp_generalledger.partyAutoID = supp.supplierAutoID AND srp_erp_generalledger.partyType = 'SUP'
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . ") dc ON (dc.documentID = srp_erp_generalledger.documentCode)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") $segmentQry $docIDs AND srp_erp_generalledger.documentDate  BETWEEN '" . format_date($this->input->post("from")) . "'  AND '" . format_date($this->input->post("to")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
 	GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.GLAutoID ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC) UNION ALL
 (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID, srp_erp_generalledger.systemGLCode FROM srp_erp_generalledger
 INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ")  $segmentQry $docIDs AND srp_erp_chartofaccounts.masterCategory = 'BS'  AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.GLAutoID )) as a ORDER BY documentDate2 asc";
        $result = $this->db->query($sql)->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_finance_general_ledger_group_report()
    {
        $company = $this->get_group_company();
        $segment = $this->input->post("segment");
        $glcode = $this->input->post("glCodeTo");

        $segmentFilter = array_filter(fetch_segment(true));
        unset($segmentFilter['']);
        $segmentFilterCount = count($segmentFilter);
        $segmentCount = count($segment);
        $segmentQry = "";

        if ($segmentFilterCount != $segmentCount) {
            $segmentQry = "srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")";
        }

        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "segmentID") {
                    $feilds[] = "CONCAT(seg.segmentCode,'-',seg.description) as segmentID";
                } else if ($val == "partySystemCode") {
                    $feilds[] = "IF(cust.groupcustomerSystemCode IS NOT NULL,CONCAT(cust.groupcustomerSystemCode,'-',cust.groupCustomerName),IF (supp.groupSupplierSystemCode IS NOT NULL,CONCAT(supp.groupSupplierSystemCode,'-',supp.groupSupplierName),'-')) AS partySystemCode";
                } else if ($val == "GLSecondaryCode") {
                    $feilds[] = "coa." . $val;
                } else if ($val == "document") {
                    $feilds[] = "dc." . $val;
                } else {
                    $feilds[] = "srp_erp_generalledger." . $val;
                }

                $feilds2[] = "a." . $val;
                if ($val == "companyLocalAmount") {
                    $feilds3[] = "SUM(companyLocalAmount) as " . $val;
                    $feilds3[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "companyReportingAmount") {
                    $feilds3[] = "SUM(companyReportingAmount) as " . $val;
                    $feilds3[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "documentNarration") {
                    $feilds3[] = "'CF Balance' as " . $val;
                } elseif ($val == "documentDate") {
                    //$feilds3[] = "'1970-01-01' as documentDate";
                    $feilds3[] = "'' as documentDate";
                    $feilds2[] = "DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate";
                    $feilds2[] = "a.documentDate as documentDateSort";
                } else {
                    $feilds3[] = "'-' as " . $val;
                }

            }
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.GLDescription,a.masterCategory,a.GLAutoID FROM ((SELECT
  $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,coa.GLDescription,coa.masterCategory,srp_erp_generalledger.GLAutoID
 FROM srp_erp_generalledger
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,masterCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . " WHERE srp_erp_groupchartofaccounts.GLAutoID IN(" . join(',', $glcode) . ")) coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
 INNER JOIN ( SELECT srp_erp_groupsegmentdetails.segmentID,description,segmentCode FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID AND groupID = " . current_companyID() . " WHERE srp_erp_groupsegment.segmentID IN(" . join(',', $segment) . ")) seg ON srp_erp_generalledger.segmentID = seg.segmentID
 LEFT JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust  ON srp_erp_generalledger.partyAutoID = cust.customerMasterID AND srp_erp_generalledger.partyType = 'CUS'
 LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp ON srp_erp_generalledger.partyAutoID = supp.SupplierMasterID AND srp_erp_generalledger.partyType = 'SUP'
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN (" . join(',', $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_generalledger.documentCode)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ")
 ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC) UNION ALL
 (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,coa.GLDescription,coa.masterCategory,coa.GLAutoID FROM srp_erp_generalledger
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,masterCategory,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . " WHERE srp_erp_groupchartofaccounts.GLAutoID IN(" . join(',', $glcode) . ")) coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
 INNER JOIN ( SELECT srp_erp_groupsegmentdetails.segmentID,description,segmentCode FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID AND groupID = " . current_companyID() . " WHERE srp_erp_groupsegment.segmentID IN(" . join(',', $segment) . ")) seg ON srp_erp_generalledger.segmentID = seg.segmentID
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE coa.masterCategory = 'BS' AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ") GROUP BY coa.GLAutoID )) as a ORDER BY documentDateSort asc";
        $result = $this->db->query($sql)->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_procurement_purchase_order_list_report()
    {
        /* $cache = $this->cache->is_supported('xcache');
         if ($cache) {
             return "test";
         } else {*/
        $status = "";
        if ($this->input->post("status") == 3) {
            $status = join(',', array(0, 1, 2));
        } else {
            $status = $this->input->post("status");
        }

        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_purchaseordermaster.supplierPrimaryCode = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $segment = $this->input->post("segment");
        $i = 1;
        $segmentOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($segment as $segment_val) {
                if ($i != 1) {
                    $segmentOR .= ' OR ';
                }
                $segmentOR .= "srp_erp_purchaseordermaster.segmentID = '" . $segment_val . "' ";
                $i++;
            }
        }
        $segmentOR .= ')';

        $feilds = "";
        $feildpo = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "companyReportingAmount") {
                    $feilds .= " srp_erp_purchaseordermaster.companyReportingCurrency,";
                    $feilds .= " srp_erp_purchaseordermaster.companyReportingCurrencyID,";
                    $feilds .= "srp_erp_purchaseordermaster." . $val . ",";
                    $feilds .= "(srp_erp_purchaseordermaster." . $val . " - IFNULL(GRV.receivedTotalAmount/GRV.companyReportingExchangeRate,0)- IFNULL( (PO." . $val . " + IFNULL(PO.taxAmount,0)) / PO.companyReportingExchangeRate, 0 )) as " . $val . "Balance,";
                    $feilds .= "IFNULL(GRV.receivedTotalAmount/GRV.companyReportingExchangeRate,0)+IFNULL((PO." . $val . " + IFNULL(PO.taxAmount,0)) / PO.companyReportingExchangeRate,0) as GRV" . $val . ",";
                    $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feildpo .= "SUM(srp_erp_paysupplierinvoicedetail.companyReportingAmount) as companyReportingAmount ,";
                }
                if ($val == "supplierCurrencyAmount") {
                    $feilds .= " srp_erp_purchaseordermaster.supplierCurrency,";
                    $feilds .= " srp_erp_purchaseordermaster.supplierCurrencyID,";
                    $feilds .= " srp_erp_purchaseordermaster." . $val . ",";
                    $feilds .= "(srp_erp_purchaseordermaster." . $val . " - IFNULL(GRV.receivedTotalAmount/GRV.supplierCurrencyExchangeRate,0)- IFNULL( PO." . $val . " / PO.supplierCurrencyExchangeRate, 0 )) as " . $val . "Balance,";
                    $feilds .= "IFNULL(GRV.receivedTotalAmount/GRV.supplierCurrencyExchangeRate,0)+IFNULL(PO." . $val . " / PO.supplierCurrencyExchangeRate,0) as GRV" . $val . ",";
                    $feilds .= "CS.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feildpo .= " SUM(srp_erp_paysupplierinvoicedetail.supplierAmount) as supplierCurrencyAmount ,";

                }
            }
        }
        $result = $this->db->query("SELECT $feilds IFNULL( GRV.receivedTotalAmount, 0 ) AS receivedTotalAmount,srp_erp_suppliermaster.supplierSystemCode, srp_erp_suppliermaster.supplierName, srp_erp_purchaseordermaster.purchaseOrderType, srp_erp_purchaseordermaster.purchaseOrderCode,DATE_FORMAT(srp_erp_purchaseordermaster.documentDate,'" . $this->format . "') as documentDate, srp_erp_purchaseordermaster.narration, DATE_FORMAT(srp_erp_purchaseordermaster.expectedDeliveryDate,'" . $this->format . "') as expectedDeliveryDate,srp_erp_purchaseordermaster.purchaseOrderID,srp_erp_purchaseordermaster.documentID,srp_erp_segment.segmentCode
            FROM srp_erp_purchaseordermaster
            INNER JOIN srp_erp_suppliermaster ON srp_erp_purchaseordermaster.supplierPrimaryCode = srp_erp_suppliermaster.supplierAutoID AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_purchaseordermaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CS ON (CS.currencyID = srp_erp_purchaseordermaster.supplierCurrencyID)
            LEFT JOIN srp_erp_segment on srp_erp_segment.segmentID  = srp_erp_purchaseordermaster.segmentID
            LEFT JOIN (
                SELECT
                    SUM(receivedTotalAmount) as receivedTotalAmount,
                    purchaseOrderMastertID,
                    companyReportingExchangeRate,
                    supplierCurrencyExchangeRate
                FROM
                    srp_erp_grvdetails
                INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID
                WHERE
                    srp_erp_grvmaster.approvedYN = 1
                    GROUP BY purchaseOrderMastertID
            ) GRV ON (
                GRV.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
            )

            LEFT JOIN (
                SELECT
                    $feildpo
                    purchaseOrderMastertID,
                    srp_erp_paysupplierinvoicemaster.companyReportingExchangeRate,
                    srp_erp_paysupplierinvoicemaster.supplierCurrencyExchangeRate,
                    SUM(srp_erp_paysupplierinvoicedetail.taxAmount) as taxAmount
                FROM
                    srp_erp_paysupplierinvoicedetail
                    INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicedetail.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
                WHERE
                    srp_erp_paysupplierinvoicemaster.approvedYN = 1
                GROUP BY
                    purchaseOrderMastertID
                ) PO ON ( PO.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID )

            WHERE $vendorOR AND $segmentOR AND isReceived IN ($status) AND srp_erp_purchaseordermaster.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_purchaseordermaster.companyID = " . $this->common_data['company_data']['company_id'] . "  AND (srp_erp_purchaseordermaster.approvedYN = 1 OR srp_erp_purchaseordermaster.approvedYN = 5)
            ORDER BY srp_erp_purchaseordermaster.documentDate DESC")->result_array();
        // echo $this->db->last_query();
        //$this->cache->save('purchase_order_list_report', array(0=>'data', 1=>'other data'));
        return $result;
        // }
    }


    function get_procurement_purchase_order_list_group_report()
    {
        /* $cache = $this->cache->is_supported('xcache');
         if ($cache) {
             return "test";
         } else {*/
        $status = "";
        if ($this->input->post("status") == 3) {
            $status = join(',', array(0, 1, 2));
        } else {
            $status = $this->input->post("status");
        }

        $vendor = $this->input->post("vendorTo");
        $vendor = $this->get_group_suppliers($vendor);
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_purchaseordermaster.supplierPrimaryCode = '" . $vendor_val["supplierMasterID"] . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "companyReportingAmount") {
                    $feilds .= " srp_erp_purchaseordermaster.companyReportingCurrency,";
                    $feilds .= " srp_erp_purchaseordermaster.companyReportingCurrencyID,";
                    $feilds .= "srp_erp_purchaseordermaster." . $val . ",";
                    $feilds .= "(srp_erp_purchaseordermaster." . $val . " - IFNULL(GRV.receivedTotalAmount/GRV.companyReportingExchangeRate,0)) as " . $val . "Balance,";
                    $feilds .= "(GRV.receivedTotalAmount/GRV.companyReportingExchangeRate) as GRV" . $val . ",";
                    $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
                if ($val == "supplierCurrencyAmount") {
                    $feilds .= " srp_erp_purchaseordermaster.supplierCurrency,";
                    $feilds .= " srp_erp_purchaseordermaster.supplierCurrencyID,";
                    $feilds .= " srp_erp_purchaseordermaster." . $val . ",";
                    $feilds .= "(srp_erp_purchaseordermaster." . $val . " - IFNULL(GRV.receivedTotalAmount/GRV.supplierCurrencyExchangeRate,0)) as " . $val . "Balance,";
                    $feilds .= "(GRV.receivedTotalAmount/GRV.supplierCurrencyExchangeRate) as GRV" . $val . ",";
                    $feilds .= "CS.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
            }
        }
        $result = $this->db->query("SELECT $feilds IFNULL(GRV.receivedTotalAmount,0) as receivedTotalAmount,sup.groupSupplierSystemCode, sup.groupSupplierName as supplierName, srp_erp_purchaseordermaster.purchaseOrderType, srp_erp_purchaseordermaster.purchaseOrderCode,DATE_FORMAT(srp_erp_purchaseordermaster.documentDate,'" . $this->format . "') as documentDate, srp_erp_purchaseordermaster.narration, DATE_FORMAT(srp_erp_purchaseordermaster.expectedDeliveryDate,'" . $this->format . "') as expectedDeliveryDate,srp_erp_purchaseordermaster.purchaseOrderID,srp_erp_purchaseordermaster.documentID
FROM srp_erp_purchaseordermaster
INNER JOIN (SELECT srp_erp_groupsuppliermaster.*,SupplierMasterID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON groupSupplierMasterID = srp_erp_groupsuppliermaster.groupSupplierAutoID) sup ON srp_erp_purchaseordermaster.supplierPrimaryCode = sup.SupplierMasterID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_purchaseordermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CS ON (CS.currencyID = srp_erp_purchaseordermaster.supplierCurrencyID)
LEFT JOIN (
	SELECT
		SUM(receivedTotalAmount) as receivedTotalAmount,
		purchaseOrderMastertID,
		companyReportingExchangeRate,
		supplierCurrencyExchangeRate
	FROM
		srp_erp_grvdetails
	INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID
	WHERE
		srp_erp_grvmaster.approvedYN = 1
		GROUP BY purchaseOrderMastertID
) GRV ON (
	GRV.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
)
WHERE $vendorOR AND isReceived IN ($status) AND srp_erp_purchaseordermaster.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_purchaseordermaster.approvedYN = 1
ORDER BY srp_erp_purchaseordermaster.documentDate DESC")->result_array();
        //echo $this->db->last_query();
        //$this->cache->save('purchase_order_list_report', array(0=>'data', 1=>'other data'));
        return $result;
        // }
    }


    function get_inventory_unbilled_grv_report($fieldName = Null)
    {
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $feilds3 = "";
        $feilds4 = "";
        $groupBy = array();
        $groupBy2 = array();
        $groupBy3 = array();
        $having = array();

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
//        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "companyReportingAmount") {
                    $feilds .= " srp_erp_grvmaster.companyReportingCurrency as currency" . $val . ",";
                    $feilds .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds .= " IFNULL(SUM(gd.receivedTotalAmount)/companyReportingExchangeRate,0) as " . $val . ",";
                    $feilds2 .= " srp_erp_grv_addon.companyReportingCurrency as currency" . $val . ",";
                    $feilds2 .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds2 .= " IFNULL(SUM((srp_erp_grv_addon.bookingCurrencyAmount)/srp_erp_grv_addon.companyReportingExchangeRate),0) as " . $val . ",";
                    $groupBy3[] = "srp_erp_grv_addon.bookingCurrencyID";
                }
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_grvmaster.transactionCurrency AS currency" . $val . ",";
                    $feilds .= " TC.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds .= " IFNULL(SUM(gd.receivedTotalAmount),0) as " . $val . ",";
                    $feilds2 .= " srp_erp_grv_addon.bookingCurrency as currency" . $val . ",";
                    $feilds2 .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds2 .= " IFNULL(SUM(srp_erp_grv_addon.bookingCurrencyAmount),0) as " . $val . ",";
                    $groupBy3[] = "srp_erp_grv_addon.companyReportingCurrencyID";
                }
                $feilds3 .= "a." . $val . "DecimalPlaces,a.currency" . $val . ",IFNULL(SUM(a." . $val . "),0) as " . $val . ",";
                $feilds4 .= "b." . $val . "DecimalPlaces,b.currency" . $val . ",IFNULL(SUM(psi." . $val . "),0) AS sumOf" . $val . ",IFNULL(SUM(b." . $val . ")+SUM(IFNULL(taxAmount,0)),0) as " . $val . ",(IFNULL(SUM(b." . $val . ")+SUM(IFNULL(taxAmount,0)),0)-IFNULL(SUM(psi." . $val . "),0)) AS balance" . $val . ",";
                $groupBy[] = "a.currency" . $val;
                $groupBy2[] = "b.currency" . $val;
                $having[] = "ROUND(balance" . $val . ",0) != 0";
            }
        }

        $result = $this->db->query("SELECT $feilds4 b.supplierID,b.grvPrimaryCode,b.documentID,DATE_FORMAT(b.grvDate,'" . $this->format . "') as grvDate,b.supplierName,b.supplierSystemCode,b.grvAutoID,b.docrefno FROM
 (SELECT $feilds3 a.supplierID,a.grvPrimaryCode,a.documentID,a.grvDate,a.supplierName,a.supplierSystemCode,a.grvAutoID,a.docrefno,a.taxAmount,a.addon FROM
  ((SELECT
$feilds
	srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.supplierName,
	srp_erp_grvmaster.grvDate,
	srp_erp_grvmaster.grvPrimaryCode,
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.documentID,
	srp_erp_grvmaster.supplierID,
	srp_erp_grvmaster.grvDocRefNo as docrefno,
    gd.taxAmount,
    0 AS addon
FROM
	srp_erp_grvmaster
	LEFT JOIN (SELECT
		grvAutoID,
		SUM(receivedTotalAmount) as receivedTotalAmount,
        SUM(taxAmount) AS taxAmount
	FROM
		srp_erp_grvdetails
		WHERE companyID = " . $this->common_data['company_data']['company_id'] . "
	GROUP BY
		grvAutoID
) gd ON (
	gd.grvAutoID = srp_erp_grvmaster.grvAutoID
)
LEFT JOIN srp_erp_suppliermaster ON srp_erp_grvmaster.supplierID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_grvmaster.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_grvmaster.transactionCurrencyID)
WHERE
	$vendorOR AND srp_erp_grvmaster.grvDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_grvmaster.approvedYN = 1  AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.supplierID)
	UNION ALL
	(SELECT $feilds2 srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.supplierName,
	srp_erp_grvmaster.grvDate,
	srp_erp_grvmaster.grvPrimaryCode,
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.documentID,
	srp_erp_grv_addon.supplierID,
	srp_erp_grv_addon.referenceNo as docrefno,
    srp_erp_grv_addon.taxAmount,
    1 AS addon
	FROM srp_erp_grv_addon
	INNER JOIN srp_erp_grvmaster ON srp_erp_grvmaster.grvAutoID = srp_erp_grv_addon.grvAutoID AND srp_erp_grvmaster.grvDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_grvmaster.approvedYN =1
	LEFT JOIN srp_erp_suppliermaster ON srp_erp_grv_addon.supplierID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_grv_addon.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_grv_addon.transactionCurrencyID)
	WHERE $vendorOR AND srp_erp_grv_addon.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY
	        srp_erp_grvmaster.grvAutoID,
			srp_erp_grv_addon.supplierID,
			" . join(",", $groupBy3) . ")) a GROUP BY a.grvAutoID,a.addon,a.supplierID," . join(",", $groupBy) . ") b
			LEFT JOIN
			(SELECT srp_erp_paysupplierinvoicedetail.grvAutoID,srp_erp_paysupplierinvoicedetail.InvoiceAutoID,srp_erp_paysupplierinvoicedetail.match_supplierinvoiceAutoID,SUM(srp_erp_paysupplierinvoicedetail.companyReportingAmount) as companyReportingAmount,SUM(srp_erp_paysupplierinvoicedetail.companyLocalAmount) as companyLocalAmount,SUM(srp_erp_paysupplierinvoicedetail.transactionAmount) as transactionAmount,srp_erp_paysupplierinvoicemaster.supplierID,
            isAddon
FROM srp_erp_paysupplierinvoicedetail
JOIN srp_erp_match_supplierinvoice ON srp_erp_match_supplierinvoice.match_supplierinvoiceAutoID = srp_erp_paysupplierinvoicedetail.match_supplierinvoiceAutoID
INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = srp_erp_paysupplierinvoicedetail.InvoiceAutoID
WHERE srp_erp_paysupplierinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.invoiceType = 'GRV Base' AND srp_erp_paysupplierinvoicemaster.bookingDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paysupplierinvoicemaster.approvedYN = 1
GROUP BY srp_erp_paysupplierinvoicedetail.grvAutoID, srp_erp_match_supplierinvoice.isAddon,srp_erp_match_supplierinvoice.supplierID) psi ON (b.grvAutoID = psi.grvAutoID AND b.supplierID = psi.supplierID AND b.addon = psi.isAddon) GROUP BY b.supplierID,b.grvAutoID," . join(",", $groupBy2) . " HAVING " . join("AND", $having) . ";")->result_array();
        //echo $this->db->last_query();exit;
        return $result;
    }

    function get_inventory_un_billed_invoice_report()
    {
        $customers = $this->input->post("customerTo");
        $customers_list = join(',', $customers);
        $company_id = current_companyID();
        $from = format_date($this->input->post("from"));


        $result = $this->db->query("SELECT order_mas.DOAutoID, DOCode, DATE_FORMAT(DODate, '{$this->format}') AS DODate,
                            CASE WHEN order_mas.referenceNo <> '' THEN order_mas.referenceNo ELSE order_det.referenceNo END AS referenceNo,
                            cus_mas.customerName, cus_mas.customerSystemCode,
                            order_mas.deliveredTransactionAmount transactionAmount, rec_amount_tr sumOftransactionAmount, transactionCurrencyDecimalPlaces transactionAmountDecimalPlaces,
                            transactionCurrency currencytransactionAmount, (order_mas.deliveredTransactionAmount - IFNULL(rec_amount_tr, 0)) AS balancetransactionAmount,
                            order_mas.companyReportingAmount AS companyReportingAmount, rec_amount_rpt AS sumOfcompanyReportingAmount,
                            companyReportingCurrency AS currencycompanyReportingAmount, companyReportingCurrencyDecimalPlaces companyReportingAmountDecimalPlaces,
                            (order_mas.companyReportingAmount - IFNULL(rec_amount_rpt, 0)) AS balancecompanyReportingAmount
                            FROM srp_erp_deliveryorder AS order_mas
                            	LEFT JOIN (
                                        SELECT
                                            CONCAT( srp_erp_contractmaster.referenceNo, '    ' ) AS referenceNo,
                                            DOAutoID
                                        FROM
                                            srp_erp_deliveryorderdetails
                                            LEFT JOIN srp_erp_contractmaster ON srp_erp_contractmaster.contractAutoID = srp_erp_deliveryorderdetails.contractAutoID
                                        GROUP BY
                                            srp_erp_contractmaster.contractAutoID,
                                            DOAutoID
                                        ) order_det ON order_det.DOAutoID = order_mas.DOAutoID
                            LEFT JOIN (
                                SELECT inv_det.DOMasterID, inv_mas.customerID, SUM(inv_det.transactionAmount) AS rec_amount_tr,
                                SUM(inv_det.companyReportingAmount) AS rec_amount_rpt
                                FROM srp_erp_customerinvoicemaster AS inv_mas
                                JOIN srp_erp_customerinvoicedetails AS inv_det ON inv_mas.invoiceAutoID = inv_det.invoiceAutoID
                                WHERE inv_mas.companyID = {$company_id} AND inv_det.type = 'DO' AND inv_mas.customerID IN ({$customers_list})
                                AND inv_mas.approvedYN = 1 AND invoiceDate <= '{$from}' GROUP BY inv_det.DOMasterID
                            ) AS invoiced_det ON invoiced_det.DOMasterID = order_mas.DOAutoID
                            JOIN srp_erp_customermaster cus_mas ON cus_mas.customerAutoID = order_mas.customerID
                            WHERE order_mas.companyID = {$company_id} AND approvedYN = 1 AND DODate <= '{$from}'
                            AND order_mas.customerID IN ({$customers_list})
                            AND (TRIM(TRAILING '.' FROM( TRIM( TRAILING 0 FROM ( ROUND(( order_mas.companyReportingAmount - IFNULL(rec_amount_rpt, 0)), 2)))))) > 0")->result_array();

        return $result;
    }

    function get_inventory_unbilled_grv_group_report()
    {
        $vendor = $this->input->post("vendorTo");
        $company = $this->get_group_company();
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_groupsuppliermaster.groupSupplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $feilds3 = "";
        $feilds4 = "";
        $groupBy = array();
        $groupBy2 = array();
        $groupBy3 = array();
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "companyReportingAmount") {
                    $feilds .= " srp_erp_grvmaster.companyReportingCurrency as currency" . $val . ",";
                    $feilds .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds .= " IFNULL(SUM(gd.receivedTotalAmount)/companyReportingExchangeRate,0) as " . $val . ",";
                    $feilds2 .= " srp_erp_grv_addon.companyReportingCurrency as currency" . $val . ",";
                    $feilds2 .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds2 .= " IFNULL(SUM(srp_erp_grv_addon.bookingCurrencyAmount/srp_erp_grv_addon.companyReportingExchangeRate),0) as " . $val . ",";
                    $groupBy3[] = "srp_erp_grv_addon.bookingCurrencyID";
                }
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_grvmaster.transactionCurrency AS currency" . $val . ",";
                    $feilds .= " TC.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds .= " IFNULL(SUM(gd.receivedTotalAmount),0) as " . $val . ",";
                    $feilds2 .= " srp_erp_grv_addon.bookingCurrency as currency" . $val . ",";
                    $feilds2 .= " CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                    $feilds2 .= " IFNULL(SUM(srp_erp_grv_addon.bookingCurrencyAmount),0) as " . $val . ",";
                    $groupBy3[] = "srp_erp_grv_addon.companyReportingCurrencyID";
                }
                $feilds3 .= "a." . $val . "DecimalPlaces,a.currency" . $val . ",IFNULL(SUM(a." . $val . "),0) as " . $val . ",";
                $feilds4 .= "b." . $val . "DecimalPlaces,b.currency" . $val . ",IFNULL(SUM(psi." . $val . "),0) AS sumOf" . $val . ",IFNULL(SUM(b." . $val . "),0) as " . $val . ",(IFNULL(SUM(b." . $val . "),0)-IFNULL(SUM(psi." . $val . "),0)) AS balance" . $val . ",";
                $groupBy[] = "a.currency" . $val;
                $groupBy2[] = "b.currency" . $val;
                $having[] = "ROUND(balance" . $val . ",0) != 0";
            }
        }

        $result = $this->db->query("SELECT $feilds4 b.supplierID,b.grvPrimaryCode,b.documentID,DATE_FORMAT(b.grvDate,'" . $this->format . "') as grvDate,b.supplierName,b.supplierSystemCode,b.grvAutoID,	b.docrefno FROM
 (SELECT $feilds3 a.supplierID,a.grvPrimaryCode,a.documentID,a.grvDate,a.supplierName,a.supplierSystemCode,a.grvAutoID,a.docrefno FROM
  ((SELECT
$feilds
	supp.groupSupplierSystemCode as supplierSystemCode,
	supp.groupSupplierName as supplierName,
	srp_erp_grvmaster.grvDate,
	srp_erp_grvmaster.grvPrimaryCode,
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.documentID,
	srp_erp_grvmaster.supplierID,
	srp_erp_grvmaster.grvDocRefNo as docrefno
FROM
	srp_erp_grvmaster
	LEFT JOIN (SELECT
		grvAutoID,
		SUM(receivedTotalAmount) as receivedTotalAmount
	FROM
		srp_erp_grvdetails
		WHERE companyID IN(" . join(",", $company) . ")
	GROUP BY
		grvAutoID
) gd ON (
	gd.grvAutoID = srp_erp_grvmaster.grvAutoID
)
INNER JOIN (SELECT srp_erp_groupsuppliermaster.*,srp_erp_groupsupplierdetails.SupplierMasterID as SupplierMasterID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE $vendorOR AND srp_erp_groupsuppliermaster.companygroupID = " . current_companyID() . ") supp ON supp.SupplierMasterID = srp_erp_grvmaster.supplierID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_grvmaster.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_grvmaster.transactionCurrencyID)
WHERE
	srp_erp_grvmaster.grvDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_grvmaster.approvedYN = 1  AND srp_erp_grvmaster.companyID IN(" . join(",", $company) . ")
GROUP BY
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.supplierID)
	UNION ALL
	(SELECT $feilds2
	supp.groupSupplierSystemCode as supplierSystemCode,
	supp.groupSupplierName as supplierName,
	srp_erp_grvmaster.grvDate,
	srp_erp_grvmaster.grvPrimaryCode,
	srp_erp_grvmaster.grvAutoID,
	srp_erp_grvmaster.documentID,
	srp_erp_grv_addon.supplierID,
		srp_erp_grv_addon.referenceNo as docrefno
	FROM srp_erp_grv_addon
	INNER JOIN srp_erp_grvmaster ON srp_erp_grvmaster.grvAutoID = srp_erp_grv_addon.grvAutoID AND srp_erp_grvmaster.grvDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_grvmaster.companyID IN(" . join(",", $company) . ") AND srp_erp_grvmaster.approvedYN =1
	INNER JOIN (SELECT srp_erp_groupsuppliermaster.*,srp_erp_groupsupplierdetails.SupplierMasterID as SupplierMasterID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE $vendorOR AND srp_erp_groupsuppliermaster.companygroupID = " . current_companyID() . ") supp ON supp.SupplierMasterID = srp_erp_grv_addon.supplierID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_grv_addon.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_grv_addon.transactionCurrencyID)
	WHERE srp_erp_grv_addon.companyID IN(" . join(",", $company) . ") GROUP BY
	        srp_erp_grvmaster.grvAutoID,
			srp_erp_grv_addon.supplierID,
			" . join(",", $groupBy3) . ")) a GROUP BY a.grvAutoID,a.supplierID," . join(",", $groupBy) . ") b
			LEFT JOIN
			(SELECT srp_erp_paysupplierinvoicedetail.grvAutoID,srp_erp_paysupplierinvoicedetail.InvoiceAutoID,match_supplierinvoiceAutoID,SUM(srp_erp_paysupplierinvoicedetail.companyReportingAmount) as companyReportingAmount,SUM(srp_erp_paysupplierinvoicedetail.companyLocalAmount) as companyLocalAmount,SUM(srp_erp_paysupplierinvoicedetail.transactionAmount) as transactionAmount,supplierID
FROM srp_erp_paysupplierinvoicedetail
INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = srp_erp_paysupplierinvoicedetail.InvoiceAutoID
WHERE srp_erp_paysupplierinvoicemaster.companyID IN(" . join(",", $company) . ") AND srp_erp_paysupplierinvoicemaster.invoiceType = 'GRV Base' AND srp_erp_paysupplierinvoicemaster.approvedYN = 1
GROUP BY srp_erp_paysupplierinvoicedetail.grvAutoID) psi ON (b.grvAutoID = psi.grvAutoID AND b.supplierID = psi.supplierID) GROUP BY b.supplierID,b.grvAutoID," . join(",", $groupBy2) . " HAVING " . join("AND", $having) . ";")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_ledger_report()
    {
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_generalledger.partyAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "transactionAmount") {
                    $feilds .= " (TRIM( ROUND( sum(srp_erp_generalledger." . $val . "), TC.DecimalPlaces) ) + 0 ) * -1 AS " . $val . ",";
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " (TRIM( ROUND( sum(srp_erp_generalledger." . $val . "), CL.DecimalPlaces) ) + 0 ) * -1 AS " . $val . ",";
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " (TRIM( ROUND( sum(srp_erp_generalledger." . $val . "), CR.DecimalPlaces) ) + 0 ) * -1 AS " . $val . ",";
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                $feilds2 .= " a." . $val . "DecimalPlaces,";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
            }
        }

        $result = $this->db->query("SELECT $feilds2
    a.documentMasterAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.supplierName,a.supplierSystemCode,a.GLSecondaryCode,a.GLDescription,a.supplierInvoiceNo as supplierInvoiceNo,a.supplierInvoiceDate AS supplierInvoiceDate FROM
    ((SELECT $feilds srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,sup.supplierInvoiceNo,
	DATE_FORMAT( sup.invoiceDueDate, '%d-%m-%Y' ) AS supplierInvoiceDate
    FROM srp_erp_generalledger
    INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_paysupplierinvoicemaster sup on sup.InvoiceAutoID  = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'BSI'
    WHERE $vendorOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,'' as supplierInvoiceNo,
		'' AS supplierInvoiceDate  FROM srp_erp_generalledger
    INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_paysupplierinvoicemaster sup on sup.InvoiceAutoID = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = \"BSI\"
    WHERE $vendorOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.GLAutoID,srp_erp_suppliermaster.supplierAutoID)) AS a
      ORDER BY  a.documentDate")->result_array();
        // echo $this->db->last_query();
        return $result;
    }


    function get_accounts_payable_vendor_ledger_group_report()
    {
        $company = $this->get_group_company();
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "supp.groupSupplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                $feilds .= " sum(srp_erp_generalledger." . $val . ") * -1 AS " . $val . ",";
                $feilds2 .= " a." . $val . "DecimalPlaces,";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
            }
        }

        $result = $this->db->query("SELECT $feilds2
    a.documentMasterAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.supplierName,a.supplierSystemCode,a.GLSecondaryCode,a.GLDescription,a.supplierInvoiceNo AS supplierInvoiceNo,
	a.supplierInvoiceDate AS supplierInvoiceDate  FROM
    ((SELECT $feilds srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,coa.GLSecondaryCode,coa.GLDescription,sup.supplierInvoiceNo,
	DATE_FORMAT( sup.invoiceDueDate, '%d-%m-%Y' ) AS supplierInvoiceDate
    FROM srp_erp_generalledger
    INNER JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp ON srp_erp_generalledger.partyAutoID = supp.SupplierMasterID
    INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
   LEFT JOIN srp_erp_paysupplierinvoicemaster sup ON sup.InvoiceAutoID = srp_erp_generalledger.documentMasterAutoID
	AND srp_erp_generalledger.documentCode = 'BSI'

    WHERE $vendorOR AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ")
    GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,coa.GLSecondaryCode,coa.GLDescription,'' AS supplierInvoiceNo,
	'' AS supplierInvoiceDate FROM srp_erp_generalledger
    INNER JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp ON srp_erp_generalledger.partyAutoID = supp.SupplierMasterID
     INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    WHERE $vendorOR AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ")
    GROUP BY srp_erp_generalledger.GLAutoID,supp.SupplierMasterID)) AS a
      ORDER BY  a.documentDate")->result_array();

        return $result;
    }


    function get_accounts_payable_vendor_statement_report($overdue = false)
    {
        $vendor = $this->input->post("vendorTo");
        $from_date = $this->input->post("from");
        $status_invoice_date = $this->input->post("status_invoice_date");

        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "bookingDate";
        // if ($overdue) {
        //     $columnCheck = "invoiceDueDate";
        // }
        if($status_invoice_date == 2){
            $columnCheck = "invoiceDueDate";
        }
        
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields9 = "ORDER BY age DESC";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(TRIM( ROUND( (SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (ROUND(IFNULL(paydetails.taxAmount, 0),2)/transactionExchangeRate)) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))), TC.DecimalPlaces) ) + 0 ) * -1  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields7 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(TRIM( ROUND((SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)), TC.DecimalPlaces) ) + 0 ) as ' . $val . ',';
                    $fields8 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(TRIM( ROUND( (SUM(srd.totval) - IFNULL(pvd.' . $val . ',0)), TC.DecimalPlaces) ) + 0 ) as ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(TRIM( ROUND( (SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (ROUND(IFNULL(paydetails.taxAmount, 0),2)/companyReportingExchangeRate)) - ((TRIM( ROUND(IFNULL(SUM(pvd.' . $val . '),0), CR.DecimalPlaces) ) + 0 ) + (TRIM( ROUND(IFNULL(SUM(dnd.' . $val . '),0), CR.DecimalPlaces) ) + 0) + (TRIM( ROUND(IFNULL(SUM(pva.' . $val . '),0), CR.DecimalPlaces) ) + 0))), CR.DecimalPlaces) ) + 0 ) * -1  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(TRIM( ROUND((SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)), CR.DecimalPlaces) ) + 0 ) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(TRIM( ROUND( (SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(pvd.' . $val . ',0)), CR.DecimalPlaces) ) + 0 ) as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(TRIM( ROUND( (SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (ROUND(IFNULL(paydetails.taxAmount, 0),2)/companyLocalExchangeRate)) - ((TRIM( ROUND(IFNULL(SUM(pvd.' . $val . '),0), CL.DecimalPlaces) ) + 0 ) + (TRIM( ROUND(IFNULL(SUM(dnd.' . $val . '),0), CL.DecimalPlaces) ) + 0 ) + (TRIM( ROUND(IFNULL(SUM(pva.' . $val . '),0), CL.DecimalPlaces) ) + 0 ))), CL.DecimalPlaces ) ) + 0 ) * -1  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(TRIM( ROUND((SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)), CL.DecimalPlaces ) ) + 0 ) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(TRIM( ROUND( (SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(pvd.' . $val . ',0)), CL.DecimalPlaces ) ) + 0 ) as ' . $val . ',';

                }
               
                $fields2 .= '(SUM(srp_erp_paymentvoucherdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';


                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3  a.InvoiceAutoID,a.supplierName,a.supplierSystemCode,a.comments,a.documentID,a.age,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.supplierInvoiceNo,a.referenceNo FROM
((SELECT $fields srp_erp_paysupplierinvoicemaster.InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,srp_erp_paysupplierinvoicemaster.invoiceDueDate,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo AS supplierInvoiceNo, DATEDIFF('" . format_date($from_date) . "',srp_erp_paysupplierinvoicemaster.invoiceDueDate) as age, srp_erp_paysupplierinvoicemaster.RefNo as referenceNo FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT SUM(taxAmount) as taxAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID)paydetails ON paydetails.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
		srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1
	WHERE
		`srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "'  AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1
GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,'-' as invoiceDueDate,'-' AS supplierInvoiceNo,  DATEDIFF('" . format_date($from_date) . "',srp_erp_paymentvouchermaster.PVDate) as age,srp_erp_paymentvouchermaster.referenceNo as referenceNo FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NULL GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields7 srp_erp_debitnotemaster.debitNoteMasterAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,'-' as invoiceDueDate,'-' AS supplierInvoiceNo,  DATEDIFF('" . format_date($from_date) . "',srp_erp_debitnotemaster.debitNoteDate) as age,srp_erp_debitnotemaster.docRefNo as referenceNo  FROM srp_erp_debitnotemaster
LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM`srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId  WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.PVdate  <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvouchermaster.approvedYN = 1 AND type='debitnote'  GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` HAVING (" . join(' AND ', $having) . "))

UNION ALL
(SELECT $fields8 srp_erp_stockreturnmaster.stockReturnAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_stockreturnmaster.stockReturnCode as bookingInvCode,'-' as invoiceDueDate,'-' AS supplierInvoiceNo,  DATEDIFF('" . format_date($from_date) . "',srp_erp_stockreturnmaster.returnDate) as age, srp_erp_stockreturnmaster.referenceNo as referenceNo  FROM srp_erp_stockreturnmaster
LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue + IFNULL(taxAmount, 0)) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId  WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.approvedYN = 1 AND srp_erp_paymentvouchermaster.PVdate  <= '" . format_date($this->input->post("from")) . "' AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`stockReturnAutoID` HAVING (" . join(' AND ', $having) . "))

) as a $where $fields9")->result_array();
// echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_statement_group_report($overdue = false)
    {
        $company = $this->get_group_company();
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "bookingDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "supp.groupSupplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields7 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                }
                $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_paymentvoucherdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields7 .= '(SUM(srp_erp_debitnotedetail.' . $val . ') - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3  a.InvoiceAutoID,a.supplierName,a.supplierSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.supplierInvoiceNo FROM
((SELECT $fields srp_erp_paysupplierinvoicemaster.InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,srp_erp_paysupplierinvoicemaster.invoiceDueDate,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo AS supplierInvoiceNo FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `supp`.`SupplierMasterID`
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
		srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1
	WHERE
		`srp_erp_paymentvoucherdetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_paysupplierinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "'  AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1
GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,'-' as invoiceDueDate,'-' AS supplierInvoiceNo FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` IN ( " . join(",", $company) . ") AND  srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp ON `srp_erp_paymentvouchermaster`.`partyID` = `supp`.`SupplierMasterID`
LEFT JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_paymentvouchermaster.partyGLAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NULL GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields7 srp_erp_debitnotemaster.debitNoteMasterAutoID as InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,'-' as invoiceDueDate,'-' AS supplierInvoiceNo  FROM srp_erp_debitnotemaster
INNER JOIN `srp_erp_debitnotedetail` ON `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` AND `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` IN ( " . join(",", $company) . ")
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN ( " . join(",", $company) . ") AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp  ON `srp_erp_debitnotemaster`.`supplierID` = `supp`.`SupplierMasterID`
LEFT JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_debitnotemaster.supplierliabilityAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` IN ( " . join(",", $company) . ") GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` HAVING (" . join(' AND ', $having) . "))) as a $where")->result_array();
        return $result;
    }

    function get_accounts_payable_vendor_aging_summary_report()
    {
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $ex_rate ="";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyReportingAmount) - (IFNULL(SUM(pvd.companyReportingAmount),0)+IFNULL(SUM(dnd.companyReportingAmount),0)+IFNULL(SUM(pva.companyReportingAmount),0) - ROUND(IFNULL(taxdetail.taxAmount,0),2)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $ex_rate .= 'SUM(detail.taxAmount/detail.companyReportingExchangeRate) as  taxAmount,';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyLocalAmount) - (IFNULL(SUM(pvd.companyLocalAmount),0)+IFNULL(SUM(dnd.companyLocalAmount),0)+IFNULL(SUM(pva.companyLocalAmount),0) - ROUND(IFNULL(taxdetail.taxAmount,0),2) ))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $ex_rate .= 'SUM(detail.taxAmount/detail.companyLocalExchangeRate) as  taxAmount,';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.transactionAmount) - (IFNULL(SUM(pvd.transactionAmount),0)+IFNULL(SUM(dnd.transactionAmount),0)+IFNULL(SUM(pva.transactionAmount),0) - ROUND(IFNULL(taxdetail.taxAmount,0),2) ))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $ex_rate .= 'SUM(detail.taxAmount/detail.transactionExchangeRate) as  taxAmount,';
                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.supplierCurrencyAmount) - (IFNULL(SUM(pvd.supplierCurrencyAmount),0)+IFNULL(SUM(dnd.supplierCurrencyAmount),0)+IFNULL(SUM(pva.supplierCurrencyAmount),0) - ROUND(IFNULL(taxdetail.taxAmount,0),2)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $ex_rate .= 'SUM(detail.taxAmount/detail.supplierCurrencyExchangeRate) as  taxAmount,';
                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                //$fields7 = $val . ' > 0';
                $fields7 = $val . ' > 0.01';

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";

                $groupByExplode = "";
                if ($groupBy) {
                    $groupByExplode = "," . join(',', $groupBy);
                }
            }
        }

        $result = $this->db->query("SELECT $fields3 a.supplierName,a.supplierSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.supplierID FROM
((SELECT $fields srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,`srp_erp_paysupplierinvoicemaster`.`supplierID` as supplierID FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (
    SELECT $ex_rate InvoiceAutoID
    FROM srp_erp_paysupplierinvoicedetail as detail
    GROUP BY InvoiceAutoID
) taxdetail ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = taxdetail.InvoiceAutoID
LEFT JOIN
(
	SELECT
		$fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
	srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`supplierID`,srp_erp_paysupplierinvoicemaster.`bookingDate`,srp_erp_paysupplierinvoicemaster.InvoiceAutoID HAVING $fields7)
UNION ALL
(SELECT $fields2 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,`srp_erp_paymentvouchermaster`.`partyID` as supplierID
FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`partyID`,srp_erp_paymentvouchermaster.`PVdate`,srp_erp_paymentvouchermaster.payVoucherAutoId HAVING (" . join(' AND ', $having) . "))
  UNION ALL
(SELECT $fields8 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.`debitNoteDate`) as age,`srp_erp_debitnotemaster`.`supplierID` as supplierID  FROM srp_erp_debitnotemaster
LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  AND srp_erp_paymentvouchermaster.approvedYN = 1 AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`supplierID`,`srp_erp_debitnotemaster`.`debitNoteDate`,srp_erp_debitnotemaster.debitNoteMasterAutoID HAVING (" . join(' AND ', $having) . "))

UNION ALL
(SELECT $fields10 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate AS bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_stockreturnmaster.stockReturnCode AS bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.`returnDate`) as age,`srp_erp_stockreturnmaster`.`supplierID` as supplierID  FROM srp_erp_stockreturnmaster
LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND  srp_erp_paymentvouchermaster.approvedYN = 1  AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`supplierID`,`srp_erp_stockreturnmaster`.`returnDate`,srp_erp_stockreturnmaster.stockReturnAutoID HAVING (" . join(' AND ', $having) . "))) as a GROUP BY a.supplierSystemCode $groupByExplode ")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_aging_detail_report()
    {
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selected vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $ex_rate ="";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $ex_rate .= 'IFNULL(SUM(ap.taxAmount/ap.companyReportingExchangeRate),0) AS taxAmount,';
                   // $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . '  + pdetail.taxAmount/srp_erp_paysupplierinvoicemaster.companyReportingCurrency ) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $ex_rate .= 'IFNULL(SUM(ap.taxAmount/ap.companyLocalExchangeRate),0) AS taxAmount,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $ex_rate .= 'IFNULL(SUM(ap.taxAmount/ap.transactionExchangeRate),0) AS taxAmount,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $ex_rate .= 'IFNULL(SUM(ap.taxAmount/ap.supplierCurrencyExchangeRate),0) AS taxAmount,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $having[] = $val . '!= 0';
                }

                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . '  + ROUND(pdetail.taxAmount,2) ) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                //$fields7 = $val . ' > 0';
                $fields7 = $val . ' > 0.01';

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
            }
        }


        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.supplierInvoiceNo,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.supplierName,a.supplierSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,DATE_FORMAT( a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
((SELECT $fields srp_erp_paysupplierinvoicemaster.invoiceAutoID,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo as supplierInvoiceNo,srp_erp_paysupplierinvoicemaster.documentID as documentID,srp_erp_paysupplierinvoicemaster.bookingInvCode as documentCode,srp_erp_paysupplierinvoicemaster.bookingDate as documentDate, srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,srp_erp_paysupplierinvoicemaster.invoiceDueDate FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN (
    SELECT $ex_rate ap.InvoiceAutoID
    FROM srp_erp_paysupplierinvoicedetail AS ap
    GROUP BY ap.InvoiceAutoID,ap.InvoiceAutoID
  ) pdetail
  ON srp_erp_paysupplierinvoicemaster.`InvoiceAutoID` = pdetail.InvoiceAutoID

LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
	srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1  AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "   GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`,srp_erp_paysupplierinvoicemaster.`bookingDate` HAVING $fields7)
UNION ALL
(SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_paymentvouchermaster.documentID AS documentID,
srp_erp_paymentvouchermaster.PVcode AS documentCode,
					srp_erp_paymentvouchermaster.PVDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,	'-' AS invoiceDueDate
FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID`,srp_erp_paymentvouchermaster.`PVdate` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(
SELECT $fields8
`srp_erp_debitnotemaster`.`debitNoteMasterAutoID` as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_debitnotemaster.documentID AS documentID,
srp_erp_debitnotemaster.debitNoteCode AS documentCode,
					srp_erp_debitnotemaster.debitNoteDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.debitNoteDate) as age,'-' AS invoiceDueDate
  FROM srp_erp_debitnotemaster
LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "   GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.approvedYN = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`,`srp_erp_debitnotemaster`.`debitNoteDate` HAVING (" . join(' AND ', $having) . "))


UNION ALL
(
SELECT $fields10
`srp_erp_stockreturnmaster`.`stockReturnAutoID` as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_stockreturnmaster.documentID AS documentID,
srp_erp_stockreturnmaster.stockReturnCode AS documentCode,srp_erp_stockreturnmaster.returnDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.returnDate) as age,'-' AS invoiceDueDate
  FROM srp_erp_stockreturnmaster
LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvouchermaster.approvedYN = 1 AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`stockReturnAutoID`,`srp_erp_stockreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


) as a GROUP BY a.documentCode ")->result_array();
        //echo $this->db->last_query();
        return $result;
    }


    function get_accounts_receivable_customer_ledger_report()
    {
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected vendor*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_generalledger.partyAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $feilds3 = " ORDER BY a.documentDate";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds3 = " ORDER BY a.documentDate,a.transactionCurrency";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }

                if($val == 'seNumber') {
                    $feilds .= 'cus.seNumber as seNumber,';
                    $feilds2 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber') {
                    $feilds .= " SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                    $feilds2 .= " a." . $val . " AS " . $val . ",";
                    $feilds2 .= " a." . $val . "DecimalPlaces,";
                }
            }
        }

        $result = $this->db->query("SELECT $feilds2 a.document,a.documentMasterAutoID,
    DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.customerAutoID,a.customerName,a.customerSystemCode,a.GLSecondaryCode,a.GLDescription,IF(a.referenceNo IS NULL, a.receiptReferenceNo, a.referenceNo) as referenceNo, DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
     ((SELECT $feilds srp_erp_documentcodemaster.document,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,cus.referenceNo,receipt.referanceNo as receiptReferenceNo,cus.invoiceDueDate FROM srp_erp_generalledger
    INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_customermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_generalledger.documentCode  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_customerinvoicemaster cus on cus.invoiceAutoID = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'CINV'
    LEFT JOIN srp_erp_customerreceiptmaster receipt on receipt.receiptVoucherAutoId = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'RV'
    WHERE $customerOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds '' as document,srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,'' as referenceNo, '' as receiptReferenceNo,
	'' as invoiceDueDate  FROM srp_erp_generalledger
    INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_customermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    	LEFT JOIN srp_erp_customerinvoicemaster cus on cus.invoiceAutoID = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'CINV'
    	LEFT JOIN srp_erp_customerreceiptmaster receipt on receipt.receiptVoucherAutoId = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'RV'
    WHERE $customerOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.GLAutoID,srp_erp_customermaster.customerAutoID)) AS a
      $feilds3")->result_array();
        //   echo $this->db->last_query();
        return $result;
    }


    function get_accounts_receivable_customer_ledger_group_report()
    {
        $company = $this->get_group_company();
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected vendor*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $feilds = "";
        $feilds2 = "";
        $feilds3 = " ORDER BY a.documentDate";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds3 = " ORDER BY a.documentDate,a.transactionCurrency";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                $feilds .= "SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
                $feilds2 .= " a." . $val . "DecimalPlaces,";
            }
        }

        $result = $this->db->query("SELECT $feilds2 a.document,a.documentMasterAutoID,
    DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.customerName,a.customerSystemCode,a.GLSecondaryCode,a.GLDescription,
	a.referenceNo,
	DATE_FORMAT( a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate  FROM
     ((SELECT $feilds dc.document,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,cus.referenceNo,cus.invoiceDueDate  FROM srp_erp_generalledger
    INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID
    INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_generalledger.documentCode)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_customerinvoicemaster cus ON cus.invoiceAutoID = srp_erp_generalledger.documentMasterAutoID
	AND srp_erp_generalledger.documentCode = 'CINV'
    WHERE $customerOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ") GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds '' as document,srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,'' AS referenceNo,
	'' AS invoiceDueDate  FROM srp_erp_generalledger
    INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID
    INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    WHERE $customerOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_generalledger.companyID IN(" . join(',', $company) . ")
    GROUP BY coa.GLAutoID,
	cust.groupCustomerAutoID)) AS a
      $feilds3")->result_array();
        //echo $this->db->last_query();
        return $result;
    }


    function get_accounts_receivable_customer_statement_report($overdue = false)
    {
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        /* Acknowledgement Group by based on Policy */
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }
        $segment = $this->input->post("location");
        $segmentQuery = "";

        $segmentQuery1 = "";
        $segmentQuery2 = "";

        $segmentQuery3 = "";
        $segmentQuery4 = "";
        $segmentQuery5 = "";
        $segmentQuery6 = "";
        if ($segment) {
            
            $segmentQuery = "AND srp_erp_customerinvoicemaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery1 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery2 = '';//"AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery3 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery6 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery4 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";//"AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery5 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";//"AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $retentionamount = "";
        $fieldrebate = "";
        $fieldrebate_sales_return = "";
        $word="seNumber";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        $val_invoice_amount = 'invoiceAmount';

        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC,transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0) + IFNULL( salesTax.salesTaxAmount,0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';


                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";

                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0) + IFNULL( salesTax.salesTaxAmount/srp_erp_salesreturnmaster.companyReportingExchangeRate,0)) * -1 as ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';


                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0) + IFNULL( salesTax.salesTaxAmount/srp_erp_salesreturnmaster.companyLocalExchangeRate,0)) * -1 as ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                }
                else if($val == 'seNumber') {
                    $fields .= 'srp_erp_customerinvoicemaster.seNumber as seNumber,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber') {
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount.' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                    $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields3 .= "'-' as seNumber,";
                    $fields3 .= 'ROUND(a.' . $val . ', a.' . $val . 'DecimalPlaces) AS rowCheck,';
                    if($val == 'transactionAmount'){
                        $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val_invoice_amount . '),0) as ' . $val . ',';
                    }else{
                        $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                    }
                   
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                }
            }
        }

        $fields .= "srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.vatIdNo as VatNO,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,	srp_erp_customerinvoicemaster.referenceNo AS referenceNo, srp_erp_customerinvoicemaster.segmentCode AS segmentCode";

        if(preg_match("/\b{$word}\b/", $fields)==1){
                        
        }else{
            $fields .= ",'-' as seNumber";
        }

        $result = $this->db->query("SELECT 
        $fields3 a.invoiceAutoID,
        a.document,
        a.age,
        DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,
        a.customerAddress,
        a.customerName,
        a.customerSystemCode,
        a.comments,
        a.VatNO,
        a.documentID,
        DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,
        a.GLSecondaryCode,a.GLDescription,
        a.bookingInvCode,
        a.customerID,
        a.referenceNo,a.segmentCode
        FROM
((SELECT $fields
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
    WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery2 AND  srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery3 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)



LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.vatIdNo as VatNO,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo,'-' as segmentCode,'-' as seNumber
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery1 AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` HAVING (" . join(' AND ', $having) . ")
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.vatIdNo as VatNO,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo,`srp_erp_creditnotedetail`.segmentCode as segmentCode,'-' as seNumber
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL $segmentQuery6
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE 
    `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery4  AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
    srp_erp_customermaster.vatIdNo as VatNO,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo,'-' as segmentCode,'-' as seNumber
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
    LEFT JOIN ( Select SUM(amount) as salesTaxAmount,documentMasterAutoID from srp_erp_taxledger GROUP BY documentMasterAutoID ) as salesTax ON srp_erp_salesreturnmaster.salesReturnAutoID = salesTax.documentMasterAutoID
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` 
    LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  
    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 $segmentQuery5  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();
    // echo $this->db->last_query();exit;
        return $result;
    }

    function get_accounts_receivable_customer_statement_group_report($overdue = false)
    {
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $customer = $this->input->post("customerTo");
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "groupCustomerMasterID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'ROUND(a.' . $val . ', a.' . $val . 'DecimalPlaces) AS rowCheck,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,dc.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
 INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode,customerAddress1 FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE $customerOR  AND srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_customerinvoicemaster.customerID = cust.customerMasterID
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_customerinvoicemaster.documentID)
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN ( " . join(",", $company) . ")
	AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'

	GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE `srp_erp_customerinvoicemaster`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,dc.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,'Advance' as comments,srp_erp_customerreceiptmaster.documentID,'-' as invoiceDueDate,srp_erp_customerreceiptmaster.RVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerreceiptmaster.RVCode as bookingInvCode,`srp_erp_customerreceiptmaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID`IN ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode,customerAddress1 FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE $customerOR AND srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_customerreceiptmaster.customerID = cust.customerMasterID
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID
LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_customerreceiptmaster.documentID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 ) $fields7) as a $where $fields7")->result_array();
        
        return $result;
    }

    function get_accounts_receivable_customer_aging_summary_report()
    {
        $customer = $this->input->post("customerTo");
        $groupbycus = $this->input->post('groupbycus');
        
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        /* Acknowledgement Group by based on Policy */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customerOR .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $fields12 = "";
        $fields13 = '';
        $fields3_age = '';
        $fieldretention = "";
        $word ="seNumber";
        $fieldrebate = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        $val_invoice_amount = 'invoiceAmount';

        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldretention .= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - '.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0) + IFNULL(salesTax.salesTaxAmount/srp_erp_salesreturnmaster.companyReportingExchangeRate,0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldretention .= '0';
                    $fieldrebate .= '0';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val_invoice_amount . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0) + IFNULL(salesTax.salesTaxAmount,0) ) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                    $groupBy[] = $val . 'currency';
                }else if($val == 'seNumber') {
                    $fields .= 'srp_erp_customerinvoicemaster.seNumber as seNumber,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber'){
                    if ($val == 'transactionAmount'){
                        $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val_invoice_amount . ') as ' . $val . ',';
                    }else{
                        $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                    }
                   
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . '- '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields12 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                    
                    
                    // $having[] = $val . '!= 0';
                    // $fields7 = $val . ' > 0';
                    $having[] = $val . ' * -1 ' . ' > 0.01';
                    $fields7 = $val . ' > 0.01';

                    if (!empty($aging)) { /*calculate aging range in query*/
                        $count = count($aging);
                        $c = 1;
                        foreach ($aging as $val2) {
                            if ($count == $c) {
                                $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            } else {
                                $list = explode("-", $val2);
                                $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            }
                            $c++;
                        }
                    }
                    $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
                }
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }

        $customerJoin = "";
        if($customer){
            $customerJoin = join(',', $customer);
        }
        
        if(preg_match("/\b{$word}\b/", $fields)==1){
                        
        }else{
            //$fields .= "'-' as seNumber,";
        }

        if(preg_match("/\b{$word}\b/", $fields3)==1){
                        
        }else{
            $fields13 .= "'-' as seNumber";
        }
   
        if($groupbycus == 1){
            $result = $this->db->query("SELECT $fields3_age t2.*,IF(customerMas.customerPartyID !='',customerMas.customerPartyID ,t2.customerID) as customerPartyID FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as referenceNo,invoiceDueDate,a.CustomerID as customerID,a.age,a.cusmasterID,$fields13	 FROM
                                    ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,CustomerID,IF(srp_erp_customermaster.masterID !='',srp_erp_customermaster.masterID ,srp_erp_customermaster.customerAutoID) as cusmasterID  FROM `srp_erp_customerinvoicemaster`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN
                                    (
                                        SELECT
                                            $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                                        FROM
                                        srp_erp_customerreceiptdetail
                                            INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                                            AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                                    ) pvd ON (
                                        pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )
                                    LEFT JOIN
                                    (
                                        SELECT
                                            $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                                        FROM
                                            srp_erp_creditnotedetail
                                            INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                                        WHERE
                                            `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                                    ) cnd ON (
                                        cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )
                                    LEFT JOIN(
                                    SELECT
                                    $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                        FROM srp_erp_rvadvancematchdetails
                                        INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                        WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " 
                                        AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                        GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                                        ca ON (
                                        ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
                                    UNION ALL (
                                    SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` as customerID,IF(srp_erp_customermaster.masterID !='',srp_erp_customermaster.masterID ,srp_erp_customermaster.customerAutoID) as cusmasterID,'-' as seNumber 
                                    FROM srp_erp_customerreceiptmaster
                                    INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                                    LEFT JOIN (SELECT $fields12 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                            FROM srp_erp_rvadvancematchdetails
                                            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                            WHERE srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                            GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                            ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                                    UNION ALL (

                                    SELECT $fields8
                                    `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                                    srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                                        srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo, `srp_erp_creditnotemaster`.`customerID` AS customerID,IF(srp_erp_customermaster.masterID !='',srp_erp_customermaster.masterID ,srp_erp_customermaster.customerAutoID) as cusmasterID,'-' as seNumber 
                                    FROM srp_erp_creditnotemaster
                                    INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId AS receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' AND approvedYN = 1 GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


                                    UNION ALL (
                                    SELECT $fields11
                                    `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                                    srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                                        srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,`srp_erp_salesreturnmaster`.`customerID` AS customerID,IF(srp_erp_customermaster.masterID !='',srp_erp_customermaster.masterID ,srp_erp_customermaster.customerAutoID) as cusmasterID,'-' as seNumber
                                    FROM srp_erp_salesreturnmaster
                                    INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                    LEFT JOIN ( Select SUM(amount) as salesTaxAmount,documentMasterAutoID from srp_erp_taxledger GROUP BY documentMasterAutoID ) as salesTax ON srp_erp_salesreturnmaster.salesReturnAutoID = salesTax.documentMasterAutoID
                                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                                        LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                                                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR' GROUP BY creditNoteAutoID
                                                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
                                    )

                                    ) as a GROUP BY a.documentCode,a.invoiceAutoID,a.documentID) as tbl1
                                        GROUP BY
                                        tbl1.invoiceAutoID,tbl1.documentID) t2
                                        LEFT JOIN (
                                        
                                        SELECT 
                                        customerAutoID as customerPartyID 
                                        FROM 
                                        srp_erp_customermaster 
                                        WHERE 
                                        customerAutoID IN ($customerJoin)
                                        
                                        ) customerMas ON customerMas.customerPartyID = t2.cusmasterID
                                        
                                        GROUP BY
                                        t2.currency,
                                        customerPartyID
                                    ")->result_array();  
        }else{
            $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as referenceNo,invoiceDueDate,a.CustomerID as customerID,a.age	 FROM
                                            ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,CustomerID,$fields13 FROM `srp_erp_customerinvoicemaster`
                                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN
                                            (
                                                SELECT
                                                    $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                                                FROM
                                                srp_erp_customerreceiptdetail
                                                    INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                                                    AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                                    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                                            ) pvd ON (
                                                pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                            )
                                            LEFT JOIN
                                            (
                                                SELECT
                                                    $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                                                FROM
                                                    srp_erp_creditnotedetail
                                                    INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                                                WHERE
                                                    `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                                            ) cnd ON (
                                                cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                            )
                                            LEFT JOIN(
                                            SELECT
                                            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                                FROM srp_erp_rvadvancematchdetails
                                                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                                WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                                GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                                                ca ON (
                                                ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                            )
                                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                                            WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
                                            UNION ALL (
                                            SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` as customerID,'-' as seNumber
                                            FROM srp_erp_customerreceiptmaster
                                            INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                                            LEFT JOIN (SELECT $fields12 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                                    FROM srp_erp_rvadvancematchdetails
                                                    INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                                    WHERE srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                                    GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                                    ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                                            WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                                            UNION ALL (

                                            SELECT $fields8
                                            `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                                            srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                                                srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo, `srp_erp_creditnotemaster`.`customerID` AS customerID,'-' as seNumber
                                            FROM srp_erp_creditnotemaster
                                            INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId AS receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' AND approvedYN = 1 GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                                            WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


                                            UNION ALL (
                                            SELECT $fields11
                                            `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                                            srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                                                srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,`srp_erp_salesreturnmaster`.`customerID` AS customerID,'-' as seNumber
                                            FROM srp_erp_salesreturnmaster
                                            INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                            LEFT JOIN ( Select SUM(amount) as salesTaxAmount,documentMasterAutoID from srp_erp_taxledger GROUP BY documentMasterAutoID ) as salesTax ON srp_erp_salesreturnmaster.salesReturnAutoID = salesTax.documentMasterAutoID
                                            LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                                                LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                                                                    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR' GROUP BY creditNoteAutoID
                                                        ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                                            WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
                                            )

                                            ) as a GROUP BY a.documentCode,a.invoiceAutoID,a.documentID) as tbl1
                                                GROUP BY
                                                tbl1.invoiceAutoID,tbl1.documentID) t2
                                                GROUP BY
                                                t2.customerSystemCode,
                                                t2.currency
                                            ")->result_array();

        }
       
        // echo $this->db->last_query();

        // echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_detail_report()
    {
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customerOR .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $word = "seNumber";
        $fields11 = "";
        $fieldretention = "";
        $fieldrebate = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        $val_invoice_amount = 'invoiceAmount';

        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0) + IFNULL(salesTax.salesTaxAmount/srp_erp_salesreturnmaster.companyReportingExchangeRate , 0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0) + IFNULL(salesTax.salesTaxAmount/srp_erp_salesreturnmaster.companyLocalExchangeRate , 0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    //$fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '0';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val_invoice_amount . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0) + IFNULL(salesTax.salesTaxAmount , 0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }else if($val == 'seNumber') {
                    $fields .= 'srp_erp_customerinvoicemaster.seNumber as seNumber,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber'){
                    if ($val == 'transactionAmount'){
                        $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val_invoice_amount . ') as ' . $val . ',';
                    }else{
                        $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                    }
                  
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                    // $having[] = $val . '!= 0';
                    $having[] = $val.' * -1' . ' > 0.01';
                    $fields7 = $val . ' > 0.01';
                    if (!empty($aging)) { /*calculate aging range in query*/
                        $count = count($aging);
                        $c = 1;
                        foreach ($aging as $val2) {
                            if ($count == $c) {
                                $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            } else {
                                $list = explode("-", $val2);
                                $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            }
                            $c++;
                        }
                    }
                    $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                    $fields10 .= "SUM($val) as TotalRow, ";
                }
            }
        }

        $fields.="srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo";

        if(preg_match("/\b{$word}\b/", $fields)==1){
                        
        }else{
            $fields .= ",'-' as seNumber";
        }

        if(preg_match("/\b{$word}\b/", $fields3)==1){
                        
        }else{
            $fields3 .= "'-' as seNumber,";
        }

        $result = $this->db->query("Select * from(SELECT $fields3 $fields10 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerAutoID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
                    ((SELECT $fields  FROM `srp_erp_customerinvoicemaster`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN
                    (
                        SELECT
                            $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                        FROM
                        srp_erp_customerreceiptdetail
                            INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                            AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                    ) pvd ON (
                        pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )
                    LEFT JOIN
                    (
                        SELECT
                            $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                        FROM
                            srp_erp_creditnotedetail
                            INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                        WHERE
                            `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                    ) cnd ON (
                        cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )

                    LEFT JOIN(
                        SELECT
                            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                        FROM srp_erp_rvadvancematchdetails
                        INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                        WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                        GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                    ca ON (
                        ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
                    UNION ALL (
                    SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'-' as invoiceDueDate, referanceNo as  referenceNo,'-' as seNumber
                    FROM srp_erp_customerreceiptmaster
                    INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                    LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                            FROM srp_erp_rvadvancematchdetails
                            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                            WHERE srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "' 
                            GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                            ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                    UNION ALL (

                    SELECT $fields8
                    `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                    srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                        srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,'-' as seNumber
                    FROM srp_erp_creditnotemaster
                    INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId as receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' AND approvedYN = 1 AND srp_erp_customerreceiptmaster.RVdate <= '" . format_date($this->input->post("from")) . "'  GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

                    UNION ALL (

                    SELECT $fields11
                    `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                    srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                        srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,'-' as seNumber
                    FROM srp_erp_salesreturnmaster
                    INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                    LEFT JOIN ( Select SUM(amount) as salesTaxAmount,documentMasterAutoID from srp_erp_taxledger GROUP BY documentMasterAutoID ) as salesTax ON srp_erp_salesreturnmaster.salesReturnAutoID = salesTax.documentMasterAutoID
                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                    LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                                    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
                    ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


                    ) as a GROUP BY a.documentCode,a.invoiceAutoID,a.documentID) AS tbl1
                    GROUP BY
                        tbl1.invoiceAutoID,tbl1.documentID")->result_array();
    //    echo $this->db->last_query(); exit;
        return $result;

    }

    function get_finance_report_drilldown($fromTo, $segment, $financialBeginingDate)
    {
        $company_type = $this->session->userdata("companyType");
        $comapnyID = $this->common_data['company_data']['company_id'];
        $dateQuery = "";
        $dateQuery2 = "";
        $segmentQuery = "";
        if ($segment) {
            $segment = $this->input->post("segment");
            $segmentQuery = "AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")";
        }
        $glcode = $this->input->post("glCode");
        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("currency");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            $feilds[] = "srp_erp_generalledger." . $fieldNameChk . " as " . $fieldNameChk;
            $feilds2[] = "a." . $fieldNameChk;
            $feilds3[] = "SUM(" . $fieldNameChk . ") as " . $fieldNameChk;
            if ($fieldNameChk == "companyReportingAmount") {
                $feilds[] = "CR.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
                $feilds3[] = "CR.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
            }
            if ($fieldNameChk == "companyLocalAmount") {
                $feilds[] = "CL.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
                $feilds3[] = "CL.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
            }
            $feilds2[] = "a." . $fieldNameChk . "DecimalPlaces";
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "";
        $finaceYearYN = getPolicyValues('HFY','All');
        $datefrom = ($finaceYearYN == 1 ?  format_date($this->input->post("from")) : $financialBeginingDate["beginingDate"] );
        $dateto = ($finaceYearYN == 1 ? format_date($this->input->post("to")) : format_date($this->input->post("from")));

        if ($this->input->post("masterCategory") == "BS") {
            if (is_null($this->input->post("month")) || empty($this->input->post("month"))) {
                if ($fromTo) {
                    print_r(1);
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'";
                } else {

                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $datefrom . "' AND '" . $dateto . "'";
                }
                $dateQuery2 = "srp_erp_generalledger.documentDate < '" . $datefrom . "'";

            } else {

                $finaceYearYN = getPolicyValues('HFY','All');
                $date = ($finaceYearYN == 1 ? strtotime($this->input->post("to")) : strtotime($this->input->post("from")));
                if ($fromTo) {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') BETWEEN '" . date('Y-m', $date) . "' AND '" . date('Y-m', strtotime($this->input->post("to"))) . "'";
                } else {

                    if (date('Y-m', $date) == $this->input->post("month")) {
                        $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $this->input->post("month") . "-01" . "' AND '" . $this->input->post("month") . "-" . date('d', $date) . "'";

                    } else {

                        $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                    }
                }
                $dateQuery2 = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') < '" . $this->input->post("month") . "'";
            }

            $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.approvedbyEmpName,a.documentSystemCode,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentNarration,a.document,a.GLSecondaryCode,a.partySystemCode,a.segmentID,a.GLDescription,a.masterCategory,a.GLAutoID,a.amount_type,a.documentDate as nonFormatDate, a.amount_type FROM ((SELECT
                $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.approvedbyEmpName,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentNarration,dc.document,srp_erp_chartofaccounts.GLSecondaryCode,IF(cust.customerSystemCode IS NOT NULL,cust.customerName,IF (supp.supplierSystemCode IS NOT NULL,supp.supplierName,'-')) AS partySystemCode,CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.amount_type 
                FROM srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT * FROM srp_erp_customermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY customerAutoID) cust ON srp_erp_generalledger.partyAutoID = cust.customerAutoID AND srp_erp_generalledger.partyType = 'CUS'
                LEFT JOIN (SELECT * FROM srp_erp_suppliermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY supplierAutoID) supp ON srp_erp_generalledger.partyAutoID = supp.supplierAutoID AND srp_erp_generalledger.partyType = 'SUP'
                LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . ") dc ON (dc.documentID = srp_erp_generalledger.documentCode)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                WHERE srp_erp_generalledger.GLAutoID = '$glcode' $segmentQuery AND $dateQuery AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)
                UNION ALL
                (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,'-' as approvedbyEmpName,'-' as documentSystemCode,'-' as documentDate,'CF Balance' as documentNarration,'-' AS document,'-' AS GLSecondaryCode,'-' AS partySystemCode,'-' AS  segmentID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.amount_type 
                FROM srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                WHERE srp_erp_generalledger.GLAutoID = '$glcode' $segmentQuery AND srp_erp_chartofaccounts.masterCategory = 'BS' AND $dateQuery2 AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.GLAutoID )) as a ORDER BY nonFormatDate ASC";
        } elseif ($this->input->post("masterCategory") == "PL") {

            if (is_null($this->input->post("month")) || empty($this->input->post("month"))) {
                if ($fromTo) {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'";
                } else {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $datefrom . "' AND '" . $dateto . "'";
                }
            } else {
                if ($fromTo) {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                } else {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                }
            }
            if ($company_type == 1) {
                $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.approvedbyEmpName,a.documentSystemCode,a.documentDate,a.documentNarration,a.document,a.GLSecondaryCode,a.partySystemCode,a.segmentID,a.GLDescription,a.amount_type,a.masterCategory,a.GLAutoID,a.documentDate as nonFormatDate FROM ((SELECT
                    $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.approvedbyEmpName,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentNarration,srp_erp_documentcodemaster.document,srp_erp_chartofaccounts.GLSecondaryCode,IF(srp_erp_customermaster.customerSystemCode IS NOT NULL,srp_erp_customermaster.customerName,IF (srp_erp_suppliermaster.supplierSystemCode IS NOT NULL,srp_erp_suppliermaster.supplierName,'-')) AS partySystemCode,CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,
                    srp_erp_generalledger.amount_type
                    FROM srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_customermaster.companyID = " . $this->common_data['company_data']['company_id'] . "  AND srp_erp_generalledger.partyType = 'CUS'
                    LEFT JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "  AND srp_erp_generalledger.partyType = 'SUP'
                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_generalledger.documentCode AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE srp_erp_generalledger.GLAutoID = '$glcode' $segmentQuery AND $dateQuery AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)) as a ORDER BY nonFormatDate ASC";
            } else {
                $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.approvedbyEmpName,a.documentSystemCode,a.documentDate,a.documentNarration,a.document,a.GLSecondaryCode,a.partySystemCode,a.segmentID,a.GLDescription,a.masterCategory,a.GLAutoID,a.amount_type,a.documentDate as nonFormatDate FROM ((SELECT
                    $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.approvedbyEmpName,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentNarration,srp_erp_documentcodemaster.document,srp_erp_chartofaccounts.GLSecondaryCode,IF(srp_erp_customermaster.customerSystemCode IS NOT NULL,srp_erp_customermaster.customerName,IF (srp_erp_suppliermaster.supplierSystemCode IS NOT NULL,srp_erp_suppliermaster.supplierName,'-')) AS partySystemCode,CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.amount_type
                    FROM srp_erp_generalledger
                    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )
                    LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )
                    LEFT JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_customermaster.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )   AND srp_erp_generalledger.partyType = 'CUS'
                    LEFT JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_suppliermaster.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )  AND srp_erp_generalledger.partyType = 'SUP'
                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_generalledger.documentCode AND srp_erp_documentcodemaster.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
                    WHERE srp_erp_generalledger.GLAutoID = '$glcode' $segmentQuery AND $dateQuery AND srp_erp_generalledger.companyID IN ( SELECT companyID FROM `srp_erp_companygroupdetails` WHERE companyGroupID = {$comapnyID} )
                    ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)) as a ORDER BY nonFormatDate ASC";
            }

        }
        $result = $this->db->query($sql)->result_array();
        // echo $this->db->last_query();
        return $result;
    }


    function get_finance_report_group_drilldown($fromTo, $segment, $financialBeginingDate)
    {
        $dateQuery = "";
        $dateQuery2 = "";
        $company = $this->get_group_company();
        $segmentQuery = "";
        if ($segment) {
            $segment = $this->input->post("segment");
            $segmentQuery = "AND srp_erp_groupsegment.segmentID IN(" . join(',', $segment) . ")";
        }
        //$glcode = $this->input->post("glCode");
        $glcode = $this->get_group_chartofaccount();
        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("currency");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            $feilds[] = "srp_erp_generalledger." . $fieldNameChk . " as " . $fieldNameChk;
            $feilds2[] = "a." . $fieldNameChk;
            $feilds3[] = "SUM(" . $fieldNameChk . ") as " . $fieldNameChk;
            if ($fieldNameChk == "companyReportingAmount") {
                $feilds[] = "CR.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
                $feilds3[] = "CR.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
            }
            if ($fieldNameChk == "companyLocalAmount") {
                $feilds[] = "CL.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
                $feilds3[] = "CL.DecimalPlaces as " . $fieldNameChk . "DecimalPlaces";
            }
            $feilds2[] = "a." . $fieldNameChk . "DecimalPlaces";
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "";
        if ($this->input->post("masterCategory") == "BS") {
            if (is_null($this->input->post("month")) || empty($this->input->post("month"))) {
                if ($fromTo) {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'";
                } else {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $financialBeginingDate["beginingDate"] . "' AND '" . format_date($this->input->post("from")) . "'";
                }
                $dateQuery2 = "srp_erp_generalledger.documentDate < '" . $financialBeginingDate["beginingDate"] . "'";
            } else {
                if ($fromTo) {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') BETWEEN '" . date('Y-m', strtotime($this->input->post("from"))) . "' AND '" . date('Y-m', strtotime($this->input->post("to"))) . "'";
                } else {
                    if (date('Y-m', strtotime($this->input->post("from"))) == $this->input->post("month")) {
                        $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $this->input->post("month") . "-01" . "' AND '" . $this->input->post("month") . "-" . date('d', strtotime($this->input->post("from"))) . "'";
                    } else {
                        $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                    }
                }
                $dateQuery2 = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') < '" . $this->input->post("month") . "'";
            }

            $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.approvedbyEmpName,a.documentSystemCode,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentNarration,a.document,a.GLSecondaryCode,a.partySystemCode,a.segmentID,a.GLDescription,a.masterCategory,a.GLAutoID FROM ((SELECT
  $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.approvedbyEmpName,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentNarration,dc.document,coa.GLSecondaryCode,IF(cust.groupcustomerSystemCode IS NOT NULL,cust.groupCustomerName,IF (supp.groupSupplierSystemCode IS NOT NULL,supp.groupSupplierName,'-')) AS partySystemCode,CONCAT(seg.segmentCode,'-',seg.description) as segmentID,coa.GLDescription,coa.masterCategory,srp_erp_generalledger.GLAutoID
 FROM srp_erp_generalledger
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,masterCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
 LEFT JOIN (SELECT srp_erp_groupsegment.*,srp_erp_groupsegmentdetails.segmentID as groupSegmentID FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID WHERE groupID = " . current_companyID() . " $segmentQuery) seg ON srp_erp_generalledger.segmentID = seg.groupSegmentID
 LEFT JOIN (SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . " GROUP BY customerMasterID) cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID AND srp_erp_generalledger.partyType = 'CUS'
 LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . " GROUP BY SupplierMasterID) supp ON srp_erp_generalledger.partyAutoID = supp.SupplierMasterID AND srp_erp_generalledger.partyType = 'SUP'
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN (" . join(',', $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_generalledger.documentCode)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") AND $dateQuery AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ")
 ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)
 UNION ALL
 (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,'-' as approvedbyEmpName,'-' as documentSystemCode,'-' as documentDate,'CF Balance' as documentNarration,'-' AS document,'-' AS GLSecondaryCode,'-' AS partySystemCode,'-' AS  segmentID,coa.GLDescription,coa.masterCategory,srp_erp_generalledger.GLAutoID
 FROM srp_erp_generalledger
INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,masterCategory,GLAutoID FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
LEFT JOIN (SELECT srp_erp_groupsegment.*,srp_erp_groupsegmentdetails.segmentID as groupSegmentID FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID WHERE groupID = " . current_companyID() . " $segmentQuery) seg ON srp_erp_generalledger.segmentID = seg.groupSegmentID
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") AND $dateQuery2 AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ") GROUP BY coa.GLAutoID )) as a ORDER BY documentDate,GLDescription DESC";
        } elseif ($this->input->post("masterCategory") == "PL") {
            if (is_null($this->input->post("month")) || empty($this->input->post("month"))) {
                if ($fromTo) {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'";
                } else {
                    $dateQuery = "srp_erp_generalledger.documentDate BETWEEN '" . $financialBeginingDate["beginingDate"] . "' AND '" . format_date($this->input->post("from")) . "'";
                }
            } else {
                if ($fromTo) {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                } else {
                    $dateQuery = "DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '" . $this->input->post("month") . "'";
                }
            }
            $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.approvedbyEmpName,a.documentSystemCode,a.documentDate,a.documentNarration,a.document,a.GLSecondaryCode,a.partySystemCode,a.segmentID,a.GLDescription,a.masterCategory,a.GLAutoID FROM ((SELECT
  $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.approvedbyEmpName,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentNarration,dc.document,coa.GLSecondaryCode,IF(cust.groupcustomerSystemCode IS NOT NULL,cust.groupCustomerName,IF (supp.groupSupplierSystemCode IS NOT NULL,supp.groupSupplierName,'-')) AS partySystemCode,CONCAT(seg.segmentCode,'-',seg.description) as segmentID,coa.GLDescription,coa.masterCategory,srp_erp_generalledger.GLAutoID
 FROM srp_erp_generalledger
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription,masterCategory FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
 LEFT JOIN (SELECT srp_erp_groupsegment.*,srp_erp_groupsegmentdetails.segmentID as groupSegmentID FROM srp_erp_groupsegment INNER JOIN srp_erp_groupsegmentdetails ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID WHERE groupID = " . current_companyID() . " $segmentQuery) seg ON srp_erp_generalledger.segmentID = seg.groupSegmentID
 LEFT JOIN (SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . " GROUP BY customerMasterID) cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID AND srp_erp_generalledger.partyType = 'CUS'
 LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . " GROUP BY SupplierMasterID) supp ON srp_erp_generalledger.partyAutoID = supp.SupplierMasterID AND srp_erp_generalledger.partyType = 'SUP'
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN (" . join(',', $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_generalledger.documentCode)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
 WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") AND $dateQuery AND srp_erp_generalledger.companyID IN (" . join(',', $company) . ")
 ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)) as a ORDER BY documentDate,GLDescription";
        }
        $result = $this->db->query($sql)->result_array();
        //echo $this->db->last_query();
        return $result;
    }


    function get_accounts_payable_report_drilldown($fromTo, $financialBeginingDate)
    {
        $vendor = $this->input->post("supplierID");
        $age = $this->input->post("age");
        $list = explode("-", $age);
        $finalCheck = "";
        if ($this->input->post('through') == $age) {
            $finalCheck = "a.age > " . $age;
        } else {
            $finalCheck = "a.age >= " . $list[0] . " AND a.age <= " . $list[1];
        }

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields7 = "";
        $fields6 = "";
        $having = array();
        $fieldNameChk = $this->input->post("currency");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            if ($fieldNameChk == 'transactionAmount') {
                $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'TC.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'TC.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $fieldNameChk . 'currency,';
                $fields7 .= 'TC.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
            } else if ($fieldNameChk == 'companyReportingAmount') {
                $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'CR.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $fieldNameChk . 'currency,';
                $fields7 .= 'CR.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
            } else if ($fieldNameChk == 'companyLocalAmount') {
                $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'CL.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'CL.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $fieldNameChk . 'currency,';
                $fields7 .= 'CL.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
            } else if ($fieldNameChk == 'supplierCurrencyAmount') {
                $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.partyAmount as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $fieldNameChk . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $fieldNameChk . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
            }
            $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $fieldNameChk . ') - (IFNULL(SUM(pvd.' . $fieldNameChk . '),0)+IFNULL(SUM(dnd.' . $fieldNameChk . '),0)+IFNULL(SUM(pva.' . $fieldNameChk . '),0) - IFNULL(taxdetail.taxAmount,0))) * -1  as ' . $fieldNameChk . ',';
            $fields3 .= 'a.' . $fieldNameChk . 'currency as ' . $fieldNameChk . 'currency,';
            $fields3 .= 'a.' . $fieldNameChk . 'DecimalPlaces,';
            $fields3 .= 'a.' . $fieldNameChk . ' as ' . $fieldNameChk . ',';
            $fields7 .= '(SUM(srp_erp_debitnotedetail.' . $fieldNameChk . ') - IFNULL(SUM(pvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
            $having[] = $fieldNameChk . '!= -0 AND ' . $fieldNameChk . ' != 0';
        }

        $result = $this->db->query("SELECT $fields3 a.InvoiceAutoID,a.supplierInvoiceNo,a.supplierName,a.supplierSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.age FROM
((SELECT $fields srp_erp_paysupplierinvoicemaster.InvoiceAutoID,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo as supplierInvoiceNo,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (
    SELECT SUM(detail.taxAmount) as  taxAmount,InvoiceAutoID
    FROM srp_erp_paysupplierinvoicedetail as detail
    GROUP BY InvoiceAutoID
) taxdetail ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = taxdetail.InvoiceAutoID
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
		srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'
	WHERE
		`srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "'
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE srp_erp_suppliermaster.supplierAutoID = $vendor AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "'  AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as InvoiceAutoID,'-' as supplierInvoiceNo,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age  FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE srp_erp_suppliermaster.supplierAutoID = $vendor AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NULL GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID`)
UNION ALL
(SELECT $fields7
srp_erp_debitnotemaster.debitNoteMasterAutoID as InvoiceAutoID,'-' as supplierInvoiceNo,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.debitNoteDate) as age FROM srp_erp_debitnotemaster
INNER JOIN `srp_erp_debitnotedetail` ON `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` AND `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE srp_erp_suppliermaster.supplierAutoID = $vendor AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`)) as a WHERE $finalCheck")->result_array();
        // echo $this->db->last_query();
        return $result;
    }

    function get_accounts_receivable_report_drilldown($fromTo, $financialBeginingDate)
    {
        $documentCurrency = $this->input->post("documentCurrency");
        $customer = $this->input->post("customerID");
        $SubCustomers = $this->input->post("SubCustomers");
        $customerList = explode("-", $SubCustomers);
        $customerList = implode(",", $customerList);
        $CustomerMasterCustomers = "";
        $InvoiceMasterCustomers = "";
        if (!empty($SubCustomers)) {
            $CustomerMasterCustomers = "(srp_erp_customermaster.customerAutoID = $customer OR srp_erp_customermaster.customerAutoID IN ($customerList) )";
            $InvoiceMasterCustomers = "(srp_erp_customerinvoicemaster.customerID = $customer OR srp_erp_customerinvoicemaster.customerID IN ($customerList) )";
        } else {
            $CustomerMasterCustomers = "(srp_erp_customermaster.customerAutoID = $customer)";
            $InvoiceMasterCustomers = "(srp_erp_customerinvoicemaster.customerID = $customer)";
        }

        /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $age = $this->input->post("age");
        $list = explode("-", $age);
        $finalCheck = "";
        if ($this->input->post('through') == $age) {
            $finalCheck = "a.age > " . $age;
        } else {
            $finalCheck = "a.age >= " . $list[0] . " AND a.age <= " . $list[1];
        }

        $currencyFilter = "";
        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $having = array();
        $fieldNameChk = $this->input->post("currency");
        $retentionamount = '';
        $fieldrebate = "";
        $fieldrebate_sales_return = "";
        if (isset($fieldNameChk)) {
            if ($fieldNameChk == 'transactionAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields8 .= "srp_erp_creditnotemaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "srp_erp_salesreturnmaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                $fields10 .= "(SUM( srp_erp_salesreturndetails.totalValue / srp_erp_salesreturnmaster.transactionExchangeRate ) -$fieldrebate_sales_return - IFNULL( ( rvd." . $fieldNameChk . " ), 0 )) * - 1 AS " . $fieldNameChk . ",";
                $retentionamount .='IFNULL(retensionTransactionAmount,0)';
                $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';

            } else if ($fieldNameChk == 'companyReportingAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields8 .= "srp_erp_creditnotemaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                $fields10 .= "srp_erp_salesreturnmaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "(SUM( srp_erp_salesreturndetails.totalValue / srp_erp_salesreturnmaster.companyReportingExchangeRate )-$fieldrebate_sales_return - IFNULL( ( rvd." . $fieldNameChk . " ), 0 )) * - 1 AS " . $fieldNameChk . ",";
                $retentionamount .='IFNULL(retensionReportingAmount,0)';
                $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

            } else if ($fieldNameChk == 'companyLocalAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields8 .= "srp_erp_creditnotemaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                $fields10 .= "srp_erp_salesreturnmaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "(SUM( srp_erp_salesreturndetails.totalValue / srp_erp_salesreturnmaster.companyLocalExchangeRate )-$fieldrebate_sales_return - IFNULL( ( rvd." . $fieldNameChk . " ), 0 )) * - 1 AS " . $fieldNameChk . ",";
                $retentionamount .='IFNULL(retensionLocalAmount,0)';
                $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

            } else if ($fieldNameChk == 'customerCurrencyAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $fieldNameChk . ',';
                $retentionamount .='0';
                $fieldrebate .= '0';

            }
            $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $fieldNameChk . '-'.$retentionamount . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $fieldNameChk . '),0)+IFNULL(SUM(cnd.' . $fieldNameChk . '),0)+IFNULL(SUM(ca.' . $fieldNameChk . '),0))) as ' . $fieldNameChk . ',';
            $fields3 .= 'a.' . $fieldNameChk . 'currency as ' . $fieldNameChk . 'currency,';
            $fields3 .= " a." . $fieldNameChk . "DecimalPlaces,";
            $fields3 .= 'a.' . $fieldNameChk . ' as ' . $fieldNameChk . ',';
            $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
            $fields9 .= "SUM( srp_erp_customerreceiptdetail." . $fieldNameChk . " ) AS " . $fieldNameChk . ",";
            $having[] = $fieldNameChk . '!= -0 AND ' . $fieldNameChk . ' != 0';
            $fields7 .= "(IFNULL( SUM( srp_erp_customerreceiptdetail." . $fieldNameChk . " ), 0 ) - IFNULL(( avd." . $fieldNameChk . "), 0 )) *- 1 AS " . $fieldNameChk . ",";
            $fields8 .= "(SUM( srp_erp_creditnotedetail." . $fieldNameChk . " ) - IFNULL( ( rvd." . $fieldNameChk . " ), 0 )) * - 1 AS " . $fieldNameChk . ",";

            if(!empty($documentCurrency)){
                $currencyFilter .= ' AND a.' . $fieldNameChk . 'currency = "' . $documentCurrency . '"';
        }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.age
        FROM
(
(
        SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoId
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID`
        AND `srp_erp_rvadvancematch`.`confirmedYN` = 1 WHERE matchDate <= '" . format_date($this->input->post("from")) . "') rvd ON (rvd.receiptVoucherAutoId = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`)
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  AND matchDate <= '" . format_date($this->input->post("from")) . "' 
    GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $InvoiceMasterCustomers AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))

	UNION ALL
	(
		SELECT
			$fields7
			srp_erp_customerreceiptmaster.receiptVoucherAutoId AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			RVNarration AS comments,
			srp_erp_customerreceiptmaster.documentID AS documentID,
			srp_erp_customerreceiptmaster.RVDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_customerreceiptmaster.RVCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_customerreceiptmaster.`RVDate` ) AS age
		FROM
			srp_erp_customerreceiptmaster
			INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
			AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			AND srp_erp_customerreceiptdetail.type = 'Advance'
			LEFT JOIN (
			SELECT
				$fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
			FROM
				srp_erp_rvadvancematchdetails
				INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID`
				AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
			WHERE
				`srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "'
			GROUP BY
				srp_erp_rvadvancematchdetails.receiptVoucherAutoID
			) avd ON ( avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID` )
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID
			AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
			AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		GROUP BY
			`srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,
			srp_erp_customerreceiptmaster.`RVDate`
		HAVING (" . join(' AND ', $having) . ")
	)
	UNION ALL (
		SELECT
			$fields8
			`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_creditnotemaster.comments,
			srp_erp_creditnotemaster.documentID AS documentID,
			srp_erp_creditnotemaster.creditNoteDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_creditnotemaster.creditNoteCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_creditnotemaster.creditNoteDate ) AS age
		FROM
			 srp_erp_creditnotedetail
			INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
			AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL
			AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN (
			SELECT
				$fields9
				receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND type = 'creditnote'
			GROUP BY
				creditNoteAutoID
			) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_creditnotemaster`.`approvedYN` = 1
			AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
			AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,
			`srp_erp_creditnotemaster`.`creditNoteDate`
		HAVING (" . join(' AND ', $having) . ")
	)
	UNION ALL (
	SELECT
	        $fields10
			`srp_erp_salesreturnmaster`.`salesReturnAutoID` AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_salesreturnmaster.comment,
			srp_erp_salesreturnmaster.documentID AS documentID,
			srp_erp_salesreturnmaster.returnDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_salesreturnmaster.returnDate ) AS age
		FROM
			srp_erp_salesreturnmaster
			INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
			LEFT JOIN (
			SELECT
				$fields9
				srp_erp_customerreceiptdetail.receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				 LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND type = 'SLR'
			GROUP BY
				creditNoteAutoID
			) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
			AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
			AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_salesreturnmaster`.`salesReturnAutoID`,
			`srp_erp_salesreturnmaster`.`returnDate`
		HAVING (" . join(' AND ', $having) . ")
	)
) as a WHERE $finalCheck $currencyFilter")->result_array();
       // echo $this->db->last_query();
        return $result;
    }

    function get_item_report_drilldown($fromTo, $financialBeginingDate)
    {
        $item = $this->input->post("itemID");
        $fieldNameChk = $this->input->post("currency");
        $company_type = $this->session->userdata("companyType");
        $company =  '';
        $companyIM =  '';
        $itmesOR = '';
        if($company_type ==1)
        {
            $company = " AND il.companyID = '".$this->common_data['company_data']['company_id']."'";
            $itmesOR .= " il.itemAutoID = '" . $item . "' ";
            $companyIM .= " AND im.companyID = '".$this->common_data['company_data']['company_id']."'";
        }else
        {
            $companyID = $this->get_group_company();
            $company =  " AND il.companyID IN (" . join(',', $companyID) . ")";
            $companyIM .= " AND im.companyID IN (" . join(',', $companyID) . ")";
            $items = $this->get_group_items($item);
            $i = 1;
            $itmesOR = '( ';
            if (!empty($items)) { /*generate the query according to selectd items*/
                foreach ($items as $item_val) {
                    if ($i != 1) {
                        $itmesOR .= ' OR ';
                    }
                    $itmesOR .= " il.itemAutoID = '" . $item_val["ItemAutoID"] . "' ";
                    $i++;
                }
            }
            $itmesOR .= ' ) ';
        }

        $feilds = "";
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            if ($fieldNameChk == "companyLocalWacAmount") {
                $feilds .= "il.companyLocalAmount as localCostAsset";
                $feilds .= ",CL.DecimalPlaces as companyLocalWacAmountDecimalPlaces";
                $feilds .= ",il.companyLocalAmount / (il.transactionQTY/il.convertionRate) as avgCompanyLocalAmount";
            }
            if ($fieldNameChk == ("companyReportingWacAmount")) {
                $feilds .= "il.companyReportingAmount as rptCostAsset";
                $feilds .= ",CR.DecimalPlaces as companyReportingWacAmountDecimalPlaces";
                $feilds .= ",il.companyReportingAmount / (il.transactionQTY/il.convertionRate) as avgCompanyReportingAmount";
            }
        }
        $result = $this->db->query("SELECT $feilds,il.documentAutoID,il.segmentCode,il.documentSystemCode,(il.transactionQTY/il.convertionRate) as transactionQTY,il.referenceNumber,il.referenceNumber,DATE_FORMAT(il.documentDate,'" . $this->format . "') as documentDate,il.documentID,il.salesPrice,il.itemDescription,il.itemSystemCode,il.transactionUOM,ic1.description as mainCategory,ic2.description as subCategory,il.documentID,il.companyLocalWacAmount,il.companyReportingWacAmount
        FROM srp_erp_itemledger il
        INNER JOIN
    `srp_erp_itemmaster` `im` ON `il`.`itemAutoID` = `im`.`itemAutoID` $companyIM
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `im`.`mainCategoryID`)
        INNER JOIN
    (SELECT
		description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `im`.`subcategoryID`)
		 LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = il.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = il.companyLocalCurrencyID)
WHERE $itmesOR AND il.documentDate <= '" . format_date($this->input->post("from")) . "' $company ORDER BY il.documentDate DESC")->result_array();
        return $result;
    }

    function get_finance_tb_retain()
    {
        $finaceYearYN = getPolicyValues('HFY','All');
        $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
        $DocumentDateFrom = (($finaceYearYN == 1) ? format_date($this->input->post("from")):$financialBeginingDate["beginingDate"]);

        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                if ($val == "companyLocalAmount") {
                    $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
            }
        }
        $result = $this->db->query("(SELECT $feilds SUM(srp_erp_generalledger.companyLocalAmount) as companyLocalAmount FROM srp_erp_generalledger
        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND masterCategory = 'BS' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
        WHERE documentDate < '" . $DocumentDateFrom . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . ")")->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_finance_tb_group_retain()
    {
        $company = $this->get_group_company();
        $financialBeginingDate = get_group_financial_year(format_date($this->input->post("from")));
        $feilds = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                $feilds .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                if ($val == "companyLocalAmount") {
                    $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                }
            }
        }
        $result = $this->db->query("(SELECT $feilds SUM(srp_erp_generalledger.companyLocalAmount) as companyLocalAmount FROM srp_erp_generalledger
        INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID WHERE groupID = " . current_companyID() . " AND masterCategory = 'BS') coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
        WHERE documentDate < '" . $financialBeginingDate["beginingDate"] . "' AND srp_erp_generalledger.companyID IN(" . join(',', $company) . "))")->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_financial_year()
    {
        $currentDate = format_date($this->input->post('currentDate'));
        $this->db->SELECT("beginingDate,endingDate");
        $this->db->FROM('srp_erp_companyfinanceyear');
        $this->db->where("companyFinanceYearID", $this->input->post('financeYear'));
        $this->db->where("'{$currentDate}' BETWEEN beginingDate AND endingDate");
        $result = $this->db->get()->row_array();
        if ($result) {
            return array("error" => 0, "data" => $result);
        } else {
            return array("error" => 1, "data" => $result);
        }
    }

    function get_group_financial_year()
    {
        $currentDate = format_date($this->input->post('currentDate'));
        $this->db->SELECT("beginingDate,endingDate");
        $this->db->FROM('srp_erp_groupfinanceyear');
        $this->db->where("groupFinanceYearID", $this->input->post('financeYear'));
        $this->db->where("'{$currentDate}' BETWEEN beginingDate AND endingDate");
        $result = $this->db->get()->row_array();
        if ($result) {
            return array("error" => 0, "data" => $result);
        } else {
            return array("error" => 1, "data" => $result);
        }
    }

    function get_item_inquiry_report($fieldName = null)
    {
        $feilds = array();
        $feilds2 = array();
        $feilds3 = array();
        $feildsra = array();
        $feilds1 = "";
        $items = $this->input->post("itemTo");
        $i = 1;
        $itmesOR = '( ';
        if (!empty($items)) {
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " srp_erp_itemmaster.itemAutoID = '" . $item_val . "' "; /*generate the query according to selectd items*/
                $i++;
            }
        }
        $itmesOR .= ' ) ';

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feildsra[]= 'srp_erp_itemmaster.' . $val;
                }
            }
            $feilds1 = join(',', $feildsra);
            if (!empty($feilds1)){
                $feilds1 = $feilds1. ",";
            }
        }

        $warehouse = load_location_drop();
        if (isset($warehouse)) {
            foreach ($warehouse as $val) {
                $feilds[] = "if(wareHouseAutoID = " . $val["wareHouseAutoID"] . ",IFNULL(SUM(transactionQTY/convertionRate),0),0) as `" . $val["wareHouseCode"] . "`";
                $feilds2[] = "IFNULL(SUM(il.`" . $val["wareHouseCode"] . "`),0) as `" . $val["wareHouseCode"] . "`";
                $feilds3[] = "IFNULL(SUM(il.`" . $val["wareHouseCode"] . "`),0)";
            }
        }
        $result = $this->db->query("SELECT $feilds1 itemSystemCode,seconeryItemCode,itemDescription,defaultUnitOfMeasure," . join(',', $feilds2) . ",(" . join('+', $feilds3) . ") as total,IFNULL(poCurrentStock,0) as poCurrentStock,IFNULL(coCurrentStock,0) as coCurrentStock,(IFNULL(ugrvCurrentStock,0) + IFNULL(usrCurrentStock,0) + IFNULL(umiCurrentStock,0)  + IFNULL(usaCurrentStock,0) + IFNULL(upvCurrentStock,0) + IFNULL(ucinvCurrentStock,0) + IFNULL(urvCurrentStock,0)) as unapprovedDoc,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory,srp_erp_itemmaster.itemAutoID,((" . join('+', $feilds3) . ")+IFNULL(poCurrentStock,0)+(IFNULL(ugrvCurrentStock,0) + IFNULL(usrCurrentStock,0) + IFNULL(umiCurrentStock,0)  + IFNULL(usaCurrentStock,0) + IFNULL(upvCurrentStock,0) + IFNULL(ucinvCurrentStock,0) + IFNULL(urvCurrentStock,0))- IFNULL(coCurrentStock, 0)) as netStock,minimumQty,srp_erp_itemmaster.reorderPoint FROM srp_erp_itemmaster
        LEFT JOIN (SELECT wareHouseAutoID,itemAutoID," . join(',', $feilds) . " FROM srp_erp_itemledger WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY wareHouseAutoID,itemAutoID) il ON (il.itemAutoID = srp_erp_itemmaster.itemAutoID)
         LEFT JOIN (
         SELECT
	SUM(sub.poCurrentStock) as poCurrentStock,sub.itemAutoID
FROM
	(
		SELECT
			IF (
		(
			SUM(
				requestedQty / conversionRateUOM
			) - (
				IFNULL(grv.grvCurrentStock, 0) + IFNULL(bsi.bsiCurrentStock, 0)
			)
		) < 0,
		0,
		(
			SUM(
				requestedQty / conversionRateUOM
			) - (
				IFNULL(grv.grvCurrentStock, 0) + IFNULL(bsi.bsiCurrentStock, 0)
			)
		)
	) AS poCurrentStock,
			srp_erp_purchaseorderdetails.itemAutoID
		FROM
			srp_erp_purchaseorderdetails
		INNER JOIN srp_erp_purchaseordermaster ON srp_erp_purchaseorderdetails.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID
		AND srp_erp_purchaseordermaster.approvedYN = 1
		AND srp_erp_purchaseordermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				SUM(
					receivedQty / conversionRateUOM
				) AS grvCurrentStock,
				srp_erp_grvdetails.purchaseOrderDetailsID,
				itemAutoID
			FROM
				srp_erp_grvdetails
			INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID
			AND srp_erp_grvmaster.approvedYN = 1
			AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			INNER JOIN srp_erp_purchaseordermaster ON srp_erp_grvdetails.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
			AND srp_erp_purchaseordermaster.approvedYN = 1
			WHERE
				srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . "
			AND (
				purchaseOrderDetailsID != 0
				AND purchaseOrderDetailsID IS NOT NULL
			)
			GROUP BY
				srp_erp_grvdetails.itemAutoID,
				srp_erp_grvdetails.purchaseOrderDetailsID
		) grv ON (
			srp_erp_purchaseorderdetails.itemAutoID = grv.itemAutoID
			AND srp_erp_purchaseorderdetails.purchaseOrderDetailsID = grv.purchaseOrderDetailsID
		)
		LEFT JOIN (
			SELECT
				SUM(
					requestedQty / srp_erp_paysupplierinvoicedetail.conversionRateUOMID
				) AS bsiCurrentStock,
				srp_erp_paysupplierinvoicedetail.purchaseOrderDetailsID,
				itemAutoID
			FROM
				srp_erp_paysupplierinvoicedetail
			INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicedetail.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
			AND srp_erp_paysupplierinvoicemaster.approvedYN = 1
			AND srp_erp_paysupplierinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			INNER JOIN srp_erp_purchaseordermaster ON srp_erp_paysupplierinvoicedetail.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
			AND srp_erp_purchaseordermaster.approvedYN = 1
			WHERE
				srp_erp_paysupplierinvoicedetail.companyID = " . $this->common_data['company_data']['company_id'] . "
			AND (
				purchaseOrderDetailsID != 0
				AND purchaseOrderDetailsID IS NOT NULL
			)
			GROUP BY
				srp_erp_paysupplierinvoicedetail.itemAutoID,
				srp_erp_paysupplierinvoicedetail.purchaseOrderDetailsID
		) bsi ON (
			srp_erp_purchaseorderdetails.itemAutoID = bsi.itemAutoID
			AND srp_erp_purchaseorderdetails.purchaseOrderDetailsID = bsi.purchaseOrderDetailsID
		)
		WHERE
			srp_erp_purchaseorderdetails.companyID = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			srp_erp_purchaseorderdetails.purchaseOrderDetailsID,srp_erp_purchaseorderdetails.itemAutoID
	) sub
GROUP BY
	sub.itemAutoID) po ON (po.itemAutoID = srp_erp_itemmaster.itemAutoID)
         LEFT JOIN (
         SELECT (SUM(requestedQty/conversionRateUOM) + IFNULL(cinv.cinvCurrentStock,0)) as coCurrentStock,srp_erp_contractdetails.itemAutoID FROM srp_erp_contractdetails
         INNER JOIN srp_erp_contractmaster ON srp_erp_contractdetails.contractAutoID = srp_erp_contractmaster.contractAutoID AND srp_erp_contractmaster.approvedYN = 1 AND srp_erp_contractmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
         LEFT JOIN (SELECT SUM(requestedQty/conversionRateUOM) * -1 as cinvCurrentStock,srp_erp_customerinvoicedetails.contractDetailsAutoID,itemAutoID FROM srp_erp_customerinvoicedetails
            INNER JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID AND srp_erp_customerinvoicemaster.approvedYN = 1 AND srp_erp_customerinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerinvoicedetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.invoiceType='Sales Order' GROUP BY srp_erp_customerinvoicedetails.itemAutoID
            ) cinv ON (srp_erp_contractdetails.itemAutoID = cinv.itemAutoID)
         WHERE srp_erp_contractdetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_contractmaster.documentID = 'SO' GROUP BY srp_erp_contractdetails.itemAutoID) co ON (co.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(receivedQty/conversionRateUOM),0) as ugrvCurrentStock,srp_erp_grvdetails.itemAutoID FROM srp_erp_grvdetails
            INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID AND srp_erp_grvmaster.approvedYN = 0 AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_grvdetails.itemAutoID) ugrv ON (ugrv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(return_Qty/conversionRateUOM),0) * -1 as usrCurrentStock,srp_erp_stockreturndetails.itemAutoID FROM srp_erp_stockreturndetails
            INNER JOIN srp_erp_stockreturnmaster ON srp_erp_stockreturndetails.stockReturnAutoID = srp_erp_stockreturnmaster.stockReturnAutoID AND srp_erp_stockreturnmaster.approvedYN = 0 AND srp_erp_stockreturnmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stockreturndetails.itemAutoID) usr ON (usr.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(qtyissued/conversionRateUOM),0)*-1 as umiCurrentStock,srp_erp_itemissuedetails.itemAutoID FROM srp_erp_itemissuedetails
            INNER JOIN srp_erp_itemissuemaster ON srp_erp_itemissuedetails.itemIssueAutoID = srp_erp_itemissuemaster.itemIssueAutoID AND srp_erp_itemissuemaster.approvedYN = 0 AND srp_erp_itemissuemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_itemissuedetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_itemissuedetails.itemAutoID) umi ON (umi.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(transfer_QTY/conversionRateUOM),0) as ustCurrentStock,srp_erp_stocktransferdetails.itemAutoID FROM srp_erp_stocktransferdetails
            INNER JOIN srp_erp_stocktransfermaster ON srp_erp_stocktransferdetails.stockTransferAutoID = srp_erp_stocktransfermaster.stockTransferAutoID AND srp_erp_stocktransfermaster.approvedYN = 0 AND srp_erp_stocktransfermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stocktransferdetails.itemAutoID) ust ON (ust.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(adjustmentWareHouseStock/conversionRateUOM),0) as usaCurrentStock,srp_erp_stockadjustmentdetails.itemAutoID FROM srp_erp_stockadjustmentdetails
            INNER JOIN srp_erp_stockadjustmentmaster ON srp_erp_stockadjustmentdetails.stockAdjustmentAutoID = srp_erp_stockadjustmentmaster.stockAdjustmentAutoID AND srp_erp_stockadjustmentmaster.approvedYN = 0 AND srp_erp_stockadjustmentmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stockadjustmentdetails.itemAutoID) usa ON (usa.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) as upvCurrentStock,srp_erp_paymentvoucherdetail.itemAutoID FROM srp_erp_paymentvoucherdetail
            INNER JOIN srp_erp_paymentvouchermaster ON srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId AND srp_erp_paymentvouchermaster.approvedYN = 0 AND srp_erp_paymentvouchermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_paymentvoucherdetail.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_paymentvoucherdetail.itemAutoID) upv ON (upv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0)*-1 as ucinvCurrentStock,srp_erp_customerinvoicedetails.itemAutoID FROM srp_erp_customerinvoicedetails
            INNER JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID AND srp_erp_customerinvoicemaster.approvedYN = 0 AND srp_erp_customerinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerinvoicedetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_customerinvoicedetails.itemAutoID) ucinv ON (ucinv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) * -1 as urvCurrentStock,srp_erp_customerreceiptdetail.itemAutoID FROM srp_erp_customerreceiptdetail
            INNER JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId AND srp_erp_customerreceiptmaster.approvedYN = 0 AND srp_erp_customerreceiptmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerreceiptdetail.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_customerreceiptdetail.itemAutoID) urv ON (urv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN
    (SELECT
        description, itemCategoryID
    FROM
        srp_erp_itemcategory GROUP BY itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `srp_erp_itemmaster`.`mainCategoryID`)
        LEFT JOIN
    (SELECT
        description, itemCategoryID
    FROM
        srp_erp_itemcategory GROUP BY itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `srp_erp_itemmaster`.`subcategoryID`)
        LEFT JOIN
		 (SELECT
		IFNULL(description,'uncategorized') as description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `srp_erp_itemmaster`.`subSubCategoryID`)
        WHERE srp_erp_itemmaster.maincategory =  'Inventory' AND srp_erp_itemmaster.companyID = " . $this->common_data['company_data']['company_id'] . " AND $itmesOR
        GROUP BY srp_erp_itemmaster.itemAutoID")->result_array();
        //echo $this->db->last_query();
        return $result;
    }


    function get_item_inquiry_po_report_drilldown()
    {
        $item = $this->input->post("itemID");
        $result = $this->db->query("SELECT (SUM(requestedQty/conversionRateUOM)- (IFNULL(grv.grvCurrentStock, 0)+IFNULL(bsi.bsiCurrentStock, 0))) as poCurrentStock,srp_erp_purchaseorderdetails.itemAutoID,srp_erp_purchaseordermaster.purchaseOrderCode,srp_erp_purchaseorderdetails.comment,srp_erp_purchaseordermaster.referenceNumber,im.itemSystemCode,im.itemDescription,srp_erp_purchaseordermaster.documentDate,srp_erp_purchaseordermaster.expectedDeliveryDate,srp_erp_purchaseordermaster.documentID,srp_erp_purchaseordermaster.purchaseOrderID,im.defaultUnitOfMeasure FROM srp_erp_purchaseorderdetails
         INNER JOIN srp_erp_purchaseordermaster ON srp_erp_purchaseorderdetails.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID AND srp_erp_purchaseordermaster.approvedYN = 1 AND srp_erp_purchaseordermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
          INNER JOIN
    `srp_erp_itemmaster` `im` ON `srp_erp_purchaseorderdetails`.`itemAutoID` = `im`.`itemAutoID` AND im.companyID = " . $this->common_data['company_data']['company_id'] . "
     LEFT JOIN (SELECT SUM(receivedQty/conversionRateUOM) as grvCurrentStock,srp_erp_grvdetails.purchaseOrderDetailsID FROM srp_erp_grvdetails
            INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID AND srp_erp_grvmaster.approvedYN = 1 AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_grvdetails.purchaseOrderDetailsID
            ) grv ON (srp_erp_purchaseorderdetails.purchaseOrderDetailsID = grv.purchaseOrderDetailsID)

            LEFT JOIN (
	SELECT
		SUM(
			requestedQty / srp_erp_unitsconversion.conversion
		) AS bsiCurrentStock,
		srp_erp_paysupplierinvoicedetail.purchaseOrderDetailsID,
		itemAutoID
	FROM
		srp_erp_paysupplierinvoicedetail
	INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicedetail.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
	AND srp_erp_paysupplierinvoicemaster.approvedYN = 1
	AND srp_erp_paysupplierinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
	INNER JOIN srp_erp_unitsconversion ON srp_erp_paysupplierinvoicedetail.conversionRateUOMID = srp_erp_unitsconversion.unitsConversionAutoID
	WHERE
		srp_erp_paysupplierinvoicedetail.companyID = " . $this->common_data['company_data']['company_id'] . "
	GROUP BY
		srp_erp_paysupplierinvoicedetail.itemAutoID
) bsi ON (
	srp_erp_purchaseorderdetails.purchaseOrderDetailsID = bsi.purchaseOrderDetailsID
)
            WHERE srp_erp_purchaseorderdetails.itemAutoID = " . $item . " GROUP BY srp_erp_purchaseorderdetails.purchaseOrderDetailsID HAVING poCurrentStock > 0")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_item_inquiry_all_doc_report_drilldown()
    {
        $item = $this->input->post("itemID");
        $result = $this->db->query(" SELECT a.currentStock,a.itemAutoID,a.documentID,a.documentDate,a.documentCode,a.autoID FROM
        ((SELECT IFNULL(SUM(receivedQty/conversionRateUOM),0) as currentStock,srp_erp_grvdetails.itemAutoID,documentID,grvDate as documentDate,grvPrimaryCode as documentCode,srp_erp_grvmaster.grvAutoID as autoID FROM srp_erp_grvdetails
            INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID AND srp_erp_grvmaster.approvedYN = 0 AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_grvdetails.itemAutoID = " . $item . "  GROUP BY  srp_erp_grvmaster.grvAutoID)

         UNION ALL (SELECT IFNULL(SUM(return_Qty/conversionRateUOM),0) * -1 as currentStock,srp_erp_stockreturndetails.itemAutoID,documentID,returnDate as documentDate,stockReturnCode as documentCode,srp_erp_stockreturnmaster.stockReturnAutoID as autoID FROM srp_erp_stockreturndetails
            INNER JOIN srp_erp_stockreturnmaster ON srp_erp_stockreturndetails.stockReturnAutoID = srp_erp_stockreturnmaster.stockReturnAutoID AND srp_erp_stockreturnmaster.approvedYN = 0 AND srp_erp_stockreturnmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_stockreturndetails.itemAutoID = " . $item . " GROUP BY srp_erp_stockreturnmaster.stockReturnAutoID)

         UNION ALL (SELECT IFNULL(SUM(qtyissued/conversionRateUOM),0)*-1 as currentStock,srp_erp_itemissuedetails.itemAutoID,documentID,issueDate as documentDate,itemIssueCode as documentCode,srp_erp_itemissuemaster.itemIssueAutoID as autoID FROM srp_erp_itemissuedetails
            INNER JOIN srp_erp_itemissuemaster ON srp_erp_itemissuedetails.itemIssueAutoID = srp_erp_itemissuemaster.itemIssueAutoID AND srp_erp_itemissuemaster.approvedYN = 0 AND srp_erp_itemissuemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_itemissuedetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_itemissuedetails.itemAutoID = " . $item . " GROUP BY srp_erp_itemissuemaster.itemIssueAutoID)

         UNION ALL (SELECT IFNULL(SUM(transfer_QTY/conversionRateUOM),0) as currentStock,srp_erp_stocktransferdetails.itemAutoID,documentID,tranferDate as documentDate,stockTransferCode as documentCode,srp_erp_stocktransfermaster.stockTransferAutoID as autoID FROM srp_erp_stocktransferdetails
            INNER JOIN srp_erp_stocktransfermaster ON srp_erp_stocktransferdetails.stockTransferAutoID = srp_erp_stocktransfermaster.stockTransferAutoID AND srp_erp_stocktransfermaster.approvedYN = 0 AND srp_erp_stocktransfermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_stocktransferdetails.itemAutoID = " . $item . " GROUP BY srp_erp_stocktransfermaster.stockTransferAutoID)

         UNION ALL (SELECT IFNULL( SUM( transfer_QTY / conversionRateUOM ), 0 ) * -1 AS currentStock, stdm.itemAutoID, documentID, tranferDate AS documentDate, stockTransferCode AS documentCode, srp_erp_stocktransfermaster.stockTransferAutoID AS autoID FROM srp_erp_stocktransferdetails stdm INNER JOIN srp_erp_stocktransfermaster ON stdm.stockTransferAutoID = srp_erp_stocktransfermaster.stockTransferAutoID AND srp_erp_stocktransfermaster.approvedYN = 0 AND srp_erp_stocktransfermaster.companyID = " . $this->common_data['company_data']['company_id'] . " WHERE stdm.itemAutoID = " . $item . " GROUP BY srp_erp_stocktransfermaster.stockTransferAutoID)

         UNION ALL (SELECT IFNULL(SUM(adjustmentWareHouseStock/conversionRateUOM),0) as currentStock,srp_erp_stockadjustmentdetails.itemAutoID,documentID,stockAdjustmentDate as documentDate,stockAdjustmentCode as documentCode,srp_erp_stockadjustmentmaster.stockAdjustmentAutoID as autoID FROM srp_erp_stockadjustmentdetails
            INNER JOIN srp_erp_stockadjustmentmaster ON srp_erp_stockadjustmentdetails.stockAdjustmentAutoID = srp_erp_stockadjustmentmaster.stockAdjustmentAutoID AND srp_erp_stockadjustmentmaster.approvedYN = 0 AND srp_erp_stockadjustmentmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_stockadjustmentdetails.itemAutoID = " . $item . " GROUP BY srp_erp_stockadjustmentmaster.stockAdjustmentAutoID)

         UNION ALL (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) as currentStock,srp_erp_paymentvoucherdetail.itemAutoID,documentID,PVDate as documentDate,PVCode as documentCode,srp_erp_paymentvouchermaster.payVoucherAutoId as autoID FROM srp_erp_paymentvoucherdetail
            INNER JOIN srp_erp_paymentvouchermaster ON srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId AND srp_erp_paymentvouchermaster.approvedYN = 0 AND srp_erp_paymentvouchermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_paymentvoucherdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvoucherdetail.itemAutoID = " . $item . " GROUP BY srp_erp_paymentvouchermaster.payVoucherAutoId)

         UNION ALL (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) * -1 as currentStock,srp_erp_customerinvoicedetails.itemAutoID,documentID,invoiceDate as documentDate,invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceAutoID as autoID FROM srp_erp_customerinvoicedetails
            INNER JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID AND srp_erp_customerinvoicemaster.approvedYN = 0 AND srp_erp_customerinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerinvoicedetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicedetails.itemAutoID = " . $item . " GROUP BY srp_erp_customerinvoicemaster.invoiceAutoID)

         UNION ALL (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) * -1 as currentStock,srp_erp_customerreceiptdetail.itemAutoID,documentID,RVDate as documentDate,RVcode as documentCode,srp_erp_customerreceiptmaster.receiptVoucherAutoId as autoID FROM srp_erp_customerreceiptdetail
            INNER JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId AND srp_erp_customerreceiptmaster.approvedYN = 0 AND srp_erp_customerreceiptmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerreceiptdetail.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptdetail.itemAutoID = " . $item . " GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId)) a")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function save_companyLevelReportDetails()
    {
        $fieldsID = $this->input->post('fieldsID');
        $columnName = $this->input->post('columnName');
        $masterID = $this->input->post('masterID');

        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $userGroup = current_user_group();
        $PC_ID = current_pc();
        $userID = current_userID();
        $time = $this->common_data['current_date'];
        $userName = current_employee();

        $whereIn = 'reportID IN (';

        $data = array();
        foreach ($fieldsID as $key => $row) {
            $whereIn .= ($key > 0) ? ', ' . $row : $row;
            $data[$key]['masterID'] = $masterID;
            $data[$key]['reportID'] = $row;
            $data[$key]['reportValue'] = $this->input->post($columnName[$key]);
            $data[$key]['companyID'] = $companyID;
            $data[$key]['companyCode'] = $companyCode;
            $data[$key]['createdPCID'] = $PC_ID;
            $data[$key]['createdUserID'] = $userID;
            $data[$key]['createdUserGroup'] = $userGroup;
            $data[$key]['createdUserName'] = $userName;
            $data[$key]['createdDateTime'] = $time;
        }
        $whereIn .= ')';

        /*echo '<pre>'; print_r($data); echo '</pre>';
        echo '<pre>'; print_r($whereIn); echo '</pre>';die();*/
        $this->db->trans_start();


        $this->db->query("DELETE FROM srp_erp_sso_reporttemplatedetails WHERE masterID={$masterID} AND companyID={$companyID} AND {$whereIn} ");
        $this->db->insert_batch('srp_erp_sso_reporttemplatedetails', $data);


        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Process failed');
        } else {
            $this->db->trans_commit();
            return array('s', 'Record saved successfully');
        }

    }

    function save_employeeLevelReportDetails($fields_arr)
    {

        $empID_arr = $this->input->post('empID');
        $masterID = $this->input->post('masterID');

        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $userGroup = current_user_group();
        $PC_ID = current_pc();
        $userID = current_userID();
        $time = $this->common_data['current_date'];
        $userName = current_employee();

        $whereIn = 'reportID IN (';
        $data = array();
        $m = 0;

        foreach ($fields_arr as $key => $rowField) {
            $empids = array();
            $columnName = $this->input->post($rowField['inputName']);
            $reportID = $rowField['id'];

            $whereIn .= ($m > 0) ? ', ' . $reportID : $reportID;
            $i = 0;
            foreach ($empID_arr as $keyEmp => $empID) {
                $post_lastName = $this->input->post('lastName');
                $post_initials = $this->input->post('initials');
                $post_memNumber = $this->input->post('memNumber');
                if (empty($post_lastName[$keyEmp]) || empty($post_initials[$keyEmp]) || empty($post_memNumber[$keyEmp])) {
                    $i++;
                } else {
                    array_push($empids, $empID);
                }
            }
            if (!empty($empids)) {
                foreach ($empID_arr as $keyEmp => $empID) {
                    if (in_array($empID, $empids)) {
                        $data[$m]['masterID'] = $masterID;
                        $data[$m]['reportID'] = $reportID;
                        $data[$m]['empID'] = $empID;
                        $data[$m]['reportValue'] = $columnName[$keyEmp];
                        $data[$m]['companyID'] = $companyID;
                        $data[$m]['companyCode'] = $companyCode;
                        $data[$m]['createdPCID'] = $PC_ID;
                        $data[$m]['createdUserID'] = $userID;
                        $data[$m]['createdUserGroup'] = $userGroup;
                        $data[$m]['createdUserName'] = $userName;
                        $data[$m]['createdDateTime'] = $time;
                        $m++;
                    }
                }
            }

        }

        $whereIn .= ')';
        //echo $whereIn; die();
        $this->db->trans_start();
        //$this->db->query("DELETE FROM srp_erp_sso_reporttemplatedetails WHERE masterID={$masterID} AND companyID={$companyID} AND {$whereIn} ");
        $this->db->query("DELETE FROM srp_erp_sso_reporttemplatedetails WHERE companyID={$companyID} AND masterID={$masterID} AND {$whereIn} ");
        $this->db->insert_batch('srp_erp_sso_reporttemplatedetails', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Process failed');
        } else {
            $this->db->trans_commit();
            return array('s', 'Record saved successfully');
        }

    }


    function save_epfReportOtherConfig()
    {
        $masterID = $this->input->post('masterID');
        $shortOrder = $this->input->post('shortOrder');
        $strLength = $this->input->post('strLength');
        $reportID = $this->input->post('reportID');

        $companyID = current_companyID();
        $userGroup = current_user_group();
        $PC_ID = current_pc();
        $userID = current_userID();
        $time = $this->common_data['current_date'];
        $userName = current_employee();

        $data = array();
        foreach ($shortOrder as $key => $row) {
            $data[$key]['masterID'] = $masterID;
            $data[$key]['reportID'] = $reportID[$key];
            $data[$key]['shortOrder'] = $shortOrder[$key];
            $data[$key]['strLength'] = $strLength[$key];
            $data[$key]['companyID'] = $companyID;
            $data[$key]['createdPCID'] = $PC_ID;
            $data[$key]['createdUserID'] = $userID;
            $data[$key]['createdUserGroup'] = $userGroup;
            $data[$key]['createdUserName'] = $userName;
            $data[$key]['createdDateTime'] = $time;
        }

        $this->db->trans_start();

        $this->db->query("DELETE FROM srp_erp_sso_reporttemplateconfig WHERE masterID={$masterID} AND companyID={$companyID}");

        $this->db->insert_batch('srp_erp_sso_reporttemplateconfig', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Process failed');
        } else {
            $this->db->trans_commit();
            return array('s', 'Record saved successfully');
        }

    }

    function save_epfReportMaster()
    {

        $payrollMonth = $this->input->post('payrollMonth');
        $submissionID = $this->input->post('submissionID');
        $comments = $this->input->post('comments');
        $companyID = current_companyID();
        $payrollYear = date('Y', strtotime($payrollMonth));
        $payrollMonth = date('m', strtotime($payrollMonth));

        $serialNo = $this->db->query("SELECT serialNo FROM srp_erp_sso_epfreportmaster WHERE companyID={$companyID} ORDER BY id DESC LIMIT 1")->row('serialNo');
        $serialNo = ($serialNo == null) ? 1 : $serialNo + 1;

        //Generate template Code
        $this->load->library('sequence');
        $docCode = $this->sequence->sequence_generator('EPF-R', $serialNo);

        $data = array(
            'documentCode' => $docCode,
            'serialNo' => $serialNo,
            'submissionID' => $submissionID,
            'payrollYear' => $payrollYear,
            'payrollMonth' => $payrollMonth,
            'comment' => $comments,
            'companyID' => $companyID,
            'createdPCID' => current_pc(),
            'createdUserGroup' => current_user_group(),
            'createdUserID' => current_userID(),
            'createdUserName' => current_employee(),
            'createdDateTime' => $this->common_data['current_date']
        );


        $this->db->insert('srp_erp_sso_epfreportmaster', $data);


        if ($this->db->affected_rows() > 0) {
            $insert_id = $this->db->insert_id();
            return array('s', '[ ' . $docCode . ' ]  saved successfully', $insert_id);
        } else {
            return array('e', 'Process failed');
        }
    }

    function epf_reportData($epfMasterID)
    {
        $companyID = current_companyID();
        $masterData = $this->db->query("SELECT id, master.documentCode, submissionID, comment, payrollMasterID, payrollYear, payrollMonth, confirmedYN,
                                        DATE_FORMAT( CONCAT(payrollYear,'-',payrollMonth,'-01') ,'%Y-%m-%d') AS payrollPeriod
                                        FROM srp_erp_sso_epfreportmaster AS master
                                        WHERE master.companyID={$companyID} AND id={$epfMasterID}")->row_array();

        return $masterData;
    }

    function get_epfReportEmployee()
    {
        $companyID = current_companyID();
        $con = "IFNULL(Ename2, '')";
        $epfMasterID = $this->input->post('epfMasterID');

        $where = array(
            'Erp_companyID' => $companyID,
            'companyID' => $companyID,
            'epfReportID' => $epfMasterID
        );

        $this->db->select('reportTB.id, empID, ECode, CONCAT(' . $con . ') AS empName, ocGrade');
        $this->db->from('srp_employeesdetails AS empTB');
        $this->db->join('srp_erp_sso_epfreportdetails AS reportTB', 'empTB.EIdNo = reportTB.empID');
        $this->db->order_by('empTB.ECode', 'ASC');
        $result = $this->db->where($where)->get();

        return $result->result_array();

    }

    function save_empEmployeeAsTemporary()
    {
        $empDet = $this->input->post('empHiddenID');
        $last_ocGrade = $this->input->post('last_ocGrade');
        $epfReportID = $this->input->post('masterID');

        $companyID = current_companyID();
        $userGroup = current_user_group();
        $PC_ID = current_pc();
        $userID = current_userID();
        $time = $this->common_data['current_date'];
        $userName = current_employee();

        $data = $this->epf_reportData($epfReportID);
        $payrollYear = $data['payrollYear'];
        $payrollMonth = $data['payrollMonth'];

        if ($data['confirmedYN'] == 1) {
            return array('e', 'This report is already confirmed.<br>You can not delete this');
        } else {
            $payrollID = $data['payrollMasterID'];
            $whereIn = join(',', $empDet);

            /** Check the employee is added to a report on this payroll id**/
            $empList = $this->db->query("SELECT empID, Ename2 AS empName, ECode FROM srp_erp_sso_epfreportmaster AS masterTB
                                     JOIN srp_erp_sso_epfreportdetails AS detailTB ON detailTB.epfReportID=masterTB.id AND detailTB.companyID=$companyID
                                     JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=detailTB.empID AND Erp_companyID=$companyID
                                     WHERE masterTB.companyID={$companyID} AND payrollYear={$payrollMonth} AND payrollMonth={$payrollMonth}
                                     AND empID IN ({$whereIn})
                                     GROUP BY empID ")->result_array();


            if (!empty($empList)) {
                $errorMsg = 'Following employees are already added to report of this payroll month</br>';
                foreach ($empList as $empRow) {
                    $errorMsg .= $empRow['ECode'] . ' - ' . $empRow['empName'] . '</br>';
                }

                return array('e', $errorMsg);

            } else {

                $data = array();

                foreach ($empDet as $key => $emp) {
                    $data[$key]['epfReportID'] = $epfReportID;
                    $data[$key]['empID'] = $emp;
                    $data[$key]['ocGrade'] = $last_ocGrade[$key];
                    $data[$key]['companyID'] = $companyID;
                    $data[$key]['createdPCID'] = $PC_ID;
                    $data[$key]['createdUserID'] = $userID;
                    $data[$key]['createdUserGroup'] = $userGroup;
                    $data[$key]['createdUserName'] = $userName;
                    $data[$key]['createdDateTime'] = $time;

                }

                $this->db->trans_start();
                $this->db->insert_batch('srp_erp_sso_epfreportdetails', $data);
                $this->db->trans_complete();

                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'Error in process');
                } else {
                    $this->db->trans_commit();
                    return array('s', '');
                }
            }
        }
    }

    function save_reportDetails()
    {

        $empDet = $this->input->post('empID');
        $comment = $this->input->post('comment');
        $ocGrade = $this->input->post('ocGrade');
        $epfReportID = $this->input->post('epfMasterID');
        $submissionID = $this->input->post('submissionID');
        $isConfirmed = $this->input->post('isConfirmed');

        $companyID = current_companyID();
        $userGroup = current_user_group();
        $PC_ID = current_pc();
        $userID = current_userID();
        $time = $this->common_data['current_date'];
        $userName = current_employee();

        $data = $this->epf_reportData($epfReportID);

        if ($data['confirmedYN'] == 1) {
            return array('e', 'This report is already confirmed.<br>You can not delete this');
        } else {
            $detailTB_where_arr = array(
                'companyID' => $companyID,
                'epfReportID' => $epfReportID
            );
            $data = array();

            foreach ($empDet as $key => $emp) {
                $data[$key]['epfReportID'] = $epfReportID;
                $data[$key]['empID'] = $emp;
                $data[$key]['ocGrade'] = $ocGrade[$key];
                $data[$key]['companyID'] = $companyID;
                $data[$key]['createdPCID'] = $PC_ID;
                $data[$key]['createdUserID'] = $userID;
                $data[$key]['createdUserGroup'] = $userGroup;
                $data[$key]['createdUserName'] = $userName;
                $data[$key]['createdDateTime'] = $time;
            }

            $masterData = array(
                'submissionID' => $submissionID,
                'comment' => $comment,
                'modifiedUserID' => $userID,
                'modifiedUserName' => $userName,
                'modifiedPCID' => $userID,
                'modifiedDateTime' => $time,
            );

            $where_arr = array(
                'id' => $epfReportID,
                'companyID' => $companyID
            );

            if ($isConfirmed == 1) {
                $masterData['confirmedYN'] = 1;
                $masterData['confirmedByEmpID'] = $userID;
                $masterData['confirmedByName'] = $userName;
                $masterData['confirmedDate'] = $time;
            }

            $this->db->trans_start();

            $this->db->where($where_arr)->update('srp_erp_sso_epfreportmaster', $masterData);
            $this->db->delete('srp_erp_sso_epfreportdetails', $detailTB_where_arr);
            $this->db->insert_batch('srp_erp_sso_epfreportdetails', $data);

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            } else {
                $this->db->trans_commit();
                return array('s', 'Process successfully done');
            }
        }
    }

    function delete_epfReport()
    {
        $deleteID = $this->input->post('deleteID');
        $companyID = current_companyID();
        $data = $this->epf_reportData($deleteID);

        if ($data['confirmedYN'] == 1) {
            return array('e', 'This report is already confirmed.<br>You can not delete this');
        } else {

            $this->db->trans_start();

            $this->db->delete('srp_erp_sso_epfreportmaster', 'id=' . $deleteID . ' AND companyID=' . $companyID);
            $this->db->delete('srp_erp_sso_epfreportdetails', 'epfReportID=' . $deleteID . ' AND companyID=' . $companyID);

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            } else {
                $this->db->trans_commit();
                return array('s', 'Process successfully done');
            }
        }
    }

    function delete_epfReportEmp()
    {
        $epfMasterID = $this->input->post('epfMasterID');
        $id = $this->input->post('id');
        $data = $this->epf_reportData($epfMasterID);
        $companyID = current_companyID();

        if ($data['confirmedYN'] == 1) {
            return array('e', 'This report is already confirmed.<br>You can not delete this');
        } else {

            $this->db->trans_start();

            $where_arr = array(
                'id' => $id,
                'epfReportID' => $epfMasterID,
                'companyID' => $companyID
            );

            $this->db->delete('srp_erp_sso_epfreportdetails', $where_arr);

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            } else {
                $this->db->trans_commit();
                return array('s', 'Process successfully done');
            }
        }
    }

    function delete_epfReportAllEmp()
    {
        $epfMasterID = $this->input->post('epfMasterID');
        $data = $this->epf_reportData($epfMasterID);
        $companyID = current_companyID();

        if ($data['confirmedYN'] == 1) {
            return array('e', 'This report is already confirmed.<br>You can not delete this');
        } else {

            $this->db->trans_start();

            $where_arr = array(
                'epfReportID' => $epfMasterID,
                'companyID' => $companyID
            );

            $this->db->delete('srp_erp_sso_epfreportdetails', $where_arr);

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            } else {
                $this->db->trans_commit();
                return array('s', 'Process successfully done');
            }
        }
    }


    function get_group_suppliers($vendor)
    {

        $this->db->select("supplierMasterID");
        $this->db->from('srp_erp_groupsupplierdetails');
        $this->db->where_in('groupSupplierMasterID', $vendor);
        $supplier = $this->db->get()->result_array();
        return $supplier;
    }

    function get_group_items($item)
    {

        $this->db->select("ItemAutoID");
        $this->db->from('srp_erp_groupitemmasterdetails');
        $this->db->where_in('groupItemMasterID', $item);
        $items = $this->db->get()->result_array();
        return $items;
    }

    function get_group_company()
    {

        $this->db->select("companyID");
        $this->db->from('srp_erp_companygroupdetails');
        $this->db->where('companyGroupID', current_companyID());
        $company = $this->db->get()->result_array();
        return array_column($company, 'companyID');
    }

    function load_subcat()
    {
        if ($this->input->post('type') == 1) {
            $this->db->select('itemCategoryID,description,masterID');
            $this->db->where_in('masterID', $this->input->post('mainCategoryID'));
            $this->db->where('companyID', $this->common_data['company_data']['company_id']);
            $this->db->from('srp_erp_itemcategory');
            return $subcat = $this->db->get()->result_array();
        } else {
            $this->db->select('itemCategoryID,description,masterID');
            $this->db->where_in('masterID', $this->input->post('mainCategoryID'));
            $this->db->where('groupID', $this->common_data['company_data']['company_id']);
            $this->db->from('srp_erp_groupitemcategory');
            return $subcat = $this->db->get()->result_array();
        }
    }

    function load_subsubcat()
    {
        if ($this->input->post('type') == 1) {
            $this->db->select('itemCategoryID,description,masterID');
            $this->db->where_in('masterID', $this->input->post('subCategoryID'));
            $this->db->where('companyID', $this->common_data['company_data']['company_id']);
            $this->db->from('srp_erp_itemcategory');
            return $subsubcat = $this->db->get()->result_array();
        } else {
            $this->db->select('itemCategoryID,description,masterID');
            $this->db->where_in('masterID', $this->input->post('subCategoryID'));
            $this->db->where('groupID', $this->common_data['company_data']['company_id']);
            $this->db->from('srp_erp_groupitemcategory');
            return $subsubcat = $this->db->get()->result_array();
        }
    }

    function loadItems()
    {
        $columns = $this->input->post('columSelection');
        $itemStatus=$this->input->post('activeStatus');
        $servicetype=$this->input->post('servicetype');

        if ($this->input->post('type') == 1) {
            $this->db->SELECT("*");
            $this->db->FROM('srp_erp_itemmaster');
            $this->db->where('companyID', $this->common_data['company_data']['company_id']);
            if (!empty($this->input->post('mainCategoryID'))) {
                $this->db->where_in('mainCategoryID', $this->input->post('mainCategoryID'));
            }
            if (!empty($this->input->post('subCategoryID'))) {
                $this->db->where_in('subCategoryID', $this->input->post('subCategoryID'));
            }
            if (!empty($this->input->post('subSubCategoryID'))) {
                $this->db->where_in('subSubCategoryID', $this->input->post('subSubCategoryID'));
            }
            if (!empty($this->input->post('columSelection'))) {
                $this->db->where_in('subSubCategoryID', $this->input->post('columSelection'));
            }
            if (!empty($itemStatus)) {
                if($itemStatus==1){
                    $this->db->where('isActive', 1);
                }elseif($itemStatus==2){
                    $this->db->where('isActive', 0);
                }
            }
            if($servicetype==1){
                $this->db->where('mainCategory', 'Service');
            }
            $result = $this->db->get()->result_array();
            /*echo $this->db->last_query();
            exit;*/
            return $result;
        } else {
            $this->db->SELECT("*");
            $this->db->FROM('srp_erp_groupitemmaster');
            $this->db->where('srp_erp_groupitemmaster.groupID', current_companyID());
            if (!empty($this->input->post('mainCategoryID'))) {
                $this->db->where_in('mainCategoryID', $this->input->post('mainCategoryID'));
            }
            if (!empty($this->input->post('subCategoryID'))) {
                $this->db->where_in('subCategoryID', $this->input->post('subCategoryID'));
            }
            if (!empty($this->input->post('subSubCategoryID'))) {
                $this->db->where_in('subSubCategoryID', $this->input->post('subSubCategoryID'));
            }
            $result = $this->db->get()->result_array();
            /*echo $this->db->last_query();
            exit;*/
            return $result;
        }
    }

    function loadGroupItems()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_groupitemmaster');
        $this->db->where('srp_erp_groupitemmaster.groupID', current_companyID());
        if (!empty($this->input->post('mainCategoryID'))) {
            $this->db->where_in('mainCategoryID', $this->input->post('mainCategoryID'));
        }
        if (!empty($this->input->post('subCategoryID'))) {
            $this->db->where_in('subCategoryID', $this->input->post('subCategoryID'));
        }
        if (!empty($this->input->post('subSubCategoryID'))) {
            $this->db->where_in('subSubCategoryID', $this->input->post('subSubCategoryID'));
        }
        $result = $this->db->get()->result_array();
        /*echo $this->db->last_query();
        exit;*/
        return $result;
    }


    function get_warehouse()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_warehousemaster');
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('wareHouseAutoID', $this->input->post('location'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'wareHouseLocation');
        return $result;
    }

    function get_group_warehouse()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_groupwarehousemaster');
        $this->db->where('groupID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('wareHouseAutoID', $this->input->post('location'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'wareHouseLocation');
        return $result;
    }

    function get_group_chartofaccount()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_groupchartofaccountdetails');
        $this->db->where('companyGroupID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('groupChartofAccountMasterID', $this->input->post('glCode'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'chartofAccountID');
        return $result;
    }

    function get_collection_summery_report($datearr, $previousbegindate, $previousenddate, $beginingDate, $endingDate)
    {
        $customerID = $this->input->post('customerID');
        $segment = $this->input->post('segment');
        $currency = $this->input->post('currency');
        $sumamount = '';
        $previousamount = '';
        if ($currency == 2) {
            foreach ($datearr as $key => $val) {
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyLocalExchangeRate,0)) as '$val' ,";
            }
//            $previousamount = "total.previoustransactionAmount/companyLocalExchangeRate";
            $previousamount = "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/companyLocalExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/companyLocalExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/companyLocalExchangeRate), 0 ))";
        } else {
            foreach ($datearr as $key => $val) {
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyReportingExchangeRate,0)) as '$val' ,";
            }
//            $previousamount = "total.previoustransactionAmount/companyReportingExchangeRate";
            $previousamount = "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/companyReportingExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/companyReportingExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/companyReportingExchangeRate), 0 ))";
        }

        $qry = "SELECT
	b.*,

IFNULL(previousdet.previoustransactionAmount,0) as previoustransactionAmount
FROM
	(
		SELECT
			$sumamount
			customermastername,
			transactionCurrencyDecimalPlaces,
			transactionExchangeRate,
			companyLocalCurrencyDecimalPlaces,
			companyLocalExchangeRate,
			companyReportingCurrencyDecimalPlaces,
			companyReportingExchangeRate,
			customerID,
			segmentID
		FROM
			(
				SELECT
					(((
						IFNULL( addondet.taxPercentage, 0 )/ 100
					)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount,
					srp_erp_customerreceiptmaster.customerID,
					`srp_erp_customermaster`.`customerName` AS `customermastername`,
					`transactionCurrencyDecimalPlaces`,
					`transactionCurrency`,
					`transactionExchangeRate`,
					`companyLocalCurrency`,
					`companyLocalCurrencyDecimalPlaces`,
					companyLocalExchangeRate,
					`companyReportingCurrency`,
					`companyReportingExchangeRate`,
					`companyReportingCurrencyDecimalPlaces`,
					DATE_FORMAT(RVdate, '%Y-%m') AS RVdate,
					segmentID
				FROM
					srp_erp_customerreceiptmaster
				LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `srp_erp_customerreceiptmaster`.`customerID`
				LEFT JOIN (
			SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
	 			srp_erp_customerreceiptdetail
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
				( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
			GROUP BY
				receiptVoucherAutoId
			) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
				SELECT SUM( taxPercentage ) AS taxPercentage, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceipttaxdetails
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
			WHERE
			approvedYN = 1
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
				) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
				SELECT SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
			(srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' )
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
				) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
			SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1
			AND
				( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
			GROUP BY
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
				WHERE
					srp_erp_customerreceiptmaster.companyID = " . current_companyID() . "
				AND approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$previousbegindate'
				AND '$endingDate'
				/*AND RVType = 'Invoices'*/
				AND srp_erp_customerreceiptmaster.customerID IN (" . join(',', $customerID) . ")
                AND srp_erp_customerreceiptmaster.segmentID IN (" . join(',', $segment) . ")
			) a
		GROUP BY
			customerID
	) b
LEFT JOIN (
	SELECT
		IFNULL(
			SUM(
				$previousamount
			),
			0
		) AS previoustransactionAmount,
		srp_erp_customerreceiptmaster.receiptVoucherAutoId,
		srp_erp_customerreceiptmaster.customerID
	FROM
		srp_erp_customerreceiptmaster

LEFT JOIN (
	SELECT
		SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
				( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
			GROUP BY
				receiptVoucherAutoId
	) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	LEFT JOIN (
        SELECT SUM( taxPercentage ) AS taxPercentage, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceipttaxdetails
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
			WHERE
			approvedYN = 1
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
					) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	LEFT JOIN (
	    SELECT SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
			(srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' )
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
	) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	LEFT JOIN (
	    SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1
			AND
				( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
			GROUP BY
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
	) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	WHERE
		srp_erp_customerreceiptmaster.RVdate BETWEEN '$previousbegindate'
	AND '$previousenddate' AND approvedYN=1
	GROUP BY
		customerID
) previousdet ON (
	`previousdet`.`customerID` = b.customerID
)";

        $output = $this->db->query($qry)->result_array();
        return $output;
    }


    /*function get_collection_summery_report($datearr,$previousbegindate,$previousenddate,$beginingDate,$endingDate){
        $customerID = $this->input->post('customerID');
        $segment = $this->input->post('segment');
        $currency = $this->input->post('currency');
        $sumamount='';
        $previousamount='';
        if($currency==2){
            foreach($datearr as $key => $val ){
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyLocalExchangeRate,0)) as '$val' ,";
            }
            $previousamount="IFNULL(previoustransactionAmount/companyLocalExchangeRate,0) as previoustransactionAmount,";
        }else{
            foreach($datearr as $key => $val ){
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyReportingExchangeRate,0)) as '$val' ,";
                $previousamount="IFNULL(previoustransactionAmount/companyReportingExchangeRate,0) as previoustransactionAmount,";
            }
        }
        $qry = "SELECT
    $sumamount
    $previousamount
    customermastername,
    transactionCurrencyDecimalPlaces,
    transactionExchangeRate,
    companyLocalCurrencyDecimalPlaces,
    companyLocalExchangeRate,
    companyReportingCurrencyDecimalPlaces,
    companyReportingExchangeRate,
    customerID,
    segmentID
FROM
    (
        SELECT
            det.transactionAmount,
            previousdet.previoustransactionAmount,
            srp_erp_customerreceiptmaster.customerID,
            `srp_erp_customermaster`.`customerName` AS `customermastername`,
            `transactionCurrencyDecimalPlaces`,
            `transactionCurrency`,
            `transactionExchangeRate`,
            `companyLocalCurrency`,
            `companyLocalCurrencyDecimalPlaces`,
            companyLocalExchangeRate,
            `companyReportingCurrency`,
            `companyReportingExchangeRate`,
            `companyReportingCurrencyDecimalPlaces`,
            DATE_FORMAT(RVdate, '%Y-%m') AS RVdate,
            segmentID
        FROM
            srp_erp_customerreceiptmaster
        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `srp_erp_customerreceiptmaster`.`customerID`
        LEFT JOIN (
            SELECT
                SUM(srp_erp_customerreceiptdetail.transactionAmount) AS transactionAmount,
                srp_erp_customerreceiptdetail.receiptVoucherAutoId
            FROM
                srp_erp_customerreceiptdetail
                left JOIN srp_erp_customerreceiptmaster ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId
            WHERE
                type = 'Invoice'
                AND approvedYN = 1
            GROUP BY
                srp_erp_customerreceiptdetail.receiptVoucherAutoId
        ) det ON (
            `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        )
        LEFT JOIN (
            SELECT
                SUM(srp_erp_customerreceiptdetail.transactionAmount) AS previoustransactionAmount,
                srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                srp_erp_customerreceiptmaster.customerID
            FROM
                srp_erp_customerreceiptdetail
            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
            WHERE
                type = 'Invoice'
                AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$previousbegindate' AND  '$previousenddate'
            GROUP BY
                receiptVoucherAutoId
        ) previousdet ON (
            `previousdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        )
        WHERE
            srp_erp_customerreceiptmaster.companyID = ".current_companyID()."
        AND approvedYN = 1
        AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$beginingDate'
			AND '$endingDate'
        AND RVType = 'Invoices'
        AND srp_erp_customerreceiptmaster.customerID IN (".join(',',$customerID).")
        AND srp_erp_customerreceiptmaster.segmentID IN (".join(',',$segment).")
    ) a
GROUP BY
    customerID";
        $output = $this->db->query($qry)->result_array();
        return $output;
    }*/


    function get_revanue_details_drilldown_report()
    {
        $convertFormat = convert_date_format_sql();
        $customerID = $this->input->post('customerID');
        $segment = $this->input->post('segment');
        $companyID = current_companyID();
        $currency = $this->input->post('currency');
        $datefrm = $this->input->post('date');
        $datefromconvert = $datefrm . '-01';
        $datetoconvert = $datefrm . '-31';


        $date = "";
        //$date .= " AND ( invoiceDate >= '" . $datefromconvert . " 00:00:00' AND invoiceDate <= '" . $datetoconvert . " 00:00:00')";
        $sumamount = '';
        if ($currency == 2) {
//            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate) as transactionAmount";
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 )) as transactionAmount";
        } else {
//            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate) as transactionAmount";
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 )) as transactionAmount";
        }

        $qry = "SELECT
	srp_erp_customerreceiptmaster.receiptVoucherAutoId,
	srp_erp_customerreceiptmaster.RVcode,
	srp_erp_customerreceiptmaster.RVNarration,
	srp_erp_customerreceiptmaster.documentID,
	srp_erp_chartofaccounts.bankName,
	srp_erp_chartofaccounts.bankAccountNumber,
	DATE_FORMAT(srp_erp_customerreceiptmaster.RVdate,'" . $convertFormat . "') AS RVdate,
	srp_erp_customerreceiptmaster.segmentCode,
	srp_erp_customerreceiptmaster.companyLocalCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.companyReportingCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.transactionCurrency,
    srp_erp_customerreceiptmaster.companyLocalCurrency,
    srp_erp_customerreceiptmaster.companyReportingCurrency,
	$sumamount
FROM
	srp_erp_customerreceiptdetail
LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.bankGLAutoID = srp_erp_chartofaccounts.GLAutoID
LEFT JOIN srp_erp_customermaster cus ON srp_erp_customerreceiptmaster.customerID = cus.customerAutoID




LEFT JOIN (
	SELECT
		SUM( transactionAmount ) AS transactionAmount,
		receiptVoucherAutoId
	FROM
		srp_erp_customerreceiptdetail
	WHERE
		( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
	GROUP BY
		receiptVoucherAutoId
	) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' GROUP BY receiptVoucherAutoId ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN (
	SELECT
		SUM( transactionAmount ) AS transactionAmount,
		receiptVoucherAutoId
	FROM
		srp_erp_customerreceiptdetail
	WHERE
		( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
	GROUP BY
		receiptVoucherAutoId
	) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )





WHERE
	srp_erp_customerreceiptmaster.companyID = $companyID
AND customerID = $customerID
AND srp_erp_customerreceiptmaster.approvedYN = 1
AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$datefromconvert'
AND '$datetoconvert'
GROUP BY
	srp_erp_customerreceiptmaster.receiptVoucherAutoId
	ORDER BY srp_erp_customerreceiptmaster.RVdate ASC";
        $output = $this->db->query($qry)->result_array();
        /* AND srp_erp_customerreceiptdetail.type = 'Invoice' */
        return $output;
    }


    function get_revanue_previous_details_drilldown_report()
    {
        $convertFormat = convert_date_format_sql();
        $customerID = $this->input->post('customerID');
        $segment = $this->input->post('segment');
        $companyID = current_companyID();
        $currency = $this->input->post('currency');
        $datebegin = $this->input->post('datebegin');
        $dateend = $this->input->post('dateend');


        $date = "";
        //$date .= " AND ( invoiceDate >= '" . $datefromconvert . " 00:00:00' AND invoiceDate <= '" . $datetoconvert . " 00:00:00')";
        $sumamount = '';
        if ($currency == 2) {
//            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate) as transactionAmount";
            $sumamount .= " SUM((((IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( (tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate), 0 ))) as transactionAmount";
        } else {
//            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate) as transactionAmount";
            $sumamount .= " SUM((((IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( (tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate), 0 ))) as transactionAmount";
        }

        $qry = "SELECT
	srp_erp_customerreceiptmaster.receiptVoucherAutoId,
	srp_erp_customerreceiptmaster.RVcode,
	cus.customerName,
	srp_erp_customerreceiptmaster.RVNarration,
	srp_erp_customerreceiptmaster.documentID,
	srp_erp_chartofaccounts.bankName,
	srp_erp_chartofaccounts.bankAccountNumber,
	DATE_FORMAT(srp_erp_customerreceiptmaster.RVdate,'" . $convertFormat . "') AS RVdate,
	srp_erp_customerreceiptmaster.segmentCode,
	srp_erp_customerreceiptmaster.companyLocalCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.companyReportingCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.transactionCurrency,
    srp_erp_customerreceiptmaster.companyLocalCurrency,
    srp_erp_customerreceiptmaster.companyReportingCurrency,
	$sumamount
FROM
	srp_erp_customerreceiptdetail
LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.bankGLAutoID = srp_erp_chartofaccounts.GLAutoID
LEFT JOIN srp_erp_customermaster cus ON srp_erp_customerreceiptmaster.customerID = cus.customerAutoID
	LEFT JOIN (
		SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
				( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
			GROUP BY
				receiptVoucherAutoId
	) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN (SELECT SUM( taxPercentage ) AS taxPercentage, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceipttaxdetails
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
			WHERE
			approvedYN = 1
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
	) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN (
	    SELECT SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
			(srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' )
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
	) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN (
	    SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1
			AND
				( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
			GROUP BY
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
	) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
WHERE
	srp_erp_customerreceiptmaster.companyID = $companyID
AND customerID = $customerID
AND srp_erp_customerreceiptmaster.approvedYN = 1
AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$datebegin'
AND '$dateend'
GROUP BY
	srp_erp_customerreceiptdetail.receiptVoucherAutoId
	ORDER BY srp_erp_customerreceiptmaster.RVdate ASC";
        $output = $this->db->query($qry)->result_array();
        /* AND srp_erp_customerreceiptdetail.type = 'Invoice' */
        return $output;
    }

    function get_collection_detail_reports($currency, $customer, $segment)
    {
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $date = "";

        $sumamount = '';
        /*if ($currency == 1) {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount";
        } else if ($currency == 2) {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate) as transactionAmount";
        } else {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate) as transactionAmount";
        }*/
        if ($currency == 1) {
            $sumamount .= " (((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount";
        } else if ($currency == 2) {
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 ))+ IFNULL( det.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 )- IFNULL( Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 )) AS transactionAmount";

        } else {
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 ))+ IFNULL( det.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 )- IFNULL( Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 )) AS transactionAmount";
        }

        $qry = "SELECT
                srp_erp_customerreceiptmaster.receiptVoucherAutoId,
                cus.customerName,
                srp_erp_customerreceiptmaster.RVcode,
                srp_erp_customerreceiptmaster.RVNarration,
                srp_erp_customerreceiptmaster.documentID,
                srp_erp_chartofaccounts.bankName,
                srp_erp_chartofaccounts.bankAccountNumber,
                DATE_FORMAT( srp_erp_customerreceiptmaster.RVdate, '%d-%m-%Y' ) AS RVdate,
                srp_erp_customerreceiptmaster.segmentCode,
                srp_erp_customerreceiptmaster.companyLocalCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.companyReportingCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.customerCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.transactionCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.transactionCurrency,
                srp_erp_customerreceiptmaster.companyLocalCurrency,
                srp_erp_customerreceiptmaster.companyReportingCurrency,
                $sumamount
            FROM
                srp_erp_customerreceiptdetail
                LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.bankGLAutoID = srp_erp_chartofaccounts.GLAutoID
            LEFT JOIN srp_erp_customermaster cus ON srp_erp_customerreceiptmaster.customerID = cus.customerAutoID
            LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS transactionAmount,
                    receiptVoucherAutoId
                FROM
                    srp_erp_customerreceiptdetail
                WHERE
                    ( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' AND srp_erp_customerreceiptdetail.type != 'EXGL' )
                GROUP BY
                    receiptVoucherAutoId
                ) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
                LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' GROUP BY receiptVoucherAutoId ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
                LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS transactionAmount,
                    receiptVoucherAutoId
                FROM
                    srp_erp_customerreceiptdetail
                WHERE
                    ( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
                GROUP BY
                    receiptVoucherAutoId
                ) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
            WHERE
                srp_erp_customerreceiptmaster.companyID = $companyID
                AND srp_erp_customerreceiptmaster.customerID IN (" . join(',', $customer) . ")
                AND srp_erp_customerreceiptmaster.segmentID IN (" . join(',', $segment) . ")
                AND srp_erp_customerreceiptmaster.approvedYN = 1
                /*AND srp_erp_customerreceiptdetail.type = 'Invoice' */
                AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$datefromconvert'
                AND '$datetoconvert'
            GROUP BY
                srp_erp_customerreceiptmaster.receiptVoucherAutoId
            ORDER BY
                srp_erp_customerreceiptmaster.RVdate ASC";
        $output = $this->db->query($qry)->result_array();
        //$this->db->query($qry)->result_array();
        return $output;

    }

    function get_collection_detail_reports_export($currency, $customer, $segment){

        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $date = "";

    
        $sumamount = '';

        $qry = "SELECT
             * 
            FROM
                (
                (
            SELECT
                srp_erp_customermaster.customerSystemCode,
                srp_erp_customermaster.secondaryCode,
                srp_erp_customermaster.customerName,
                srp_erp_customerinvoicemaster.invoiceAutoID,
                srp_erp_customerinvoicemaster.invoiceCode,
                srp_erp_customerinvoicemaster.invoiceDate,
                srp_erp_customerinvoicemaster.referenceNo,
                srp_erp_customerinvoicemaster.seNumber,
                srp_erp_customerinvoicemaster.segmentCode,
                srp_erp_customerreceiptmaster.RVcode,
                srp_erp_customerreceiptmaster.RVdate,
                srp_erp_customerreceiptmaster.referanceNo RVReferenceNo,
                srp_erp_customerreceiptmaster.RVNarration,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS RVAmount,
                srp_erp_customerinvoicemaster.documentID,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
                srp_erp_customerinvoicemaster.transactionCurrency,
                srp_erp_customerinvoicemaster.companyLocalCurrency,
                srp_erp_customerinvoicemaster.companyReportingCurrency,
                srp_erp_customerinvoicemaster.companyLocalCurrencyDecimalPlaces,
                srp_erp_customerinvoicemaster.companyReportingCurrencyDecimalPlaces,
                srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces,
                srp_erp_customerinvoicemaster.transactionCurrencyDecimalPlaces,
                srp_erp_customerinvoicemaster.invoicebank as bankName,
                srp_erp_customerinvoicemaster.invoicebankAccount as bankAccountNumber
            FROM
                srp_erp_customerinvoicemaster
                JOIN srp_erp_customerreceiptdetail ON srp_erp_customerinvoicemaster.invoiceAutoID = srp_erp_customerreceiptdetail.invoiceAutoID
                JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                JOIN srp_erp_customermaster ON srp_erp_customermaster.customerAutoID = srp_erp_customerinvoicemaster.customerID 
            WHERE
                srp_erp_customerreceiptmaster.approvedYN = 1 
                AND srp_erp_customerreceiptmaster.companyID = '{$companyID}' 
                AND srp_erp_customerreceiptmaster.RVdate BETWEEN '{$datefromconvert}' AND '{$datetoconvert}'
                 
            ORDER BY
                srp_erp_customermaster.customerAutoID,
                srp_erp_customerinvoicemaster.invoiceAutoID,
                srp_erp_customerreceiptmaster.receiptVoucherAutoId 
                ) UNION ALL
                (
            SELECT
                srp_erp_customermaster.customerSystemCode,
                srp_erp_customermaster.secondaryCode,
                srp_erp_customermaster.customerName,
                '-' AS invoiceAutoID,
                '-' AS invoiceCode,
                '-' AS invoiceDate,
                '-' AS referenceNo,
                '-' AS seNumber,
                srp_erp_customerreceiptmaster.segmentCode,
                srp_erp_customerreceiptmaster.RVcode,
                srp_erp_customerreceiptmaster.RVdate,
                srp_erp_customerreceiptmaster.referanceNo RVReferenceNo,
                srp_erp_customerreceiptmaster.RVNarration,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS RVAmount,
                srp_erp_customerreceiptmaster.documentID,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
                srp_erp_customerreceiptmaster.transactionCurrency,
                srp_erp_customerreceiptmaster.companyLocalCurrency,
                srp_erp_customerreceiptmaster.companyReportingCurrency,
                srp_erp_customerreceiptmaster.companyLocalCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.companyReportingCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.customerCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.transactionCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.RVbank as bankName,
                srp_erp_customerreceiptmaster.RVbankAccount as bankAccountNumber
            FROM
                srp_erp_customerreceiptdetail
                JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                JOIN srp_erp_customermaster ON srp_erp_customermaster.customerAutoID = srp_erp_customerreceiptmaster.customerID 
            WHERE
                srp_erp_customerreceiptdetail.type = 'Advance' 
                AND srp_erp_customerreceiptmaster.approvedYN = 1 
                AND srp_erp_customerreceiptmaster.companyID =  '{$companyID}'  
                AND srp_erp_customerreceiptmaster.RVdate BETWEEN '{$datefromconvert}' 
                AND '{$datetoconvert}' 
            ORDER BY
                srp_erp_customermaster.customerAutoID,
                srp_erp_customerreceiptmaster.receiptVoucherAutoId 
                ) UNION ALL
                (
            SELECT
                srp_erp_customermaster.customerSystemCode,
                srp_erp_customermaster.secondaryCode,
                srp_erp_customermaster.customerName,
                srp_erp_creditnotemaster.creditNoteMasterAutoID AS invoiceAutoID,
                srp_erp_creditnotemaster.creditNoteCode AS invoicecode,
                srp_erp_creditnotemaster.creditNoteDate AS invoiceDate,
                NULL AS referenceNo,
                NULL AS seNumber,
                NULL AS segmentCode,
                srp_erp_customerreceiptmaster.RVcode,
                srp_erp_customerreceiptmaster.RVdate,
                srp_erp_customerreceiptmaster.referanceNo RVReferenceNo,
                srp_erp_customerreceiptmaster.RVNarration,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS RVAmount,
                srp_erp_creditnotemaster.documentID,
                ifnull( srp_erp_customerreceiptdetail.invoiceAmount, srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
                srp_erp_creditnotemaster.transactionCurrency,
                srp_erp_creditnotemaster.companyLocalCurrency,
                srp_erp_creditnotemaster.companyReportingCurrency,
                srp_erp_creditnotemaster.companyLocalCurrencyDecimalPlaces,
                srp_erp_creditnotemaster.companyReportingCurrencyDecimalPlaces,
                srp_erp_creditnotemaster.customerCurrencyDecimalPlaces,
                srp_erp_creditnotemaster.transactionCurrencyDecimalPlaces,
                srp_erp_customerreceiptmaster.RVbank as bankName,
                srp_erp_customerreceiptmaster.RVbankAccount as bankAccountNumber
            FROM
                srp_erp_creditnotemaster
                JOIN srp_erp_customerreceiptdetail ON srp_erp_creditnotemaster.creditNoteMasterAutoID = srp_erp_customerreceiptdetail.creditNoteAutoID
                JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                JOIN srp_erp_customermaster ON srp_erp_creditnotemaster.customerID = srp_erp_customermaster.customerAutoID 
            WHERE
                srp_erp_customerreceiptmaster.approvedYN = 1 
                AND srp_erp_customerreceiptmaster.companyID = '{$companyID}'  
                AND srp_erp_customerreceiptmaster.RVdate BETWEEN '{$datefromconvert}'
                AND '{$datetoconvert}' 
            ORDER BY
                srp_erp_creditnotemaster.customerID,
                srp_erp_creditnotemaster.creditNoteMasterAutoID,
                srp_erp_customerreceiptmaster.receiptVoucherAutoId 
                ) 
                ) t1 
            ORDER BY
                t1.customersystemcode";

        $output = $this->db->query($qry)->result_array();
        // echo $this->db->last_query();
        return $output;


    }

    function customer_name()
    {
        $customer = $this->input->post('customerID');
        $this->db->select('customerName');
        $this->db->from('srp_erp_customermaster');
        $this->db->where('customerAutoID', $customer);
        $data = $this->db->get()->row_array();
        return $data;
    }

    function group_customer_linked()
    {

        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();

        //$company = $this->get_group_company();
        $qry = "SELECT
            CONCAT(customerSystemCode,' - ',customerName) as description
        FROM
            srp_erp_customermaster
        WHERE NOT EXISTS (SELECT * FROM srp_erp_groupcustomerdetails WHERE srp_erp_groupcustomerdetails.customerMasterID = srp_erp_customermaster.customerAutoID AND companyGroupID = " . $masterGroupID . ")
            AND srp_erp_customermaster.companyID IN (" . join(',', $companies) . ") AND deletedYN = 0";
                $output = $this->db->query($qry)->result_array();
                return array_column($output, 'description');
    }

    function group_supplier_linked()
    {

        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();
        //$company = $this->get_group_company();
        $qry = "SELECT
                CONCAT(supplierSystemCode,' - ',supplierName) as description
            FROM
                srp_erp_suppliermaster
            WHERE NOT EXISTS (SELECT * FROM srp_erp_groupsupplierdetails WHERE srp_erp_groupsupplierdetails.SupplierMasterID = srp_erp_suppliermaster.supplierAutoID AND companyGroupID = " . $masterGroupID . ")
                AND srp_erp_suppliermaster.companyID IN (" . join(',', $companies) . ") AND deletedYN = 0";
                
        $output = $this->db->query($qry)->result_array();

        return array_column($output, 'description');
    }

    function group_chartofaccount_linked()
    {
        $company = $this->get_group_company();
        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();
        $qry = "SELECT
	CONCAT(systemAccountCode,' - ',GLDescription) as description
FROM
	srp_erp_chartofaccounts
WHERE NOT EXISTS (SELECT * FROM srp_erp_groupchartofaccountdetails WHERE srp_erp_groupchartofaccountdetails.chartofAccountID = srp_erp_chartofaccounts.GLAutoID AND companyGroupID = " . $masterGroupID . " AND masterAccountYN = 0)
	AND masterAccountYN = 0 AND srp_erp_chartofaccounts.companyID IN (" . join(',', $companies) . ") AND deletedYN = 0";
        $output = $this->db->query($qry)->result_array();
        return array_column($output, 'description');
    }

    function group_segment_linked()
    {
        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();
        $company = $this->get_group_company();
        $qry = "SELECT
	CONCAT(company_name ,' - ',segmentCode,' - ',description) as description
FROM
	srp_erp_segment
	inner join srp_erp_company	ON srp_erp_segment.companyID=srp_erp_company.company_id
WHERE NOT EXISTS (SELECT * FROM srp_erp_groupsegmentdetails WHERE srp_erp_groupsegmentdetails.segmentID = srp_erp_segment.segmentID AND companyGroupID = " . $masterGroupID . ")
	AND srp_erp_segment.companyID IN (" . join(',', $companies) . ")";
        $output = $this->db->query($qry)->result_array();
        return array_column($output, 'description');
    }

    function group_item_linked()
    {
        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();
        $company = $this->get_group_company();
        $qry = "SELECT
	CONCAT(itemSystemCode,' - ',itemDescription) as description
FROM
	srp_erp_itemmaster
WHERE NOT EXISTS (SELECT * FROM srp_erp_groupitemmasterdetails WHERE srp_erp_groupitemmasterdetails.ItemAutoID = srp_erp_itemmaster.itemAutoID AND companyGroupID = " . $masterGroupID . ")
	AND srp_erp_itemmaster.companyID IN (" . join(',', $companies) . ") AND deletedYN = 0";
        $output = $this->db->query($qry)->result_array();
        return array_column($output, 'description');
    }

    function group_warehouse_linked()
    {
        $companies = getallsubGroupCompanies();
        $masterGroupID = getParentgroupMasterID();
        $company = $this->get_group_company();
        $qry = "SELECT
	CONCAT(wareHouseCode,' - ',wareHouseDescription) as description
FROM
	srp_erp_warehousemaster
WHERE NOT EXISTS (SELECT * FROM srp_erp_groupwarehousedetails WHERE srp_erp_groupwarehousedetails.warehosueMasterID = srp_erp_warehousemaster.wareHouseAutoID AND companyGroupID = " . $masterGroupID . ")
	AND srp_erp_warehousemaster.companyID IN (" . join(',', $companies) . ")";
        $output = $this->db->query($qry)->result_array();
        return array_column($output, 'description');
    }

    function get_customer_balance_report($datearr)
    {
        if($this->input->post('grouptyp')==1){
            $companyID = current_companyID();
            $customerID = $this->input->post('customerID');
            $company="= $companyID";
        }else{
            $customerID = $this->input->post('customerIDgrp');
            $companyID = $this->get_group_company();
            $company="IN (" . join(',', $companyID) . ")";
        }
        $currency = $this->input->post('currency');
        //$companyID = current_companyID();

        $currencygroup = '';
        if ($currency == 2) {
            $currencygroup = 'a.transactionCurrency';
        }

        if ($currency == 2) {
            $qry = "SELECT
                srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
                srp_erp_chartofaccounts.GLDescription,
                srp_erp_customermaster.customerName,
                    srp_erp_customermaster.customerSystemCode,
                    srp_erp_customermaster.secondaryCode,
                companyLocalCurrency,
                transactionCurrency,
                companyReportingCurrency,
                    transactionCurrencyDecimalPlaces,
                    companyLocalCurrencyDecimalPlaces,
                    companyReportingCurrencyDecimalPlaces,
                sum(companyLocalAmount) as companyLocalAmount,
                sum(transactionAmount) as transactionAmount,
                sum(companyReportingAmount) as  companyReportingAmount,
                IFNULL(categoryDescription, ' - ') as categoryDescription
                FROM
                    `srp_erp_generalledger`
                INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID
                LEFT JOIN srp_erp_partycategories ON srp_erp_partycategories.partyCategoryID=srp_erp_customermaster.partyCategoryID
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
                WHERE
                srp_erp_generalledger.partyAutoID IN (" . join(',', $customerID) . ")
                    AND srp_erp_generalledger.companyID  $company
                AND `subLedgerType` = '3'
                and documentDate<='$datearr'
                group by srp_erp_customermaster.customerAutoID,transactionCurrencyID,srp_erp_chartofaccounts.GLAutoID";
                        } else {
                            $qry = "SELECT
                srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
                srp_erp_chartofaccounts.GLDescription,
                srp_erp_customermaster.customerName,
                    srp_erp_customermaster.customerSystemCode,
                    srp_erp_customermaster.secondaryCode,
                companyLocalCurrency,
                transactionCurrency,
                companyReportingCurrency,
                    transactionCurrencyDecimalPlaces,
                    companyLocalCurrencyDecimalPlaces,
                    companyReportingCurrencyDecimalPlaces,
                sum(companyLocalAmount) as companyLocalAmount,
                sum(transactionAmount) as transactionAmount,
                sum(companyReportingAmount) as  companyReportingAmount,
                IFNULL(categoryDescription, ' - ') as categoryDescription
                FROM
                    `srp_erp_generalledger`
                INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID
                LEFT JOIN srp_erp_partycategories ON srp_erp_partycategories.partyCategoryID=srp_erp_customermaster.partyCategoryID
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
                WHERE
                srp_erp_generalledger.partyAutoID IN (" . join(',', $customerID) . ")
                    AND srp_erp_generalledger.companyID  $company
                AND `subLedgerType` = '3'
                and documentDate<='$datearr'
                group by srp_erp_customermaster.customerAutoID,srp_erp_chartofaccounts.GLAutoID";
        }


        $output = $this->db->query($qry)->result_array();

        // echo $this->db->last_query();
        return $output;
    }

    function get_vendor_balance_report($datearr)
    {
        if($this->input->post('grouptyp')==1){
            $supplierID = $this->input->post('supplierID');
        }else{
            $supplierID = $this->input->post('supplierIDgrp');
        }
        $currency = $this->input->post('currency');
        if($this->input->post('grouptyp')==1){
            $companyID = current_companyID();
            $company="= $companyID";
        }else{
            $companyID = $this->Report_model->get_group_company();
            $company="IN (" . join(',', $companyID) . ")";
        }

        $currencygroup = '';
        if ($currency == 2) {
            $currencygroup = 'a.transactionCurrency';
        }

        if ($currency == 2) {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_suppliermaster.supplierName,
	srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount,
  IFNULL(categoryDescription, ' - ') as categoryDescription
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID
LEFT JOIN srp_erp_partycategories ON srp_erp_partycategories.partyCategoryID=srp_erp_suppliermaster.partyCategoryID
LEFT JOIN srp_erp_chartofaccounts on srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN (" . join(',', $supplierID) . ")
    AND srp_erp_generalledger.companyID $company
AND `subLedgerType` = '2'
and documentDate<='$datearr'
group by partyAutoID,transactionCurrencyID,srp_erp_chartofaccounts.GLAutoID";
        } else {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_suppliermaster.supplierName,
	srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount,
  IFNULL(categoryDescription, ' - ') as categoryDescription
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID
LEFT JOIN srp_erp_partycategories ON srp_erp_partycategories.partyCategoryID=srp_erp_suppliermaster.partyCategoryID
LEFT JOIN srp_erp_chartofaccounts on srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN (" . join(',', $supplierID) . ")
    AND srp_erp_generalledger.companyID $company
AND `subLedgerType` = '2'
and documentDate<='$datearr'
group by partyAutoID,srp_erp_chartofaccounts.GLAutoID";
        }


        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_segment()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_segment');
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('segmentID', $this->input->post('segment'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'description');
        return $result;
    }
    function get_customer()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_customermaster');
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('customerAutoID', $this->input->post('customerAutoID'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'customerName');
        return $result;
    }


    function get_finance_budget_report()
    {

        switch ($this->input->post('rptType')) {
            case "4":
            case "1": /*Month Wise*/
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $segment = $this->input->post("segment");
                $months = get_month_list_from_date(format_date($this->input->post("from")), format_date($this->input->post("to")), "Y-m", "1 month"); /*calculate months*/
                $feilds = "";
                $feilds2 = "";
                $feilds3 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                    foreach ($fieldNameChk as $val) {
                        if (!empty($months)) {
                            foreach ($months as $key => $val2) {
                                /*$feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . " * -1,0) ) as `" . $key . "`,bd.`" . $key . "` as `budget$key`,";
                                $feilds2 .= "SUM(if(CONCAT(srp_erp_budgetdetail.budgetYear,'-',LPAD(srp_erp_budgetdetail.budgetMonth,2,0)) = '$key',srp_erp_budgetdetail." . $val . ",0) ) as `" . $key . "`,";*/
                                $feilds .= "GLD.`" . $key . "` as `" . $key . "`,sum(bd.`" . $val . "`) as `budget$key`,";
                                $feilds2 .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger." . $val . ",0) ) as `" . $key . "`,";
                                $having[] = "(`" . $key . "` != 0 OR `" . $key . "` != - 0)";
                            }
                        }
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }

                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_budgetmaster.documentDate,
                        bd.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory
                    FROM
                        srp_erp_budgetdetail bd
                        LEFT JOIN srp_erp_budgetmaster ON bd.budgetAutoID = srp_erp_budgetmaster.budgetAutoID
                        LEFT JOIN (SELECT $feilds2 srp_erp_generalledger.GLAutoID FROM srp_erp_generalledger  WHERE srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "  AND  srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'  GROUP BY GLAutoID) GLD ON (GLD.GLAutoID = bd.GLAutoID)
                    INNER JOIN srp_erp_chartofaccounts ON bd.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )

                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = bd.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = bd.companyLocalCurrencyID)
                    WHERE
                        CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "'  AND bd.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN = 1 AND bd.segmentID IN(" . join(',', $segment) . ")
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory ORDER BY mainCategory DESC")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
            case "5":
            case "3": /*YTD*/
                $segment = $this->input->post("segment");
                $dmfrom = date('Y-m', strtotime($this->input->post("from")));
                $dmto = date('Y-m', strtotime($this->input->post("to")));
                $financialBeginingDate = get_financial_year(format_date($this->input->post("from")));
                $feilds = "";
                $feilds2 = "";
                $having = array();
                $fieldNameChk = $this->input->post("fieldNameChk");
                if (isset($fieldNameChk)) {
                    foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                        //$feilds .= "IF (srp_erp_chartofaccounts.subCategory = 'PLI',(GDL." . $val . ") * -1,(GDL." . $val . ")) as " . $val . ", SUM(bd." . $val . " ) AS budget" . $val . ",";
                        $feilds .= "(GDL." . $val . ")*-1 as " . $val . ", SUM(bd." . $val . " ) AS budget" . $val . ",";
                        $feilds2 .= "SUM(srp_erp_generalledger." . $val . ") as " . $val . ",";
                        $having[] = $val . ' != -0 OR ' . $val . ' != 0';
                        if ($val == "companyLocalAmount") {
                            $feilds .= "CL.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                        if ($val == "companyReportingAmount") {
                            $feilds .= "CR.DecimalPlaces as " . $val . "DecimalPlaces,";
                        }
                    }
                }
                $result = $this->db->query("SELECT $feilds
                        srp_erp_chartofaccounts.masterAutoID,
                        srp_erp_chartofaccounts.GLAutoID,
                        srp_erp_budgetmaster.documentDate,
                        bd.segmentID,
                        srp_erp_chartofaccounts.masterCategory,
                        srp_erp_chartofaccounts.GLDescription,
                        srp_erp_accountcategorytypes.accountCategoryTypeID,
                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLE',
                        'EXPENSE',

                    IF (
                        srp_erp_chartofaccounts.subCategory = 'PLI',
                        'INCOME',
                        'ND'
                    )
                    ) AS mainCategory,
                    srp_erp_accountcategorytypes.CategoryTypeDescription as subCategory,
                    ca2.GLDescription as subsubCategory,
                    srp_erp_chartofaccounts.subCategory as chartsubcat
                    FROM
                        srp_erp_budgetdetail bd
                        LEFT JOIN srp_erp_budgetmaster ON bd.budgetAutoID = srp_erp_budgetmaster.budgetAutoID
                        LEFT JOIN (SELECT $feilds2 srp_erp_generalledger.GLAutoID FROM srp_erp_generalledger  WHERE srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "   AND  srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ") AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "'  GROUP BY GLAutoID) GDL ON (GDL.GLAutoID = bd.GLAutoID)
                    INNER JOIN srp_erp_chartofaccounts ON bd.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    INNER JOIN srp_erp_accountcategorytypes ON srp_erp_accountcategorytypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
                    LEFT JOIN (
                        SELECT
                            GLDescription,
                    GLAutoID
                        FROM
                            srp_erp_chartofaccounts
                        WHERE
                            srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
                    ) ca2 ON (
                        ca2.GLAutoID = srp_erp_chartofaccounts.masterAutoID
                    )

                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = bd.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = bd.companyLocalCurrencyID)
                    WHERE
                        CONCAT(budgetYear,'-',LPAD(budgetMonth,2,0)) BETWEEN '" . $dmfrom . "' AND '" . $dmto . "'  AND bd.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_budgetmaster.approvedYN=1 AND bd.segmentID IN(" . join(',', $segment) . ")
                    GROUP BY
                        srp_erp_chartofaccounts.masterAutoID,
                        ca2.GLDescription,
                        srp_erp_chartofaccounts.accountCategoryTypeID,
                        bd.GLAutoID,
                        srp_erp_chartofaccounts.GLDescription,
                        mainCategory ORDER BY mainCategory DESC;")->result_array();
                //echo $this->db->last_query();
                return $result;
                break;
        }
    }

    function get_accounts_receivable_customer_ledger_report_postdated_cheques()
    {
        $customer = $this->input->post("customerTo");
        $companyid = current_companyID();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected vendor*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_generalledger.partyAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';


        $feilds = "";
        $feilds2 = "";
        $feildscurrency = "";
        $feildsdecimal = "";
        $amount = "";
        $currencyid =
        $currencydoc = "";
        $feilds3 = " ORDER BY a.documentDate";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds3 = " ORDER BY a.documentDate,a.transactionCurrency";
                    $currencyid = $this->common_data['company_data']['company_default_currencyID'];
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }

                if($val == 'seNumber') {
                    $feilds .= 'cus.seNumber as seNumber,';
                    $feilds2 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber') {
                    $feilds .= " SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                    $feilds2 .= " a." . $val . " AS " . $val . ",";
                    $feilds2 .= " a." . $val . "DecimalPlaces,";
                }
            }
        }

        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val1) { /*generate the query according to selectd columns*/
                if ($val1 == "transactionAmount") {
                    $feildscurrency .= " TC.CurrencyCode AS transactionCurrency,";
                    $feildsdecimal .= " TC.DecimalPlaces AS " . $val1 . "DecimalPlaces,";
                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate) AS transactionAmount,";

                }
                if ($val1 == "companyLocalAmount") {
                    /*$feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";*/
                    //$feildscurrency .= " TC.CurrencyCode AS transactionCurrency,";
                    $feildsdecimal .= " CL.DecimalPlaces AS " . $val1 . "DecimalPlaces,";

                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate) AS companyLocalAmount,";
                }
                if ($val1 == "companyReportingAmount") {
                    $feildsdecimal .= " CR.DecimalPlaces AS " . $val1 . "DecimalPlaces,";
                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate) AS companyReportingAmount,";

                }
                /* $feilds .= " SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                 $feilds2 .= " a." . $val . " AS " . $val . ",";
                 $feilds2 .= " a." . $val . "DecimalPlaces,";*/
            }
        }


        $result = $this->db->query("SELECT $feilds2 a.document,a.documentMasterAutoID,
    DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.customerName,a.customerSystemCode,a.GLSecondaryCode,a.GLDescription,'1' AS type,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
     ((SELECT $feilds srp_erp_documentcodemaster.document,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,cus.referenceNo,cus.invoiceDueDate FROM srp_erp_generalledger
    INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_customermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_generalledger.documentCode  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_customerinvoicemaster cus on cus.invoiceAutoID = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'CINV'
    WHERE $customerOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds '' as document,srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,'' as referenceNo,'' as invoiceDueDate FROM srp_erp_generalledger
    INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID AND srp_erp_generalledger.subLedgerType = 3 AND srp_erp_customermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    WHERE $customerOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.GLAutoID,srp_erp_customermaster.customerAutoID)) AS a
      $feilds3")->result_array();


        $resultpostdatedcheques = $this->db->query("SELECT
	$feildscurrency
	$amount
	$feildsdecimal
	doccode.document AS document,
	receiptmastertbl.receiptVoucherAutoId AS documentMasterAutoID,
	DATE_FORMAT( RVdate, '%d-%m-%Y' ) AS documentDate,
	receiptmastertbl.documentID AS documentCode,
	RVcode AS documentSystemCode,
	RVNarration AS documentNarration,
	customermaster.customerName AS customerName,
	customermaster.customerSystemCode AS customerSystemCode,
	srp_erp_chartofaccounts.GLSecondaryCode AS GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription AS GLDescription,
	'2' AS type,
	referanceNo AS referenceNo,
	'' AS invoiceDueDate,'-' as seNumber
FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
    or srp_erp_customerreceiptdetail.type = \"GL\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
$customerORout
AND receiptmastertbl.companyID = '{$companyid}'
AND receiptmastertbl.modeOfPayment = 2
AND receiptmastertbl.confirmedYN = 1
AND receiptmastertbl.approvedYN != 1
AND RVchequeNo <> '' AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' ) GROUP BY receiptmastertbl.receiptVoucherAutoId")->result_array();
        return $result_arr = (array_merge($result, $resultpostdatedcheques));

    }

    function get_accounts_receivable_customer_statement_report_postdated($overdue = false)
    {
        $where = "";
        $companyID = current_companyID();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        /* Acknowledgement Group by based on Policy - */
        $ackGroupBy = $this->input->post("ackGroupBy");
        $dateFilter = "";
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $segment = $this->input->post("location");
        $segmentQuery = "";

        $segmentQuery1 = "";
        $segmentQuery2 = "";

        $segmentQuery3 = "";
        $segmentQuery4 = "";
        $segmentQuery5 = "";
        $segmentQuery6 = "";
        $segmentQuery7 = "";
        $segmentQuery8 ="";
        if ($segment) {
            
            $segmentQuery = "AND srp_erp_customerinvoicemaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery1 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery2 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery3 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery4 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery5 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery6 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery7 = "AND receiptmastertbl.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery8 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $retentionamount = "";
        $fieldrebate = "";
        $fieldrebate_sales_return = "";
        $word="seNumber";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC,transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';

                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';
                }
                else if($val == 'seNumber') {
                    $fields .= 'srp_erp_customerinvoicemaster.seNumber as seNumber,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                }

                if($val != 'seNumber'){
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                    $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields3 .= "'-' as seNumber,";
                    $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                }
            }
        }

        if(preg_match("/\b{$word}\b/", $fields)==1){
                        
        }else{
            $fields .= "'-' as seNumber,";
        }

        $result = $this->db->query(
            "SELECT $fields3 a.invoiceAutoID,
            a.document,a.age,
            DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,
            a.customerAddress,
            a.customerName,
            a.customerSystemCode,
            a.comments,
            a.VatNO,
            a.documentID,
            DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,
            a.GLSecondaryCode,
            a.GLDescription,
            a.bookingInvCode,
            a.customerID,'1' as type,
            a.referenceNo,a.segmentCode FROM
    ((SELECT $fields 
        srp_erp_customerinvoicemaster.invoiceAutoID,
        srp_erp_documentcodemaster.document,
        srp_erp_customermaster.vatIdNo as VatNO,
        srp_erp_customermaster.customerAddress1 as customerAddress,
        srp_erp_customermaster.customerName,
        srp_erp_customermaster.customerSystemCode,
        srp_erp_customerinvoicemaster.invoiceNarration as comments,
        srp_erp_customerinvoicemaster.documentID,
        srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,
        srp_erp_customerinvoicemaster.$columnCheck as bookingDate,
        srp_erp_chartofaccounts.GLSecondaryCode,
        srp_erp_chartofaccounts.GLDescription,
        srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,
        `srp_erp_customerinvoicemaster`.`customerID` as customerID,
        DATEDIFF('" . format_date($this->input->post("from")) . "',
        srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,
        srp_erp_customerinvoicemaster.referenceNo AS referenceNo,
        srp_erp_customerinvoicemaster.segmentCode AS segmentCode
    FROM `srp_erp_customerinvoicemaster`
    LEFT JOIN `srp_erp_customermaster` ON 
    `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN 
    (
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery2  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery3 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)



LEFT JOIN (
SELECT
    $fields9
    invoiceAutoID,
    srp_erp_salesreturndetails.salesReturnAutoID
FROM
    srp_erp_salesreturndetails
INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
WHERE
    `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
GROUP BY
    srp_erp_salesreturndetails.invoiceAutoID
) srnd ON (
srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)




LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.vatIdNo as VatNO,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo ,'-' as segmentCode,'-' as seNumber
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery1 AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.vatIdNo as VatNO,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo , `srp_erp_creditnotedetail`.segmentCode AS segmentCode,'-' as seNumber
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL $segmentQuery8
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId WHERE 
    `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery4 AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
    srp_erp_customermaster.vatIdNo as VatNO,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo ,'-' as segmentCode,'-' as seNumber
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` 
    LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  
    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 $segmentQuery5  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();

   


        $postdatedcheque = $this->db->query("SELECT
	$fields_postdated
	$fields_postdated_cheque_tot
	receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
	doccode.document AS document,
	\"-\" as age,
	\"-\" as invoiceDueDate,
	customermaster.customerAddress1,
	customermaster.customerName,
	customermaster.vatIdNo as VatNO,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration as comments,
	receiptmastertbl.documentID as documentID,
	DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode as bookingInvCode,
	receiptmastertbl.customerID,
    receiptmastertbl.segmentCode,
	'2' as type,
	'-' as referenceNo,'-' as seNumber
FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
    or srp_erp_customerreceiptdetail.type = \"GL\" $segmentQuery6
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SR\" $segmentQuery6
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
	$customerORout
	AND receiptmastertbl.companyID = '{$companyID}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1 $segmentQuery7
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId")->result_array();

        //echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));
    }

    function get_accounts_payable_vendor_ledger_report_postdatedcheques()
    {
        $vendor = $this->input->post("vendorTo");
        $companyid = current_companyID();
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_generalledger.partyAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';


        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID =  '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $feilds = "";
        $feilds_post = "";
        $feilds_post_amt = "";
        $feilds_post_decimal = "";

        $feilds2 = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";

                    $feilds_post .= " TC.CurrencyCode AS transactionCurrency,";
                    $feilds_post_decimal .= " TC.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate) AS " . $val . ",";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds_post_decimal .= " CL.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate) AS " . $val . ",";

                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds_post_decimal .= " CR.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate) AS " . $val . ",";
                }
                $feilds .= " IF(documentCode = 'BSI' OR documentCode= 'PRVR',ABS(SUM(srp_erp_generalledger." . $val . ")),IF(documentCode = 'PV' OR documentCode = 'DN' OR documentCode = 'SR' ,SUM(srp_erp_generalledger." . $val . ")*-1,SUM(srp_erp_generalledger." . $val . "))) AS " . $val . ",";
                $feilds2 .= " a." . $val . "DecimalPlaces,";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
            }
        }

        $result = $this->db->query("SELECT $feilds2
    a.documentMasterAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.supplierName,a.supplierSystemCode,a.GLSecondaryCode,a.GLDescription,'1' as type,a.supplierInvoiceDate AS supplierInvoiceDate,a.supplierInvoiceNo FROM
    ((SELECT $feilds srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,sup.supplierInvoiceNo,
	DATE_FORMAT( sup.invoiceDueDate, '%d-%m-%Y' ) AS supplierInvoiceDate
    FROM srp_erp_generalledger
    INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_paysupplierinvoicemaster sup on sup.InvoiceAutoID  = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'BSI'
    WHERE $vendorOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,'' as supplierInvoiceDate,'' as supplierInvoiceNo  FROM srp_erp_generalledger
    INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID AND srp_erp_generalledger.subLedgerType = 2 AND srp_erp_suppliermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
    INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    WHERE $vendorOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
    GROUP BY srp_erp_generalledger.GLAutoID,srp_erp_suppliermaster.supplierAutoID)) AS a
      ORDER BY  a.documentDate")->result_array();

        $result_postdated = $this->db->query("SELECT
      $feilds_post
      $feilds_post_decimal
      $feilds_post_amt

	paymentvoucher.payVoucherAutoId AS documentMasterAutoID,
	DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS documentDate,
	paymentvoucher.documentID AS documentCode,
	PVcode AS documentSystemCode,
	PVNarration as documentNarration,
	suppliermaster.supplierName as supplierName,
	suppliermaster.supplierSystemCode as supplierSystemCode,
	suppliermaster.liabilityGLAccount AS GLSecondaryCode,
	suppliermaster.liabilityDescription AS GLDescription,
	'2' as type
FROM
	srp_erp_paymentvouchermaster paymentvoucher
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"Invoice\"
    or srp_erp_paymentvoucherdetail.type = \"Advance\"
    or srp_erp_paymentvoucherdetail.type = \"GL\"
    or srp_erp_paymentvoucherdetail.type = \"Item\"
GROUP BY
    payVoucherAutoId
    ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"debitnote\"
    or srp_erp_paymentvoucherdetail.type = \"SR\"
GROUP BY
    payVoucherAutoId
    ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId

LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
	INNER JOIN srp_erp_suppliermaster suppliermaster ON suppliermaster.supplierAutoID = paymentvoucher.partyID
WHERE
    $vendorORpostdated
	AND paymentvoucher.companyID = '{$companyid}'
	AND pvType = 'Supplier'
	AND modeOfPayment = 2
	AND paymentType = 1
	AND confirmedYN = 1
	AND approvedYN != 1
	AND PVchequeNo <> ''
	AND PVchequeDate > PVdate
	GROUP BY
	paymentvoucher.payVoucherAutoId
	")->result_array();

        $result_postVL = array_merge($result, $result_postdated);
        // echo $this->db->last_query();
        return $result_postVL;
    }

    function get_accounts_payable_vendor_statement_report_postdatedcheque($overdue = false)
    {
        $companyID = current_companyID();
        $from_date = $this->input->post("from");
        $status_invoice_date = $this->input->post("status_invoice_date");

        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }

        $columnCheck = "bookingDate";
        // if ($overdue) {
        //     $columnCheck = "invoiceDueDate";
        // }
        if($status_invoice_date == 2){
            $columnCheck = "invoiceDueDate";
        }

        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID = '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $fields = "";
        $fields_output = "";
        $fields2 = "";
        $fields2_output = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields8_output = "";
        $fields9 = "ORDER BY age DESC";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (IFNULL(paydetails.taxAmount, 0)/transactionExchangeRate)) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                    $fields_output .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2_output .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields7 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';
                    $fields8_output .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0)) / paymentvoucher.transactionExchangeRate )  AS  ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (IFNULL(paydetails.taxAmount, 0)/companyReportingExchangeRate)) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';

                    $fields_output .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8_output .= 'SUM( (IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0)) / paymentvoucher.companyReportingExchangeRate )  AS  ' . $val . ',';


                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + (IFNULL(paydetails.taxAmount, 0)/companyLocalExchangeRate)) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';

                    $fields_output .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8_output .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/ paymentvoucher.companyLocalExchangeRate )  AS  ' . $val . ',';

                }
                // $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_paymentvoucherdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';


                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3  a.InvoiceAutoID,a.supplierName,a.supplierSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,'1' AS type,a.supplierInvoiceNo,a.age,
        a.referenceNo  FROM
((SELECT $fields srp_erp_paysupplierinvoicemaster.InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,srp_erp_paysupplierinvoicemaster.invoiceDueDate,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo AS supplierInvoiceNo ,  DATEDIFF('" . format_date($from_date) . "',srp_erp_paysupplierinvoicemaster.invoiceDueDate) as age, srp_erp_paysupplierinvoicemaster.RefNo as referenceNo FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT SUM(taxAmount) as taxAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID)paydetails ON paydetails.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
		srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1
	WHERE
		`srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "'  AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1
GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` HAVING (" . join(' AND ', $having) . "))
UNION ALL
(SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo,  DATEDIFF('" . format_date($from_date) . "',srp_erp_paymentvouchermaster.PVDate) as age,srp_erp_paymentvouchermaster.referenceNo as referenceNo FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NULL GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID`)
UNION ALL
(SELECT $fields7 srp_erp_debitnotemaster.debitNoteMasterAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo ,  DATEDIFF('" . format_date($from_date) . "',srp_erp_debitnotemaster.debitNoteDate) as age,srp_erp_debitnotemaster.docRefNo as referenceNo  FROM srp_erp_debitnotemaster
LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM`srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`)

UNION ALL
(SELECT $fields8 srp_erp_stockreturnmaster.stockReturnAutoID as InvoiceAutoID,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_stockreturnmaster.stockReturnCode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo,  DATEDIFF('" . format_date($from_date) . "',srp_erp_stockreturnmaster.returnDate) as age, srp_erp_stockreturnmaster.referenceNo as referenceNo   FROM srp_erp_stockreturnmaster
LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue + IFNULL(taxAmount, 0)) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`stockReturnAutoID`)

) as a $where $fields9")->result_array();
//echo $this->db->last_query();

        $postdatedcheque = $this->db->query("SELECT
	$fields_output
    $fields2_output
    $fields8_output
	paymentvoucher.payVoucherAutoId AS InvoiceAutoID,
    suppliermaster.supplierName AS supplierName,
	suppliermaster.supplierSystemCode AS supplierSystemCode,
		PVNarration AS comments,
		paymentvoucher.documentID AS documentID,
		DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS bookingDate,
	suppliermaster.liabilityGLAccount AS GLSecondaryCode,
	suppliermaster.liabilityDescription AS GLDescription,
  PVcode AS bookingInvCode,
	'-' as invoiceDueDate,
	'-' as supplierInvoiceNo,
	'2' AS type
FROM
	srp_erp_paymentvouchermaster paymentvoucher

  LEFT JOIN (
SELECT
	SUM( transactionAmount ) AS inAd,
	payVoucherAutoId
FROM
	srp_erp_paymentvoucherdetail
WHERE
	srp_erp_paymentvoucherdetail.type = \"Invoice\"
	OR srp_erp_paymentvoucherdetail.type = \"Advance\"
	OR srp_erp_paymentvoucherdetail.type = \"Item\"
	OR srp_erp_paymentvoucherdetail.type = \"GL\"
GROUP BY
	payVoucherAutoId
	) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
	LEFT JOIN (
SELECT
	SUM( transactionAmount ) AS dbnAmount,
	payVoucherAutoId
FROM
	srp_erp_paymentvoucherdetail
WHERE
	srp_erp_paymentvoucherdetail.type = \"debitnote\"
	OR srp_erp_paymentvoucherdetail.type = \"SR\"
GROUP BY
	payVoucherAutoId
	) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
	INNER JOIN srp_erp_suppliermaster suppliermaster ON suppliermaster.supplierAutoID = paymentvoucher.partyID
WHERE
	$vendorORpostdated
	AND paymentvoucher.companyID = '{$companyID}'
	AND pvType = 'Supplier'
	AND modeOfPayment = 2
	AND paymentType = 1
	AND confirmedYN = 1
	AND approvedYN != 1
	AND PVchequeNo <> ''
	AND PVchequeDate > PVdate
GROUP BY
	paymentvoucher.payVoucherAutoId")->result_array();


        return array_merge($result, $postdatedcheque);
        /*return $result;*/
    }

    function get_accounts_payable_vendor_aging_summary_report_postdated()
    {
        $vendor = $this->input->post("vendorTo");

        $companyID = current_companyID();
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID = '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $groupby = "";
        $fields2 = "";
        $fields3 = "";
        $fields3_pdc = "";
        $fields3_pdc_new_qu = "";
        $decimalplaces = "";
        $amountna = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $currency_trans = " ";
        $fields_output = "";
        $fields_output_amt = "";
        $fields_output_amt_curr = "";
        $fields2_output = "";
        $fields8_output = "";
        $currencycode = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyReportingAmount) - (IFNULL(SUM(pvd.companyReportingAmount),0)+IFNULL(SUM(dnd.companyReportingAmount),0)+IFNULL(SUM(pva.companyReportingAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields_output .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $currencycode .= 'CR.CurrencyCode';
                    $fields2_output .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'companyReportingAmountPDC';
                    $fields_output_amt_curr .= 'companyReportingAmountcurrency';
                    $decimalplaces .= 'companyReportingAmountDecimalPlaces';
                    $amountna .= 'companyReportingAmount';


                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyLocalAmount) - (IFNULL(SUM(pvd.companyLocalAmount),0)+IFNULL(SUM(dnd.companyLocalAmount),0)+IFNULL(SUM(pva.companyLocalAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields_output .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'companyLocalAmountPDC';
                    $fields_output_amt_curr .= 'companyLocalAmountcurrency';
                    $currencycode .= 'CL.CurrencyCode';
                    $decimalplaces .= 'companyLocalAmountDecimalPlaces';
                    $amountna .= 'companyLocalAmount';/*companyLocalAmountPDC*/


                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.transactionAmount) - (IFNULL(SUM(pvd.transactionAmount),0)+IFNULL(SUM(dnd.transactionAmount),0)+IFNULL(SUM(pva.transactionAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $groupBy[] = $val . 'currency';

                    $fields_output .= 'TC.CurrencyCode as ' . $val . 'currencyPDC,';
                    $fields2_output .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'transactionAmountPDC';
                    $fields_output_amt_curr .= 'transactionAmountcurrencyPDC';
                    $currencycode .= 'TC.CurrencyCode';
                    $currency_trans .= ',srp_erp_paysupplierinvoicemaster.transactionCurrency';
                    $decimalplaces .= 'transactionAmountDecimalPlaces';
                    $amountna .= 'transactionAmount';

                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.supplierCurrencyAmount) - (IFNULL(SUM(pvd.supplierCurrencyAmount),0)+IFNULL(SUM(dnd.supplierCurrencyAmount),0)+IFNULL(SUM(pva.supplierCurrencyAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL(SUM(avd.' . $val . '),0)) as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                //$fields7 = $val . ' > 0';
                $fields7 = $val . ' > 0.01';

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_pdc .= "0 as `current`,";
                $fields3_pdc_new_qu .= "`current`,";

                $groupByExplode = "";
                if ($groupBy) {
                    $groupByExplode = "," . join(',', $groupBy);
                }
            }
        }

        $result = $this->db->query("SELECT currency,
	DecimalPlaces,
	$amountna,
	$fields3_pdc_new_qu
	supplierName,
	supplierSystemCode,
	comments,
	documentID,
	bookingDate,
	GLSecondaryCode,
	GLDescription,
	bookingInvCode,
	supplierID,
	SUM( $fields_output_amt ) AS $fields_output_amt  FROM ((SELECT $fields3 a.supplierName,a.supplierSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.supplierID,\"0\" as $fields_output_amt FROM
((SELECT $fields srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,`srp_erp_paysupplierinvoicemaster`.`supplierID` as supplierID FROM `srp_erp_paysupplierinvoicemaster`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
	FROM
	srp_erp_paymentvoucherdetail
		INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
	FROM
		srp_erp_debitnotedetail
		INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
) dnd ON (
	dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
	FROM
	srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
) pva ON (
	pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`supplierID`,srp_erp_paysupplierinvoicemaster.`bookingDate`$currency_trans HAVING $fields7)
UNION ALL
(SELECT $fields2 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,`srp_erp_paymentvouchermaster`.`partyID` as supplierID
FROM srp_erp_paymentvouchermaster
INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvoucherdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
		FROM srp_erp_pvadvancematchdetails
		INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
		) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`partyID`,srp_erp_paymentvouchermaster.`PVdate` HAVING (" . join(' AND ', $having) . "))
  UNION ALL
(SELECT $fields8 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.`debitNoteDate`) as age,`srp_erp_debitnotemaster`.`supplierID` as supplierID  FROM srp_erp_debitnotemaster
LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`supplierID`,`srp_erp_debitnotemaster`.`debitNoteDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL
(SELECT $fields10 srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate AS bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_stockreturnmaster.stockReturnCode AS bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.`returnDate`) as age,`srp_erp_stockreturnmaster`.`supplierID` as supplierID  FROM srp_erp_stockreturnmaster
LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`supplierID`,`srp_erp_stockreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))) as a GROUP BY a.supplierSystemCode $groupByExplode) UNION (
SELECT
	tbl.$fields_output_amt_curr AS currency,
	tbl.$decimalplaces AS DecimalPlaces,
	0 AS $amountna,
	$fields3_pdc
	tbl.supplierName,
	tbl.supplierSystemCode,
	tbl.comments,
	tbl.documentID,
	tbl.bookingDate,
	tbl.GLSecondaryCode,
	tbl.GLDescription,
	tbl.bookingInvCode,
	tbl.supplierID,
	tbl.$fields_output_amt
FROM
	(
SELECT
	$fields_output
    $fields2_output
    $fields8_output
	suppliermaster.supplierName AS supplierName,
	suppliermaster.supplierSystemCode AS supplierSystemCode,
	PVNarration AS comments,
	paymentvoucher.documentID AS documentID,
	DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS bookingDate,
	suppliermaster.liabilityGLAccount AS GLSecondaryCode,
	suppliermaster.liabilityDescription AS GLDescription,
	PVcode AS bookingInvCode,
	'-' AS age,
	paymentvoucher.partyID AS supplierID
FROM
	srp_erp_paymentvouchermaster paymentvoucher
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"Invoice\"
    or srp_erp_paymentvoucherdetail.type = \"Advance\"
    or srp_erp_paymentvoucherdetail.type = \"Item\"
    or srp_erp_paymentvoucherdetail.type = \"GL\"
GROUP BY
    payVoucherAutoId
    ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"debitnote\"
    or srp_erp_paymentvoucherdetail.type = \"SR\"
GROUP BY
    payVoucherAutoId
    ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
	INNER JOIN srp_erp_suppliermaster suppliermaster ON suppliermaster.supplierAutoID = paymentvoucher.partyID
WHERE
	$vendorORpostdated
	AND paymentvoucher.companyID = '{$companyID}'
	AND pvType = 'Supplier'
	AND modeOfPayment = 2
	AND paymentType = 1
	AND confirmedYN = 1
	AND approvedYN != 1
	AND PVchequeNo <> ''
	AND PVchequeDate > PVdate
GROUP BY
	paymentvoucher.partyID,
	$currencycode
	) AS tbl
	) ) AS tbl1
	GROUP BY
	tbl1.supplierID,
	tbl1.currency  ")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_report_drilldown_pdc($fromTo, $financialBeginingDate)
    {
        $vendor = $this->input->post("supplierID");
        $companyid = current_companyID();
        $currenycode = $this->input->post('currencycode');
        $fields = "";
        $fields_where = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields7 = "";
        $having = array();
        $fieldNameChk = $this->input->post("currency");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            if ($fieldNameChk == 'transactionAmount') {
                $fields .= 'TC.CurrencyCode as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'TC.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields_where .= 'TC.CurrencyCode';
                $fields7 .= 'SUM((IFNULL(inAd,0)  - IFNULL(dbnAmount,0))/paymentvoucher.transactionExchangeRate) AS ' . $fieldNameChk . 'currency,';

            } else if ($fieldNameChk == 'companyReportingAmount') {
                $fields .= 'CR.CurrencyCode as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields_where .= 'CR.CurrencyCode';

                $fields7 .= 'SUM((IFNULL(inAd,0)  - IFNULL(dbnAmount,0))/paymentvoucher.companyReportingExchangeRate) AS ' . $fieldNameChk . 'currency,';
            } else if ($fieldNameChk == 'companyLocalAmount') {
                $fields .= 'CL.CurrencyCode as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'CL.DecimalPlaces as ' . $fieldNameChk . 'DecimalPlaces,';
                $fields_where .= 'CL.CurrencyCode';

                $fields7 .= 'SUM((IFNULL(inAd,0)  - IFNULL(dbnAmount,0))/paymentvoucher.companyLocalExchangeRate) AS ' . $fieldNameChk . 'currency,';
            } else if ($fieldNameChk == 'supplierCurrencyAmount') {
                $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.partyAmount as ' . $fieldNameChk . 'currency,';
                $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $fieldNameChk . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $fieldNameChk . ',';
            }

        }

        $result = $this->db->query("SELECT
	$fields
    $fields2
    $fields7
	paymentvoucher.payVoucherAutoId AS InvoiceAutoID,
	suppliermaster.supplierName AS supplierName,
	suppliermaster.supplierSystemCode AS supplierSystemCode,
	PVNarration AS comments,
	documentID AS documentID,
	DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS bookingDate,
	suppliermaster.liabilityGLAccount AS GLSecondaryCode,
	suppliermaster.liabilityDescription AS GLDescription,
	PVcode AS bookingInvCode,
	'-' AS invoiceDueDate,
	'2' AS type
FROM
	srp_erp_paymentvouchermaster paymentvoucher
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"Invoice\"
    or srp_erp_paymentvoucherdetail.type = \"Advance\"
    or srp_erp_paymentvoucherdetail.type = \"GL\"
    or srp_erp_paymentvoucherdetail.type = \"Item\"
GROUP BY
    payVoucherAutoId
    ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    payVoucherAutoId
FROM
    srp_erp_paymentvoucherdetail
WHERE
    srp_erp_paymentvoucherdetail.type = \"debitnote\"
    or srp_erp_paymentvoucherdetail.type = \"SR\"
GROUP BY
    payVoucherAutoId
    ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
	INNER JOIN srp_erp_suppliermaster suppliermaster ON suppliermaster.supplierAutoID = paymentvoucher.partyID
WHERE

	paymentvoucher.partyID = '{$vendor}'
	AND paymentvoucher.companyID = '{$companyid}'
	AND $fields_where = '{$currenycode}'
	AND pvType = 'Supplier'
	AND modeOfPayment = 2
	AND paymentType = 1
	AND confirmedYN = 1
	AND approvedYN != 1
	AND PVchequeNo <> ''
	AND PVchequeDate > PVdate
GROUP BY
	paymentvoucher.payVoucherAutoId")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_aging_detail_report_postdated()
    {
        $vendor = $this->input->post("vendorTo");
        $companyid = current_companyID();
        $i = 1;
        $k = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selected vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_suppliermaster.supplierAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $vendorORoutPDC = '(';
        if (!empty($vendor)) { /*generate the query according to selected vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORoutPDC .= ' OR ';
                }
                $vendorORoutPDC .= "paymentvoucher.partyID  = '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORoutPDC .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_transaction_postdated_currencycode = "";
        $fields_transaction_postdated_decimalplaces = "";
        $fields_transaction_postdated_amount = "";
        $fields_postdated = "";
        $fields_postdated_decimal = "";
        $fields_postdated_amount = "";
        $fields_postdated_amount_col = "";
        $fields3_pdc_new_qu = "";
        $fields2 = "";
        $fields3 = "";
        $fields3_pdc = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";

        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields_transaction_postdated_currencycode .= 'CR.CurrencyCode as ' . $val . 'PDC,';
                    $fields_transaction_postdated_decimalplaces .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_transaction_postdated_amount .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/paymentvoucher.companyReportingExchangeRate) AS companyReportingAmountPDCcheque,';
                    $fields_postdated .= 'companyReportingAmountPDC';
                    $fields_postdated_decimal .= 'companyReportingAmountDecimalPlaces';
                    $fields_postdated_amount .= 'companyReportingAmount';
                    $fields_postdated_amount_col .= 'companyReportingAmountPDCcheque';

                    $having[] = $val . '!= 0';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= 0';

                    $fields_transaction_postdated_currencycode .= 'CL.CurrencyCode as ' . $val . 'PDC,';
                    $fields_transaction_postdated_decimalplaces .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields_transaction_postdated_amount .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/paymentvoucher.companyLocalExchangeRate) AS companyLocalAmountPDCcheque,';
                    $fields_postdated .= 'companyLocalAmountPDC';
                    $fields_postdated_decimal .= 'companyLocalAmountDecimalPlaces';
                    $fields_postdated_amount .= 'companyLocalAmount';
                    $fields_postdated_amount_col .= 'companyLocalAmountPDCcheque';


                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                    $fields_transaction_postdated_currencycode .= 'TC.CurrencyCode as ' . $val . 'currencyPDC,';
                    $fields_transaction_postdated_decimalplaces .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields_transaction_postdated_amount .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/paymentvoucher.transactionExchangeRate) AS transactionAmountPDC,';
                    $fields_postdated .= 'transactionAmountcurrencyPDC';
                    $fields_postdated_decimal .= 'transactionAmountDecimalPlaces';
                    $fields_postdated_amount .= 'transactionAmount';
                    $fields_postdated_amount_col .= 'transactionAmountPDC';


                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                }


                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ' + pdetail.taxAmount ) - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields7 = $val . ' > 0';

          

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= " 0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";

                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_pdc .= "0 as `current`,";
                $fields3_pdc_new_qu .= "`current`,";
            }
        }


        $result = $this->db->query("SELECT currency,DecimalPlaces,$fields_postdated_amount,$fields3_pdc_new_qu invoiceAutoID,supplierInvoiceNo,documentDate,documentCode,documentID,supplierName,supplierSystemCode,comments,GLSecondaryCode,GLDescription, SUM($fields_postdated_amount_col) as $fields_postdated_amount_col,invoiceDueDate from (SELECT $fields3 a.invoiceAutoID,a.supplierInvoiceNo,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.supplierName,a.supplierSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,\"0\" as $fields_postdated_amount_col,a.invoiceDueDate  FROM
                ((SELECT $fields srp_erp_paysupplierinvoicemaster.invoiceAutoID,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo as supplierInvoiceNo,srp_erp_paysupplierinvoicemaster.documentID as documentID,srp_erp_paysupplierinvoicemaster.bookingInvCode as documentCode,srp_erp_paysupplierinvoicemaster.bookingDate as documentDate, srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,DATE_FORMAT(srp_erp_paysupplierinvoicemaster.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM `srp_erp_paysupplierinvoicemaster`
                LEFT JOIN (
                    SELECT IFNULL(SUM(ap.taxAmount),0) AS taxAmount,ap.InvoiceAutoID
                    FROM srp_erp_paysupplierinvoicedetail AS ap
                    GROUP BY ap.InvoiceAutoID,ap.InvoiceAutoID
                  ) pdetail
                  ON srp_erp_paysupplierinvoicemaster.`InvoiceAutoID` = pdetail.InvoiceAutoID
                
                LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN
                (
                    SELECT
                        $fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
                    FROM
                    srp_erp_paymentvoucherdetail
                        INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1  AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
                        WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "   GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
                ) pvd ON (
                    pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
                )
                LEFT JOIN
                (
                    SELECT
                        $fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
                    FROM
                        srp_erp_debitnotedetail
                        INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
                    WHERE
                        `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
                ) dnd ON (
                    dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
                )
                LEFT JOIN
                (
                    SELECT
                        $fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
                    FROM
                    srp_erp_pvadvancematchdetails
                        INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                        WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
                ) pva ON (
                    pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
                )
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
                WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`,srp_erp_paysupplierinvoicemaster.`bookingDate` HAVING $fields7)
                UNION ALL
                (SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_paymentvouchermaster.documentID AS documentID,
                srp_erp_paymentvouchermaster.PVcode AS documentCode,
                                    srp_erp_paymentvouchermaster.PVDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,'' as invoiceDueDate
                FROM srp_erp_paymentvouchermaster
                INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_paymentvoucherdetail.type='Advance'
                LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
                        FROM srp_erp_pvadvancematchdetails
                        INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                        WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
                        ) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)
                LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_paymentvouchermaster`.`partyID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_paymentvouchermaster.partyGLAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
                WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID`,srp_erp_paymentvouchermaster.`PVdate` HAVING (" . join(' AND ', $having) . "))
                UNION ALL
                (
                SELECT $fields8
                `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_debitnotemaster.documentID AS documentID,
                srp_erp_debitnotemaster.debitNoteCode AS documentCode,
                                    srp_erp_debitnotemaster.debitNoteDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.debitNoteDate) as age,'' as invoiceDueDate
                FROM srp_erp_debitnotemaster
                LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
                LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
                LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_debitnotemaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_debitnotemaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
                WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`,`srp_erp_debitnotemaster`.`debitNoteDate` HAVING (" . join(' AND ', $having) . "))


                UNION ALL
                (
                SELECT $fields10
                `srp_erp_stockreturnmaster`.`stockReturnAutoID` as invoiceAutoID,'-' as supplierInvoiceNo,srp_erp_stockreturnmaster.documentID AS documentID,
                srp_erp_stockreturnmaster.stockReturnCode AS documentCode,srp_erp_stockreturnmaster.returnDate AS documentDate,srp_erp_suppliermaster.supplierName,srp_erp_suppliermaster.supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.returnDate) as age,'' as invoiceDueDate
                FROM srp_erp_stockreturnmaster
                LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
                LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
                LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_stockreturnmaster`.`supplierID` = `srp_erp_suppliermaster`.`supplierAutoID` AND `srp_erp_suppliermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN srp_erp_chartofaccounts ON srp_erp_stockreturnmaster.supplierliabilityAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
                LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
                WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_stockreturnmaster`.`stockReturnAutoID`,`srp_erp_stockreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


                ) as a GROUP BY a.documentCode UNION (
                SELECT
                    tbl.$fields_postdated AS currency,
                    tbl.$fields_postdated_decimal AS DecimalPlaces,
                    0 AS $fields_postdated_amount,
                    $fields3_pdc
                    tbl.InvoiceAutoID,
                    \"-\" as supplierInvoiceNo,
                    tbl.documentDate,
                    tbl.bookingInvCode as documentCode,
                    tbl.documentID,
                    tbl.supplierName,
                    tbl.supplierSystemCode,
                    tbl.comments,

                    tbl.GLSecondaryCode,
                    tbl.GLDescription,
                    tbl.$fields_postdated_amount_col,
                    '' as invoiceDueDate
                FROM
                    (
                SELECT
                    $fields_transaction_postdated_currencycode
                    $fields_transaction_postdated_decimalplaces
                    $fields_transaction_postdated_amount
                    suppliermaster.supplierName AS supplierName,
                    suppliermaster.supplierSystemCode AS supplierSystemCode,
                    PVNarration AS comments,
                    paymentvoucher.documentID AS documentID,
                    suppliermaster.liabilityGLAccount AS GLSecondaryCode,
                    suppliermaster.liabilityDescription AS GLDescription,
                    PVcode AS bookingInvCode,
                    '-' AS age,
                    paymentvoucher.partyID AS supplierID,
                    paymentvoucher.payVoucherAutoId as InvoiceAutoID,
                    DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS documentDate


                FROM
                    srp_erp_paymentvouchermaster paymentvoucher
                    LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS inAd,
                    payVoucherAutoId
                FROM
                    srp_erp_paymentvoucherdetail
                WHERE
                    srp_erp_paymentvoucherdetail.type = \"Invoice\"
                    or srp_erp_paymentvoucherdetail.type = \"Advance\"
                    or srp_erp_paymentvoucherdetail.type = \"GL\"
                    or srp_erp_paymentvoucherdetail.type = \"Item\"
                GROUP BY
                    payVoucherAutoId
                    ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
                    LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS dbnAmount,
                    payVoucherAutoId
                FROM
                    srp_erp_paymentvoucherdetail
                WHERE
                    srp_erp_paymentvoucherdetail.type = \"debitnote\"
                    or srp_erp_paymentvoucherdetail.type = \"SR\"
                GROUP BY
                    payVoucherAutoId
                    ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
                    LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
                    LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
                    LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
                    INNER JOIN srp_erp_suppliermaster suppliermaster ON suppliermaster.supplierAutoID = paymentvoucher.partyID
                WHERE
                    $vendorORoutPDC
                    AND paymentvoucher.companyID = '{$companyid}'
                    AND pvType = 'Supplier'
                    AND modeOfPayment = 2
                    AND paymentType = 1
                    AND confirmedYN = 1
                    AND approvedYN != 1
                    AND PVchequeNo <> ''
                    AND PVchequeDate > PVdate
                GROUP BY
                    paymentvoucher.PVcode
                    ) AS tbl
                    )
                        ) AS tbl1
                        GROUP BY
                tbl1.documentCode")->result_array();
        // echo $this->db->last_query();
        return $result;
    }

    function get_accounts_receivable_customer_aging_summary_report_pdc()
    {
        $customer = $this->input->post("customerTo");
        $companyid = current_companyID();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

         /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $k = 1;
        $customerORoutput = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORoutput .= ' OR ';
                }
                $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORoutput .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_currency = "";
        $fields_currency_decimal = "";
        $fields_currency_amt = "";
        $fields3 = "";
        $fields3_age = "";
        $fields3_details = "";
        $curre = "";
        $fields3_pdc_new_qu = "";
        $fields3_pdc_total = "";
        $pdc_total_code = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $fields12 = "";
        $fieldretention = "";
        $fieldrebate = "";
        $pdc_totalcurr = "";
        $fields3_aging_pdc = "";
        $having = array();
        $groupBy = array();
        $fields3_amount_total_pdc = '';
        $fields3_amount_total_pdc_uni = '';
        $fields_decimalplaces = '';
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_currency .= 'CR.CurrencyCode';
                    $fields_currency_decimal .= 'CR.DecimalPlaces';
                    $fields_currency_amt .= 'companyReportingAmount';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - '.$fieldrebate_sales_return.' AS ' . $val . ',';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $pdc_total_code .= 'companyReportingAmountPDC';
                    $curre .= 'companyReportingCurrency';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionReportingAmount,0)';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $pdc_totalcurr .= '0 as companyReportingAmount';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate)-'.$fieldrebate_sales_return.' AS ' . $val . ',';
                    $fields_currency .= 'CL.CurrencyCode';
                    $fields_currency_decimal .= 'CL.DecimalPlaces';
                    $fields_currency_amt .= 'companyLocalAmount';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $curre .= 'companyLocalCurrency';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';
                    $pdc_total_code .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionLocalAmount,0)';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $pdc_totalcurr .= '0 as companyLocalAmount';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldretention .= '0';
                    $fieldrebate .= '0';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue)-'.$fieldrebate_sales_return.' AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                    $fields_currency .= 'TC.CurrencyCode';
                    $fields_currency_decimal .= 'TC.DecimalPlaces';
                    $fields_currency_amt .= 'transactionAmount';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $pdc_total_code .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $pdc_totalcurr .= '0 as transactionAmount';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields3 .= 'a.age,';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields12 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,SUM(t2." . $val . "PDC) as " . $val . "PDCT,";
                $fields3_details .= "0 as `current`,";
                $fields3_pdc_new_qu .= " `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }
        $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate,a.CustomerID as customerID	 FROM
                                    ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,CustomerID FROM `srp_erp_customerinvoicemaster`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN
                                    (
                                        SELECT
                                            $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                                        FROM
                                        srp_erp_customerreceiptdetail
                                            INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                                            AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                                    ) pvd ON (
                                        pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )
                                    LEFT JOIN
                                    (
                                        SELECT
                                            $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                                        FROM
                                            srp_erp_creditnotedetail
                                            INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                                        WHERE
                                            `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                                    ) cnd ON (
                                        cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )/*
                                    LEFT JOIN (
                                    SELECT
                                        $fields10
                                        invoiceAutoID,
                                        srp_erp_salesreturndetails.salesReturnAutoID
                                    FROM
                                        srp_erp_salesreturndetails
                                    INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
                                    AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
                                    WHERE
                                        `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
                                    GROUP BY
                                        srp_erp_salesreturndetails.invoiceAutoID
                                    ) srnd ON (
                                    srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
                                    )*/
                                    LEFT JOIN(
                                    SELECT
                                    $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                        FROM srp_erp_rvadvancematchdetails
                                        INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                        WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                        AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                        GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                                        ca ON (
                                        ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                                    )
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
                                    UNION ALL (
                                    SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` as customerID
                                    FROM srp_erp_customerreceiptmaster
                                    INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                                    LEFT JOIN (SELECT $fields12 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                            FROM srp_erp_rvadvancematchdetails
                                            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                            WHERE srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                                            GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                            ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                                    UNION ALL (

                                    SELECT $fields8
                                    `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                                    srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                                        srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo, `srp_erp_creditnotemaster`.`customerID` AS customerID
                                    FROM srp_erp_creditnotemaster
                                    INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId as receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' AND approvedYN = 1 GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


                                    UNION ALL (
                                    SELECT $fields11
                                    `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                                    srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                                        srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,`srp_erp_salesreturnmaster`.`customerID` AS customerID
                                    FROM srp_erp_salesreturnmaster
                                    INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                                LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                                                WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
                                    ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                                    WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
                                    )

                                    ) as a GROUP BY a.documentCode UNION
                                        SELECT
                                        b.currency AS currency,
                                        b.DecimalPlaces AS DecimalPlaces,
                                        $pdc_totalcurr,
                                        0 as age,
                                        b.receiptVoucherAutoId as invoiceAutoID,
                                        b.bookingDate as documentDate,
                                        b.bookingInvCode as documentCode,
                                        b.documentID,
                                        b.customerName,
                                        b.customerSystemCode,
                                        b.comments,
                                        b.GLSecondaryCode,
                                        b.GLDescription,
                                        b.$fields3_amount_total_pdc_uni,
                                        '' AS referenceNo,
                                        '' as invoiceDueDate,
                                        b.customerAutoID as CustomerID
                                    FROM
                                        (
                                        (
                                    SELECT
                                        $fields_currencycode AS currency,
                                        $fields_decimalplaces AS DecimalPlaces,
                                        \"0\" AS transactionAmount,
                                        $fields3_aging_pdc
                                        customermaster.customerName,
                                        customermaster.customerSystemCode,
                                        receiptmastertbl.RVNarration AS comments,
                                        receiptmastertbl.documentID AS documentID,
                                        DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
                                        srp_erp_chartofaccounts.GLSecondaryCode,
                                        srp_erp_chartofaccounts.GLDescription,
                                        receiptmastertbl.RVcode AS bookingInvCode,
                                        receiptmastertbl.customerID,
                                        receiptmastertbl.receiptVoucherAutoId,
                                                        srp_erp_customermaster.customerAutoID,
                                        $fields3_amount_total_pdc

                                    FROM
                                        srp_erp_customerreceiptmaster receiptmastertbl
                                        LEFT JOIN (
                                    SELECT
                                        SUM(transactionAmount) AS inAd,
                                        receiptVoucherAutoId
                                    FROM
                                        srp_erp_customerreceiptdetail
                                    WHERE
                                        srp_erp_customerreceiptdetail.type = \"Invoice\"
                                        or srp_erp_customerreceiptdetail.type = \"Advance\"
                                        or srp_erp_customerreceiptdetail.type = \"GL\"
                                    GROUP BY
                                        receiptVoucherAutoId
                                        ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                                        LEFT JOIN (
                                            SELECT
                                                SUM(transactionAmount) AS dbnAmount,
                                                receiptVoucherAutoId
                                            FROM
                                                srp_erp_customerreceiptdetail
                                            WHERE
                                                srp_erp_customerreceiptdetail.type = \"creditnote\"
                                                or srp_erp_customerreceiptdetail.type = \"SLR\"
                                            GROUP BY
                                                receiptVoucherAutoId
                                        ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
                                        LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
                                        INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
                                        LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
                                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
                                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
                                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
                                    WHERE
                                        $customerORoutput
                                        AND receiptmastertbl.companyID = '{$companyid}'
                                        AND receiptmastertbl.modeOfPayment = 2
                                        AND receiptmastertbl.confirmedYN = 1
                                        AND receiptmastertbl.approvedYN != 1
                                        AND RVchequeNo <> ''
                                        AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
                                    GROUP BY
                                        receiptmastertbl.receiptVoucherAutoId
                                        )
                                        ) AS b) as tbl1
                                        GROUP BY
                                        tbl1.invoiceAutoID,tbl1.DocumentCode) t2
                                        GROUP BY
                                        t2.customerSystemCode,
                                        t2.currency

                                    ")->result_array();

        // echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_detail_report_postdated()
    {
        $customer = $this->input->post("customerTo");
        $companyid = current_companyID();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customerOR .= ')';

        $k = 1;
        $customerOR_output = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerOR_output .= ' OR ';
                }
                $customerOR_output .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }

        $customerOR_output .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_decimalplaces = "";
        $fields3 = "";
        $fields3_aging_pdc = "";
        $fields3_amount_total_pdc = "";
        $fields3_amount_total_pdc_uni = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldretention = "";
        $fieldrebate = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate)-'.$fieldrebate_sales_return.' - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldretention = '0';
                    $fieldrebate .= '0';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue)-'.$fieldrebate_sales_return.'- IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }

        $result = $this->db->query("SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate FROM
                    ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN
                    (
                        SELECT
                            $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                        FROM
                        srp_erp_customerreceiptdetail
                            INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                            AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                    ) pvd ON (
                        pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )
                    LEFT JOIN
                    (
                        SELECT
                            $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                        FROM
                            srp_erp_creditnotedetail
                            INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                        WHERE
                            `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                    ) cnd ON (
                        cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )/*
                    LEFT JOIN (
                    SELECT
                        $fields10
                        invoiceAutoID,
                        srp_erp_salesreturndetails.salesReturnAutoID
                    FROM
                        srp_erp_salesreturndetails
                    INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
                    AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
                    WHERE
                        `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
                    GROUP BY
                        srp_erp_salesreturndetails.invoiceAutoID
                    ) srnd ON (
                    srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
                    )*/
                    LEFT JOIN(
                        SELECT
                            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                        FROM srp_erp_rvadvancematchdetails
                        INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                        WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " 
                            AND srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "'
                        GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                    ca ON (
                        ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                    )
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
                    UNION ALL (
                    SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate, referanceNo AS referenceNo
                    FROM srp_erp_customerreceiptmaster
                    INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                    LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                            FROM srp_erp_rvadvancematchdetails
                            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                            WHERE srp_erp_rvadvancematch.matchDate <= '" . format_date($this->input->post("from")) . "' 
                            GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                            ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                    UNION ALL (

                    SELECT $fields8
                    `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                    srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                        srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo
                    FROM srp_erp_creditnotemaster
                    INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId as receiptVoucherAutoId,creditNoteAutoID FROM srp_erp_customerreceiptdetail LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' AND approvedYN = 1 GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


                    UNION ALL (
                    SELECT $fields11
                    `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                    srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                        srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
                    FROM srp_erp_salesreturnmaster
                    INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                    LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                        LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                                        WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
                    ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                    WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
                    )

                    ) as a GROUP BY a.documentCode,	a.invoiceAutoID,a.documentID UNION
                        SELECT
                        b.currency AS currency,
                        b.DecimalPlaces AS DecimalPlaces,
                        0 transactionAmount,
                        $fields3_aging_pdc
                        b.receiptVoucherAutoId as invoiceAutoID,
                        b.bookingDate as documentDate,
                        b.bookingInvCode as documentCode,
                        b.documentID,
                        b.customerName,
                        b.customerSystemCode,
                        b.comments,
                        b.GLSecondaryCode,
                        b.GLDescription,
                        b.$fields3_amount_total_pdc_uni,
                        '' as invoiceDueDate,
                        '' AS referenceNo
                    FROM
                        (
                        (
                    SELECT
                        $fields_currencycode AS currency,
                        $fields_decimalplaces AS DecimalPlaces,
                        \"0\" AS transactionAmount,
                        $fields3_aging_pdc
                        customermaster.customerName,
                        customermaster.customerSystemCode,
                        receiptmastertbl.RVNarration AS comments,
                        receiptmastertbl.documentID AS documentID,
                        DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
                        srp_erp_chartofaccounts.GLSecondaryCode,
                        srp_erp_chartofaccounts.GLDescription,
                        receiptmastertbl.RVcode AS bookingInvCode,
                        receiptmastertbl.customerID,
                        receiptmastertbl.receiptVoucherAutoId,
                        $fields3_amount_total_pdc

                    FROM
                        srp_erp_customerreceiptmaster receiptmastertbl
                        LEFT JOIN (
                    SELECT
                        SUM(transactionAmount) AS inAd,
                        receiptVoucherAutoId
                    FROM
                        srp_erp_customerreceiptdetail
                    WHERE
                        srp_erp_customerreceiptdetail.type = \"Invoice\"
                        or srp_erp_customerreceiptdetail.type = \"Advance\"
                        or srp_erp_customerreceiptdetail.type = \"GL\"
                    GROUP BY
                        receiptVoucherAutoId
                        ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                        LEFT JOIN (
                    SELECT
                        SUM(transactionAmount) AS dbnAmount,
                        receiptVoucherAutoId
                    FROM
                        srp_erp_customerreceiptdetail
                    WHERE
                        srp_erp_customerreceiptdetail.type = \"creditnote\"
                        or srp_erp_customerreceiptdetail.type = \"SLR\"
                    GROUP BY
                        receiptVoucherAutoId
                        ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
                        LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
                        INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
                        LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
                        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
                    WHERE
                        $customerOR_output
                        AND receiptmastertbl.companyID = '{$companyid}'
                        AND receiptmastertbl.modeOfPayment = 2
                        AND receiptmastertbl.confirmedYN = 1
                        AND receiptmastertbl.approvedYN != 1
                        AND RVchequeNo <> ''
                        AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
                    GROUP BY
                        receiptmastertbl.receiptVoucherAutoId
                        )
                        ) AS b) as tbl1
                        GROUP BY
                        tbl1.invoiceAutoID,
                        tbl1.DocumentCode

        ")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_item_exceed_reports($item, $pdf = 0)
    {
        $start = $this->input->post('start');
        $viewZeroBalace = $this->input->post('viewZeroBalace');
        if (!$start) {
            $start = 0;
        }
        $per = 500;
        $end = $start + $per;

        $limit = "";
        if ($pdf == 0) {

            $limit = "  LIMIT 500 OFFSET {$start}";
        }

        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $wareHouseAutoID = $this->input->post('wareHouseAutoID');
        $outlets = "";
        if ($wareHouseAutoID) {
            $outlets = "AND srp_erp_itemexceeded.warehouseAutoID IN (" . join(',', $wareHouseAutoID) . ")";
        }
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $date = "";
        /* $sumamount = '';
         if ($currency == 1) {
             $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount";
         } else if ($currency == 2) {
             $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate) as transactionAmount";
         } else {
             $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate) as transactionAmount";
         }*/
        $having = '';
        if($viewZeroBalace == 1)
        {
            $having = ' HAVING balanceamount != 0 ';
        }


        $qry = "SELECT
	srp_erp_itemexceeded.exceededItemAutoID,
	srp_erp_itemexceeded.unitOfMeasure as uom,
	srp_erp_itemexceeded.transactionAmount as transactionAmount,
	DATE_FORMAT(srp_erp_itemexceeded.documentDate,'$convertFormat ') as documentDate,
	documentCode,
	documentAutoID,
	documentSystemCode,
	CONCAT(srp_erp_warehousemaster.wareHouseCode, ' | ', srp_erp_warehousemaster.wareHouseLocation) as wareHouseDescription,
	srp_erp_itemexceeded.itemAutoID AS itemAutoID,
	exceededQty,
	updatedQty,
	unitCost,
	IFNULL(excedmatch.totval,0) as totval,
	srp_erp_itemmaster.itemSystemCode,
	srp_erp_itemmaster.seconeryItemCode,
	srp_erp_itemmaster.itemName,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND(( 	IFNULL( excedmatch.matchedqty, 0 ) ), 4 )))))) AS matchedqty,

	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND(( 	IFNULL((exceededQty - (IFNULL( excedmatch.matchedqty, 0 ))), 0 ) ), 4 )))))) AS balanceQty,


    TRIM(TRAILING 0 FROM (ROUND((TRIM(TRAILING 0 FROM ((ROUND((( IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 4 ))))) ,4))) as balanceamount

FROM
	`srp_erp_itemexceeded`
LEFT JOIN srp_erp_itemmaster ON srp_erp_itemexceeded.itemAutoID = srp_erp_itemmaster.itemAutoID
LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = srp_erp_itemexceeded.warehouseAutoID
LEFT JOIN (
	SELECT
		exceededItemAutoID,SUM(totalValue) as totval,SUM(matchedQty) as matchedqty,srp_erp_itemexceededmatch.exceededMatchID
	FROM
		srp_erp_itemexceededmatchdetails
		JOIN srp_erp_itemexceededmatch ON srp_erp_itemexceededmatchdetails.exceededMatchID = srp_erp_itemexceededmatch.exceededMatchID
		where  date_format(srp_erp_itemexceededmatch.documentDate,'%Y-%m-%d') BETWEEN '$datefromconvert' AND '$datetoconvert'
GROUP BY
srp_erp_itemexceededmatchdetails.exceededItemAutoID
)  excedmatch ON excedmatch.exceededItemAutoID = srp_erp_itemexceeded.exceededItemAutoID
WHERE
	srp_erp_itemexceeded.itemAutoID IN (" . join(',', $item) . ") $outlets
AND date_format(srp_erp_itemexceeded.documentDate,'%Y-%m-%d') BETWEEN '$datefromconvert'
AND '$datetoconvert'
AND srp_erp_itemexceeded.companyID = {$companyID} $having $limit";
        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_item_exceed_reports_recordCount($item)
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $wareHouseAutoID = $this->input->post('wareHouseAutoID');
        $viewZeroBalace = $this->input->post('viewZeroBalace');
        $outlets = "";

        if ($wareHouseAutoID) {
            $outlets = "AND srp_erp_itemexceeded.warehouseAutoID IN (" . join(',', $wareHouseAutoID) . ")";
        }
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $having = '';

        if ($viewZeroBalace != 0) {
            $having = ' HAVING balanceamount != 0 ';
            $select = "CASE
			WHEN (TRIM(
		TRAILING 0
	FROM
		(
		ROUND(( TRIM( TRAILING 0 FROM (( ROUND(((IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 2 ))))), 4 ))) ) != 0 THEN
				srp_erp_itemexceeded.transactionAmount ELSE 0
			END AS transactionAmount,
		CASE
				WHEN (TRIM(
		TRAILING 0
	FROM
		(
		ROUND(( TRIM( TRAILING 0 FROM (( ROUND(((IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 2 ))))), 4 ))) ) != 0 THEN
					IFNULL( excedmatch.totval, 0 ) ELSE 0
				END AS totval,";
        } else {
            $select = "srp_erp_itemexceeded.transactionAmount AS transactionAmount, IFNULL( excedmatch.totval, 0 ) AS totval, ";
        }

        $qry = "SELECT
	COUNT( h.TotalRecords ) AS TotalRecords,
	SUM(
	IFNULL( h.totval, 0 )) AS totval,
	SUM( h.transactionAmount ) AS transactionAmount
FROM
	(
	SELECT
	$select
	srp_erp_itemexceeded.exceededItemAutoID AS TotalRecords,
	srp_erp_itemexceeded.transactionAmount - IFNULL( excedmatch.totval, 0 ) AS zerotot,
    TRIM(TRAILING 0 FROM (ROUND((TRIM(TRAILING 0 FROM ((ROUND((( IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 2 ))))) ,4))) as balanceamount
FROM
	`srp_erp_itemexceeded`
LEFT JOIN srp_erp_itemmaster ON srp_erp_itemexceeded.itemAutoID = srp_erp_itemmaster.itemAutoID
LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = srp_erp_itemexceeded.warehouseAutoID
LEFT JOIN (
	SELECT
		exceededItemAutoID,SUM(totalValue) as totval,SUM(matchedQty) as matchedqty,srp_erp_itemexceededmatch.exceededMatchID
	FROM
		srp_erp_itemexceededmatchdetails
		 JOIN srp_erp_itemexceededmatch ON srp_erp_itemexceededmatchdetails.exceededMatchID = srp_erp_itemexceededmatch.exceededMatchID
		where  date_format(srp_erp_itemexceededmatch.documentDate,'%Y-%m-%d') BETWEEN '$datefromconvert' AND '$datetoconvert'
GROUP BY
srp_erp_itemexceededmatchdetails.exceededItemAutoID
)  excedmatch ON excedmatch.exceededItemAutoID = srp_erp_itemexceeded.exceededItemAutoID
WHERE
	srp_erp_itemexceeded.itemAutoID IN (" . join(',', $item) . ") $outlets
AND date_format(srp_erp_itemexceeded.documentDate,'%Y-%m-%d') BETWEEN '$datefromconvert'
AND '$datetoconvert'
AND srp_erp_itemexceeded.companyID = {$companyID}

	) AS h";
        $output = $this->db->query($qry)->row_array();
        return $output;
    }

    function get_item_exceed_reports_excel($item)
    {
        $details = array();
        $details_data = $this->get_item_exceed_reports($item, 1);

        if (!empty($details_data)) {
            
            $a = 1;
            $totamountexceed = 0;
            $totamountupdate = 0;
            $totamountbal = 0;
            foreach ($details_data as $val) {
                $itemSecondaryCodePolicy =is_show_secondary_code_enabled();
                    if($itemSecondaryCodePolicy){
                        $item_code = $val["seconeryItemCode"];
                    }else{
                        $item_code = $val["itemSystemCode"];
                    } 
                $details[] = array(
                    'Num' => $a,
                    'Item' => $item_code,
                    'Description' => $val['itemName'],
                    'DocumentCode' => $val['documentSystemCode'],
                    'DocumentDate' => $val['documentDate'],
                    'Warehouse' => $val['wareHouseDescription'],
                    'UOM' => $val['uom'],
                    'ExceededQty' => number_format($val['exceededQty'], 2),
                    'MatchedQty' => number_format($val['matchedqty'], 2),
                    'BalanceQty' => number_format($val['balanceQty'], 2),
                    'UnitAmount' => number_format(($val['transactionAmount'] / $val['exceededQty']), $this->common_data['company_data']['company_default_decimal']),
                    'ExceededAmount' => number_format($val['transactionAmount'], $this->common_data['company_data']['company_default_decimal']),
                    'MatchedAmount' => number_format($val['totval'], $this->common_data['company_data']['company_default_decimal']),
                    'BalanceAmount' => number_format(($val['transactionAmount'] - $val['totval']), $this->common_data['company_data']['company_default_decimal'])
                );
                $totamountexceed += $val['transactionAmount'];
                $totamountupdate += $val['totval'];
                $totamountbal += ($val['transactionAmount'] - $val['totval']);
                $a++;
            }

            $total_arr = array(
                'Num' => 'Total',
                'Item' => '',
                'DocumentCode' => '',
                'DocumentDate' => '',
                'Warehouse' => '',
                'UOM' => '',
                'ExceededQty' => '',
                'MatchedQty' => '',
                'BalanceQty' => '',
                'UnitAmount' => '',
                'ExceededAmount' => number_format($totamountexceed, $this->common_data['company_data']['company_default_decimal']),
                'MatchedAmount' => number_format($totamountupdate, $this->common_data['company_data']['company_default_decimal']),
                'BalanceAmount' => number_format($totamountbal, $this->common_data['company_data']['company_default_decimal'])
            );
            array_push($details, $total_arr);
        }
        return $details;
    }

    function get_item_exceed_summery_reports($item)
    {
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $wareHouseAutoID = $this->input->post('wareHouseAutoIDSum');
        $outlets = "";
        $having = "";
        if ($wareHouseAutoID) {
            $outlets = "AND srp_erp_itemexceeded.warehouseAutoID IN (" . join(',', $wareHouseAutoID) . ")";
        }

        $viewZeroBalace = $this->input->post('viewZeroBalace');

        if ($viewZeroBalace != 0) {
            $having = ' HAVING balanceamount1!= 0 ';
            $select = "CASE
			WHEN (TRIM(
		TRAILING 0
	FROM
		(
		ROUND(( TRIM( TRAILING 0 FROM (( ROUND(((IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 2 ))))), 4 ))) ) != 0 THEN
				srp_erp_itemexceeded.transactionAmount ELSE 0
			END AS transactionAmount,
		CASE
				WHEN (TRIM(
		TRAILING 0
	FROM
		(
		ROUND(( TRIM( TRAILING 0 FROM (( ROUND(((IFNULL(srp_erp_itemexceeded.transactionAmount,0) - IFNULL(excedmatch.totval,0) ) ), 2 ))))), 4 ))) ) != 0 THEN
					IFNULL( excedmatch.totval, 0 ) ELSE 0
				END AS totval,";
        } else {
            $select = "srp_erp_itemexceeded.transactionAmount AS transactionAmount, IFNULL( excedmatch.totval, 0 ) AS totval, ";
        }

        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
//        $dateto = $this->input->post('dateto');
//        $datetoconvert = input_format_date($dateto, $date_format_policy);


        $qry = "SELECT
	exceededItemAutoID,
	uom,
	SUM( transactionAmount ) AS transactionAmount,
	documentDate,
	documentCode,
	documentAutoID,
	documentSystemCode,
	wareHouseDescription,
	itemAutoID,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( exceededQty )), 4 )))))) AS exceededQty,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( updatedQty )), 4 )))))) AS updatedQty,
	unitCost,
	warehouseAutoID,
	SUM( totval ) AS totval,
	itemSystemCode,
	seconeryItemCode,
	itemName,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( matchedqty )), 4 )))))) AS matchedqty,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( balanceQty )), 4 )))))) AS balanceQty,
	balanceamount1
FROM
	(
	SELECT
		srp_erp_itemexceeded.exceededItemAutoID,
		srp_erp_itemexceeded.unitOfMeasure AS uom,
		$select

		DATE_FORMAT( srp_erp_itemexceeded.documentDate, '$convertFormat' ) AS documentDate,
		documentCode,
		documentAutoID,
		documentSystemCode,
		CONCAT( srp_erp_warehousemaster.wareHouseCode, ' | ', srp_erp_warehousemaster.wareHouseLocation ) AS wareHouseDescription,
		srp_erp_itemexceeded.itemAutoID AS itemAutoID,
		exceededQty,
		updatedQty,
		unitCost,
		srp_erp_itemexceeded.warehouseAutoID,
		srp_erp_itemmaster.itemSystemCode,
		srp_erp_itemmaster.seconeryItemCode,
		srp_erp_itemmaster.itemName,
		IFNULL( excedmatch.matchedqty, 0 ) AS matchedqty,
		(
			exceededQty - (
			IFNULL( excedmatch.matchedqty, 0 ))) AS balanceQty ,
			TRIM(
		TRAILING 0
	FROM
		(
			ROUND((
					TRIM(
						TRAILING 0
					FROM
						((
							ROUND((( IFNULL( srp_erp_itemexceeded.transactionAmount, 0 ) - IFNULL( excedmatch.totval, 0 ) ) ), 2 ))))),
				4
			))) AS balanceamount1
	FROM
		`srp_erp_itemexceeded`
		LEFT JOIN srp_erp_itemmaster ON srp_erp_itemexceeded.itemAutoID = srp_erp_itemmaster.itemAutoID
		LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = srp_erp_itemexceeded.warehouseAutoID
		LEFT JOIN (
		SELECT
			exceededItemAutoID,srp_erp_itemexceededmatch.exceededMatchID,
			SUM( totalValue ) AS totval,
			SUM( matchedQty ) AS matchedqty
		FROM
			srp_erp_itemexceededmatchdetails
			LEFT JOIN srp_erp_itemexceededmatch ON srp_erp_itemexceededmatchdetails.exceededMatchID = srp_erp_itemexceededmatch.exceededMatchID
		WHERE
			date_format( srp_erp_itemexceededmatch.documentDate, '%Y-%m-%d' ) <= '$datefromconvert'
		GROUP BY
			srp_erp_itemexceededmatchdetails.exceededItemAutoID
		) excedmatch ON excedmatch.exceededItemAutoID = srp_erp_itemexceeded.exceededItemAutoID
	WHERE
		srp_erp_itemexceeded.itemAutoID IN (" . join(',', $item) . ")
		{$outlets}
		AND date_format( srp_erp_itemexceeded.documentDate, '%Y-%m-%d' ) <= '$datefromconvert'
		AND srp_erp_itemexceeded.companyID = $companyID $having
	) tbl
GROUP BY
	itemAutoID,
	warehouseAutoID

	";
        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_item_match_report()
    {
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $date = "";

        $qry = "SELECT
	srp_erp_itemexceededmatch.exceededMatchID,
	DATE_FORMAT(documentDate,'" . $convertFormat . "') AS documentDate,
	documentSystemCode,
	orginDocumentSystemCode,
	transactionCurrency,
	transactionCurrencyDecimalPlaces,
	IFNULL(excddtl.totalValue, 0) AS totalValue
FROM
	srp_erp_itemexceededmatch
LEFT JOIN (
	SELECT
		exceededMatchID,
		SUM(totalValue) AS totalValue
	FROM
		srp_erp_itemexceededmatchdetails
	GROUP BY
		exceededMatchID
) excddtl ON excddtl.exceededMatchID = srp_erp_itemexceededmatch.exceededMatchID
WHERE
	srp_erp_itemexceededmatch.documentDate BETWEEN '$datefromconvert'
AND '$datetoconvert'
AND srp_erp_itemexceededmatch.companyID = $companyID";


        $output = $this->db->query($qry)->result_array();
        //$this->db->query($qry)->result_array();
        return $output;

    }


    function get_item_match_detail_report($exceededMatchID)
    {
        $qry = "SELECT
	srp_erp_itemexceededmatchdetails.exceededMatchID,
	srp_erp_itemexceededmatchdetails.itemAutoID,
	srp_erp_itemmaster.itemSystemCode,
	srp_erp_itemmaster.itemName,
	TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((matchedQty), 4 )))))) AS matchedQty,
	itemCost,
srp_erp_warehousemaster.wareHouseLocation,
	totalValue,
	srp_erp_itemexceeded.documentSystemCode,
	srp_erp_itemexceededmatch.documentSystemCode as matchdocCode
FROM
	srp_erp_itemexceededmatchdetails
LEFT JOIN srp_erp_itemmaster ON srp_erp_itemexceededmatchdetails.itemAutoID = srp_erp_itemmaster.itemAutoID
LEFT JOIN srp_erp_itemexceededmatch ON srp_erp_itemexceededmatchdetails.exceededMatchID = srp_erp_itemexceededmatch.exceededMatchID
LEFT JOIN srp_erp_warehousemaster ON srp_erp_itemexceededmatchdetails.warehouseAutoID = srp_erp_warehousemaster.wareHouseAutoID
LEFT JOIN srp_erp_itemexceeded ON srp_erp_itemexceeded.exceededItemAutoID = srp_erp_itemexceededmatchdetails.exceededItemAutoID
WHERE
	srp_erp_itemexceededmatchdetails.exceededMatchID = $exceededMatchID";


        $output = $this->db->query($qry)->result_array();
        //$this->db->query($qry)->result_array();
        return $output;
    }
// Done stock_aging
    function stock_aging_detail($fieldName = Null)
    {
        $item = $this->input->post('itemTo');
        $warehouse = $this->input->post('warehouseid');
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $asofdate = $this->input->post('from');
        $datefromconvert = input_format_date($asofdate, $date_format_policy);
        $fields3 = " ";
        $fields4 = " ";
        $field5 = " ";
        $amout = " ";
        $field6 = "";
        $field7 = "";
        $field8 = "";
        $exchangerate_type = "";
        $aging = array("0-30", "31-60", "61-90", "91-120", "121-365", "366-730", "731");
        $agingcount = count($aging);
        $feilds = "";
        $feilds1 ="";
        $amountFiled ="";
        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }




        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/

            foreach ($fieldNameChk as $val) {
                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feilds .= 'ItemMaster.' . $val.',';
                    $feilds1 .= 'T1.' . $val.',';
                } /*else {
                    $feildsra[] = 'ItemLedger.' . $val;
                }*/
            }

            if (in_array("companyLocalAmount", $fieldNameChk)) {
                $field6 .= '(transactionAmount/companyLocalExchangeRate) * -1 as outamount';
                $field8 .= 'companyLocalAmount';
                $amountFiled .= '((IFNULL(SUM(companyLocalAmount),0))/(  IFNULL(SUM( IFNULL(transactionQty,0) / convertionRate ),0) ))  as wacamount1';
                $exchangerate_type .= 'companyLocalExchangeRate';

            }
            if (in_array("companyReportingAmount", $fieldNameChk)) {
                $field6 .= '(transactionAmount/companyReportingExchangeRate) * -1 as outamount ';
                //$field7 .= ' (((SUM(totQty))-totQtystock)* wacamount1) AS total';
                $field8 .= 'companyReportingAmount';
                $amountFiled .= '((IFNULL(SUM(companyReportingAmount),0))/(  IFNULL(SUM( IFNULL(transactionQty,0) / convertionRate ),0) ))  as wacamount1';
                $exchangerate_type .= 'companyReportingExchangeRate';
            }
            }
        /*$fieldNameChk_new = $this->input->post("fieldName");
        if ($fieldNameChk_new=='companyLocalAmount') {
            //((((SUM( totQty ))-(ifnull(totQtystock,0))) * companyLocalWacAmount)) AS total,
            // (((SUM(totQty))-(ifnull(totQtystock,0)))*(companyLocalWacAmount/companyReportingExchangeRate)) AS total,
            $field6 .= '(transactionAmount/companyLocalExchangeRate) * -1 as outamount';
            $field8 .= 'companyLocalAmount';
            $exchangerate_type .= 'companyLocalExchangeRate';
        } else {
            //$field5 .= 'wacamount1';
            $field6 .= '(transactionAmount/companyReportingExchangeRate) * -1 as outamount ';
            //$field7 .= ' (((SUM(totQty))-totQtystock)* wacamount1) AS total';
            $field8 .= 'companyReportingAmount';
            $exchangerate_type .= 'companyReportingExchangeRate';
        }*/
        $field5 .= 'wacamount1 as WacAmount';
        $field7 .= ' ((((SUM(IFNULL(totQty,0) ))- IFNULL(totQtystock,0)) * wacamount1)) AS total';

        foreach ($aging as $key => $val2) {
            $list = explode("-", $val2);
            //if ($fieldNameChk_new == 'companyLocalAmount') {
            if (in_array("companyLocalAmount", $fieldNameChk)) {
                if ($agingcount == ($key + 1)) {
                    $fields3 .= "SUM(if(stockage >= " . $list[0] . ",(totQty),0)) as `" . 'qtyaging' . $val2 . "`,";
                    $fields4 .= "SUM(if(stockage >= " . $list[0] . ",((totQty)* wacamount1),0)) as `" . 'valueaging' . $val2 . "`";
                } else {
                    $fields3 .= "SUM(if(stockage >= " . $list[0] . " AND stockage <= " . $list[1] . ",(totQty),0)) as `" . 'qtyaging' . $val2 . "`,";
                    $fields4 .= "SUM(if(stockage >= " . $list[0] . " AND stockage <= " . $list[1] . ",((totQty)* wacamount1),0)) as `" . 'valueaging' . $val2 . "`,";
                }
                //} else {
            }else if (in_array("companyReportingAmount", $fieldNameChk)) {
                if ($agingcount == ($key + 1)) {
                    $fields3 .= "SUM(if(stockage >= " . $list[0] . ",(totQty),0)) as `" . 'qtyaging' . $val2 . "`,";
                    $fields4 .= "SUM(if(stockage >= " . $list[0] . ",((totQty)* wacamount1),0)) as `" . 'valueaging' . $val2 . "`";
                } else {
                    $fields3 .= "SUM(if(stockage >= " . $list[0] . " AND stockage <= " . $list[1] . ",(totQty),0)) as `" . 'qtyaging' . $val2 . "`,";
                    $fields4 .= "SUM(if(stockage >= " . $list[0] . " AND stockage <= " . $list[1] . ",((totQty)* wacamount1),0)) as `" . 'valueaging' . $val2 . "`,";
                }
            }
        }
        $qry = "SELECT
    $feilds1
   companyID,
   companyCode,
   itemAutoID,
   itemSystemCode,
   itemDescription,
   unitOfMeasure,
   secondaryItemCode,
   UnitShortCode,
   mainCategory,
   subCategory,
   subsubCategory,
   TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM(totQty)), 4 )))))) AS totQty,
   TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND(( ifnull(totQtystock,0)), 4 )))))) AS outputtoalqty,

    $field5,
    $field7,
   $fields3
   $fields4
FROM
   (
SELECT
$feilds
ItemLedger.$field8,
ItemLedger.companyID,
ItemLedger.companyCode,
ItemLedger.itemAutoID,
ItemMaster.itemSystemCode,
ItemMaster.itemDescription,
ItemMaster.defaultUnitOfMeasure AS unitOfMeasure,
ItemMaster.seconeryItemCode AS secondaryItemCode,
unit.UnitShortCode,
transactionQty,
convertionRate,
ItemLedger.documentDate as documentDate,
ItemMaster.companyLocalWacAmount,
ItemMaster.companyReportingExchangeRate,
IFNULL( transactionQty / convertionRate, 0 ) AS totQty,
IFNULL( DATEDIFF('{$datefromconvert}', ItemLedger.documentDate ), 0 ) AS stockage,
ic1.description AS mainCategory,
ic2.description AS subCategory,
IFNULL( ic3.description, 'uncategorized' ) AS subsubCategory,
outputstock.totQtystock,
outputstock.outamount,
wacamount1
FROM
   srp_erp_itemledger ItemLedger
   INNER JOIN srp_erp_itemmaster ItemMaster ON ItemLedger.itemAutoID = ItemMaster.itemAutoID
   INNER JOIN srp_erp_unit_of_measure unit ON unit.UnitID = ItemMaster.defaultUnitOfMeasureID
   INNER JOIN ( SELECT description, itemCategoryID FROM srp_erp_itemcategory GROUP BY itemCategoryID ) AS `ic1` ON ( `ic1`.`itemCategoryID` = `ItemMaster`.`mainCategoryID` )
   INNER JOIN ( SELECT description, itemCategoryID FROM srp_erp_itemcategory GROUP BY itemCategoryID ) AS `ic2` ON ( `ic2`.`itemCategoryID` = `ItemMaster`.`subcategoryID` )
   LEFT JOIN (select itemAutoID,$amountFiled from srp_erp_itemledger where companyID = '{$companyID}' AND documentDate <= '{$datefromconvert}' AND srp_erp_itemledger.wareHouseAutoID IN (" . join(',', $warehouse) . ") GROUP BY itemAutoID) itemmastervalue on  itemmastervalue.itemAutoID = ItemMaster.itemAutoID
   LEFT JOIN ( SELECT IFNULL( description, 'uncategorized' ) AS description, itemCategoryID FROM srp_erp_itemcategory GROUP BY itemCategoryID ) AS `ic3` ON ( `ic3`.`itemCategoryID` = `ItemMaster`.`subSubCategoryID` )
    LEFT JOIN (SELECT itemAutoID, sum(transactionQty/convertionRate)*-1 as totQtystock,$field6 FROM srp_erp_itemledger WHERE companyID = $companyID  AND transactionQTY < 0 AND documentDate <=  '{$datefromconvert}' AND wareHouseAutoID IN  (" . join(',', $warehouse) . ")
    GROUP BY itemAutoID) As outputstock on outputstock.itemAutoID = ItemMaster.itemAutoID WHERE ItemLedger.itemAutoID IN (" . join(',', $item) . ") AND ItemLedger.wareHouseAutoID IN (" . join(',', $warehouse) . ")
   AND ItemLedger.companyID = '{$companyID}'  AND transactionQTY>0 AND documentDate <= '{$datefromconvert}') T1 GROUP BY itemAutoID";
        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_warehouse_stock_aging()
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_warehousemaster');
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->where_in('wareHouseAutoID', $this->input->post('warehouseid[]'));
        $result = $this->db->get()->result_array();
        $result = array_column($result, 'wareHouseLocation');
        return $result;
    }

    function stock_aging_detail_output()
    {
        $item = $this->input->post('itemTo');
        $date_format_policy = date_format_policy();
        $asofdate = $this->input->post('from');
        $datefromconvert = input_format_date($asofdate, $date_format_policy);
        $companyID = current_companyID();

        $qry = "SELECT
  itemAutoID,
 TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( transactionQty / convertionRate)), 4 )))))) *-1 as totQty
FROM
    srp_erp_itemledger
WHERE
        companyID = '{$companyID}'
        AND documentDate <= '{$datefromconvert}'
        AND transactionQTY < 0
		AND itemAutoID IN (" . join(',', $item) . ")
GROUP BY
    itemAutoID";

        $output = $this->db->query($qry)->result_array();
        return $output;
    }


    function get_accounts_receivable_customer_receipt_statement_report($overdue = false)
    {

        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        /* Acknowledgement Group by based on Policy - */
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $segment = $this->input->post("location");
        $segmentQuery = "";

        $segmentQuery1 = "";
        $segmentQuery2 = "";

        $segmentQuery3 = "";
        $segmentQuery4 = "";
        $segmentQuery5 = "";
        $segmentQuery6 = "";
        if ($segment) {
            
            $segmentQuery = "AND srp_erp_customerinvoicemaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery1 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery2 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery3 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery4 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery5 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery6 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields9 = "";
        $fields11 = "";
        $retentionamount = "";
        $fieldrebate = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount.' - ' . $fieldrebate .')) as ' . $val . ', (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)) as receiptAmount,';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ', 0 as receiptAmount,';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ', 0 as receiptAmount,';
                $fields11 .= ' 0 as receiptAmount,';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.receiptAmount, a.invoiceAutoID,a.document,a.VatNO,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.vatIdNo as VatNO,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,		srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery2 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery3 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)

LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	 AND `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "'

	 GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.vatIdNo as VatNO,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 '-' as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE
		  `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "'
		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery1 AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` HAVING (" . join(' AND ', $having) . ")
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.vatIdNo as VatNO,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL $segmentQuery6
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE 
    `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery4 AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)
	UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
    srp_erp_customermaster.vatIdNo as VatNO,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment` AS comments,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` 
    LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId 
     WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 $segmentQuery5  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)
	$fields7) as a
	  $where $fields7")->result_array();
//        GROUP BY invoiceAutoID
        //echo $this->db->last_query();
        return $result;
    }


    function get_accounts_receivable_customer_receipt_statement_report_postdated($overdue = false)
    {
        $where = "";
        $companyID = current_companyID();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        $segment = $this->input->post("location");
        $segmentQuery = "";

        $segmentQuery1 = "";
        $segmentQuery2 = "";

        $segmentQuery3 = "";
        $segmentQuery4 = "";
        $segmentQuery5 = "";
        $segmentQuery6 = "";
        $segmentQuery7 = "";

        $segmentQuery8 = "";
        if ($segment) {
            
            $segmentQuery = "AND srp_erp_customerinvoicemaster.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery1 = "AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery2 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery3 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery4 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery5 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ") AND srp_erp_customerreceiptmaster.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery6 = "AND srp_erp_customerreceiptdetail.segmentID IN(" . join(',', $segment) . ")";
            $segmentQuery7 = "AND receiptmastertbl.segmentID IN(" . join(',', $segment) . ")";

            $segmentQuery8 = "AND srp_erp_creditnotedetail.segmentID IN(" . join(',', $segment) . ")";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields9 = "";
        $fields11 = "";
        $retentionamount = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY age DESC";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                }

                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ')-'.$retentionamount.') as  ' . $val . ', (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)) as receiptAmount,';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ', 0 as receiptAmount,';
                /*$fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';*/
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ', 0 as receiptAmount,';
                $fields11 .= ' 0 as receiptAmount,';
                //$fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.receiptAmount,a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.VatNO,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,'1' as type,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.vatIdNo as VatNO,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery2 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery3 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)

LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.vatIdNo as VatNO,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 '-' as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
	    INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	    WHERE
	    `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "'
		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR $segmentQuery1 AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.vatIdNo as VatNO,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo 
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL $segmentQuery8
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " $segmentQuery4 AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)
		UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
    srp_erp_customermaster.vatIdNo as VatNO,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment` AS comments,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  
    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 $segmentQuery5  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();


        $postdatedcheque = $this->db->query("SELECT
	$fields_postdated
	$fields_postdated_cheque_tot
	receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
	doccode.document AS document,
	\"-\" as age,
	\"-\" as invoiceDueDate,
	customermaster.customerAddress1,
	customermaster.customerName,
    srp_erp_customermaster.vatIdNo as VatNO,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration as comments,
	receiptmastertbl.documentID as documentID,
	DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode as bookingInvCode,
	receiptmastertbl.customerID,
	'2' as type,
	'-' as referenceNo
FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\" $segmentQuery6
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SLR\" $segmentQuery6
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
	$customerORout
	AND receiptmastertbl.companyID = '{$companyID}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1 $segmentQuery7
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId")->result_array();

        //echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));
    }

    function get_item_below_stock_ro_report($fieldNameChk1, $fieldName = NULL )
    {

        $feilds = array();
        $feilds2 = array();
        $feilds3 = array();
        $feildsra = array();
        $feilds1 = "";
        $items = $this->input->post("itemTo");
        $i = 1;
        $fieldHaving = " ";
        $itmesOR = '( ';
        if (!empty($items)) {
            foreach ($items as $item_val) {
                if ($i != 1) {
                    $itmesOR .= ' OR ';
                }
                $itmesOR .= " srp_erp_itemmaster.itemAutoID = '" . $item_val . "' "; /*generate the query according to selectd items*/
                $i++;
            }
        }
        $itmesOR .= ' ) ';

        if($fieldName) {
            $fieldNameChk = $fieldName;
        } else {
            $fieldNameChk = $this->input->post("fieldNameChk");
        }
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == "barcode" || $val == "partNo" || $val == "seconeryItemCode") {
                    $feildsra[]= 'srp_erp_itemmaster.' . $val;
                }
            }
            $feilds1 = join(',', $feildsra);
            if (!empty($feilds1)){
                $feilds1 = $feilds1. ",";
            }
        }

        $warehouse = load_location_drop();
        if (isset($warehouse)) {
            foreach ($warehouse as $val) {
                $feilds[] = "if(wareHouseAutoID = " . $val["wareHouseAutoID"] . ",IFNULL(SUM(transactionQTY/convertionRate),0),0) as `" . $val["wareHouseCode"] . "`";
                $feilds2[] = "IFNULL(SUM(il.`" . $val["wareHouseCode"] . "`),0) as `" . $val["wareHouseCode"] . "`";
                $feilds3[] = " TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((IFNULL(SUM( il.`" . $val["wareHouseCode"] . "` ),0)), 4 ))))))";
            }
        }

        if ($fieldNameChk1 == 'itembelowstock') {
            $fieldHaving = 'HAVING total < minimumQty';//AND minimumQty > 0
        } else if ($fieldNameChk1 == 'itembelowro') {
            $fieldHaving = 'HAVING total < reorderPoint';//AND reorderPoint > 0
        }


        $result = $this->db->query("SELECT $feilds1 itemSystemCode,seconeryItemCode,itemDescription,defaultUnitOfMeasure," . join(',', $feilds2) . ",(" . join('+', $feilds3) . ") as total,IFNULL(poCurrentStock,0) as poCurrentStock,IFNULL(coCurrentStock,0) as coCurrentStock,(IFNULL(ugrvCurrentStock,0) + IFNULL(usrCurrentStock,0) + IFNULL(umiCurrentStock,0)  + IFNULL(usaCurrentStock,0) + IFNULL(upvCurrentStock,0) + IFNULL(ucinvCurrentStock,0) + IFNULL(urvCurrentStock,0)) as unapprovedDoc,ic1.description as mainCategory,ic2.description as subCategory,IFNULL(ic3.description,'uncategorized') AS subsubCategory,srp_erp_itemmaster.itemAutoID,((" . join('+', $feilds3) . ")+IFNULL(poCurrentStock,0)+(IFNULL(ugrvCurrentStock,0) + IFNULL(usrCurrentStock,0) + IFNULL(umiCurrentStock,0)  + IFNULL(usaCurrentStock,0) + IFNULL(upvCurrentStock,0) + IFNULL(ucinvCurrentStock,0) + IFNULL(urvCurrentStock,0))- IFNULL(coCurrentStock, 0)) as netStock,TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM ((ROUND((SUM( minimumQty )), 4 )))))) AS minimumQty,srp_erp_itemmaster.reorderPoint FROM srp_erp_itemmaster
        LEFT JOIN (SELECT wareHouseAutoID,itemAutoID," . join(',', $feilds) . " FROM srp_erp_itemledger WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY wareHouseAutoID,itemAutoID) il ON (il.itemAutoID = srp_erp_itemmaster.itemAutoID)
         LEFT JOIN (
         SELECT
	SUM(sub.poCurrentStock) as poCurrentStock,sub.itemAutoID
FROM
	(
		SELECT
			IF (
		(
			SUM(
				requestedQty / conversionRateUOM
			) - (
				IFNULL(grv.grvCurrentStock, 0) + IFNULL(bsi.bsiCurrentStock, 0)
			)
		) < 0,
		0,
		(
			SUM(
				requestedQty / conversionRateUOM
			) - (
				IFNULL(grv.grvCurrentStock, 0) + IFNULL(bsi.bsiCurrentStock, 0)
			)
		)
	) AS poCurrentStock,
			srp_erp_purchaseorderdetails.itemAutoID
		FROM
			srp_erp_purchaseorderdetails
		INNER JOIN srp_erp_purchaseordermaster ON srp_erp_purchaseorderdetails.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID
		AND srp_erp_purchaseordermaster.approvedYN = 1
		AND srp_erp_purchaseordermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				SUM(
					receivedQty / conversionRateUOM
				) AS grvCurrentStock,
				srp_erp_grvdetails.purchaseOrderDetailsID,
				itemAutoID
			FROM
				srp_erp_grvdetails
			INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID
			AND srp_erp_grvmaster.approvedYN = 1
			AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			INNER JOIN srp_erp_purchaseordermaster ON srp_erp_grvdetails.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
			AND srp_erp_purchaseordermaster.approvedYN = 1
			WHERE
				srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . "
			AND (
				purchaseOrderDetailsID != 0
				AND purchaseOrderDetailsID IS NOT NULL
			)
			GROUP BY
				srp_erp_grvdetails.itemAutoID,
				srp_erp_grvdetails.purchaseOrderDetailsID
		) grv ON (
			srp_erp_purchaseorderdetails.itemAutoID = grv.itemAutoID
			AND srp_erp_purchaseorderdetails.purchaseOrderDetailsID = grv.purchaseOrderDetailsID
		)
		LEFT JOIN (
			SELECT
				SUM(
					requestedQty / srp_erp_paysupplierinvoicedetail.conversionRateUOMID
				) AS bsiCurrentStock,
				srp_erp_paysupplierinvoicedetail.purchaseOrderDetailsID,
				itemAutoID
			FROM
				srp_erp_paysupplierinvoicedetail
			INNER JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicedetail.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
			AND srp_erp_paysupplierinvoicemaster.approvedYN = 1
			AND srp_erp_paysupplierinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			INNER JOIN srp_erp_purchaseordermaster ON srp_erp_paysupplierinvoicedetail.purchaseOrderMastertID = srp_erp_purchaseordermaster.purchaseOrderID
			AND srp_erp_purchaseordermaster.approvedYN = 1
			WHERE
				srp_erp_paysupplierinvoicedetail.companyID = " . $this->common_data['company_data']['company_id'] . "
			AND (
				purchaseOrderDetailsID != 0
				AND purchaseOrderDetailsID IS NOT NULL
			)
			GROUP BY
				srp_erp_paysupplierinvoicedetail.itemAutoID,
				srp_erp_paysupplierinvoicedetail.purchaseOrderDetailsID
		) bsi ON (
			srp_erp_purchaseorderdetails.itemAutoID = bsi.itemAutoID
			AND srp_erp_purchaseorderdetails.purchaseOrderDetailsID = bsi.purchaseOrderDetailsID
		)
		WHERE
			srp_erp_purchaseorderdetails.companyID = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			srp_erp_purchaseorderdetails.purchaseOrderDetailsID,srp_erp_purchaseorderdetails.itemAutoID
	) sub
GROUP BY
	sub.itemAutoID) po ON (po.itemAutoID = srp_erp_itemmaster.itemAutoID)
         LEFT JOIN (
         SELECT (SUM(requestedQty/conversionRateUOM) + IFNULL(cinv.cinvCurrentStock,0)) as coCurrentStock,srp_erp_contractdetails.itemAutoID FROM srp_erp_contractdetails
         INNER JOIN srp_erp_contractmaster ON srp_erp_contractdetails.contractAutoID = srp_erp_contractmaster.contractAutoID AND srp_erp_contractmaster.approvedYN = 1 AND srp_erp_contractmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
         LEFT JOIN (SELECT SUM(requestedQty/conversionRateUOM) * -1 as cinvCurrentStock,srp_erp_customerinvoicedetails.contractDetailsAutoID,itemAutoID FROM srp_erp_customerinvoicedetails
            INNER JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID AND srp_erp_customerinvoicemaster.approvedYN = 1 AND srp_erp_customerinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerinvoicedetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.invoiceType='Sales Order' GROUP BY srp_erp_customerinvoicedetails.itemAutoID
            ) cinv ON (srp_erp_contractdetails.itemAutoID = cinv.itemAutoID)
         WHERE srp_erp_contractdetails.companyID = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_contractmaster.documentID = 'SO' GROUP BY srp_erp_contractdetails.itemAutoID) co ON (co.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(receivedQty/conversionRateUOM),0) as ugrvCurrentStock,srp_erp_grvdetails.itemAutoID FROM srp_erp_grvdetails
            INNER JOIN srp_erp_grvmaster ON srp_erp_grvdetails.grvAutoID = srp_erp_grvmaster.grvAutoID AND srp_erp_grvmaster.approvedYN = 0 AND srp_erp_grvmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_grvdetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_grvdetails.itemAutoID) ugrv ON (ugrv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(return_Qty/conversionRateUOM),0) * -1 as usrCurrentStock,srp_erp_stockreturndetails.itemAutoID FROM srp_erp_stockreturndetails
            INNER JOIN srp_erp_stockreturnmaster ON srp_erp_stockreturndetails.stockReturnAutoID = srp_erp_stockreturnmaster.stockReturnAutoID AND srp_erp_stockreturnmaster.approvedYN = 0 AND srp_erp_stockreturnmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stockreturndetails.itemAutoID) usr ON (usr.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(qtyissued/conversionRateUOM),0)*-1 as umiCurrentStock,srp_erp_itemissuedetails.itemAutoID FROM srp_erp_itemissuedetails
            INNER JOIN srp_erp_itemissuemaster ON srp_erp_itemissuedetails.itemIssueAutoID = srp_erp_itemissuemaster.itemIssueAutoID AND srp_erp_itemissuemaster.approvedYN = 0 AND srp_erp_itemissuemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_itemissuedetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_itemissuedetails.itemAutoID) umi ON (umi.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(transfer_QTY/conversionRateUOM),0) as ustCurrentStock,srp_erp_stocktransferdetails.itemAutoID FROM srp_erp_stocktransferdetails
            INNER JOIN srp_erp_stocktransfermaster ON srp_erp_stocktransferdetails.stockTransferAutoID = srp_erp_stocktransfermaster.stockTransferAutoID AND srp_erp_stocktransfermaster.approvedYN = 0 AND srp_erp_stocktransfermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stocktransferdetails.itemAutoID) ust ON (ust.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(adjustmentWareHouseStock/conversionRateUOM),0) as usaCurrentStock,srp_erp_stockadjustmentdetails.itemAutoID FROM srp_erp_stockadjustmentdetails
            INNER JOIN srp_erp_stockadjustmentmaster ON srp_erp_stockadjustmentdetails.stockAdjustmentAutoID = srp_erp_stockadjustmentmaster.stockAdjustmentAutoID AND srp_erp_stockadjustmentmaster.approvedYN = 0 AND srp_erp_stockadjustmentmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            GROUP BY  srp_erp_stockadjustmentdetails.itemAutoID) usa ON (usa.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) as upvCurrentStock,srp_erp_paymentvoucherdetail.itemAutoID FROM srp_erp_paymentvoucherdetail
            INNER JOIN srp_erp_paymentvouchermaster ON srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId AND srp_erp_paymentvouchermaster.approvedYN = 0 AND srp_erp_paymentvouchermaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_paymentvoucherdetail.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_paymentvoucherdetail.itemAutoID) upv ON (upv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0)*-1 as ucinvCurrentStock,srp_erp_customerinvoicedetails.itemAutoID FROM srp_erp_customerinvoicedetails
            INNER JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID AND srp_erp_customerinvoicemaster.approvedYN = 0 AND srp_erp_customerinvoicemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerinvoicedetails.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_customerinvoicedetails.itemAutoID) ucinv ON (ucinv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN (SELECT IFNULL(SUM(requestedQty/conversionRateUOM),0) * -1 as urvCurrentStock,srp_erp_customerreceiptdetail.itemAutoID FROM srp_erp_customerreceiptdetail
            INNER JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId AND srp_erp_customerreceiptmaster.approvedYN = 0 AND srp_erp_customerreceiptmaster.companyID = " . $this->common_data['company_data']['company_id'] . "
            WHERE srp_erp_customerreceiptdetail.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY  srp_erp_customerreceiptdetail.itemAutoID) urv ON (urv.itemAutoID = srp_erp_itemmaster.itemAutoID)

         LEFT JOIN
    (SELECT
        description, itemCategoryID
    FROM
        srp_erp_itemcategory GROUP BY itemCategoryID) AS `ic1` ON (`ic1`.`itemCategoryID` = `srp_erp_itemmaster`.`mainCategoryID`)
        LEFT JOIN
    (SELECT
        description, itemCategoryID
    FROM
        srp_erp_itemcategory GROUP BY itemCategoryID) AS `ic2` ON (`ic2`.`itemCategoryID` = `srp_erp_itemmaster`.`subcategoryID`)
        LEFT JOIN
		 (SELECT
		IFNULL(description,'uncategorized') as description,
		itemCategoryID
	FROM
		srp_erp_itemcategory
	GROUP BY
		itemCategoryID) AS `ic3` ON (`ic3`.`itemCategoryID` = `srp_erp_itemmaster`.`subSubCategoryID`)
        WHERE srp_erp_itemmaster.maincategory =  'Inventory' AND srp_erp_itemmaster.companyID = " . $this->common_data['company_data']['company_id'] . " AND $itmesOR
        GROUP BY srp_erp_itemmaster.itemAutoID $fieldHaving")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_group_segment()
    {
        $segment = $this->input->post('segment');
        $companyid = current_companyID();
        $result = $this->db->query("SELECT
	srp_erp_groupsegment.description
FROM
	`srp_erp_groupsegment`
	INNER JOIN srp_erp_groupsegmentdetails on srp_erp_groupsegmentdetails.groupSegmentID = srp_erp_groupsegment.segmentID
	LEFT JOIN srp_erp_segment on srp_erp_segment.segmentID =srp_erp_groupsegment.segmentID
WHERE
	groupID = $companyid
	AND srp_erp_segment.segmentID IN (" . join(',', $segment) . ")
    	GROUP BY
	srp_erp_groupsegment.segmentID ")->result_array();
        $result = array_column($result, 'description');
        return $result;
    }


    /* Customer Statement, Customer Aging Details, Customer Aging Summary Reports Customized for haira
            */

   /* Query change and added some new fields to AR_CS,AR_CAD,AR_CAS */
    function get_accounts_receivable_customer_statement_report_buyback($overdue = false)
    {
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM((ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty)) - IFNULL(( cvd.transactionAmount ), 0 )) *-1 AS ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM((ROUND(((salesPrice/srp_erp_salesreturnmaster.companyReportingExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyReportingExchangeRate)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty)) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM((ROUND(((salesPrice/srp_erp_salesreturnmaster.companyLocalExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyLocalExchangeRate)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty)) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'TRIM(TRAILING '.' FROM (TRIM(TRAILING 0 FROM (ROUND( a.' . $val . ', 2 ))))) as ' . $val . ',';
                $fields3 .= 'ROUND(a.' . $val . ', a.' . $val . 'DecimalPlaces) AS rowCheck,';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,		srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)



LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
    AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
	GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE
		`srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'

		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` HAVING (" . join(' AND ', $having) . ")
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
    LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID  AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
	LEFT JOIN (
            SELECT $fields4 creditNoteAutoID
            FROM
                `srp_erp_customerreceiptdetail`
            LEFT JOIN
                srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
            WHERE
                `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                AND srp_erp_customerreceiptmaster.approvedYN = 1
                AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                AND type = 'SLR'
            GROUP BY
                creditNoteAutoID
	) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_receivable_customer_statement_report_postdated_buyback($overdue = false)
    {
        $where = "";
        $companyID = current_companyID();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $having_field = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL(( cvd.transactionAmount ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyReportingExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyReportingExchangeRate)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyLocalExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyLocalExchangeRate)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                $having_field  = 'HAVING ( ROUND('.$val.',2)!= 0 AND ROUND('.$val.',2)!=-0)';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,'1' as type,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)

/*LEFT JOIN (
SELECT
    $fields9
    invoiceAutoID,
    srp_erp_salesreturndetails.salesReturnAutoID
FROM
    srp_erp_salesreturndetails
INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
WHERE
    `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
GROUP BY
    srp_erp_salesreturndetails.invoiceAutoID
) srnd ON (
srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)*/

LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
    AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
	GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
    AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'

		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 ) UNION ALL
 ( SELECT
$fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
$fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
    LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
	LEFT JOIN (
            SELECT $fields4 creditNoteAutoID
            FROM
                `srp_erp_customerreceiptdetail`
            LEFT JOIN
                srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
            WHERE
                `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                AND srp_erp_customerreceiptmaster.approvedYN = 1
                AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                AND type = 'SLR'
            GROUP BY
                creditNoteAutoID
	) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $having_field $fields7")->result_array();
        //echo $this->db->last_query(); exit;

        $postdatedcheque = $this->db->query("SELECT
	$fields_postdated
	$fields_postdated_cheque_tot
	receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
	doccode.document AS document,
	\"-\" as age,
	\"-\" as invoiceDueDate,
	customermaster.customerAddress1,
	customermaster.customerName,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration as comments,
	receiptmastertbl.documentID as documentID,
	DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode as bookingInvCode,
	receiptmastertbl.customerID,
	'2' as type,
	'-' as referenceNo
FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
	$customerORout
	AND receiptmastertbl.companyID = '{$companyID}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId")->result_array();

        //echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));
    }

    function get_accounts_receivable_customer_aging_summary_report_buyback_old()
    {
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(rvd.' . $val . '),0)) * -1 as ' . $val . ',';


                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL((srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }

        $result = $this->db->query("SELECT $fields3 a.customerName,a.customerSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID FROM
((SELECT $fields srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,`srp_erp_customerinvoicemaster`.`customerID` as customerID FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`customerID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_customerreceiptmaster.documentID,srp_erp_customerreceiptmaster.RVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerreceiptmaster.RVCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,`srp_erp_customerreceiptmaster`.`customerID` as customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))
 UNION ALL
	(
		SELECT
			$fields8 srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_creditnotemaster.comments,
			srp_erp_creditnotemaster.documentID,
			srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
			DATEDIFF(
				'" . format_date($this->input->post("from")) . "',
				srp_erp_creditnotemaster.`creditNoteDate`
			) AS age,
			`srp_erp_creditnotemaster`.`customerID` AS customerID
		FROM
			srp_erp_creditnotemaster
		INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
		AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL
		AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				$fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
			    AND type = 'creditnote'
			GROUP BY
				receiptVoucherAutoId
		) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
		LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
		AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
		AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CR ON (
			CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CL ON (
			CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) TC ON (
			TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID
		)
		WHERE
			$customerOR
		AND `srp_erp_creditnotemaster`.`approvedYN` = 1
		AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
		AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_creditnotemaster`.`customerID`,
			`srp_erp_creditnotemaster`.`creditNoteDate`
		HAVING
			(
				" . join(' AND ', $having) . "
			)
	)

	UNION ALL
	(
		SELECT
			$fields11 srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_salesreturnmaster.comment,
			srp_erp_salesreturnmaster.documentID,
			srp_erp_salesreturnmaster.returnDate AS bookingDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
			DATEDIFF(
				'" . format_date($this->input->post("from")) . "',
				srp_erp_salesreturnmaster.`returnDate`
			) AS age,
			`srp_erp_salesreturnmaster`.`customerID` AS customerID
		FROM
			srp_erp_salesreturnmaster
		INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.itemAutoID = srp_erp_customerinvoicedetails.itemAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
		LEFT JOIN (
			SELECT
				$fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
			    AND type = 'SLR'
			GROUP BY
				receiptVoucherAutoId
		) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
		AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
		AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CR ON (
			CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CL ON (
			CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) TC ON (
			TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID
		)
		WHERE
			$customerOR
		AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
		AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
		AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_salesreturnmaster`.`customerID`,
			`srp_erp_salesreturnmaster`.`returnDate`
		HAVING
			(
				" . join(' AND ', $having) . "
			)
	)

) AS a
GROUP BY
	a.customerSystemCode $groupByExplode
 ")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_summary_report_buyback()
    {

            $customer = $this->input->post("customerTo");
            $companyid = current_companyID();
            $i = 1;
            $customerOR = '(';
            if (!empty($customer)) { /*generate the query according to selected customer*/
                foreach ($customer as $customer_val) {
                    if ($i != 1) {
                        $customerOR .= ' OR ';
                    }
                    $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                    $i++;
                }
            }
            $customerOR .= ')';


            $k = 1;
            $customerORoutput = '(';
            if (!empty($customer)) { /*generate the query according to selected customer*/
                foreach ($customer as $customer_val) {
                    if ($k != 1) {
                        $customerORoutput .= ' OR ';
                    }
                    $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                    $k++;
                }
            }
            $customerORoutput .= ')';


            $aging = array();
            $interval = $this->input->post("interval");
            $through = $this->input->post("through");
            $z = 1;
            for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
                if ($z == 1) {
                    $aging[] = $z . "-" . $interval;
                } else {
                    if (($i + $interval) > $through) {
                        $aging[] = ($i + 1) . "-" . ($through);
                        $i += $interval;
                    } else {
                        $aging[] = ($i + 1) . "-" . ($i + $interval);
                        $i += $interval;
                    }

                }
            }
            $aging[] = "> " . ($through);

            $fields = "";
            $fields_currency = "";
            $fields_currency_decimal = "";
            $fields_currency_amt = "";
            $fields3 = "";
            $fields3_details = "";
            $curre = "";
            $fields3_pdc_new_qu = "";
            $fields3_pdc_total = "";
            $pdc_total_code = "";
            $fields4 = "";
            $fields5 = "";
            $fields6 = "";
            $fields2 = "";
            $fields8 = "";
            $fields9 = "";
            $fields10 = "";
            $fields11 = "";
            $having = array();
            $fields3_age = "";

            $groupBy = array();
            $fieldNameChk = $this->input->post("fieldNameChk");
            if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                foreach ($fieldNameChk as $val) {
                    if ($val == 'companyReportingAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields_currency .= 'CR.CurrencyCode';
                        $fields_currency_decimal .= 'CR.DecimalPlaces';
                        $fields_currency_amt .= 'companyReportingAmount';
                        $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                        $pdc_total_code .= 'companyReportingAmountPDC';
                        $curre .= 'companyReportingCurrency';

                        $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    } else if ($val == 'companyLocalAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                        $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                        $fields_currency .= 'CL.CurrencyCode';
                        $fields_currency_decimal .= 'CL.DecimalPlaces';
                        $fields_currency_amt .= 'companyLocalAmount';

                        $curre .= 'companyLocalCurrency';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';

                        $pdc_total_code .= 'companyLocalAmountPDC';

                        $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    } else if ($val == 'customerCurrencyAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                        $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                        $groupBy[] = $val . 'currency';
                    } else if ($val == 'transactionAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                        $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                        $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                        $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                        $groupBy[] = $val . 'currency';
                        $fields_currency .= 'TC.CurrencyCode';
                        $fields_currency_decimal .= 'TC.DecimalPlaces';
                        $fields_currency_amt .= 'transactionAmount';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';

                        $pdc_total_code .= 'transactionAmountPDC';

                        $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                        $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    }
                    $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                    $fields7 = $val . ' > 0';
                    if (!empty($aging)) { /*calculate aging range in query*/
                        $count = count($aging);
                        $c = 1;
                        foreach ($aging as $val2) {
                            if ($count == $c) {
                                $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";


                                $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            } else {
                                $list = explode("-", $val2);
                                $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                                //$fields3_details .= "0 as `" . $val2 . "`,";
                                $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            }
                            $c++;
                        }
                    }
                    $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
                    $fields3 .= "a.age as `age`,";
                    $fields3_details .= "0 as `age`,";
                    $fields3_pdc_new_qu .= " `current`,";
                }
            }
            $groupByExplode = "";
            if ($groupBy) {
                $groupByExplode = "," . join(',', $groupBy);
            }

            $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $pdc_total_code,referenceNo,invoiceDueDate,a.customerID FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,`srp_erp_customerinvoicemaster`.`customerID` AS customerID  FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
		AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)

LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
    AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
	GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` AS customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields8
`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
srp_erp_creditnotemaster.creditNoteCode AS documentCode,
					srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_creditnotemaster`.`customerID` AS customerID
  FROM srp_erp_creditnotemaster
INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote' 	AND srp_erp_customerreceiptmaster.approvedYN = 1
AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'   GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields11
`srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
					srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,	`srp_erp_salesreturnmaster`.`customerID` AS customerID
  FROM srp_erp_salesreturnmaster
INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
			LEFT JOIN (
			SELECT
				$fields9
				srp_erp_customerreceiptdetail.receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
				AND type = 'SLR'
			GROUP BY
				creditNoteAutoID
         ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
)


) as a GROUP BY a.documentCode) as tbl1
	GROUP BY
    tbl1.invoiceAutoID,tbl1.DocumentCode) t2
    GROUP BY
    t2.customerSystemCode,
	t2.currency")->result_array();
            //echo $this->db->last_query();
            return $result;


    }

    function get_accounts_receivable_customer_aging_summary_report_pdc_buyback_old()
{
    $customer = $this->input->post("customerTo");
    $companyid = current_companyID();
    $i = 1;
    $customerOR = '(';
    if (!empty($customer)) { /*generate the query according to selected customer*/
        foreach ($customer as $customer_val) {
            if ($i != 1) {
                $customerOR .= ' OR ';
            }
            $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
            $i++;
        }
    }
    $customerOR .= ')';


    $k = 1;
    $customerORoutput = '(';
    if (!empty($customer)) { /*generate the query according to selected customer*/
        foreach ($customer as $customer_val) {
            if ($k != 1) {
                $customerORoutput .= ' OR ';
            }
            $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
            $k++;
        }
    }
    $customerORoutput .= ')';


    $aging = array();
    $interval = $this->input->post("interval");
    $through = $this->input->post("through");
    $z = 1;
    for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
        if ($z == 1) {
            $aging[] = $z . "-" . $interval;
        } else {
            if (($i + $interval) > $through) {
                $aging[] = ($i + 1) . "-" . ($through);
                $i += $interval;
            } else {
                $aging[] = ($i + 1) . "-" . ($i + $interval);
                $i += $interval;
            }

        }
    }
    $aging[] = "> " . ($through);

    $fields = "";
    $fields_currency = "";
    $fields_currency_decimal = "";
    $fields_currency_amt = "";
    $fields3 = "";
    $fields3_details = "";
    $curre = "";
    $fields3_pdc_new_qu = "";
    $fields3_pdc_total = "";
    $pdc_total_code = "";
    $fields4 = "";
    $fields5 = "";
    $fields6 = "";
    $fields2 = "";
    $fields8 = "";
    $fields9 = "";
    $fields10 = "";
    $fields11 = "";
    $having = array();
    $groupBy = array();
    $fieldNameChk = $this->input->post("fieldNameChk");
    if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
        foreach ($fieldNameChk as $val) {
            if ($val == 'companyReportingAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields_currency .= 'CR.CurrencyCode';
                $fields_currency_decimal .= 'CR.DecimalPlaces';
                $fields_currency_amt .= 'companyReportingAmount';
                $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                $pdc_total_code .= 'companyReportingAmountPDC';
                $curre .= 'companyReportingCurrency';

                $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields11 .= '((ROUND(SUM(salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
            } else if ($val == 'companyLocalAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                $fields_currency .= 'CL.CurrencyCode';
                $fields_currency_decimal .= 'CL.DecimalPlaces';
                $fields_currency_amt .= 'companyLocalAmount';

                $curre .= 'companyLocalCurrency';
                $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';

                $pdc_total_code .= 'companyLocalAmountPDC';

                $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields11 .= '((ROUND(SUM(salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
            } else if ($val == 'customerCurrencyAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                $groupBy[] = $val . 'currency';
            } else if ($val == 'transactionAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                $groupBy[] = $val . 'currency';
                $fields_currency .= 'TC.CurrencyCode';
                $fields_currency_decimal .= 'TC.DecimalPlaces';
                $fields_currency_amt .= 'transactionAmount';
                $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';

                $pdc_total_code .= 'transactionAmountPDC';

                $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                $fields11 .= '((ROUND(SUM(salesPrice + ((totalAfterTax/requestedQty) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
            }
            $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
            $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
            $fields3 .= 'a.' . $val . 'currency as currency,';
            $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
            $fields3 .= 'a.' . $val . ' as ' . $val . ',';
            $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
            $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
            $having[] = $val . '!= 0';
            $fields7 = $val . ' > 0';
            if (!empty($aging)) { /*calculate aging range in query*/
                $count = count($aging);
                $c = 1;
                foreach ($aging as $val2) {
                    if ($count == $c) {
                        $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        $fields3_details .= "0 as `" . $val2 . "`,";
                        $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                    } else {
                        $list = explode("-", $val2);
                        $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        $fields3_details .= "0 as `" . $val2 . "`,";
                        $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                    }
                    $c++;
                }
            }
            $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
            $fields3_details .= "0 as `current`,";
            $fields3_pdc_new_qu .= " `current`,";
        }
    }
    $groupByExplode = "";
    if ($groupBy) {
        $groupByExplode = "," . join(',', $groupBy);
    }

    $result = $this->db->query("Select currency,DecimalPlaces,$fields_currency_amt,$fields3_pdc_new_qu customerName,customerSystemCode,comments,documentID,bookingDate,GLSecondaryCode,GLDescription,bookingInvCode,customerID,SUM($pdc_total_code) as $pdc_total_code From (SELECT $fields3 a.customerName,a.customerSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,0 AS $pdc_total_code FROM
((SELECT $fields srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,`srp_erp_customerinvoicemaster`.`customerID` as customerID FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)

/*LEFT JOIN (
SELECT
    $fields10
    invoiceAutoID,
    srp_erp_salesreturndetails.salesReturnAutoID
FROM
    srp_erp_salesreturndetails
INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
WHERE
    `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
GROUP BY
    srp_erp_salesreturndetails.invoiceAutoID
) srnd ON (
srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)*/
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`customerID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_customerreceiptmaster.documentID,srp_erp_customerreceiptmaster.RVDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerreceiptmaster.RVCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,`srp_erp_customerreceiptmaster`.`customerID` as customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

 UNION ALL
	(
		SELECT
			$fields8 srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_creditnotemaster.comments,
			srp_erp_creditnotemaster.documentID,
			srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
			DATEDIFF(
				'" . format_date($this->input->post("from")) . "',
				srp_erp_creditnotemaster.`creditNoteDate`
			) AS age,
			`srp_erp_creditnotemaster`.`customerID` AS customerID
		FROM
			srp_erp_creditnotemaster
		INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
		AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL
		AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				$fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
	            AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
			AND type = 'creditnote'
			GROUP BY
				creditNoteAutoID
		) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
		LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
		AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
		AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CR ON (
			CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CL ON (
			CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) TC ON (
			TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID
		)
		WHERE
			$customerOR
		AND `srp_erp_creditnotemaster`.`approvedYN` = 1
		AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
		AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_creditnotemaster`.`customerID`,
			`srp_erp_creditnotemaster`.`creditNoteDate`
		HAVING
			(
				" . join(' AND ', $having) . "
			)
	)

	UNION ALL
	(
		SELECT
			$fields11 srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_salesreturnmaster.comment,
			srp_erp_salesreturnmaster.documentID,
			srp_erp_salesreturnmaster.returnDate AS bookingDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
			DATEDIFF(
				'" . format_date($this->input->post("from")) . "',
				srp_erp_salesreturnmaster.`returnDate`
			) AS age,
			`srp_erp_salesreturnmaster`.`customerID` AS customerID
		FROM
			srp_erp_salesreturnmaster
		INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.itemAutoID = srp_erp_customerinvoicedetails.itemAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
		LEFT JOIN (
			SELECT
				$fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
			    AND type = 'SLR'
			GROUP BY
				creditNoteAutoID
		) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
		AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
		AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CR ON (
			CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) CL ON (
			CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID
		)
		LEFT JOIN (
			SELECT
				DecimalPlaces,
				currencyID
			FROM
				srp_erp_currencymaster
		) TC ON (
			TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID
		)
		WHERE
			$customerOR
		AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
		AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
		AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_salesreturnmaster`.`customerID`,
			`srp_erp_salesreturnmaster`.`returnDate`
		HAVING
			(
				" . join(' AND ', $having) . "
			)
	)

) AS a
GROUP BY
	a.customerSystemCode $groupByExplode








	UNION

	SELECT
	b.currency AS currency,
	b.DecimalPlaces AS DecimalPlaces,
	0 $fields_currency_amt,
	$fields3_details
	b.customerName,
	b.customerSystemCode,
	b.comments,
	b.documentID,
	b.bookingDate,
	b.GLSecondaryCode,
	b.GLDescription,
	b.bookingInvCode,
	b.customerID,
	b.$pdc_total_code
FROM
	(
	(
	SELECT
	$fields_currency AS currency,
	$fields_currency_decimal AS DecimalPlaces,
	\"0\" AS $fields_currency_amt,
	$fields3_details
	customermaster.customerName,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration AS comments,
	receiptmastertbl.documentID AS documentID,
	DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode AS bookingInvCode,
	receiptmastertbl.customerID,
    $fields3_pdc_total
FROM
	srp_erp_customerreceiptmaster receiptmastertbl

	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
	$customerORoutput
	AND receiptmastertbl.companyID = '{$companyid}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	customermaster.customerSystemCode,$fields_currency
	)
	) AS b) as tbl1
	Group By
	tbl1.customerSystemCode,
	tbl1.currency
 ")->result_array();
    //echo $this->db->last_query();
    return $result;

}

    function get_accounts_receivable_customer_aging_detail_report_buyback()
    {
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0))/ srp_erp_salesreturnmaster.companyReportingExchangeRate),CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    //$fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields10 .= "SUM($val) as TotalRow, ";
            }
        }

        $result = $this->db->query("SELECT $fields3 $fields10 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerAutoID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
                            ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`
                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN
                            (
                                SELECT
                                    $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                                FROM
                                srp_erp_customerreceiptdetail
                                    INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                                    AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                    WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                            ) pvd ON (
                                pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                            )
                            LEFT JOIN
                            (
                                SELECT
                                    $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                                FROM
                                    srp_erp_creditnotedetail
                                    INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                                WHERE
                                    `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                            ) cnd ON (
                                cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                            )

                            LEFT JOIN(
                            SELECT
                            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                FROM srp_erp_rvadvancematchdetails
                                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
                                GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                                ca ON (
                                ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                            )
                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                            WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
                            UNION ALL (
                            SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'-' as invoiceDueDate, referanceNo as  referenceNo
                            FROM srp_erp_customerreceiptmaster
                            INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                            LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                    FROM srp_erp_rvadvancematchdetails
                                    INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                    GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                    ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                            WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                            UNION ALL (

                            SELECT $fields8
                            `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                            srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                                srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
                            FROM srp_erp_creditnotemaster
                            INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                                LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                            WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                            AND type='creditnote'  GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                            WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))




                            UNION ALL (

                            SELECT $fields11
                            `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                            srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                                srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
                            FROM srp_erp_salesreturnmaster
                            INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                            LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                            LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                                        LEFT JOIN (
                                        SELECT
                                            $fields9
                                            srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                                            creditNoteAutoID
                                        FROM
                                            `srp_erp_customerreceiptdetail`
                                            LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                                        WHERE
                                            `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                            AND srp_erp_customerreceiptmaster.approvedYN = 1
                                            AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                            AND type = 'SLR'
                                        GROUP BY
                                            creditNoteAutoID
                                    ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                            WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


                            ) as a GROUP BY a.documentCode,a.invoiceAutoID
        ")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_detail_report_postdated_buyback()
    {
        $customer = $this->input->post("customerTo");
        $companyid = current_companyID();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        $customerOR .= ')';

        $k = 1;
        $customerOR_output = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerOR_output .= ' OR ';
                }
                $customerOR_output .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }

        $customerOR_output .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_decimalplaces = "";
        $fields3 = "";
        $fields3_aging_pdc = "";
        $fields3_amount_total_pdc = "";
        $fields3_amount_total_pdc_uni = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }

        $result = $this->db->query("SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate FROM
                        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN
                        (
                            SELECT
                                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                            FROM
                            srp_erp_customerreceiptdetail
                                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
                        ) pvd ON (
                            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                        )
                        LEFT JOIN
                        (
                            SELECT
                                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                            FROM
                                srp_erp_creditnotedetail
                                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                            WHERE
                                `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
                        ) cnd ON (
                            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                        )
                        /*LEFT JOIN (
                        SELECT
                            $fields10
                            invoiceAutoID,
                            srp_erp_salesreturndetails.salesReturnAutoID
                        FROM
                            srp_erp_salesreturndetails
                        INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
                        AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
                        WHERE
                            `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
                        GROUP BY
                            srp_erp_salesreturndetails.invoiceAutoID
                        ) srnd ON (
                        srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
                        )*/
                        LEFT JOIN(
                        SELECT
                        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                            FROM srp_erp_rvadvancematchdetails
                            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                            WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                            AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
                            GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                            ca ON (
                            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
                        )
                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
                        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
                        UNION ALL (
                        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate, referanceNo AS referenceNo
                        FROM srp_erp_customerreceiptmaster
                        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
                        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                FROM srp_erp_rvadvancematchdetails
                                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
                        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

                        UNION ALL (

                        SELECT $fields8
                        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
                        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo
                        FROM srp_erp_creditnotemaster
                        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                        WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote'
                        AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <='" . format_date($this->input->post("from")) . "'
                        GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
                        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

                        UNION ALL (

                        SELECT $fields11
                        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
                        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                                            srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
                        FROM srp_erp_salesreturnmaster
                        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                        LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                                    LEFT JOIN (
                                    SELECT
                                        $fields9
                                        srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                                        creditNoteAutoID
                                    FROM
                                        `srp_erp_customerreceiptdetail`
                                        LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                                    WHERE
                                        `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                                        AND srp_erp_customerreceiptmaster.approvedYN = 1
                                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                                        AND type = 'SLR'
                                    GROUP BY
                                        creditNoteAutoID
                                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
                        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
                        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
                        )


                        ) as a GROUP BY a.documentCode UNION
                            SELECT
                            b.currency AS currency,
                            b.DecimalPlaces AS DecimalPlaces,
                            0 transactionAmount,
                            $fields3_aging_pdc
                            b.receiptVoucherAutoId as invoiceAutoID,
                            b.bookingDate as documentDate,
                            b.bookingInvCode as documentCode,
                            b.documentID,
                            b.customerName,
                            b.customerSystemCode,
                            b.comments,
                            b.GLSecondaryCode,
                            b.GLDescription,
                            b.$fields3_amount_total_pdc_uni,
                            '' as invoiceDueDate,
                            '' AS referenceNo
                        FROM
                            (
                            (
                        SELECT
                            $fields_currencycode AS currency,
                            $fields_decimalplaces AS DecimalPlaces,
                            \"0\" AS transactionAmount,
                            $fields3_aging_pdc
                            customermaster.customerName,
                            customermaster.customerSystemCode,
                            receiptmastertbl.RVNarration AS comments,
                            receiptmastertbl.documentID AS documentID,
                            DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
                            srp_erp_chartofaccounts.GLSecondaryCode,
                            srp_erp_chartofaccounts.GLDescription,
                            receiptmastertbl.RVcode AS bookingInvCode,
                            receiptmastertbl.customerID,
                            receiptmastertbl.receiptVoucherAutoId,
                            $fields3_amount_total_pdc

                        FROM
                            srp_erp_customerreceiptmaster receiptmastertbl
                            LEFT JOIN (
                        SELECT
                            SUM(transactionAmount) AS inAd,
                            receiptVoucherAutoId
                        FROM
                            srp_erp_customerreceiptdetail
                        WHERE
                            srp_erp_customerreceiptdetail.type = \"Invoice\"
                            or srp_erp_customerreceiptdetail.type = \"Advance\"
                        GROUP BY
                            receiptVoucherAutoId
                            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                            LEFT JOIN (
                        SELECT
                            SUM(transactionAmount) AS dbnAmount,
                            receiptVoucherAutoId
                        FROM
                            srp_erp_customerreceiptdetail
                        WHERE
                            srp_erp_customerreceiptdetail.type = \"creditnote\"
                            or srp_erp_customerreceiptdetail.type = \"SLR\"
                        GROUP BY
                            receiptVoucherAutoId
                            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                            LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
                            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
                            INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
                            LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
                            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
                            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
                            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
                        WHERE
                            $customerOR_output
                            AND receiptmastertbl.companyID = '{$companyid}'
                            AND receiptmastertbl.modeOfPayment = 2
                            AND receiptmastertbl.confirmedYN = 1
                            AND receiptmastertbl.approvedYN != 1
                            AND RVchequeNo <> ''
                            AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
                        GROUP BY
                            receiptmastertbl.receiptVoucherAutoId
                            )
                            ) AS b) as tbl1
                            GROUP BY
                            tbl1.invoiceAutoID,
                            tbl1.DocumentCode

        ")->result_array();
        //echo $this->db->last_query();
        return $result;

    }


    function get_accounts_receivable_customer_aging_summary_report_pdc_buyback()
    {
        $customer = $this->input->post("customerTo");
        $companyid = current_companyID();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $k = 1;
        $customerORoutput = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORoutput .= ' OR ';
                }
                $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORoutput .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currency = "";
        $fields_currency_decimal = "";
        $fields_currency_amt = "";
        $fields3 = "";
        $fields3_details = "";
        $curre = "";
        $fields3_pdc_new_qu = "";
        $fields3_pdc_total = "";
        $pdc_total_code = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fields3_age = "";

        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_currency .= 'CR.CurrencyCode';
                    $fields_currency_decimal .= 'CR.DecimalPlaces';
                    $fields_currency_amt .= 'companyReportingAmount';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $pdc_total_code .= 'companyReportingAmountPDC';
                    $curre .= 'companyReportingCurrency';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currency .= 'CL.CurrencyCode';
                    $fields_currency_decimal .= 'CL.DecimalPlaces';
                    $fields_currency_amt .= 'companyLocalAmount';

                    $curre .= 'companyLocalCurrency';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $pdc_total_code .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                    $fields_currency .= 'TC.CurrencyCode';
                    $fields_currency_decimal .= 'TC.DecimalPlaces';
                    $fields_currency_amt .= 'transactionAmount';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';

                    $pdc_total_code .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";


                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            //$fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
                $fields3 .= "a.age as `age`,";
                $fields3_details .= "0 as `age`,";
                $fields3_pdc_new_qu .= " `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }

        $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $pdc_total_code,referenceNo,invoiceDueDate,a.customerID FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,`srp_erp_customerinvoicemaster`.`customerID` AS customerID  FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
		AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)

LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
	 GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,'Advance' as comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` AS customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	    GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields8
`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
srp_erp_creditnotemaster.creditNoteCode AS documentCode,
					srp_erp_creditnotemaster.creditNoteDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_creditnotemaster.comments,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_creditnotemaster`.`customerID` AS customerID
  FROM srp_erp_creditnotemaster
INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
 		LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
 WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND type='creditnote'
 	AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'


 GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields11
`srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
					srp_erp_salesreturnmaster.returnDate AS documentDate,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_salesreturnmaster.comment,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,	`srp_erp_salesreturnmaster`.`customerID` AS customerID
  FROM srp_erp_salesreturnmaster
INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
			LEFT JOIN (
			SELECT
				$fields9
				srp_erp_customerreceiptdetail.receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
				AND type = 'SLR'
			GROUP BY
				creditNoteAutoID
         ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
)


) as a GROUP BY a.documentCode UNION
	SELECT
	b.currency AS currency,
	b.DecimalPlaces AS DecimalPlaces,
	0 $fields_currency_amt,
	$fields3_details
	b.receiptVoucherAutoId as invoiceAutoID,
	b.bookingDate as documentDate,
	b.bookingInvCode as documentCode,
	b.documentID,
	b.customerName,
	b.customerSystemCode,
	b.comments,
    b.GLSecondaryCode,
	b.GLDescription,
	b.$pdc_total_code,
	'' as invoiceDueDate,
	'' AS referenceNo,
	b.customerID
FROM
	(
	(
SELECT
	$fields_currency AS currency,
	$fields_currency_decimal AS DecimalPlaces,
	\"0\" AS transactionAmount,
	$fields3_details
	customermaster.customerName,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration AS comments,
	receiptmastertbl.documentID AS documentID,
	DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode AS bookingInvCode,
	receiptmastertbl.customerID,
	receiptmastertbl.receiptVoucherAutoId,
	$fields3_pdc_total

FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN (
SELECT
    SUM(transactionAmount) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
     SUM(transactionAmount) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SLR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
    $customerORoutput
	AND receiptmastertbl.companyID = '{$companyid}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId
	)
	) AS b) as tbl1
	GROUP BY
    tbl1.invoiceAutoID,tbl1.DocumentCode) t2
    GROUP BY
    t2.customerSystemCode,
	t2.currency")->result_array();
        //echo $this->db->last_query();
        return $result;

    }





    function get_accounts_receivable_report_drilldown_buyback($fromTo, $financialBeginingDate)
    {
        $customer = $this->input->post("customerID");
        $SubCustomers = $this->input->post("SubCustomers");
        $customerList = explode("-", $SubCustomers);
        $customerList = implode(",", $customerList);
        $CustomerMasterCustomers = "";
        $InvoiceMasterCustomers = "";
        if (!empty($SubCustomers)) {
            $CustomerMasterCustomers = "(srp_erp_customermaster.customerAutoID = $customer OR srp_erp_customermaster.customerAutoID IN ($customerList) )";
            $InvoiceMasterCustomers = "(srp_erp_customerinvoicemaster.customerID = $customer OR srp_erp_customerinvoicemaster.customerID IN ($customerList) )";
        } else {
            $CustomerMasterCustomers = "(srp_erp_customermaster.customerAutoID = $customer)";
            $InvoiceMasterCustomers = "(srp_erp_customerinvoicemaster.customerID = $customer)";
        }
        $age = $this->input->post("age");
        $list = explode("-", $age);
        $finalCheck = "";
        if ($this->input->post('through') == $age) {
            $finalCheck = "a.age > " . $age;
        } else {
            $finalCheck = "a.age >= " . $list[0] . " AND a.age <= " . $list[1];
        }

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $having = array();
        $fieldNameChk = $this->input->post("currency");
        if (isset($fieldNameChk)) {
            if ($fieldNameChk == 'transactionAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields8 .= "srp_erp_creditnotemaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "srp_erp_salesreturnmaster.transactionCurrency AS " . $fieldNameChk . "currency, TC.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL(( rvd." . $fieldNameChk . " ), 0 )) *-1 AS " . $fieldNameChk . ",";

            } else if ($fieldNameChk == 'companyReportingAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields8 .= "srp_erp_creditnotemaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "srp_erp_salesreturnmaster.companyReportingCurrency AS " . $fieldNameChk . "currency, CR.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL(( rvd." . $fieldNameChk . " ), 0 )) *-1 AS " . $fieldNameChk . ",";
            } else if ($fieldNameChk == 'companyLocalAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= " CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $fieldNameChk . '),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
                $fields7 .= "srp_erp_customerreceiptmaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields8 .= "srp_erp_creditnotemaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "srp_erp_salesreturnmaster.companyLocalCurrency AS " . $fieldNameChk . "currency, CL.DecimalPlaces AS " . $fieldNameChk . "DecimalPlaces,";
                $fields10 .= "(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL(( rvd." . $fieldNameChk . " ), 0 )) *-1 AS " . $fieldNameChk . ",";
            } else if ($fieldNameChk == 'customerCurrencyAmount') {
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $fieldNameChk . 'currency,';
                $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $fieldNameChk . 'decimalPlace,';
                $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0) -  IFNULL(SUM(rvd.' . $fieldNameChk . '),0)) as ' . $fieldNameChk . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $fieldNameChk . ',';
            }
            $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $fieldNameChk . ') - (IFNULL(SUM(pvd.' . $fieldNameChk . '),0)+IFNULL(SUM(cnd.' . $fieldNameChk . '),0)+IFNULL(SUM(ca.' . $fieldNameChk . '),0))) as ' . $fieldNameChk . ',';
            $fields3 .= 'a.' . $fieldNameChk . 'currency as ' . $fieldNameChk . 'currency,';
            $fields3 .= " a." . $fieldNameChk . "DecimalPlaces,";
            $fields3 .= 'a.' . $fieldNameChk . ' as ' . $fieldNameChk . ',';
            $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $fieldNameChk . ') as ' . $fieldNameChk . ',';
            $fields9 .= "SUM( srp_erp_customerreceiptdetail." . $fieldNameChk . " ) AS " . $fieldNameChk . ",";
            $having[] = $fieldNameChk . '!= -0 AND ' . $fieldNameChk . ' != 0';
            $fields7 .= "(IFNULL( SUM( srp_erp_customerreceiptdetail." . $fieldNameChk . " ), 0 ) - IFNULL(( avd." . $fieldNameChk . "), 0 )) *- 1 AS " . $fieldNameChk . ",";
            $fields8 .= "(SUM( srp_erp_creditnotedetail." . $fieldNameChk . " ) - IFNULL( SUM( rvd." . $fieldNameChk . " ), 0 )) * - 1 AS " . $fieldNameChk . ",";
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.age
        FROM
(
(
        SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoId
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID`
        AND `srp_erp_rvadvancematch`.`confirmedYN` = 1) rvd ON (rvd.receiptVoucherAutoId = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`)
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	  AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
	  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $InvoiceMasterCustomers AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))

	UNION ALL
	(
		SELECT
			$fields7
			srp_erp_customerreceiptmaster.receiptVoucherAutoId AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			RVNarration AS comments,
			srp_erp_customerreceiptmaster.documentID AS documentID,
			srp_erp_customerreceiptmaster.RVDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_customerreceiptmaster.RVCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_customerreceiptmaster.`RVDate` ) AS age
		FROM
			srp_erp_customerreceiptmaster
			INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
			AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			AND srp_erp_customerreceiptdetail.type = 'Advance'
			LEFT JOIN (
			SELECT
				$fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
			FROM
				srp_erp_rvadvancematchdetails
				INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID`
				AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
			WHERE
				`srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "'
			GROUP BY
				srp_erp_rvadvancematchdetails.receiptVoucherAutoID
			) avd ON ( avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID` )
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID
			AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
			AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		GROUP BY
			`srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,
			srp_erp_customerreceiptmaster.`RVDate`
		HAVING (" . join(' AND ', $having) . ")
	)
	UNION ALL (
		SELECT
			$fields8
			`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_creditnotemaster.comments,
			srp_erp_creditnotemaster.documentID AS documentID,
			srp_erp_creditnotemaster.creditNoteDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_creditnotemaster.creditNoteCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_creditnotemaster.creditNoteDate ) AS age
		FROM
			 srp_erp_creditnotedetail
			INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
			AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL
			AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN (
			SELECT
				$fields9
				receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND type = 'creditnote'
			GROUP BY
				creditNoteAutoID
			) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_creditnotemaster`.`approvedYN` = 1
			AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
			AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,
			`srp_erp_creditnotemaster`.`creditNoteDate`
		HAVING (" . join(' AND ', $having) . ")
	)
	UNION ALL (
	SELECT
	        $fields10
			`srp_erp_salesreturnmaster`.`salesReturnAutoID` AS invoiceAutoID,
			srp_erp_customermaster.customerName,
			srp_erp_customermaster.customerSystemCode,
			srp_erp_salesreturnmaster.comment,
			srp_erp_salesreturnmaster.documentID AS documentID,
			srp_erp_salesreturnmaster.returnDate AS documentDate,
			srp_erp_chartofaccounts.GLSecondaryCode,
			srp_erp_chartofaccounts.GLDescription,
			srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
			srp_erp_customermaster.customerAutoID,
			DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_salesreturnmaster.returnDate ) AS age
		FROM
			srp_erp_salesreturnmaster
			INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
			LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
            LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
			LEFT JOIN (
			SELECT
				$fields9
				srp_erp_customerreceiptdetail.receiptVoucherAutoId,
				creditNoteAutoID
			FROM
				`srp_erp_customerreceiptdetail`
				LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
			WHERE
				`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
				AND srp_erp_customerreceiptmaster.approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
				AND type = 'SLR'
			GROUP BY
				creditNoteAutoID
			) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
			LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
			AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID
			AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
			LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
		WHERE
			$CustomerMasterCustomers
			AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
			AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
			AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
		GROUP BY
			`srp_erp_salesreturnmaster`.`salesReturnAutoID`,
			`srp_erp_salesreturnmaster`.`returnDate`
		HAVING (" . join(' AND ', $having) . ")
	)
) as a WHERE $finalCheck")->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    /* End of Customer Statement, Customer Aging Details, Customer Aging Summary Reports Customized for haira
           */

    /* function loadCustomer(){
         $partyCategoryID = $this->input->post("partyCategoryID");
         $type = $this->input->post("type");

         if($type == 1){
             $customer = all_customer_drop(true,$partyCategoryID);
         }else{
             $customer = all_group_customer_drop(true,$partyCategoryID);
         }
         return $customer;
         /* unset($customer[""]);
          if (!empty($customer)) {
              foreach ($customer as $key => $val) {
                  echo '<option value="' . $key . '">' . $val . '</option>';
              }
          } */
    // }

    function loadCustomer()
    {
        $partyCategoryID = $this->input->post("customerCategoryID");
        $activeStatus = $this->input->post("activeStatus");
        $status_filter = '';
        $partyCategoryID_join = '';
        $companyID = current_companyID();
        $customercat = $this->db->query("SELECT COUNT( `partyCategoryID`) as partyCategorycount FROM `srp_erp_partycategories` WHERE `companyID` = '{$companyID}' AND `partyType` = 1")->row('partyCategorycount');
        
        if (!empty($activeStatus)) {
            if($activeStatus==1){
                $status_filter = "AND isActive = 1 ";
            }elseif($activeStatus==2){
                $status_filter = "AND isActive = 0 ";
            }else{
                $status_filter = '';
            }
        }

        if (!empty($partyCategoryID)) {
            $partyCategoryID_join = join(",", $partyCategoryID);
            $partyCategoryID_join = "AND partyCategoryID IN ($partyCategoryID_join)";
        }
        $companyID = current_companyID();
        $type = $this->input->post("type");
        if ($type == 1) {
            if (sizeof($partyCategoryID) == $customercat) {
                $partyCategoryID_join = '';
            }
            $customer['details'] = $this->db->query("SELECT `customerAutoID`, `customerName`, `customerSystemCode`, `customerCountry`
                                              FROM `srp_erp_customermaster` WHERE `companyID` = $companyID AND `deletedYN` =0 $partyCategoryID_join $status_filter")->result_array();
            $customer['type'] = 1;
            return $customer;
        } else {
            $companies = getallsubGroupCompanies();
            $masterGroupID = getParentgroupMasterID();

            $customer = false;
            $customer['details'] = $this->db->query("SELECT `groupCustomerAutoID`,`groupCustomerName`,`groupcustomerSystemCode`,`customerCountry`
                FROM
                    `srp_erp_groupcustomermaster`
                    INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE
                    srp_erp_groupcustomermaster.companyGroupID =  $masterGroupID

                    AND srp_erp_groupcustomerdetails.companyID IN ( $companies )
                    $partyCategoryID_join
                    GROUP BY groupCustomerAutoID")->result_array();
            $customer['type'] = 0;
            return ($customer);
        }
    }

    function fetch_item_counting_for_excel($isRep = false, $isLoc = false,$isBarcode= false, $isPartNo= false, $isSeconeryItemCode= false)
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $output = $this->get_item_counting_report($fieldName);

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        $totallocalAssetvalue = 0;
        $totalRptAssetvalue = 0;
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );

                        $localAssetvalue = 0;
                        $rptAssetvalue = 0;
                        foreach ($subsubCategory as $item) {
                            if ($isLoc) {
                                $localAssetvalue += $item["AssetValueLocal"];
                                $totallocalAssetvalue += $item["AssetValueLocal"];
                            }
                            if ($isRep) {
                                $rptAssetvalue += $item["AssetValueRpt"];
                                $totalRptAssetvalue += $item["AssetValueRpt"];
                            }

                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"]/*,
                                'UOM' => $item["transactionUOM"],
                                'Location' => $item["wareHouseLocation"],
                                'QtyinHand' => number_format($item["transactionQTY"], 2, '.' , '')*/
                            );
                            if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }
                            $details['UOM'] = $item["transactionUOM"];
                            $details['Location'] = $item["wareHouseLocation"];
                            $details['QtyinHand'] = number_format($item["transactionQTY"], 2, '.' , '');

                            if($isLoc) {
                                $details['AvgCostLocal'] = number_format($item["companyLocalWacAmount"], 4, '.' , '');
                                $details['AssetValueLocal'] = number_format($item["AssetValueLocal"], $item["companyLocalCurrencyDecimalPlaces"], '.' , '');
                            }
                            if($isRep) {
                                $details['AvgCostReporting'] = number_format($item["companyReportingWacAmount"], 4, '.' , '');
                                $details['AssetValueReporting'] = number_format($item["AssetValueRpt"], $item["companyReportingCurrencyDecimalPlaces"], '.' , '');
                            }
                            $details['PhysicalQty'] = "___________";

                            $data['details'][] = $details;
                            $i++;
                        }
                        $details = array(
                            'itemCode' => $this->lang->line('common_sub_total'),
                            'ItemDescription' => '   '/*,
                            'UOM' => '   ',
                            'Location' => '   ',
                            'QtyinHand' => '   '*/
                        );
                        if($isBarcode){
                            $details['barcode'] = ' ';
                        }
                        if($isSeconeryItemCode){
                            $details['seconeryItemCode'] = ' ';
                        }
                        if($isPartNo){
                            $details['partNo'] = ' ';
                        }
                        $details['UOM'] = ' ';
                        $details['Location'] = ' ';
                        $details['QtyinHand'] = ' ';

                        if($isLoc) {
                            $details['AvgCostLocal'] = "   ";
                            $details['AssetValueLocal'] = number_format($localAssetvalue, $this->common_data['company_data']['company_default_decimal'], '.' , '');
                        }
                        if($isRep) {
                            $details['AvgCostReporting'] = "   ";
                            $details['AssetValueReporting'] = number_format($rptAssetvalue, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                        }

                        $data['details'][] = $details;
                        $data['details'][] = array(
                            'itemCode' => '',
                            'ItemDescription' => '',
                            'onHand' => ''
                        );
                        $i = $i + 2;
                        //$i++;
                    }
                    $i++;
                }
                $i++;
            }
            $details = array(
                'itemCode' => $this->lang->line('common_grand_total'),
                'ItemDescription' => '   '/*,
                'UOM' => '   ',
                'Location' => '   ',
                'QtyinHand' => '   '*/
            );
            if($isBarcode){
                $details['barcode'] = ' ';
            }
            if($isSeconeryItemCode){
                $details['seconeryItemCode'] = ' ';
            }
            if($isPartNo){
                $details['partNo'] = ' ';
            }
            $details['UOM'] = ' ';
            $details['Location'] = ' ';
            $details['QtyinHand'] = ' ';

            if($isLoc) {
                $details['AvgCostLocal'] = "   ";
                $details['AssetValueLocal'] = number_format($totallocalAssetvalue, $this->common_data['company_data']['company_default_decimal'], '.' , '');
            }
            if($isRep) {
                $details['AvgCostReporting'] = "   ";
                $details['AssetValueReporting'] = number_format($totalRptAssetvalue, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
            }

            $data['details'][] = $details;
            $i++;
        }
        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_item_valuation_summary_for_excel($isRep = false, $isLoc = false, $isBarcode = false, $isPartNo = false, $isSeconeryItemCode = false)
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $output = $this->get_item_valuation_summary_report($fieldName);
        $TotalAssetValue = $this->get_item_valuation_summary_total_asset($fieldName);

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        $totalcurrentQty = 0;
        $totallocalAssetvaluePer = 0;
        $totalRptAssetvaluePer = 0;
        $totalretailValuePer = 0;
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );
                        $currentQty = 0;
                        $localAssetvalue = 0;
                        $localAssetvaluePer = 0;
                        $rptAssetvaluePer = 0;
                        $retailValue = 0;
                        $retailValuePer = 0;
                        $rptAssetvalue = 0;
                        foreach ($subsubCategory as $item) {
                            $totalcurrentQty += $item["transactionQTY"];
                            $currentQty += $item["transactionQTY"];
                            if ($isLoc) {
                                $localAssetvalue += $item["AssetValueLocal"];
                                $localAssetvaluePer += ($TotalAssetValue["TotalAssetValueLocal"] > 0 || $TotalAssetValue["TotalAssetValueLocal"] < 0 ? (($item["AssetValueLocal"] / $TotalAssetValue["TotalAssetValueLocal"]) * 100) : 0);
                                $totallocalAssetvaluePer += ($TotalAssetValue["TotalAssetValueLocal"] > 0 || $TotalAssetValue["TotalAssetValueLocal"] < 0 ? (($item["AssetValueLocal"] / $TotalAssetValue["TotalAssetValueLocal"]) * 100) : 0);
                            }
                            if ($isRep) {
                                $rptAssetvalue += $item["AssetValueRpt"];
                                $rptAssetvaluePer += ($TotalAssetValue["TotalAssetValueRpt"] > 0 || $TotalAssetValue["TotalAssetValueRpt"] < 0 ? (($item["AssetValueRpt"] / $TotalAssetValue["TotalAssetValueRpt"]) * 100) : 0);
                                $totalRptAssetvaluePer += ($TotalAssetValue["TotalAssetValueRpt"] > 0 || $TotalAssetValue["TotalAssetValueRpt"] < 0 ? (($item["AssetValueRpt"] / $TotalAssetValue["TotalAssetValueRpt"]) * 100) : 0);
                            }
                            $retailValuePer += ($TotalAssetValue["TotalRetailValue"] > 0 ? (($item["RetailValue"] / $TotalAssetValue["TotalRetailValue"]) * 100) : 0);
                            $totalretailValuePer += ($TotalAssetValue["TotalRetailValue"] > 0 ? (($item["RetailValue"] / $TotalAssetValue["TotalRetailValue"]) * 100) : 0);
                            $retailValue += $item["RetailValue"];

                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"]/*,
                                'onHand' => number_format($item["transactionQTY"], 2, '.' , ''),*/
                            );
                            if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }
                            $details['onHand'] = number_format($item["transactionQTY"], 2, '.' , '');

                            if($isLoc) {
                                $details['AvgCostLocal'] = number_format((float)$item["companyLocalWacAmount"], $item["companyLocalWacAmountDecimalPlaces"], '.' , '');
                                $details['TotalValueLocal'] = number_format((float)$item["AssetValueLocal"], $item["companyLocalWacAmountDecimalPlaces"], '.' , '');
                                $details['perOfTotal'] = ($TotalAssetValue["TotalAssetValueLocal"] > 0 || $TotalAssetValue["TotalAssetValueLocal"] < 0 ? number_format((($item["AssetValueLocal"] / $TotalAssetValue["TotalAssetValueLocal"]) * 100), $item["companyLocalWacAmountDecimalPlaces"], '.' , '') : 0);
                            }
                            if($isRep) {
                                $details['AvgCostReporting'] = number_format((float)$item["companyReportingWacAmount"], 4, '.' , '');
                                $details['TotalValueReporting'] = number_format((float)$item["AssetValueRpt"], $item["companyLocalWacAmountDecimalPlaces"], '.' , '');
                                $details['perOfTotal'] = ($TotalAssetValue["TotalAssetValueRpt"] > 0 || $TotalAssetValue["TotalAssetValueRpt"] < 0 ? number_format((($item["AssetValueRpt"] / $TotalAssetValue["TotalAssetValueRpt"]) * 100), $item["companyReportingWacAmountDecimalPlaces"], '.' , '') : 0);
                            }
                            $details['salesTotal'] = number_format((float)$item["salesPrice"], $item["companyLocalWacAmountDecimalPlaces"], '.' , '');
                            $details['retailTotal'] = number_format((float)$item["RetailValue"], $item["companyLocalWacAmountDecimalPlaces"], '.' , '');
                            $details['perRetailTotal'] = ($TotalAssetValue["TotalRetailValue"] > 0 ? number_format((((float)$item["RetailValue"] / $TotalAssetValue["TotalRetailValue"]) * 100), $item["companyLocalWacAmountDecimalPlaces"], '.' , '') : 0);
                            if($isLoc) {
                                $details['perMargin'] = ($item["companyLocalWacAmount"] > 0 ? number_format((((float)$item["salesPrice"] - $item["companyLocalWacAmount"]) / $item["companyLocalWacAmount"] * 100), $item["companyLocalWacAmountDecimalPlaces"], '.' , '') : 0);
                            }
                            if($isRep) {
                                $details['perMargin'] = ($item["companyReportingWacAmount"] > 0 ? number_format((((float)$item["salesPrice"] - $item["companyReportingWacAmount"]) / $item["companyReportingWacAmount"] * 100), $item["companyLocalWacAmountDecimalPlaces"], '.' , '') : 0);
                            }

                            $data['details'][] = $details;
                            $i++;
                        }

                        $details = array(
                            'itemCode' => $this->lang->line('common_sub_total'),
                            'ItemDescription' => '   '/*,
                            'onHand' => '   ',*/
                        );
                        if($isBarcode){
                            $details['barcode'] = ' ';
                        }
                        if($isSeconeryItemCode){
                            $details['seconeryItemCode'] = ' ';
                        }
                        if($isPartNo){
                            $details['partNo'] = ' ';
                        }
                        $details['onHand'] = ' ';

                        if($isLoc) {
                            $details['AvgCostLocal'] = "   ";
                            $details['TotalValueLocal'] = number_format($localAssetvalue, $this->common_data['company_data']['company_default_decimal'], '.' , '');
                            $details['perOfTotal'] = number_format($localAssetvaluePer, $this->common_data['company_data']['company_default_decimal'], '.' , '');
                        }
                        if($isRep) {
                            $details['AvgCostReporting'] = "   ";
                            $details['TotalValueReporting'] = number_format($rptAssetvalue, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                            $details['perOfTotal'] = number_format($rptAssetvaluePer, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                        }
                        $details['salesTotal'] = "    ";
                        $details['retailTotal'] = number_format($retailValue, $this->common_data['company_data']['company_default_decimal'], '.' , '');
                        $details['perRetailTotal'] = number_format($retailValuePer, $this->common_data['company_data']['company_default_decimal'], '.' , '');

                        $data['details'][] = $details;
                        $data['details'][] = array(
                            'itemCode' => '',
                            'ItemDescription' => '',
                            'onHand' => ''
                        );
                        $i = $i + 2;
                    }
                    $i++;
                }
                $i++;
            }
            $details = array(
                'itemCode' => $this->lang->line('common_grand_total'),
                'ItemDescription' => '   ',
                'onHand' => '   ',
            );
            if($isBarcode){
                $details['barcode'] = ' ';
            }
            if($isSeconeryItemCode){
                $details['seconeryItemCode'] = ' ';
            }
            if($isPartNo){
                $details['partNo'] = ' ';
            }
            if($isLoc) {
                $details['AvgCostLocal'] = "   ";
                $details['TotalValueLocal'] = number_format($TotalAssetValue["TotalAssetValueLocal"], $this->common_data['company_data']['company_default_decimal'], '.' , '');
                $details['perOfTotal'] = number_format($totallocalAssetvaluePer, $this->common_data['company_data']['company_default_decimal'], '.' , '');
            }
            if($isRep) {
                $details['AvgCostReporting'] = "   ";
                $details['TotalValueReporting'] = number_format($TotalAssetValue["TotalAssetValueRpt"], $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                $details['perOfTotal'] = number_format($totalRptAssetvaluePer, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
            }
            $details['salesTotal'] = "    ";
            $details['retailTotal'] = number_format($TotalAssetValue["TotalRetailValue"], $this->common_data['company_data']['company_default_decimal'], '.' , '');
            $details['perRetailTotal'] = number_format($totalretailValuePer, $this->common_data['company_data']['company_default_decimal'], '.' , '');

            $data['details'][] = $details;
            $i++;
        }

        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_item_fast_moving_for_excel($isRep = false, $isLoc = false,$isBarcode= false, $isSeconeryItemCode= false, $isPartNo= false)
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $output = $this->get_item_fast_moving_report($fieldName);

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $subtotal = array();
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );
                        foreach ($subsubCategory as $item) {
                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"]/*,
                                'onHand' => $item['UOM'],
                                'transQty' => $item['transactionQTY']*/
                            );
                            if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }
                            $details['onHand'] = $item["UOM"];
                            $details['transQty'] = $item["transactionQTY"];

                            if($isLoc) {
                                $subtotal['companyLocalAmount'][] = $item["companyLocalAmount"];
                                $details['totalLoc'] = number_format($item["companyLocalAmount"], $item["companyLocalAmountDecimalPlaces"], '.' , '');
                            }
                            if($isRep) {
                                $subtotal['companyReportingAmount'][] = $item["companyReportingAmount"];
                                $details['totalRpt'] = number_format($item["companyReportingAmount"], $item["companyReportingAmountDecimalPlaces"], '.' , '');
                            }

                            $details['salesTotal'] = $item['currentStock'];

                            $data['details'][] = $details;
                            $i++;
                        }
                        $data['details'][] = array(
                            'itemCode' => '',
                            'ItemDescription' => '',
                            'onHand' => ''
                        );
                        $i = $i + 2;
                       // $i++;
                    }
                    $i++;
                }
                $i++;

                $details = array(
                    'itemCode' => $this->lang->line('common_grand_total'),
                    'ItemDescription' => '   '/*,
                    'onHand' => '   ',
                    'transQty' => '   '*/
                );
                if($isBarcode){
                    $details['barcode'] = ' ';
                }

                if($isSeconeryItemCode){
                    $details['seconeryItemCode'] = ' ';
                }
                if($isPartNo){
                    $details['partNo'] = ' ';
                }
                $details['onHand'] = ' ';
                $details['transQty'] = ' ';

                if($isLoc) {
                    $details['totalLoc'] = number_format(array_sum($subtotal["companyLocalAmount"]), $this->common_data['company_data']['company_default_decimal'], '.' , '');
                }
                if($isRep) {
                    $details['totalRpt'] = number_format(array_sum($subtotal["companyReportingAmount"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                }

                $data['details'][] = $details;
                $i++;
            }
        }

        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_unbilled_GRV_for_excel($feildName)
    {
        $isLoc = false;
        $isRep = false;
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $output = $this->get_inventory_unbilled_grv_report($fieldName);
        if (isset($fieldName)) {
            if (in_array("transactionAmount", $fieldName)) {
                $isLoc = true;
            }
            if (in_array("companyReportingAmount", $fieldName)) {
                $isRep = true;
            }
        }

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["supplierSystemCode"] . " - " . $val["supplierName"]][] = $val;
        }
        $grandTotal = array();
        if (!empty($category)) {
            foreach ($category as $key => $supplierName) {
                $subtotal = array();
                $data['details'][] = array(
                    'docNumber' => $key
                );
                foreach ($supplierName as $item) {
//                    echo '<pre>'; print_r($supplierName); exit();
                    $details = array(
                        'docNumber' => $item["grvPrimaryCode"],
                        'referenceNumber' => $item["docrefno"],
                        'DocDate' => $item['grvDate']
                    );
                    if($isLoc) {
                        $details['currencyLoc'] = $item["currencytransactionAmount"];
                        $details['grvValLoc'] = number_format($item["transactionAmount"], $item["transactionAmountDecimalPlaces"], '.' , '');
                        $details['transINVLoc'] = number_format($item["sumOftransactionAmount"], $item["transactionAmountDecimalPlaces"], '.' , '');
                        $details['transBalanceLoc'] = number_format($item["balancetransactionAmount"], $item["transactionAmountDecimalPlaces"], '.' , '');
                    }
                    if($isRep) {
                        $subtotal['grvValLoc'][] = $item["companyReportingAmount"];
                        $subtotal['transINVLoc'][] = $item["sumOfcompanyReportingAmount"];
                        $subtotal['transBalanceLoc'][] = $item["balancecompanyReportingAmount"];
                        $grandTotal['grvValLoc'][] = $item["companyReportingAmount"];
                        $grandTotal['transINVLoc'][] = $item["sumOfcompanyReportingAmount"];
                        $grandTotal['transBalanceLoc'][] = $item["balancecompanyReportingAmount"];

                        $details['currencyLoc'] = $item["currencycompanyReportingAmount"];
                        $details['grvValLoc'] = number_format($item["companyReportingAmount"], $item["companyReportingAmountDecimalPlaces"], '.' , '');
                        $details['transINVLoc'] = number_format($item["sumOfcompanyReportingAmount"], $item["companyReportingAmountDecimalPlaces"], '.' , '');
                        $details['transBalanceLoc'] = number_format($item["balancecompanyReportingAmount"], $item["companyReportingAmountDecimalPlaces"], '.' , '');
                    }

                    $data['details'][] = $details;
                    $i++;
                }
                if($isRep) {
                    $details = array(
                        'docNumber' => $this->lang->line('common_sub_total'),
                        'referenceNumber' => '   ',
                        'DocDate' => '   '
                    );
                    $details['currencyLoc'] = '  ';
                    $details['grvValLoc'] = number_format(array_sum($subtotal["grvValLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                    $details['transINVLoc'] = number_format(array_sum($subtotal["transINVLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                    $details['transBalanceLoc'] = number_format(array_sum($subtotal["transBalanceLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');

                    $data['details'][] = $details;
                    $i++;
                }
                $i++;
            }
            if($isRep) {
                $details = array(
                    'docNumber' => $this->lang->line('common_grand_total'),
                    'referenceNumber' => '   ',
                    'DocDate' => '   '
                );
                $details['currencyLoc'] = '  ';
                $details['grvValLoc'] = number_format(array_sum($grandTotal["grvValLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                $details['transINVLoc'] = number_format(array_sum($grandTotal["transINVLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                $details['transBalanceLoc'] = number_format(array_sum($grandTotal["transBalanceLoc"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');

                $data['details'][] = $details;
                $i++;
            }
        }
        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_item_inquiry_for_excel($isBarcode= false,$isSeconeryItemCode= false, $isPartNo= false)
    {
        $warehouses = load_location_drop();
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        //$fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));

        $output = $this->get_item_inquiry_report($fieldName);

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );
                        foreach ($subsubCategory as $item) {
                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"],
                                'UOM' => $item['defaultUnitOfMeasure']
                            );
                            /*if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }*/

                            if(!empty($warehouses)) {
                                foreach ($warehouses as $val) {
                                    $details[$val['wareHouseCode']] = number_format($item[$val['wareHouseCode']], 2, '.', '');
                                }
                                $details['total'] = number_format($item['total'], 2, '.', '');
                            }
                            $details['poCurrentStock'] = number_format($item['poCurrentStock'], 2, '.', '');
                            $details['coCurrentStock'] = number_format($item['coCurrentStock'], 2, '.', '');
                            $details['unapprovedDoc'] = number_format($item['unapprovedDoc'], 2, '.', '');

                            $details['netStock'] = number_format($item['netStock'], 2, '.', '');
                            $details['minimumQty'] = number_format($item['minimumQty'], 2, '.', '');
                            $details['netstockMin'] = number_format($item['netStock'] - $item['minimumQty'], 2, '.', '');
                            $details['reorderPoint'] = number_format($item['reorderPoint'], 2, '.', '');

                            if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }

                            $data['details'][] = $details;
                            $i++;
                        }
                        $i++;
                    }
                    $i++;
                }
                $i++;
            }
        }
        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_item_ibmso_for_excel($typeAs,$fieldName,$isBarcode=false, $isPartNo=false, $isSeconeryItemCode=false)
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        $output = $this->get_item_below_stock_ro_report($typeAs,$fieldName);

        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );
                        foreach ($subsubCategory as $item) {
                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"]/*,
                                'UOM' => $item['defaultUnitOfMeasure'],
                                'total' => number_format($item['total'], 2, '.', ''),
                                'minimumQty' => number_format($item['minimumQty'], 2, '.', ''),
                                'reorderPoint' => number_format($item['reorderPoint'], 2, '.', ''),
                                'poCurrentStock' => number_format($item['poCurrentStock'], 2, '.', ''),
                                'coCurrentStock' => number_format($item['coCurrentStock'], 2, '.', ''),
                                'unapprovedDoc' => number_format($item['unapprovedDoc'], 2, '.', ''),*/
                            );
                            if($isBarcode){
                                $details['barcode'] = $item["barcode"];
                            }
                            if($isSeconeryItemCode){
                                $details['seconeryItemCode'] = $item["seconeryItemCode"];
                            }
                            if($isPartNo){
                                $details['partNo'] = $item["partNo"];
                            }
                            $details['UOM'] =  $item['defaultUnitOfMeasure'];
                            $details['total'] = number_format($item['total'], 2, '.', '');
                            $details['minimumQty'] =  number_format($item['minimumQty'], 2, '.', '');
                            $details['reorderPoint'] = number_format($item['reorderPoint'], 2, '.', '');
                            $details['poCurrentStock'] = number_format($item['poCurrentStock'], 2, '.', '');
                            $details['coCurrentStock'] = number_format($item['coCurrentStock'], 2, '.', '');
                            $details['unapprovedDoc'] = number_format($item['unapprovedDoc'], 2, '.', '');

                            $data['details'][] = $details;
                            $i++;
                        }
                        $i++;
                    }
                    $i++;
                }
                $i++;
            }
        }
        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_stock_aging_for_excel($isRep, $isLoc, $aging, $fieldName/*, $isBarcode=false, $isPartNo=false, $isSeconeryItemCode=false*/ )
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
        $output = $this->stock_aging_detail($fieldName);

        $reversAging = array_reverse($aging);
        if(!empty($output))
        {
            foreach ($output as $key => $val)
            {
                $gSubstractValue = 0;
                $x=0;
                foreach ($reversAging as $key2 => $revval)
                {
                    $substractValue = 0;
                    $agingValue = $val['qtyaging'.$revval];

                    if($x == 0) {
                        $substractValue = $agingValue - $val['outputtoalqty'];
                    }else{
                        $substractValue = $agingValue - $gSubstractValue;
                    }

                    $gSubstractValue = abs($substractValue);
                    if($substractValue > 0){
                        $output[$key]['qtyaging'.$revval] = $substractValue;
                        $output[$key]['valueaging'.$revval] = ($substractValue * $val['WacAmount']);
                        break;
                    }else{
                        $output[$key]['qtyaging'.$revval] = 0;
                        $output[$key]['valueaging'.$revval] = 0;
                    }
                    $x++;
                }
            }
        }
        $total = array();
        $total2 = array();

        foreach ($output as $key => $val)
        {
            foreach ($aging as $key2 => $valtotal)
            {
                $total[$valtotal][] = $val['valueaging'.$valtotal];
            }
        }
        foreach ($aging as $key2 => $valtotal)
        {
            $total2[$valtotal] = array_sum($total[$valtotal]);
        }
        $grandtotal = $total2;


        /** table view set begin */
        $data = array();
        $i = 8;
        foreach ($output as $val) {
            $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][] = $val;
        }
        if (!empty($category)) {
            foreach ($category as $key => $mainCategory) {
                $data['details'][] = array(
                    'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                );
                foreach ($mainCategory as $key2 => $subCategory) {
                    $subTotal = array();
                    $grandtotal2 = 0;
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                    );
                    foreach ($subCategory as $key3 => $subsubCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                        );
                        foreach ($subsubCategory as $item) {
                            $item["itemDescription"] = str_replace("<br>","        ",$item["itemDescription"]);
                            $item["itemDescription"] = str_replace("&nbsp;","  ",$item["itemDescription"]);
                            $grandTotal["totalss"][] = $item["total"];
                            $grandtotal2 += $item["total"];
                            $details = array(
                                'itemCode' => $item["itemSystemCode"],
                                'ItemDescription' => $item["itemDescription"],
                                'UOM' => $item['UnitShortCode'],
                                'qty' => number_format(($item["totQty"] - $item['outputtoalqty']), 2, '.', '')
                            );
                            /*if($isBarcode) {
                                $details['barcode'] = $item['barcode'];
                            }
                            if($isSeconeryItemCode) {
                                $details['seconeryItemCode'] = $item['seconeryItemCode'];
                            }
                            if($isPartNo) {
                                $details['partNo'] = $item['partNo'];
                            }*/
                            if($isLoc) {
                                $details['wacLocal'] = number_format($item['WacAmount'], $this->common_data['company_data']['company_default_decimal'], '.' , '');
                                $details['totalLocal'] = number_format($item['total'], $this->common_data['company_data']['company_default_decimal'], '.' , '');
                            }
                            if($isRep) {
                                $details['wacRpt'] = number_format($item["WacAmount"], $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                                $details['totalRpt'] = number_format($item["total"], $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                            }

                            foreach ($aging as $value) {
                                $subTotal[$value][] = $item['valueaging' . $value];
                                $details[$value . 'qty'] = number_format(($item['qtyaging' . $value]), 2, '.', '');

                                if($isLoc) {
                                    $details[$value . 'valueLoc'] = number_format($item['valueaging' . $value], $this->common_data['company_data']['company_default_decimal'], '.' , '');
                                }
                                if($isRep) {
                                    $details[$value . 'valueRpt'] = number_format($item['valueaging' . $value], $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                                }
                            }

                            $data['details'][] = $details;
                            $i++;
                        }
                        $i++;
                    }
                    $i++;

                    $details = array(
                        'itemCode' => $this->lang->line('common_total'),
                        'ItemDescription' => '    ',
                        'UOM' => '    ',
                        'qty' => '    ',
                        'wacLocal' => '   '
                    );
                  /*  if($isBarcode) {
                        $details['barcode'] = ' ';
                    }
                    if($isSeconeryItemCode) {
                        $details['seconeryItemCode'] = ' ';
                    }
                    if($isPartNo) {
                        $details['partNo'] =' ';
                    }*/
                    if($isLoc) {
                        $details['totalLocal'] = number_format($grandtotal2, $this->common_data['company_data']['company_default_decimal'], '.' , '');
                    }
                    if($isRep) {
                        $details['totalRpt'] = number_format($grandtotal2, $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                    }
                    foreach ($aging as $value) {
                        $details[$value . 'qty'] = '    ';

                        if($isLoc) {
                            $details[$value . 'valueLoc'] = number_format(array_sum($subTotal[$value]), $this->common_data['company_data']['company_default_decimal'], '.' , '');
                        }
                        if($isRep) {
                            $details[$value . 'valueRpt'] = number_format(array_sum($subTotal[$value]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                        }
                    }

                    $data['details'][] = $details;
                    $i++;
                }
                $i++;
            }
            $details = array(
                'itemCode' => $this->lang->line('common_grand_total'),
                'ItemDescription' => '    ',
                'UOM' => '    ',
                'qty' => '    ',
                'wacLocal' => '   '
            );
           /* if($isBarcode) {
                $details['barcode'] = ' ';
            }
            if($isSeconeryItemCode) {
                $details['seconeryItemCode'] = ' ';
            }
            if($isPartNo) {
                $details['partNo'] = ' ';
            }*/
            if($isLoc) {
                $details['totalLocal'] = number_format(array_sum($grandTotal["totalss"]), $this->common_data['company_data']['company_default_decimal'], '.' , '');
            }
            if($isRep) {
                $details['totalRpt'] = number_format(array_sum($grandTotal["totalss"]), $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
            }
            foreach ($aging as $valuenew) {
                $details[$value . 'qty'] = '    ';
                if($isLoc) {
                    $details[$value . 'valueLoc'] = number_format($grandtotal[$valuenew], $this->common_data['company_data']['company_default_decimal'], '.' , '');
                }
                if($isRep) {
                    $details[$value . 'valueRpt'] = number_format($grandtotal[$valuenew], $this->common_data['company_data']['company_reporting_decimal'], '.' , '');
                }
            }

            $data['details'][] = $details;
            $i++;
        }
        $data['rowCount'] = $i;
        return $data;
    }

    function fetch_item_ledger_for_excel()
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('inventory', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);

        $fieldName = explode(',' , $this->input->post('fieldNameChkexcel'));
        $caption = explode(',' , $this->input->post('captionChkexcel'));

        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->load->database();
        $output = $this->get_item_ledger_report($fieldName);
        $fieldNameDetails = $this->getColumnsDetailByReport('ITM_LG', $this->input->post('fieldNameChk'));

        $this->excel->getActiveSheet()->setTitle('Item Ledger Report');

        $warehouse = $this->Report_model->get_warehouse();
        $warehouseString = str_replace("<br>","     ",join(" | ",$warehouse));
        $this->excel->getActiveSheet()->setCellValue('A4', $this->lang->line('common_warehouse') . ' : ' . $warehouseString);
        $this->excel->getActiveSheet()->mergeCells('A3:E3');
        $this->excel->getActiveSheet()->mergeCells('A4:AAA4');
        $this->excel->getActiveSheet()->fromArray([current_companyName()], null, 'A1');
        $this->excel->getActiveSheet()->getStyle('A1')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray([$this->lang->line('transaction_item_ledger')], null, 'A2');
        $this->excel->getActiveSheet()->fromArray([$this->common_data['company_data']['company_name']], null, 'A1');
        $this->excel->getActiveSheet()->fromArray([$this->lang->line('transaction_date_from') . ' : ' . $this->input->post('from') . ' - ' . $this->lang->line('transaction_date_to') . ' : ' . $this->input->post('to')], null, 'A3');
        $this->excel->getActiveSheet()->getStyle('A1:A2')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1:A2')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

        if(!empty($output)) {
            $qtyKey = array_search('transactionQTY', array_column($fieldNameDetails, 'fieldName'));
            $locKey = array_search('companyLocalWacAmount', array_column($fieldNameDetails, 'fieldName'));
            $rptKey = array_search('companyReportingWacAmount', array_column($fieldNameDetails, 'fieldName'));
            $isLocalCost = false;
            $isRptCost = false;
            $grandTotalLocal = 0;
            $grandTotalRpt = 0;
            $count = count($caption);
            if (in_array("companyLocalWacAmount", $fieldName)) {
                $isLocalCost = true;
            }
            if (in_array("companyReportingWacAmount", $fieldName)) {
                $isRptCost = true;
            }
            $category = array();
            foreach ($output as $val) {
                $secondaryUOM = getPolicyValues('SUOM', 'All');
                if($secondaryUOM==1) {
                    $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['d'] = array("Item Code" => $val["itemSystemCode"], "Item Description" => $val["itemDescription"], "UOM" => $val["transactionUOM"], "SUOM" => $val["secondaryUOMID"], "Sales Price" => format_number($val["salesPrice"], $this->common_data['company_data']['company_default_decimal']));
                }else{
                    $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['d'] = array("Item Code" => $val["itemSystemCode"], "Item Description" => $val["itemDescription"], "UOM" => $val["transactionUOM"], "Sales Price" => format_number($val["salesPrice"], $this->common_data['company_data']['company_default_decimal']));
                }
                if(isset($val['barcode'])){
                    $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['d']['Barcode'] = $val['barcode'];
                }
                if(isset($val['partNo'])){
                    $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['d']['Part No'] = $val['partNo'];
                }
                if(isset($val['seconeryItemCode'])){
                    $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['d']['Secondary Code'] = $val['seconeryItemCode'];
                }
                $category[$val["mainCategory"]][$val["subCategory"]][$val["subsubCategory"]][$val["itemSystemCode"]]['t'][] = $val;
            }

            $i = 5;
            if (!empty($category)) {
                foreach ($category as $key => $mainCategory) {
                    $data['details'][] = array(
                        'itemCode' => $this->lang->line('transaction_main_category') . " : - " . $key
                    );
                    $i++;
                    foreach ($mainCategory as $key2 => $subCategory) {
                        $data['details'][] = array(
                            'itemCode' => $this->lang->line('transaction_sub_category') . " : - " . $key2
                        );
                        $i++;
                        foreach ($subCategory as $key3 => $subsubCategory) {
                            $data['details'][] = array(
                                'itemCode' => $this->lang->line('erp_item_master_sub_sub_category') . " : - " . $key3
                            );
                            $i++;
                            foreach ($subsubCategory as $key4 => $item) {
                                /** Item Details View*/
                                if (!empty($item)) {
                                    if (!empty($item['d'])) {
                                        $details = array();
                                        foreach ($item['d'] as $key5 => $val5) {
                                            $val5 = str_replace("<br>","        ",$val5);
                                            $val5 = str_replace("&nbsp;","  ",$val5);
                                            $details[$val5 . 'key'] = $key5 . ' :  ' . $val5;
                                        }
                                        $data['details'][] = $details;
                                        $i++;
                                    }
                                    if (!empty($item['t'])) {
                                        /** Header View*/
                                        $a = 1;
                                        $details1 = array();
                                        foreach ($caption as $capval) {
                                            if ($capval == "Local Currency") {
                                                $details1[$capval] =  $capval . "(" . $this->common_data['company_data']['company_default_currency'] . ")";
                                                $details1[$capval . 'asset'] =  $capval . "(" . $this->common_data['company_data']['company_default_currency'] . ")";

                                                $numeric = ($a - 1) % 26;
                                                $letter1 = chr(65 + $numeric);
                                                $letter2 = $letter1++;
                                                $this->excel->getActiveSheet()->mergeCells($letter2. ($i + 1).':'. $letter1 . ($i + 1));
                                                $a += 2;

                                            } else if ($capval == "Rpt Currency") {
//                                                var_dump($a);
                                                $details1[$capval] =  $capval . "(" . $this->common_data['company_data']['company_reporting_currency'] . ")";
                                                $details1[$capval . 'asset'] =  $capval . "(" . $this->common_data['company_data']['company_reporting_currency'] . ")";

                                                $numeric = ($a - 1) % 26;
                                                $letter1 = chr(65 + $numeric);
                                                $letter2 = $letter1++;
                                                $this->excel->getActiveSheet()->mergeCells($letter2. ($i + 1).':'. $letter1 . ($i + 1));
                                                $a++;
                                            } else if ($capval == "Secondary QTY") {
                                                if($secondaryUOM==1) {
                                                    $details1[$capval] = $capval;
                                                    $a++;
                                                }
                                            } else if($capval == "Barcode" || $capval == "Part No" || $capval == "Secondary Code" ){

                                            }  else {
                                                $details1[$capval] = $capval;
                                                $a++;
                                            }
                                        }
                                        $data['details'][] = $details1;
                                        $i++;
                                        $this->excel->getActiveSheet()->getStyle('A' . $i . ':AA'. $i)->getFont()->setBold(true)->setSize(11)->setName('Calibri');
                                        $this->excel->getActiveSheet()->getStyle('A' . $i . ':AA'. $i)->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

                                        $details2 = array();
                                        foreach ($caption as $capval) {
                                            if ($capval == "Local Currency") {
                                                $details2[$capval] =  'WAC';
                                                $details2[$capval.'val'] =  $this->lang->line('transaction_asset_value');
                                            } else if ($capval == "Rpt Currency") {
                                                $details2[$capval] =  'WAC';
                                                $details2[$capval.'val'] =  $this->lang->line('transaction_asset_value');
                                            } else if ($capval == "Secondary QTY") {
                                                if($secondaryUOM==1) {
                                                    $details2[$capval] = '  ';
                                                }
                                            }else if($capval == "Barcode" || $capval == "Part No" || $capval == "Secondary Code" ){

                                            } else {
                                                $details2[$capval] = '   ';
                                            }
                                        }
                                        $data['details'][] = $details2;
                                        $i++;
                                        $this->excel->getActiveSheet()->getStyle('A' . $i . ':AA'. $i)->getFont()->setBold(true)->setSize(11)->setName('Calibri');
                                        $this->excel->getActiveSheet()->getStyle('A' . $i . ':AA'. $i)->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

                                        /** Document Details View*/
                                        $total = 0;
                                        $totalQty = 0;
                                        $SumtotalQty = 0;
                                        $localAssetvalue = 0;
                                        $rptAssetvalue = 0;

                                        foreach ($item['t'] as $key5 => $val5) {
                                            $docDetails = array();
                                            foreach ($fieldNameDetails as $key => $value) {
                                                if ($value["fieldName"] == "transactionQTY") {
                                                    $totalQty += $val5[$value["fieldName"]];
                                                }
                                                if ($value["fieldName"] == "SUOMQty") {
                                                    if($secondaryUOM==1) {
                                                        $SumtotalQty += $val5[$value["fieldName"]];
                                                    }
                                                }
                                                if ($value["isDecimalPlaceAllowed"]) {
                                                    if ($value["fieldName"] == "companyLocalWacAmount") {
                                                        $docDetails[$value["fieldName"] . 'wac'] = number_format((float)$val5["avgCompanyLocalAmount"], $val5[$value["fieldName"] . 'DecimalPlaces'], '.', '');
                                                        $localAssetvalue += $val5["localCostAsset"];
                                                        $grandTotalLocal += $val5["localCostAsset"];
                                                    } else if ($value["fieldName"] == "companyReportingWacAmount") {
                                                        $docDetails[$value["fieldName"] . 'wac'] = number_format((float)$val5["avgCompanyReportingAmount"], $val5[$value["fieldName"] . 'DecimalPlaces'], '.', '');
                                                        $rptAssetvalue += $val5["rptCostAsset"];
                                                        $grandTotalRpt += $val5["rptCostAsset"];
                                                    } /*else if($value["fieldName"] == "barcode" || $value["fieldName"] == "partNo" || $value["fieldName"] == "seconeryItemCode" ){

                                                    } */else {
                                                        //echo $value["fieldName"];
                                                        $docDetails[$value["fieldName"]] = number_format((float)$val5[$value["fieldName"]], 2, '.', '');
                                                    }
                                                } else {
                                                    if ($value["fieldName"] == "documentSystemCode") {
                                                        $docDetails[$value["fieldName"]] = $val5[$value["fieldName"]];
                                                    } else {
                                                        if ($value["fieldName"] == "documentDate" && ($val5[$value["fieldName"]] == '1970-01-01' || $val5[$value["fieldName"]] == '')) {
                                                            $docDetails[$value["fieldName"]] = '-';
                                                        } else if ($value["fieldName"] == "documentDate") {
                                                            $docDetails[$value["fieldName"]] = convert_date_format($val5[$value["fieldName"]]);
                                                        } else if($value["fieldName"] == "barcode" || $value["fieldName"] == "partNo" || $value["fieldName"] == "seconeryItemCode" ){

                                                        }else {
                                                            $val5[$value["fieldName"]] = str_replace("<br>","        ",(string)$val5[$value["fieldName"]]);
                                                            $val5[$value["fieldName"]] = str_replace("&nbsp;","  ",(string)$val5[$value["fieldName"]]);
                                                            $docDetails[$value["fieldName"]] = $val5[$value["fieldName"]];
                                                        }
                                                    }
                                                }
                                                if ($value["fieldName"] == "companyLocalWacAmount") {
                                                    $docDetails[$value["fieldName"]] = number_format((float)$val5["localCostAsset"], $val5[$value["fieldName"] . 'DecimalPlaces'], '.', '');
                                                }
                                                if ($value["fieldName"] == "companyReportingWacAmount") {
                                                    $docDetails[$value["fieldName"]] = number_format((float)$val5["rptCostAsset"], $val5[$value["fieldName"] . 'DecimalPlaces'], '.', '');
                                                }
                                            }

                                            $data['details'][] = $docDetails;
                                            $i++;
                                        }
                                    }

                                    /** Total Calculation*/
                                    $total=array();
                                    if($secondaryUOM==1) {
                                        $numeric = ($qtyKey-2) % 26;
                                        $letter1 = chr(65 + $numeric);
                                        $this->excel->getActiveSheet()->mergeCells('A'. ($i + 1).':'. $letter1 . ($i + 1));
                                        $total['Total'] = $this->lang->line('common_total');
                                        $x = $qtyKey-2;
                                        while ($x > 0) {
                                            $total[$x] = '    ';
                                            $x--;
                                        }
                                        $total['SecQtyTot'] = number_format((float)$SumtotalQty, 2, '.', '');
                                        $total['transQtyTot'] = number_format((float)$totalQty, 2, '.', '');
                                    }else{
                                        $numeric = ($qtyKey-2) % 26;
                                        $letter1 = chr(65 + $numeric);
                                        $this->excel->getActiveSheet()->mergeCells('A'. ($i + 1).':'. $letter1 . ($i + 1));
                                        $total['Total'] = $this->lang->line('common_total');
                                        $x = $qtyKey-1;
                                        while ($x > 0) {
                                            $total[$x] = '    ';
                                            $x--;
                                        }
                                        $total['transQtyTot'] = number_format((float)$totalQty, 2, '.', '');
                                    }
                                    if ($isLocalCost) {
                                        $total['localWacTot'] = '   ';
                                        $total['localAssetTot'] = number_format((float)$localAssetvalue, $this->common_data['company_data']['company_default_decimal'], '.', '');
                                    }
                                    if ($isRptCost) {
                                        $total['rptWacTot'] = '   ';
                                        $total['rptAssetTot'] = number_format((float)$rptAssetvalue, $this->common_data['company_data']['company_reporting_decimal'], '.', '');
                                    }

                                    $data['details'][] = $total;
                                    $i++;
                                }
                            }
                        }
                    }
                }

                /** Grand Total Calculation*/
                $grandTot = array();
                if ($isLocalCost) {
                    $numeric = ($locKey-1) % 26;
                    $letter1 = chr(65 + $numeric);
                    $this->excel->getActiveSheet()->mergeCells('A'. ($i + 1).':'. $letter1 . ($i + 1));
                    $grandTot['Total'] = $this->lang->line('common_grand_total');
                    $x = $locKey;
                    while ($x > 0) {
                        $grandTot[$x] = '    ';
                        $x--;
                    }
                    $grandTot['GrndTotLoc'] = number_format($grandTotalLocal, $this->common_data['company_data']['company_default_decimal'], '.', '');

                } else if ($isRptCost) {
                    $numeric = ($rptKey-1) % 26;
                    $letter1 = chr(65 + $numeric);
                    $this->excel->getActiveSheet()->mergeCells('A'. ($i + 1).':'. $letter1 . ($i + 1));
                    $grandTot['Total'] = $this->lang->line('common_grand_total');
                    $x = $rptKey;
                    while ($x > 0) {
                        $grandTot[$x] = '    ';
                        $x--;
                    }
                }

                if ($isRptCost) {
                    if ($isLocalCost && $isRptCost) {
                        $grandTot['wac1'] = '   ';
                        $grandTot['GrndTotRpt'] = number_format((float)$grandTotalRpt, $this->common_data['company_data']['company_reporting_decimal'], '.', '');
                    } else {
                        $grandTot['GrndTotRpt'] = number_format((float)$grandTotalRpt, $this->common_data['company_data']['company_reporting_decimal'], '.', '');
                    }
                }
                $data['details'][] = $grandTot;
                $i++;
            }
        }

        $header = array();
        if(!empty($data['details'])) {
            $header = $data['details'];
        }
        $this->excel->getActiveSheet()->fromArray($header, null, 'A6');
        $filename = 'Item Ledger Report.xls'; //save our workbook as this file name
        header('Content-Type: application/vnd.ms-excel;charset=utf-16'); //mime type
        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name
        header('Cache-Control: max-age=0'); //no cache

        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function get_accounts_receivable_customer_statement_group_report_buyback($overdue = false)
    {
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $customer = $this->input->post("customerTo");
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "groupCustomerMasterID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $customerIN = "";
        if (!empty($customer)) {

                $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }





        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL(( cvd.transactionAmount ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    //$fields11 .= '(SUM((ROUND(((salesPrice/srp_erp_salesreturnmaster.companyReportingExchangeRate) + (((totalAfterTax/srp_erp_customerinvoicemaster.companyReportingExchangeRate)/requestedQty) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty)) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';

                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyReportingExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyReportingExchangeRate)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyLocalExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyLocalExchangeRate)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';
                }
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields .= 'TRIM(TRAILING 0 FROM (ROUND(( TRIM(TRAILING 0 FROM	(ROUND( SUM( srp_erp_customerinvoicemaster.' . $val . ' ), 2 ))) - (TRIM(TRAILING 0 FROM(ROUND(IFNULL( TRIM( TRAILING 0 FROM ( ROUND( SUM( pvd.' . $val . ' ), 2 ))), 0 )+ IFNULL( TRIM( TRAILING 0 FROM ( ROUND( SUM( cnd.' . $val . ' ), 2 ))), 0 )+ IFNULL( TRIM( TRAILING 0 FROM ( ROUND( SUM( ca.' . $val . ' ), 2 ))), 0 ),2 ))))), 2 ))) as ' . $val . ',';

//                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields2 .= '(TRIM(TRAILING 0 FROM (ROUND(TRIM(	TRAILING 0 	FROM( ROUND(SUM( srp_erp_customerreceiptdetail.' . $val . ' ), 2 ))) - IFNULL(TRIM(TRAILING 0 FROM (ROUND(SUM( avd.' . $val . ' ), 2 ))), 0 ), 2 )))) * - 1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'ROUND(a.' . $val . ', a.' . $val . 'DecimalPlaces) AS rowCheck,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
//                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields8 .= '( TRIM(TRAILING 0 FROM (ROUND(TRIM(TRAILING 0 FROM (ROUND(SUM( srp_erp_creditnotedetail.' . $val . ' ), 2 ))) - IFNULL(cvd.' . $val . ',0), 2 )))) * - 1  as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.referenceNo FROM
(
(

SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,dc.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
 INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode,customerAddress1 FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE $customerOR  AND srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_customerinvoicemaster.customerID = cust.customerMasterID
 LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_customerinvoicemaster.documentID)
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN ( " . join(",", $company) . ") GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID = coa.chartofAccountID
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE `srp_erp_customerinvoicemaster`.`companyID` IN ( " . join(",", $company) . ")  AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))






 UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,dc.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName as customerName,cust.groupcustomerSystemCode as customerSystemCode,'Advance' as comments,srp_erp_customerreceiptmaster.documentID,'-' as invoiceDueDate,srp_erp_customerreceiptmaster.RVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerreceiptmaster.RVCode as bookingInvCode,`srp_erp_customerreceiptmaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID`IN ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
INNER JOIN ( SELECT groupCustomerAutoID,groupCustomerName,customerMasterID,groupcustomerSystemCode,customerAddress1 FROM srp_erp_groupcustomermaster INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID WHERE $customerOR AND srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . ") cust ON srp_erp_customerreceiptmaster.customerID = cust.customerMasterID
 INNER JOIN ( SELECT chartofAccountID,GLSecondaryCode,GLDescription FROM srp_erp_groupchartofaccounts INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID AND groupID = " . current_companyID() . ") coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID
LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID) dc ON (dc.documentID = srp_erp_customerreceiptmaster.documentID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE `srp_erp_customerreceiptmaster`.`approvedYN` = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 )






  UNION ALL
 (
 SELECT $fields8
srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
cust.customerAddress1 AS customerAddress,
cust.groupCustomerName AS customerName,
cust.groupcustomerSystemCode AS customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' AS invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID AS customerID,
DATEDIFF( '" . format_date($this->input->post("from")) . "', srp_erp_creditnotemaster.creditNoteDate ) AS age,
'-' AS referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
	AND `srp_erp_creditnotedetail`.`companyID` IN (  " . join(",", $company) . " )
	LEFT JOIN (
	SELECT
		$fields4 creditNoteAutoID
	FROM
		`srp_erp_customerreceiptdetail`
		LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` IN (  " . join(",", $company) . " )
		AND srp_erp_customerreceiptmaster.approvedYN = 1
		AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		AND type = 'creditnote'
	GROUP BY
		creditNoteAutoID
	) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	INNER JOIN (
	SELECT
		groupCustomerAutoID,
		groupCustomerName,
		customerMasterID,
		groupcustomerSystemCode,
		customerAddress1
	FROM
		srp_erp_groupcustomermaster
		INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
	WHERE
		( $customerOR )
		AND srp_erp_groupcustomerdetails.companygroupID = 1
	) cust ON srp_erp_creditnotemaster.customerID = cust.customerMasterID
	LEFT JOIN ( SELECT GLSecondaryCode, GLDescription, GLAutoID FROM srp_erp_chartofaccounts WHERE companyID IN (  " . join(",", $company) . " ) GROUP BY GLAutoID ) srp_erp_chartofaccounts ON ( srp_erp_chartofaccounts.GLAutoID = srp_erp_creditnotemaster.customerreceivableAutoID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN ( SELECT document, documentID FROM srp_erp_documentcodemaster WHERE companyID IN (  " . join(",", $company) . " ) GROUP BY documentID ) srp_erp_documentcodemaster ON ( srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID )
WHERE
	`srp_erp_creditnotemaster`.`approvedYN` = 1

	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` IN (  " . join(",", $company) . " )
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
 )







   UNION ALL (
      	SELECT
		$fields11
		srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
		srp_erp_documentcodemaster.document,
		cust.customerAddress1 AS customerAddress,
		cust.groupCustomerName AS customerName,
		cust.groupcustomerSystemCode AS customerSystemCode,
		srp_erp_salesreturnmaster.`comment` AS comments,
		srp_erp_salesreturnmaster.documentID,
		'-' AS invoiceDueDate,
		srp_erp_salesreturnmaster.returnDate AS bookingDate,
		srp_erp_chartofaccounts.GLSecondaryCode,
		srp_erp_chartofaccounts.GLDescription,
		srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
		`srp_erp_salesreturnmaster`.customerID AS customerID,
		DATEDIFF('" . format_date($this->input->post("from")) . "', srp_erp_salesreturnmaster.returnDate ) AS age,
		'-' AS referenceNo
	FROM
		srp_erp_salesreturnmaster
		INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		AND srp_erp_salesreturnmaster.`companyID` IN ( " . join(",", $company) . ")
		LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
	    LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID  AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
		LEFT JOIN (
		SELECT
			$fields4
			creditNoteAutoID
		FROM
			`srp_erp_customerreceiptdetail`
			LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
		WHERE
			`srp_erp_customerreceiptdetail`.companyID IN ( " . join(",", $company) . ")
			AND srp_erp_customerreceiptmaster.approvedYN = 1
			AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
			AND type = 'SLR'
		GROUP BY
			creditNoteAutoID
		) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
		INNER JOIN (
		SELECT
			groupCustomerAutoID,
			groupCustomerName,
			customerMasterID,
			groupcustomerSystemCode,
			customerAddress1
		FROM
			srp_erp_groupcustomermaster
			INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
		WHERE
			$customerOR
			AND srp_erp_groupcustomerdetails.companygroupID = 1
		) cust ON srp_erp_salesreturnmaster.customerID = cust.customerMasterID
		LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
		AND `srp_erp_chartofaccounts`.companyID IN ( " . join(",", $company) . ")
		LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
		LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
		LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
		LEFT JOIN (
		            SELECT document, documentID FROM srp_erp_documentcodemaster WHERE companyID IN ( " . join(",", $company) . ") GROUP BY documentID
		) srp_erp_documentcodemaster ON ( srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID )

	WHERE
		 `srp_erp_salesreturnmaster`.`approvedYN` = 1
		AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
		AND `srp_erp_salesreturnmaster`.companyID IN ( " . join(",", $company) . ")
	GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
  )

  $fields7) as a $where $fields7")->result_array();
        //echo $this->db->last_query(); exit;
        return $result;
    }

    function get_accounts_receivable_customer_statement_report_postdated_rebate($overdue = false)
    {
        $where = "";
        $companyID = current_companyID();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        /* Acknowledgement Group by based on Policy - */
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $retentionamount = "";
        $fieldrebate = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate ) -'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0)';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate )-'.$fieldrebate_sales_return.' - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount . ' - ' . $fieldrebate . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',' . $fieldrebate . ' as rebateAmount, ';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.rebateAmount AS rebateAmount, a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,'1' as type,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN (
SELECT
    $fields9
    invoiceAutoID,
    srp_erp_salesreturndetails.salesReturnAutoID
FROM
    srp_erp_salesreturndetails
INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
WHERE
    `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
GROUP BY
    srp_erp_salesreturndetails.invoiceAutoID
) srnd ON (
srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2
 '0' AS rebateAmount,
 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
 ) UNION ALL
 ( SELECT
$fields8
'0' AS rebateAmount,
srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
$fields11
    '0' AS rebateAmount,
    srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();


        $postdatedcheque = $this->db->query("SELECT
	$fields_postdated
	$fields_postdated_cheque_tot
    '0' AS rebateAmount,
	receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
	doccode.document AS document,
	\"-\" as age,
	\"-\" as invoiceDueDate,
	customermaster.customerAddress1,
	customermaster.customerName,
	customermaster.customerSystemCode,
	receiptmastertbl.RVNarration as comments,
	receiptmastertbl.documentID as documentID,
	DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	receiptmastertbl.RVcode as bookingInvCode,
	receiptmastertbl.customerID,
	'2' as type,
	'-' as referenceNo
FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
	LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
    SUM( transactionAmount ) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `receiptmastertbl`.`customerID`
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN srp_erp_customermaster customermaster ON customermaster.customerAutoID = receiptmastertbl.customerID
	LEFT JOIN srp_erp_chartofaccounts ON customermaster.receivableAutoID = srp_erp_chartofaccounts.GLAutoID
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
	$customerORout
	AND receiptmastertbl.companyID = '{$companyID}'
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId")->result_array();

//        echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));
    }

    function get_accounts_receivable_customer_statement_report_rebate($overdue = false)
    {
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        /* Acknowledgement Group by based on Policy - */
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $retentionamount = "";
        $fieldrebate = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        $fieldrebate_sales_return = "";
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldrebate_sales_return = 'IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)';
                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '((SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 ) as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0)';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyReportingExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fieldrebate_sales_return = '(IFNULL(sum(srp_erp_salesreturndetails.rebateAmount),0)/ srp_erp_salesreturnmaster.companyLocalExchangeRate)';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount.' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',' . $fieldrebate . ' AS rebateAmount, ';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields3 .= 'ROUND(a.' . $val . ', a.' . $val . 'DecimalPlaces) AS rowCheck,';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.rebateAmount AS rebateAmount,a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,a.referenceNo FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,srp_erp_customermaster.customerAddress1 as customerAddress,srp_erp_customermaster.customerName,srp_erp_customermaster.customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,srp_erp_chartofaccounts.GLSecondaryCode,srp_erp_chartofaccounts.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,		srp_erp_customerinvoicemaster.referenceNo AS referenceNo
FROM `srp_erp_customerinvoicemaster`
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerinvoicemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerinvoicemaster.customerReceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
 UNION ALL (
 SELECT $fields2
 '0' AS rebateAmount,
 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
 srp_erp_documentcodemaster.document,
 srp_erp_customermaster.customerAddress1 as customerAddress,
 srp_erp_customermaster.customerName,
 srp_erp_customermaster.customerSystemCode,
 'Advance' as comments,
 srp_erp_customerreceiptmaster.documentID,
 '-' as invoiceDueDate,
 srp_erp_customerreceiptmaster.RVDate as bookingDate,
 srp_erp_chartofaccounts.GLSecondaryCode,
 srp_erp_chartofaccounts.GLDescription,
 srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
 `srp_erp_customerreceiptmaster`.`customerID` as customerID,
 DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
 referanceNo as referenceNo
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customerreceiptmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID` AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` HAVING (" . join(' AND ', $having) . ")
 ) UNION ALL
 ( SELECT
$fields8
'0' AS rebateAmount,
srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
srp_erp_documentcodemaster.document,
srp_erp_customermaster.customerAddress1 as customerAddress,
srp_erp_customermaster.customerName,
srp_erp_customermaster.customerSystemCode,
srp_erp_creditnotemaster.comments,
srp_erp_creditnotemaster.documentID,
'-' as invoiceDueDate,
srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
srp_erp_chartofaccounts.GLSecondaryCode,
srp_erp_chartofaccounts.GLDescription,
srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
`srp_erp_creditnotemaster`.customerID as customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
'-' as referenceNo
FROM
	srp_erp_creditnotemaster
	INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
	AND `srp_erp_creditnotedetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_creditnotemaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_creditnotemaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
	)

	UNION ALL
 ( SELECT
    $fields11
    $fieldrebate_sales_return  AS rebateAmount,
    srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
	srp_erp_documentcodemaster.document,
	srp_erp_customermaster.customerAddress1 AS customerAddress,
	srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_salesreturnmaster.`comment`,
	srp_erp_salesreturnmaster.documentID,
	'-' AS invoiceDueDate,
	srp_erp_salesreturnmaster.returnDate AS bookingDate,
	srp_erp_chartofaccounts.GLSecondaryCode,
	srp_erp_chartofaccounts.GLDescription,
	srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
	`srp_erp_salesreturnmaster`.customerID AS customerID,
DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
'-' as referenceNo
FROM
	srp_erp_salesreturnmaster
	INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
	LEFT JOIN `srp_erp_customermaster` ON `srp_erp_salesreturnmaster`.`customerID` = `srp_erp_customermaster`.`customerAutoID`
	AND `srp_erp_customermaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_salesreturnmaster.customerreceivableAutoID = srp_erp_chartofaccounts.GLAutoID
	AND `srp_erp_chartofaccounts`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
	LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID = " . $this->common_data['company_data']['company_id'] . "
WHERE
	$customerOR
	AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
	AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
	AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
GROUP BY
	`srp_erp_salesreturnmaster`.`salesReturnAutoID`
	)

	$fields7) as a $where $fields7")->result_array();
        //echo $this->db->last_query();
        return $result;
    }
    function get_group_segment_fin()
    {
        $segment = $this->input->post('segment');
        $segmentfilter = '';
        if($segment)
        {
            $segmentfilter = join(',', $segment);
        }
        $companyid = current_companyID();
        $result = $this->db->query("SELECT
		CONCAT(srp_erp_groupsegment.segmentCode,' | ',srp_erp_groupsegment.description) as description
FROM
	`srp_erp_groupsegment`
	INNER JOIN srp_erp_groupsegmentdetails on srp_erp_groupsegmentdetails.groupSegmentID = srp_erp_groupsegment.segmentID
	LEFT JOIN srp_erp_segment on srp_erp_segment.segmentID =srp_erp_groupsegment.segmentID
WHERE
	groupID = $companyid
	AND srp_erp_segment.segmentID IN ($segmentfilter)
	GROUP BY
	srp_erp_groupsegment.segmentID ")->result_array();
        $result = array_column($result, 'description');
        return $result;
    }

    function get_accounts_receivable_customer_ledger_group_report_postdated_cheques(){
        $customer = $this->input->post("customerTo");
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected vendor*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';


        $feilds = "";
        $feilds2 = "";
        $feildscurrency = "";
        $feildsdecimal = "";
        $amount = "";
        $currencyid =
        $currencydoc = "";
        $feilds3 = " ORDER BY a.documentDate";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) { /*generate the query according to selectd columns*/
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds3 = " ORDER BY a.documentDate,a.transactionCurrency";
                    $currencyid = $this->common_data['company_data']['company_default_currencyID'];
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                }
                $feilds .= " SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
                $feilds2 .= " a." . $val . "DecimalPlaces,";
            }
        }

        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val1) { /*generate the query according to selectd columns*/
                if ($val1 == "transactionAmount") {
                    $feildscurrency .= " TC.CurrencyCode AS transactionCurrency,";
                    $feildsdecimal .= " TC.DecimalPlaces AS " . $val1 . "DecimalPlaces,";
                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate) AS transactionAmount,";

                }
                if ($val1 == "companyLocalAmount") {
                    /*$feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";*/
                    //$feildscurrency .= " TC.CurrencyCode AS transactionCurrency,";
                    $feildsdecimal .= " CL.DecimalPlaces AS " . $val1 . "DecimalPlaces,";

                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate) AS companyLocalAmount,";
                }
                if ($val1 == "companyReportingAmount") {
                    $feildsdecimal .= " CR.DecimalPlaces AS " . $val1 . "DecimalPlaces,";
                    $amount .= "((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate) AS companyReportingAmount,";

                }
                /* $feilds .= " SUM(srp_erp_generalledger." . $val . ") AS " . $val . ",";
                 $feilds2 .= " a." . $val . " AS " . $val . ",";
                 $feilds2 .= " a." . $val . "DecimalPlaces,";*/
            }
        }


        $result = $this->db->query("SELECT $feilds2 a.document,a.documentMasterAutoID,
    DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.customerName,a.customerSystemCode,a.GLSecondaryCode,a.GLDescription,'1' AS type,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
     ((SELECT $feilds srp_erp_documentcodemaster.document,srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,cust.groupCustomerName AS customerName, cust.groupcustomerSystemCode AS customerSystemCode, coa.GLSecondaryCode, coa.GLDescription, cus.referenceNo,cus.invoiceDueDate FROM srp_erp_generalledger
    INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID FROM srp_erp_groupcustomermaster
				INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
				WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
				) cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
    INNER JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
    LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_generalledger.documentCode  AND srp_erp_documentcodemaster.companyID IN ( " . join(",", $company) . ")
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    LEFT JOIN srp_erp_customerinvoicemaster cus on cus.invoiceAutoID = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'CINV'
    WHERE $customerOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN ( " . join(",", $company) . ") GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
    UNION ALL
    (SELECT $feilds '' as document,srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,cust.groupCustomerName AS customerName, cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode, coa.GLDescription,'' as referenceNo,'' as invoiceDueDate FROM srp_erp_generalledger
    INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID FROM srp_erp_groupcustomermaster
				INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
				WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
				) cust ON srp_erp_generalledger.partyAutoID = cust.customerMasterID AND srp_erp_generalledger.subLedgerType = 3	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
    INNER JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_generalledger.GLAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
    LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
    WHERE $customerOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID IN  ( " . join(",", $company) . ")
    GROUP BY srp_erp_generalledger.GLAutoID,cust.groupCustomerAutoID)) AS a
      $feilds3")->result_array();


    $resultpostdatedcheques = $this->db->query("SELECT
            $feildscurrency
            $amount
            $feildsdecimal
            doccode.document AS document,
            receiptmastertbl.receiptVoucherAutoId AS documentMasterAutoID,
            DATE_FORMAT( RVdate, '%d-%m-%Y' ) AS documentDate,
            receiptmastertbl.documentID AS documentCode,
            RVcode AS documentSystemCode,
            RVNarration AS documentNarration,
            customermaster.groupCustomerName AS customerName,
            customermaster.groupcustomerSystemCode AS customerSystemCode,
            coa.GLSecondaryCode AS GLSecondaryCode,
            coa.GLDescription AS GLDescription,
            '2' AS type,
            referanceNo AS referenceNo,
            '' AS invoiceDueDate
        FROM
            srp_erp_customerreceiptmaster receiptmastertbl
            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS inAd,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"Invoice\"
            or srp_erp_customerreceiptdetail.type = \"Advance\"
            or srp_erp_customerreceiptdetail.type = \"GL\"
        GROUP BY
            receiptVoucherAutoId
            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS dbnAmount,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"creditnote\"
            or srp_erp_customerreceiptdetail.type = \"SR\"
        GROUP BY
            receiptVoucherAutoId
            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId

            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID FROM srp_erp_groupcustomermaster
                        INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                        WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                        ) cust ON receiptmastertbl.customerID = cust.customerMasterID

            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID

            INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID,receivableAutoID FROM srp_erp_groupcustomermaster
                        INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                        WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                        ) customermaster ON receiptmastertbl.customerID = customermaster.customerMasterID
            INNER JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription,companyID GLAutoID FROM srp_erp_groupchartofaccounts
                        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                        WHERE groupID = " . current_companyID() . "
                        ) coa ON  customermaster.receivableAutoID = coa.chartofAccountID


            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
        WHERE
        $customerORout
        AND receiptmastertbl.companyID IN  ( " . join(",", $company) . ")
        AND receiptmastertbl.modeOfPayment = 2
        AND receiptmastertbl.confirmedYN = 1
        AND receiptmastertbl.approvedYN != 1
        AND RVchequeNo <> '' AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' ) GROUP BY receiptmastertbl.receiptVoucherAutoId")->result_array();
        return $result_arr = (array_merge($result, $resultpostdatedcheques));

    }

    function get_accounts_receivable_customer_statement_group_report_postdated_buyback(){
        $where = "";
        //$companyID = current_companyID();
        $company = $this->get_group_company();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        /*if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }*/
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }
        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $having_field = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL(( cvd.transactionAmount ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyReportingExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyReportingExchangeRate)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND(((salesPrice/srp_erp_salesreturnmaster.companyLocalExchangeRate) + ((((IFNULL(taxAmount,0))/srp_erp_customerinvoicemaster.companyLocalExchangeRate)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL(( cvd.' . $val . ' ), 0 )) *-1 AS ' . $val . ',';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
                $having_field  = 'HAVING ( ROUND('.$val.',2)!= 0 AND ROUND('.$val.',2)!=-0)';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,'1' as type,a.referenceNo FROM
            ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.invoiceDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
            FROM `srp_erp_customerinvoicemaster`
            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            LEFT JOIN
            (
                SELECT
                    $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                FROM
                    srp_erp_customerreceiptdetail
                    INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
            ) pvd ON (
                pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                FROM
                    srp_erp_creditnotedetail
                    INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
            ) cnd ON (
                cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
            )



            LEFT JOIN(
            SELECT
            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")
                AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
                GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                ca ON (
                ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
            WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
             UNION ALL (
             SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
             srp_erp_documentcodemaster.document,
             cust.customerAddress1 as customerAddress,
             cust.groupCustomerName AS customerName,
             cust.groupcustomerSystemCode AS customerSystemCode,
             'Advance' as comments,
             srp_erp_customerreceiptmaster.documentID,
             '-' as invoiceDueDate,
             srp_erp_customerreceiptmaster.RVDate as bookingDate,
             coa.GLSecondaryCode,
             coa.GLDescription,
             srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
             `srp_erp_customerreceiptmaster`.`customerID` as customerID,
             DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
             '-' as referenceNo
             FROM srp_erp_customerreceiptmaster
            INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
            LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                    FROM srp_erp_rvadvancematchdetails
                    INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")
                AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'

                     GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                    ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
            WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
             ) UNION ALL
             ( SELECT
            $fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
            srp_erp_documentcodemaster.document,
             cust.customerAddress1 as customerAddress,
             cust.groupCustomerName AS customerName,
             cust.groupcustomerSystemCode AS customerSystemCode,
            srp_erp_creditnotemaster.comments,
            srp_erp_creditnotemaster.documentID,
            '-' as invoiceDueDate,
            srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
            coa.GLSecondaryCode,
             coa.GLDescription,
            srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
            `srp_erp_creditnotemaster`.customerID as customerID,
            DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
            '-' as referenceNo
            FROM
                srp_erp_creditnotemaster
                INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
                AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
                LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
                LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
                LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            WHERE
                $customerOR
                AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
                AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")
            GROUP BY
                `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                )

                UNION ALL
             ( SELECT
            $fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
                srp_erp_documentcodemaster.document,
                 cust.customerAddress1 as customerAddress,
                 cust.groupCustomerName AS customerName,
                 cust.groupcustomerSystemCode AS customerSystemCode,
                 coa.GLSecondaryCode,
                 coa.GLDescription,
                srp_erp_salesreturnmaster.`comment`,
                srp_erp_salesreturnmaster.documentID,
                '-' AS invoiceDueDate,
                srp_erp_salesreturnmaster.returnDate AS bookingDate,
                srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
                `srp_erp_salesreturnmaster`.customerID AS customerID,
            DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
            '-' as referenceNo
            FROM
                srp_erp_salesreturnmaster
                INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                LEFT JOIN (
                        SELECT $fields4 creditNoteAutoID
                        FROM
                            `srp_erp_customerreceiptdetail`
                        LEFT JOIN
                            srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                        WHERE
                            `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")
                            AND srp_erp_customerreceiptmaster.approvedYN = 1
                            AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                            AND type = 'SLR'
                        GROUP BY
                            creditNoteAutoID
                ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

                LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
                LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
                LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            WHERE
                $customerOR
                AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
                AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
                AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ")
            GROUP BY
                `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                )

                $fields7) as a $where $having_field $fields7")->result_array();
        //echo $this->db->last_query(); exit;

        $postdatedcheque = $this->db->query("SELECT
            $fields_postdated
            $fields_postdated_cheque_tot
            receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
            doccode.document AS document,
            \"-\" as age,
            \"-\" as invoiceDueDate,
             customermaster.customerAddress1 as customerAddress,
             customermaster.groupCustomerName AS customerName,
             customermaster.groupcustomerSystemCode AS customerSystemCode,
            receiptmastertbl.RVNarration as comments,
            receiptmastertbl.documentID as documentID,
            DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            receiptmastertbl.RVcode as bookingInvCode,
            receiptmastertbl.customerID,
            '2' as type,
            '-' as referenceNo
        FROM
            srp_erp_customerreceiptmaster receiptmastertbl
            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS inAd,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"Invoice\"
            or srp_erp_customerreceiptdetail.type = \"Advance\"
        GROUP BY
            receiptVoucherAutoId
            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS dbnAmount,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"creditnote\"
            or srp_erp_customerreceiptdetail.type = \"SR\"
        GROUP BY
            receiptVoucherAutoId
            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID FROM srp_erp_groupcustomermaster
                        INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                        WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                        ) cust ON `receiptmastertbl`.`customerID` = cust.customerMasterID
            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
            INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode, companyID,receivableAutoID,customerAddress1 FROM srp_erp_groupcustomermaster
                        INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                        WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                        ) customermaster ON receiptmastertbl.customerID = customermaster.customerMasterID
            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                        WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
        WHERE
            $customerORout
            AND receiptmastertbl.companyID IN  ( " . join(",", $company) . ")
            AND receiptmastertbl.modeOfPayment = 2
            AND receiptmastertbl.confirmedYN = 1
            AND receiptmastertbl.approvedYN != 1
            AND RVchequeNo <> ''
            AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
        GROUP BY
            receiptmastertbl.receiptVoucherAutoId")->result_array();

        //echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));

    }

    function get_accounts_receivable_customer_aging_summary_group_report()
    {
        $company = $this->get_group_company();
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $fields12 = "";
        $fields3_age = '';
        $fieldretention = "";
        $fieldrebate = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldretention .= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fieldretention .= '0';
                    $fieldrebate .= '0';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . '- '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields12 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }
        $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as referenceNo,invoiceDueDate,a.CustomerID as customerID,a.age	 FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,
coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceNarration as comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,CustomerID FROM `srp_erp_customerinvoicemaster`
LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
		AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID`  IN ( " . join(",", $company) . ") GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
    INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
    WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN ( " . join(",", $company) . ") AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,'Advance' as comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` as customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields12 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
    INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
    WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
    INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
    WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
    ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields8
`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
srp_erp_creditnotemaster.creditNoteCode AS documentCode,srp_erp_creditnotemaster.creditNoteDate AS documentDate, cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,srp_erp_creditnotemaster.comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo, `srp_erp_creditnotemaster`.`customerID` AS customerID
  FROM srp_erp_creditnotemaster
INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN ( " . join(",", $company) . ")
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND approvedYN = 1 AND type='creditnote' GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
    INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
    WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID   = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")


LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
    INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
    WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
    ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN( " . join(",", $company) . ") GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


UNION ALL (
SELECT $fields11
`srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
srp_erp_salesreturnmaster.salesReturnCode AS documentCode, srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,srp_erp_salesreturnmaster.comment,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,`srp_erp_salesreturnmaster`.`customerID` AS customerID
  FROM srp_erp_salesreturnmaster
INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                    LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                        WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR' GROUP BY creditNoteAutoID
            ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")


LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
)
) as a GROUP BY a.documentCode,a.invoiceAutoID,a.documentID) as tbl1
	GROUP BY
    tbl1.invoiceAutoID,tbl1.documentID) t2
    GROUP BY
    t2.customerSystemCode,
	t2.currency
")->result_array();

        //echo $this->db->last_query();

        //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_receivable_customer_aging_summary_group_report_pdc(){
        $customer = $this->input->post("customerTo");
        //$companyid = current_companyID();
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $k = 1;
        $customerORoutput = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORoutput .= ' OR ';
                }
                $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORoutput .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_currency = "";
        $fields_currency_decimal = "";
        $fields_currency_amt = "";
        $fields3 = "";
        $fields3_age = "";
        $fields3_details = "";
        $curre = "";
        $fields3_pdc_new_qu = "";
        $fields3_pdc_total = "";
        $pdc_total_code = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $fields12 = "";
        $fieldretention = "";
        $fieldrebate = "";
        $pdc_totalcurr = "";
        $fields3_aging_pdc = "";
        $having = array();
        $groupBy = array();
        $fields3_amount_total_pdc = '';
        $fields3_amount_total_pdc_uni = '';
        $fields_decimalplaces = '';
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_currency .= 'CR.CurrencyCode';
                    $fields_currency_decimal .= 'CR.DecimalPlaces';
                    $fields_currency_amt .= 'companyReportingAmount';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $pdc_total_code .= 'companyReportingAmountPDC';
                    $curre .= 'companyReportingCurrency';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionReportingAmount,0)';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $pdc_totalcurr .= '0 as companyReportingAmount';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currency .= 'CL.CurrencyCode';
                    $fields_currency_decimal .= 'CL.DecimalPlaces';
                    $fields_currency_amt .= 'companyLocalAmount';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $curre .= 'companyLocalCurrency';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';
                    $pdc_total_code .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionLocalAmount,0)';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $pdc_totalcurr .= '0 as companyLocalAmount';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldretention .= '0';
                    $fieldrebate .= '0';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                    $fields_currency .= 'TC.CurrencyCode';
                    $fields_currency_decimal .= 'TC.DecimalPlaces';
                    $fields_currency_amt .= 'transactionAmount';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $pdc_total_code .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $pdc_totalcurr .= '0 as transactionAmount';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
//                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields3 .= 'a.age,';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields12 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,SUM(t2." . $val . "PDC) as " . $val . "PDCT,";
                $fields3_details .= "0 as `current`,";
                $fields3_pdc_new_qu .= " `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }
        $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate,a.CustomerID as customerID	 FROM
((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceNarration as comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,CustomerID FROM `srp_erp_customerinvoicemaster`
LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
    INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
    WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
    ) cust ON `srp_erp_customerinvoicemaster`.`customerID`  = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN
(
	SELECT
		$fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
	FROM
	srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
		AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
		WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
) pvd ON (
	pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN
(
	SELECT
		$fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
) cnd ON (
	cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)/*
LEFT JOIN (
SELECT
    $fields10
    invoiceAutoID,
    srp_erp_salesreturndetails.salesReturnAutoID
FROM
    srp_erp_salesreturndetails
INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
WHERE
    `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
GROUP BY
    srp_erp_salesreturndetails.invoiceAutoID
) srnd ON (
srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
)*/
LEFT JOIN(
SELECT
$fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
	FROM srp_erp_rvadvancematchdetails
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
	ca ON (
	ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
)
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID   = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
UNION ALL (
 SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,'Advance' as comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` as customerID
 FROM srp_erp_customerreceiptmaster
INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
LEFT JOIN (SELECT $fields12 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		FROM srp_erp_rvadvancematchdetails
		INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
		 GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
		) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON srp_erp_customerreceiptmaster.customerreceivableAutoID = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

UNION ALL (

SELECT $fields8
`srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
srp_erp_creditnotemaster.creditNoteCode AS documentCode,
					srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,srp_erp_creditnotemaster.comments,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo, `srp_erp_creditnotemaster`.`customerID` AS customerID
  FROM srp_erp_creditnotemaster
INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId as receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND approvedYN = 1 AND type='creditnote' GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


UNION ALL (
SELECT $fields11
`srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
srp_erp_salesreturnmaster.salesReturnCode AS documentCode,srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,coa.GLSecondaryCode,coa.GLDescription,srp_erp_salesreturnmaster.comment,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,`srp_erp_salesreturnmaster`.`customerID` AS customerID
  FROM srp_erp_salesreturnmaster
INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
            WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
 ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")


LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID`  = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
)

) as a GROUP BY a.documentCode UNION
	SELECT
	b.currency AS currency,
	b.DecimalPlaces AS DecimalPlaces,
    $pdc_totalcurr,
    0 as age,
	b.receiptVoucherAutoId as invoiceAutoID,
	b.bookingDate as documentDate,
	b.bookingInvCode as documentCode,
	b.documentID,
	b.customerName,
	b.customerSystemCode,
	b.comments,
    b.GLSecondaryCode,
	b.GLDescription,
	b.$fields3_amount_total_pdc_uni,
    '' AS referenceNo,
	'' as invoiceDueDate,
    b.customerMasterID as CustomerID
FROM
	(
	(
SELECT
	$fields_currencycode AS currency,
	$fields_decimalplaces AS DecimalPlaces,
	\"0\" AS transactionAmount,
	$fields3_aging_pdc
	customermaster.groupCustomerName AS customerName,
	customermaster.groupcustomerSystemCode AS customerSystemCode,
	coa.GLSecondaryCode,
	coa.GLDescription,
	receiptmastertbl.RVNarration AS comments,
	receiptmastertbl.documentID AS documentID,
	DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
	receiptmastertbl.RVcode AS bookingInvCode,
	receiptmastertbl.customerID,
	receiptmastertbl.receiptVoucherAutoId,
	customermaster.customerMasterID,
	$fields3_amount_total_pdc

FROM
	srp_erp_customerreceiptmaster receiptmastertbl
	LEFT JOIN (
SELECT
    SUM(transactionAmount) AS inAd,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"Invoice\"
    or srp_erp_customerreceiptdetail.type = \"Advance\"
    or srp_erp_customerreceiptdetail.type = \"GL\"
GROUP BY
    receiptVoucherAutoId
    ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
    LEFT JOIN (
SELECT
     SUM(transactionAmount) AS dbnAmount,
    receiptVoucherAutoId
FROM
    srp_erp_customerreceiptdetail
WHERE
    srp_erp_customerreceiptdetail.type = \"creditnote\"
    or srp_erp_customerreceiptdetail.type = \"SLR\"
GROUP BY
    receiptVoucherAutoId
    ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
	LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `receiptmastertbl`.`customerID`= cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")
	LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID
	INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID,receivableAutoID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) customermaster ON customermaster.customerMasterID = receiptmastertbl.customerID 	AND `customermaster`.`companyID`  IN  ( " . join(",", $company) . ")

	LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
	LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
WHERE
    $customerORoutput
	AND receiptmastertbl.companyID IN  ( " . join(",", $company) . ")
	AND receiptmastertbl.modeOfPayment = 2
	AND receiptmastertbl.confirmedYN = 1
	AND receiptmastertbl.approvedYN != 1
	AND RVchequeNo <> ''
	AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
GROUP BY
	receiptmastertbl.receiptVoucherAutoId
	)
	) AS b) as tbl1
	GROUP BY
    tbl1.invoiceAutoID,tbl1.DocumentCode) t2
    GROUP BY
    t2.customerSystemCode,
	t2.currency

")->result_array();

        //echo $this->db->last_query();
        return $result;

    }


    function get_collection_detail_report_group($currency, $customer, $segment)
    {
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $dateto = $this->input->post('dateto');
        $datetoconvert = input_format_date($dateto, $date_format_policy);
        $date = "";
        $companies = getallsubGroupCompanies();
        $sumamount = '';
        /*if ($currency == 1) {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount";
        } else if ($currency == 2) {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate) as transactionAmount";
        } else {
            $sumamount .= " SUM(srp_erp_customerreceiptdetail.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate) as transactionAmount";
        }*/
        if ($currency == 1) {
            $sumamount .= " (((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount";
        } else if ($currency == 2) {
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 ))+ IFNULL( det.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 )- IFNULL( Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyLocalExchangeRate, 0 )) AS transactionAmount";

        } else {
            $sumamount .= "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 ))+ IFNULL( det.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 )- IFNULL( Creditnots.transactionAmount/srp_erp_customerreceiptmaster.companyReportingExchangeRate, 0 )) AS transactionAmount";
        }

        $qry = "SELECT
	srp_erp_customerreceiptmaster.receiptVoucherAutoId,
	groupcustomer.groupCustomerName as customerName,
	srp_erp_customerreceiptmaster.RVcode,
	srp_erp_customerreceiptmaster.RVNarration,
	srp_erp_customerreceiptmaster.documentID,
	srp_erp_chartofaccounts.bankName,
	srp_erp_chartofaccounts.bankAccountNumber,
	DATE_FORMAT( srp_erp_customerreceiptmaster.RVdate, '%d-%m-%Y' ) AS RVdate,
	srp_erp_customerreceiptmaster.segmentCode,
	srp_erp_customerreceiptmaster.companyLocalCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.companyReportingCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.customerCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.transactionCurrencyDecimalPlaces,
	srp_erp_customerreceiptmaster.transactionCurrency,
	srp_erp_customerreceiptmaster.companyLocalCurrency,
	srp_erp_customerreceiptmaster.companyReportingCurrency,
	$sumamount
FROM
	srp_erp_customerreceiptdetail
	LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
	LEFT JOIN srp_erp_chartofaccounts ON srp_erp_customerreceiptmaster.bankGLAutoID = srp_erp_chartofaccounts.GLAutoID
    LEFT JOIN
    (
    SELECT
        customerMasterID,
        groupCustomerName,
        groupCustomerAutoID
        FROM
        srp_erp_groupcustomerdetails
        LEFT JOIN srp_erp_groupcustomermaster ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
        WHERE
        companyID IN (" . join(',', $companies) . ")
    )groupcustomer ON groupcustomer.customerMasterID = srp_erp_customerreceiptmaster.customerID



    LEFT JOIN
    (
    SELECT
srp_erp_groupsegmentdetails.segmentID,
srp_erp_groupsegmentdetails.groupSegmentID
        FROM
        srp_erp_groupsegmentdetails
        LEFT JOIN srp_erp_groupsegment ON srp_erp_groupsegment.segmentID = srp_erp_groupsegmentdetails.groupSegmentID
        WHERE
        companyID IN (" . join(',', $companies) . ")
    )groupsegment ON groupsegment.segmentID = srp_erp_customerreceiptmaster.segmentID




LEFT JOIN (
	SELECT
		SUM( transactionAmount ) AS transactionAmount,
		receiptVoucherAutoId
	FROM
		srp_erp_customerreceiptdetail
	WHERE
		( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
	GROUP BY
		receiptVoucherAutoId
	) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' GROUP BY receiptVoucherAutoId ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
	LEFT JOIN (
	SELECT
		SUM( transactionAmount ) AS transactionAmount,
		receiptVoucherAutoId
	FROM
		srp_erp_customerreceiptdetail
	WHERE
		( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
	GROUP BY
		receiptVoucherAutoId
	) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptdetail.receiptVoucherAutoId )
WHERE
	srp_erp_customerreceiptmaster.companyID IN (" . join(',', $companies) . ")
	AND groupcustomer.groupCustomerAutoID IN (" . join(',', $customer) . ")
    AND groupsegment.groupSegmentID IN (" . join(',', $segment) . ")
	AND srp_erp_customerreceiptmaster.approvedYN = 1
	/*AND srp_erp_customerreceiptdetail.type = 'Invoice' */
	AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$datefromconvert'
	AND '$datetoconvert'
GROUP BY
	srp_erp_customerreceiptmaster.receiptVoucherAutoId
ORDER BY
	srp_erp_customerreceiptmaster.RVdate ASC";
        $output = $this->db->query($qry)->result_array();
        //$this->db->query($qry)->result_array();
        return $output;

    }

    function get_customer_balance_report_group($datearr)
    {

        $companyID = $this->get_group_company();



        $company= join(',', $companyID);
        $customerGrp = $this->input->post('customerIDgrp');
        $customerID = join(',', $customerGrp);

        $groupcustomer = fetch_customerid_from_group("$customerID","$company");
        $groupcustomer = (join(',', array_column($groupcustomer,'customerMasterID')));
       $currency = $this->input->post('currency');


        $currencygroup = '';
        if ($currency == 2) {
            $currencygroup = 'a.transactionCurrency';
        }

        if ($currency == 2) {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_customermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN ($groupcustomer)
    AND srp_erp_generalledger.companyID IN ($company)
AND `subLedgerType` = '3'
and documentDate<='$datearr'
group by srp_erp_customermaster.customerAutoID,transactionCurrencyID,srp_erp_chartofaccounts.GLAutoID";
        } else {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_customermaster.customerName,
	srp_erp_customermaster.customerSystemCode,
	srp_erp_customermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_customermaster ON srp_erp_generalledger.partyAutoID = srp_erp_customermaster.customerAutoID
LEFT JOIN srp_erp_chartofaccounts ON srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN ($groupcustomer)
    AND srp_erp_generalledger.companyID IN ($company)
AND `subLedgerType` = '3'
and documentDate<='$datearr'
group by srp_erp_customermaster.customerAutoID,srp_erp_chartofaccounts.GLAutoID";
        }


        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_vendor_balance_report_group($datearr)
    {



        $currency = $this->input->post('currency');

        $companyID = $this->get_group_company();
        $company= join(',', $companyID);
        $supplierIDgrp = $this->input->post('supplierIDgrp');
        $supplierID = join(',', $supplierIDgrp);
        $groupsupplier = fetch_supplierID_from_group("$supplierID","$company");
        $groupsupplier = (join(',', array_column($groupsupplier,'SupplierMasterID')));

        $currencygroup = '';
        if ($currency == 2) {
            $currencygroup = 'a.transactionCurrency';
        }

        if ($currency == 2) {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_suppliermaster.supplierName,
	srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID
LEFT JOIN srp_erp_chartofaccounts on srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN ($groupsupplier)
    AND srp_erp_generalledger.companyID IN ($company)
AND `subLedgerType` = '2'
and documentDate<='$datearr'
group by partyAutoID,transactionCurrencyID,srp_erp_chartofaccounts.GLAutoID";
        } else {
            $qry = "SELECT
  srp_erp_chartofaccounts.systemAccountCode as systemGLCode,
  srp_erp_chartofaccounts.GLDescription,
  srp_erp_suppliermaster.supplierName,
	srp_erp_suppliermaster.supplierSystemCode,
	srp_erp_suppliermaster.secondaryCode,
  companyLocalCurrency,
  transactionCurrency,
  companyReportingCurrency,
	transactionCurrencyDecimalPlaces,
	companyLocalCurrencyDecimalPlaces,
	companyReportingCurrencyDecimalPlaces,
  sum(companyLocalAmount) as companyLocalAmount,
  sum(transactionAmount) as transactionAmount,
  sum(companyReportingAmount) as  companyReportingAmount
FROM
    `srp_erp_generalledger`
INNER JOIN srp_erp_suppliermaster ON srp_erp_generalledger.partyAutoID = srp_erp_suppliermaster.supplierAutoID
LEFT JOIN srp_erp_chartofaccounts on srp_erp_chartofaccounts.GLAutoID=srp_erp_generalledger.GLAutoID
WHERE
srp_erp_generalledger.partyAutoID IN ($groupsupplier)
AND srp_erp_generalledger.companyID IN ($company)
AND `subLedgerType` = '2'
and documentDate<='$datearr'
group by partyAutoID,srp_erp_chartofaccounts.GLAutoID";
        }


        $output = $this->db->query($qry)->result_array();
        return $output;
    }


    function get_accounts_receivable_customer_statement_group_report_postdated($overdue = false)
    {
        $where = "";
        //$companyID = current_companyID();
        $company = $this->get_group_company();
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "invoiceDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }

        /* Acknowledgement Group by based on Policy - */
        $ackGroupBy = $this->input->post("ackGroupBy");
        $dateFilter = "";
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID   = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';

        $k = 1;//post dated cheque customer filter
        $customerORout = '(';
        if (!empty($customer)) {
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORout .= ' OR ';
                }
                $customerORout .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORout .= ')';

        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }

        $fields = "";
        $fields_postdated = "";
        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields11 = "";
        $fields9 = "";
        $fields_postdated_cheque_tot = "";
        $having = array();
        $retentionamount = "";
        $fieldrebate = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) {
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 = "ORDER BY transactionAmountCurrency";
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';

                    $fields_postdated .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.transactionExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.transactionExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionTransactionAmount,0))';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionReportingAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields9 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';

                    $fields_postdated .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields_postdated .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_postdated_cheque_tot .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyLocalExchangeRate ) AS ' . $val . ',';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate ) - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $retentionamount .= '(IFNULL(retensionLocalAmount,0))';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';
                }
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$retentionamount . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0))) as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_customerreceiptdetail.' . $val . ') - IFNULL((avd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((cvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3 a.invoiceAutoID,a.document,a.age,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,a.customerAddress,a.customerName,a.customerSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.customerID,'1' as type,a.referenceNo FROM
            ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_documentcodemaster.document,cust.customerAddress1 as customerAddress,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,srp_erp_customerinvoicemaster.documentID,srp_erp_customerinvoicemaster.invoiceDueDate as invoiceDueDate,srp_erp_customerinvoicemaster.$columnCheck as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_customerinvoicemaster.invoiceCode as bookingInvCode,`srp_erp_customerinvoicemaster`.`customerID` as customerID,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDueDate`) as age,srp_erp_customerinvoicemaster.referenceNo AS referenceNo
            FROM `srp_erp_customerinvoicemaster`
            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerinvoicemaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            LEFT JOIN
            (
                SELECT
                    $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
                FROM
                    srp_erp_customerreceiptdetail
                    INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
            ) pvd ON (
                pvd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields5 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
                FROM
                    srp_erp_creditnotedetail
                    INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
            ) cnd ON (
                cnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
            )



            LEFT JOIN (
            SELECT
                $fields9
                invoiceAutoID,
                srp_erp_salesreturndetails.salesReturnAutoID
            FROM
                srp_erp_salesreturndetails
            INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
            AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
            WHERE
                `srp_erp_salesreturndetails`.`companyID` IN  ( " . join(",", $company) . ")
            AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
            GROUP BY
                srp_erp_salesreturndetails.invoiceAutoID
            ) srnd ON (
            srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
            )




            LEFT JOIN(
            SELECT
            $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
                ca ON (
                ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
            WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID` HAVING (" . join(' AND ', $having) . "))
            UNION ALL (
            SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoID as invoiceAutoID,
            srp_erp_documentcodemaster.document,
            cust.customerAddress1 as customerAddress,
            cust.groupCustomerName AS customerName,
            cust.groupcustomerSystemCode AS customerSystemCode,
            'Advance' as comments,
            srp_erp_customerreceiptmaster.documentID,
            '-' as invoiceDueDate,
            srp_erp_customerreceiptmaster.RVDate as bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            srp_erp_customerreceiptmaster.RVCode as bookingInvCode,
            `srp_erp_customerreceiptmaster`.`customerID` as customerID,
            DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,
            '-' as referenceNo
            FROM srp_erp_customerreceiptmaster
            INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND  srp_erp_customerreceiptdetail.type='Advance'
            LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                    FROM srp_erp_rvadvancematchdetails
                    INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_rvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                    ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                    INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                    WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                    ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                    INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                    WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
            WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NULL GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
            ) UNION ALL
            ( SELECT
            $fields8 srp_erp_creditnotemaster.creditNoteMasterAutoID AS InvoiceAutoID,
            srp_erp_documentcodemaster.document,
            cust.customerAddress1 as customerAddress,
            cust.groupCustomerName AS customerName,
            cust.groupcustomerSystemCode AS customerSystemCode,
            srp_erp_creditnotemaster.comments,
            srp_erp_creditnotemaster.documentID,
            '-' as invoiceDueDate,
            srp_erp_creditnotemaster.creditNoteDate AS bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            srp_erp_creditnotemaster.creditNoteCode AS bookingInvCode,
            `srp_erp_creditnotemaster`.customerID as customerID,
            DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,
            '-' as referenceNo
            FROM
                srp_erp_creditnotemaster
                INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                AND `srp_erp_creditnotedetail`.invoiceAutoID IS NULL
                AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
                LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'creditnote' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

                LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

                            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID )
                LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_creditnotemaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            WHERE
                $customerOR
                AND `srp_erp_creditnotemaster`.`approvedYN` = 1
                AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "'
                AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")
            GROUP BY
                `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                )

                UNION ALL
            ( SELECT
            $fields11 srp_erp_salesreturnmaster.salesReturnAutoID AS InvoiceAutoID,
                srp_erp_documentcodemaster.document,
                cust.customerAddress1 as customerAddress,
                cust.groupCustomerName AS customerName,
                cust.groupcustomerSystemCode AS customerSystemCode,
                srp_erp_salesreturnmaster.`comment`,
                srp_erp_salesreturnmaster.documentID,
                '-' AS invoiceDueDate,
                srp_erp_salesreturnmaster.returnDate AS bookingDate,
                coa.GLSecondaryCode,
                coa.GLDescription,
                srp_erp_salesreturnmaster.salesReturnCode AS bookingInvCode,
                `srp_erp_salesreturnmaster`.customerID AS customerID,
            DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,
            '-' as referenceNo
            FROM
                srp_erp_salesreturnmaster
                INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                LEFT JOIN ( SELECT $fields4 creditNoteAutoID FROM `srp_erp_customerreceiptdetail` LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId  WHERE `srp_erp_customerreceiptdetail`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'  AND type = 'SLR' GROUP BY creditNoteAutoID ) cvd ON cvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

                LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

                LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID )
                LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_salesreturnmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
            WHERE
                $customerOR
                AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
                AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
                AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ")
            GROUP BY
                `srp_erp_salesreturnmaster`.`salesReturnAutoID`
                )

                $fields7) as a $where $fields7")->result_array();


                    $postdatedcheque = $this->db->query("SELECT
                $fields_postdated
                $fields_postdated_cheque_tot
                receiptmastertbl.receiptVoucherAutoId AS invoiceAutoID,
                doccode.document AS document,
                \"-\" as age,
                \"-\" as invoiceDueDate,

                customermaster.customerAddress1 as customerAddress,
                customermaster.groupCustomerName AS customerName,
                customermaster.groupcustomerSystemCode AS customerSystemCode,
                receiptmastertbl.RVNarration as comments,
                receiptmastertbl.documentID as documentID,
                DATE_FORMAT (receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
                coa.GLSecondaryCode,
                coa.GLDescription,
                receiptmastertbl.RVcode as bookingInvCode,
                receiptmastertbl.customerID,
                '2' as type,
                '-' as referenceNo
            FROM
                srp_erp_customerreceiptmaster receiptmastertbl
                LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = receiptmastertbl.bankCurrencyID
                LEFT JOIN (
            SELECT
                SUM( transactionAmount ) AS inAd,
                receiptVoucherAutoId
            FROM
                srp_erp_customerreceiptdetail
            WHERE
                srp_erp_customerreceiptdetail.type = \"Invoice\"
                or srp_erp_customerreceiptdetail.type = \"Advance\"
                or srp_erp_customerreceiptdetail.type = \"GL\"
            GROUP BY
                receiptVoucherAutoId
                ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
                LEFT JOIN (
            SELECT
                SUM( transactionAmount ) AS dbnAmount,
                receiptVoucherAutoId
            FROM
                srp_erp_customerreceiptdetail
            WHERE
                srp_erp_customerreceiptdetail.type = \"creditnote\"
                or srp_erp_customerreceiptdetail.type = \"SR\"
            GROUP BY
                receiptVoucherAutoId
                ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId

                LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `receiptmastertbl`.`customerID` = cust.customerMasterID

                LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID

                INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID, receivableAutoID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) customermaster ON `receiptmastertbl`.`customerID` = customermaster.customerMasterID


                LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID  = coa.chartofAccountID

                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
            WHERE
                $customerORout
                AND receiptmastertbl.companyID  IN  ( " . join(",", $company) . ")
                AND receiptmastertbl.modeOfPayment = 2
                AND receiptmastertbl.confirmedYN = 1
                AND receiptmastertbl.approvedYN != 1
                AND RVchequeNo <> ''
                AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
            GROUP BY
                receiptmastertbl.receiptVoucherAutoId")->result_array();

        //echo $this->db->last_query();
        return $result_arr = (array_merge($result, $postdatedcheque));
    }

    function get_accounts_receivable_customer_aging_summary_group_report_pdc_buyback()
    {
        $customer = $this->input->post("customerTo");
        //$companyid = current_companyID();
        $company = $this->get_group_company();

        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';


        $k = 1;
        $customerORoutput = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerORoutput .= ' OR ';
                }
                $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerORoutput .= ')';

        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }

        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currency = "";
        $fields_currency_decimal = "";
        $fields_currency_amt = "";
        $fields3 = "";
        $fields3_details = "";
        $curre = "";
        $fields3_pdc_new_qu = "";
        $fields3_pdc_total = "";
        $pdc_total_code = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fields3_age = "";

        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_currency .= 'CR.CurrencyCode';
                    $fields_currency_decimal .= 'CR.DecimalPlaces';
                    $fields_currency_amt .= 'companyReportingAmount';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $pdc_total_code .= 'companyReportingAmountPDC';
                    $curre .= 'companyReportingCurrency';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currency .= 'CL.CurrencyCode';
                    $fields_currency_decimal .= 'CL.DecimalPlaces';
                    $fields_currency_amt .= 'companyLocalAmount';

                    $curre .= 'companyLocalCurrency';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $pdc_total_code .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                    $fields_currency .= 'TC.CurrencyCode';
                    $fields_currency_decimal .= 'TC.DecimalPlaces';
                    $fields_currency_amt .= 'transactionAmount';
                    $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';

                    $pdc_total_code .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                //  $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";


                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                            //$fields3_details .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
                $fields3 .= "a.age as `age`,";
                $fields3_details .= "0 as `age`,";
                $fields3_pdc_new_qu .= " `current`,";
            }
        }
        $groupByExplode = "";
        if ($groupBy) {
            $groupByExplode = "," . join(',', $groupBy);
        }

        $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $pdc_total_code,referenceNo,invoiceDueDate,a.customerID FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,`srp_erp_customerinvoicemaster`.`customerID` AS customerID  FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID`  IN  ( " . join(",", $company) . ") GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID`  IN  ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID`  IN  ( " . join(",", $company) . ")
            AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
            GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID`  IN  ( " . join(",", $company) . ") AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` AS customerID
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID`  IN  ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID  IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode, srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_creditnotemaster`.`customerID` AS customerID
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID`  IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        WHERE `srp_erp_customerreceiptdetail`.`companyID`  IN  ( " . join(",", $company) . ") AND type='creditnote'
            AND srp_erp_customerreceiptmaster.approvedYN = 1
                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'


        GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,	`srp_erp_salesreturnmaster`.`customerID` AS customerID
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                    LEFT JOIN (
                    SELECT
                        $fields9
                        srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                        creditNoteAutoID
                    FROM
                        `srp_erp_customerreceiptdetail`
                        LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                    WHERE
                        `srp_erp_customerreceiptdetail`.`companyID`  IN  ( " . join(",", $company) . ")
                        AND srp_erp_customerreceiptmaster.approvedYN = 1
                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                        AND type = 'SLR'
                    GROUP BY
                        creditNoteAutoID
                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")



        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID`  IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
        )


        ) as a GROUP BY a.documentCode UNION
            SELECT
            b.currency AS currency,
            b.DecimalPlaces AS DecimalPlaces,
            0 $fields_currency_amt,
            $fields3_details
            b.receiptVoucherAutoId as invoiceAutoID,
            b.bookingDate as documentDate,
            b.bookingInvCode as documentCode,
            b.documentID,
            b.customerName,
            b.customerSystemCode,
            b.comments,
            b.GLSecondaryCode,
            b.GLDescription,
            b.$pdc_total_code,
            '' as invoiceDueDate,
            '' AS referenceNo,
            b.customerID
        FROM
            (
            (
        SELECT
            $fields_currency AS currency,
            $fields_currency_decimal AS DecimalPlaces,
            \"0\" AS transactionAmount,
            $fields3_details
            customermaster.groupCustomerName AS customerName,
            customermaster.groupcustomerSystemCode AS customerSystemCode,
            receiptmastertbl.RVNarration AS comments,
            receiptmastertbl.documentID AS documentID,
            DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            receiptmastertbl.RVcode AS bookingInvCode,
            receiptmastertbl.customerID,
            receiptmastertbl.receiptVoucherAutoId,
            $fields3_pdc_total

        FROM
            srp_erp_customerreceiptmaster receiptmastertbl
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS inAd,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"Invoice\"
            or srp_erp_customerreceiptdetail.type = \"Advance\"
        GROUP BY
            receiptVoucherAutoId
            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS dbnAmount,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"creditnote\"
            or srp_erp_customerreceiptdetail.type = \"SLR\"
        GROUP BY
            receiptVoucherAutoId
            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId

            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `receiptmastertbl`.`customerID` = cust.customerMasterID

            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID

            INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID,receivableAutoID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) customermaster ON `receiptmastertbl`.`customerID` = customermaster.customerMasterID

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID = coa.chartofAccountID

            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
        WHERE
            $customerORoutput
            AND receiptmastertbl.companyID  IN  ( " . join(",", $company) . ")
            AND receiptmastertbl.modeOfPayment = 2
            AND receiptmastertbl.confirmedYN = 1
            AND receiptmastertbl.approvedYN != 1
            AND RVchequeNo <> ''
            AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
        GROUP BY
            receiptmastertbl.receiptVoucherAutoId
            )
            ) AS b) as tbl1
            GROUP BY
            tbl1.invoiceAutoID,tbl1.DocumentCode) t2
            GROUP BY
            t2.customerSystemCode,
            t2.currency")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_summary_group_report_buyback()
    {

            $customer = $this->input->post("customerTo");
            //$companyid = current_companyID();
            $company = $this->get_group_company();
            $i = 1;
            $customerOR = '(';
            if (!empty($customer)) { /*generate the query according to selected customer*/
                foreach ($customer as $customer_val) {
                    if ($i != 1) {
                        $customerOR .= ' OR ';
                    }
                    //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                    $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                    $i++;
                }
            }
            $customerOR .= ')';


            $k = 1;
            $customerORoutput = '(';
            if (!empty($customer)) { /*generate the query according to selected customer*/
                foreach ($customer as $customer_val) {
                    if ($k != 1) {
                        $customerORoutput .= ' OR ';
                    }
                    $customerORoutput .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                    $k++;
                }
            }
            $customerORoutput .= ')';

            $customerIN = "";
            if (!empty($customer)) {

                $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

            }

            $aging = array();
            $interval = $this->input->post("interval");
            $through = $this->input->post("through");
            $z = 1;
            for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
                if ($z == 1) {
                    $aging[] = $z . "-" . $interval;
                } else {
                    if (($i + $interval) > $through) {
                        $aging[] = ($i + 1) . "-" . ($through);
                        $i += $interval;
                    } else {
                        $aging[] = ($i + 1) . "-" . ($i + $interval);
                        $i += $interval;
                    }

                }
            }
            $aging[] = "> " . ($through);

            $fields = "";
            $fields_currency = "";
            $fields_currency_decimal = "";
            $fields_currency_amt = "";
            $fields3 = "";
            $fields3_details = "";
            $curre = "";
            $fields3_pdc_new_qu = "";
            $fields3_pdc_total = "";
            $pdc_total_code = "";
            $fields4 = "";
            $fields5 = "";
            $fields6 = "";
            $fields2 = "";
            $fields8 = "";
            $fields9 = "";
            $fields10 = "";
            $fields11 = "";
            $having = array();
            $fields3_age = "";

            $groupBy = array();
            $fieldNameChk = $this->input->post("fieldNameChk");
            if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
                foreach ($fieldNameChk as $val) {
                    if ($val == 'companyReportingAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields_currency .= 'CR.CurrencyCode';
                        $fields_currency_decimal .= 'CR.DecimalPlaces';
                        $fields_currency_amt .= 'companyReportingAmount';
                        $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate)  AS companyReportingAmountPDC';
                        $pdc_total_code .= 'companyReportingAmountPDC';
                        $curre .= 'companyReportingCurrency';

                        $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                        $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate)), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    } else if ($val == 'companyLocalAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                        $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                        $fields_currency .= 'CL.CurrencyCode';
                        $fields_currency_decimal .= 'CL.DecimalPlaces';
                        $fields_currency_amt .= 'companyLocalAmount';

                        $curre .= 'companyLocalCurrency';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate)  AS companyLocalAmountPDC';

                        $pdc_total_code .= 'companyLocalAmountPDC';

                        $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                        $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate)), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    } else if ($val == 'customerCurrencyAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                        $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                        $groupBy[] = $val . 'currency';
                    } else if ($val == 'transactionAmount') {
                        $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                        $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                        $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                        $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                        $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                        $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                        $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                        $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                        $groupBy[] = $val . 'currency';
                        $fields_currency .= 'TC.CurrencyCode';
                        $fields_currency_decimal .= 'TC.DecimalPlaces';
                        $fields_currency_amt .= 'transactionAmount';
                        $fields3_pdc_total .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate)  AS transactionAmountPDC';

                        $pdc_total_code .= 'transactionAmountPDC';

                        $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                        $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                        $fields11 .= '(SUM(ROUND((salesPrice + ((IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate)), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    }
                    $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                    //$fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                    $fields3 .= 'a.' . $val . 'currency as currency,';
                    $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                    $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0))*-1 as ' . $val . ',';
                    $having[] = $val . '!= 0';
                    $fields7 = $val . ' > 0';
                    if (!empty($aging)) { /*calculate aging range in query*/
                        $count = count($aging);
                        $c = 1;
                        foreach ($aging as $val2) {
                            if ($count == $c) {
                                $fields3_age .= "SUM(if(t2.age > " . $through . ",t2." . $val . ",0)) as `" . $val2 . "`,";


                                $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            } else {
                                $list = explode("-", $val2);
                                $fields3_age .= "SUM(if(t2.age >= " . $list[0] . " AND t2.age <= " . $list[1] . ",t2." . $val . ",0)) as `" . $val2 . "`,";
                                //$fields3_details .= "0 as `" . $val2 . "`,";
                                $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                            }
                            $c++;
                        }
                    }
                    $fields3_age .= "SUM(if(t2.age <= 0,t2." . $val . ",0)) as `current`,";
                    $fields3 .= "a.age as `age`,";
                    $fields3_details .= "0 as `age`,";
                    $fields3_pdc_new_qu .= " `current`,";
                }
            }
            $groupByExplode = "";
            if ($groupBy) {
                $groupByExplode = "," . join(',', $groupBy);
            }

            $result = $this->db->query("SELECT $fields3_age t2.* FROM (SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $pdc_total_code,referenceNo,invoiceDueDate,a.customerID FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo,`srp_erp_customerinvoicemaster`.`customerID` AS customerID  FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")
            AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
            GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_customerreceiptmaster`.`customerID` AS customerID
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo,`srp_erp_creditnotemaster`.`customerID` AS customerID
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
        LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ") AND type='creditnote' 	AND srp_erp_customerreceiptmaster.approvedYN = 1
        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'   GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo,	`srp_erp_salesreturnmaster`.`customerID` AS customerID
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                    LEFT JOIN (
                    SELECT
                        $fields9
                        srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                        creditNoteAutoID
                    FROM
                        `srp_erp_customerreceiptdetail`
                        LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                    WHERE
                        `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")
                        AND srp_erp_customerreceiptmaster.approvedYN = 1
                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                        AND type = 'SLR'
                    GROUP BY
                        creditNoteAutoID
                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
        )


        ) as a GROUP BY a.documentCode) as tbl1
            GROUP BY
            tbl1.invoiceAutoID,tbl1.DocumentCode) t2
            GROUP BY
            t2.customerSystemCode,
            t2.currency")->result_array();
                    //echo $this->db->last_query();
            return $result;
    }

    function get_accounts_receivable_customer_aging_detail_group_report_postdated_buyback()
    {
        $customer = $this->input->post("customerTo");
        //$companyid = current_companyID();
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                $i++;
            }
        }

        $customerOR .= ')';

        $k = 1;
        $customerOR_output = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerOR_output .= ' OR ';
                }
                $customerOR_output .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }
        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }
        $customerOR_output .= ')';

        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_decimalplaces = "";
        $fields3 = "";
        $fields3_aging_pdc = "";
        $fields3_amount_total_pdc = "";
        $fields3_amount_total_pdc_uni = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyReportingExchangeRate), CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                //$fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }

        $result = $this->db->query("SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID`  IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        /*LEFT JOIN (
        SELECT
            $fields10
            invoiceAutoID,
            srp_erp_salesreturndetails.salesReturnAutoID
        FROM
            srp_erp_salesreturndetails
        INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
        AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
        WHERE
            `srp_erp_salesreturndetails`.`companyID` IN  ( " . join(",", $company) . ")
        AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
        GROUP BY
            srp_erp_salesreturndetails.invoiceAutoID
        ) srnd ON (
        srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
        )*/
        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID`IN  ( " . join(",", $company) . ")
            AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
            GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND type='creditnote'
        AND srp_erp_customerreceiptmaster.approvedYN = 1  AND srp_erp_customerreceiptmaster.RVDate <='" . format_date($this->input->post("from")) . "'
        GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                    LEFT JOIN (
                    SELECT
                        $fields9
                        srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                        creditNoteAutoID
                    FROM
                        `srp_erp_customerreceiptdetail`
                        LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                    WHERE
                        `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")
                        AND srp_erp_customerreceiptmaster.approvedYN = 1
                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                        AND type = 'SLR'
                    GROUP BY
                        creditNoteAutoID
                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
        )


        ) as a GROUP BY a.documentCode UNION
            SELECT
            b.currency AS currency,
            b.DecimalPlaces AS DecimalPlaces,
            0 transactionAmount,
            $fields3_aging_pdc
            b.receiptVoucherAutoId as invoiceAutoID,
            b.bookingDate as documentDate,
            b.bookingInvCode as documentCode,
            b.documentID,
            b.customerName,
            b.customerSystemCode,
            b.comments,
            b.GLSecondaryCode,
            b.GLDescription,
            b.$fields3_amount_total_pdc_uni,
            '' as invoiceDueDate,
            '' AS referenceNo
        FROM
            (
            (
        SELECT
            $fields_currencycode AS currency,
            $fields_decimalplaces AS DecimalPlaces,
            \"0\" AS transactionAmount,
            $fields3_aging_pdc
            customermaster.groupCustomerName AS customerName,
            customermaster.groupcustomerSystemCode AS customerSystemCode,
            receiptmastertbl.RVNarration AS comments,
            receiptmastertbl.documentID AS documentID,
            DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            receiptmastertbl.RVcode AS bookingInvCode,
            receiptmastertbl.customerID,
            receiptmastertbl.receiptVoucherAutoId,
            $fields3_amount_total_pdc

        FROM
            srp_erp_customerreceiptmaster receiptmastertbl
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS inAd,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"Invoice\"
            or srp_erp_customerreceiptdetail.type = \"Advance\"
        GROUP BY
            receiptVoucherAutoId
            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS dbnAmount,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"creditnote\"
            or srp_erp_customerreceiptdetail.type = \"SLR\"
        GROUP BY
            receiptVoucherAutoId
            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId

            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `receiptmastertbl`.`customerID` = cust.customerMasterID

            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID

            INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID,receivableAutoID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) customermaster ON `receiptmastertbl`.`customerID` = customermaster.customerMasterID

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID = coa.chartofAccountID

            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
        WHERE
            $customerOR_output
            AND receiptmastertbl.companyID IN  ( " . join(",", $company) . ")
            AND receiptmastertbl.modeOfPayment = 2
            AND receiptmastertbl.confirmedYN = 1
            AND receiptmastertbl.approvedYN != 1
            AND RVchequeNo <> ''
            AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
        GROUP BY
            receiptmastertbl.receiptVoucherAutoId
            )
            ) AS b) as tbl1
            GROUP BY
            tbl1.invoiceAutoID,
            tbl1.DocumentCode

        ")->result_array();

        return $result;

    }


    function get_accounts_receivable_customer_aging_detail_group_report_buyback()
    {
        $company = $this->get_group_company();
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }
        $customerOR .= ')';
        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0))/ srp_erp_salesreturnmaster.companyReportingExchangeRate),CR.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.companyLocalExchangeRate), CL.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    //$fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(ROUND((salesPrice + (IFNULL(taxAmount,0)) / srp_erp_salesreturnmaster.transactionExchangeRate), TC.DecimalPlaces) * return_Qty) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL(SUM(rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields10 .= "SUM($val) as TotalRow, ";
            }
        }

        $result = $this->db->query("SELECT $fields3 $fields10 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerAutoID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.invoiceDate as documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.`invoiceDate`) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")
            AND srp_erp_rvadvancematch.matchDate <= '".format_date($this->input->post("from"))."'
            GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerinvoicemaster.`invoiceDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.`invoiceDate` HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptmaster.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
        WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")
        AND srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
        AND type='creditnote'  GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")


        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))




        UNION ALL (

        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_salesreturndetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
        LEFT JOIN srp_erp_customerinvoicedetails ON srp_erp_salesreturndetails.invoiceDetailID = srp_erp_customerinvoicedetails.invoiceDetailsAutoID AND  srp_erp_customerinvoicedetails.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                    LEFT JOIN (
                    SELECT
                        $fields9
                        srp_erp_customerreceiptdetail.receiptVoucherAutoId,
                        creditNoteAutoID
                    FROM
                        `srp_erp_customerreceiptdetail`
                        LEFT JOIN srp_erp_customerreceiptmaster on srp_erp_customerreceiptdetail.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                    WHERE
                        `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")
                        AND srp_erp_customerreceiptmaster.approvedYN = 1
                        AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                        AND type = 'SLR'
                    GROUP BY
                        creditNoteAutoID
                ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


        ) as a GROUP BY a.documentCode,a.invoiceAutoID
        ")->result_array();
        //echo $this->db->last_query();
        return $result;
    }


    function get_accounts_receivable_customer_aging_detail_group_report_postdated()
    {
        $customer = $this->input->post("customerTo");
        //$companyid = current_companyID();
        $company = $this->get_group_company();
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customerOR .= ')';

        $k = 1;
        $customerOR_output = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($k != 1) {
                    $customerOR_output .= ' OR ';
                }
                $customerOR_output .= "receiptmastertbl.customerID = '" . $customer_val . "' ";
                $k++;
            }
        }

        $customerOR_output .= ')';
        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields_currencycode = "";
        $fields_decimalplaces = "";
        $fields3 = "";
        $fields3_aging_pdc = "";
        $fields3_amount_total_pdc = "";
        $fields3_amount_total_pdc_uni = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $having = array();
        $fieldretention = "";
        $fieldrebate = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CR.CurrencyCode';
                    $fields_decimalplaces .= 'CR.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/receiptmastertbl.companyReportingExchangeRate)  AS companyReportingAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'companyReportingAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) AS ' . $val . ',';
                    $fields_currencycode .= 'CL.CurrencyCode';
                    $fields_decimalplaces .= 'CL.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.companyLocalExchangeRate)  AS companyLocalAmountPDC';

                    $fields3_amount_total_pdc_uni .= 'companyLocalAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';

                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldretention = '0';
                    $fieldrebate .= '0';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue) AS ' . $val . ',';
                    $fields_currencycode .= 'TC.CurrencyCode';
                    $fields_decimalplaces .= 'TC.DecimalPlaces';
                    $fields3_amount_total_pdc .= '((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0) )/receiptmastertbl.transactionExchangeRate)  AS transactionAmountPDC';
                    $fields3_amount_total_pdc_uni .= 'transactionAmountPDC';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                //  $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(srnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_aging_pdc .= "0 as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_aging_pdc .= "0 as `current`,";
            }
        }

        $result = $this->db->query("SELECT * FROM (SELECT $fields3 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,0 as $fields3_amount_total_pdc_uni,referenceNo,invoiceDueDate FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )/*
        LEFT JOIN (
        SELECT
            $fields10
            invoiceAutoID,
            srp_erp_salesreturndetails.salesReturnAutoID
        FROM
            srp_erp_salesreturndetails
        INNER JOIN `srp_erp_salesreturnmaster` ON `srp_erp_salesreturnmaster`.`salesReturnAutoID` = `srp_erp_salesreturndetails`.`salesReturnAutoID`
        AND `srp_erp_salesreturnmaster`.`approvedYN` = 1
        WHERE
            `srp_erp_salesreturndetails`.`companyID` = " . $this->common_data['company_data']['company_id'] . "
        AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "'
        GROUP BY
            srp_erp_salesreturndetails.invoiceAutoID
        ) srnd ON (
        srnd.`invoiceAutoID` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
        )*/
        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'' as invoiceDueDate,'' AS referenceNo
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'' as invoiceDueDate,'' AS referenceNo
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND type='creditnote' GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))


        UNION ALL (
        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                            LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                            WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
        ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` = " . $this->common_data['company_data']['company_id'] . " GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . ")
        )

        ) as a GROUP BY a.documentCode,	a.invoiceAutoID,a.documentID UNION
            SELECT
            b.currency AS currency,
            b.DecimalPlaces AS DecimalPlaces,
            0 transactionAmount,
            $fields3_aging_pdc
            b.receiptVoucherAutoId as invoiceAutoID,
            b.bookingDate as documentDate,
            b.bookingInvCode as documentCode,
            b.documentID,
            b.customerName,
            b.customerSystemCode,
            b.comments,
            b.GLSecondaryCode,
            b.GLDescription,
            b.$fields3_amount_total_pdc_uni,
            '' as invoiceDueDate,
            '' AS referenceNo
        FROM
            (
            (
        SELECT
            $fields_currencycode AS currency,
            $fields_decimalplaces AS DecimalPlaces,
            \"0\" AS transactionAmount,
            $fields3_aging_pdc
            customermaster.groupCustomerName as customerName,
            customermaster.groupcustomerSystemCode as customerSystemCode,
            receiptmastertbl.RVNarration AS comments,
            receiptmastertbl.documentID AS documentID,
            DATE_FORMAT ( receiptmastertbl.RVdate, '%d-%m-%Y' ) AS bookingDate,
            coa.GLSecondaryCode,
            coa.GLDescription,
            receiptmastertbl.RVcode AS bookingInvCode,
            receiptmastertbl.customerID,
            receiptmastertbl.receiptVoucherAutoId,
            $fields3_amount_total_pdc

        FROM
            srp_erp_customerreceiptmaster receiptmastertbl
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS inAd,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"Invoice\"
            or srp_erp_customerreceiptdetail.type = \"Advance\"
            or srp_erp_customerreceiptdetail.type = \"GL\"
        GROUP BY
            receiptVoucherAutoId
            ) det ON det.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM(transactionAmount) AS dbnAmount,
            receiptVoucherAutoId
        FROM
            srp_erp_customerreceiptdetail
        WHERE
            srp_erp_customerreceiptdetail.type = \"creditnote\"
            or srp_erp_customerreceiptdetail.type = \"SLR\"
        GROUP BY
            receiptVoucherAutoId
            ) dbn ON dbn.receiptVoucherAutoId = receiptmastertbl.receiptVoucherAutoId

            LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
            ) cust ON `receiptmastertbl`.`customerID` = cust.customerMasterID

            LEFT JOIN srp_erp_documentcodemaster doccode ON doccode.documentID = receiptmastertbl.documentID

            INNER JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID,receivableAutoID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) customermaster ON `receiptmastertbl`.`customerID` = customermaster.customerMasterID

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON customermaster.receivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = receiptmastertbl.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = receiptmastertbl.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = receiptmastertbl.transactionCurrencyID )
        WHERE
            $customerOR_output
            AND receiptmastertbl.companyID IN  ( " . join(",", $company) . ")
            AND receiptmastertbl.modeOfPayment = 2
            AND receiptmastertbl.confirmedYN = 1
            AND receiptmastertbl.approvedYN != 1
            AND RVchequeNo <> ''
            AND RVchequeDate > DATE_FORMAT( RVdate, '%Y-%m-%d' )
        GROUP BY
            receiptmastertbl.receiptVoucherAutoId
            )
            ) AS b) as tbl1
            GROUP BY
            tbl1.invoiceAutoID,
            tbl1.DocumentCode

        ")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_accounts_receivable_customer_aging_group_detail_report()
    {
        $company = $this->get_group_company();
        $customer = $this->input->post("customerTo");
        $i = 1;
        $customerOR = '(';
        if (!empty($customer)) { /*generate the query according to selected customer*/
            foreach ($customer as $customer_val) {
                if ($i != 1) {
                    $customerOR .= ' OR ';
                }
                $customerOR .= "cust.groupCustomerAutoID  = '" . $customer_val . "' ";
                //$customerOR .= "srp_erp_customermaster.customerAutoID = '" . $customer_val . "' ";
                $i++;
            }
        }

        /* Acknowledgement Group by based on Policy - */
        $columnCheck = "invoiceDate";
        $ackGroupBy = $this->input->post("ackGroupBy");
        if($ackGroupBy == 2) {
            $columnCheck = "acknowledgementDate";
        }

        $customerOR .= ')';
        $customerIN = "";
        if (!empty($customer)) {

            $customerIN .= " AND cust.customerMasterID IN ( " . join("' , '", $customer) . " )";

        }
        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields2 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $fields11 = "";
        $fieldretention = "";
        $fieldrebate = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyReportingExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionReportingAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyReportingExchangeRate)  ';
                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields11 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.companyLocalExchangeRate) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention.= 'IFNULL(retensionLocalAmount,0)';
                    $fieldrebate .= '(IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) / srp_erp_customerinvoicemaster.companyLocalExchangeRate)  ';
                } else if ($val == 'customerCurrencyAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_customerinvoicemaster.customerCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.customerAmount),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.customerAmount) as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.customerCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    //$fields10 .= 'SUM(srp_erp_salesreturndetails.totalValue/srp_erp_salesreturnmaster.customerCurrencyExchangeRate) AS ' . $val . ',';
                    $fieldrebate .= '0';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_customerinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields4 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0)) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_creditnotedetail.' . $val . ') as ' . $val . ',';
                    $fields2 .= 'srp_erp_customerreceiptmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= 'srp_erp_creditnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields11 .= 'srp_erp_salesreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields11 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields11 .= '(SUM(srp_erp_salesreturndetails.totalValue) - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fieldretention .= 'IFNULL(retensionTransactionAmount,0)';
                    $fieldrebate .= 'IFNULL(srp_erp_customerinvoicemaster.rebateAmount, 0) ';
                }
                $fields9 .= 'SUM(srp_erp_customerreceiptdetail.' . $val . ') as ' . $val . ',';
                $fields8 .= '(SUM(srp_erp_creditnotedetail.' . $val . ') - IFNULL((rvd.' . $val . '),0)) * -1 as ' . $val . ',';
                $fields .= '(SUM(srp_erp_customerinvoicemaster.' . $val . ' - '.$fieldretention . ' - ' . $fieldrebate .') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(cnd.' . $val . '),0)+IFNULL(SUM(ca.' . $val . '),0)))  as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_rvadvancematchdetails.' . $val . ') as ' . $val . ',';
                $fields2 .= '(IFNULL(SUM(srp_erp_customerreceiptdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0)) *-1 as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields7 = $val . ' > 0';
                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields10 .= "SUM($val) as TotalRow, ";
            }
        }

        $result = $this->db->query("Select * from(SELECT $fields3 $fields10 a.invoiceAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentID,a.customerAutoID,a.customerName,a.customerSystemCode,a.comments,a.GLSecondaryCode,a.GLDescription,a.referenceNo,DATE_FORMAT(a.invoiceDueDate, '%d-%m-%Y' ) AS invoiceDueDate FROM
        ((SELECT $fields srp_erp_customerinvoicemaster.invoiceAutoID,srp_erp_customerinvoicemaster.documentID as documentID,srp_erp_customerinvoicemaster.invoiceCode as documentCode,srp_erp_customerinvoicemaster.$columnCheck as documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_customerinvoicemaster.invoiceNarration as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerinvoicemaster.$columnCheck) as age,srp_erp_customerinvoicemaster.invoiceDueDate AS invoiceDueDate,srp_erp_customerinvoicemaster.referenceNo AS referenceNo FROM `srp_erp_customerinvoicemaster`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerinvoicemaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID
            FROM
            srp_erp_customerreceiptdetail
                INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId`
                AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_customerreceiptdetail.invoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID
            FROM
                srp_erp_creditnotedetail
                INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_creditnotedetail`.`companyID`IN  ( " . join(",", $company) . ")  AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_creditnotedetail.invoiceAutoID
        ) cnd ON (
            cnd.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN(
        SELECT
        $fields6 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID
            FROM srp_erp_rvadvancematchdetails
            INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
            WHERE `srp_erp_rvadvancematchdetails`.`companyID`IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_rvadvancematchdetails.InvoiceAutoID)
            ca ON (
            ca.`InvoiceAutoID` = `srp_erp_customerinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerinvoicemaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_customerinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_customerinvoicemaster`.`invoiceAutoID`,`srp_erp_customerinvoicemaster`.$columnCheck HAVING $fields7)
        UNION ALL (
        SELECT $fields2 srp_erp_customerreceiptmaster.receiptVoucherAutoId as invoiceAutoID,srp_erp_customerreceiptmaster.documentID as documentID,srp_erp_customerreceiptmaster.RVCode as documentCode,srp_erp_customerreceiptmaster.RVDate as documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,'Advance' as comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_customerreceiptmaster.`RVDate`) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_customerreceiptmaster
        INNER JOIN `srp_erp_customerreceiptdetail` ON `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND  srp_erp_customerreceiptdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                FROM srp_erp_rvadvancematchdetails
                INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematch`.`matchID` = `srp_erp_rvadvancematchdetails`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
                GROUP BY srp_erp_rvadvancematchdetails.receiptVoucherAutoID
                ) avd ON (avd.receiptVoucherAutoID = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoID`)

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_customerreceiptmaster.customerreceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN srp_erp_documentcodemaster ON srp_erp_documentcodemaster.documentID = srp_erp_customerreceiptmaster.documentID  AND srp_erp_documentcodemaster.companyID IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_customerreceiptmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_customerreceiptmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1 AND srp_erp_customerreceiptmaster.RVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`,srp_erp_customerreceiptmaster.`RVDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL (

        SELECT $fields8
        `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` as invoiceAutoID,srp_erp_creditnotemaster.documentID AS documentID,
        srp_erp_creditnotemaster.creditNoteCode AS documentCode,
                            srp_erp_creditnotemaster.creditNoteDate AS documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_creditnotemaster.comments,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_creditnotemaster.creditNoteDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_creditnotemaster
        INNER JOIN `srp_erp_creditnotedetail` ON `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AND `srp_erp_creditnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_creditnotedetail`.`companyID` IN  ( " . join(",", $company) . ")
        LEFT JOIN (SELECT $fields9 receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail` WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND type='creditnote'  GROUP BY creditNoteAutoID) rvd ON rvd.`creditNoteAutoID` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_creditnotemaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_creditnotemaster.customerReceivableAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_creditnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_creditnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_creditnotemaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_creditnotemaster`.`approvedYN` = 1 AND srp_erp_creditnotemaster.creditNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_creditnotemaster`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`,`srp_erp_creditnotemaster`.`creditNoteDate` HAVING (" . join(' AND ', $having) . "))




        UNION ALL (

        SELECT $fields11
        `srp_erp_salesreturnmaster`.`salesReturnAutoID` as invoiceAutoID,srp_erp_salesreturnmaster.documentID AS documentID,
        srp_erp_salesreturnmaster.salesReturnCode AS documentCode,
                            srp_erp_salesreturnmaster.returnDate AS documentDate,cust.groupCustomerAutoID as customerAutoID,cust.groupCustomerName AS customerName,cust.groupcustomerSystemCode AS customerSystemCode,srp_erp_salesreturnmaster.comment,coa.GLSecondaryCode,coa.GLDescription,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_salesreturnmaster.returnDate) as age,'-' as invoiceDueDate,'-' as  referenceNo
        FROM srp_erp_salesreturnmaster
        INNER JOIN `srp_erp_salesreturndetails` ON `srp_erp_salesreturndetails`.`salesReturnAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`
        LEFT JOIN (SELECT $fields9 srp_erp_customerreceiptdetail.receiptVoucherAutoId,creditNoteAutoID FROM `srp_erp_customerreceiptdetail`
                        LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
                        WHERE `srp_erp_customerreceiptdetail`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_customerreceiptmaster.approvedYN = 1 AND type='SLR'  GROUP BY creditNoteAutoID
        ) rvd ON rvd.`creditNoteAutoID` = `srp_erp_salesreturnmaster`.`salesReturnAutoID`

        LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_salesreturnmaster`.`customerID` = cust.customerMasterID AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_salesreturnmaster.customerReceivableAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")


        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_salesreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_salesreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_salesreturnmaster.transactionCurrencyID)
        WHERE $customerOR AND `srp_erp_salesreturnmaster`.`approvedYN` = 1 AND srp_erp_salesreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_salesreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_salesreturnmaster`.`salesReturnAutoID`,`srp_erp_salesreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))


        ) as a GROUP BY a.documentCode,a.invoiceAutoID,a.documentID) AS tbl1
        GROUP BY
            tbl1.invoiceAutoID,tbl1.documentID")->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_collection_summery_report_group($datearr, $previousbegindate, $previousenddate, $beginingDate, $endingDate)
    {
        $company = $this->get_group_company();
        $customerID = $this->input->post('customerID');
        $segment = $this->input->post('segment');
        $currency = $this->input->post('currency');
        $sumamount = '';
        $previousamount = '';
        if ($currency == 2) {
            foreach ($datearr as $key => $val) {
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyLocalExchangeRate,0)) as '$val' ,";
            }
            //$previousamount = "total.previoustransactionAmount/companyLocalExchangeRate";
            $previousamount = "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/companyLocalExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/companyLocalExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/companyLocalExchangeRate), 0 ))";
        } else {
            foreach ($datearr as $key => $val) {
                $sumamount .= " SUM(IF(RVdate='$key',transactionAmount/companyReportingExchangeRate,0)) as '$val' ,";
            }
           // $previousamount = "total.previoustransactionAmount/companyReportingExchangeRate";
            $previousamount = "(((
				IFNULL( addondet.taxPercentage, 0 )/ 100
			)* IFNULL( (tyepdet.transactionAmount/companyReportingExchangeRate), 0 ))+ IFNULL( (det.transactionAmount/companyReportingExchangeRate), 0 )- IFNULL( (Creditnots.transactionAmount/companyReportingExchangeRate), 0 ))";
        }

        $qry = "SELECT
	    b.*,

        IFNULL(previousdet.previoustransactionAmount,0) as previoustransactionAmount
        FROM
	    (
		SELECT
			$sumamount
			customermastername,
			transactionCurrencyDecimalPlaces,
			transactionExchangeRate,
			companyLocalCurrencyDecimalPlaces,
			companyLocalExchangeRate,
			companyReportingCurrencyDecimalPlaces,
			companyReportingExchangeRate,
			customerID,
			segmentID
		FROM
			(
				SELECT
					(((
						IFNULL( addondet.taxPercentage, 0 )/ 100
					)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount,
					srp_erp_customerreceiptmaster.customerID,
					`cust`.`groupCustomerName` AS `customermastername`,
					`transactionCurrencyDecimalPlaces`,
					`transactionCurrency`,
					`transactionExchangeRate`,
					`companyLocalCurrency`,
					`companyLocalCurrencyDecimalPlaces`,
					companyLocalExchangeRate,
					`companyReportingCurrency`,
					`companyReportingExchangeRate`,
					`companyReportingCurrencyDecimalPlaces`,
					DATE_FORMAT(RVdate, '%Y-%m') AS RVdate,
					segmentID
				FROM
					srp_erp_customerreceiptmaster
                    LEFT JOIN ( SELECT groupCustomerAutoID, groupCustomerName, customerMasterID, groupcustomerSystemCode,customerAddress1, companyID FROM srp_erp_groupcustomermaster
                            INNER JOIN srp_erp_groupcustomerdetails ON srp_erp_groupcustomermaster.groupCustomerAutoID = srp_erp_groupcustomerdetails.groupCustomerMasterID
                            WHERE 	srp_erp_groupcustomerdetails.companygroupID = " . current_companyID() . "
                            ) cust ON `srp_erp_customerreceiptmaster`.`customerID` = cust.customerMasterID 	AND `cust`.`companyID`  IN  ( " . join(",", $company) . ")


				LEFT JOIN (
			SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
	 			srp_erp_customerreceiptdetail
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
				( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
			GROUP BY
				receiptVoucherAutoId
			) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
				SELECT SUM( taxPercentage ) AS taxPercentage, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceipttaxdetails
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
			WHERE
			approvedYN = 1
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
				) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
				SELECT SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
			(srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' )
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
				) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
			LEFT JOIN (
			SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1
			AND
				( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
			GROUP BY
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
				WHERE
					srp_erp_customerreceiptmaster.companyID IN  ( " . join(",", $company) . ")
				AND approvedYN = 1
				AND srp_erp_customerreceiptmaster.RVdate BETWEEN '$previousbegindate'
				AND '$endingDate'
				/*AND RVType = 'Invoices'*/
				AND srp_erp_customerreceiptmaster.customerID IN (" . join(',', $customerID) . ")
                AND srp_erp_customerreceiptmaster.segmentID IN (" . join(',', $segment) . ")
			) a
		GROUP BY
			customerID
            ) b
        LEFT JOIN (
            SELECT
                IFNULL(
                    SUM(
                        $previousamount
                    ),
                    0
                ) AS previoustransactionAmount,
                srp_erp_customerreceiptmaster.receiptVoucherAutoId,
                srp_erp_customerreceiptmaster.customerID
            FROM
                srp_erp_customerreceiptmaster

        LEFT JOIN (
            SELECT
		SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
				( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' )
			GROUP BY
				receiptVoucherAutoId
        ) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
        LEFT JOIN (
        SELECT SUM( taxPercentage ) AS taxPercentage, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceipttaxdetails
				LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
			WHERE
			approvedYN = 1
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
					) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	    LEFT JOIN (
	    SELECT SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount, srp_erp_customerreceiptmaster.receiptVoucherAutoId
				FROM srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1 AND
			(srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' )
				GROUP BY srp_erp_customerreceiptmaster.receiptVoucherAutoId
        ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
        LEFT JOIN (
            SELECT
				SUM( srp_erp_customerreceiptdetail.transactionAmount ) AS transactionAmount,
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
			FROM
				srp_erp_customerreceiptdetail
					LEFT JOIN srp_erp_customerreceiptmaster ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId
			WHERE
			approvedYN = 1
			AND
				( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' )
			GROUP BY
				srp_erp_customerreceiptmaster.receiptVoucherAutoId
            ) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
            WHERE
                srp_erp_customerreceiptmaster.RVdate BETWEEN '$previousbegindate'
            AND '$previousenddate' AND approvedYN=1
            GROUP BY
                customerID
        ) previousdet ON (
            `previousdet`.`customerID` = b.customerID
        )";

        $output = $this->db->query($qry)->result_array();
        return $output;
    }

    function get_accounts_payable_vendor_aging_summary_report_postdated_group()
    {
        $vendor = $this->input->post("vendorTo");
        $company = $this->get_group_company();
        //$companyID = current_companyID();
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "supp.SupplierMasterID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID = '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $groupby = "";
        $fields2 = "";
        $fields3 = "";
        $fields3_pdc = "";
        $fields3_pdc_new_qu = "";
        $decimalplaces = "";
        $amountna = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $currency_trans = " ";
        $fields_output = "";
        $fields_output_amt = "";
        $fields_output_amt_curr = "";
        $fields2_output = "";
        $fields8_output = "";
        $currencycode = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyReportingAmount) - (IFNULL(SUM(pvd.companyReportingAmount),0)+IFNULL(SUM(dnd.companyReportingAmount),0)+IFNULL(SUM(pva.companyReportingAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields_output .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $currencycode .= 'CR.CurrencyCode';
                    $fields2_output .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'companyReportingAmountPDC';
                    $fields_output_amt_curr .= 'companyReportingAmountcurrency';
                    $decimalplaces .= 'companyReportingAmountDecimalPlaces';
                    $amountna .= 'companyReportingAmount';


                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyLocalAmount) - (IFNULL(SUM(pvd.companyLocalAmount),0)+IFNULL(SUM(dnd.companyLocalAmount),0)+IFNULL(SUM(pva.companyLocalAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields_output .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'companyLocalAmountPDC';
                    $fields_output_amt_curr .= 'companyLocalAmountcurrency';
                    $currencycode .= 'CL.CurrencyCode';
                    $decimalplaces .= 'companyLocalAmountDecimalPlaces';
                    $amountna .= 'companyLocalAmount';/*companyLocalAmountPDC*/


                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.transactionAmount) - (IFNULL(SUM(pvd.transactionAmount),0)+IFNULL(SUM(dnd.transactionAmount),0)+IFNULL(SUM(pva.transactionAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL(SUM(avd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $groupBy[] = $val . 'currency';

                    $fields_output .= 'TC.CurrencyCode as ' . $val . 'currencyPDC,';
                    $fields2_output .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8_output .= ' SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate) AS ' . $val . 'PDC,';
                    $fields_output_amt .= 'transactionAmountPDC';
                    $fields_output_amt_curr .= 'transactionAmountcurrencyPDC';
                    $currencycode .= 'TC.CurrencyCode';
                    $currency_trans .= ',srp_erp_paysupplierinvoicemaster.transactionCurrency';
                    $decimalplaces .= 'transactionAmountDecimalPlaces';
                    $amountna .= 'transactionAmount';

                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.supplierCurrencyAmount) - (IFNULL(SUM(pvd.supplierCurrencyAmount),0)+IFNULL(SUM(dnd.supplierCurrencyAmount),0)+IFNULL(SUM(pva.supplierCurrencyAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL(SUM(avd.' . $val . '),0)) as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields7 = $val . ' > 0';

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                            $fields3_pdc .= "0 as `" . $val2 . "`,";
                            $fields3_pdc_new_qu .= " `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";
                $fields3_pdc .= "0 as `current`,";
                $fields3_pdc_new_qu .= "`current`,";

                $groupByExplode = "";
                if ($groupBy) {
                    $groupByExplode = "," . join(',', $groupBy);
                }
            }
        }

        $result = $this->db->query("SELECT currency,
            DecimalPlaces,
            $amountna,
            $fields3_pdc_new_qu
            supplierName,
            supplierSystemCode,
            comments,
            documentID,
            bookingDate,
            GLSecondaryCode,
            GLDescription,
            bookingInvCode,
            supplierID,
            SUM( $fields_output_amt ) AS $fields_output_amt  FROM ((SELECT $fields3 a.supplierName,a.supplierSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.supplierID,\"0\" as $fields_output_amt FROM
        ((SELECT $fields supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,`srp_erp_paysupplierinvoicemaster`.`supplierID` as supplierID FROM `srp_erp_paysupplierinvoicemaster`


        LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") supp  ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN
        (
            SELECT
                $fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
            FROM
            srp_erp_paymentvoucherdetail
                INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
                WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
        ) pvd ON (
            pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
            SELECT
                $fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
            FROM
                srp_erp_debitnotedetail
                INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
            WHERE
                `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
        ) dnd ON (
            dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
        )
        LEFT JOIN
        (
        SELECT
            $fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
        FROM
            srp_erp_pvadvancematchdetails
                INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
        ) pva ON (
            pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
        )

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
        WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`supplierID`,srp_erp_paysupplierinvoicemaster.`bookingDate`$currency_trans HAVING $fields7)
        UNION ALL
        (SELECT $fields2 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,`srp_erp_paymentvouchermaster`.`partyID` as supplierID
        FROM srp_erp_paymentvouchermaster
        INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paymentvoucherdetail.type='Advance'
        LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
                FROM srp_erp_pvadvancematchdetails
                INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
                ) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)

        LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
            supp  ON `srp_erp_paymentvouchermaster`.`partyID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paymentvouchermaster.partyGLAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
        WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`partyID`,srp_erp_paymentvouchermaster.`PVdate` HAVING (" . join(' AND ', $having) . "))
        UNION ALL
        (SELECT $fields8 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.`debitNoteDate`) as age,`srp_erp_debitnotemaster`.`supplierID` as supplierID  FROM srp_erp_debitnotemaster
        LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
        LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`


        LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
            supp  ON `srp_erp_debitnotemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_debitnotemaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
        WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_debitnotemaster`.`supplierID`,`srp_erp_debitnotemaster`.`debitNoteDate` HAVING (" . join(' AND ', $having) . "))

        UNION ALL
        (SELECT $fields10 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate AS bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_stockreturnmaster.stockReturnCode AS bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.`returnDate`) as age,`srp_erp_stockreturnmaster`.`supplierID` as supplierID  FROM srp_erp_stockreturnmaster
        LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
        LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`

        LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
            supp  ON `srp_erp_stockreturnmaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

        LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_stockreturnmaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
        WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_stockreturnmaster`.`supplierID`,`srp_erp_stockreturnmaster`.`returnDate` HAVING (" . join(' AND ', $having) . "))) as a GROUP BY a.supplierSystemCode $groupByExplode)
        UNION (
        SELECT
            tbl.$fields_output_amt_curr AS currency,
            tbl.$decimalplaces AS DecimalPlaces,
            0 AS $amountna,
            $fields3_pdc
            tbl.supplierName,
            tbl.supplierSystemCode,
            tbl.comments,
            tbl.documentID,
            tbl.bookingDate,
            tbl.GLSecondaryCode,
            tbl.GLDescription,
            tbl.bookingInvCode,
            tbl.supplierID,
            tbl.$fields_output_amt
        FROM
            (
        SELECT
            $fields_output
            $fields2_output
            $fields8_output
            suppliermaster.groupSupplierName AS supplierName,
            suppliermaster.groupSupplierSystemCode AS supplierSystemCode,
            PVNarration AS comments,
            paymentvoucher.documentID AS documentID,
            DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS bookingDate,
            suppliermaster.liabilityGLAccount AS GLSecondaryCode,
            suppliermaster.liabilityDescription AS GLDescription,
            PVcode AS bookingInvCode,
            '-' AS age,
            paymentvoucher.partyID AS supplierID
        FROM
            srp_erp_paymentvouchermaster paymentvoucher
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS inAd,
            payVoucherAutoId
        FROM
            srp_erp_paymentvoucherdetail
        WHERE
            srp_erp_paymentvoucherdetail.type = \"Invoice\"
            or srp_erp_paymentvoucherdetail.type = \"Advance\"
            or srp_erp_paymentvoucherdetail.type = \"Item\"
            or srp_erp_paymentvoucherdetail.type = \"GL\"
        GROUP BY
            payVoucherAutoId
            ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS dbnAmount,
            payVoucherAutoId
        FROM
            srp_erp_paymentvoucherdetail
        WHERE
            srp_erp_paymentvoucherdetail.type = \"debitnote\"
            or srp_erp_paymentvoucherdetail.type = \"SR\"
        GROUP BY
            payVoucherAutoId
            ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )

            INNER JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID,liabilityGLAccount,liabilityDescription FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ") suppliermaster  ON paymentvoucher.partyID = `suppliermaster`.`SupplierMasterID`

        WHERE
            $vendorORpostdated
            AND paymentvoucher.companyID IN  ( " . join(",", $company) . ")
            AND pvType = 'Supplier'
            AND modeOfPayment = 2
            AND paymentType = 1
            AND confirmedYN = 1
            AND approvedYN != 1
            AND PVchequeNo <> ''
            AND PVchequeDate > PVdate
        GROUP BY
            paymentvoucher.partyID,
            $currencycode
            ) AS tbl
            ) ) AS tbl1
            GROUP BY
            tbl1.supplierID,
            tbl1.currency  ")->result_array();
                //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_aging_summary_report_group()
    {
        $company = $this->get_group_company();
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "supp.SupplierMasterID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';


        $aging = array();
        $interval = $this->input->post("interval");
        $through = $this->input->post("through");
        $z = 1;
        for ($i = $interval; $i < $through; $z++) { /*calculate aging range*/
            if ($z == 1) {
                $aging[] = $z . "-" . $interval;
            } else {
                if (($i + $interval) > $through) {
                    $aging[] = ($i + 1) . "-" . ($through);
                    $i += $interval;
                } else {
                    $aging[] = ($i + 1) . "-" . ($i + $interval);
                    $i += $interval;
                }

            }
        }
        $aging[] = "> " . ($through);

        $fields = "";
        $fields2 = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields8 = "";
        $fields9 = "";
        $fields10 = "";
        $having = array();
        $groupBy = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyReportingAmount) - (IFNULL(SUM(pvd.companyReportingAmount),0)+IFNULL(SUM(dnd.companyReportingAmount),0)+IFNULL(SUM(pva.companyReportingAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.companyLocalAmount) - (IFNULL(SUM(pvd.companyLocalAmount),0)+IFNULL(SUM(dnd.companyLocalAmount),0)+IFNULL(SUM(pva.companyLocalAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields10 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                } else if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.transactionAmount) - (IFNULL(SUM(pvd.transactionAmount),0)+IFNULL(SUM(dnd.transactionAmount),0)+IFNULL(SUM(pva.transactionAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= '(IFNULL(sum(srp_erp_paymentvoucherdetail.' . $val . '),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $fields8 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';

                    $fields10 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields10 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields10 .= '(SUM(srd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) * -1 as ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                } else if ($val == 'supplierCurrencyAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrency as ' . $val . 'currency,';
                    $fields .= 'srp_erp_paysupplierinvoicemaster.supplierCurrencyDecimalPlaces as ' . $val . 'decimalPlace,';
                    $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.supplierCurrencyAmount) - (IFNULL(SUM(pvd.supplierCurrencyAmount),0)+IFNULL(SUM(dnd.supplierCurrencyAmount),0)+IFNULL(SUM(pva.supplierCurrencyAmount),0)))  as ' . $val . ',';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.partyCurrency as ' . $val . 'currency,';
                    $fields2 .= 'SUM(srp_erp_paymentvoucherdetail.partyCurrencyDecimalPlaces) as ' . $val . 'decimalPlace,';
                    $fields2 .= '(IFNULL(SUM(srp_erp_paymentvoucherdetail.partyAmount),0) - IFNULL((avd.' . $val . '),0))*-1  as ' . $val . ',';
                    $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.partyAmount) as ' . $val . ',';
                    $fields5 .= 'SUM(srp_erp_debitnotedetail.supplierAmount) as ' . $val . ',';
                    $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';
                    $groupBy[] = $val . 'currency';
                }
                $fields9 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $having[] = $val . '!= 0';
                $fields3 .= 'a.' . $val . 'currency as currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces as DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields7 = $val . ' > 0';

                if (!empty($aging)) { /*calculate aging range in query*/
                    $count = count($aging);
                    $c = 1;
                    foreach ($aging as $val2) {
                        if ($count == $c) {
                            $fields3 .= "SUM(if(a.age > " . $through . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        } else {
                            $list = explode("-", $val2);
                            $fields3 .= "SUM(if(a.age >= " . $list[0] . " AND a.age <= " . $list[1] . ",a." . $val . ",0)) as `" . $val2 . "`,";
                        }
                        $c++;
                    }
                }
                $fields3 .= "SUM(if(a.age <= 0,a." . $val . ",0)) as `current`,";

                $groupByExplode = "";
                if ($groupBy) {
                    $groupByExplode = "," . join(',', $groupBy);
                }
            }
        }

        $result = $this->db->query("SELECT $fields3 a.supplierName,a.supplierSystemCode,a.comments,a.documentID,a.bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,a.supplierID FROM
            ((SELECT $fields supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paysupplierinvoicemaster.`bookingDate`) as age,`srp_erp_paysupplierinvoicemaster`.`supplierID` as supplierID FROM `srp_erp_paysupplierinvoicemaster`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN
            (
                SELECT
                    $fields4 InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
                FROM
                srp_erp_paymentvoucherdetail
                    INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.`PVDate` <= '" . format_date($this->input->post("from")) . "'
                    WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
            ) pvd ON (
                pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields5 InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
                FROM
                    srp_erp_debitnotedetail
                    INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_debitnotemaster.`debitNoteDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
            ) dnd ON (
                dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
                FROM
                srp_erp_pvadvancematchdetails
                    INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
            ) pva ON (
                pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ")  AND srp_erp_paysupplierinvoicemaster.`bookingDate` <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1 GROUP BY `srp_erp_paysupplierinvoicemaster`.`supplierID`,srp_erp_paysupplierinvoicemaster.`bookingDate`,srp_erp_paysupplierinvoicemaster.InvoiceAutoID HAVING $fields7)
            UNION ALL
            (SELECT $fields2 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_paymentvouchermaster.`PVdate`) as age,`srp_erp_paymentvouchermaster`.`partyID` as supplierID
            FROM srp_erp_paymentvouchermaster
            INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paymentvoucherdetail.type='Advance'
            LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
                    FROM srp_erp_pvadvancematchdetails
                    INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
                    ) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_paymentvouchermaster`.`partyID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paymentvouchermaster.partyGLAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' GROUP BY `srp_erp_paymentvouchermaster`.`partyID`,srp_erp_paymentvouchermaster.`PVdate`,srp_erp_paymentvouchermaster.payVoucherAutoId HAVING (" . join(' AND ', $having) . "))
            UNION ALL
            (SELECT $fields8 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_debitnotemaster.`debitNoteDate`) as age,`srp_erp_debitnotemaster`.`supplierID` as supplierID  FROM srp_erp_debitnotemaster
            LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM `srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ")  GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
            LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  AND srp_erp_paymentvouchermaster.approvedYN = 1 AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                 supp  ON `srp_erp_debitnotemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_debitnotemaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_debitnotemaster`.`supplierID`,`srp_erp_debitnotemaster`.`debitNoteDate`,srp_erp_debitnotemaster.debitNoteMasterAutoID HAVING (" . join(' AND ', $having) . "))

            UNION ALL
            (SELECT $fields10 supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate AS bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_stockreturnmaster.stockReturnCode AS bookingInvCode,DATEDIFF('" . format_date($this->input->post("from")) . "',srp_erp_stockreturnmaster.`returnDate`) as age,`srp_erp_stockreturnmaster`.`supplierID` as supplierID  FROM srp_erp_stockreturnmaster
            LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
            LEFT JOIN (SELECT $fields9 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` LEFT JOIN srp_erp_paymentvouchermaster on srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND  srp_erp_paymentvouchermaster.approvedYN = 1  AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_stockreturnmaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_stockreturnmaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_stockreturnmaster`.`supplierID`,`srp_erp_stockreturnmaster`.`returnDate`,srp_erp_stockreturnmaster.stockReturnAutoID HAVING (" . join(' AND ', $having) . "))) as a GROUP BY a.supplierSystemCode $groupByExplode ")->result_array();
                    //echo $this->db->last_query();
        return $result;
    }

    function get_accounts_payable_vendor_ledger_report_postdatedcheques_group()
    {
        $vendor = $this->input->post("vendorTo");
        //$companyid = current_companyID();
        $company = $this->get_group_company();
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "srp_erp_generalledger.partyAutoID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';


        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID =  '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $feilds = "";
        $feilds_post = "";
        $feilds_post_amt = "";
        $feilds_post_decimal = "";

        $feilds2 = "";
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "transactionAmount") {
                    $feilds .= " srp_erp_generalledger.transactionCurrency AS transactionCurrency,";
                    $feilds2 .= " a.transactionCurrency AS transactionCurrency,";
                    $feilds .= " TC.DecimalPlaces AS " . $val . "DecimalPlaces,";

                    $feilds_post .= " TC.CurrencyCode AS transactionCurrency,";
                    $feilds_post_decimal .= " TC.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/transactionExchangeRate) AS " . $val . ",";
                }
                if ($val == "companyLocalAmount") {
                    $feilds .= " CL.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds_post_decimal .= " CL.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyLocalExchangeRate) AS " . $val . ",";

                }
                if ($val == "companyReportingAmount") {
                    $feilds .= " CR.DecimalPlaces AS " . $val . "DecimalPlaces,";
                    $feilds_post_decimal .= " CR.DecimalPlaces AS  " . $val . "DecimalPlaces,";
                    $feilds_post_amt .= " SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/companyReportingExchangeRate) AS " . $val . ",";
                }
                $feilds .= " IF(documentCode = 'BSI' OR documentCode= 'PRVR',ABS(SUM(srp_erp_generalledger." . $val . ")),IF(documentCode = 'PV' OR documentCode = 'DN' OR documentCode = 'SR' ,SUM(srp_erp_generalledger." . $val . ")*-1,SUM(srp_erp_generalledger." . $val . "))) AS " . $val . ",";
                $feilds2 .= " a." . $val . "DecimalPlaces,";
                $feilds2 .= " a." . $val . " AS " . $val . ",";
            }
        }

        $result = $this->db->query("SELECT $feilds2
            a.documentMasterAutoID,DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate,a.documentCode,a.documentSystemCode,a.documentNarration,a.supplierName,a.supplierSystemCode,a.GLSecondaryCode,a.GLDescription,'1' as type,a.supplierInvoiceDate AS supplierInvoiceDate,a.supplierInvoiceNo FROM
            ((SELECT $feilds srp_erp_generalledger.documentMasterAutoID,srp_erp_generalledger.documentDate,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.documentNarration,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,coa.GLSecondaryCode,coa.GLDescription,sup.supplierInvoiceNo,
            DATE_FORMAT( sup.invoiceDueDate, '%d-%m-%Y' ) AS supplierInvoiceDate
            FROM srp_erp_generalledger

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_generalledger`.`partyAutoID` = `supp`.`SupplierMasterID` AND srp_erp_generalledger.subLedgerType = 2 AND  `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_generalledger.GLAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
            LEFT JOIN srp_erp_paysupplierinvoicemaster sup on sup.InvoiceAutoID  = srp_erp_generalledger.documentMasterAutoID AND srp_erp_generalledger.documentCode = 'BSI'
            WHERE $vendorOR AND srp_erp_generalledger.documentDate BETWEEN '" . format_date($this->input->post("from")) . "' AND '" . format_date($this->input->post("to")) . "' AND srp_erp_generalledger.companyID IN  ( " . join(",", $company) . ")
            GROUP BY srp_erp_generalledger.documentSystemCode,srp_erp_generalledger.partyAutoID)
            UNION ALL
            (SELECT $feilds srp_erp_generalledger.documentMasterAutoID,'' as documentDate,'' as documentCode,'' as documentSystemCode,'Opening Balance' as documentNarration,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,coa.GLSecondaryCode,coa.GLDescription,'' as supplierInvoiceDate,'' as supplierInvoiceNo  FROM srp_erp_generalledger

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_generalledger`.`partyAutoID` = `supp`.`SupplierMasterID` AND srp_erp_generalledger.subLedgerType = 2 AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_generalledger.GLAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_generalledger.transactionCurrencyID)
            WHERE $vendorOR AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "'  AND srp_erp_generalledger.companyID IN  ( " . join(",", $company) . ")
            GROUP BY srp_erp_generalledger.GLAutoID,supp.SupplierMasterID)) AS a
            ORDER BY  a.documentDate")->result_array();

                $result_postdated = $this->db->query("SELECT
            $feilds_post
            $feilds_post_decimal
            $feilds_post_amt

            paymentvoucher.payVoucherAutoId AS documentMasterAutoID,
            DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS documentDate,
            paymentvoucher.documentID AS documentCode,
            PVcode AS documentSystemCode,
            PVNarration as documentNarration,
            suppliermaster.groupSupplierName as supplierName,
            suppliermaster.groupSupplierSystemCode as supplierSystemCode,
            suppliermaster.liabilityGLAccount AS GLSecondaryCode,
            suppliermaster.liabilityDescription AS GLDescription,
            '2' as type
        FROM
            srp_erp_paymentvouchermaster paymentvoucher
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS inAd,
            payVoucherAutoId
        FROM
            srp_erp_paymentvoucherdetail
        WHERE
            srp_erp_paymentvoucherdetail.type = \"Invoice\"
            or srp_erp_paymentvoucherdetail.type = \"Advance\"
            or srp_erp_paymentvoucherdetail.type = \"GL\"
            or srp_erp_paymentvoucherdetail.type = \"Item\"
        GROUP BY
            payVoucherAutoId
            ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
            LEFT JOIN (
        SELECT
            SUM( transactionAmount ) AS dbnAmount,
            payVoucherAutoId
        FROM
            srp_erp_paymentvoucherdetail
        WHERE
            srp_erp_paymentvoucherdetail.type = \"debitnote\"
            or srp_erp_paymentvoucherdetail.type = \"SR\"
        GROUP BY
            payVoucherAutoId
            ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId

        LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
            LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )
            INNER JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID,liabilityGLAccount,liabilityDescription FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                suppliermaster  ON `paymentvoucher`.`partyID` = `suppliermaster`.`SupplierMasterID`

        WHERE
            $vendorORpostdated
            AND paymentvoucher.companyID  IN  ( " . join(",", $company) . ")
            AND pvType = 'Supplier'
            AND modeOfPayment = 2
            AND paymentType = 1
            AND confirmedYN = 1
            AND approvedYN != 1
            AND PVchequeNo <> ''
            AND PVchequeDate > PVdate
            GROUP BY
            paymentvoucher.payVoucherAutoId
            ")->result_array();

        $result_postVL = array_merge($result, $result_postdated);
        // echo $this->db->last_query();
        return $result_postVL;
    }

    function get_accounts_payable_vendor_statement_report_postdatedcheque_group($overdue = false)
    {
        $company = $this->get_group_company();
        //$companyID = current_companyID();
        $where = "";
        if (isset($_POST["currency"]) && $_POST["currency"] != "") {
            $where = " WHERE " . $this->input->post("fieldNameChk")[0] . "currency = '" . $_POST["currency"] . "'";
        }
        $columnCheck = "bookingDate";
        if ($overdue) {
            $columnCheck = "invoiceDueDate";
        }
        $vendor = $this->input->post("vendorTo");
        $i = 1;
        $vendorOR = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($i != 1) {
                    $vendorOR .= ' OR ';
                }
                $vendorOR .= "supp.SupplierMasterID = '" . $vendor_val . "' ";
                $i++;
            }
        }
        $vendorOR .= ')';

        $k = 1;
        $vendorORpostdated = '(';
        if (!empty($vendor)) { /*generate the query according to selectd vendor*/
            foreach ($vendor as $vendor_val) {
                if ($k != 1) {
                    $vendorORpostdated .= ' OR ';
                }
                $vendorORpostdated .= "paymentvoucher.partyID = '" . $vendor_val . "' ";
                $k++;
            }
        }
        $vendorORpostdated .= ')';


        $fields = "";
        $fields_output = "";
        $fields2 = "";
        $fields2_output = "";
        $fields3 = "";
        $fields4 = "";
        $fields5 = "";
        $fields6 = "";
        $fields7 = "";
        $fields8 = "";
        $fields8_output = "";
        $having = array();
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (isset($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == 'transactionAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields_output .= 'TC.CurrencyCode as ' . $val . 'currency,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.transactionCurrency as ' . $val . 'currency,';
                    $fields2 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2_output .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.transactionCurrency as ' . $val . 'currency,';
                    $fields7 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.transactionCurrency as ' . $val . 'currency,';
                    $fields8 .= 'TC.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';
                    $fields8_output .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0)) / paymentvoucher.transactionExchangeRate )  AS  ' . $val . ',';

                } else if ($val == 'companyReportingAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyReportingCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyReportingExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyReportingCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyReportingExchangeRate) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';

                    $fields_output .= 'CR.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CR.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8_output .= 'SUM( (IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0)) / paymentvoucher.companyReportingExchangeRate )  AS  ' . $val . ',';


                } else if ($val == 'companyLocalAmount') {
                    $fields .= 'srp_erp_paysupplierinvoicemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields2 .= 'srp_erp_paymentvoucherdetail.companyLocalCurrency as ' . $val . 'currency,';
                    $fields2 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= 'srp_erp_debitnotemaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields7 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields7 .= '(SUM(dnd.totval/srp_erp_debitnotemaster.companyLocalExchangeRate) - IFNULL(SUM(pvd.' . $val . '),0)) as ' . $val . ',';

                    $fields8 .= 'srp_erp_stockreturnmaster.companyLocalCurrency as ' . $val . 'currency,';
                    $fields8 .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';
                    $fields8 .= '(SUM(srd.totval/srp_erp_stockreturnmaster.companyLocalExchangeRate) - IFNULL(pvd.' . $val . ',0)) as ' . $val . ',';

                    $fields_output .= 'CL.CurrencyCode as ' . $val . 'currency,';
                    $fields2_output .= 'CL.DecimalPlaces as ' . $val . 'DecimalPlaces,';

                    $fields8_output .= 'SUM((IFNULL( det.inAd,0) - IFNULL(dbn.dbnAmount,0))/ paymentvoucher.companyLocalExchangeRate )  AS  ' . $val . ',';

                }
                $fields .= '(SUM(srp_erp_paysupplierinvoicemaster.' . $val . ') - (IFNULL(SUM(pvd.' . $val . '),0)+IFNULL(SUM(dnd.' . $val . '),0)+IFNULL(SUM(pva.' . $val . '),0))) * -1  as ' . $val . ',';
                $fields2 .= '(SUM(srp_erp_paymentvoucherdetail.' . $val . ') - IFNULL(SUM(avd.' . $val . '),0)) as ' . $val . ',';
                $fields3 .= 'a.' . $val . 'currency as ' . $val . 'currency,';
                $fields3 .= 'a.' . $val . 'DecimalPlaces,';
                $fields3 .= 'a.' . $val . ' as ' . $val . ',';
                $fields4 .= 'SUM(srp_erp_paymentvoucherdetail.' . $val . ') as ' . $val . ',';
                $fields5 .= 'SUM(srp_erp_debitnotedetail.' . $val . ') as ' . $val . ',';
                $fields6 .= 'SUM(srp_erp_pvadvancematchdetails.' . $val . ') as ' . $val . ',';


                $having[] = $val . '!= -0 AND ' . $val . ' != 0';
            }
        }

        $result = $this->db->query("SELECT $fields3  a.InvoiceAutoID,a.supplierName,a.supplierSystemCode,a.comments,a.documentID,DATE_FORMAT(a.bookingDate,'" . $this->format . "') as bookingDate,a.GLSecondaryCode,a.GLDescription,a.bookingInvCode,DATE_FORMAT(a.invoiceDueDate,'" . $this->format . "') as invoiceDueDate,'1' AS type,a.supplierInvoiceNo FROM
            ((SELECT $fields srp_erp_paysupplierinvoicemaster.InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_paysupplierinvoicemaster.comments,srp_erp_paysupplierinvoicemaster.documentID,srp_erp_paysupplierinvoicemaster.bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paysupplierinvoicemaster.bookingInvCode,srp_erp_paysupplierinvoicemaster.invoiceDueDate,srp_erp_paysupplierinvoicemaster.supplierInvoiceNo AS supplierInvoiceNo FROM `srp_erp_paysupplierinvoicemaster`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_paysupplierinvoicemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN
            (
                SELECT
                    $fields4 srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID
                FROM
                    srp_erp_paymentvoucherdetail
                    INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "'  GROUP BY srp_erp_paymentvoucherdetail.InvoiceAutoID
            ) pvd ON (
                pvd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields5 srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID
                FROM
                    srp_erp_debitnotedetail
                    INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
                WHERE
                    `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_debitnotedetail.InvoiceAutoID
            ) dnd ON (
                dnd.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )
            LEFT JOIN
            (
                SELECT
                    $fields6 srp_erp_pvadvancematchdetails.InvoiceAutoID
                FROM
                srp_erp_pvadvancematchdetails
                    INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.InvoiceAutoID
            ) pva ON (
                pva.`InvoiceAutoID` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
            )

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
            INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
            WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paysupplierinvoicemaster.supplierliabilityAutoID = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paysupplierinvoicemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paysupplierinvoicemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_paysupplierinvoicemaster`.`companyID` IN  ( " . join(",", $company) . ") AND srp_erp_paysupplierinvoicemaster.$columnCheck <= '" . format_date($this->input->post("from")) . "'  AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = 1
            GROUP BY `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` HAVING (" . join(' AND ', $having) . "))
            UNION ALL
            (SELECT $fields2 srp_erp_paymentvouchermaster.payVoucherAutoID as InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,'Advance' as comments,srp_erp_paymentvouchermaster.documentID,srp_erp_paymentvouchermaster.PVDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_paymentvouchermaster.PVcode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo FROM srp_erp_paymentvouchermaster
            INNER JOIN `srp_erp_paymentvoucherdetail` ON `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` = `srp_erp_paymentvouchermaster`.`payVoucherAutoID` AND `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND  srp_erp_paymentvoucherdetail.type='Advance'
            LEFT JOIN (SELECT $fields6 srp_erp_pvadvancematchdetails.payVoucherAutoId
                    FROM srp_erp_pvadvancematchdetails
                    INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                    WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . format_date($this->input->post("from")) . "' GROUP BY srp_erp_pvadvancematchdetails.payVoucherAutoID
                    ) avd ON (avd.payVoucherAutoID = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID`)

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_paymentvouchermaster`.`partyID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_paymentvouchermaster.partyGLAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_paymentvouchermaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_paymentvouchermaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1 AND srp_erp_paymentvouchermaster.PVDate <= '" . format_date($this->input->post("from")) . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NULL GROUP BY `srp_erp_paymentvouchermaster`.`payVoucherAutoID`)
            UNION ALL
            (SELECT $fields7 srp_erp_debitnotemaster.debitNoteMasterAutoID as InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_debitnotemaster.comments,srp_erp_debitnotemaster.documentID,srp_erp_debitnotemaster.debitNoteDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_debitnotemaster.debitNoteCode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo   FROM srp_erp_debitnotemaster
            LEFT JOIN ( SELECT SUM(srp_erp_debitnotedetail.transactionAmount) AS totval,debitNoteMasterAutoID FROM`srp_erp_debitnotedetail` WHERE `srp_erp_debitnotedetail`.`InvoiceAutoID` IS NULL AND `srp_erp_debitnotedetail`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY debitNoteMasterAutoID) dnd ON dnd.`debitNoteMasterAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
            LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND type='debitnote' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
                supp  ON `srp_erp_debitnotemaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
                INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
                WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_debitnotemaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_debitnotemaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_debitnotemaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_debitnotemaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_debitnotemaster`.`approvedYN` = 1 AND srp_erp_debitnotemaster.debitNoteDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_debitnotemaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`)

            UNION ALL
            (SELECT $fields8 srp_erp_stockreturnmaster.stockReturnAutoID as InvoiceAutoID,supp.groupSupplierName as supplierName,supp.groupSupplierSystemCode as supplierSystemCode,srp_erp_stockreturnmaster.`comment` as comments,srp_erp_stockreturnmaster.documentID,srp_erp_stockreturnmaster.returnDate as bookingDate,coa.GLSecondaryCode,coa.GLDescription,srp_erp_stockreturnmaster.stockReturnCode as bookingInvCode,'-' as invoiceDueDate,'-' as supplierInvoiceNo   FROM srp_erp_stockreturnmaster
            LEFT JOIN ( SELECT SUM(srp_erp_stockreturndetails.totalValue) AS totval,stockReturnAutoID FROM `srp_erp_stockreturndetails` GROUP BY stockReturnAutoID) srd ON srd.`stockReturnAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
            LEFT JOIN (SELECT $fields4 debitNoteAutoID FROM `srp_erp_paymentvoucherdetail` WHERE `srp_erp_paymentvoucherdetail`.`companyID` IN  ( " . join(",", $company) . ") AND type='SR' GROUP BY debitNoteAutoID) pvd ON pvd.`debitNoteAutoID` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`

            LEFT JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
	            supp  ON `srp_erp_stockreturnmaster`.`supplierID` = `supp`.`SupplierMasterID` AND `supp`.`companyID`  IN  ( " . join(",", $company) . ")

            LEFT JOIN ( SELECT chartofAccountID, GLSecondaryCode, GLDescription, GLAutoID, companyID FROM srp_erp_groupchartofaccounts
     	        INNER JOIN srp_erp_groupchartofaccountdetails ON srp_erp_groupchartofaccounts.GLAutoID = srp_erp_groupchartofaccountdetails.groupChartofAccountMasterID
     	        WHERE groupID = " . current_companyID() . " ) coa ON srp_erp_stockreturnmaster.supplierliabilityAutoID  = coa.chartofAccountID AND `coa`.`companyID` IN  ( " . join(",", $company) . ")

            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_stockreturnmaster.companyReportingCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_stockreturnmaster.companyLocalCurrencyID)
            LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) TC ON (TC.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID)
            WHERE $vendorOR AND `srp_erp_stockreturnmaster`.`approvedYN` = 1 AND srp_erp_stockreturnmaster.returnDate <= '" . format_date($this->input->post("from")) . "' AND `srp_erp_stockreturnmaster`.`companyID` IN  ( " . join(",", $company) . ") GROUP BY `srp_erp_stockreturnmaster`.`stockReturnAutoID`)

            ) as a $where")->result_array();
            //echo $this->db->last_query();

                    $postdatedcheque = $this->db->query("SELECT
                $fields_output
                $fields2_output
                $fields8_output
                paymentvoucher.payVoucherAutoId AS InvoiceAutoID,
                suppliermaster.groupSupplierName AS supplierName,
                suppliermaster.groupSupplierSystemCode AS supplierSystemCode,
                    PVNarration AS comments,
                    paymentvoucher.documentID AS documentID,
                    DATE_FORMAT( paymentvoucher.PVdate, '%d-%m-%Y' ) AS bookingDate,
                suppliermaster.liabilityGLAccount AS GLSecondaryCode,
                suppliermaster.liabilityDescription AS GLDescription,
            PVcode AS bookingInvCode,
                '-' as invoiceDueDate,
                '-' as supplierInvoiceNo,
                '2' AS type
            FROM
                srp_erp_paymentvouchermaster paymentvoucher

            LEFT JOIN (
            SELECT
                SUM( transactionAmount ) AS inAd,
                payVoucherAutoId
            FROM
                srp_erp_paymentvoucherdetail
            WHERE
                srp_erp_paymentvoucherdetail.type = \"Invoice\"
                OR srp_erp_paymentvoucherdetail.type = \"Advance\"
                OR srp_erp_paymentvoucherdetail.type = \"Item\"
                OR srp_erp_paymentvoucherdetail.type = \"GL\"
            GROUP BY
                payVoucherAutoId
                ) det ON det.payVoucherAutoId = paymentvoucher.payVoucherAutoId
                LEFT JOIN (
            SELECT
                SUM( transactionAmount ) AS dbnAmount,
                payVoucherAutoId
            FROM
                srp_erp_paymentvoucherdetail
            WHERE
                srp_erp_paymentvoucherdetail.type = \"debitnote\"
                OR srp_erp_paymentvoucherdetail.type = \"SR\"
            GROUP BY
                payVoucherAutoId
                ) dbn ON dbn.payVoucherAutoId = paymentvoucher.payVoucherAutoId
                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CR ON ( CR.currencyID = paymentvoucher.companyReportingCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) CL ON ( CL.currencyID = paymentvoucher.companyLocalCurrencyID )
                LEFT JOIN ( SELECT DecimalPlaces, CurrencyCode, currencyID FROM srp_erp_currencymaster ) TC ON ( TC.currencyID = paymentvoucher.transactionCurrencyID )

                INNER JOIN (SELECT groupSupplierAutoID,groupSupplierName,SupplierMasterID,groupSupplierSystemCode,companyID,liabilityGLAccount,liabilityDescription FROM srp_erp_groupsuppliermaster INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID WHERE srp_erp_groupsupplierdetails.companygroupID = " . current_companyID() . ")
	            suppliermaster  ON `paymentvoucher`.`partyID` = `suppliermaster`.`SupplierMasterID`

            WHERE
                $vendorORpostdated
                AND paymentvoucher.companyID IN  ( " . join(",", $company) . ")
                AND pvType = 'Supplier'
                AND modeOfPayment = 2
                AND paymentType = 1
                AND confirmedYN = 1
                AND approvedYN != 1
                AND PVchequeNo <> ''
                AND PVchequeDate > PVdate
            GROUP BY
                paymentvoucher.payVoucherAutoId")->result_array();


        return array_merge($result, $postdatedcheque);
        /*return $result;*/
    }

    function get_finance_general_ledger_report_donor()
    {
        $segment = $this->input->post("segment");
        $glcode = $this->input->post("glCodeTo");
        $documentID = $this->input->post("documentID");
        $documentIDpdf = $this->input->post("documentIDpdf");
        $segmentFilter = array_filter(fetch_segment_reports(true));
        unset($segmentFilter['']);
        $segmentFilterCount = count($segmentFilter);
        $segmentCount = count($segment);
        $segmentQry = "";

        if ($segmentFilterCount != $segmentCount) {
            $segmentQry = "AND srp_erp_generalledger.segmentID IN(" . join(',', $segment) . ")";
        }

        $docIDs = '';
        if (!empty($documentID)) {
            $docIDs = "AND srp_erp_generalledger.documentCode IN ($documentID)";
        }else if(!empty($documentIDpdf)){
            $docIDs = "AND srp_erp_generalledger.documentCode IN (" . join(',', $documentIDpdf) . ")";
        }
        $feilds = [];
        $feilds2 = [];
        $feilds3 = [];
        $fieldNameChk = $this->input->post("fieldNameChk");
        if (!empty($fieldNameChk)) { /*generate the query according to selectd columns*/
            foreach ($fieldNameChk as $val) {
                if ($val == "segmentID") {
                    $feilds[] = "CONCAT(srp_erp_segment.segmentCode,'-',srp_erp_segment.description) as segmentID";
                } else if ($val == "partySystemCode") {
                    $feilds[] = "IF(cust.customerSystemCode IS NOT NULL,CONCAT(cust.customerSystemCode,'-',cust.customerName),IF (supp.supplierSystemCode IS NOT NULL,CONCAT(supp.supplierSystemCode,'-',supp.supplierName), IF(don.name is not null, don.name,'-' ) )) AS partySystemCode";
                } else if ($val == "GLSecondaryCode") {
                    $feilds[] = "srp_erp_chartofaccounts." . $val;
                } else if ($val == "document") {
                    $feilds[] = "dc." . $val;
                } else {
                    $feilds[] = "srp_erp_generalledger." . $val;
                }

                $feilds2[] = "a." . $val;
                if ($val == "companyLocalAmount") {
                    $feilds3[] = "SUM(companyLocalAmount) as " . $val;
                    $feilds3[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CL.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "companyReportingAmount") {
                    $feilds3[] = "SUM(companyReportingAmount) as " . $val;
                    $feilds3[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds[] = "CR.DecimalPlaces as " . $val . "DecimalPlaces";
                    $feilds2[] = "a." . $val . "DecimalPlaces";
                } elseif ($val == "documentNarration") {
                    $feilds3[] = "'CF Balance' as " . $val;
                } elseif ($val == "documentDate") {
                    //$feilds3[] = "'1970-01-01' as documentDate";
                    $feilds3[] = "'' as documentDate";
                    $feilds2[] = "DATE_FORMAT(a.documentDate,'" . $this->format . "') as documentDate";
                    $feilds2[] = "a.documentDate as documentDate2";
                    $feilds2[] = "a.documentDate as documentDateSort";
                } else {
                    $feilds3[] = "'-' as " . $val;
                }

            }
        }
        $feilds = join(',', $feilds);
        $feilds2 = join(',', $feilds2);
        $feilds3 = join(',', $feilds3);
        $sql = "SELECT $feilds2,a.documentCode,a.documentMasterAutoID,a.GLDescription,a.masterCategory,a.GLAutoID,a.systemGLCode FROM (
            (SELECT $feilds,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID,srp_erp_generalledger.systemGLCode
        FROM srp_erp_generalledger
        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN srp_erp_segment ON srp_erp_generalledger.segmentID = srp_erp_segment.segmentID AND srp_erp_segment.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN (SELECT * FROM srp_erp_customermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY customerAutoID) cust ON srp_erp_generalledger.partyAutoID = cust.customerAutoID AND srp_erp_generalledger.partyType = 'CUS'
        LEFT JOIN (SELECT * FROM srp_erp_suppliermaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY supplierAutoID) supp ON srp_erp_generalledger.partyAutoID = supp.supplierAutoID AND srp_erp_generalledger.partyType = 'SUP'
        LEFT JOIN (SELECT * FROM srp_erp_ngo_donors WHERE companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY contactID) don ON srp_erp_generalledger.partyAutoID = don.contactID AND srp_erp_generalledger.partyType = 'DON'

        LEFT JOIN (SELECT document,documentID FROM srp_erp_documentcodemaster WHERE companyID = " . $this->common_data['company_data']['company_id'] . ") dc ON (dc.documentID = srp_erp_generalledger.documentCode)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
        WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ") $segmentQry $docIDs AND srp_erp_generalledger.documentDate  BETWEEN '" . format_date($this->input->post("from")) . "'  AND '" . format_date($this->input->post("to")) . "'  AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . "
        ORDER BY srp_erp_generalledger.documentType,srp_erp_generalledger.documentDate ASC)
        UNION ALL
        (SELECT $feilds3,srp_erp_generalledger.documentCode,srp_erp_generalledger.documentMasterAutoID,srp_erp_chartofaccounts.GLDescription,srp_erp_chartofaccounts.masterCategory,srp_erp_generalledger.GLAutoID, srp_erp_generalledger.systemGLCode FROM srp_erp_generalledger
        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.companyID = " . $this->common_data['company_data']['company_id'] . "
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CR ON (CR.currencyID = srp_erp_generalledger.companyReportingCurrencyID)
        LEFT JOIN (SELECT DecimalPlaces,currencyID FROM srp_erp_currencymaster) CL ON (CL.currencyID = srp_erp_generalledger.companyLocalCurrencyID)
        WHERE srp_erp_generalledger.GLAutoID IN(" . join(',', $glcode) . ")  $segmentQry $docIDs AND srp_erp_chartofaccounts.masterCategory = 'BS'  AND srp_erp_generalledger.documentDate < '" . format_date($this->input->post("from")) . "' AND srp_erp_generalledger.companyID = " . $this->common_data['company_data']['company_id'] . " GROUP BY srp_erp_generalledger.GLAutoID )) as a ORDER BY documentDate2 asc";
                $result = $this->db->query($sql)->result_array();
        //echo $this->db->last_query();
        return $result;
    }

    function loadSupplier()
    {
        $activeStatus = $this->input->post("activeStatus");
        $status_filter = '';
        $companyID = current_companyID();
        $customercat = $this->db->query("SELECT COUNT( `partyCategoryID`) as partyCategorycount FROM `srp_erp_partycategories` WHERE `companyID` = '{$companyID}' AND `partyType` = 1")->row('partyCategorycount');


        if (!empty($activeStatus)) {
            if($activeStatus==1){
                $status_filter = "AND isActive = 1 ";
            }elseif($activeStatus==2){
                $status_filter = "AND isActive = 0 ";
            }else{
                $status_filter = '';
            }
        }
       
        $type = $this->input->post("type");
        
        //if ($type == 1) {
            $supplier['details'] = $this->db->query("SELECT supplierAutoID,supplierName,supplierSystemCode,supplierCountry
                                              FROM `srp_erp_suppliermaster` WHERE `companyID` = $companyID AND `deletedYN` =0 AND masterApprovedYN = 1 $status_filter")->result_array();
            $supplier['type'] = 1;
            return $supplier;
        /* } else { 
            $companyID=current_companyID();
 
            $supplier = false;
            $supplier['details'] = $this->db->query("SELECT groupSupplierAutoID,groupSupplierName,groupSupplierSystemCode,supplierCountry
                FROM
                    `srp_erp_groupsuppliermaster`
                    INNER JOIN srp_erp_groupsupplierdetails ON srp_erp_groupsuppliermaster.groupSupplierAutoID = srp_erp_groupsupplierdetails.groupSupplierMasterID
                WHERE
                srp_erp_groupsuppliermaster.companyGroupID =  $companyID
                    ")->result_array();
            $supplier['type'] = 0;
            return ($supplier);
        } */
    }
    //$this->db->order_by('empTB.ECode', 'ASC');


    function save_report($data = null)
    {
            $cur_dataTime = format_date_mysql_datetime();
            $data['companyID'] = current_companyID();
            $data['CreatedByEmpID'] = current_userID();
            $data['createdDatetime'] = $cur_dataTime;
        
            $masterID = $this->input->post('masterID');
            $levelNo = $this->input->post('levelNo');
            $data['description'] = $this->input->post('description');
            $data['sortOrder'] = $this->input->post('sortOrder');
            $data['captureCostYN'] = $this->input->post('captureCostYN');
            $data['captureHRYN'] = $this->input->post('captureHRYN');
            $data['masterID'] = !empty($masterID) ? $masterID : 0;
            $data['levelNo'] = !empty($levelNo) ? $levelNo : 1;
            $data['systemTypeID'] = $this->input->post('system_type');
       
        $this->db->select('id');
        $this->db->from('srp_erp_reporting_structure_master');
        $this->db->where('masterID', $masterID);
        $this->db->where('levelNo', $levelNo);
        $this->db->where('sortOrder', $this->input->post('sortOrder'));
        $this->db->where('companyID', current_companyID());
        $isexit_1 = $this->db->get()->row_array('id');

        if(!empty($isexit_1)){
            return array('error' => 1, 'message' => 'Short_Order can not be duplicated with same master_id and Level_number !');
        }
        else{
            $this->db->select('id');
            $this->db->from('srp_erp_reporting_structure_master');
            $this->db->where('masterID', $masterID);
            $this->db->where('levelNo', $levelNo);
            $this->db->where('sortOrder', $this->input->post('sortOrder'));
            $this->db->where('description', $this->input->post('description'));
            $this->db->where('companyID', current_companyID());
            $isexit_2 = $this->db->get()->row_array('id');

            if(!empty($isexit_2)){
                return array('error' => 1, 'message' => 'Report Already Exist !');
            }else{
                $result = $this->db->insert('srp_erp_reporting_structure_master', $data);
                //$last_id = $this->db->insert_id();
            }
        }

        if ($result) {
            return array('error' => 0, 'message' => 'Report added successfully.');
        } else {
            return array('error' => 1, 'message' => 'Error while adding Report !');
        }
    }

    function load_report()
    {
        $this->db->select('id, description as name, masterID as parentid, levelNo, sortOrder, captureCostYN, captureHRYN, systemTypeID as system_type');
        $this->db->from('srp_erp_reporting_structure_master');
        //$this->db->where('companyID', current_companyID());
        $result = $this->db->get()->result_array();

        return $result;
    }

    function update_report()
    {
        $discripion = $this->input->post('description');
        $sortOrder = $this->input->post('sortOrder');
        $captureCostYN = $this->input->post('captureCostYN');
        $captureHRYN = $this->input->post('captureHRYN');
        $system_type = $this->input->post('system_type');

        $this->db->set('description',$discripion);
        $this->db->set('sortOrder',$sortOrder);
        $this->db->set('captureCostYN',$captureCostYN);
        $this->db->set('captureHRYN',$captureHRYN);
        $this->db->set('systemTypeID',$system_type);
        $this->db->where('id', $this->input->post('auto_id'));

        $update = $this->db->update('srp_erp_reporting_structure_master');
        
        if ($update) {
            return array('error' => 0, 'message' => 'Report Update successfully.');
        } else {
            return array('error' => 1, 'message' => 'Error while Updating Report !');
        }

    }

    function save_report_describe()
    {
        $cur_dataTime = format_date_mysql_datetime();
        $id = trim($this->input->post('describe_autoID') ?? '');

        if(isset($id) && !empty($id)){
            $data_e['modifiedDateTime'] = $cur_dataTime;
            $data_e['modifiedByEmpID'] = current_userID();
            $data_e['detail_description'] = $this->input->post('describe_text');
            $data_e['detail_code'] = trim($this->input->post('code') ?? '');
            
            $this->db->where('id', $id);
            $result = $this->db->update('srp_erp_reporting_structure_details', $data_e);

            if ($result) {
                return array('error' => 0, 'message' => 'Description updated successfully.');
            } else {
                return array('error' => 1, 'message' => 'Error while updating description !');
            }
        }else{
            $data['companyID'] = current_companyID();
            $data['detail_description'] = $this->input->post('describe_text');
            $data['detail_code'] = trim($this->input->post('code') ?? '');
            $data['structureMasterID'] = $this->input->post('masterID');
            $data['sortOrder'] = $this->input->post('sortOrder');
            $data['CreatedByEmpID'] = current_userID();
            $data['createdDatetime'] = $cur_dataTime;

            $result = $this->db->insert('srp_erp_reporting_structure_details', $data);

            if ($result) {
                return array('error' => 0, 'message' => 'Description Saved successfully.');
            } else {
                return array('error' => 1, 'message' => 'Error while saving description !');
            }
        }
  
    }

    function description_delete($id){
        $this->db->where('id', $id);
        $this->db->where('companyID', current_companyID());
        $delete = $this->db->delete('srp_erp_reporting_structure_details');

        if ($delete) {
            return array('error' => 0, 'message' => 'Description Deleted successfully.');
        } else {
            return array('error' => 1, 'message' => 'Error while deleting description !');
        }
    }

    function save_activity_code(){

        $this->db->trans_start();
        $activityCode_ID = $this->input->post('activityCode_ID');
        $company_text = $this->input->post('company_text');
        $is_active = $this->input->post('is_active');
        $activityCode_name = $this->input->post('activityCode_name');
        $companyID = $this->input->post('companyID');
        $narration = $this->input->post('narration');
        $company_code = explode(' | ', $company_text);

        $data['company_id'] = $companyID;
        $data['company_code'] = $company_code[0];
        $data['activity_code'] = $activityCode_name;
        $data['narration'] = $narration;
        $data['is_active'] = $is_active;

        if(!empty($activityCode_ID)){
            $data['modifiedByEmpID'] = $this->common_data['current_userID'];
            $data['modifiedDateTime'] = $this->common_data['current_date'];

            $this->db->where('id', $activityCode_ID);
            $this->db->update('srp_erp_activity_code_main', $data);

            $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to update..!');
                } else {
                    $this->db->trans_commit();
                    return array('s', 'Updated Successfully..!');
                }
        }
        else{
            $data['CreatedByEmpID'] = current_userID();
            $data['createdDatetime'] = $this->common_data['current_date'];

            $this->db->insert('srp_erp_activity_code_main', $data);

            $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to save..!');
                } else {
                    $this->db->trans_commit();
                    return array('s', 'Saved Successfully..!');
                }
        }
        
       
    }

    function load_activity_code_edit(){
        $companyID = current_companyID();
        $id = trim($this->input->post('id') ?? '');

        $this->db->select("id, company_id, activity_code, is_active, narration");
        $this->db->from('srp_erp_activity_code_main');
        $this->db->where('id', $id);
        $this->db->where('company_id', $companyID);
        $data = $this->db->get()->row_array();

        return $data;
    }


    /** save activity code configuration on reporting structure */
    function save_details()
    {
        $this->db->trans_start();
        $detail_id = $this->input->post('detail_id');
        $master_id = $this->input->post('master_id');
        $activityCodeID = $this->input->post('activityCodeID');
        $isCheck = trim($this->input->post('isCheck') ?? '');
        $companyID = current_companyID();

        $details_des = $this->db->query("SELECT
                    id,
                    detail_code, 
                    detail_description,
                    sortOrder 
                    FROM
                        srp_erp_reporting_structure_details
                    WHERE
                        id = {$detail_id} 
            ")->row_array();

        $this->db->select("id");
        $this->db->from('srp_erp_activity_code_sub');
        $this->db->where('main_id', $activityCodeID);
        $this->db->where('rpt_struc_master_id', $master_id);
        $this->db->where('companyID', $companyID);
        $isexist = $this->db->get()->row('id');

        if($isCheck == 1){
            if(!empty($isexist)){
                $data['rpt_struc_detail_id'] = $detail_id;
                $data['rpt_struc_detail_code'] = $details_des['detail_code'];
                $data['rpt_struc_detail_description'] = $details_des['detail_description'];
                $data['sort_order'] = $details_des['sortOrder'];
                $data['modifiedByEmpID'] = $this->common_data['current_userID'];
                $data['modifiedDateTime'] = $this->common_data['current_date'];

                $this->db->where('id', $isexist);
                $this->db->update('srp_erp_activity_code_sub', $data);

                $test = $this->db->query("SELECT
                                        main_id,
                                        rpt_struc_master_id,
                                        rpt_struc_detail_id 
                                    FROM
                                        srp_erp_activity_code_sub 
                                    WHERE
                                        main_id = {$activityCodeID} 
                                        AND rpt_struc_master_id IS NOT NULL
                                        AND rpt_struc_detail_id IS NOT NULL
                                    ")->result_array();

                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to update..!');
                } else {
                    $this->db->trans_commit();
                    return array('s', 'Updated Successfully..!', $test);
                }
        
            }else{
                $data['main_id'] = $activityCodeID;
                $data['rpt_struc_master_id'] = $master_id;
                $data['rpt_struc_detail_id'] = $detail_id;
                $data['rpt_struc_detail_code'] = $details_des['detail_code'];
                $data['rpt_struc_detail_description'] = $details_des['detail_description'];
                $data['sort_order'] = $details_des['sortOrder'];
                $data['companyID'] = $companyID;
                $data['CreatedByEmpID'] = current_userID();
                $data['createdDatetime'] = $this->common_data['current_date'];

                $this->db->insert('srp_erp_activity_code_sub', $data);

                $test = $this->db->query("SELECT
                                        main_id,
                                        rpt_struc_master_id,
                                        rpt_struc_detail_id 
                                    FROM
                                        srp_erp_activity_code_sub 
                                    WHERE
                                        main_id = {$activityCodeID} 
                                        AND rpt_struc_master_id IS NOT NULL
                                        AND rpt_struc_detail_id IS NOT NULL
                        ")->result_array();
            
                $this->db->trans_complete();
                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        return array('e', 'Failed to save..!');
                    } else {
                        $this->db->trans_commit();
                        return array('s', 'Saved Successfully..!', $test);
                    }
            }

        }else if($isCheck == 0){
            //$status=$this->db->delete('srp_erp_activity_code_sub', array('main_id' => $activityCodeID, 'rpt_struc_master_id' => $master_id, 'rpt_struc_detail_id' => $detail_id));
            $this->db->select("id");
            $this->db->from('srp_erp_activity_code_sub');
            $this->db->where('main_id', $activityCodeID);
            $this->db->where('rpt_struc_master_id', $master_id);
            $this->db->where('rpt_struc_detail_id', $detail_id);
            $this->db->where('companyID', $companyID);
            $deleteID = $this->db->get()->row('id');
            
            //$status = $this->db->delete('srp_erp_activity_code_sub', array('id' => $deleteID));
            $status = $this->db->query("DELETE 
                                    FROM
                                        srp_erp_activity_code_sub 
                                    WHERE
                                        id = {$deleteID}
                        ");
            //$affectedRows = $this->db->affected_rows();
            if($status){
                $test = $this->db->query("SELECT
                                        main_id,
                                        rpt_struc_master_id,
                                        rpt_struc_detail_id 
                                    FROM
                                        srp_erp_activity_code_sub 
                                    WHERE
                                        main_id = {$activityCodeID} 
                                        AND rpt_struc_master_id IS NOT NULL
                                        AND rpt_struc_detail_id IS NOT NULL
                        ")->result_array();
               return array('s', ' Removed Successfully..!', $test);
            }else {
                return array('e', ' Error in Remove..!');
            }
        }
    }

}
