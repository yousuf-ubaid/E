<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Created by PhpStorm.
 * User: NSK
 * Date: 5/2/2016
 * Time: 12:54 PM
 */
class Employee_model extends ERP_Model
{
    
    function new_employee()
    {
        $emp_title = $this->input->post('emp_title');
        $shortName = $this->input->post('shortName');
        $fullName = $this->input->post('fullName');
        $emp_gender = $this->input->post('emp_gender');
        $date_format_policy = date_format_policy();
        $epDob = $this->input->post('empDob');
        $empDob = input_format_date($epDob, $date_format_policy);
        $religion = $this->input->post('religion');
        $emp_email = $this->input->post('emp_email');
        $EmpSecondaryCode = trim($this->input->post('EmpSecondaryCode') ?? '');
        $Nationality = trim($this->input->post('Nationality') ?? '');
        $MaritialStatus = trim($this->input->post('MaritialStatus') ?? '');
        $BloodGroup = trim($this->input->post('BloodGroup') ?? '');
        $initial = trim($this->input->post('initial') ?? '');
        $Ename4 = trim($this->input->post('Ename4') ?? '');
        $Ename3 = trim($this->input->post('Ename3') ?? '');
        $NIC = trim($this->input->post('NIC') ?? '');
        $Ename2 = $initial . ' ' . $Ename4;
        $isEmailExist = $this->isExistEmailID($emp_email);
        $companyID = current_companyID();

        if (!empty($isEmailExist)) {
            return ['e', 'Email address already exists'];
        }

        $secondary_code_status = $this->check_secondary_code_status($EmpSecondaryCode);
        if (!empty($secondary_code_status)) {
            return ['e', 'This secondary code is already exists'];
        }

        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        $ECode = $EmpSecondaryCode;
        if ($isAutoGenerate == 1) {
            $ECode = empCodeGenerate();
        }

        if (isset($_FILES['empImage']['name']) && !empty($_FILES['empImage']['name'])) {
            //$imgData = $this->imageUpload($ECode);
            $imgData = $this->image_upload_s3($ECode);
        } else {
            $img = ($emp_gender == 2) ? 'images/users/female.png' : 'images/users/male.png';
            $imgData = array('s', $img);
        }

        if (isset($_FILES['empSignatureImage']['name']) && !empty($_FILES['empSignatureImage']['name'])) {
            //$imgDataSignature = $this->imageUploadSignature($ECode . 'Signature');
            $imgDataSignature = $this->image_signature_s3("{$ECode}Signature");
        } else {
            $imgDataSignature = array('s', 'no-logo.png');
        }


        if ($imgData[0] != 's' || $imgDataSignature[0] != 's') {
            return ($imgData[0] != 's') ? $imgData : $imgDataSignature;
        } else {
            $data = array(
                'ECode' => $ECode,
                'EmpTitleId' => $emp_title,
                'Ename1' => $fullName,
                'EmpShortCode' => $shortName,
                'Gender' => $emp_gender,
                'EEmail' => $emp_email,
                'EDOB' => $empDob,
                'rid' => $religion,
                'EmpImage' => $imgData[1],
                'empSignature' => $imgDataSignature[1],
                'SchMasterId' => current_schMasterID(),
                'branchID' => current_schBranchID(),
                'Erp_companyID' => $companyID,
                'CreatedPC' => current_pc(),
                'CreatedUserName' => current_employee(),
                'CreatedDate' => current_date(),
                'EmpSecondaryCode' => $EmpSecondaryCode,
                'Nid' => $Nationality,
                'MaritialStatus' => $MaritialStatus,
                'BloodGroup' => $BloodGroup,
                'UserName' => $emp_email,
                'Password' => md5('Welcome@123'),
                'Ename2' => $Ename2,
                'Ename3' => $Ename3,
                'initial' => $initial,
                'Ename4' => $Ename4,
                'NIC' => $NIC
            );


            $this->db->trans_start();


            $this->db->insert('srp_employeesdetails', $data);
            $empID = $this->db->insert_id();

            $data_central = array(
                'empID' => $empID,
                'Username' => $emp_email,
                'Password' => md5('Welcome@123'),
                'companyID' => $companyID,
                'email' => $emp_email,
            );
            $db2 = $this->load->database('db2', TRUE);
            $db2->insert('user', $data_central);

            $this->insert_default_dashboard($empID, $companyID);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Employee Created Successfully.', $empID);
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error In Employee Creating');
            }
        }
    }

    function check_secondary_code_status($e_code)
    {
        $companyID = current_companyID();
        $emp_id = $this->db->get_where('srp_employeesdetails', ['EmpSecondaryCode' => $e_code, 'Erp_companyID' => $companyID])->row('EIdNo');
        return $emp_id;
    }

    function new_empSave()
    {
        $tibian_type = trim($this->input->post('tibian_type') ?? '');
        $tibian_type = (empty($tibian_type)) ? null : $tibian_type;
        $emp_title = $this->input->post('emp_title');
        $fullName = $this->input->post('fullName');
        $emp_gender = $this->input->post('emp_gender');
        $emp_email = $this->input->post('emp_email');
        $EmpSecondaryCode = trim($this->input->post('EmpSecondaryCode') ?? '');
        $initial = trim($this->input->post('initial') ?? '');
        $Ename4 = trim($this->input->post('Ename4') ?? '');

        $Ename4 = trim($this->input->post('Ename4') ?? '');
       
        $hide_Name_with_Initials = getPolicyValues('HNWI', 'All');
        if($hide_Name_with_Initials != 1){
            $initial = trim($this->input->post('initial') ?? '');
            $Ename2 = $initial . ' ' . $Ename4;
        }else{
            $initial = null;
            $Ename2 = $Ename4;
        }

        $isEmailExist = $this->isExistEmailID($emp_email);
        $companyID = current_companyID();

        $isTibian = ($this->uri->segment(3) == 'tibian') ? 'Y' : 'N';

        if (!empty($isEmailExist)) {
            return ['e', 'Email address already exists'];
        }


        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        $ECode = $EmpSecondaryCode;
        $serialNo = null;
        if ($isAutoGenerate == 1) {
            if (!empty($tibian_type)) {
                $code_data = empCodeGenerate($tibian_type);
                $ECode = $EmpSecondaryCode = $code_data['code'];
                $serialNo = $code_data['serialNo'];
            } else {
                $code_data = empCodeGenerate();
                $ECode = $code_data;              
            }
        }

        $secondary_code_status = $this->check_secondary_code_status($EmpSecondaryCode);
        if (!empty($secondary_code_status)) {
            return ['e', 'This secondary code is already exists'];
        }


        if (isset($_FILES['empImage']['name']) && !empty($_FILES['empImage']['name'])) {
            //$imgData = $this->imageUpload($ECode);
            $imgData = $this->image_upload_s3($ECode);
        } else {
            $img = ($emp_gender == 2) ? 'images/users/female.png' : 'images/users/male.png';
            $imgData = array('s', $img);
        }

        if (isset($_FILES['empSignatureImage']['name']) && !empty($_FILES['empSignatureImage']['name'])) {
            //$imgDataSignature = $this->imageUploadSignature($ECode . 'Signature');
            $imgDataSignature = $this->image_signature_s3("{$ECode}Signature");
        } else {
            $imgDataSignature = array('s', 'no-logo.png');
        }


        if ($imgData[0] != 's' || $imgDataSignature[0] != 's') {
            return ($imgData[0] != 's') ? $imgData : $imgDataSignature;
        } else {
            $data = [
                'ECode' => $ECode,
                'EmpTitleId' => $emp_title,
                'Gender' => $emp_gender,
                'EEmail' => $emp_email,
                'SchMasterId' => current_schMasterID(),
                'branchID' => current_schBranchID(),
                'Erp_companyID' => $companyID,
                'CreatedPC' => current_pc(),
                'CreatedUserName' => current_employee(),
                'CreatedDate' => current_date(),
                'EmpSecondaryCode' => $EmpSecondaryCode,
                'UserName' => $emp_email,
                'Password' => md5('Welcome@123'),
                'tibianType' => $tibian_type,
                'serialNo' => $serialNo
            ];


            if ($isTibian == 'Y') {
                $firstName = trim($this->input->post('firstName') ?? '');
                $secondName = trim($this->input->post('secondName') ?? '');
                $thirdName = trim($this->input->post('thirdName') ?? '');
                $forthName = trim($this->input->post('forthName') ?? '');
                $familyName = trim($this->input->post('familyName') ?? '');
                $displayName = $firstName . ' ' . $familyName;
                $firstName_other = trim($this->input->post('firstName_other') ?? '');
                $secondName_other = trim($this->input->post('secondName_other') ?? '');
                $thirdName_other = trim($this->input->post('thirdName_other') ?? '');
                $forthName_other = trim($this->input->post('forthName_other') ?? '');
                $familyName_other = trim($this->input->post('familyName_other') ?? '');
                $displayName_other = $firstName_other . ' ' . $familyName_other;

                $data2 = [
                    'Ename1' => $firstName, 'empSecondName' => $secondName, 'Ename3' => $thirdName, 'Ename4' => $forthName,
                    'Ename2' => $displayName, 'EFamilyName' => $familyName,
                    'Enameother1' => $firstName_other, 'empSecondNameOther' => $secondName_other, 'Enameother3' => $thirdName_other,
                    'Enameother4' => $forthName_other, 'Enameother2' => $displayName_other, 'EFamilyNameOther' => $familyName_other
                ];
                $data = array_merge($data, $data2);
            } else {
                $data2 = [
                    'Ename1' => $fullName, 'EmpImage' => $imgData[1], 'empSignature' => $imgDataSignature[1],
                    'Ename2' => $Ename2, 'initial' => $initial, 'Ename4' => $Ename4,
                ];
                $data = array_merge($data, $data2);
            }

            if(IS_OMAN_OIL){
                $data['empMachineID'] = $EmpSecondaryCode;
            }

            $this->db->trans_start();


            $this->db->insert('srp_employeesdetails', $data);
            $empID = $this->db->insert_id();

            $data_central = array(
                'empID' => $empID,
                'Username' => $emp_email,
                'Password' => md5('Welcome@123'),
                'companyID' => $companyID,
                'email' => $emp_email,
            );
            $db2 = $this->load->database('db2', TRUE);
            $db2->insert('user', $data_central);

            $this->insert_default_dashboard($empID, $companyID);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Employee Created Successfully.', $empID);
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error In Employee Creating');
            }
        }
    }

    function imageUpload($ECode)
    {

        $defaultImagePath = getCompanyImagePath();
        $path = UPLOAD_PATH . $defaultImagePath['imagePath'];
        $fileName = str_replace(' ', '', strtolower($ECode)) . '_' . time();
        $config['upload_path'] = $path;
        $config['allowed_types'] = 'gif|png|jpg|jpeg';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        //empImage is  => $_FILES['empImage']['name'];

        if (!$this->upload->do_upload("empImage")) {
            return array('e', 'Employee image upload failed ' . $this->upload->display_errors());
        } else {
            return array('s', $this->upload->data('file_name'));
        }

        exit;
        if ($defaultImagePath['isLocalPath'] == 1) {
            $path = UPLOAD_PATH . $defaultImagePath['imagePath'];
            $fileName = str_replace(' ', '', strtolower($ECode)) . '_' . time();
            $config['upload_path'] = $path;
            $config['allowed_types'] = 'gif|png|jpg|jpeg';
            $config['max_size'] = '200000';
            $config['file_name'] = $fileName;

            $this->load->library('upload', $config);
            $this->upload->initialize($config);

            //empImage is  => $_FILES['empImage']['name'];

            if (!$this->upload->do_upload("empImage")) {
                return array('e', 'Upload failed ' . $this->upload->display_errors());
            } else {
                return array('s', $this->upload->data('file_name'));
            }
        } else {
            return array('e', 'Default Image path not set');
        }

    }

    function imageUploadSignature($ECode)
    {
        $defaultImagePath = getCompanyImagePath();
        $path = UPLOAD_PATH . $defaultImagePath['imagePath'];
        $fileName = str_replace(' ', '', strtolower($ECode)) . '_' . time();
        $config['upload_path'] = $path;
        $config['allowed_types'] = 'gif|png|jpg|jpeg';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        //empImage is  => $_FILES['empImage']['name'];

        if (!$this->upload->do_upload("empSignatureImage")) {
            return array('e', 'Signature upload failed ' . $this->upload->display_errors());
        } else {
            return array('s', $this->upload->data('file_name'));
        }

        exit;
        if ($defaultImagePath['isLocalPath'] == 1) {
            $path = UPLOAD_PATH . $defaultImagePath['imagePath'];
            $fileName = str_replace(' ', '', strtolower($ECode)) . '_' . time();
            $config['upload_path'] = $path;
            $config['allowed_types'] = 'png|jpg|jpeg';
            $config['max_size'] = '200000';
            $config['file_name'] = $fileName;

            $this->load->library('upload', $config);
            $this->upload->initialize($config);

            //empImage is  => $_FILES['empImage']['name'];

            if (!$this->upload->do_upload("empImage")) {
                return array('e', 'Upload failed ' . $this->upload->display_errors());
            } else {
                return array('s', $this->upload->data('file_name'));
            }
        } else {
            return array('e', 'Default Image path not set');
        }

    }

    function insert_default_dashboard($empID, $companyID)
    {
        $getDashboard = $this->db->query("select * from srp_erp_systemuserdashboardmaster")->result_array();
        foreach ($getDashboard as $val) {
            $userDashboardWidgetID = $val['userDashboardID'];
            $dashborddata['employeeID'] = $empID;
            $dashborddata['dashboardDescription'] = $val['dashboardDescription'];
            $dashborddata['templateID'] = $val['templateID'];
            $dashborddata['companyID'] = $companyID;
            $dashborddata['isDefault'] = 1;
            $insertDashBoard = $this->db->insert('srp_erp_userdashboardmaster', $dashborddata);
            $userDashboardID = $this->db->insert_id();
            if ($insertDashBoard) {
                $this->db->query("INSERT INTO srp_erp_userdashboardwidget (userDashboardID,positionID,widgetID,sortOrder,employeeID,companyID  ) select $userDashboardID as userDashboardID, positionID,widgetID,sortOrder, $empID as empID, $companyID as comid from srp_erp_systemuserdashboardwidget where userDashboardID = $userDashboardWidgetID");
            }
        }
    }

    function update_employee()
    {
        //die($this->input->post('confirmDate'));
        $companyID = current_companyID();
        $updateID = $this->input->post('updateID');
        $emp_title = $this->input->post('emp_title');
        $shortName = $this->input->post('shortName');
        $fullName = $this->input->post('fullName');
        $emp_gender = $this->input->post('emp_gender');
        $emp_email = $this->input->post('emp_email');
        $ECode = $this->input->post('empCode');
        $EmpSecondaryCode = trim($this->input->post('EmpSecondaryCode') ?? '');
        $Nationality = trim($this->input->post('Nationality') ?? '');
        $MaritialStatus = trim($this->input->post('MaritialStatus') ?? '');
        $BloodGroup = trim($this->input->post('BloodGroup') ?? '');
        $Ename4 = trim($this->input->post('Ename4') ?? '');
        $initial = trim($this->input->post('initial') ?? '');
        $Enameother1 = trim($this->input->post('Enameother1') ?? '');
        $Ename3 = trim($this->input->post('Ename3') ?? '');
        $NIC = trim($this->input->post('NIC') ?? '');
        $empDob = trim($this->input->post('empDob') ?? '');
        $confirmDate = trim($this->input->post('confirmDate') ?? '');
        $religionID = trim($this->input->post('religion') ?? '');
        $isConfirmed = $this->input->post('isConfirmed');
        $medicalInfo = $this->input->post('medicalInfo');

        
        $hide_Name_with_Initials = getPolicyValues('HNWI', 'All');
        if($hide_Name_with_Initials != 1){
            $initial = trim($this->input->post('initial') ?? '');
            $Ename2 = $initial . ' ' . $Ename4;
        }else{
            $initial = null;
            $Ename2 = $Ename4;
        }
        
        $date_format_policy = date_format_policy();
        $empDob = (!empty($empDob)) ? input_format_date($empDob, $date_format_policy) : null;
        $confirmDate = (!empty($confirmDate)) ? input_format_date($confirmDate, $date_format_policy) : null;

        $isEmailExist = $this->isExistEmailID($emp_email);
        if (!empty($isEmailExist)) {
            if ($isEmailExist != $updateID) {
                return ['e', 'Email address already exists'];
            }
        }

        $secondary_code_status = $this->check_secondary_code_status($EmpSecondaryCode);
        if (!empty($secondary_code_status)) {
            if ($secondary_code_status != $updateID) {
                return ['e', 'This secondary code is already exists'];
            }
        }


        $data = array(
            'EmpTitleId' => $emp_title,
            'EmpShortCode' => $shortName,
            'Gender' => $emp_gender,
            'EEmail' => $emp_email,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
            'Nid' => $Nationality,
            'MaritialStatus' => $MaritialStatus,
            'BloodGroup' => (!empty($BloodGroup)) ? $BloodGroup : null,
            'EDOB' => $empDob,
            'Rid' => $religionID,
        );

        $isTibian = ($this->uri->segment(3) == 'tibian') ? 'Y' : 'N';

        if ($isTibian == 'Y') {
            $insuranceNo = trim($this->input->post('insuranceNo') ?? '');
            $firstName = trim($this->input->post('firstName') ?? '');
            $secondName = trim($this->input->post('secondName') ?? '');
            $thirdName = trim($this->input->post('thirdName') ?? '');
            $forthName = trim($this->input->post('forthName') ?? '');
            $familyName = trim($this->input->post('familyName') ?? '');
            $displayName = $firstName . ' ' . $familyName;
            $firstName_other = trim($this->input->post('firstName_other') ?? '');
            $secondName_other = trim($this->input->post('secondName_other') ?? '');
            $thirdName_other = trim($this->input->post('thirdName_other') ?? '');
            $forthName_other = trim($this->input->post('forthName_other') ?? '');
            $familyName_other = trim($this->input->post('familyName_other') ?? '');
            $displayName_other = $firstName_other . ' ' . $familyName_other;

            $data2 = [
                'Ename1' => $firstName, 'empSecondName' => $secondName, 'Ename3' => $thirdName, 'Ename4' => $forthName,
                'Ename2' => $displayName, 'EFamilyName' => $familyName,
                'Enameother1' => $firstName_other, 'empSecondNameOther' => $secondName_other, 'Enameother3' => $thirdName_other,
                'Enameother4' => $forthName_other, 'Enameother2' => $displayName_other, 'EFamilyNameOther' => $familyName_other,
                'insuranceNo' => $insuranceNo, 'medicalInfo' => $medicalInfo
            ];
            $data = array_merge($data, $data2);
        } else {
            $data2 = [
                'Ename1' => $fullName, 'Ename2' => $Ename2, 'Ename3' => $Ename3, 'Ename4' => $Ename4, 'initial' => $initial,
                'NIC' => $NIC,'Enameother1' => $Enameother1 
            ];
            $data = array_merge($data, $data2);
        }

        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        if ($isAutoGenerate == 0) {
            $isEmpConfirmed = $this->db->query("SELECT empConfirmedYN FROM srp_employeesdetails WHERE EIdNo='{$updateID}'")->row('empConfirmedYN');
            if ($isEmpConfirmed != 1) {
                $data['ECode'] = $EmpSecondaryCode;
                $data['EmpSecondaryCode'] = $EmpSecondaryCode;
            }
        } else {
            $data['ECode'] = $ECode;
            $data['EmpSecondaryCode'] = $EmpSecondaryCode;
        }


        $msg = 'Employee Details Updated Successfully.';
        if ($isConfirmed == 1) {
            $msg = 'Employee Details confirmed';
            $data['isActive'] = 1;
            $data['empConfirmedYN'] = 1;
            $data['empConfirmDate'] = $confirmDate;
        }


        if (isset($_FILES['empImage']['name']) && !empty($_FILES['empImage']['name'])) {
            //$imgData = $this->imageUpload($ECode);
            $imgData = $this->image_upload_s3($ECode);
        } else {
            $imgData = array('s', '');
            $existingImg = $this->db->query("SELECT EmpImage FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                             AND EIdNo={$updateID}")->row('EmpImage');
            if ($existingImg == 'images/users/male.png' || $existingImg == 'images/users/female.png') {
                $newSystemGeneratedImg = ($emp_gender == 1) ? 'images/users/male.png' : 'images/users/female.png';
                $imgData = array('s', $newSystemGeneratedImg);
            }


        }

        if (isset($_FILES['empSignatureImage']['name']) && !empty($_FILES['empSignatureImage']['name'])) {
            //$imgDataSignature = $this->imageUploadSignature($ECode . 'Signature');
            $imgDataSignature = $this->image_signature_s3("{$ECode}Signature");
        } else {
            $imgDataSignature = array('s', '');
        }


        if ($imgData[0] != 's' || $imgDataSignature[0] != 's') {
            return ($imgData[0] != 's') ? $imgData : $imgDataSignature;
        } else {

            if ($imgData[1] != '') {
                $data['EmpImage'] = $imgData[1];
            }

            if ($imgDataSignature[1] != '') {
                $data['empSignature'] = $imgDataSignature[1];
            }

            $this->db->trans_start();

            if ($isConfirmed == 1) {
                /*** Update leave group history in employee confirm ***/
                $leaveGroupID = $this->db->get_where('srp_employeesdetails', ['EidNo' => $updateID])->row('leaveGroupID');
                $changeHistory = array(
                    'empID' => $updateID,
                    'leaveGroupID' => $leaveGroupID,
                    'adjustmentDone' => 2,
                    'companyID' => $companyID,
                    'createdPCID' => current_pc(),
                    'createdUserID' => current_userID(),
                    'createdUserName' => current_employee(),
                    'createdDateTime' => current_date()
                );
                $this->db->insert('srp_erp_leavegroupchangehistory', $changeHistory);

                if (is_QHSE_integrated() == 'Y') {
                    if ($this->db->trans_status() == true) {
                        $this->load->model('Company_model');

                        $userName = $this->db->query("SELECT UserName,EEmail FROM srp_employeesdetails WHERE EidNo = {$updateID}")->row_array();

                        $QHSE_user = [
                            'name' => $data['Ename2'],'username'=> $userName['UserName'], 'email' => $userName['EEmail'], 'password' => 'Welcome@123',
                            'password_confirmation' => 'Welcome@123', 'activeYN' => 1
                        ];

                        $res_data = $this->Company_model->QHSE_api_requests($QHSE_user, $url = 'api/v1/user/create');

                        if ($res_data['status'] == 'e') {
                            $this->db->trans_rollback();
                            $msg = 'Error In Employee Details Updating.<br/>';
                            $msg .= 'QHSE - errors<br/>';
                            $msg .= $res_data['message'];
                            return ['e', $msg];
                        }

                        $date_time = current_date();

                        $user_integration = [
                            'empID' => $updateID, 'integratedUserID' => $res_data['data'], 'integratedSystem' => 'QHSE', 'companyID' => $companyID,
                            'createdUserID' => current_userID(), 'createdDateTime' => $date_time, 'createdPCID' => current_pc(), 'timestamp' => $date_time
                        ];

                        $this->db->insert('srp_erp_system_integration_user', $user_integration);
                    }
                }



            }

            $this->db->where(['EidNo' => $updateID, 'Erp_companyID' => $companyID])->update('srp_employeesdetails', $data);

            $db2 = $this->load->database('db2', TRUE);
            $db2->where('empID', $updateID)->where('companyID', $companyID)->update('user', ['email' => $emp_email]);

            //Create user in QHSE DB



            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {

                $this->db->trans_commit();
                if ($updateID == current_userID() && !empty($_FILES['empImage']['name'])) { //If current users profile image updated
                    $emp_data = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $updateID])->row_array();
                    $emp_image = $emp_data['EmpImage'];
                    if (!empty($emp_image)) {
                        $this->session->empImage = $this->s3->createPresignedRequest($emp_image, '+24 hour');
                    } else {
                        $emp_image = ($emp_data['Gender'] == 1) ? 'male' : 'female';
                        $this->session->empImage = $this->s3->createPresignedRequest("images/users/{$emp_image}.png", '+24 hour');
                    }
                }
                return array('s', $msg, $updateID);
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error In Employee Details Updating');
            }
        }
    }

    function image_upload_s3($ECode)
    {
        $fileName = str_replace(' ', '', strtolower($ECode)) . '_' . time();
        $file = $_FILES['empImage'];
        $ext = pathinfo($file['name'], PATHINFO_EXTENSION);

        if ($file['error'] == 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
        }

        $allowed_types = 'gif|png|jpg|jpeg';
        $allowed_types = explode('|', $allowed_types);
        if (!in_array($ext, $allowed_types)) {
            die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
        }

        $size = $file['size'];
        $size = number_format($size / 1048576, 2);

        if ($size > 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 1MB )"]));
        }

        $fileName = "images/users/$fileName.$ext";
        $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

        if (!$s3Upload) {
            return array('e', 'Employee image upload failed ');
        } else {
            return array('s', $fileName);
        }
    }

    function image_signature_s3($file_description)
    {
        $fileName = str_replace(' ', '', strtolower($file_description)) . '_' . time();
        $file = $_FILES['empSignatureImage'];
        $ext = pathinfo($file['name'], PATHINFO_EXTENSION);

        if ($file['error'] == 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
        }

        $allowed_types = 'gif|png|jpg|jpeg';
        $allowed_types = explode('|', $allowed_types);
        if (!in_array($ext, $allowed_types)) {
            die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
        }

        $size = $file['size'];
        $size = number_format($size / 1048576, 2);

        if ($size > 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 1MB )"]));
        }

        $fileName = "images/users/$fileName.$ext";
        $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

        if (!$s3Upload) {
            return array('e', 'Employee image upload failed ');
        } else {
            return array('s', $fileName);
        }
    }

    function isExistEmailID($emp_email)
    {
        $db2 = $this->load->database('db2', TRUE);
        $id = $db2->query("SELECT empID FROM user WHERE Username='{$emp_email}' OR `email`='{$emp_email}'")->row('empID');
        return $id;
    }

    function setAllDesignationsIsMajor_zero($updateID)
    {
        $upData = array(
            'isMajor' => 0,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );
        $this->db->where('EmpID', $updateID)->update('srp_employeedesignation', $upData);
    }
    
    function addHodFromDepartment()
    {

        $empID = trim($this->input->post('empID') ?? '');
        $DepartmentMasterID = trim($this->input->post('departmentMasterID') ?? '');

        $upData = array(
            'hod_id' => $empID,
        );

        $this->db->where('DepartmentMasterID', $DepartmentMasterID)->update('srp_departmentmaster', $upData);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', 'Employee Details Updated Successfully.');
        }
    }

    function employee_details($empID = null)
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $empID = ($empID == null) ? $this->input->post('empID') : $empID;
        $this->db->select('DATE_FORMAT(contractStartDate,\'' . $convertFormat . '\') AS contractStartDate, DATE_FORMAT(contractEndDate,\'' . $convertFormat . '\') AS contractEndDate,contractRefNo,
            EmployeeConType,ECode, EmpTitleId, EmpDesignationId, EmpShortCode, EmpImage,empSignature, Gender, EcMobile, EEmail,DATE_FORMAT(EDOB,\'' . $convertFormat . '\') AS EDOB ,EDOB AS original_EDOB,
            EDOJ AS EDOJ_ORG, DATE_FORMAT(EDOJ,\'' . $convertFormat . '\') AS EDOJ , payCurrency, PayCurrencyID, EcTel, EpTelephone, rid, empMachineID, floorID, EpAddress1, EpAddress2, EpAddress3,
            EpAddress4, EcAddress1, EcAddress2, EcAddress3, EcAddress4, ZipCode, EpFax, EcPC, EcFax, EcExtension, EpMobile, EPassportNO, 
            DATE_FORMAT(EPassportExpiryDate,\'' . $convertFormat . '\') AS EPassportExpiryDate, 
            DATE_FORMAT(EVisaExpiryDate,\'' . $convertFormat . '\') AS EVisaExpiryDate, AirportDestination, DATE_FORMAT(DateAssumed,\'' . $convertFormat . '\') AS DateAssumed,segmentID,EmpSecondaryCode,
            BloodGroup,MaritialStatus,Nid,Ename1,Ename2,Ename3,Ename4,empSecondName,EFamilyName,Ename1,Ename2,Ename3,Ename4,empSecondName,EFamilyName,Enameother1,Enameother2,Enameother3,Enameother4,
            empSecondNameOther,EFamilyNameOther,initial,Ename4,NIC,leaveGroupID,isCheckin,EcPOBox,overTimeGroup,isPayrollEmployee,
            IF(ISNULL(probationPeriod),0,TIMESTAMPDIFF(MONTH, DateAssumed, probationPeriod)) AS probationPeriodMonth,isDischarged, 
            DATE_FORMAT(dischargedDate,\'' . $convertFormat . '\') AS dischargedDate,dischargedComment, CurrencyCode, empConfirmedYN, insuranceNo,
            DATE_FORMAT(empConfirmDate,\'' . $convertFormat . '\') AS empConfirmDate, DATE_FORMAT(lastWorkingDate,\'' . $convertFormat . '\') AS lastWorkingDate, personalEmail, 
            DesDescription, empTB.EIdNo AS thisEmpID, isSystemAdmin, gradeID, medicalInfo, activityCodeID');
        $this->db->from('srp_employeesdetails empTB');
        $this->db->join('srp_designation designation', 'empTB.EmpDesignationId = designation.DesignationID', 'left');
        $this->db->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID', 'left');
        $this->db->join('srp_erp_activity_code_main', 'srp_erp_activity_code_main.id = empTB.activityCodeID', 'left');
        $this->db->where("empTB.EIdNo", $empID);
        $this->db->where("empTB.Erp_companyID", $companyID);
        $query = $this->db->get();
        $empData = $query->row();

        //Set DOB & age to required formats
        if (!empty($empData->original_EDOB)) {
            $dob = new DateTime($empData->original_EDOB);
            $now = new DateTime();
            $dif = $now->diff($dob);

            $age = $dif->y . 'y ' . ' - '. $dif->m . 'm'; //get age of employee like (27y 1m) format
            $formattedDOB = $dob->format('M d, Y'); //get EDOB like (Nov 01, 2023) format
        } else {
            $age = null;
            $formattedDOB = null;
        }
        $empData->age = $age;
        $empData->dob = $formattedDOB;

        $RptManager = $this->db->query("SELECT srp_employeesdetails.Ename1 AS retManager, srp_employeesdetails.EIdNo AS managerId,CONCAT(ECode,'_', Ename1) AS `Match`
                                        FROM srp_erp_employeemanagers
                                        INNER JOIN srp_employeesdetails ON srp_erp_employeemanagers.managerID = srp_employeesdetails.EIdNo
                                        WHERE empID='{$empID}' AND active=1 AND companyID='{$companyID}'")->row_array();

        if (is_null($RptManager)) {
            $RptManager = array('managerId' => null);
        }

        $merge = array_merge((array)$empData, $RptManager);
        return $merge;
    }

    function contactDetails_update()
    {
        $updateID = $this->input->post('updateID');
        $personalEmail = $this->input->post('personalEmail');
        $ep_address1 = $this->input->post('ep_address1');
        $ep_address2 = $this->input->post('ep_address2');
        $ep_address3 = $this->input->post('ep_address3');
        $ep_address4 = $this->input->post('ep_address4');
        $zip_code = $this->input->post('zip_code');
        $ep_fax = $this->input->post('ep_fax');


        $ec_address1 = $this->input->post('ec_address1');
        $ec_address2 = $this->input->post('ec_address2');
        $ec_address3 = $this->input->post('ec_address3');
        $ec_address4 = $this->input->post('ec_address4');
        $ec_po_box = $this->input->post('ec_po_box');
        $ec_pc = $this->input->post('ec_pc');
        $ec_fax = $this->input->post('ec_fax');

        $telNo1 = $this->input->post('telNo1');
        $telNo2 = $this->input->post('telNo2');
        $emp_mobile = $this->input->post('emp_mobile');
        $company_mobile = $this->input->post('company_mobile');

        $data = array(
            'EpAddress1' => $ep_address1, 'EpAddress2' => $ep_address2, 'EpAddress3' => $ep_address3, 'EpAddress4' => $ep_address4,
            'ZipCode' => $zip_code, 'EpFax' => $ep_fax, 'personalEmail' => $personalEmail,

            'EcAddress1' => $ec_address1, 'EcAddress2' => $ec_address2, 'EcAddress3' => $ec_address3, 'EcAddress4' => $ec_address4,
            'EcPOBox' => $ec_po_box, 'EcPC' => $ec_pc, 'EcFax' => $ec_fax,

            'EpTelephone' => $telNo1, 'EcTel' => $telNo2, 'EpMobile' => $emp_mobile, 'EcMobile' => $company_mobile, 

            'ModifiedPC' => current_pc(), 'ModifiedUserName' => current_employee(),
        );

        if ($this->uri->segment(3) == 'tibian') {
            $data['EcExtension'] = $this->input->post('extension');
            $data['EpMobile'] = $this->input->post('emp_personal_mobile');
        }

        $this->db->trans_start();
        $this->db->where('EidNo', $updateID)->update('srp_employeesdetails', $data);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Error In Employee Contact Details Updating');
        } else {
            $this->db->trans_commit();
            return array('s', 'Employee Contact Details Updated Successfully.');
        }

    }

    function visaDetails_update()
    {
        $updateID = $this->input->post('updateID');
        $pass_portNo = $this->input->post('pass_portNo');
        $passPort_expiryDate = $this->input->post('passPort_expiryDate');
        $visa_expiryDate = $this->input->post('visa_expiryDate');
        $airport_destination = $this->input->post('airport_destination');
        $manPowerNo = $this->input->post('manPowerNo');

        $contractStartDate = $this->input->post('contractStartDate');
        $contractEndDate = $this->input->post('contractEndDate');
        $contractRefNo = $this->input->post('contractRefNo');


        $date_format_policy = date_format_policy();
        $contractStartDate = (!empty($contractStartDate)) ? input_format_date($contractStartDate, $date_format_policy) : null;
        $contractEndDate = (!empty($contractEndDate)) ? input_format_date($contractEndDate, $date_format_policy) : null;
        $passPort_expiryDate = (!empty($passPort_expiryDate)) ? input_format_date($passPort_expiryDate, $date_format_policy) : null;
        $visa_expiryDate = (!empty($visa_expiryDate)) ? input_format_date($visa_expiryDate, $date_format_policy) : null;


        $data = array(
            'EPassportNO' => $pass_portNo,
            'EPassportExpiryDate' => $passPort_expiryDate,
            'EVisaExpiryDate' => $visa_expiryDate,
            'AirportDestination' => $airport_destination,
            'manPowerNo' => $manPowerNo,
            'contractStartDate' => $contractStartDate,
            'contractEndDate' => $contractEndDate,
            'contractRefNo' => $contractRefNo,


            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->trans_start();
        $this->db->where('EidNo', $updateID)->update('srp_employeesdetails', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() > 0) {
            $this->db->trans_commit();
            return array('s', 'Employee Contract Details Updated Successfully.');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Employee Contract Details Updating');
        }
    }

    function update_contact_details()
    {

        $empID = $this->input->post('updateID');
        $companyID = current_companyID();
        $data = $this->db->query("SELECT contType.Description, period , EmployeeConType, typeID, contType.Erp_companyID, contData.contractEndDate,
                                  (SELECT COUNT(contractID) FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID})
                                  AS contactCount
                                  FROM srp_employeesdetails AS empTB
                                  JOIN srp_empcontracttypes AS contType ON contType.EmpContractTypeID = empTB.EmployeeConType
                                  JOIN srp_erp_systememployeetype AS sysType ON sysType.employeeTypeID = contType.typeID
                                  LEFT JOIN(
                                        SELECT empID AS contEmpID, contractEndDate
                                        FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID} AND isCurrent=1
                                  ) AS contData ON contData.contEmpID=EIdNo
                                  AND contType.Erp_companyID={$companyID} WHERE empTB.Erp_companyID={$companyID} AND EIdNo={$empID}
                                  ")->row_array();

        if ($data['typeID'] != 2) {
            return ['e', 'Employment type is not a contract type'];
            die();
        }

        $contractID = $this->input->post('contractID');
        $isRenew = $this->input->post('isRenew');
        $contractStartDate = $this->input->post('contractStartDate');
        $contractEndDate = $this->input->post('contractEndDate');
        $contractRefNo = $this->input->post('contractRefNo');


        $date_format_policy = date_format_policy();
        $contractStartDate = (!empty($contractStartDate)) ? input_format_date($contractStartDate, $date_format_policy) : null;
        $contractEndDate = (!empty($contractEndDate)) ? input_format_date($contractEndDate, $date_format_policy) : null;

        $isTibian = ($this->uri->segment(3) == 'tibian') ? 'Y' : 'N';

        $lastContractDate = $data['contractEndDate'];
        $period = $data['period'];
        $endDate = date('Y-m-d', strtotime($contractStartDate . ' +' . $period . ' month'));

        if ($isTibian != 'Y') {
            if ($contractStartDate > $contractEndDate) {
                return ['e', 'Contract end date should be greater than start date.'];
            }

            if ($contractEndDate > $endDate) {
                return ['e', 'Contract end date should be lesser than ' . $endDate];
            }
        } else {
            if ($contractEndDate != null) {
                if ($contractStartDate > $contractEndDate) {
                    return ['e', 'Contract end date should be greater than start date.'];
                }

                if ($contractEndDate > $endDate) {
                    return ['e', 'Contract end date should be lesser than ' . $endDate];
                }
            }
        }


        $isPeriodExist = $this->db->query("SELECT contractID FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID}
                                           AND (
                                              ('$contractStartDate' BETWEEN contractStartDate AND contractEndDate )
                                              OR ('$contractEndDate' BETWEEN contractStartDate AND contractEndDate )
                                              OR ( (contractStartDate > '$contractStartDate') AND (contractEndDate < '$contractEndDate') )
                                           )")->row('contractID');

        //echo '<pre>'; print_r($isPeriodExist); echo '</pre>';die();
        $this->db->trans_start();

        $this->db->where(['empID' => $empID, 'companyID' => $companyID])->update('srp_erp_empcontracthistory', ['isCurrent' => 0]);

        $isRenew = ($data['contactCount'] == 0) ? 1 : $isRenew;

        if ($isRenew == 1) {

            if (!empty($isPeriodExist)) {
                return ['e', 'Contract period is falling with already existing contact dates'];
            }

            $data = array(
                'empID' => $empID,
                'contactTypeID' => $data['EmployeeConType'],
                'contractStartDate' => $contractStartDate,
                'contractEndDate' => $contractEndDate,
                'contractRefNo' => $contractRefNo,
                'companyID' => $companyID,
                'CreatedUserName' => current_employee(),
                'CreatedPC' => current_pc(),
                'CreatedDate' => current_date()
            );

            $this->db->insert('srp_erp_empcontracthistory', $data);
            $contractID = $this->db->insert_id();
        } else {

            if (!empty($isPeriodExist) && $contractID != $isPeriodExist) {
                return ['e', 'Contract period is falling with already existing contact dates'];
            }

            $data = array(
                'isCurrent' => 1,
                'contractStartDate' => $contractStartDate,
                'contractEndDate' => $contractEndDate,
                'contractRefNo' => $contractRefNo,
                'ModifiedUserName' => current_employee(),
                'ModifiedPC' => current_pc()
            );

            $this->db->where(['empID' => $empID, 'companyID' => $companyID, 'contractID' => $contractID])
                ->update('srp_erp_empcontracthistory', $data);

        }

        $this->db->trans_complete();
        if ($this->db->trans_status() > 0) {
            $this->db->trans_commit();
            return array('s', 'Employee Contract Details Updated Successfully.', $contractID);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Employee Contract Details Updating');
        }
    }

    function employee_rejoin()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('rejoinEmpID');

        $reJoinedEmp = $this->db->query("SELECT CONCAT(Ename2, ' - ', EmpSecondaryCode) AS reJoinedEmp  FROM srp_employeesdetails
                                          WHERE Erp_companyID={$companyID} AND previousEmpID={$empID}")->row('reJoinedEmp');

        if (!empty($reJoinedEmp)) {
            return ['e', 'This Employee is already rejoined with following Name.<br/>' . $reJoinedEmp];
        }


        $rejoinDate = $this->input->post('rejoinDate');
        $contactDetails = $this->input->post('contactDetails');
        $familyDetails = $this->input->post('familyDetails');
        $documentDetails = $this->input->post('documentDetails');
        $bankDetails = $this->input->post('bankDetails');
        $qualificationDetails = $this->input->post('qualificationDetails');
        $ssoDetails = $this->input->post('ssoDetails');


        $date_format_policy = date_format_policy();
        $rejoinDate = input_format_date($rejoinDate, $date_format_policy);

        $this->db->select('*');
        $this->db->from('srp_employeesdetails');
        $this->db->where(['Erp_companyID' => $companyID, 'EIdNo' => $empID]);
        $empData = $this->db->get()->row_array();

        $tibianType = (empty($empData['tibianType'])) ? null : $empData['tibianType'];
        $serialNo = null;
        $empSecondaryCode = $empData['EmpSecondaryCode'];
        if (!empty($tibianType)) {
            $code_data = empCodeGenerate($tibianType);
            $eCode = $empSecondaryCode = $code_data['code'];
            $serialNo = $code_data['serialNo'];
        } else {
            $eCode = empCodeGenerate();
        }

        $data = [
            'ECode' => $eCode,
            'EmpSecondaryCode' => $empSecondaryCode,
            'EmpTitleId' => $empData['EmpTitleId'],
            'Ename1' => $empData['Ename1'],
            'EmpShortCode' => $empData['EmpShortCode'],
            'Gender' => $empData['Gender'],
            'EEmail' => $empData['EEmail'],
            'EDOB' => $empData['EDOB'],
            'Rid' => $empData['Rid'],
            'EmpImage' => $empData['EmpImage'],
            'empSignature' => $empData['empSignature'],
            'SchMasterId' => $empData['SchMasterId'],
            'branchID' => $empData['branchID'],
            'Erp_companyID' => $empData['Erp_companyID'],
            'CreatedPC' => current_pc(),
            'CreatedUserName' => current_employee(),
            'CreatedDate' => current_date(),
            'Nid' => $empData['Nid'],
            'MaritialStatus' => $empData['MaritialStatus'],
            'BloodGroup' => $empData['BloodGroup'],
            'UserName' => $empData['UserName'],
            'Password' => md5('Welcome@123'),
            'Ename2' => $empData['Ename2'],
            'Ename3' => $empData['Ename3'],
            'initial' => $empData['initial'],
            'Ename4' => $empData['Ename4'],
            'NIC' => $empData['NIC'],
            'rejoinDate' => $rejoinDate,
            'previousEmpID' => $empID,
            'tibianType' => $tibianType,
            'serialNo' => $serialNo
        ];


        if (!empty($contactDetails)) {
            $data['EpAddress1'] = $empData['EpAddress1'];
            $data['EpAddress2'] = $empData['EpAddress2'];
            $data['EpAddress3'] = $empData['EpAddress3'];
            $data['EpAddress4'] = $empData['EpAddress4'];
            $data['ZipCode'] = $empData['ZipCode'];
            $data['EpFax'] = $empData['EpFax'];


            $data['EcAddress1'] = $empData['EcAddress1'];
            $data['EcAddress2'] = $empData['EcAddress2'];
            $data['EcAddress3'] = $empData['EcAddress3'];
            $data['EcAddress4'] = $empData['EcAddress4'];
            $data['EcPOBox'] = $empData['EcPOBox'];
            $data['EcPC'] = $empData['EcPC'];
            $data['EcFax'] = $empData['EcFax'];
        }


        $this->db->trans_start();

        $this->db->where(['Erp_companyID' => $companyID, 'EIdNo' => $empID])
            ->update('srp_employeesdetails', ['UserName' => $empID . '_' . $empData['UserName'], 'EEmail' => $empID . '' . $empData['EEmail']]);

        $this->db->insert('srp_employeesdetails', $data);
        $empIDNew = $this->db->insert_id();

        if (!empty($familyDetails)) {
            $this->db->select('*');
            $this->db->from('srp_erp_family_details');
            $this->db->where(['empID' => $empID]);
            $oldFamilyData = $this->db->get()->result_array();

            if (!empty($oldFamilyData)) {
                $newFamilyData = [];
                foreach ($oldFamilyData as $key => $familyRow) {
                    $newFamilyData[$key]['empID'] = $empIDNew;
                    $newFamilyData[$key]['name'] = $familyRow['name'];
                    $newFamilyData[$key]['firstName'] = $familyRow['firstName'];
                    $newFamilyData[$key]['surName'] = $familyRow['surName'];
                    $newFamilyData[$key]['nameOfFather'] = $familyRow['nameOfFather'];
                    $newFamilyData[$key]['relationship'] = $familyRow['relationship'];
                    $newFamilyData[$key]['nationality'] = $familyRow['nationality'];
                    $newFamilyData[$key]['DOB'] = $familyRow['DOB'];
                    $newFamilyData[$key]['idNO'] = $familyRow['idNO'];
                    $newFamilyData[$key]['nationalCode'] = $familyRow['nationalCode'];
                    $newFamilyData[$key]['insuranceCategory'] = $familyRow['insuranceCategory'];
                    $newFamilyData[$key]['gender'] = $familyRow['gender'];
                    $newFamilyData[$key]['insuranceCode'] = $familyRow['insuranceCode'];
                    $newFamilyData[$key]['coverFrom'] = $familyRow['coverFrom'];
                    $newFamilyData[$key]['passportNo'] = $familyRow['passportNo'];
                    $newFamilyData[$key]['passportExpiredate'] = $familyRow['passportExpiredate'];
                    $newFamilyData[$key]['VisaNo'] = $familyRow['VisaNo'];
                    $newFamilyData[$key]['VisaexpireDate'] = $familyRow['VisaexpireDate'];
                    $newFamilyData[$key]['image'] = $familyRow['image'];
                    $newFamilyData[$key]['createdUserGroup'] = current_user_group();
                    $newFamilyData[$key]['createdPCid'] = current_pc();
                    $newFamilyData[$key]['createdUserID'] = current_userID();
                }

                $this->db->insert_batch('srp_erp_family_details', $newFamilyData);
            }
        }

        if (!empty($documentDetails)) {
            $this->db->select('DocDesSetID, DocDesID, PersonType, FileName, UploadedDate, AcademicYearID, isSubmitted');
            $this->db->from('srp_documentdescriptionforms');
            $this->db->where(['PersonID' => $empID, 'Erp_companyID' => $companyID, 'PersonType' => 'E']);
            $oldDocumentData = $this->db->get()->result_array();

            if (!empty($oldDocumentData)) {
                $newDocumentData = [];
                foreach ($oldDocumentData as $key => $documentRow) {
                    $newDocumentData[$key]['PersonID'] = $empIDNew;
                    $newDocumentData[$key]['DocDesSetID'] = $documentRow['DocDesSetID'];
                    $newDocumentData[$key]['DocDesID'] = $documentRow['DocDesID'];
                    $newDocumentData[$key]['PersonType'] = 'E';
                    $newDocumentData[$key]['FileName'] = $documentRow['FileName'];
                    $newDocumentData[$key]['UploadedDate'] = $documentRow['UploadedDate'];
                    $newDocumentData[$key]['SchMasterID'] = current_schMasterID();
                    $newDocumentData[$key]['BranchID'] = current_schBranchID();
                    $newDocumentData[$key]['AcademicYearID'] = $documentRow['AcademicYearID'];
                    $newDocumentData[$key]['isSubmitted'] = $documentRow['isSubmitted'];
                    $newDocumentData[$key]['CreatedUserName'] = current_employee();
                    $newDocumentData[$key]['CreatedDate'] = current_date();
                }

                $this->db->insert_batch('srp_documentdescriptionforms', $newDocumentData);
            }
        }

        if (!empty($bankDetails)) {
            $this->db->select('bankID, branchID, accountNo, accountHolderName, toBankPercentage');
            $this->db->from('srp_erp_pay_salaryaccounts');
            $this->db->where(['employeeNo' => $empID, 'companyID' => $companyID, 'isActive' => 1]);
            $oldBankData = $this->db->get()->result_array();

            if (!empty($oldBankData)) {
                $newBankData = [];
                foreach ($oldBankData as $key => $bankRow) {
                    $newBankData[$key]['employeeNo'] = $empIDNew;
                    $newBankData[$key]['bankID'] = $bankRow['bankID'];
                    $newBankData[$key]['branchID'] = $bankRow['branchID'];
                    $newBankData[$key]['accountNo'] = $bankRow['accountNo'];
                    $newBankData[$key]['accountHolderName'] = $bankRow['accountHolderName'];
                    $newBankData[$key]['toBankPercentage'] = $bankRow['toBankPercentage'];
                    $newBankData[$key]['companyID'] = current_companyID();
                    $newBankData[$key]['companyCode'] = current_companyCode();
                    $newBankData[$key]['createdUserGroup'] = current_user_group();
                    $newBankData[$key]['createdUserName'] = current_employee();
                    $newBankData[$key]['createdPCID'] = current_pc();
                    $newBankData[$key]['createdUserID'] = current_userID();
                    $newBankData[$key]['createdDateTime'] = current_date();
                }

                $this->db->insert_batch('srp_erp_pay_salaryaccounts', $newBankData);
            }

            $this->db->select('bankID, branchID, accountNo, accountHolderName, toBankPercentage');
            $this->db->from('srp_erp_non_pay_salaryaccounts');
            $this->db->where(['employeeNo' => $empID, 'companyID' => $companyID, 'isActive' => 1]);
            $oldBankData = $this->db->get()->result_array();

            if (!empty($oldBankData)) {
                $newBankData = [];
                foreach ($oldBankData as $key => $bankRow) {
                    $newBankData[$key]['employeeNo'] = $empIDNew;
                    $newBankData[$key]['bankID'] = $bankRow['bankID'];
                    $newBankData[$key]['branchID'] = $bankRow['branchID'];
                    $newBankData[$key]['accountNo'] = $bankRow['accountNo'];
                    $newBankData[$key]['accountHolderName'] = $bankRow['accountHolderName'];
                    $newBankData[$key]['toBankPercentage'] = $bankRow['toBankPercentage'];
                    $newBankData[$key]['companyID'] = current_companyID();
                    $newBankData[$key]['companyCode'] = current_companyCode();
                    $newBankData[$key]['createdUserGroup'] = current_user_group();
                    $newBankData[$key]['createdUserName'] = current_employee();
                    $newBankData[$key]['createdPCID'] = current_pc();
                    $newBankData[$key]['createdUserID'] = current_userID();
                    $newBankData[$key]['createdDateTime'] = current_date();
                }

                $this->db->insert_batch('srp_erp_non_pay_salaryaccounts', $newBankData);
            }
        }

        if (!empty($qualificationDetails)) {
            $this->db->select('Description, Institution, GPA, AwardedDate');
            $this->db->from('srp_empcertification');
            $this->db->where(['EmpID' => $empID]);
            $oldQualificationData = $this->db->get()->result_array();

            if (!empty($oldQualificationData)) {
                $newQualificationData = [];
                foreach ($oldQualificationData as $key => $qualificationRow) {
                    $newQualificationData[$key]['EmpID'] = $empIDNew;
                    $newQualificationData[$key]['Description'] = $qualificationRow['Description'];
                    $newQualificationData[$key]['Institution'] = $qualificationRow['Institution'];
                    $newQualificationData[$key]['GPA'] = $qualificationRow['GPA'];
                    $newQualificationData[$key]['AwardedDate'] = $qualificationRow['AwardedDate'];
                    $newQualificationData[$key]['CreatedUserName'] = current_employee();
                    $newQualificationData[$key]['CreatedPC'] = current_pc();
                    $newQualificationData[$key]['CreatedDate'] = current_date();
                }

                $this->db->insert_batch('srp_empcertification', $newQualificationData);
            }
        }

        if (!empty($ssoDetails)) {
            $this->db->select('socialInsuranceMasterID, payeeID, socialInsuranceNumber');
            $this->db->from('srp_erp_socialinsurancedetails');
            $this->db->where(['empID' => $empID, 'companyID' => $companyID]);
            $oldSSOData = $this->db->get()->result_array();

            if (!empty($oldSSOData)) {
                $newSSOData = [];
                foreach ($oldSSOData as $key => $SSORow) {
                    $newSSOData[$key]['empID'] = $empIDNew;
                    $newSSOData[$key]['socialInsuranceMasterID'] = $SSORow['socialInsuranceMasterID'];
                    $newSSOData[$key]['payeeID'] = $SSORow['payeeID'];
                    $newSSOData[$key]['socialInsuranceNumber'] = $SSORow['socialInsuranceNumber'];
                    $newSSOData[$key]['companyID'] = current_companyID();
                    $newSSOData[$key]['companyCode'] = current_companycode();
                    $newSSOData[$key]['createdUserGroup'] = current_user_group();
                    $newSSOData[$key]['createdUserName'] = current_employee();
                    $newSSOData[$key]['createdPCID'] = current_pc();
                    $newSSOData[$key]['createdUserID'] = current_userID();
                    $newSSOData[$key]['createdDateTime'] = current_date();
                }

                $this->db->insert_batch('srp_erp_socialinsurancedetails', $newSSOData);
            }
        }

        $data_central = array(
            'empID' => $empIDNew,
            'Password' => md5('Welcome@123')
        );
        $db2 = $this->load->database('db2', TRUE);
        $db2->where(['companyID' => $companyID, 'empID' => $empID])->update('user', $data_central);

        $this->insert_default_dashboard($empIDNew, $companyID);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Employee rejoining successfully processed.', $empIDNew);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in employee rejoining process');
        }
    }

    /*Start of Employee Employment */
    function save_employmentData()
    {
        $empID = $this->input->get('empID');
        $empDoj = $this->input->post('empDoj');
        $dateAssumed = $this->input->post('dateAssumed');
        $employeeConType = $this->input->post('employeeConType');
        $payCurrencyID = $this->input->post('empCurrency');
        $empSegment = $this->input->post('empSegment');
        $isPayrollEmployee = $this->input->post('isPayrollEmployee');
        $probationPeriod = $this->input->post('probationPeriod');
        $manPowerNo = $this->input->post('manPowerNo');
        $gradeID = $this->input->post('gradeID');
        $pos_barCode = $this->input->post('pos_barCode');
        $gratuityID = $this->input->post('gratuityID');
        $mobileCreditLimit = $this->input->post('mobileCreditLimit');


        $companyID = current_companyID();
        $date_format_policy = date_format_policy();

        $empDoj = (!empty($empDoj)) ? input_format_date($empDoj, $date_format_policy) : null;
        $dateAssumed = (!empty($dateAssumed)) ? input_format_date($dateAssumed, $date_format_policy) : null;


        if (!empty($dateAssumed)) {
            $dateAssumed = input_format_date($dateAssumed, $date_format_policy);

            if (!empty($probationPeriod)) {
                $probationPeriod = date('Y-m-d', strtotime($dateAssumed . '+' . $probationPeriod . ' month'));
            }
        } else {
            $dateAssumed = null;
        }

        if (!empty($dateAssumed) && !empty($empDoj)) {
            if ($empDoj > $dateAssumed) {
                return ['e', 'Date of assumed cannot be greater than the date of join'];
            }
        }

        $minSalaryDeclaredDate = $this->db->query("SELECT MIN(effectiveDate) AS effDate FROM srp_erp_salarydeclarationdetails
                                                   WHERE companyID={$companyID} AND employeeNo={$empID}")->row('effDate');

        if (!empty($minSalaryDeclaredDate)) {
            $salaryDeclared = date('Y-m-d', strtotime($minSalaryDeclaredDate));
            if ($salaryDeclared < $empDoj) {
                $salaryDeclared = convert_date_format($salaryDeclared);
                return ['e', 'Date of join cannot be exceeded than the salary effective date [ ' . $salaryDeclared . ' ]'];
            }

            if ($salaryDeclared < $dateAssumed) {
                $salaryDeclared = convert_date_format($salaryDeclared);
                return ['e', 'Date of assumed cannot be exceeded than the salary effective date [ ' . $salaryDeclared . ' ]'];

            }
        }


        $currencyCode = $this->db->query("SELECT CurrencyCode FROM srp_erp_currencymaster WHERE currencyID= '{$payCurrencyID}'")->row('CurrencyCode');
        $dateTime = current_date();
        $data = array(
            'payCurrencyID' => $payCurrencyID, 'payCurrency' => $currencyCode, 'segmentID' => $empSegment, 'probationPeriod' => $probationPeriod,
            'isPayrollEmployee' => $isPayrollEmployee, 'EmployeeConType' => $employeeConType, 'manPowerNo' => $manPowerNo, 'gradeID' => $gradeID,
            'pos_barCode' => $pos_barCode, 'EDOJ' => $empDoj, 'DateAssumed' => $dateAssumed, 'gratuityID' => $gratuityID, 'mobileCreditLimit' => $mobileCreditLimit,
            'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime
        );


        $where = array('EIdNo' => $empID, 'Erp_companyID' => $companyID);

        $this->db->trans_start();

        $this->db->where($where)->update('srp_employeesdetails', $data);


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Employment details updated successfully.');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in employment details update process.');
        }


    }

    function save_employmentData_envoy()
    {
        $empID = $this->input->get('empID');
        $empDoj = $this->input->post('empDoj');
        $dateAssumed = $this->input->post('dateAssumed');
        $employeeConType = $this->input->post('employeeConType');
        $payCurrencyID = $this->input->post('empCurrency');
        $empSegment = $this->input->post('empSegment');
        $isPayrollEmployee = $this->input->post('isPayrollEmployee');
        $probationPeriod = $this->input->post('probationPeriod');
        $manPowerNo = $this->input->post('manPowerNo');
        $gradeID = $this->input->post('gradeID');
        $pos_barCode = $this->input->post('pos_barCode');
        $gratuityID = $this->input->post('gratuityID');
        $payee_emp_type = $this->input->post('payee_emp_type');
        $visaPartyType = $this->input->post('visaPartyType');
        $visaPartyID = $this->input->post('visaPartyID');
        $customerID = $this->input->post('customerID');
        $emp_Burden_Rate = $this->input->post('emp_Burden_Rate');
        $airTicketEligible = $this->input->post('airTicketEligible');
        $emp_Client_commision = $this->input->post('emp_Client_commision');
        $visaNumber=$this->input->post('visaNumber');
        $transportationProvided=$this->input->post('transportationProvided');
        $empPersonamNumber = $this->input->post('empPersonamNumber');
        $fam_status = $this->input->post('fam_status');
        
        $dateTime = current_date();

        $pass_portNo = $this->input->post('pass_portNo');
        $passPort_expiryDate = $this->input->post('passPort_expiryDate');
        $visa_expiryDate = $this->input->post('visa_expiryDate');
        $airport_destinationID = $this->input->post('airport_destination');
        $mobileCreditLimit = $this->input->post('mobileCreditLimit');

        $airport_destination = $this->db->query("SELECT City FROM srp_erp_airportdestinationmaster WHERE destinationID = ?", array($airport_destinationID))->row();
        $airport_destination = $airport_destination ? $airport_destination->City : null;

        $companyID = current_companyID();

        $visaProfession = $this->input->post('visaProfession');
        $labourCode = $this->input->post('labourCode');

        $date_format_policy = date_format_policy();

        $empDoj = (!empty($empDoj)) ? input_format_date($empDoj, $date_format_policy) : null;
        $dateAssumed = (!empty($dateAssumed)) ? input_format_date($dateAssumed, $date_format_policy) : null;
        $probationPeriod = (!empty($probationPeriod)) ? input_format_date($probationPeriod, $date_format_policy) : null;
        $passPort_expiryDate = (!empty($passPort_expiryDate)) ? input_format_date($passPort_expiryDate, $date_format_policy) : null;
        $visa_expiryDate = (!empty($visa_expiryDate)) ? input_format_date($visa_expiryDate, $date_format_policy) : null;

        if (!empty($dateAssumed)) {
            $dateAssumed = input_format_date($dateAssumed, $date_format_policy);
        } else {
            $dateAssumed = null;
        }
        if(!empty($pos_barCode)){
            $isBarcodeExist = $this->db->query("SELECT EIdNo FROM srp_employeesdetails  WHERE pos_barCode ='{$pos_barCode}' AND EIdNo NOT IN ($empID)")->row('EIdNo');
            if (!empty($isBarcodeExist)) {
                return ['e', 'Barcode already exists'];
            }
        }
        
        $minSalaryDeclaredDate = $this->db->query("SELECT MIN(effectiveDate) AS effDate FROM srp_erp_salarydeclarationdetails
                                                   WHERE companyID={$companyID} AND employeeNo={$empID}")->row('effDate');

        if (!empty($minSalaryDeclaredDate)) {
            $salaryDeclared = date('Y-m-d', strtotime($minSalaryDeclaredDate));
            if ($salaryDeclared < $empDoj) {
                $salaryDeclared = convert_date_format($salaryDeclared);
                return ['e', 'Date of join cannot be exceeded than the salary effective date [ ' . $salaryDeclared . ' ]'];
            }

            if ($salaryDeclared < $dateAssumed) {
                $salaryDeclared = convert_date_format($salaryDeclared);
                return ['e', 'Date of assumed cannot be exceeded than the salary effective date [ ' . $salaryDeclared . ' ]'];
            }
        }


        $currencyCode = $this->db->query("SELECT CurrencyCode FROM srp_erp_currencymaster WHERE currencyID= '{$payCurrencyID}'")->row('CurrencyCode');

        $data = array(
            'manPowerNo' => $manPowerNo, 'gradeID' => $gradeID, 'pos_barCode' => $pos_barCode, 'payCurrencyID' => $payCurrencyID,
            'payCurrency' => $currencyCode, 'segmentID' => $empSegment, 'probationPeriod' => $probationPeriod, 'isPayrollEmployee' => $isPayrollEmployee,
            'EmployeeConType' => $employeeConType, 'EPassportNO' => $pass_portNo, 'AirportDestination' => $airport_destination , 'AirportDestinationID' => $airport_destinationID, 'EPassportExpiryDate' => $passPort_expiryDate,
            'EVisaExpiryDate' => $visa_expiryDate, 'EDOJ' => $empDoj, 'DateAssumed' => $dateAssumed, 'gratuityID' => $gratuityID, 'payee_emp_type' => $payee_emp_type,'ClientID' => $customerID,'burdenRate' => $emp_Burden_Rate,'clientCommisionPerentage' => $emp_Client_commision,
            'mobileCreditLimit' => $mobileCreditLimit, 'visaPartyType' => $visaPartyType, 'visaPartyID' => $visaPartyID,'airTicketEligible'=>$airTicketEligible, 'familyStatusID'=>$fam_status,'visaProfession' => $visaProfession, 'labourCode' => $labourCode, 'visaNumber' => $visaNumber,'transportationProvided' => $transportationProvided, 'employeePersonalNumber' => $empPersonamNumber,'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime
        );

        $where = array('EIdNo' => $empID, 'Erp_companyID' => $companyID);

        $this->db->trans_start();

        $this->db->where($where)->update('srp_employeesdetails', $data);

        /*Update visa, passport expiry date */
        $visa_docID = $this->db->query("SELECT DocDesFormID  FROM srp_documentdescriptionmaster docMas
                                JOIN srp_documentdescriptionforms upTb ON upTb.DocDesID = docMas.DocDesID
                                AND PersonType = 'E' AND PersonID = {$empID} AND isActive = 1 AND upTb.isDeleted = 0
                                WHERE systemTypeID = 3 AND docMas.isDeleted = 0")->row('DocDesFormID');
        if (!empty($visa_docID)) {
            $updateData = [
                'expireDate' => $visa_expiryDate, 'ModifiedDateTime' => $dateTime, 'Timestamp' => $dateTime,
                'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(), 'ModifiedUserName' => current_employee()
            ];
            $this->db->where(['DocDesFormID' => $visa_docID])->update('srp_documentdescriptionforms', $updateData);
        }

        $passport_docID = $this->db->query("SELECT DocDesFormID  FROM srp_documentdescriptionmaster docMas
                                JOIN srp_documentdescriptionforms upTb ON upTb.DocDesID = docMas.DocDesID
                                AND PersonType = 'E' AND PersonID = {$empID} AND isActive = 1 AND upTb.isDeleted = 0
                                WHERE systemTypeID = 4 AND docMas.isDeleted = 0")->row('DocDesFormID');
        if (!empty($passport_docID)) {
            $updateData = [
                'expireDate' => $passPort_expiryDate, 'ModifiedDateTime' => $dateTime, 'Timestamp' => $dateTime,
                'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(), 'ModifiedUserName' => current_employee()
            ];
            $this->db->where(['DocDesFormID' => $passport_docID])->update('srp_documentdescriptionforms', $updateData);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            $data = employee_details($empID);
            return ['s', 'Employment details updated successfully.', 'record' => $data];
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in employment details update process.');
        }


    }

    function change_employee_activityCodeType(){
        $empID = $this->input->post('empID');
        $activity_code = $this->input->post('activityCodeID');
        $companyID = current_companyID();

        if (!empty($activity_code)) {
            $data['activityCodeID'] = $activity_code;

            $this->db->trans_start();
            
            /**update activityCodeID in srp_employeedetail which has maped to EIdNo*/
            $this->db->where('Erp_companyID', $companyID);
            $this->db->where('EIdNo', $empID);
            $this->db->update('srp_employeesdetails', $data);


            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                $data = employee_details($empID);
                return array('status' =>'s','record' => $data); 
                //return array('s', 'activity_codeID updated in employeedetails TB and removed all recoreds in employee_reportingStructure which has mapped to empID successfully.', 'record'=> $data);
            } else {
                $this->db->trans_rollback();
                return array('status' =>'e', 'message' => 'Error in activity_codeID update in employeedetails TB and removing all recoreds in employee_reportingStructure TB which has mapped to empID process.');
            }
        }
        else{
            return array('status' =>'e', 'message' => 'Error in activityCodeID process and removing all records which mapped to empID in employee_reportingStructure TB.');
        }
    }

    function update_employee_reporting_structure(){
        $this->db->trans_start();
        $companyID = current_companyID();
        $empID = $this->input->post('empID');

        $this->db->query("DELETE 
        FROM srp_erp_employee_reporting_structure
            WHERE empID = 1885 AND companyID = 505
        ");

        $this->db->query("INSERT INTO srp_erp_employee_reporting_structure ( empID, reportingStructureID, reportingStructureDetailID, companyID ) 
        SELECT
            srp_employeesdetails.eidno AS empID,
            srp_erp_reporting_structure_master.id AS ReportingStruMasterID,
            srp_erp_reporting_structure_details.id AS ReportingStruDetailID,
            srp_employeesdetails.Erp_companyID AS companyID 
        FROM
            srp_employeesdetails
            JOIN srp_erp_activity_code_sub ON srp_employeesdetails.activityCodeID = srp_erp_activity_code_sub.main_id
            JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
            JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id 
        WHERE
            srp_employeesdetails.EIdNo = {$empID} 
    
        ");
      

        //     $this->db->query("UPDATE srp_erp_employee_reporting_structure
        //         JOIN srp_employeesdetails ON srp_erp_employee_reporting_structure.empID = srp_employeesdetails.EIdNo
        //         JOIN srp_erp_activity_code_sub ON srp_employeesdetails.activityCodeID = srp_erp_activity_code_sub.main_id
        //         JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
        //         JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id
        //         SET 
        //             srp_erp_employee_reporting_structure.reportingStructureID = srp_erp_reporting_structure_master.id,
        //             srp_erp_employee_reporting_structure.reportingStructureDetailID = srp_erp_reporting_structure_details.id,
        //             srp_erp_employee_reporting_structure.companyID = srp_employeesdetails.Erp_companyID
        //         WHERE
        //             srp_employeesdetails.EIdNo = {$empID}
        //     ");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Activity Code updated successfully !');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in Activity Code update process !');
        }
    }

    function save_employmentData_tibian()
    {
        $empID = $this->input->get('empID');
        $empDoj = $this->input->post('empDoj');
        $employeeConType = $this->input->post('employeeConType');
        $payCurrencyID = $this->input->post('empCurrency');
        $empSegment = $this->input->post('empSegment');
        $isPayrollEmployee = $this->input->post('isPayrollEmployee');
        $probationPeriod = $this->input->post('probationPeriod');
        $manPowerNo = $this->input->post('manPowerNo');
        $gradeID = $this->input->post('gradeID');
        $pos_barCode = $this->input->post('pos_barCode');
        $gratuityID = $this->input->post('gratuityID');
        $empLocation = $this->input->post('empLocation');


        /*For tibian Passport and visa expiry handle with document upload SME-1271*/
        $pass_portNo = $this->input->post('pass_portNo');
        /*$passPort_expiryDate = $this->input->post('passPort_expiryDate');
        $visa_expiryDate = $this->input->post('visa_expiryDate');*/
        $airport_destination = $this->input->post('airport_destination');
        $trFrequency = $this->input->post('trFrequency');
        $commissionScheme = $this->input->post('commissionSchemeID');
        $familyStatusID = $this->input->post('familyStatusID');
        $sponserID = $this->input->post('sponserID');
        $mobileCreditLimit = $this->input->post('mobileCreditLimit');

        $companyID = current_companyID();

        $date_format_policy = date_format_policy();

        $empDoj = (!empty($empDoj)) ? input_format_date($empDoj, $date_format_policy) : null;
        $probationPeriod = (!empty($probationPeriod)) ? input_format_date($probationPeriod, $date_format_policy) : null;
        /*$passPort_expiryDate = (!empty($passPort_expiryDate)) ? input_format_date($passPort_expiryDate, $date_format_policy) : null;
        $visa_expiryDate = (!empty($visa_expiryDate)) ? input_format_date($visa_expiryDate, $date_format_policy) : null;*/


        $minSalaryDeclaredDate = $this->db->query("SELECT MIN(effectiveDate) AS effDate FROM srp_erp_salarydeclarationdetails
                                                   WHERE companyID={$companyID} AND employeeNo={$empID}")->row('effDate');

        if (!empty($minSalaryDeclaredDate)) {
            $salaryDeclared = date('Y-m-d', strtotime($minSalaryDeclaredDate));
            if ($salaryDeclared < $empDoj) {
                $salaryDeclared = convert_date_format($salaryDeclared);
                return ['e', 'Date of join cannot be exceeded than the salary effective date [ ' . $salaryDeclared . ' ]'];
            }
        }

        $dateTime = current_date();
        $currencyCode = $this->db->query("SELECT CurrencyCode FROM srp_erp_currencymaster WHERE currencyID= '{$payCurrencyID}'")->row('CurrencyCode');

        $data = array(
            'manPowerNo' => $manPowerNo, 'gradeID' => $gradeID, 'pos_barCode' => $pos_barCode,
            'payCurrencyID' => $payCurrencyID, 'payCurrency' => $currencyCode, 'segmentID' => $empSegment,
            'probationPeriod' => $probationPeriod, 'isPayrollEmployee' => $isPayrollEmployee, 'EmployeeConType' => $employeeConType,

            'EPassportNO' => $pass_portNo, 'AirportDestination' => $airport_destination,
            //'EPassportExpiryDate' => $passPort_expiryDate, 'EVisaExpiryDate' => $visa_expiryDate,
            'travelFrequencyID' => $trFrequency, 'commissionSchemeID' => $commissionScheme, 'familyStatusID' => $familyStatusID,

            'EDOJ' => $empDoj, 'DateAssumed' => $empDoj, 'gratuityID' => $gratuityID, 'locationID' => $empLocation,
            'sponsorID' =>$sponserID, 'mobileCreditLimit' =>$mobileCreditLimit,

            'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime
        );

        $where = array('EIdNo' => $empID, 'Erp_companyID' => $companyID);

        $this->db->trans_start();

        $this->db->where($where)->update('srp_employeesdetails', $data);


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            $data = employee_details($empID);
            return ['s', 'Employment details updated successfully.', 'record' => $data];
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in employment details update process.');
        }


    }

    function save_reportingManager()
    {
        $empID = $this->input->post('empID');
        $managerID = $this->input->post('managerID');
        $companyID = current_companyID();
        $current_date = current_date();
        $userID = current_userID();

        $data = array(
            'empID' => $empID,
            'managerID' => $managerID,
            'active' => 1,
            // 'isprimary' => 1,
            'companyID' => $companyID,
            'createdUserID' => $userID,
            'createdDate' => $current_date
        );

        $updateData = array(
            //'active' => 0,
            // 'isprimary' => 0,
            'companyID' => $companyID,
            'modifiedUserID' => $userID,
            'modifiedDate' => $current_date
        );

        $exist = $this->db->query("SELECT employeeManagersID  FROM srp_erp_employeemanagers WHERE empID = {$empID} AND managerID = {$managerID}")->row('employeeManagersID');
        if(!empty($exist)){
            return array('e', 'Reporting Manager Already exist');
        }

        $this->db->trans_start();

        $this->db->insert('srp_erp_employeemanagers', $data);

        $this->db->where('empID', $empID)
            ->where('managerID', $managerID)
            ->where('companyID', $companyID)
            ->where('active', 1)
            ->update('srp_erp_employeemanagers', $updateData);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            $record = employee_details($empID);
            return array('s', 'Reporting manager inserted successfully', 'record' => $record);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process');
        }

    }

    /*Start of Employee Designation */

    function new_empTitle()
    {
        $title = trim($this->input->post('title') ?? '');
        $companyID = current_companyID();
        $isExist = $this->db->query("SELECT TitleID FROM srp_titlemaster WHERE Erp_companyID={$companyID} AND TitleDescription='$title' ")->row('TitleID');

        if (isset($isExist)) {
            return array('e', 'This title is already Exists');
        } else {

            $data = array(
                'TitleDescription' => $title,
                'SchMasterId' => current_schMasterID(),
                'branchID' => current_schBranchID(),
                'Erp_companyID' => current_companyID(),
                'CreatedPC' => current_pc(),
                'CreatedUserName' => current_employee(),
                'CreatedDate' => current_date()
            );

            $this->db->insert('srp_titlemaster', $data);
            if ($this->db->affected_rows() > 0) {
                $titleID = $this->db->insert_id();
                return array('s', 'Title is created successfully.', $titleID);
            } else {
                return array('e', 'Error in title Creating');
            }
        }

    }

    function save_empDesignations()
    {
        $empID = $this->input->post('empID');
        $designationID = $this->input->post('designationID');
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');
        $isMajor = $this->input->post('isMajor');
        $date_format_policy = date_format_policy();
        $startDateRow = input_format_date($startDate, $date_format_policy);
        $endDateRow = (!empty($endDate)) ? input_format_date($endDate, $date_format_policy) : null;
        $companyID = current_companyID();
        $isMajorValue = ($isMajor == 1) ? 1 : 0;

        $this->db->trans_start();
        $isFirstEntry = $this->db->query("SELECT EmpDesignationID FROM srp_employeedesignation WHERE Erp_companyID={$companyID}
                                          AND EmpID={$empID} AND isActive=1")->row('EmpDesignationID');

        if (empty($isFirstEntry)) {
            $isMajorValue = 1;
            $isMajor = 1;
        }

        if (!empty($isMajor)) {
            $this->db->query("UPDATE srp_employeedesignation SET isMajor=0 WHERE EmpID={$empID} AND Erp_companyID={$companyID}");
            $this->db->query("UPDATE srp_employeesdetails SET EmpDesignationId={$designationID} WHERE EIdNo={$empID} AND Erp_companyID={$companyID}");
        }

        $data = array();
        $data['DesignationID'] = $designationID;
        $data['EmpID'] = $empID;
        $data['startDate'] = $startDateRow;
        $data['endDate'] = $endDateRow;
        $data['isMajor'] = $isMajorValue;
        $data['SchMasterId'] = current_schMasterID();
        $data['BranchID'] = current_schBranchID();
        $data['Erp_companyID'] = current_companyID();
        $data['CreatedPC'] = current_pc();
        $data['CreatedUserName'] = current_employee();
        $data['CreatedDate'] = current_date();


        $this->db->insert('srp_employeedesignation', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records inserted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in insert record ');
        }

    }

    function edit_empDesignations()
    {
        $empID = $this->input->post('empID');
        $designationID = $this->input->post('designationID-hidden');
        $startDate = $this->input->post('edit_startDate');
        $endDate = $this->input->post('edit_endDate');
        $date_format_policy = date_format_policy();


        $this->db->trans_start();

        $startDateRow = input_format_date($startDate, $date_format_policy);
        $endDateRow = (!empty($endDate)) ? input_format_date($endDate, $date_format_policy) : null;

        $data = array(
            'startDate' => $startDateRow,
            'endDate' => $endDateRow,
            'ModifiedUserName' => current_employee(),
            'ModifiedPC' => current_pc()
        );


        $where = array(
            'Erp_companyID' => current_companyID(),
            'EmpID' => $empID,
            'EmpDesignationID' => $designationID
        );

        $this->db->where($where)->update('srp_employeedesignation', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records updated successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process');
        }

    }

    function delete_empDesignation()
    {
        $hidden_id = $this->input->post('hidden-id');

        $data = $this->db->query("SELECT isMajor, isActive FROM srp_employeedesignation WHERE EmpDesignationID={$hidden_id}")->row_array();
        $isMajor = $data['isMajor'];
        $isActive = $data['isActive'];

        if (!empty($isMajor)) {
            return array('e', 'This designation is the major designation of this employee</br>You can not delete this');
        } else if (!empty($isActive)) {
            return array('e', 'This designation is active.</br>You can not delete this');
        } else {
            $this->db->where('EmpDesignationID', $hidden_id)->delete('srp_employeedesignation');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Record deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    function changeEmpMajorDesignation()
    {
        $hidden_id = $this->input->post('hidden-id');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();

        $isActive = $this->db->get_where('srp_employeedesignation', ['DesignationID' => $hidden_id,
                                                                    'EmpID' => $empID,
                                                                    'Erp_companyID' => $companyID
                                                                    ])->row('isActive');
        if ($isActive != 1) {
            die(json_encode(['e', 'Please active this designation and try again.']));
        }

        $this->db->trans_start();

        $this->db->query("UPDATE srp_employeedesignation SET isMajor=0 WHERE EmpID={$empID} AND Erp_companyID={$companyID}");
        $this->db->query("UPDATE srp_employeedesignation SET isMajor=1 WHERE EmpID={$empID} AND DesignationID={$hidden_id} AND Erp_companyID={$companyID}");
        $this->db->query("UPDATE srp_employeesdetails SET EmpDesignationId={$hidden_id} WHERE EIdNo={$empID} AND Erp_companyID={$companyID}");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Updated successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process');
        }

    }

    
    function changeEmpReportingManager()
    {
        $hidden_id = $this->input->post('hidden-id');

        $data = $this->db->query("SELECT isprimary, active FROM srp_erp_employeemanagers WHERE employeeManagersID={$hidden_id}")->row_array();
        $isprimary = $data['isprimary'];
        $active = $data['active'];

        if (!empty($isprimary)) {
            return array('e', 'This Reporting Manager is major for this employee</br>You can not delete this');
        } else if (!empty($active)) {
            return array('e', 'This Reporting Manager is active.</br>You can not delete this');
        } else {
            $this->db->where('employeeManagersID', $hidden_id)->delete('srp_erp_employeemanagers');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Record deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

//is primary
    function change_rep_manager_primary_status(){
        $this->db->trans_start();

        $managerAutoID = $this->input->post('managerAutoID');
        $empID = $this->input->post('empID');
        $isprimary = $this->input->post('isprimary');
        $companyID = current_companyID();
        $this->load->helpers('configuration_helper');
        $dataChange=getPolicyValues('APEMP','All');

        $isActive = $this->db->get_where('srp_erp_employeemanagers', [
                                                                    'employeeManagersID' => $managerAutoID,
                                                                    'empID'=> $empID,
                                                                    'companyID'=> $companyID])->row('active');
        if ($isActive != 1) {
            die(json_encode(['e', 'Please active this reporting manager and try again.']));
        }

        if($isprimary == 1){
            $this->db->query("UPDATE srp_erp_employeemanagers SET isprimary=0 WHERE empID={$empID} AND companyID={$companyID}");
        }
      
        if($dataChange==0){
            $this->db->query("UPDATE srp_erp_employeemanagers SET isprimary=" . (int)$isprimary . " WHERE employeeManagersID={$managerAutoID} AND companyID={$companyID}");
        }
        else{
            $change=[
                'empID'=>$empID,
                'relatedColumnID'=>$managerAutoID,
                'realtedColumnName'=>'employeeManagersID',
                'columnName'=>'isprimary',
                'columnVal'=> (int)$isprimary,
                'approvedYN'=>0,
                'companyID'=>$companyID ,
                'timestamp'=>current_date(),
                'tableName'=>'srp_erp_employeemanagers',
            ];
            $this->db->insert('srp_erp_employeedatachanges',$change);
        }

       // $this->db->query("UPDATE srp_erp_employeemanagers SET isprimary={$isprimary} WHERE employeeManagersID={$managerAutoID} AND companyID={$companyID}");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Primary Status Updated successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process of set Primary Status');
        }
    }
//is active
    function change_rep_manager_Active_status(){
            $managerAutoID = trim($this->input->post('managerAutoID') ?? '');
            $empID = trim($this->input->post('empID') ?? '');
            $status = $this->input->post('status');
            $companyID = current_companyID();
            $this->load->helpers('configuration_helper');
            $dataChange=getPolicyValues('APEMP', 'All');

            $isPrimary = $this->db->query("SELECT employeeManagersID FROM srp_erp_employeemanagers
                                        WHERE employeeManagersID={$managerAutoID} AND companyID={$companyID} AND isprimary=1")->row('employeeManagersID');
        
            if (!empty($isPrimary)) {
                return ['e', 'This is Primary reporting manager of the employee.<br/>You can not de active this'];
                die();
            }
            
            $this->db->trans_start();
            if($dataChange==0){
                $this->db->query("UPDATE srp_erp_employeemanagers SET active=" . (int)$status . " WHERE employeeManagersID={$managerAutoID} AND companyID={$companyID}");
            }
            else{
                $change=[
                    'empID'=>$empID,
                    'relatedColumnID'=>$managerAutoID,
                    'realtedColumnName'=>'employeeManagersID',
                    'columnName'=>'active',
                    'columnVal'=> (int)$status,
                    'approvedYN'=>0,
                    'companyID'=>$companyID ,
                    'timestamp'=>current_date(),
                    'tableName'=>'srp_erp_employeemanagers',
                ];
                $this->db->insert('srp_erp_employeedatachanges',$change);
            }
        
            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Active Status Updated successfully ');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in process of set Active Status');
            }
    }


    function delete_reportingManagers()
    {
        $managerAutoID = $this->input->post('managerAutoID');

        $data = $this->db->query("SELECT isprimary, isprimary FROM srp_erp_employeemanagers WHERE employeeManagersID={$managerAutoID}")->row_array();
        $isprimary = $data['isprimary'];
        $isprimary = $data['isprimary'];

        if (!empty($isprimary)) {
            return array('e', 'This Reporting Manager is primary Reporting Manager of this employee</br>You can not delete this');
        } else if (!empty($isprimary)) {
            return array('e', 'This Reporting Manager is active.</br>You can not delete this');
        } else {
            $this->db->where('employeeManagersID', $managerAutoID)->delete('srp_erp_employeemanagers');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Record deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }



    function changeActiveDesignation()
    {
        $hidden_id = $this->input->post('hidden-id');
        $empID = $this->input->post('empID');
        $status = $this->input->post('status');
        $companyID = current_companyID();

        $isMajor = $this->db->query("SELECT EmpDesignationID FROM srp_employeedesignation
                                     WHERE EmpDesignationID={$hidden_id} AND Erp_companyID={$companyID} AND isMajor=1")->row('EmpDesignationID');

        if (!empty($isMajor)) {
            return ['e', 'This is major designation of the employee.<br/>You can not de active this'];
            die();
        }

        $this->db->trans_start();

        $this->db->query("UPDATE srp_employeedesignation SET isActive={$status} WHERE EmpID={$empID} AND EmpDesignationID={$hidden_id} AND Erp_companyID={$companyID}");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Updated successfully ');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process');
        }

    }

    /*Start of Religion */
    function saveReligion()
    {
        $description = $this->input->post('description[]');

        $data = array();
        foreach ($description as $key => $de) {
            $data[$key]['Religion'] = $de;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['branchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        $this->db->insert_batch('srp_religion', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editReligion()
    {
        $description = $this->input->post('religionDes');
        $hidden_id = $this->input->post('hidden-id');

        $data = array(
            'Religion' => $description,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->where('RId', $hidden_id)->update('srp_religion', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }
    /*End of Religion */


    /*Start of Country */

    function deleteReligion()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT Rid FROM srp_employeesdetails WHERE Rid={$hidden_id}")->row('Rid');

        if (isset($isInUse)) {
            return array('e', 'This Religion is in use</br>You can not delete this');
        } else {
            $this->db->where('RId', $hidden_id)->delete('srp_religion');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    function fetch_allCountry()
    {
        $companyID = current_companyID();
        return $this->db->query("SELECT countryID, countryShortCode, CountryDes FROM srp_erp_countrymaster t1
                                         WHERE NOT EXISTS ( SELECT countryID FROM srp_countrymaster WHERE countryMasterID = t1.countryID
                                          AND Erp_companyID ={$companyID} )
                                         ")->result_array();
    }

    function saveCountry()
    {

        $country = $this->input->post('country');
        $country = json_decode($country);

        $data = array();
        foreach ($country as $key => $arr) {
            $data[$key]['countryShortCode'] = $arr->code;
            $data[$key]['CountryDes'] = $arr->name;
            $data[$key]['countryMasterID'] = $arr->id;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['branchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        $this->db->insert_batch('srp_countrymaster', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function fetchCity()
    {
        $countrtyID = $this->input->post('countryID');

        $data = $this->db->query("Select * from srp_erp_citymaster where countrtyID = $countrtyID ")->result_array();
       
        return $data;
    }

    
    // function addCity()
    // {
    //     $country = trim($this->input->post('countryID') ?? '');
    //     $city = $this->input->post('city');
    //     //$country = json_decode($country);
    //     $data = array();

    //     $isExist = $this->db->query("SELECT countrtyID FROM srp_erp_citymaster WHERE countrtyID={$country}")->row_array();

    //     if (!empty($isExist['countrtyID'])) {

    //         $this->db->set('cityName', $city);
    //         $this->db->where('countrtyID', $country);
    //         $this->db->update('srp_erp_citymaster');

    //         if ($this->db->affected_rows() > 0) {
    //             return array('s', 'City updated successfully');
    //         } else {
    //             return array('e', 'Failed to update City or no changes made');
    //         }
    //     } else {
    //             $data['countrtyID'] = $country;
    //             $data['cityName'] = $city;
    //             $data['createdByEmpID'] = current_userID();
    //             $data['createdDateTime'] = current_date();

    //         $this->db->insert('srp_erp_citymaster', $data);

    //         if ($this->db->affected_rows() > 0) {
    //             return array('s', 'City created successfully');
    //         } else {
    //             return array('e', 'Failed to create City');
    //         }
    //     }
    // }

    function deleteCity(){
        $cityID	 = $this->input->post('cityID');
        $this->db->delete('srp_erp_citymaster', array('cityID' => $cityID));
        if($this->db->affected_rows() > 0){
            return true;
        }else{
            return false;
        }
    }

    function addCity($continue = null)
    {
        $this->db->trans_start();
       
        $countryID = $this->input->post('countryID');
        $city = $this->input->post(trim('city'));
        $city_exist = $this->input->post('city_exist');
        $city_exist_ID = $this->input->post('city_exist_ID');
        
        $isExist = $this->db->query("SELECT * FROM srp_erp_citymaster WHERE countrtyID={$countryID}")->result_array();

        if(!empty($city_exist_ID))
        {
            foreach($city_exist_ID as $index=>$value){
                $cityID = $value;

                $this->db->set('cityName', $city_exist[$index]);
                $this->db->where('cityID', $cityID);
                $this->db->update('srp_erp_citymaster');

                $this->db->trans_complete();
            }
        }

        if(!empty($city))
        {
            foreach($city as $key=>$row){
                        if($row != $isExist[$key]['cityName'] || $continue == 1){
                            $data['countrtyID'] = $countryID;
                            $data['cityName'] = $row;
                            $data['createdByEmpID'] = current_userID();
                            $data['createdDateTime'] = current_date();

                            $this->db->insert('srp_erp_citymaster', $data);
                            $this->db->trans_complete();
                        }
                        else{
                            return array('w', 'Already exists City with same name ('.$row.') in this Country. Do you wish to continue any more?', true);
                        } 
            }
        }
        
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'City  Saved Failed ');
        } else {
            $this->db->trans_commit();
            return array('s', 'City Saved Successfully.');
        }
    }
    /*End of Country */


    /*Start of Designation */

    function deleteCountry()
    {
        $hidden_id = $this->input->post('hidden-id');
        $isInUse = $this->db->query("SELECT EIdNo FROM srp_employeesdetails WHERE EcAddress4={$hidden_id}  OR EpAddress4={$hidden_id} LIMIT 1")->row('EIdNo');

        if (isset($isInUse)) {
            return array('e', 'This country is in use</br>You can not delete this');
        } else {
            $this->db->where('countryID', $hidden_id)->delete('srp_countrymaster');

            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    function saveDesignation()
    {
        $description = $this->input->post('designationName');
        $jobCategoryID = $this->input->post('jobCategoryID');
        $companyID = current_companyID();
        //$whereIN = "( '" . join("' , '", $description) . "' )";

        $isExist = $this->db->query("SELECT DesDescription FROM `srp_designation` WHERE DesDescription='$description' AND Erp_companyID={$companyID} AND isDeleted=0")->result_array();

        if (empty($isExist)) {
            $data = array();
            
                $data['DesDescription'] = $description;
                $data['SchMasterId'] = current_schMasterID();
                $data['branchID'] = current_schBranchID();
                $data['Erp_companyID'] = $companyID;
                $data['categoryID'] = $jobCategoryID;
                $data['isDeleted'] = '0';
                $data['CreatedPC'] = current_pc();
                $data['CreatedUserName'] = current_employee();
                $data['CreatedDate'] = current_date();
            
            $this->db->insert('srp_designation', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Record inserted successfully');
            } else {
                return array('e', 'Error in insert record');
            }
        } else {
            $existItems = '';
            return array('e', 'Designation is already Exists ' . $existItems);
        }

    }

    function updateJDDescription()
    {
        $JDDescription = $this->input->post('JDDescription');
        $DesignationID = $this->input->post('de_id');
        $companyID = current_companyID();

            $data = array();
            
            $data['JDDescription'] = $JDDescription;
            
            $this->db->where('DesignationID', $DesignationID)->update('srp_designation', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records updated successfully');
            } else {
                return array('e', 'Error in updating record');
            }

    }

    function saveJobCategory()
    {
        $job_category_name = $this->input->post('job_category_name');
        $companyID = current_companyID();
       // $whereIN = "( '" . join("' , '", $job_category_name) . "' )";

        $isExist = $this->db->query("SELECT JobCategory FROM `srp_erp_designation_category` WHERE JobCategory = '$job_category_name' AND companyID={$companyID} AND isDeleted=0")->result_array();

        if (empty($isExist)) {
            $data = array();
            
                $data['JobCategory'] = $job_category_name;
                $data['companyID'] = $companyID;
                $data['isDeleted'] = '0';
                $data['CreatedPC'] = current_pc();
                $data['CreatedUserName'] = current_employee();
                $data['CreatedDate'] = current_date();
          

            $this->db->insert('srp_erp_designation_category', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records inserted successfully');
            } else {
                return array('e', 'Error in insert record');
            }
        } else {
            return array('e', 'Job category is already exists ');
        }

    }

    function editDesignation()
    {
        $description = $this->input->post('designationDes');
        $hidden_id = $this->input->post('hidden-id');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT DesDescription FROM srp_designation WHERE DesDescription='$description'
                                     AND Erp_companyID={$companyID} AND DesignationID != {$hidden_id} AND isDeleted=0")->row_array();


        if (empty($isExist)) {
            $data = array(
                'DesDescription' => $description,
                'ModifiedPC' => current_pc(),
                'ModifiedUserName' => current_employee(),
            );

            $this->db->where('DesignationID', $hidden_id)->update('srp_designation', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records updated successfully');
            } else {
                return array('e', 'Error in updating record');
            }
        } else {

            return array('e', 'Another designation is already Exists with this description.');
        }

    }
    /*End of Designation */


    /*Start of Qualification */

    function deleteDesignation()
    {
        $hidden_id = $this->input->post('hidden-id');

        $data = array(
            'isDeleted' => '1',
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->where('DesignationID', $hidden_id)->update('srp_designation', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }
    }

    function deleteJobCategory()
    {
        $hidden_id = $this->input->post('hidden-id');

        $data = array(
            'isDeleted' => '1',
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->where('id', $hidden_id)->update('srp_erp_designation_category', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Record deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }
    }

    function saveQualification()
    {
        $empID = $this->input->post('empID');
        $certification = $this->input->post('certification');
        $institution = $this->input->post('institution');
        $awardedDate = $this->input->post('awardedDate');
        $GPA = $this->input->post('GPA');
        $isFrom = $this->input->post('isFrom');
        $hrVerified = $this->input->post('isVerified');
        $date_format_policy = date_format_policy();
        $awardedDate = (!empty($awardedDate)) ? input_format_date($awardedDate, $date_format_policy) : null;

        $data = array(
            'EmpID' => $empID,
            'Description' => $certification,
            'Institution' => $institution,
            'GPA' => $GPA,
            'AwardedDate' => $awardedDate,
            'CreatedPC' => current_pc(),
            'CreatedUserName' => current_employee(),
            'CreatedDate' => current_date()
        );

        if ($isFrom != 'profile') {
            $data['hrVerified'] = $hrVerified;
        }

        $this->db->insert('srp_empcertification', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editQualification()
    {
        $hidden_id = $this->input->post('hidden-id');
        $certification = $this->input->post('certification');
        $institution = $this->input->post('institution');
        $awardedDate = $this->input->post('awardedDate');
        $GPA = $this->input->post('GPA');
        $isFrom = $this->input->post('isFrom');
        $hrVerified = $this->input->post('isVerified');

        $date_format_policy = date_format_policy();
        $awardedDate = (!empty($awardedDate)) ? input_format_date($awardedDate, $date_format_policy) : null;

        $data = array(
            'Description' => $certification,
            'Institution' => $institution,
            'GPA' => $GPA,
            'AwardedDate' => $awardedDate,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee()
        );

        if ($isFrom != 'profile') {
            $isAlreadyVerified = $this->db->query("SELECT hrVerified FROM srp_empcertification
                                                   WHERE certificateID={$hidden_id} ")->row('hrVerified');
            if ($isAlreadyVerified != $hrVerified) {
                $data['hrVerified'] = ($hrVerified == 1) ? 1 : 0;
            }
        }


        $this->db->where('certificateID', $hidden_id)->update('srp_empcertification', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }

    }
    /*End of Qualification */


    /*Start of Document Setups */

    function deleteQualification()
    {
        $hidden_id = $this->input->post('hidden-id');


        $this->db->where('certificateID', $hidden_id)->delete('srp_empcertification');
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }
    }

    public function save_documentDescriptions()
    {
        $sysType = $this->input->post('sysType[]');
        $description = $this->input->post('description[]');
        $sortOrder = $this->input->post('sortOrder[]');
        $isRequired = $this->input->post('isRequired[]');
        $chk_issueDate = $this->input->post('is_issueDate[]');
        $chk_expireDate = $this->input->post('is_expireDate[]');
        $chk_issuedBy = $this->input->post('is_issuedBy[]');

        $whereIN = "( '" . join("' , '", $description) . "' )";


        $isExist = $this->db->query("SELECT DocDescription FROM srp_documentdescriptionmaster WHERE DocDescription IN " . $whereIN . "
                                     AND Erp_companyID=" . current_companyID())->result_array();


        if (empty($isExist)) {

            $this->db->trans_start();

            foreach ($description as $key => $des) {
                $data = array(
                    'systemTypeID' => $sysType[$key], 'DocDescription' => $des, 'SortOrder' => $sortOrder[$key], 'SchMasterId' => current_schMasterID(),
                    'branchID' => current_schBranchID(), 'Erp_companyID' => current_companyID(), 'CreatedPC' => current_pc(),
                    'createdUserID' => current_userID(), 'CreatedUserName' => current_employee(), 'CreatedDate' => current_date()
                );

                $this->db->insert('srp_documentdescriptionmaster', $data);
                $docID = $this->db->insert_id();

                if (!empty($isRequired)) {
                    $thisRequired = (array_key_exists($key, $isRequired)) ? $isRequired[$key] : 0;
                } else {
                    $thisRequired = 0;
                }

                $data_setup = array(
                    'DocDesID' => $docID, 'FormType' => 'EMP', 'isMandatory' => $thisRequired, 'issueDate_req' => $chk_issueDate[$key],
                    'expireDate_req' => $chk_expireDate[$key], 'issuedBy_req' => $chk_issuedBy[$key], 'SortOrder' => $sortOrder[$key],
                    'SchMasterId' => current_schMasterID(), 'BranchID' => current_schBranchID(), 'Erp_companyID' => current_companyID(),
                    'CreatedPC' => current_pc(), 'createdUserID' => current_userID(), 'CreatedUserName' => current_employee(), 'CreatedDate' => current_date()
                );


                $this->db->insert('srp_documentdescriptionsetup', $data_setup);
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Created Successfully.');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            }
        } else {
            $existItems = '';
            foreach ($isExist as $row) {
                $existItems .= '</br>' . $row['DocDescription'];
            }
            return array('e', 'Following designations are already Exists ' . $existItems);
        }

    }

    function edit_documentDescription()
    {
        $description = $this->input->post('edit_description');
        $sortOrder = $this->input->post('edit_sortOrder');
        $isMandatory = ($this->input->post('edit_isMandatory') == 'on') ? 1 : 0;
        $is_issueDate = ($this->input->post('edit_issueDate') == 'on') ? 1 : 0;
        $is_expireDate = ($this->input->post('edit_expireDate') == 'on') ? 1 : 0;
        $is_issuedBy = ($this->input->post('edit_issuedBy') == 'on') ? 1 : 0;
        $docID = $this->input->post('hidden-id');


        $isExist = $this->db->query("SELECT DocDescription FROM srp_documentdescriptionmaster WHERE DocDescription='$description'
                                     AND DocDesID!={$docID} AND Erp_companyID=" . current_companyID())->result_array();


        if (empty($isExist)) {

            $this->db->trans_start();

            $data = array(
                'DocDescription' => $description,
                'SortOrder' => $sortOrder,
                'CreatedPC' => current_pc(),
                'ModifiedUserName' => current_employee(),
                'createdUserID' => current_userID()
            );

            $this->db->where('DocDesID', $docID)->where('Erp_companyID', current_companyID())
                ->update('srp_documentdescriptionmaster', $data);


            //Update setup table
            unset($data['DocDescription']);
            $data['isMandatory'] = $isMandatory;
            $data['issueDate_req'] = $is_issueDate;
            $data['expireDate_req'] = $is_expireDate;
            $data['issuedBy_req'] = $is_issuedBy;

            $where = [
                'Erp_companyID' => current_companyID(),
                'FormType' => 'EMP',
                'DocDesID' => $docID,
            ];
            $this->db->where($where)->update('srp_documentdescriptionsetup', $data);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Updated Successfully.');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in update process');
            }
        } else {
            return array('e', $description . ' is already Exists');
        }
    }

    function delete_documentDescription()
    {
        $hidden_id = $this->input->post('hidden-id');

        // Check is there any employee document uploaded
        $isInUse = $this->db->query("SELECT DocDesID FROM srp_documentdescriptionforms WHERE  DocDesID={$hidden_id}
                                     AND Erp_companyID=" . current_companyID())->result_array();


        if (empty($isInUse)) {
            //check this document master used for other types (Parents/Students)
            $isInUse = $this->db->query("SELECT DocDesSetupID FROM srp_documentdescriptionsetup WHERE  DocDesID={$hidden_id}
                                         AND FormType!='EMP'  AND Erp_companyID=" . current_companyID())->result_array();
        }

        if (empty($isInUse)) {
            $this->db->trans_start();

            $this->db->where('DocDesID', $hidden_id)->delete('srp_documentdescriptionmaster');

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Records deleted successfully');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in deleting process');
            }
        } else {
            return array('e', 'This description is in use.');
        }
    }

    public function saveDoc_master()
    {

        $description = $this->input->post('descriptionID[]');
        $isRequired = $this->input->post('isRequired[]');
        $sortOrder = $this->input->post('sortOrder[]');

        $whereIN = "( " . join(" , ", $description) . " )";


        $isExist = $this->db->query("SELECT DocDescription FROM srp_documentdescriptionsetup  t1
                                     JOIN srp_documentdescriptionmaster t2 ON t1.DocDesID=t2.DocDesID
                                     WHERE t1.DocDesID IN " . $whereIN . " AND t1.Erp_companyID=" . current_companyID())->result_array();


        if (empty($isExist)) {

            $this->db->trans_start();

            foreach ($description as $key => $des) {

                if (!empty($isRequired)) {
                    $thisRequired = (array_key_exists($key, $isRequired)) ? $isRequired[$key] : 0;
                } else {
                    $thisRequired = 0;
                }

                $data_setup = array(
                    'DocDesID' => $des,
                    'FormType' => 'EMP',
                    'isMandatory' => $thisRequired,
                    'SortOrder' => $sortOrder[$key],
                    'SchMasterId' => current_schMasterID(),
                    'BranchID' => current_schBranchID(),
                    'Erp_companyID' => current_companyID(),
                    'CreatedPC' => current_pc(),
                    'CreatedUserName' => current_employee(),
                    'CreatedDate' => current_date()
                );


                $this->db->insert('srp_documentdescriptionsetup', $data_setup);
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Created Successfully.');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in process');
            }
        } else {
            $existItems = '';
            foreach ($isExist as $row) {
                $existItems .= '</br>' . $row['DocDescription'];
            }
            return array('e', 'Following designations are already Exists ' . $existItems);
        }

    }

    function delete_DocSetup()
    {
        $hidden_id = $this->input->post('hidden-id');

        $this->db->trans_start();
        $data = array(
            'isDeleted' => '1',
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->where('DocDesID', $hidden_id)->update('srp_documentdescriptionmaster', $data);
        $this->db->where('DocDesID', $hidden_id)->delete('srp_documentdescriptionsetup');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records deleted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in deleting process');
        }
    }
    /*End of Document Setups*/


    /*Start of Employee Document*/

    function edit_document()
    {
        $descriptionID = $this->input->post('edit_descriptionID');
        $isRequired = $this->input->post('edit_isRequired');
        $sortOrder = $this->input->post('edit_sortOrder');
        $setupID = $this->input->post('hidden-id');


        $isExist = $this->db->query("SELECT DocDesSetupID FROM srp_documentdescriptionsetup WHERE DocDesID='$descriptionID'
                                     AND DocDesSetupID!={$setupID} AND FormType='EMP' AND Erp_companyID=" . current_companyID())->row_array();

        if (empty($isExist)) {

            $this->db->trans_start();

            $data_setup = array(
                'DocDesID' => $descriptionID,
                'isMandatory' => ($isRequired == 1) ? $isRequired : 0,
                'SortOrder' => $sortOrder,
                'ModifiedPC' => current_pc(),
                'ModifiedUserName' => current_employee()
            );


            $setupWhere = array(
                'DocDesSetupID' => $setupID,
                'FormType' => 'EMP'
            );
            $this->db->where($setupWhere)->update('srp_documentdescriptionsetup', $data_setup);


            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Updated Successfully.');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in update process');
            }
        } else {
            return array('e', 'This document is already Exists');
        }
    }

    function emp_documentSave()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('docEmpID');
        $documentID = $this->input->post('document');
        $sub_document_type = $this->input->post('sub_document_type');
        $doc_no = $this->input->post('doc_no');
        $issueDate = $this->input->post('issueDate');
        $expireDate = $this->input->post('expireDate');
        $issuedBy = $this->input->post('issuedBy');
        $issuedByText = $this->input->post('issuedByText');
        $issuedByText = ($issuedBy == -1) ? $issuedByText : null;
        $isCTC = $this->input->post('isCTC') == true ? '1' : '0';
        $ctcCost = $this->input->post('ctcCost');


        $date_format_policy = date_format_policy();

        $issueDate = (!empty($issueDate)) ? input_format_date_php($issueDate, $date_format_policy) : null;
        $expireDate = (!empty($expireDate)) ? input_format_date_php($expireDate, $date_format_policy) : null;

        if ($expireDate != null and $issueDate != null) {
            if ($issueDate > $expireDate) {
                return ['e', 'Issue date can not be greater than expire date'];
            }
        }

        $fileName = "{$companyID}_{$empID}_".time();

        /*Multiple upload can be done SME-1271*/
        //Check is there is a document with this document ID for this employee
        /*$where = array('DocDesID' => $documentID, 'PersonID' => $empID, 'PersonType' => 'E');
        $isExisting = $this->db->where($where)->select('DocDesID')->from('srp_documentdescriptionforms')->get()->row('DocDesID');

        if (!empty($isExisting)) {
            return ['e', 'This document has been updated already.<br/>Please delete the document and try again.'];
        }*/

        /*$path = UPLOAD_PATH_POS . 'documents/users/';
        $config['upload_path'] = $path;
        $config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        if (!$this->upload->do_upload("doc_file")) {
            return array('e', 'Upload failed ' . $this->upload->display_errors(), 'path' => $path);
        }*/

        $file = $_FILES['doc_file'];
       
        if($file['error'] != 4){
            // if ($file['error'] == 1) {
            //     return ['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"];
            // }

            $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
            $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|PDF|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
            $allowed_types = explode('|', $allowed_types);
            if (!in_array($ext, $allowed_types)) {
                return ['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"];
            }

            $size = $file['size'];
            $size = number_format($size / 1048576, 2);

            

            if ($size > 50) {
                return ['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"];
            }

            $fileName = "documents/users/$fileName.$ext";
            $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

            if (!$s3Upload) {
                return ['e', 'Error in document upload location configuration'];
            }

        }


        $dateTime = current_date();

        /*Make previous records inactive*/
        $where = array('DocDesID' => $documentID, 'PersonID' => $empID, 'PersonType' => 'E', 'isDeleted' => 0, 'isActive' => 1);
        $isExisting = $this->db->where($where)->select('DocDesFormID')->from('srp_documentdescriptionforms')->get()->row('DocDesFormID');

        $this->db->trans_start();

        if (!empty($isExisting)) {
            $updateData = [
                'isActive' => 0, 'ModifiedDateTime' => $dateTime, 'Timestamp' => $dateTime,
                'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(), 'ModifiedUserName' => current_employee()
            ];
            $this->db->where(['DocDesFormID' => $isExisting])->update('srp_documentdescriptionforms', $updateData);
        }

        //Get document Setup ID
        $setUpID = $this->db->query("SELECT DocDesSetupID FROM srp_documentdescriptionsetup WHERE DocDesID={$documentID}
                                         AND FormType='EMP' AND Erp_companyID={$companyID} ")->row('DocDesSetupID');

        $data = array(
            'DocDesSetID' => $setUpID, 'DocDesID' => $documentID, 'subDocumentType' => $sub_document_type, 'PersonID' => $empID,
            'PersonType' => 'E', 'issuedBy' => $issuedBy, 'FileName' => $fileName, 'issueDate' => $issueDate,
            'expireDate' => $expireDate, 'issuedByText' => $issuedByText, 'documentNo' => $doc_no,
            'SchMasterId' => current_schMasterID(), 'BranchID' => current_schBranchID(),
            'Erp_companyID' => current_companyID(), 'CreatedPC' => current_pc(), 'CreatedUserID' => current_userID(),
            'CreatedUserName' => current_employee(), 'CreatedDate' => $dateTime, 'Timestamp' => $dateTime,'isCTC' => $isCTC, 'ctcCost' => $ctcCost
        );

        $this->db->insert('srp_documentdescriptionforms', $data);

        $systemTypeID = $this->db->get_where('srp_documentdescriptionmaster', ['DocDesID' => $documentID])->row('systemTypeID');
        if (in_array($systemTypeID, [3, 4])) {//Is visa or passport document
            $columnName = ($systemTypeID == 3) ? 'EVisaExpiryDate' : 'EPassportExpiryDate';
            $empUpdateData = [$columnName => $expireDate, 'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime];
            if ($systemTypeID == 4) { /*update passport no*/
                $empUpdateData['EPassportNO'] = $doc_no;
            }
            $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $empUpdateData);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return array('s', 'Document successfully uploaded');
        } else {
            return array('e', 'Error in document upload');
        }
    }

    function emp_documentSave_old()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('docEmpID');
        $documentID = $this->input->post('document');
        $sub_document_type = $this->input->post('sub_document_type');
        $doc_no = $this->input->post('doc_no');
        $issueDate = $this->input->post('issueDate');
        $expireDate = $this->input->post('expireDate');
        $issuedBy = $this->input->post('issuedBy');
        $issuedByText = $this->input->post('issuedByText');
        $issuedByText = ($issuedBy == -1) ? $issuedByText : null;


        $date_format_policy = date_format_policy();

        $issueDate = (!empty($issueDate)) ? input_format_date($issueDate, $date_format_policy) : null;
        $expireDate = (!empty($expireDate)) ? input_format_date($expireDate, $date_format_policy) : null;

        if ($expireDate != null and $issueDate != null) {
            if ($issueDate > $expireDate) {
                return ['e', 'Issue date can not be greater than expire date'];
            }
        }

        /*Multiple upload can be done SME-1271*/
        //Check is there is a document with this document ID for this employee
        /*$where = array('DocDesID' => $documentID, 'PersonID' => $empID, 'PersonType' => 'E');
        $isExisting = $this->db->where($where)->select('DocDesID')->from('srp_documentdescriptionforms')->get()->row('DocDesID');

        if (!empty($isExisting)) {
            return ['e', 'This document has been updated already.<br/>Please delete the document and try again.'];
        }*/

        $path = UPLOAD_PATH_POS . 'documents/users/'; // imagePath();
        $fileName = str_replace(' ', '', strtolower($empID)) . '_' . time();
        $config['upload_path'] = $path;
        $config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);


        if (!$this->upload->do_upload("doc_file")) {
            return array('e', 'Upload failed ' . $this->upload->display_errors(), 'path' => $path);
        } else {

            $dateTime = current_date();

            /*Make previous records inactive*/
            $where = array('DocDesID' => $documentID, 'PersonID' => $empID, 'PersonType' => 'E', 'isDeleted' => 0, 'isActive' => 1);
            $isExisting = $this->db->where($where)->select('DocDesFormID')->from('srp_documentdescriptionforms')->get()->row('DocDesFormID');

            $this->db->trans_start();

            if (!empty($isExisting)) {
                $updateData = [
                    'isActive' => 0, 'ModifiedDateTime' => $dateTime, 'Timestamp' => $dateTime,
                    'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(), 'ModifiedUserName' => current_employee()
                ];
                $this->db->where(['DocDesFormID' => $isExisting])->update('srp_documentdescriptionforms', $updateData);
            }

            //Get document Setup ID
            $setUpID = $this->db->query("SELECT DocDesSetupID FROM srp_documentdescriptionsetup WHERE DocDesID={$documentID}
                                         AND FormType='EMP' AND Erp_companyID={$companyID} ")->row('DocDesSetupID');

            $data = array(
                'DocDesSetID' => $setUpID, 'DocDesID' => $documentID, 'subDocumentType' => $sub_document_type, 'PersonID' => $empID,
                'PersonType' => 'E', 'issuedBy' => $issuedBy, 'FileName' => $this->upload->data('file_name'), 'issueDate' => $issueDate,
                'expireDate' => $expireDate, 'issuedByText' => $issuedByText, 'documentNo' => $doc_no,
                'SchMasterId' => current_schMasterID(), 'BranchID' => current_schBranchID(),
                'Erp_companyID' => current_companyID(), 'CreatedPC' => current_pc(), 'CreatedUserID' => current_userID(),
                'CreatedUserName' => current_employee(), 'CreatedDate' => $dateTime, 'Timestamp' => $dateTime
            );

            $this->db->insert('srp_documentdescriptionforms', $data);

            $systemTypeID = $this->db->get_where('srp_documentdescriptionmaster', ['DocDesID' => $documentID])->row('systemTypeID');
            if (in_array($systemTypeID, [3, 4])) {//Is visa or passport document
                $columnName = ($systemTypeID == 3) ? 'EVisaExpiryDate' : 'EPassportExpiryDate';
                $empUpdateData = [$columnName => $expireDate, 'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime];
                if ($systemTypeID == 4) { /*update passport no*/
                    $empUpdateData['EPassportNO'] = $doc_no;
                }
                $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $empUpdateData);
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                return array('s', 'Document successfully uploaded');
            } else {
                return array('e', 'Error in document upload');
            }
        }
    }
    /*End of Employee Document*/

    /*Start of Department */

    function delete_empDocument($hiddenID)
    {
        $this->db->trans_start();
        $docDetails = $this->db->get_where('srp_documentdescriptionforms', ['DocDesFormID' => $hiddenID])->row_array();
        $empID = $docDetails['PersonID'];
        $documentID = $docDetails['DocDesID'];
        $this->s3->delete($docDetails['FileName']);

        $this->db->where('DocDesFormID', $hiddenID)->update('srp_documentdescriptionforms', ['isDeleted' => 1]);

        $systemTypeID = $this->db->get_where('srp_documentdescriptionmaster', ['DocDesID' => $documentID])->row('systemTypeID');
        if (in_array($systemTypeID, [3, 4])) {//Is visa or passport document
            $columnName = ($systemTypeID == 3) ? 'EVisaExpiryDate' : 'EPassportExpiryDate';
            $empUpdateData = [$columnName => null, 'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => current_date()];
            if ($systemTypeID == 4) { /*update passport no*/
                $empUpdateData['EPassportNO'] = '';
            }
            $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $empUpdateData);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return array('s', 'Document deleted successfully');
        } else {
            return array('e', 'Error in document delete function');
        }
    }

    function saveDepartment()
    {
        $description = $this->input->post('department[]');

        $data = array();
        foreach ($description as $key => $de) {
            $data[$key]['DepartmentDes'] = $de;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['branchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['isActive'] = 1;
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        $this->db->insert_batch('srp_departmentmaster', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editDepartment()
    {
        $description = $this->input->post('departmentDes');
        $status = $this->input->post('status');
        $hidden_id = $this->input->post('hidden-id');

        $data = array(
            'isActive' => $status,
            'DepartmentDes' => $description,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
        );

        $this->db->where('DepartmentMasterID', $hidden_id)->update('srp_departmentmaster', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }

    }
    /*End of Department */


    /*Start of Employee Floor*/

    function deleteDepartment()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT DepartmentMasterID FROM srp_empdepartments WHERE DepartmentMasterID={$hidden_id}")->row('DepartmentMasterID');

        if (isset($isInUse)) {
            return array('e', 'This department is in use</br>You can not delete this');
        } else {
            $this->db->where('DepartmentMasterID', $hidden_id)->delete('srp_departmentmaster');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    function saveFloor()
    {
        $description = $this->input->post('floor[]');
        $whereIN = "( '" . join("' , '", $description) . "' )";

        $isExist = $this->db->query("SELECT floorDescription FROM srp_erp_pay_floormaster WHERE floorDescription IN {$whereIN}
                                    AND companyID=" . current_companyID())->result_array();

        if (empty($isExist)) {
            $data = array();
            $latitude = $this->input->post('latitude[]');
            $longitude = $this->input->post('longitude[]');
            $locationRadius = $this->input->post('locationRadius[]');

            foreach ($description as $key => $row) {
                $data[$key]['floorDescription'] = $row;
                $data[$key]['latitude'] = $latitude[$key];
                $data[$key]['longitude'] = $longitude[$key];
                $data[$key]['locationRadius'] = $locationRadius[$key];
                $data[$key]['isActive'] = 1;
                $data[$key]['companyID'] = current_companyID();
                $data[$key]['companyCode'] = current_companyCode();
                $data[$key]['createdPCID'] = current_pc();
                $data[$key]['createdUserID'] = current_userID();
                $data[$key]['createdUserName'] = current_employee();
                $data[$key]['createdUserGroup'] = current_user_group();
                $data[$key]['createdDateTime'] = current_date();
            }


            $this->db->insert_batch('srp_erp_pay_floormaster', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Data successfully inserted');
            } else {
                return array('e', 'Error in data insertion');
            }
        } else {
            $existItems = '';
            foreach ($isExist as $row) {
                $existItems .= '</br>' . $row['floorDescription'];
            }
            return array('e', 'Following description/s are already Exists ' . $existItems);
        }
    }

    function editFloor()
    {
        $floorDes = $this->input->post('floorDes');
        $status = $this->input->post('status');
        $floorID = $this->input->post('hidden-id');


        $isExist = $this->db->query("SELECT floorDescription FROM srp_erp_pay_floormaster WHERE floorDescription='$floorDes'
                                     AND floorID!={$floorID} AND companyID=" . current_companyID())->result_array();


        if (empty($isExist)) {
            $data = array(
                'floorDescription' => $floorDes,
                'latitude' => $this->input->post('latitude'),
                'longitude' => $this->input->post('longitude'),
                'locationRadius' => $this->input->post('locationRadius'),
                'isActive' => $status,
                'modifiedPCID' => current_pc(),
                'modifiedUserID' => current_userID(),
                'modifiedUserName' => current_employee(),
                'modifiedDateTime' => current_date()
            );

            $this->db->where('floorID', $floorID)->update('srp_erp_pay_floormaster', $data);
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Data successfully updated');
            } else {
                return array('e', 'Error in data updating');
            }
        } else {
            return array('e', $floorDes . ' is already Exists');
        }

    }
    /*End of Employee Floor*/


    /*Start of Employee Department */

    function deleteFloor()
    {
        $floorID = $this->input->post('hidden-id');

        $this->db->where('floorID', $floorID)->delete('srp_erp_pay_floormaster');

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Data successfully deleted');
        } else {
            return array('e', 'Error in data deleting');
        }
    }

    function save_empDepartments()
    {
        $empID = $this->input->post('empID');
        $items = $this->input->post('items[]');

        $items_list = join(',', $items);
        $check = $this->db->query("SELECT DepartmentDes AS departmentStr FROM srp_empdepartments AS emp_dep
                                 JOIN srp_departmentmaster AS dep_mas ON dep_mas.DepartmentMasterID=emp_dep.DepartmentMasterID 
                                 WHERE EmpID={$empID} AND emp_dep.DepartmentMasterID IN ({$items_list})")->result_array();

        if(!empty($check)){
            $check = implode('<br/> - ', array_column($check, 'departmentStr'));
            return ['e', 'Following departments already added for this employee.<br/> - '.$check];
        }

        $data = array();
        foreach ($items as $key => $de) {
            $data[$key]['DepartmentMasterID'] = $de;
            $data[$key]['EmpID'] = $empID;
            $data[$key]['isActive'] = 1;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['BranchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        $this->db->insert_batch('srp_empdepartments', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }

    }

    function delete_empDepartments()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isPrimary = $this->db->get_where('srp_empdepartments', ['EmpDepartmentID'=> $hidden_id])->row('isPrimary');

        if($isPrimary == 1){
            return array('e', 'You can not delete this department,<br/>since this is the primary department of this employee');
        }

        $this->db->where('EmpDepartmentID', $hidden_id)->delete('srp_empdepartments');
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Record deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }

    }
    /*End of Employee Department */


    /*Start of Employee shift*/

    function statusChangeEmpDepartments()
    {
        $empID = current_UserID();
        $hidden_id = $this->input->post('hidden-id');
        $status = $this->input->post('status');
        $companyID = current_companyID();
        $this->load->helpers('configuration_helper');
        $dataChange=getPolicyValues('APEMP', 'All');
        
        if($status == 0){
            $isPrimary = $this->db->get_where('srp_empdepartments', ['EmpDepartmentID'=> $hidden_id])->row('isPrimary');
            if($isPrimary == 1){
                return ['e', 'You can not deactivate primary department.'];
            }
        }
        if($dataChange==0){
            $this->db->where('EmpDepartmentID', $hidden_id)->update('srp_empdepartments', array('isActive' => $status));
        }
        else{
            $change=[
                'empID'=>$empID,
                'relatedColumnID'=>$hidden_id,
                'realtedColumnName'=>'EmpDepartmentID',
                'columnName'=>'isActive',
                'columnVal'=> $status,
                'approvedYN'=>0,
                'companyID'=>$companyID ,
                'timestamp'=>current_date(),
                'tableName'=>'srp_empdepartments',
            ];
            $this->db->insert('srp_erp_employeedatachanges',$change);
        }

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Status changed successfully');
        } else {
            return array('e', 'Error in status change process');
        }

    }

    function save_empShift()
    {
        $shiftID = $this->input->post('shiftID');
        $empID = $this->input->post('empID');
        $endDate = $this->input->post('endDate');
        $startDate = $this->input->post('startDate');

        $date_format_policy = date_format_policy();
        $to = date_create();
        date_modify($to, '+100 year');
        $date = date_format($to, 'Y-m-d');
        $startDate = (!empty($startDate)) ? input_format_date($startDate, $date_format_policy) : date('Y-m-d');
        $endDate = (!empty($endDate)) ? input_format_date($endDate, $date_format_policy) : $date;

        $data = array(
            'shiftID' => $shiftID,
            'empID' => $empID,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'companyID' => current_companyID(),
            'companyCode' => current_companyCode(),
            'createdPCID' => current_pc(),
            'createdUserGroup' => current_user_group(),
            'createdUserID' => current_userID(),
            'createdUserName' => current_employee(),
            'createdDateTime' => current_date()
        );

        $this->db->insert('srp_erp_pay_shiftemployees', $data);
        if ($this->db->affected_rows() > 0) {
            $autoID = $this->db->insert_id();
            return array('s', 'Employees successfully assign to the shift.', $autoID);
        } else {
            return array('e', 'Error in employees assigning to the shift.');
        }
    }

    function update_empShift()
    {
        $shiftID = $this->input->post('shiftID');
        $empID = $this->input->post('empID');
        $endDate = $this->input->post('endDate');
        $startDate = $this->input->post('startDate');
        $editID = $this->input->post('editID');
        $date_format_policy = date_format_policy();

        $to = date_create();
        date_modify($to, '+100 year');
        $date = date_format($to, 'Y-m-d');
        $startDate = (!empty($startDate)) ? input_format_date($startDate, $date_format_policy) : date('Y-m-d');
        $endDate = (!empty($endDate)) ? input_format_date($endDate, $date_format_policy) : $date;

        $data = array(
            'shiftID' => $shiftID,
            'empID' => $empID,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );


        $this->db->where('autoID', $editID)->update('srp_erp_pay_shiftemployees', $data);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Employees shift updated successfully.');
        } else {
            return array('e', 'Error in employees assigning to the shift.');
        }
    }

    function save_attendanceData()
    {
        $empID = $this->input->get('empID');
        //$empMachineID = $this->input->post('empMachineID');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $overTimeGroup = $this->input->post('overTimeGroup');
        //$floorID = $this->input->post('floorID');
        //$deviceID = $this->input->post('deviceID');
        $isMobileCheckIn = $this->input->post('isMobileCheckIn');
        $isCheckIn = $this->input->post('isCheckIn');
        $isNoPayAbsent = $this->input->post('isNoPayAbsent');
        $isLeaveGroupChangeConfirmed = $this->input->post('isLeaveGroupChangeConfirmed');
        $companyID = current_companyID();
        $dateTime = current_date();

        /* $data = array(
            'leaveGroupID' => $leaveGroupID, 'isCheckin' => $isCheckIn, 'empMachineID' => $empMachineID,
            'floorID' => $floorID, 'deviceID' => $deviceID, 'overTimeGroup' => $overTimeGroup,
            'isMobileCheckIn' => ($isMobileCheckIn == 1)? 1: 0,
            'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime
        ); */
        //(SME-2886) 
        $data = array(
            'leaveGroupID' => $leaveGroupID, 'isCheckin' => $isCheckIn, 
            'overTimeGroup' => $overTimeGroup,
            'isMobileCheckIn' => ($isMobileCheckIn == 1)? 1: 0,
            'isNoPayAbsent' => ($isNoPayAbsent == 1)? 1: 0,
            'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime
        );

        $where = array('EIdNo' => $empID, 'Erp_companyID' => $companyID);

        $this->db->trans_start();

        $this->db->where($where)->update('srp_employeesdetails', $data);

        $changeHistoryID = 0;
        if ($isLeaveGroupChangeConfirmed == 1) {
            $changeHistory = array(
                'empID' => $empID,
                'leaveGroupID' => $leaveGroupID,
                'companyID' => $companyID,
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_leavegroupchangehistory', $changeHistory);
            $changeHistoryID = $this->db->insert_id();
        }


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Attendance details updated successfully.', 'isLeaveGroupChangeConfirmed' => $isLeaveGroupChangeConfirmed, 'changeHistoryID' => $changeHistoryID);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in attendance details update process.');
        }

    }

    function delete_empShift()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT floorID FROM srp_employeesdetails WHERE floorID={$hidden_id}")->row('floorID');

        if (empty($isInUse)) {
            $this->db->where('autoID', $hidden_id)->delete('srp_erp_pay_shiftemployees');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        } else {
            return array('e', 'This record is in use, you can not delete this.');
        }

    }
    /*End of Employee shift*/

    /*Start of Employee Bank*/
    function save_empBank()
    {

        $bankCode = $this->input->post('bankCode');
        $bankName = $this->input->post('bankName');
        $swiftCode = $this->input->post('swiftCode');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT bankName FROM srp_erp_pay_bankmaster WHERE companyID={$companyID} AND bankName='$bankName' ")->row('bankName');

        if (isset($isExist)) {
            return array('e', 'This bank is already Exists');
        } else {

            $data = array(
                'bankCode' => $bankCode,
                'bankName' => $bankName,
                'bankSwiftCode' => $swiftCode,
                'companyID' => $companyID,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_pay_bankmaster', $data);
            if ($this->db->affected_rows() > 0) {
                $insertID = $this->db->insert_id();
                return array('s', 'Bank created successfully.', $insertID);
            } else {
                return array('e', 'Error in bank create');
            }
        }

    }

    function update_empBank()
    {
        $bankCode = $this->input->post('bankCode');
        $bankName = $this->input->post('bankName');
        $swiftCode = $this->input->post('swiftCode');
        $bankID = $this->input->post('hiddenID');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT bankID, bankName FROM srp_erp_pay_bankmaster WHERE companyID={$companyID} AND bankName='$bankName' ")->row_array();

        if (isset($isExist)) {
            if ($isExist['bankID'] != $bankID) {
                return array('e', 'This bank is already Exists');
            }
        }

        $data = array(
            'bankCode' => $bankCode,
            'bankName' => $bankName,
            'bankSwiftCode' => $swiftCode,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $this->db->where('bankID', $bankID)->update('srp_erp_pay_bankmaster', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Bank details updated successfully', $bankID);
        } else {
            return array('e', 'Error in bank details updated');
        }
    }

    function delete_empBank()
    {
        $bankID = $this->input->post('hiddenID');

        $isInUse = $this->db->query("SELECT bankID FROM srp_erp_pay_salaryaccounts WHERE bankID={$bankID} ")->row('bankID');

        if (!empty($isInUse)) {
            return array('e', 'This bank is in use');
        } else {

            $this->db->where('bankID', $bankID)->delete('srp_erp_pay_bankmaster');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Bank deleted successfully.');
            } else {
                return array('e', 'Error in bank delete process');
            }
        }
    }

    function save_empBranchBank()
    {

        $bankID = $this->input->post('bankID');
        $branchName = $this->input->post('branchName');
        $branchCode = $this->input->post('branchCode');
        $country = $this->input->post('country');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT branchName FROM srp_erp_pay_bankbranches WHERE companyID={$companyID}
                                 AND bankID={$bankID} AND branchName='$branchName' ")->row('branchName');

        if (isset($isExist)) {
            return array('e', 'This branch description is already Exists');
        } else {

            $data = array(
                'bankID' => $bankID,
                'branchCode' => $branchCode,
                'branchName' => $branchName,
                'companyID' => $companyID,
                'country'=>$country,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_pay_bankbranches', $data);
            if ($this->db->affected_rows() > 0) {
                $insertID = $this->db->insert_id();
                return array('s', 'Branch created successfully.', $insertID);
            } else {
                return array('e', 'Error in branch create');
            }
        }

    }

    function update_empBranchBank()
    {

        $bankID = $this->input->post('bankID');
        $branchCode = $this->input->post('branchCode');
        $branchName = $this->input->post('branchName');
        $branchD = $this->input->post('hiddenID');
        $companyID = current_companyID();
        $country = $this->input->post('country');

        $isExist = $this->db->query("SELECT branchID, branchName FROM srp_erp_pay_bankbranches WHERE companyID={$companyID}
                                 AND bankID={$bankID} AND branchName='$branchName' ")->row_array();

        if (isset($isExist)) {
            if ($isExist['branchID'] != $branchD) {
                return array('e', 'This branch description is already Exists');
            }
        }

        $data = array(
            'branchCode' => $branchCode,
            'branchName' => $branchName,
            'country'=>$country,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $this->db->where('branchID', $branchD)->update('srp_erp_pay_bankbranches', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Branch details updated successfully', $branchD);
        } else {
            return array('e', 'Error in branch details updated');
        }
    }
    /*End of Employee Bank*/


    /*Start of Over time*/

    function delete_empBranchBank()
    {
        $branchID = $this->input->post('hiddenID');

        $isInUse = $this->db->query("SELECT branchID FROM srp_erp_pay_salaryaccounts WHERE branchID={$branchID} ")->row('branchID');

        if (!empty($isInUse)) {
            return array('e', 'This branch is in use');
        } else {

            $this->db->where('branchID', $branchID)->delete('srp_erp_pay_bankbranches');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Branch deleted successfully.');
            } else {
                return array('e', 'Error in branch delete process');
            }
        }
    }

    function saveOTCat()
    {
        $description = trim($this->input->post('description') ?? '');
        $masterCat = $this->input->post('masterCat');
        $salaryCategoryID = $this->input->post('salaryCategoryID');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT description FROM srp_erp_pay_overtimecategory WHERE companyID={$companyID} AND description='$description' ")->row('description');

        if (isset($isExist)) {
            return array('e', 'This category is already exist');
        } else {

            $data = array(
                'OTMasterID' => $masterCat,
                'description' => $description,
                'companyID' => $companyID,
                'salaryCategoryID' => $salaryCategoryID,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_pay_overtimecategory', $data);
            if ($this->db->affected_rows() > 0) {
                $insertID = $this->db->insert_id();
                return array('s', 'OT category created successfully.', $insertID);
            } else {
                return array('e', 'Error in OT category create');
            }
        }
    }

    function editOTCat()
    {
        $description = trim($this->input->post('description') ?? '');
        $masterCat = $this->input->post('masterCat');
        $catID = $this->input->post('editID');
        $salaryCategoryID = $this->input->post('salaryCategoryID');
        $companyID = current_companyID();


        $isExist = $this->db->query("SELECT ID, description FROM srp_erp_pay_overtimecategory WHERE companyID={$companyID} AND description='$description' ")->row_array();

        if (isset($isExist)) {
            if ($isExist['ID'] != $catID) {
                return array('e', 'This description is already exist');
                exit;
            }
        }

        $data = array(
            'OTMasterID' => $masterCat,
            'description' => $description,
            'salaryCategoryID' => $salaryCategoryID,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $this->db->where('ID', $catID)->update('srp_erp_pay_overtimecategory', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'OT details updated successfully', $catID);
        } else {
            return array('e', 'Error in OT details updated');
        }
    }
    /*End of Over time*/


    /*Start of Over time Group Master*/

    function deleteOTCat()
    {
        $overTimeID = $this->input->post('hiddenID');

        $isInUse = $this->db->query("SELECT overTimeID FROM srp_erp_pay_overtimegroupdetails WHERE overTimeID={$overTimeID} ")->row('overTimeID');

        if (!empty($isInUse)) {
            return array('e', 'This category is in use');
        } else {

            $this->db->where('ID', $overTimeID)->delete('srp_erp_pay_overtimecategory');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Category deleted successfully.');
            } else {
                return array('e', 'Error in category delete process');
            }
        }
    }

    function save_OTGroupMaster()
    {
        $description = trim($this->input->post('description') ?? '');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT description FROM srp_erp_pay_overtimegroupmaster WHERE companyID={$companyID} AND description='$description' ")->row('description');

        if (isset($isExist)) {
            return array('e', 'This description is already exist');
        } else {

            $data = array(
                'description' => $description,
                'companyID' => $companyID,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_pay_overtimegroupmaster', $data);
            if ($this->db->affected_rows() > 0) {
                $insertID = $this->db->insert_id();
                $response = array(
                    'groupID' => $insertID,
                    'description' => $description
                );
                return array('s', 'OT group master created successfully.', $insertID, $response);
            } else {
                return array('e', 'Error in OT group master create');
            }
        }
    }

    function edit_OTGroupMaster()
    {
        $description = trim($this->input->post('description') ?? '');
        $catID = $this->input->post('editID');
        $companyID = current_companyID();


        $isExist = $this->db->query("SELECT groupID, description FROM srp_erp_pay_overtimegroupmaster WHERE companyID={$companyID} AND description='$description' ")->row_array();

        if (isset($isExist)) {
            if ($isExist['groupID'] != $catID) {
                return array('e', 'This description is already exist');
                exit;
            }
        }

        $data = array(
            'description' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $this->db->where('groupID', $catID)->update('srp_erp_pay_overtimegroupmaster', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'OT group master description updated successfully', $catID);
        } else {
            return array('e', 'Error in OT group master description updated');
        }
    }

    function delete_OTGroupMaster()
    {
        $overTimeID = $this->input->post('catID');

        $isInUse = $this->db->query("SELECT overTimeGroup FROM srp_employeesdetails WHERE overTimeGroup={$overTimeID} ")->row('overTimeGroup');

        if (!empty($isInUse)) {
            return array('e', 'This group master assign to the employee or employees\'s, <br/>You can not delete this.');
        } else {

            $this->db->where('groupID', $overTimeID)->delete('srp_erp_pay_overtimegroupmaster');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Category deleted successfully.');
            } else {
                return array('e', 'Error in category delete process');
            }
        }
    }

    function save_OTGroupDet()
    {
        $groupID = trim($this->input->post('groupID') ?? '');
        $description = $this->input->post('description');
        $OT_ID = $this->input->post('OT_ID');
        // $glCode_arr = $this->input->post('glCode');
        $groupDetID_arr = $this->input->post('groupDetID');
        $formula_arr = $this->input->post('formulaOriginal');


        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $pcID = current_pc();
        $userID = current_userID();
        $userName = current_employee();
        $userGroup = current_user_group();
        $currentDate = current_date();

        $this->db->trans_start();

        $masterData = array(
            'description' => $description,
            'modifiedPCID' => $userID,
            'modifiedUserID' => $pcID,
            'modifiedDateTime' => $currentDate,
            'modifiedUserName' => $userName
        );

        $this->db->where('groupID', $groupID)->update('srp_erp_pay_overtimegroupmaster', $masterData);

        if (!empty($OT_ID)) {
            foreach ($OT_ID as $key => $row) {
                $isExist = null;
                $groupDetID = $groupDetID_arr[$key];
                // $glCode = $glCode_arr[$key];

                if (!empty($groupDetID)) {
                    $isExist = $this->db->query("SELECT overTimeID FROM srp_erp_pay_overtimegroupdetails WHERE companyID={$companyID} AND
                                             groupID={$groupID} AND groupDetailID={$groupDetID}")->row('overTimeID');
                }


                $data = array(
                    /*'glCode' => $glCode,*/
                    'formula' => $formula_arr[$key],
                );

                if ($isExist != null) {
                    $data['overTimeID'] = $row;
                    $data['modifiedPCID'] = $pcID;
                    $data['modifiedUserID'] = $userID;
                    $data['modifiedUserName'] = $userName;
                    $data['modifiedDateTime'] = $currentDate;

                    $this->db->where('groupDetailID', $groupDetID)->update('srp_erp_pay_overtimegroupdetails', $data);
                } else {
                    $data['overTimeID'] = $row;
                    $data['groupID'] = $groupID;
                    $data['companyID'] = $companyID;
                    $data['companyCode'] = $companyCode;
                    $data['createdPCID'] = $pcID;
                    $data['createdUserID'] = $userID;
                    $data['createdUserName'] = $userName;
                    $data['createdUserGroup'] = $userGroup;
                    $data['createdDateTime'] = $currentDate;

                    $this->db->insert('srp_erp_pay_overtimegroupdetails', $data);
                }

            }
        }

        $this->db->trans_complete();

        if ($this->db->trans_status() === true) {
            $this->db->trans_commit();
            $responseData = array(
                'groupID' => $groupID,
                'description' => trim($description)
            );
            return array('s', 'Record saved successfully', $responseData);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in process');
        }
    }

    function delete_OTGroupDetail()
    {
        $overTimeID = $this->input->post('groupDet_ID');

        $this->db->where('groupDetailID', $overTimeID)->delete('srp_erp_pay_overtimegroupdetails');
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Category deleted successfully.');
        } else {
            return array('e', 'Error in category delete process');
        }

    }

    /*End of Over time Group Master*/


    function getEmployees()
    {
        //$this->db->select('EIdNo, ECode, IFNULL(Ename1,""), IFNULL(Ename2,""), IFNULL(Ename3,""), IFNULL(Ename4,""), DesDescription, EmpImage, currencyID, CurrencyCode, DecimalPlaces');
        $this->db->select('EIdNo, ECode, IFNULL(Ename1,"") Ename1, IFNULL(Ename2,"") Ename2, IFNULL(Ename3,"") Ename3, IFNULL(Ename4,"") Ename4, DesDescription, EmpImage, currencyID, CurrencyCode, DecimalPlaces, ');
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID', 'left');
        $this->db->join('srp_erp_currencymaster AS cur', 'cur.currencyID = srp_employeesdetails.payCurrencyID');
        $this->db->where("srp_employeesdetails.Erp_companyID", current_companyID());
        $this->db->where("srp_employeesdetails.isPayrollEmployee", 1);
        $this->db->order_by("Ename1");
        $query = $this->db->get();
        return $query->result();
    }

    function employeeData($empID = null)
    {
        $empID = ($empID == null) ? $this->input->post('empID') : $empID;
        $this->db->select('EIdNo, ECode, IFNULL(Ename1,"") Ename1, IFNULL(Ename2,"") Ename2, IFNULL(Ename3,"") Ename3, IFNULL(Ename4,"") Ename4, DesDescription, EmpImage');
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID', 'left');
        $this->db->join('srp_erp_currencymaster AS cur', 'cur.currencyID = srp_employeesdetails.payCurrencyID', 'left');
        $this->db->where("EIdNo", $empID);
        $query = $this->db->get();
        return $query->row();
    }

    function search($keyword)
    {
        $com = $this->common_data['company_data']['company_id'];
        $where = "(Ename1 LIKE '%$keyword%' OR Ename2 LIKE '%$keyword%' OR Ename3 LIKE '%$keyword%' OR Ename4 LIKE '%$keyword%' OR ECode LIKE '%$keyword%' ";
        $where .= "OR DesDescription  LIKE '%$keyword%') AND srp_employeesdetails.Erp_companyID='$com' AND isPayrollEmployee=1";

        $this->db->select('EIdNo, ECode, IFNULL(Ename1,"") Ename1, IFNULL(Ename2,"") Ename2, IFNULL(Ename3,"") Ename3, IFNULL(Ename4,"") Ename4,, DesDescription');
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID');
        $this->db->where($where);
        $query = $this->db->get();
        return $query->result();
    }

    function searchInEmpLoan($keyword)
    {
        $com = $this->common_data['company_data']['company_id'];
        $where = "(Ename1 LIKE '%$keyword%' OR Ename2 LIKE '%$keyword%' OR Ename3 LIKE '%$keyword%' OR Ename4 LIKE '%$keyword%' OR ECode LIKE '%$keyword%' ";
        $where .= "OR DesDescription  LIKE '%$keyword%') AND srp_employeesdetails.Erp_companyID='$com'";
        $where .= "AND salary.confirmedYN=1 AND isDischarged=0";

        //$con = "IFNULL(Ename1, ''),' ', IFNULL(Ename2, ''),' ',IFNULL(Ename3, ''),' ',IFNULL(Ename4, '') '  |  ', DesDescription , '    |   ', ECode";
        $con = "IFNULL(Ename2, ''), '    |   ', DesDescription, '    |   ', ECode";

        $this->db->select("EIdNo, ECode, IFNULL(Ename2, '') Ename2, DesDescription, payCurrency, payCurrencyID, DecimalPlaces, CONCAT(" . $con . ") AS 'Match'");
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_erp_pay_salarydeclartion AS salaryDec', 'srp_employeesdetails.EIdNo = salaryDec.employeeNo');
        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID');
        $this->db->join('srp_erp_pay_salarydeclartion AS salary', 'salary.employeeNo = EIdNo');
        $this->db->join('srp_erp_currencymaster AS cu_master', 'cu_master.CurrencyCode = srp_employeesdetails.payCurrency ', 'left');
        //$this->db->join('srp_erp_leavegroup', 'srp_employeesdetails.leaveGroupID=srp_erp_leavegroup.leaveGroupID', 'INNER');  //shahmy
        $this->db->where($where);
        $this->db->group_by('salaryDec.employeeNo');
        $query = $this->db->get();
        return $query->result();
    }

    function loadEmpDeclarations($empID)
    {
        $this->db->select('id, srp_erp_pay_salarycategories.salaryCategoryID, salaryDescription, amount, salaryCategoryType, effectiveDate, percentage AS per, confirmedYN');
        $this->db->from('srp_erp_pay_salarydeclartion');
        $this->db->join('srp_erp_pay_salarycategories', 'srp_erp_pay_salarycategories.salaryCategoryID = srp_erp_pay_salarydeclartion.salaryCategoryID');
        $this->db->where('employeeNo', $empID);
        $this->db->order_by('effectiveDate', 'ASC');
        $query = $this->db->get();

        return $query->result();
    }

    function loadEmpDeclarations_nonPayroll($empID)
    {
        $this->db->select('id, srp_erp_pay_salarycategories.salaryCategoryID, salaryDescription, amount, salaryCategoryType, effectiveDate,
                           percentage AS per,  transactionCurrency, confirmedYN');
        $this->db->from('srp_erp_non_pay_salarydeclartion');
        $this->db->join('srp_erp_pay_salarycategories', 'srp_erp_pay_salarycategories.salaryCategoryID = srp_erp_non_pay_salarydeclartion.salaryCategoryID');
        $this->db->where('employeeNo', $empID);
        $this->db->order_by('effectiveDate', 'ASC');
        $query = $this->db->get();

        return $query->result();
    }

    function deleteSalaryDec($deleteID)
    {
        $isConfirmed = $this->isAlreadyConformedDec($deleteID);

        if ($isConfirmed->confirmedYN == 0) {
            $this->db->delete('srp_erp_pay_salarydeclartion', array('id' => $deleteID));

            if ($this->db->affected_rows() > 0) {
                return array('s', 'Delete successfully');
            } else {
                return array('e', 'Failed to delete record');
            }
        } else {
            return array('e', 'This record all ready confirmed, you can not delete this.');
        }

    }

    function isAlreadyConformedDec($deleteID)
    {
        $query = $this->db->where('id', $deleteID)
            ->select('confirmedYN')
            ->from('srp_erp_pay_salarydeclartion')
            ->get();
        return $query->row();
    }

    function saveBankAccount($data)
    {
        $this->db->insert('srp_erp_pay_salaryaccounts', $data);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Salary Account Saved');
        } else {
            return array('e', 'Please try again');
        }
    }

    function loadEmpBankAccount($empID)
    {
        return $this->db->query("SELECT bnk.bankID, bankName, accountNo, toBankPercentage, accountHolderName, acc.id,
                                 acc.isActive, acc.isPrimary, bnk.bankSwiftCode, branchName, brn.branchID,acc.swiftcode,acc.ibancode
                                 FROM srp_erp_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE employeeNo = {$empID}")->result_array();

    }

    function loadLoan($empID)
    {
        $companyID = $this->common_data['company_data']['company_id'];
        return $this->db->query("
        SELECT emp.Ename2,loan.ID,loan.numberOfInstallment,loan.loanCode, loan.amount,loan.loanDate,loan.loanDescription,loan.confirmedYN,loan.approvedYN,COUNT(CASE WHEN loan_sch.isSetteled = 0 THEN 1 ELSE NULL END) AS settledInstallments,loan_cat.description AS loantype
        FROM srp_erp_pay_emploan AS loan
        JOIN srp_employeesdetails AS emp ON emp.EIdNo = loan.empID
        JOIN srp_erp_pay_loan_category AS loan_cat ON loan_cat.loanID = loan.loanCatID
        LEFT JOIN srp_erp_pay_emploan_schedule AS loan_sch ON loan_sch.loanID = loan.ID
        WHERE loan.companyID = $companyID
        AND loan_sch.isSetteled != 1
        AND emp.EIdNo = $empID
        GROUP BY loan.ID")->result_array();
    }

    function loadEmpNonBankAccount($empID)
    {
        return $this->db->query("SELECT bnk.bankID, bankName, accountNo, toBankPercentage, accountHolderName, acc.id,
                                 acc.isActive, bnk.bankSwiftCode, branchName, brn.branchID,acc.swiftcode
                                 FROM srp_erp_non_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE employeeNo = {$empID}")->result_array();

    }

    function updateBankAccount($data, $id)
    {
        $this->db->update('srp_erp_pay_salaryaccounts', $data, 'id=' . $id);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Bank account Updated');
        } else {
            return array('e', 'Error in Bank account Update process');
        }
    }

    function inactiveBankAccount($data, $deleteID)
    {
        $this->db->update('srp_erp_pay_salaryaccounts', $data, 'id=' . $deleteID);

        if ($this->db->affected_rows() > 0) {
            return 'Inactivated';
        } else {
            return 'Error';
        }
    }

    function save_monthAddition($monthType)
    {
        $this->form_validation->set_rules('monthDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            return array('e', validation_errors());
        } else {
            $payroll_group = $this->input->post('p_group');
            $description = $this->input->post('monthDescription');
            $payrollType = trim($this->input->post('payrollType') ?? '');
            $deductionType = trim($this->input->post('deductionType') ?? '');
            $isPullFromAttandance = trim($this->input->post('isPullFromAttandance') ?? '');
            $date_format_policy = date_format_policy();
            $datDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($datDsc, $date_format_policy);
            $current_date = current_date();

            if ($monthType == 'MA') {
                $tableName = 'srp_erp_pay_monthlyadditionsmaster';
                $orderByID = 'monthlyAdditionsMasterID';
                $monthlyCode = 'monthlyAdditionsCode';
                $dateField = 'dateMA';
                $msg = 'Monthly Addition';
            } elseif ($monthType == 'MD') {
                $tableName = 'srp_erp_pay_monthlydeductionmaster';
                $orderByID = 'monthlyDeductionMasterID';
                $monthlyCode = 'monthlyDeductionCode';
                $dateField = 'dateMD';
                $msg = 'Monthly Deduction';
            }

            //Get last no
            $query = $this->db->select('serialNo')
                ->from($tableName)
                ->where('companyID', current_companyID())
                ->order_by($orderByID, 'desc')
                ->get();
            $lastAddArray = $query->row_array();
            $additionNo = $lastAddArray['serialNo'];
            $additionNo = ($additionNo == null) ? 1 : $lastAddArray['serialNo'] + 1;


            //Generate Code
            $this->load->library('sequence');
            $additionCode = $this->sequence->sequence_generator($monthType, $additionNo);


            $data = array(
                $monthlyCode => $additionCode,
                'serialNo' => $additionNo,
                'documentID' => $monthType,
                'payrollGroup' => $payroll_group,
                'description' => $description,
                $dateField => $dateDesc,
                'isNonPayroll' => $payrollType,
                'confirmedYN' => 0,
                'isProcessed' => 0,
                'currency' => $this->common_data['company_data']['company_default_currency'],
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => $current_date
            );

            if ($monthType == 'MA') {
                $data['typeID'] = $this->input->post('systemType');
                $data['pullType'] = $isPullFromAttandance;
                // $isPullFromAttandance 
            }else{
                $data['deductionType'] = $deductionType;
            }

            $this->db->insert($tableName, $data);

            if ($this->db->affected_rows() > 0) {
                $insert_id = $this->db->insert_id();
                return array('s', $msg . '[ ' . $additionCode . ' ] Insert successfully', $insert_id);
            } else {
                return (array('s', 'Failed to insert record' . $msg));
            }


        }

    }

    function empMonthAddition_printData($monthType, $id)
    {
        if ($monthType == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterID = 'monthlyAdditionsMasterID';
        } elseif ($monthType == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterID = 'monthlyDeductionMasterID';
        }

        $con = "IFNULL(Ename2, '')";
        $this->db->select('ECode, CONCAT(' . $con . ') AS empName, transactionCurrency, transactionAmount,
                          transactionCurrencyDecimalPlaces dPlace, description, declarationTB.monthlyDeclaration AS declarationDes')
            ->from($tableName)
            ->join('srp_employeesdetails AS empTB', $tableName . '.empID=empTB.EIdNo')
            ->join('srp_erp_pay_monthlydeclarationstypes AS declarationTB', $tableName . '.declarationID=declarationTB.monthlyDeclarationID')
            ->where($masterID, $id)
            ->order_by('transactionCurrency');

        return $this->db->get()->result_array();
    }

    function delete_monthAddition($type)
    {
        $delID = $this->input->post('delID');

        if ($type == 'Addition' || $type == 'Deduction') {
            if ($type == 'Addition') {
                $tableName = 'srp_erp_pay_monthlyadditionsmaster';
                $tableDetail = 'srp_erp_pay_monthlyadditiondetail';
                $monthID = 'monthlyAdditionsMasterID';
            } elseif ($type == 'Deduction') {
                $tableName = 'srp_erp_pay_monthlydeductionmaster';
                $tableDetail = 'srp_erp_pay_monthlydeductiondetail';
                $monthID = 'monthlyDeductionMasterID';
            }

            $isConfirmed = $this->isAlreadyConformed($tableName, $monthID, $delID);
            $deleteArray = array($monthID => $delID);

            if ($isConfirmed['isProcessed'] == 1) {
                return array('e', 'This ' . $type . ' is already processed, You can not delete this.');
            } else if ($isConfirmed['confirmedYN'] == 1) {
                return array('e', 'This ' . $type . ' is already confirmed, You can not delete this.');
            } else {
                $this->db->trans_start();
                $this->db->delete($tableName, $deleteArray);
                $this->db->delete($tableDetail, $deleteArray);

                $this->db->trans_complete();
                if ($this->db->trans_status() == true) {
                    $this->db->trans_commit();
                    return array('s', 'Deleted successfully');
                } else {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to delete record');
                }
            }
        } else {
            return array('e', 'Some thing went wrong');
        }
    }

    function isAlreadyConformed($tableName, $monthID, $autoID)
    {
        $query = $this->db->select('confirmedYN, isProcessed')
            ->from($tableName)
            ->where($monthID, $autoID)
            ->get();
        $result = $query->row_array();
        return $result;
    }

    function save_employeeAsTemp()
    {
        $empDet = $this->input->post('temp_empHiddenID');
        $empCurrencyID = $this->input->post('temp_empCurrencyID');
        $empCurrencyCode = $this->input->post('temp_empCurrencyCode');
        $empCurrencyDPlace = $this->input->post('temp_empCurrencyDPlace');
        $accGroupID = $this->input->post('temp_accGroupID');
        $masterID = $this->input->post('masterID');
        $type_m = $this->input->post('type_m');

        $additionType = 0;
        if ($type_m == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionsMasterID';
            $masterDet = $this->edit_monthAddition($type_m, $masterID);
            $additionType = $masterDet['typeID'];
        } elseif ($type_m == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionMasterID';
        }


        $data = array();
        $companyID = current_companyID();
        $current_date = current_date();
        $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];

        $declarations = [];
        $glCode = null;
        if ($additionType != 0) { /*If Variable pay*/
            $empIDList = implode(',', $empDet);

            $isExists = $this->db->query("SELECT CONCAT(ECode, ' - ',  Ename2) AS empName 
                            FROM srp_erp_pay_monthlyadditiondetail AS detTB
                            JOIN srp_employeesdetails AS empTB ON detTB.empID=empTB.EIdNo
                            WHERE monthlyAdditionsMasterID = {$masterID} AND empID IN ({$empIDList})")->result_array();

            // if (!empty($isExists)) {
            //     $msg = 'Following Employees already added on this document <br/>';
            //     $msg .= implode('<br/>', array_column($isExists, 'empName'));
            //     return ['e', $msg];
            // }

            $glCode = $this->db->get_where('srp_erp_pay_salarycategories', ['salaryCategoryID' => $additionType])->row('GLCode');

            $declarations = $this->db->query("SELECT empID, detailID, amount 
                                  FROM srp_erp_variablepaydeclarationdetails                                   
                                  WHERE companyID = {$companyID} 
                                  AND salaryCategoryID = {$additionType} 
                                  AND isActive = 1 AND empID IN ({$empIDList})")->result_array();

            $declarations = array_group_by($declarations, 'empID');
        }

        $tempEmpArr = [];
        $existing_emp = [];
        foreach ($empDet as $key => $emp) { /*If Variable pay*/
            if ($additionType != 0) {
                if (in_array($emp, $tempEmpArr)) {
                    $existing_emp[] = $emp;
                } else {
                    $tempEmpArr[] = $emp;
                }

                $data[$key]['categoryID'] = $additionType;
                $data[$key]['GLCode'] = $glCode;
                $data[$key]['declarationAmount'] = (!empty($declarations[$emp])) ? $declarations[$emp][0]['amount'] : 0;
                $data[$key]['declarationDetID'] = (!empty($declarations[$emp])) ? $declarations[$emp][0]['detailID'] : 0;
            }


            $trCurrencyID = $empCurrencyID[$key];
            $data[$key]['empID'] = $emp;
            $data[$key]['accessGroupID'] = $accGroupID[$key];
            $data[$key][$masterColumn] = $masterID;
            $data[$key]['transactionCurrencyID'] = $trCurrencyID;
            $data[$key]['transactionCurrency'] = $empCurrencyCode[$key];
            $data[$key]['transactionExchangeRate'] = 1;
            $data[$key]['transactionCurrencyDecimalPlaces'] = $empCurrencyDPlace[$key];

            if ($key > 0) {
                if ($trCurrencyID == $empCurrencyID[$key - 1]) {
                    $com_exchangeRate = $data[$key - 1]['companyLocalExchangeRate'];
                } else {
                    $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                    $com_exchangeRate = $com_exchangeRateData['conversion'];
                }
            } else {
                $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                $com_exchangeRate = $com_exchangeRateData['conversion'];
            }

            $data[$key]['companyLocalCurrencyID'] = $com_currencyID;
            $data[$key]['companyLocalCurrency'] = $com_currency;
            $data[$key]['companyLocalExchangeRate'] = $com_exchangeRate;
            $data[$key]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;

            $data[$key]['companyID'] = $companyID;
            $data[$key]['companyCode'] = $this->common_data['company_data']['company_code'];
            $data[$key]['createdPCID'] = $this->common_data['current_pc'];
            $data[$key]['createdUserID'] = $this->common_data['current_userID'];
            $data[$key]['createdUserName'] = $this->common_data['current_user'];
            $data[$key]['createdUserGroup'] = $this->common_data['user_group'];
            $data[$key]['createdDateTime'] = $current_date;
        }


        if (!empty($existing_emp)) { /*If Variable pay a single employee can not be add more than one time*/
            $msg = 'Following Employees selected more than one time <br/>';
            $empList = implode(',', $existing_emp);

            $empList = $this->db->query("SELECT CONCAT(ECode, ' - ', Ename2) empName  FROM 
                         srp_employeesdetails WHERE EIdNo IN ({$empList})")->result_array('empName');
            $msg .= implode('<br/>', array_column($empList, 'empName'));

            return ['e', $msg];
        }

        $this->db->trans_start();
        $this->db->insert_batch($tableName, $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to Update');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function save_empMonthlyAddition($monthType)
    {
        $updateID = trim($this->input->post('updateID') ?? '');
        $editionDet = $this->edit_monthAddition($monthType, $updateID);

        if ($editionDet['confirmedYN'] == 1) {
            return array('e', $this->input->post('updateCode') . ' is already confirmed, you can not make any change on this document.');
        }

        $additionType = 0;
        if ($monthType == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterID = 'monthlyAdditionsMasterID';
            $msg = 'Monthly Addition';
            $additionType = $editionDet['typeID'];
        } elseif ($monthType == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterID = 'monthlyDeductionMasterID';
            $msg = 'Monthly Deduction';
        }

        if (empty($this->input->post('empHiddenID'))) {
            return $this->update_monthAddition($monthType);
        }
        else {

            $this->form_validation->set_rules('empHiddenID[]', 'Employee', 'trim|required');

            if ($this->input->post('isConform') == 1) {
                if ($additionType == 0) {
                    $this->form_validation->set_rules('amount[]', 'Amount/s', 'trim|required');
                    $this->form_validation->set_rules('declarationID[]', 'Description/s', 'trim|required');
                } else {  //If variable payment
                    $this->form_validation->set_rules('no_of_units[]', 'No Of Units', 'trim|required');
                }
            }

            if ($this->form_validation->run() == FALSE) {
                return ['e', validation_errors()];
            } else {
                $masterUpdate = $this->update_monthAddition($monthType);

                if ($masterUpdate[0] == 's') {

                    $this->db->trans_start();
                    $this->db->where($masterID, $updateID)->delete($tableName);

                    $com_currency = $this->common_data['company_data']['company_default_currency'];
                    $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
                    $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
                    $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];

                    $empHiddenID = $this->input->post('empHiddenID');
                    $empCurrencyDPlace = $this->input->post('empCurrencyDPlace');
                    $empCurrencyCode = $this->input->post('empCurrencyCode');
                    $description = $this->input->post('description');
                    $declarationID = $this->input->post('declarationID');
                    $HGLCode = $this->input->post('h-glCode');
                    $categoryID = $this->input->post('h-category');
                    $amount = $this->input->post('amount');
                    $updateCode = $this->input->post('updateCode');
                    $accGroupID = $this->input->post('empAccGroupID');
                    $payUnit = $this->input->post('no_of_units');
                    $payRate = $this->input->post('amount_rate');
                    $description = $this->input->post('description');
                    $current_date = current_date();

                    $unit = $this->input->post('unit');
                    $decDetID = $this->input->post('decDetID');
                    $decAmount = $this->input->post('decAmount');

                    // $variableGL = null;
                    // if ($additionType != 0) { //If variable payment
                    //     $variableGL = $this->db->get_where('srp_erp_pay_salarycategories', ['salaryCategoryID' => $additionType])->row('GLCode');
                    // }


                    $i = 0;
                    $data = array();

                 
                    foreach ($empHiddenID as $empID) {

                        $tr_amount = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                        $localCon = currency_conversion($empCurrencyCode[$i], $com_currency, $tr_amount);
                        $reportCon = currency_conversion($empCurrencyCode[$i], $com_repCurrency, $tr_amount);
                        $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currDPlace) : round($tr_amount, $com_currDPlace);
                        $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);

                        $data[$i]['empID'] = $empID;
                        $data[$i]['accessGroupID'] = $accGroupID[$i];
                        $data[$i][$masterID] = $updateID;


                        if ($additionType == 0) { // not variable pay
                            $data[$i]['description'] = $description[$i];
                            $data[$i]['declarationID'] = $declarationID[$i];
                            $data[$i]['categoryID'] = $categoryID[$i];
                            $data[$i]['GLCode'] = $HGLCode[$i];
                            $data[$i]['payRate'] = $payRate[$i];
                            $data[$i]['payUnit'] = $payUnit[$i];
                            $data[$i]['description'] = $description[$i];
                        } else { // variable pay
                            $data[$i]['GLCode'] = $HGLCode[$i];
                            $data[$i]['noOfUnits'] = isset($unit[$i]) ? $unit[$i] : 0;
                            $data[$i]['declarationID'] = $declarationID[$i];
                            $data[$i]['categoryID'] = $categoryID[$i];
                            $data[$i]['declarationDetID'] = isset($decDetID[$i]) ? $decDetID[$i] : 0;
                            $data[$i]['declarationAmount'] = isset($decAmount[$i]) ? $decAmount[$i] : 0;
                            $data[$i]['payRate'] = $payRate[$i];
                            $data[$i]['payUnit'] = $payUnit[$i];
                            $data[$i]['description'] = $description[$i];
                        }

                        $data[$i]['transactionCurrencyID'] = $localCon['trCurrencyID'];
                        $data[$i]['transactionCurrency'] = $empCurrencyCode[$i];
                        $data[$i]['transactionExchangeRate'] = 1;
                        $data[$i]['transactionAmount'] = $tr_amount;
                        $data[$i]['transactionCurrencyDecimalPlaces'] = $empCurrencyDPlace[$i];
                        $data[$i]['companyLocalCurrencyID'] = $localCon['currencyID'];
                        $data[$i]['companyLocalCurrency'] = $com_currency;
                        $data[$i]['companyLocalExchangeRate'] = $localCon['conversion'];
                        $data[$i]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                        $data[$i]['companyLocalAmount'] = $localAmount;
                        $data[$i]['companyReportingCurrencyID'] = $reportCon['currencyID'];
                        $data[$i]['companyReportingCurrency'] = $com_repCurrency;
                        $data[$i]['companyReportingAmount'] = $reportAmount;
                        $data[$i]['companyReportingExchangeRate'] = $reportCon['conversion'];
                        $data[$i]['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;
                        $data[$i]['companyID'] = $this->common_data['company_data']['company_id'];
                        $data[$i]['companyCode'] = $this->common_data['company_data']['company_code'];
                        $data[$i]['createdPCID'] = $this->common_data['current_pc'];
                        $data[$i]['createdUserID'] = $this->common_data['current_userID'];
                        $data[$i]['createdUserName'] = $this->common_data['current_user'];
                        $data[$i]['createdUserGroup'] = $this->common_data['user_group'];
                        $data[$i]['createdDateTime'] = $current_date;
                        $i++;
                    }


                    $this->db->insert_batch($tableName, $data);
                    $this->db->trans_complete();

                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        return array('s', 'Failed to Update [ ' . $updateCode . ' ] ' . $msg);
                    } else {
                        $this->db->trans_commit();
                        return array('s', $msg . '[ ' . $updateCode . ' ] Updated successfully');
                    }
                } else {
                    return $masterUpdate;
                }
            }
        }
    }

    function edit_monthAddition($type, $id = 0)
    {
        $editID = $this->input->post('editID');
        $editID = ($editID == null) ? $id : $editID;
        $id = (isset($editID)) ? $editID : $this->input->post('updateID');
        $convertFormat = convert_date_format_sql();
        if ($type == 'MA' || $type == 'MD') {
            $sysType = '';
            if ($type == 'MA') {
                $tableName = 'srp_erp_pay_monthlyadditionsmaster';
                $monthID = 'monthlyAdditionsMasterID';
                $monthlyCode = 'monthlyAdditionsCode, pullType,monthlyAdditionsMasterID';
                $dateField = 'DATE_FORMAT(dateMA,\'' . $convertFormat . '\') AS dateMA ';
                $sysType = ', typeID';
            } elseif ($type == 'MD') {
                $tableName = 'srp_erp_pay_monthlydeductionmaster';
                $monthID = 'monthlyDeductionMasterID';
                $monthlyCode = 'monthlyDeductionCode,monthlyDeductionMasterID,deductionType';
                $dateField = 'DATE_FORMAT(dateMD,\'' . $convertFormat . '\') AS dateMD ';
            }

            $query = $this->db->select("{$monthlyCode}, payrollGroup, description,documentID, confirmedYN, approvedYN, isNonPayroll, isProcessed, {$dateField} {$sysType}")
                ->from($tableName)
                ->where($monthID, $id)
                ->get();

            return $query->row_array();
        } else {
            return array('e', 'Some thing went wrong');
        }

    }

    function generate_monthlyAdditionAttandance(){

        $monthlyAdditionsMasterID = trim($this->input->post('monthlyAdditionsMasterID') ?? '');
        $additionDetails = $this->edit_monthAddition('MA',$monthlyAdditionsMasterID);
        $current_date = current_date();

        if($additionDetails){

            $dateMA = $additionDetails['dateMA'];

            $absentAsNoPay = getPolicyValues('HANOP','All');
            $attendanceCycleDay = getPolicyValues('HACDAY','All');
    
            if($absentAsNoPay == 1){
    
                $last_month = date('Y-m-d',strtotime('-1 month',strtotime($dateMA)));
                $current_month = date('Y-m-d',strtotime($dateMA));

                $dateFrom = substr($last_month, 0, -2).($attendanceCycleDay + 1);
                $dateTo = substr($current_month, 0, -2).($attendanceCycleDay + 1);
    
            }else{

                $dateFrom = date('Y-m-01',strtotime($dateMA));
                $dateTo = date('Y-m-30',strtotime($dateMA));

            }

            $get_detailsViews = get_empApprovedView($dateFrom,$dateTo);

            $com_currency = $this->common_data['company_data']['company_default_currency'];
            $com_currency_id = $this->common_data['company_data']['company_default_currencyID'];
            $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
            $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
            $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
            $com_repCurrency_id = $this->common_data['company_data']['company_reporting_currencyID'];
            $selection_arr = array();

       

            foreach($get_detailsViews as $detail){

                $empattendancereviewID = $detail['ID'];
                $empID = $detail['empID'];
                $variable_pay = get_variable_payRecords($empattendancereviewID);

                if($variable_pay){
                    $selection_arr[] = $variable_pay;
                }
                
                // if(empty($variable_pay)){
                //     continue;
                // }
            

                foreach($variable_pay as $variable){

                    $monthlyDeclarationID = $variable['monthlyDeclarationID'];
                    $unitRate = $variable['value'];
                    $calType = $variable['calType'];
                    $unit_default = 1;
                    $payUnit = 1;
                    if($calType == 2){
                        $payUnit = $unitRate;
                    }else{
                        $temp_unit = explode(':',$unitRate);
                        $payUnit = $temp_unit[0] + round((($temp_unit[1]/60)),2);
                    }

                    $monthlyDeclarationDetail = get_pay_monthlydeclarationstypes_by_id($monthlyDeclarationID,1);

                    $setup_details = fetch_variable_declaration_emp($empID,$monthlyDeclarationID);

                    $data = array();

                    $data['monthlyAdditionsMasterID'] = $additionDetails['monthlyAdditionsMasterID'];
                    $data['empID'] = $empID;
                    $data['description'] = 'Date - '.$variable['attendanceDate'];
                    $data['declarationID'] = $monthlyDeclarationID;
                    $data['GLCode'] = $monthlyDeclarationDetail['expenseGLCode'];
                    $data['categoryID'] = $monthlyDeclarationDetail['salaryCategoryID'];
                    $data['declarationAmount'] = ($setup_details['transactionAmount']) ? $setup_details['transactionAmount'] : 0;
                    $data['declarationDetID'] = ($setup_details['declarationDetailID']) ? $setup_details['declarationDetailID'] : 0;
                    
                    $data['payRate'] = ($setup_details['transactionAmount'] || $setup_details['currentAmount']) ? ($setup_details['transactionAmount'] + $setup_details['currentAmount']):0;
                    
                    if($data['payRate'] == 0){
                        continue;
                    }
                    
                    $data['payUnit'] = $payUnit;

                    $tr_amount = $data['payRate'] * $payUnit;

                    $localCon = currency_conversion($setup_details['transactionCurrency'], $com_currency, $tr_amount);
                    $reportCon = currency_conversion($setup_details['transactionCurrency'], $com_repCurrency, $tr_amount);
                    $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currDPlace) : round($tr_amount, $com_currDPlace);
                    $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);

             
                    $data['transactionCurrency'] = ($setup_details['transactionCurrency']) ? $setup_details['transactionCurrency'] : $com_currency;
                    $data['transactionCurrencyID'] = ($setup_details['transactionCurrencyID']) ? $setup_details['transactionCurrencyID'] : $com_currency_id;
                    $data['transactionExchangeRate'] = ($setup_details['transactionER']) ? $setup_details['transactionER'] : 1;
                    $data['transactionAmount'] = $tr_amount;
                    $data['transactionCurrencyDecimalPlaces'] = ($setup_details['transactionCurrencyDecimalPlaces']) ? $setup_details['transactionCurrencyDecimalPlaces'] : $com_currDPlace;

                    $data['companyLocalCurrencyID'] = ($setup_details['companyLocalCurrencyID']) ?  $setup_details['companyLocalCurrencyID'] : $com_currency;
                    $data['companyLocalCurrency'] = ($setup_details['companyLocalCurrency']) ? $setup_details['companyLocalCurrency'] : $com_currency_id;
                    $data['companyLocalExchangeRate'] = ($setup_details['companyLocalER']) ? $setup_details['companyLocalER'] : 1;
                    $data['companyLocalAmount'] = $localAmount;
                    $data['companyLocalCurrencyDecimalPlaces'] = ($setup_details['companyLocalCurrencyDecimalPlaces']) ? $setup_details['companyLocalCurrencyDecimalPlaces'] : $com_currDPlace;

                    $data['companyReportingCurrencyID'] = ($setup_details['companyReportingCurrencyID']) ?  $setup_details['companyReportingCurrencyID'] : $com_repCurrency_id;
                    $data['companyReportingCurrency'] = ($setup_details['companyReportingCurrency']) ? $setup_details['companyReportingCurrency'] : $com_repCurrency;
                    $data['companyReportingExchangeRate'] = ($setup_details['companyReportingER']) ? $setup_details['companyReportingER'] : 1;
                    $data['companyReportingAmount'] = $reportAmount;
                    $data['companyReportingCurrencyDecimalPlaces'] = ($setup_details['companyReportingCurrencyDecimalPlaces']) ? $setup_details['companyReportingCurrencyDecimalPlaces'] : $com_repCurDPlace;
                    
                    $data['companyID'] = $this->common_data['company_data']['company_id'];
                    $data['companyCode'] = $this->common_data['company_data']['company_code'];
                    $data['createdPCID'] = $this->common_data['current_pc'];
                    $data['createdUserID'] = $this->common_data['current_userID'];
                    $data['createdUserName'] = $this->common_data['current_user'];
                    $data['createdUserGroup'] = $this->common_data['user_group'];
                    $data['createdDateTime'] = $current_date;

             
                    $res = $this->db->insert('srp_erp_pay_monthlyadditiondetail', $data);
                    $last_id = $this->db->insert_id();

                    if($last_id){
                        $temp_arr = array();
                        $temp_arr['pulledID'] = $data['monthlyAdditionsMasterID'];
                        $temp_arr['pulledStatus'] = 1;
                        $this->db->where('id',$variable['id'])->update('`srp_erp_pay_variable_empattendancereview',$temp_arr);
                    }

                }
            }

            if(empty($selection_arr)){
                return array('e', 'No data to Pull.');
            }  

            return array('s', 'All attandance data Successfully Pulled.');

        }else{
            return array('e', 'Some thing went wrong');
        }
        


    }

    function update_monthAddition($type)
    {
        $updateID = trim($this->input->post('updateID') ?? '');

        $this->form_validation->set_rules('monthDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');
        $this->form_validation->set_rules('updateID', 'Update ID', 'trim|required');


        if ($this->form_validation->run() == FALSE) {
            return array('e', validation_errors());
        } else {

            $description = $this->input->post('monthDescription');
            $date_format_policy = date_format_policy();
            $datDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($datDsc, $date_format_policy);


            $isConform = $this->input->post('isConform');
            $updateCode = $this->input->post('updateCode');
            $current_date = current_date();

            $systemType = 0;
            if ($type == 'MA') {
                $tableName = 'srp_erp_pay_monthlyadditionsmaster';
                $monthID = 'monthlyAdditionsMasterID';
                $dateField = 'dateMA';
                $msg = 'Monthly Addition';
                $systemType = $this->db->get_where('srp_erp_pay_monthlyadditionsmaster', ['monthlyAdditionsMasterID' => $updateID])->row('typeID');
            } elseif ($type == 'MD') {
                $tableName = 'srp_erp_pay_monthlydeductionmaster';
                $monthID = 'monthlyDeductionMasterID';
                $dateField = 'dateMD';
                $msg = 'Monthly Deduction';
            }


            $isConfirmed = $this->isAlreadyConformed($tableName, $monthID, $updateID);

            if ($isConfirmed != 1) {
                $data = array(
                    'description' => $description, 'confirmedYN' => $isConform, 'confirmedByEmpID' => current_userID(),
                    'confirmedByName' => current_employee(), 'confirmedDate' => $current_date, 'modifiedPCID' => $this->common_data['current_pc'],
                    'modifiedUserID' => $this->common_data['current_userID'], 'modifiedUserName' => $this->common_data['current_user'],
                    'modifiedDateTime' => $current_date
                );

                if ($systemType == 0) { // if not variable pay
                    $data[$dateField] = $dateDesc;
                }

                $this->db->where($monthID, $updateID);
                $this->db->update($tableName, $data);


                return array('s', $msg . '[ ' . $updateCode . ' ] Updated successfully');

            } else {
                return array('e', '[' . $updateCode . '] is already confirmed, You can not Update this.');
            }

        }
    }

    function generate_monthlyDeduction_Nopay(){

        $monthlyDeductionMasterID = $this->input->post('monthlyDeductionMasterID');

        $deductionDetails = $this->edit_monthAddition('MD',$monthlyDeductionMasterID);

        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
        $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
        $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
        $current_date = current_date();

        try {
            if($deductionDetails){

                $date_selected = date('Y-m-d',strtotime($deductionDetails['dateMD']));
                $deductionType = $deductionDetails['deductionType'];
    
                if($deductionType == 'NoPay'){

                    //clear data
                    $res = clear_no_pay_deductions($monthlyDeductionMasterID);

                    $no_pay_records = fetch_emp_approved_no_pay($date_selected,6);
    
                    foreach($no_pay_records as $record){
    
                        $empID = $record['empID'];
                        $data = array();
    
                        $emp_details = fetch_employee_detail_tbl($empID);
    
                        if($emp_details){
    
                            $payCurrencyID = $emp_details['payCurrencyID'];
                            $payCurrency = $emp_details['payCurrency'];
                            $tr_amount = $record['noPayAmount'];
                            $localCon = currency_conversion($payCurrency, $com_currency, $tr_amount);
                            $reportCon = currency_conversion($payCurrency, $com_repCurrency, $tr_amount);
                            $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currDPlace) : round($tr_amount, $com_currDPlace);
                            $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);
    
                            $data['monthlyDeductionMasterID'] = $monthlyDeductionMasterID;
                            $data['empID'] = $empID;
                            $data['description'] = $empID;
                            $data['payRate'] = 1;
                            $data['payUnit'] = $tr_amount;
                            $data['transactionCurrencyID'] = $payCurrencyID;
                            $data['transactionCurrency'] = $payCurrency;
                            $data['transactionExchangeRate'] = 1;
                            $data['transactionCurrencyDecimalPlaces'] = $payCurrency;
                            $data['transactionAmount'] = $tr_amount;
                            $data['companyLocalCurrencyID'] =  $localCon['currencyID'];
                            $data['companyLocalCurrency'] = $com_currency;
                            $data['companyLocalExchangeRate'] = $localCon['conversion'];
                            $data['companyLocalAmount'] = $localAmount;
                            $data['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                            $data['companyReportingCurrencyID'] = $reportCon['currencyID'];
                            $data['companyReportingCurrency'] = $com_repCurrency;
                            $data['companyReportingExchangeRate'] = $reportCon['conversion'];
                            $data['companyReportingAmount'] = $reportAmount;
                            $data['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;
                            $data['companyID'] = $this->common_data['company_data']['company_id'];
                            $data['companyCode'] = $this->common_data['company_data']['company_code'];
                            $data['createdPCID'] = $this->common_data['current_pc'];
                            $data['createdUserID'] = $this->common_data['current_userID'];
                            $data['createdUserName'] = $this->common_data['current_user'];
                            $data['createdUserGroup'] = $this->common_data['user_group'];
                            $data['createdDateTime'] = $current_date;
    
                            //add to the table
                            $res = $this->db->insert('srp_erp_pay_monthlydeductiondetail',$data);
    
                        }
    
    
                    }
    
    
                }
    
                return array('s','Successfully added the Data');
    
    
    
            }
    
        } catch (\Throwable $th) {
            return array('e','Something went wrong');
        }

    }

    function load_empMonthAddition($monthType)
    {
        $id = $this->input->post('editID');
        if ($monthType == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterID = 'monthlyAdditionsMasterID';
        } elseif ($monthType == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterID = 'monthlyDeductionMasterID';
        }

        $query = $this->db->select($tableName . '.*, EIdNo, ECode, Ename1, Ename2, Ename3')
            ->from($tableName)
            ->join('srp_employeesdetails AS empTB', $tableName . '.empID=empTB.EIdNo')
            ->where($masterID, $id)
            ->get();

        return $query->result_array();

    }

    function referBack_monthAddition()
    {
        $id = $this->input->post('referID');
        $referBack = $this->input->post('referBack');

        if ($referBack == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditionsmaster';
            $masterID = 'monthlyAdditionsMasterID';
            $monthlyCode = 'monthlyAdditionsCode';
        } elseif ($referBack == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductionmaster';
            $masterID = 'monthlyDeductionMasterID';
            $monthlyCode = 'monthlyDeductionCode';
        }


        $query = $this->db->select($monthlyCode . ' AS code, isProcessed')
            ->from($tableName)
            ->where($masterID, $id)
            ->get();

        $details = $query->row();

        //echo $this->db->last_query();die();

        if ($details->isProcessed == 1) {
            return array('e', $details->code . ' is already processed you can not refer back this');
        } else {
            $updateDetail = array(
                'confirmedYN' => 2,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $this->common_data['current_userID'],
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            );
            $this->db->where($masterID, $id)->update($tableName, $updateDetail);
            if ($this->db->affected_rows() > 0) {
                return array('s', '[' . $details->code . '] Refer backed successfully');
            } else {
                return array('e', 'Error in refer back process [' . $details->code . ']');
            }
        }
    }

    function bankBranches()
    {
        $bankID = $this->input->post('bankID');
        return $this->db->query("SELECT branchID, branchCode, branchName FROM srp_erp_pay_bankbranches WHERE bankID={$bankID} ORDER BY branchName")->result_array();
    }

    function create_bank($bankName)
    {
        $bankName = trim($bankName);

        $isExist = $this->db->query("SELECT bankID FROM srp_erp_pay_bankmaster WHERE bankName='$bankName' ")->row_array();


        if (empty($isExist)) {
            $data = array(
                'bankName' => $bankName,
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_pay_bankmaster', $data);

            if ($this->db->affected_rows() > 0) {
                return array('s', $this->db->insert_id());
            } else {
                return array('e', 'Error in Bank creation');
            }
        } else {
            return array('e', 'Already a bank exists in this name');
        }


    }

    function create_bankBranch($bank_id, $br_name)
    {
        $data = array(
            'bankID' => $bank_id,
            'branchName' => $br_name,
            'companyID' => $this->common_data['company_data']['company_id'],
            'companyCode' => $this->common_data['company_data']['company_code'],
            'createdPCID' => $this->common_data['current_pc'],
            'createdUserID' => $this->common_data['current_userID'],
            'createdUserName' => $this->common_data['current_user'],
            'createdUserGroup' => $this->common_data['user_group'],
            'createdDateTime' => current_date()
        );

        $this->db->insert('srp_erp_pay_bankbranches', $data);

        if ($this->db->affected_rows() > 0) {
            return array('s', $this->db->insert_id());
        } else {
            return array('e', 'Error in Bank branch creation');
        }
    }

    function removeAll_emp()
    {
        $masterID = $this->input->post('masterID');
        $monthType = $this->input->post('type_m');

        if ($monthType == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionsMasterID';
        } elseif ($monthType == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionMasterID';
        }

        $this->db->trans_start();
        $this->db->where(array($masterColumn => $masterID))->delete($tableName);
        $this->db->trans_complete();

        if ($this->db->trans_status() == false) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function removeSingle_emp()
    {
        $detailID = $this->input->post('detailID');
        $monthType = $this->input->post('type_m');

        if ($monthType == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionDetailID';
        } elseif ($monthType == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionDetailID';
        }

        $this->db->trans_start();
        $this->db->where(array($masterColumn => $detailID))->delete($tableName);
        $this->db->trans_complete();

        if ($this->db->trans_status() == false) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function update_leaveTypes()
    {
        $description = $this->input->post('leaveDescription');
        $attachmentRequired = $this->input->post('attachmentRequired');
        $isAnnualLeave = $this->input->post('isAnnualLeave');
        $isPaidLeave = $this->input->post('isPaidLeave');
        $leavePlanApplicable = $this->input->post('leavePlanApplicable');
        $leaveReasonApplicable = $this->input->post('leaveReasonApplicable');
        $isShortLeave = $this->input->post('isShortLeave');
        $shortLeaveMaxMins = $this->input->post('shortLeaveMaxMins');
        $shortLeaveMaxHours = $this->input->post('shortLeaveMaxHours');
        $editID = $this->input->post('editID');
        $isSickLeave = $this->input->post('isSickLeave');
        $leaveFinalSettlement = $this->input->post('leaveFinalSettlement');
        $companyID=$this->common_data['company_data']['company_id'];

        if($leaveFinalSettlement==1){
            $this->db->select('leaveTypeID');
            $this->db->from('srp_erp_leavetype');
            $this->db->where('companyID',$companyID);
            $this->db->where('finalSettlementYN',1);
            $query=$this->db->get();
            $finalSettlement=$query->row();
    
            if($finalSettlement){
                return array('w', 'This company already have final settlement.');
            }
        }

        $data = array(
            'description' => $description,
            'isAnnualLeave' => $isAnnualLeave,
            'attachmentRequired' => $attachmentRequired,
            'isPaidLeave' => $isPaidLeave,
            'isPlanApplicable' => $leavePlanApplicable,
            'reasonApplicableYN' => $leaveReasonApplicable,
            'isShortLeave' => $isShortLeave,
            'shortLeaveMaxMins' => $shortLeaveMaxMins,
            'shortLeaveMaxHours' => $shortLeaveMaxHours,
            'isSickLeave' => $isSickLeave,
            'finalSettlementYN'=>$leaveFinalSettlement,
            'modifiedPCID' => $this->common_data['current_pc'],
            'modifiedUserID' => $this->common_data['current_userID'],
            'modifiedUserName' => $this->common_data['current_user'],
            'modifiedDateTime' => current_date()

        );

        $isExistLeaveTypes = $this->isExistLeaveTypes($description);

        if (!empty($isExistLeaveTypes)) {
            if ($isExistLeaveTypes['leaveTypeID'] == $editID) {
                $this->db->where('leaveTypeID', $editID);
                $this->db->update('srp_erp_leavetype', $data);

                if ($this->db->affected_rows() > 0) {
                    return array('s', 'Leave type updated successfully.');
                } else {
                    return array('e', 'Error in leave type update process');
                }
            } else {
                return array('w', 'This description already exists.');
            }

        } else {
            $this->db->where('leaveTypeID', $editID);
            $this->db->update('srp_erp_leavetype', $data);

            if ($this->db->affected_rows() > 0) {
                return array('s', 'Leave type updated successfully.');
            } else {
                return array('e', 'Error in leave type update process');
            }
        }
    }
    function saveReason()
    {
        $description = $this->input->post('description[]');
        $reasonEditID = $this->input->post('reasonEditID');
   


        $data = array();
        foreach ($description as $key => $de) {
            $data[$key]['reason'] = $de;
            $data[$key]['leavetypeID'] = $reasonEditID;
            $data[$key]['createdUserGroup'] = current_user_group();
            $data[$key]['companyID'] = current_companyID();
            $data[$key]['createdPCID'] = current_companyID();
            $data[$key]['createdUserID'] = current_pc();
            $data[$key]['createdDateTime'] = current_date();
            $data[$key]['createdUserName'] = current_employee();
            $data[$key]['modifiedPCID'] = current_pc();
            $data[$key]['modifiedUserID'] = current_userID();
            $data[$key]['modifiedDateTime'] = current_date();
            $data[$key]['modifiedUserName'] = current_employee();
          
        }

        $this->db->insert_batch('srp_erp_leave_reason', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function save_leaveTypes()
    {
        $description = $this->input->post('leaveDescription');
        $attachmentRequired = $this->input->post('attachmentRequired');
        $isPaidLeave = $this->input->post('isPaidLeave');
        $isAnnualLeave = $this->input->post('isAnnualLeave');
        $leavePlanApplicable = $this->input->post('leavePlanApplicable');
        $LeaveReasonApplicable = $this->input->post('leaveReasonApplicable');
        $isSickLeave = $this->input->post('isSickLeave');
        $isShortLeave = $this->input->post('isShortLeave');
        $shortLeaveMaxMins = $this->input->post('shortLeaveMaxMins');
        $shortLeaveMaxHours = $this->input->post('shortLeaveMaxHours');
        $leaveFinalSettlement = $this->input->post('leaveFinalSettlement');
        $confirmed = ($isSickLeave == 1) ? 0 : 1;
        $isExistLeaveTypes = $this->isExistLeaveTypes($description);
        $companyID=$this->common_data['company_data']['company_id'];

        if($leaveFinalSettlement==1){
            $this->db->select('leaveTypeID');
            $this->db->from('srp_erp_leavetype');
            $this->db->where('companyID',$companyID);
            $this->db->where('finalSettlementYN',1);
            $query=$this->db->get();
            $finalSettlement=$query->row();
    
            if($finalSettlement){
                return array('w', 'This company already have final settlement.');
            }
        }

        if (!empty($isExistLeaveTypes)) {
            return array('w', 'This description already exists.');
        } else {
            $data = array(
                'description' => $description,
                'attachmentRequired' => $attachmentRequired,
                'isAnnualLeave' => $isAnnualLeave,
                'isPaidLeave' => $isPaidLeave,
                'isPlanApplicable' => $leavePlanApplicable,
                'reasonApplicableYN' => $LeaveReasonApplicable,
                'isSickLeave' => $isSickLeave,
                'isShortLeave' => $isShortLeave,
                'shortLeaveMaxMins' => $shortLeaveMaxMins,
                'shortLeaveMaxHours' => $shortLeaveMaxHours,
                'typeConfirmed' => $confirmed,
                'finalSettlementYN'=>$leaveFinalSettlement,
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_leavetype', $data);

            if ($this->db->affected_rows() > 0) {
                return array('s', 'Leave type created successfully.');
            } else {
                return array('e', 'Error in leave type create process');
            }
        }
    }

    function isExistLeaveTypes($description)
    {
        $companyID = $this->common_data['company_data']['company_id'];
        return $this->db->query("SELECT leaveTypeID FROM srp_erp_leavetype WHERE description='$description' AND companyID={$companyID}")->row_array();
    }

    function delete_leaveTypes()
    {
        $deleteID = $this->input->post('deleteID');
        $isInUse = $this->db->query("SELECT description FROM `srp_erp_leavegroupdetails`  AS t1
                                     JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID
                                     WHERE t2.leaveTypeID={$deleteID} ")->row_array();

        if (!empty($isInUse)) {
            return array('e', 'You can\'t delete this leave type');
        } else {
            $this->db->trans_start();
            $where = ['leaveTypeID' => $deleteID, 'companyID' => current_companyID()];
            $this->db->where($where)->delete('srp_erp_leavetype');
            $this->db->where($where)->delete('srp_erp_sickleavesetup');

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed delete leave type');
            } else {
                $this->db->trans_commit();
                return array('s', 'Leave type delete process done.');
            }
        }
    }

    function emp_leaves($empID = null)
    {
        $empID = ($empID == null) ? $this->input->post('empID') : $empID;
        return $this->db->query("SELECT description, t3.policyDescription, days, leaveEntitledID, t1.leaveTypeID
                                 FROM srp_erp_leaveentitled AS t1
                                 JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID
                                 JOIN srp_erp_leavepolicymaster AS t3 ON t3.policyMasterID = t2.policyID
                                 WHERE empID={$empID}")->result_array();
    }

    function save_empLeaveEntitle()
    {
        $empID = $this->input->post('empID');
        $leaveType = $this->input->post('leaveType');
        $leave_days = $this->input->post('leave_days');
        $companyID = $this->common_data['company_data']['company_id'];
        $companyCode = $this->common_data['company_data']['company_code'];
        $createdPCID = $this->common_data['current_pc'];
        $createdUserID = $this->common_data['current_userID'];
        $createdUserName = $this->common_data['current_user'];
        $createdUserGroup = $this->common_data['user_group'];
        $createdDateTime = current_date();

        if (isset($leaveType)) {
            $i = 0;
            $data = array();
            foreach ($leaveType as $typ) {
                $isNotExist = isAlreadyExistInThisArray($leaveType, $typ, $i, $empID);

                if ($isNotExist[0] == 'e') {
                    return array('e', $isNotExist[1]);
                }

                $data[$i]['empID'] = $empID;
                $data[$i]['leaveTypeID'] = $typ;
                $data[$i]['days'] = $leave_days[$i];
                $data[$i]['companyID'] = $companyID;
                $data[$i]['companyCode'] = $companyCode;
                $data[$i]['createdPCID'] = $createdPCID;
                $data[$i]['createdUserID'] = $createdUserID;
                $data[$i]['createdUserName'] = $createdUserName;
                $data[$i]['createdUserGroup'] = $createdUserGroup;
                $data[$i]['createdDateTime'] = $createdDateTime;
                $i++;
            }


            $this->db->trans_start();
            $this->db->insert_batch('srp_erp_leaveentitled', $data);
            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed Insert Data');
            } else {
                $this->db->trans_commit();
                return array('s', 'Leave Entitle Process Success.');
            }
        }
    }

    function update_empLeaveEntitle()
    {

        $editID = $this->input->post('editID');
        $empID = $this->input->post('empID');
        $leaveType = $this->input->post('leaveType_e');
        $leave_days = $this->input->post('leave_days_e');

        $isExist = $this->db->query("SELECT description, leaveEntitledID FROM srp_erp_leaveentitled AS t1
                                     JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID
                                     WHERE empID={$empID} AND t1.leaveTypeID={$leaveType}")->row_array();

        if (!empty($isExist)) {
            if ($isExist['leaveEntitledID'] != $editID) {
                return array('e', $isExist['description'] . ' is already exists.');
            }
        }


        $data = array(
            'empID' => $empID,
            'leaveTypeID' => $leaveType,
            'days' => $leave_days,
            'modifiedPCID' => $this->common_data['current_pc'],
            'modifiedUserID' => $this->common_data['current_userID'],
            'modifiedUserName' => $this->common_data['current_user'],
            'modifiedDateTime' => current_date()
        );


        $this->db->trans_start();
        $this->db->where('leaveEntitledID', $editID)->update('srp_erp_leaveentitled', $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed update ');
        } else {
            $this->db->trans_commit();
            return array('s', 'Leave Entitle Update Process Done.');
        }

    }

    function delete_empLeaveEntitle()
    {
        $deleteID = $this->input->post('deleteID');

        $this->db->trans_start();
        $this->db->where('leaveEntitledID', $deleteID)->delete('srp_erp_leaveentitled');
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed delete ');
        } else {
            $this->db->trans_commit();
            return array('s', 'Leave Entitle Delete Process Done.');
        }
    }

    function employeeOpenLeaveSummery($empID = null, $leaveType = null, $policyMasterID = null, $companyID = null){
    
        $empID = ($empID == null) ? $this->input->post('empID') : $empID;
        $leaveType = ($leaveType == null) ? $this->input->post('leaveType') : $leaveType;
        $policyMasterID = ($policyMasterID == null) ? $this->input->post('policyMasterID') : $policyMasterID;

        if ($policyMasterID == 2) {
            /*Hourly leave type not developed fully*/
            return [
                'policyMasterID' => 2, 'entitled' => 0, 'leaveTaken' => 0, 'policyDescription' => 'Hourly',
                'isPaidLeave' => 1, 'description' => '', 'balance' => 0
            ];
            $qry3 = "SELECT t3.policyMasterID, IFNULL((SELECT SUM(hoursEntitled),t4.reasonApplicableYN,, t4.isAnnualLeave
                        FROM srp_erp_leaveaccrualdetail 
                        LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID
                        WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) AS entitled, IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster 
                        WHERE empID = {$empID} AND leaveTypeID = {$leaveType} AND approvedYN = 1), 0) AS leaveTaken, IFNULL((SELECT SUM(hoursEntitled) 
                        FROM srp_erp_leaveaccrualdetail 
                        LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                        WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) - IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster 
                        WHERE empID = {$empID} AND leaveTypeID = {$leaveType} AND approvedYN = 1), 0) AS balance, policyDescription,
                        IFNULL((SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail 
                        LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                        WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) AS accrued, isPaidLeave, t5.description 
                        FROM `srp_employeesdetails` t1 LEFT JOIN `srp_erp_leavegroup` t2 ON t1.leaveGroupID = t2.leaveGroupID 
                        LEFT JOIN `srp_erp_leavegroupdetails` AS t3 ON t2.leaveGroupID = t3.leaveGroupID 
                        LEFT JOIN srp_erp_leavetype AS t4 ON t4.leaveTypeID = t3.leaveTypeID JOIN srp_erp_leavepolicymaster t5 ON t5.policyMasterID = t3.policyMasterID 
                        WHERE t3.leaveTypeID = {$leaveType} AND EIdNo = {$empID}";
        } else {
                                    
            if ($companyID == null) {
                $companyID = current_companyID();
            }

            $currentYear = date('Y');
            $monthlyFirstDate = date('Y-m-01');
            $monthlyEndDate = date('Y-m-t');
            $yearFirstDate = date('Y-01-01');
            $yearEndDate = date('Y-12-31');


            $carryForwardLogic = "IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3), 
                                    IF( leavGroupDet.policyMasterID=1,  YEAR(accrualDate) = {$currentYear},
                                    accrualDate BETWEEN '{$monthlyFirstDate}' AND '{$monthlyEndDate}'), accrualDate <= '{$yearEndDate}') ";

            $carryForwardLogic2 = "AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),
                                    IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearFirstDate}' AND '{$yearEndDate}',
                                    endDate BETWEEN '{$monthlyFirstDate}' AND '{$monthlyEndDate}'), endDate <= '{$yearEndDate}') ";

            // $qry3="SELECT SUM(days) AS days FROM srp_erp_leavemaster WHERE leaveTypeID={$leaveType} AND companyID={$companyID} ";

            $qry3 = "SELECT * FROM ( 
                SELECT t3.policyMasterID,
                IFNULL( (
                      SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                      JOIN (
                           SELECT leaveaccrualMasterID, confirmedYN,
                           CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                           FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                      ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID
                      JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                      AND leavGroupDet.leaveTypeID = '{$leaveType}'
                      WHERE {$carryForwardLogic} AND detailTB.leaveType = '{$leaveType}' AND leavGroupDet.policyMasterID IN (1,3)
                      AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = {$empID} 
                  ), 0
                ) AS entitled, 
                IFNULL( (
                       SELECT SUM(days) FROM srp_erp_leavemaster 
                       JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                       AND leavGroupDet.leaveTypeID = '{$leaveType}'
                       WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveType}' AND
                       (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                       srp_erp_leavemaster.empID = {$empID} AND approvedYN = 1 {$carryForwardLogic2}
                  ), 0
                ) AS leaveTaken, policyDescription, isPaidLeave, t5.description , t5.reasonApplicableYN, t5.leaveTypeID, t5.isAnnualLeave, IFNULL(SUM(t6.days), 0) AS sumofdays
                FROM srp_employeesdetails t1 
                LEFT JOIN `srp_erp_leavegroup` t2 ON t1.leaveGroupID = t2.leaveGroupID 
                LEFT JOIN `srp_erp_leavegroupdetails` AS t3 ON t1.leaveGroupID = t3.leaveGroupID 
                LEFT JOIN srp_erp_leavepolicymaster t4 ON t4.policyMasterID = t3.policyMasterID 
                LEFT JOIN srp_erp_leavetype AS t5 ON t5.leaveTypeID = t3.leaveTypeID
                LEFT JOIN `srp_erp_leavemaster` t6 ON t5.leaveTypeID = t6.leaveTypeID
                 WHERE t3.leaveTypeID = {$leaveType} AND EIdNo = {$empID} 
            ) dataTB";
        }

        $leaveDet = $this->db->query($qry3)->row_array();

        
        if($leaveDet){

            $leaveDet['leaveReason'] = $this->db->select('reason,id')->where('leavetypeID',$leaveType)->from('srp_erp_leave_reason')->get()->result_array();

        }


        return $leaveDet;
    }

    function employeeLeaveSummery($empID = null, $leaveType = null, $policyMasterID = null, $companyID = null)
    {
        $empID = ($empID == null) ? $this->input->post('empID') : $empID;
        $leaveType = ($leaveType == null) ? $this->input->post('leaveType') : $leaveType;
        $policyMasterID = ($policyMasterID == null) ? $this->input->post('policyMasterID') : $policyMasterID;

        if ($policyMasterID == 2) {
            /*Hourly leave type not developed fully*/
            return [
                'policyMasterID' => 2, 'entitled' => 0, 'leaveTaken' => 0, 'policyDescription' => 'Hourly',
                'isPaidLeave' => 1, 'description' => '', 'balance' => 0
            ];
            $qry3 = "SELECT t3.policyMasterID, IFNULL((SELECT SUM(hoursEntitled),t4.reasonApplicableYN,, t4.isAnnualLeave
                     FROM srp_erp_leaveaccrualdetail 
                     LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID
                     WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) AS entitled, IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster 
                     WHERE empID = {$empID} AND leaveTypeID = {$leaveType} AND approvedYN = 1), 0) AS leaveTaken, IFNULL((SELECT SUM(hoursEntitled) 
                     FROM srp_erp_leaveaccrualdetail 
                     LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                     WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) - IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster 
                     WHERE empID = {$empID} AND leaveTypeID = {$leaveType} AND approvedYN = 1), 0) AS balance, policyDescription,
                      IFNULL((SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail 
                      LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                      WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1), 0) AS accrued, isPaidLeave, t5.description 
                      FROM `srp_employeesdetails` t1 LEFT JOIN `srp_erp_leavegroup` t2 ON t1.leaveGroupID = t2.leaveGroupID 
                      LEFT JOIN `srp_erp_leavegroupdetails` AS t3 ON t2.leaveGroupID = t3.leaveGroupID 
                      LEFT JOIN srp_erp_leavetype AS t4 ON t4.leaveTypeID = t3.leaveTypeID JOIN srp_erp_leavepolicymaster t5 ON t5.policyMasterID = t3.policyMasterID 
                      WHERE t3.leaveTypeID = {$leaveType} AND EIdNo = {$empID}";
        } else {
            /*$isCarryForwardStr = $isCarryForwardStr2 = '';
            if ($policyMasterID == 1) {
                $isCarryForward = $this->db->query("SELECT isCarryForward FROM srp_erp_leavegroupdetails  t1
                JOIN srp_employeesdetails t2 ON t1.leaveGroupID=t2.leaveGroupID
                WHERE leaveTypeID={$leaveType}  AND EIdNo={$empID}")->row('isCarryForward');

                if ($isCarryForward == 0) {
                    $isCarryForwardStr = " AND `year`='" . date('Y') . "'";
                    $isCarryForwardStr2 = " AND year(startDate) = '" . date('Y') . "'";
                }
            }

            if ($policyMasterID == 3) {
                $isCarryForward = $this->db->query("SELECT isCarryForward FROM srp_erp_leavegroupdetails  t1
                JOIN srp_employeesdetails t2 ON t1.leaveGroupID=t2.leaveGroupID
                WHERE leaveTypeID={$leaveType}  AND EIdNo={$empID}")->row('isCarryForward');

                if ($isCarryForward == 0) {
                    $isCarryForwardStr = " AND `year`='" . date('Y') . "'  AND `month`='" . date('m') . "'";
                    $isCarryForwardStr2 = " AND year(startDate) = '" . date('Y') . "' AND MONTH(startDate) = '" . date('m') . "'";
                }
            }

            $qry3 = "SELECT *, (entitled - leaveTaken) AS balance FROM ( 
                         SELECT t3.policyMasterID,
                         IFNULL( (SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail
                           LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                           WHERE empID = {$empID} AND leaveType = {$leaveType} AND confirmedYN = 1 {$isCarryForwardStr}), 0
                         ) AS entitled, 
                         IFNULL( (SELECT SUM(days) FROM srp_erp_leavemaster WHERE empID = {$empID} AND leaveTypeID = {$leaveType} 
                           AND approvedYN = 1 {$isCarryForwardStr2}), 0
                         ) AS leaveTaken, policyDescription, isPaidLeave, t5.description 
                         FROM srp_employeesdetails t1 
                         LEFT JOIN `srp_erp_leavegroup` t2 ON t1.leaveGroupID = t2.leaveGroupID 
                         LEFT JOIN `srp_erp_leavegroupdetails` AS t3 ON t1.leaveGroupID = t3.leaveGroupID 
                         LEFT JOIN srp_erp_leavepolicymaster t4 ON t4.policyMasterID = t3.policyMasterID 
                         LEFT JOIN srp_erp_leavetype AS t5 ON t5.leaveTypeID = t3.leaveTypeID WHERE t3.leaveTypeID = {$leaveType} AND EIdNo = {$empID} 
                     ) dataTB";*/

            if ($companyID == null) {
                $companyID = current_companyID();
            }

            $currentYear = date('Y');
            $monthlyFirstDate = date('Y-m-01');
            $monthlyEndDate = date('Y-m-t');
            $yearFirstDate = date('Y-01-01');
            $yearEndDate = date('Y-12-31');


            $carryForwardLogic = "IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3), 
                                  IF( leavGroupDet.policyMasterID=1,  YEAR(accrualDate) = {$currentYear},
                                  accrualDate BETWEEN '{$monthlyFirstDate}' AND '{$monthlyEndDate}'), accrualDate <= '{$yearEndDate}') ";

            $carryForwardLogic2 = "AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),
                                   IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearFirstDate}' AND '{$yearEndDate}',
                                   endDate BETWEEN '{$monthlyFirstDate}' AND '{$monthlyEndDate}'), endDate <= '{$yearEndDate}') ";

            $qry3 = "SELECT *, (entitled - leaveTaken) AS balance FROM ( 
                         SELECT t3.policyMasterID,
                         IFNULL( (
                               SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                               JOIN (
                                    SELECT leaveaccrualMasterID, confirmedYN,
                                    CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                                    FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                               ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID
                               JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                               AND leavGroupDet.leaveTypeID = '{$leaveType}'
                               WHERE {$carryForwardLogic} AND detailTB.leaveType = '{$leaveType}' AND leavGroupDet.policyMasterID IN (1,3)
                               AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = {$empID} 
                           ), 0
                         ) AS entitled, 
                         IFNULL( (
                                SELECT SUM(days) FROM srp_erp_leavemaster 
                                JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                                AND leavGroupDet.leaveTypeID = '{$leaveType}'
                                WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveType}' AND
                                (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                                srp_erp_leavemaster.empID = {$empID} AND approvedYN = 1 {$carryForwardLogic2}
                           ), 0
                         ) AS leaveTaken, policyDescription, isPaidLeave, t5.description , t5.reasonApplicableYN, t5.leaveTypeID, t5.isAnnualLeave
                         FROM srp_employeesdetails t1 
                         LEFT JOIN `srp_erp_leavegroup` t2 ON t1.leaveGroupID = t2.leaveGroupID 
                         LEFT JOIN `srp_erp_leavegroupdetails` AS t3 ON t1.leaveGroupID = t3.leaveGroupID 
                         LEFT JOIN srp_erp_leavepolicymaster t4 ON t4.policyMasterID = t3.policyMasterID 
                         LEFT JOIN srp_erp_leavetype AS t5 ON t5.leaveTypeID = t3.leaveTypeID WHERE t3.leaveTypeID = {$leaveType} AND EIdNo = {$empID} 
                     ) dataTB";

        }

        $leaveDet = $this->db->query($qry3)->row_array();

        
        if($leaveDet){

            $leaveDet['leaveReason'] = $this->db->select('reason,id')->where('leavetypeID',$leaveType)->from('srp_erp_leave_reason')->get()->result_array();

        }


        return $leaveDet;
    }


    function employeeLeave_details($masterID)
    {
        return $this->db->query("SELECT 
        IFNULL(approvalComments, '') AS approvalComments,
        leaveAvailable,
        leaveMasterID,
        empID,
        srp_erp_leavemaster.leaveTypeID,
        IF(policyMasterID = 2, DATE_FORMAT(startDate, '%Y-%m-%d %h:%i %p'), DATE_FORMAT(startDate, '%Y-%m-%d')) AS startDate,
        currentLevelNo,
        IF(policyMasterID = 2, DATE_FORMAT(endDate, '%Y-%m-%d %h:%i %p'), DATE_FORMAT(endDate, '%Y-%m-%d')) AS endDate,
        days,
        hours,
        ishalfDay,
        shift,
        documentCode,
        serialNo,
        entryDate,
        comments,
        isCalenderDays,
        nonWorkingDays,
        workingDays,
        leaveGroupID,
        isAttendance,
        policyMasterID,
        confirmedYN,
        confirmedByEmpID,
        confirmedByName,
        confirmedDate,
        approvedYN,
        approvedDate,
        approvedbyEmpID,
        approvedbyEmpName,
        srp_erp_leavemaster.companyID,
        srp_erp_leavemaster.companyCode,
        description,
        applicationType,
        leaveReasonID,
        leaveReasonText,
        annualComment,
        requestForCancelYN,
        cancelledYN,
        isTravelRequest,
        srp_erp_leavetype.isAnnualLeave,
        GROUP_CONCAT(srp_erp_leave_covering_employee.coveringID) AS coveringEmpID
    FROM 
        srp_erp_leavemaster
    LEFT JOIN 
        srp_erp_leavetype ON srp_erp_leavetype.leaveTypeID = srp_erp_leavemaster.leaveTypeID
    LEFT JOIN
        srp_erp_leave_covering_employee ON srp_erp_leave_covering_employee.leaveapplicationID = srp_erp_leavemaster.leaveMasterID
    WHERE 
        srp_erp_leavemaster.leaveMasterID = {$masterID}
    GROUP BY
        srp_erp_leavemaster.leaveMasterID")->row_array();
    }


    function delete_empLeave()
    {
        $masterID = $this->input->post('deleteID');
        $det = $this->employeeLeave_details($masterID);

        if ($det['approvedYN'] == 1) {
            return array('e', 'This leave application is Approved');
        } else {
            $this->db->trans_start();
            $this->db->where('leaveMasterID', $masterID)->delete('srp_erp_leavemaster');
            $this->db->where('leaveapplicationID', $masterID)->delete('srp_erp_leave_covering_employee');

            $this->db->where('documentID', 'LA')->where('systemID', $masterID)
                ->delete('srp_erp_notify');

            /*** Delete accrual leave ***/
            $this->db->where('companyID', current_companyID());
            $this->db->where('leaveMasterID', $masterID);
            $this->db->delete('srp_erp_leaveaccrualmaster');

            $this->db->where('leaveMasterID', $masterID);
            $this->db->delete('srp_erp_leaveaccrualdetail');

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed delete [' . $det['documentCode'] . ' ]');
            } else {
                $this->db->trans_commit();
                return array('s', 'Successfully Deleted [' . $det['documentCode'] . ' ]');
            }
        }
    }

    function get_emp_leaveDet_paySheetPrint($empID, $payrollData)
    {
        $y = $payrollData['payrollYear'];
        $m = $payrollData['payrollMonth'];

        $startDate = $y . '-01-01';
        $y += 1;
        $endDate = $y . '-01-01';

        $startMonth = $y . '-' . '0' . $m . '-01';

        $endMonth = date("Y-m-t", strtotime($startMonth));


        $qry = "SELECT t2.description, SUM(noOfDays) AS entitled, policyDescription, IFNULL((SELECT SUM(days)
         FROM srp_erp_leavemaster WHERE empID = {$empID} AND srp_erp_leavemaster.leaveTypeID = t1.leaveTypeID AND approvedYN = 1 AND startDate >= '{$startMonth}' AND endDate <= '{$endMonth}'), 0) AS leaveTaken,
          IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail 
          LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE srp_erp_leaveaccrualmaster.year <= {$y} AND srp_erp_leaveaccrualmaster.month <= {$m} AND empID = {$empID} AND confirmedYN = 1 AND srp_erp_leaveaccrualdetail.leaveType = t1.leaveTypeID), 0) AS accrued, isPaidLeave, (SUM(noOfDays) + IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE srp_erp_leaveaccrualmaster.year <= {$y} AND srp_erp_leaveaccrualmaster.month <= {$m} AND empID = {$empID} AND confirmedYN = 1 AND srp_erp_leaveaccrualdetail.leaveType = t1.leaveTypeID), 0)) - IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE empID = {$empID} AND srp_erp_leavemaster.leaveTypeID = t1.leaveTypeID AND startDate >= '{$startMonth}' AND endDate <= '{$endMonth}'), 0) AS days FROM `srp_employeesdetails` LEFT JOIN `srp_erp_leavegroupdetails` AS t1 ON t1.leaveGroupID = srp_employeesdetails.leaveGroupID LEFT JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID JOIN srp_erp_leavepolicymaster t3 ON t2.policyID = t3.policyMasterID WHERE EIdNo = {$empID} GROUP BY t2.leaveTypeID";

        // $qry="SELECT description, t3.policyDescription, days, (SELECT sum(days) FROM srp_erp_leavemaster  WHERE empID={$empID} AND approvedYN=1 AND leaveTypeID=t1.leaveTypeID AND endDate >= '$startDate' AND endDate < '$endDate' ) AS leaveTaken FROM srp_erp_leaveentitled AS t1 JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID JOIN srp_erp_leavepolicymaster AS t3 ON t3.policyMasterID = t2.policyID WHERE empID={$empID} ";

        // echo $qry="SELECT t2.description, SUM(noOfDays) AS entitled, policyDescription, IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE empID = {$empID} AND srp_erp_leavemaster.leaveTypeID=t1.leaveTypeID  AND approvedYN=1), 0) AS leaveTaken, IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE empID = {$empID} AND confirmedYN = 1 AND srp_erp_leaveaccrualdetail.leaveType=t1.leaveTypeID ), 0) AS accrued, isPaidLeave, (SUM(noOfDays) + IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE empID = {$empID} AND confirmedYN = 1 AND srp_erp_leaveaccrualdetail.leaveType=t1.leaveTypeID), 0)) - IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE empID = {$empID} AND  srp_erp_leavemaster.leaveTypeID=t1.leaveTypeID), 0) AS days FROM `srp_employeesdetails` LEFT JOIN `srp_erp_leavegroupdetails` AS t1 ON t1.leaveGroupID = srp_employeesdetails.leaveGroupID LEFT JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID JOIN srp_erp_leavepolicymaster t3 ON t2.policyID = t3.policyMasterID WHERE EIdNo = {$empID} GROUP BY t2.leaveTypeID";

        return $this->db->query($qry)->result_array();
//        return false;

    }

    function savePresentType()
    {
        $attType = $this->input->post('attType[]');
        $data = array();

        //echo '<pre>';print_r($attType); echo '</pre>'; die();

        foreach ($attType as $key => $row) {
            $data[$key]['SysPresentTypeID'] = $row;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['BranchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        $this->db->insert_batch('srp_attpresenttype', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function delete_attendanceTypes()
    {
        $deleteID = $this->input->post('hidden-id');

        $this->db->trans_start();
        $this->db->where('AttPresentTypeID', $deleteID)->delete('srp_attpresenttype');
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Delete process is failed');
        } else {
            $this->db->trans_commit();
            return array('s', ' Process Done.');
        }
    }

    function new_attendance()
    {

        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('attendanceDate');
        $attendanceDate = input_format_date($invDueDate, $date_format_policy);
        //$attendanceDate = $this->input->post('attendanceDate');
        $attendanceTime = $this->input->post('attendanceTime');
        $departments = $this->input->post('departments');
        $date = date('Y-m-d H:i:s');


        if($attendanceDate > $date){
            return array('e', 'Date is greater than the current date.');
            exit;
        }

        $convertedTime = date('H:i:s', strtotime($attendanceTime));

        $isAlreadyProcessed = $this->db->query("SELECT * FROM srp_empattendancemaster WHERE Erp_companyID=" . current_companyID() . "
                                                AND AttDate='{$attendanceDate}'")->row_array();

        if (!empty($isAlreadyProcessed)) {

            $department_ex_arr = explode(',',$isAlreadyProcessed['departments']);
            $exists = null;

            foreach($departments as $dep){
                if(in_array($dep,$department_ex_arr)){
                    $exists = 1;
                }
            }

            if($exists){
                return array('e', 'Already added a record for selected department');
                exit;
            }
            
        }

        $data['AttDate'] = $attendanceDate;
        $data['AttTime'] = $convertedTime;
        $data['departments'] = implode(",",$departments);
        $data['SchMasterId'] = current_schMasterID();
        $data['branchID'] = current_schBranchID();
        $data['Erp_companyID'] = current_companyID();
        $data['isAttClosed'] = 0;
        $data['DoneBy'] = current_userID();
        $data['CreatedPC'] = current_pc();
        $data['CreatedUserName'] = current_employee();
        $data['CreatedDate'] = current_date();

        $res = $this->db->insert('srp_empattendancemaster', $data);

        $id = $this->db->insert_id();

        if($id){
            //create affected employess
            $res = $this->create_attandance_for_employees($id,0);
        }

        return array('s', 'Records inserted successfully', $id);
     
        
    }

    function new_attendance_self_service()
    {

        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('attendanceDate');
        $attendanceDate = input_format_date($invDueDate, $date_format_policy);
        //$attendanceDate = $this->input->post('attendanceDate');
        $attendanceTime = $this->input->post('attendanceTime');
        $type = $this->input->post('empSelfOrOthers');
        $floor = $this->input->post('floor');
        $date = date('Y-m-d H:i:s');

        if($attendanceDate > $date){
            return array('e', 'Date is greater than the current date.');
            exit;
        }

        $convertedTime = date('H:i:s', strtotime($attendanceTime));

        $isAlreadyProcessed = $this->db->query("SELECT * FROM srp_empattendancemaster WHERE Erp_companyID=" . current_companyID() . "
                                                AND AttDate='{$attendanceDate}'")->row_array();

        // if (!empty($isAlreadyProcessed)) {
        //     return array('e', 'Already manual attenadance is ran for this date');
        //     exit;
        // }


        $data['AttDate'] = $attendanceDate;
        $data['AttTime'] = $convertedTime;
        $data['floorID'] = $floor;
        // $data['SchMasterId'] = current_schMasterID();
        // $data['branchID'] = current_schBranchID();
        $data['Erp_companyID'] = current_companyID();
        $data['isAttClosed'] = 0;
        $data['DoneBy'] = current_userID();
        $data['CreatedPC'] = current_pc();
        $data['CreatedUserName'] = current_employee();
        $data['CreatedDate'] = current_date();

        $res = $this->db->insert('srp_empattendancemaster', $data);

        $id = $this->db->insert_id();

        if($id){
            //create affected employess
            $res = $this->create_attandance_for_employees($id,$type);
        }

        return array('s', 'Records inserted successfully', $id);
     
        
    }

    function create_attandance_for_employees($id,$isSelf){

        $floor = $this->input->post('floor');

        //fetch
        $this->db->where('EmpAttMasterID',$id);
        $master_detail = $this->db->from('srp_empattendancemaster')->get()->row_array();

        if($master_detail){

            $departments = $master_detail['departments'];
            $att_date = $master_detail['AttDate'];

            $formated_att_date = date('Y-m-d H:i:s',strtotime($att_date));

            //only the employees not assigned to the machine
            if($isSelf == 0){
                $emp_list = fetch_emp_departemtns_with_primary($departments,1);
            }elseif($isSelf == 2){
                $emp_list = fetch_emp_departemtns_with_primary($departments,1,$master_detail['DoneBy']);
            }elseif($isSelf == 3){
                $emp_list = fetch_emp_attendees_self_service($master_detail['DoneBy']);
            }else{
                $emp_list = fetch_emp_manages_self_service($master_detail['DoneBy']);
            }


            foreach($emp_list as $emp){

                $emp_id = $emp['EmpID'];
                $start_time = '09:00:00';
                $end_time = '17:00:0';
                $shiftID = null;

                // emp shift details
                $shift_details = fetch_emp_shift_details($emp_id,$formated_att_date);


                if($shift_details && isset($shift_details['Description'])){
                    $start_time = $shift_details['onDutyTime'];
                    $end_time = $shift_details['offDutyTime'];
                    $shiftID = $shift_details['shiftID'];
                }
               
                //pull ongoing contracts
                $contract_job_emp_details = 1;//fetch_emp_contract_ongoing($emp_id,$formated_att_date);
                
                if($contract_job_emp_details != 1){
                    //emp can have contract job
                    foreach($contract_job_emp_details as $job_details){

                        $dateFron = $job_details['dateFrom'];
                        $dateTo = $job_details['dateTo'];
                        $contractCode = $job_details['contractCode'];
                        $data_arr = array();

                        $contract_emp = fetch_emp_contract_details($contractCode);

                        $get_shift_worked = get_shift_worked_emp($dateFron,$dateTo,$start_time,$end_time,$formated_att_date);

                        $onduty = $get_shift_worked['start_time'];
                        $offduty = $end_time;
                        $checkIn = $onduty;
                        $checkOut = $get_shift_worked['actual_check_out'];

                        $contract_ref = '';
                        $job_id = '';
                        $job_ref = '';
                        $contractAutoID = isset($contract_emp['contractAutoID']) ? $contract_emp['contractAutoID'] : '';
                        if($contractAutoID){
                            $contract_ref = $contract_emp['contractCode'].'|'.$contract_emp['referenceNo'];
                            $job_id = $job_details['jobID'];
                            $job_ref = $job_details['job_code'].' | '.$job_details['job_name'];
                        }

                        $data_arr['empID'] = $emp_id;
                        $data_arr['floorID'] = $floor;
                        $data_arr['clockoutFloorID'] = $floor;
                        $data_arr['empAttMasterID'] = $id;
                        $data_arr['attendanceDate'] = $att_date;
                        $data_arr['shiftID'] = $shiftID;
                        $data_arr['onDuty'] = $onduty;
                        $data_arr['offDuty'] = $offduty;
                        $data_arr['gracePeriod'] = 0;
                        $data_arr['presentTypeID'] = 1;
                        $data_arr['checkInDate'] = $att_date;
                        $data_arr['checkOutDate'] = $att_date;
                        $data_arr['checkIn'] = $checkIn;
                        $data_arr['checkOut'] = $checkOut;
                        $data_arr['departmentID'] = $emp['DepartmentMasterID'];
                        $data_arr['contractAutoID'] = $contractAutoID;
                        $data_arr['contractReference'] = $job_ref;
                        $data_arr['jobID'] = $job_id;
                        $data_arr['jobReference'] = $job_ref;
                        $data_arr['companyID'] = current_companyID();
                        $data_arr['companyCode'] = current_companyCode();
                        $data_arr['createdBy'] = current_userID();
                        $data_arr['createdPC'] = current_pc();
                        $data_arr['createdUserName'] = current_employee();
                        $data_arr['createdDate'] = current_date();

                        if($data_arr){
                            $res = $this->db->insert('srp_erp_pay_empattendancereview',$data_arr);

                        }

                    }

                }else{
                    //emp not assigned to any contract job

                    $onduty = $checkIn = $start_time;
                    $offduty = $checkOut = $end_time;

                    $contract_emp = fetch_emp_contract_details_primary($emp_id);

                    $emp_review_record = get_employee_view_record($emp_id,$att_date);

                    if($emp_review_record){

                        $data_update = array();
                        $data_update['empAttMasterID'] = $id;

                        $this->db->where('empID',$emp_id)->where('attendanceDate',$att_date)->update('srp_erp_pay_empattendancereview',$data_update);

                    }else{ 

                        $data_arr['presentTypeID'] = 1;
                        $data_arr['leaveMasterID'] = null;
                        
                        $leaveMaster = $this->getLeaveMaster($emp_id,$att_date);
                        if ($leaveMaster)
                        {
                            $data_arr['presentTypeID'] = 5;
                            $data_arr['leaveMasterID'] = $leaveMaster['leaveMasterID'];
                        }

                        $data_arr['empID'] = $emp_id;
                        $data_arr['floorID'] = $floor;
                        $data_arr['clockoutFloorID'] = $floor;
                        $data_arr['empAttMasterID'] = $id;
                        $data_arr['attendanceDate'] = $att_date;
                        $data_arr['shiftID'] = $shiftID;
                        $data_arr['onDuty'] = $onduty;
                        $data_arr['offDuty'] = $offduty;
                        $data_arr['gracePeriod'] = 0;
                        $data_arr['checkInDate'] = $att_date;
                        $data_arr['checkOutDate'] = $att_date;
                        $data_arr['checkIn'] = $checkIn;
                        $data_arr['checkOut'] = $checkOut;
                        $data_arr['departmentID'] = isset($emp['DepartmentMasterID']) ? $emp['DepartmentMasterID'] : '';
                        $data_arr['contractAutoID'] = $contract_emp['contractAutoID'];
                        $data_arr['contractReference'] = $contract_emp['contractCode'].'|'.$contract_emp['referenceNo'];
                        $data_arr['jobID'] = null;
                        $data_arr['jobReference'] = null;
                        $data_arr['companyID'] = current_companyID();
                        $data_arr['companyCode'] = current_companyCode();
                        $data_arr['createdBy'] = current_userID();
                        $data_arr['createdPC'] = current_pc();
                        $data_arr['createdUserName'] = current_employee();
                        $data_arr['createdDate'] = current_date();

                        if($data_arr){

                            $res = $this->db->insert('srp_erp_pay_empattendancereview',$data_arr);

                        }


                    }

                }
              
            }
      

        }

        return true;


    }

    /**
     * Get leave master
     *
     * @return array
     */
    private function getLeaveMaster($empId, $date)
    {
        $companyID = current_companyID();
        return $this->db->select('*')
        ->from('srp_erp_leavemaster')
        ->where('empID', $empId)
        ->where('approvedYN', 1)
        ->where('companyID',$companyID)
        ->where('\'' . $date . '\' BETWEEN startDate AND endDate')->get()->row_array();
    }

    function getAttMasterData($attID)
    {
        $companyID = current_companyID();
        $data = $this->db->query("
            SELECT att.*,floor.floorDescription 
            FROM srp_empattendancemaster as att
            LEFT JOIN srp_erp_pay_floormaster as floor ON att.floorID = floor.floorID
            WHERE  EmpAttMasterID={$attID} 
            AND Erp_companyID={$companyID}")->row_array();
        return $data;
    }

    function getAttMasterData_delete($attID)
    {
        $companyID = current_companyID();
        $data = $this->db->query("
            SELECT att.*
            FROM srp_empattendancemaster as att
            WHERE  EmpAttMasterID={$attID} 
            AND Erp_companyID={$companyID}")->row_array();
        return $data;
    }

    function delete_attendanceMaster()
    {
        $deleteID = $this->input->post('hidden-id');
        $companyID = current_companyID();

        $this->db->trans_start();

        $this->db->where('EmpAttMasterID', $deleteID)->delete('srp_empattendancemaster');

        $this->db->where('EmpAttMasterID', $deleteID)->where('companyID',$companyID)->delete('srp_erp_pay_empattendancereview');

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Delete process is failed');
        } else {
            $this->db->trans_commit();
            return array('s', ' Process Done.');
        }
    }

    function get_attendanceEmployees($attID)
    {
        //$concatenate = 'IFNULL(Ename1,"") , " ", IFNULL(Ename2,""), " ",  IFNULL(Ename3,"") , " ",  IFNULL(Ename4,"") ';
        $concatenate = 'IFNULL(emp.Ename2,"")';
        $companyID = current_companyID();

        $data = $this->db->query("SELECT EIdNo, ECode,  CONCAT({$concatenate}) empName,  EmpImage, isAttended, AttTime, AttPresentTypeID, AttPresentRemarks
                                  FROM srp_employeesdetails AS emp LEFT JOIN srp_empattendance AS att ON att.EmpID = emp.EIdNo AND att.EmpAttMasterID={$attID}
                                  WHERE emp.Erp_companyID={$companyID}")->result();

        return $data;
    }

    function get_attendanceEmployees_new($attID)
    {
        //$concatenate = 'IFNULL(Ename1,"") , " ", IFNULL(Ename2,""), " ",  IFNULL(Ename3,"") , " ",  IFNULL(Ename4,"") ';
        $concatenate = 'IFNULL(Ename2,"")';
        $companyID = current_companyID();

        // $data = $this->db->query("SELECT EIdNo, ECode,  CONCAT({$concatenate}) empName,  EmpImage, att.*
        //                           FROM srp_employeesdetails AS emp LEFT JOIN srp_erp_pay_empattendancereview AS att ON att.EmpID = emp.EIdNo AND att.empAttMasterID={$attID}
        //                           WHERE emp.Erp_companyID={$companyID}")->result();

        $data = $this->db->query("SELECT emp.EIdNo, emp.ECode, emp.Ename2 as empName,  emp.EmpImage, att.*,floor.floorDescription
        FROM srp_erp_pay_empattendancereview AS att
        LEFT JOIN srp_erp_pay_floormaster as floor ON att.floorID = floor.floorID
        LEFT JOIN srp_employeesdetails AS emp ON att.EmpID = emp.EIdNo
        WHERE att.empAttMasterID={$attID} AND att.companyID={$companyID} ")->result();

        return $data;
    }


    /*Start of Shift Master*/

    function save_attendanceDetails()
    {

        $attendMasterID = $this->input->post('attendMasterID');
        $isComplete = $this->input->post('isComplete');
        $attEmp = $this->input->post('att-emp[]');
        $isAttended = $this->input->post('isAttended[]');
        $attType = $this->input->post('att-type[]');
        $attTime = $this->input->post('att-time[]');
        $remarks = $this->input->post('remarks[]');
        $data = array();

        //echo '<pre>';print_r( $_POST ); echo '</pre>'; die();

        $this->db->trans_start();

        $this->db->where('EmpAttMasterID', $attendMasterID)->delete('srp_empattendance');

        foreach ($attEmp as $key => $emp) {
            if (!empty($isAttended)) {
                $isThisEmpAttended = (in_array($emp, $isAttended)) ? 1 : '';
            } else {
                $isThisEmpAttended = 0;
            }


            $data[$key]['EmpAttMasterID'] = $attendMasterID;
            $data[$key]['EmpID'] = $emp;
            $data[$key]['isAttended'] = $isThisEmpAttended;
            $data[$key]['AttTime'] = ($attType[$key] == 4) ? '00:00:00' : $attTime[$key]; // Attendance type ID => 4 is Absents
            $data[$key]['AttPresentTypeID'] = $attType[$key];
            $data[$key]['AttPresentRemarks'] = $remarks[$key];
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        if (!empty($isComplete)) {
            $upData = array(
                'isAttClosed' => 1,
                'ModifiedUserName' => current_employee(),
                'ModifiedPC' => current_pc()
            );
            $this->db->where('EmpAttMasterID', $attendMasterID)->update('srp_empattendancemaster', $upData);
        }

        $this->db->insert_batch('srp_empattendance', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Error in attendance process.');
        } else {
            $this->db->trans_commit();
            return array('s', 'Attendance Records inserted successfully');
        }
    }

    function saveShiftMaster()
    {
        $description = $this->input->post('shiftDescription');
        $isExistShiftDetails = $this->isExistShiftDetails($description);

        if (!empty($isExistShiftDetails)) {
            return array('w', 'This description already exists.');
        } else {
            $data = array(
                'description' => $description,
                'companyID' => current_companyID(),
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdUserGroup' => current_user_group(),
                'createdDateTime' => current_date()
            );

            $this->db->trans_start();
            $this->db->insert('srp_erp_pay_shiftmaster', $data);
            $shiftID = $this->db->insert_id();

            $onTime_arr = $this->input->post('onTime[]');
            $offTime_arr = $this->input->post('offTime[]');
            $isWeekend_arr = $this->input->post('isWeekend[]');
            $masterDayID_arr = $this->input->post('masterDayID[]');
            $graceperiod_hours = $this->input->post('h_graceperiod[]');
            $graceperiod_mins = $this->input->post('m_graceperiod[]');
            $isHalfDay = $this->input->post('isHalfDay[]');
            $isNextDay = $this->input->post('isFallForNextDay[]');

            $data_arr = array();
            foreach ($masterDayID_arr as $key => $row) {
                $weekDayNo = null;
                switch ($row) {
                    case 1:
                        $weekDayNo = 6;
                        break;  //Sunday
                    case 2:
                        $weekDayNo = 0;
                        break;  //Monday
                    case 3:
                        $weekDayNo = 1;
                        break;
                    case 4:
                        $weekDayNo = 2;
                        break;
                    case 5:
                        $weekDayNo = 3;
                        break;
                    case 6:
                        $weekDayNo = 4;
                        break; //Friday
                    case 7:
                        $weekDayNo = 5;
                        break; //Saturday
                }
                $onTime = ($isWeekend_arr[$key] == 1) ? null : date('H:i:s', strtotime($onTime_arr[$key]));
                $offTime = ($isWeekend_arr[$key] == 1) ? null : date('H:i:s', strtotime($offTime_arr[$key]));

                $data_arr[$key]['shiftID'] = $shiftID;
                $data_arr[$key]['dayID'] = $row;
                $data_arr[$key]['weekDayNo'] = $weekDayNo;
                $data_arr[$key]['onDutyTime'] = $onTime;
                $data_arr[$key]['offDutyTime'] = $offTime;
                $data_arr[$key]['isWeekend'] = $isWeekend_arr[$key];
                $data_arr[$key]['isHalfDay'] = $isHalfDay[$key];
                $data_arr[$key]['isNextDay'] = $isNextDay[$key];
                $data_arr[$key]['gracePeriod'] = ($graceperiod_hours[$key]*60)+($graceperiod_mins[$key]);
               
                $data_arr[$key]['companyID'] = current_companyID();
                $data_arr[$key]['companyCode'] = current_companyCode();
                $data_arr[$key]['createdPCID'] = current_pc();
                $data_arr[$key]['createdUserID'] = current_userID();
                $data_arr[$key]['createdUserName'] = current_employee();
                $data_arr[$key]['createdUserGroup'] = current_user_group();
                $data_arr[$key]['createdDateTime'] = current_date();
            }

            $this->db->insert_batch('srp_erp_pay_shiftdetails', $data_arr);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Shift created successfully.', $shiftID);
            } else {
                $this->db->trans_rollback();
                return array('e', 'Error in shift create process');
            }
        }
    }

    function isExistShiftDetails($description)
    {
        $companyID = current_companyID();
        return $this->db->query("SELECT shiftID FROM srp_erp_pay_shiftmaster WHERE Description='$description' AND companyID={$companyID}")->row('shiftID');
    }

    function fetch_shiftDetails()
    {
        $shiftID = $this->input->post('shiftID');
        $companyID = current_companyID();
        $query = $this->db->query("SELECT dayID, DATE_FORMAT(onDutyTime, \"%h:%i %p\") AS onDutyTime, DATE_FORMAT(offDutyTime, \"%h:%i %p\") AS offDutyTime, shiftDetailID,isHalfDay,isNextDay,specialOT,
                                   SUBSTRING_INDEX( CONCAT(FLOOR(gracePeriod/60),':',LPAD(MOD(gracePeriod,60),2,'0')),':',1) as graceperiodhrs,
	                                SUBSTRING_INDEX( CONCAT(FLOOR(gracePeriod/60),':',LPAD(MOD(gracePeriod,60),2,'0')),':',-1) as gracemins,isSpecialOT
                                   FROM srp_erp_pay_shiftdetails 
                                   LEFT JOIN srp_erp_pay_shiftmaster ON srp_erp_pay_shiftdetails.shiftID = srp_erp_pay_shiftmaster.shiftID
                                   WHERE srp_erp_pay_shiftdetails.shiftID = {$shiftID} AND srp_erp_pay_shiftdetails.companyID = {$companyID}")->result_array();

        return array('s', $query);

    }

    function updateShiftMaster()
    {
        $description = $this->input->post('shiftDescription');
        $editID = $this->input->post('editID');
        $isSpecialOT = $this->input->post('isSpecialOT');
        $specialOtHours = $this->input->post('specialOtHours');

        $data = array(
            'description' => $description,
            'isSpecialOT' => ($isSpecialOT) ? $isSpecialOT : 0,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $isExistShiftDetails = $this->isExistShiftDetails($description);

        if (!empty($isExistShiftDetails)) {
            if ($isExistShiftDetails != $editID) {
                return array('w', 'This description already exists.');
                die();
            }
        }

        $this->db->trans_start();

        $this->db->where('shiftID', $editID);
        $this->db->update('srp_erp_pay_shiftmaster', $data);

        $onTime_arr = $this->input->post('onTime[]');
        $offTime_arr = $this->input->post('offTime[]');
        $isWeekend_arr = $this->input->post('isWeekend[]');
        $masterDayID_arr = $this->input->post('masterDayID[]');
        $shiftDetID_arr = $this->input->post('shiftDetID[]');
        $isHalfDay_arr = $this->input->post('isHalfDay[]');
        $hoursgraceperiod = $this->input->post('h_graceperiod[]');
        $minutesgraceperiod = $this->input->post('m_graceperiod[]');
        $isNextDay = $this->input->post('isFallForNextDay[]');


        $data_arr = array();
        foreach ($masterDayID_arr as $key => $row) {
            $onTime = ($isWeekend_arr[$key] == 1) ? null : date('H:i:s', strtotime($onTime_arr[$key]));
            $offTime = ($isWeekend_arr[$key] == 1) ? null : date('H:i:s', strtotime($offTime_arr[$key]));

            $data_arr[$key]['shiftDetailID'] = $shiftDetID_arr[$key];
            $data_arr[$key]['onDutyTime'] = $onTime;
            if($isSpecialOT){
                $data_arr[$key]['specialOT'] = $specialOtHours;
            }
            $data_arr[$key]['offDutyTime'] = $offTime;
            $data_arr[$key]['isWeekend'] = $isWeekend_arr[$key];
            $data_arr[$key]['isHalfDay'] = $isHalfDay_arr[$key];
            $data_arr[$key]['isNextDay'] = $isNextDay[$key];
            $data_arr[$key]['gracePeriod'] =($hoursgraceperiod[$key]*60)+($minutesgraceperiod[$key]);
            $data_arr[$key]['modifiedPCID'] = current_pc();
            $data_arr[$key]['modifiedUserID'] = current_userID();
            $data_arr[$key]['modifiedUserName'] = current_employee();
            $data_arr[$key]['modifiedDateTime'] = current_date();
        }

        $this->db->update_batch('srp_erp_pay_shiftdetails', $data_arr, 'shiftDetailID');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Shift detail updated successfully.');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in shift detail update process');
        }
    }

    function deleteShiftMaster()
    {
        $deleteID = $this->input->post('deleteID');

        $this->db->trans_start();
        $this->db->where('shiftID', $deleteID)->delete('srp_erp_pay_shiftmaster');
        $this->db->where('shiftID', $deleteID)->delete('srp_erp_pay_shiftdetails');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records deleted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in deleting process');
        }
    }

    /*End of Shift Master*/


    /*Start of Attendance review*/

    function save_ShiftEmp()
    {

        $masterID = trim($this->input->post('masterID') ?? '');
        $employees = trim($this->input->post('employees') ?? '');
        $emp_arr = json_decode($employees);


        $data = array();
        foreach ($emp_arr as $key => $arr) {
            $data[$key]['shiftID'] = $masterID;
            $data[$key]['empID'] = $arr;
            $data[$key]['companyID'] = current_companyID();
            $data[$key]['companyCode'] = current_companyCode();
            $data[$key]['createdPCID'] = current_pc();
            $data[$key]['createdUserID'] = current_userID();
            $data[$key]['createdUserName'] = current_employee();
            $data[$key]['createdUserGroup'] = current_user_group();
            $data[$key]['createdDateTime'] = current_date();
        }


        $this->db->insert_batch('srp_erp_pay_shiftemployees', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Employees successfully assign to the shift.');
        } else {
            return array('e', 'Error in employees assigning to the shift.');
        }
    }

    function getMachineID_notAssignedEmployees($begin, $start)
    {
        $companyID = current_companyID();
        /*"SELECT EIdNo, ECode, Ename1, Erp_companyID FROM srp_employeesdetails  WHERE Erp_companyID={$companyID} AND
                                  empMachineID NOT IN (
                                      SELECT empMachineID FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID} GROUP BY empMachineID
                                  )";*/
        /*$qry = "SELECT EidNo, ECode, Ename1, srp_erp_pay_empattendancereview.* FROM `srp_erp_pay_empattendancereview` LEFT JOIN (SELECT * FROM srp_employeesdetails) t ON empID = EidNo WHERE attendanceDate BETWEEN '{$begin}' AND '{$start}' AND companyID = {$companyID} AND machineID = 0 GROUP BY empID having machineID=0";*/
        $qry = "select EidNo, ECode, Ename2 as Ename1 from srp_employeesdetails WHERE isSystemAdmin <> 1 AND isDischarged <> 1 AND empConfirmedYN = 1 AND  Erp_companyID={$companyID} AND ( empMachineID ='' OR empMachineID=0 )";
        $data = $this->db->query($qry)->result_array();
        return $data;
    }

    function getShift_notAssignedEmployees()
    {
        $companyID = current_companyID();

        $data = $this->db->query("SELECT EIdNo, ECode, Ename1, Erp_companyID FROM srp_employeesdetails WHERE Erp_companyID={$companyID} AND isSystemAdmin <> 1 AND  isDischarged <> 1  
                                  AND empConfirmedYN = 1 AND EIdNo NOT IN (
                                      SELECT empID FROM srp_erp_pay_shiftemployees WHERE companyID={$companyID} GROUP BY empID
                                  )")->result_array();
        return $data;
    }

    function get_attendanceData($dateRange)
    {
        $companyID = current_companyID();
        $frmDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');

        $date_arr = array();
        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }
        $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);

        $sql = "SELECT EIdNo, ECode, Ename1, dateRangeTB.actualDate, attInTimeTB.empMachineID, attInTimeTB.attDate,
                                  DATE_FORMAT(attInTimeTB.attTime, '%h:%i %p') attTime, DATE_FORMAT(attOffTimeTB.attTime, '%h:%i %p') offTime,
                                  DATE_FORMAT(shiftDet.onDutyTime, '%h:%i %p') onDutyTime, DATE_FORMAT(shiftDet.offDutyTime, '%h:%i %p') offDutyTime,
                                  shiftDet.isWeekend, floorDescription, emp.floorID, IF(IFNULL(leaveMasterID,0),1,0) AS isOnLeave
                                  FROM srp_employeesdetails AS emp
                                  JOIN  srp_erp_pay_empattendancedaterangetemp AS dateRangeTB
                                  LEFT JOIN srp_erp_pay_floormaster AS floorMaster ON floorMaster.floorID = emp.floorID AND floorMaster.companyID ={$companyID}
                                  LEFT JOIN (
                                      SELECT empMachineID, attDate, attTime FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID}
                                      AND attDate BETWEEN '{$frmDate}' AND '{$toDate}'
                                      GROUP BY empMachineID, attDate ORDER BY attDateTime ASC
                                  ) AS attInTimeTB ON emp.empMachineID = attInTimeTB.empMachineID AND attDate=dateRangeTB.actualDate
                                  LEFT JOIN (
                                       SELECT empMachineID, attDate, attTime FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID}
                                       AND attDate BETWEEN '{$frmDate}' AND '{$toDate}'
                                  )AS attOffTimeTB ON attOffTimeTB.attDate = attInTimeTB.attDate
                                  AND emp.empMachineID = attOffTimeTB.empMachineID AND attOffTimeTB.attTime > attInTimeTB.attTime
                                  LEFT JOIN (
                                      SELECT * FROM srp_erp_pay_shiftemployees WHERE companyID={$companyID}
                                  ) AS empShift ON empShift.empID = emp.EIdNo
                                  LEFT JOIN (
                                      SELECT * FROM srp_erp_pay_shiftdetails WHERE companyID={$companyID}
                                  ) AS shiftDet ON shiftDet.shiftID = empShift.shiftID AND shiftDet.weekDayNo=WEEKDAY(dateRangeTB.actualDate)
                                  LEFT JOIN(
                                      SELECT leaveMasterID,empID, startDate, endDate FROM srp_erp_leavemaster WHERE companyID={$companyID} AND approvedYN=1
                                  ) AS leaveTB ON leaveTB.empID = emp.EIdNo AND dateRangeTB.actualDate BETWEEN leaveTB.startDate AND leaveTB.endDate
                                  WHERE Erp_companyID={$companyID} AND actualDate BETWEEN '{$frmDate}' AND '{$toDate}' AND dateRangeTB.uniqueID={$uniqueKey}
                                  ORDER BY actualDate, Ename1 ASC";


        $data = $this->db->query($sql)->result_array();
        $this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');

        return $data;
    }

    function save_attendanceReviewData()
    {

        $empArr = $this->input->post('empID[]');
        $machineID = $this->input->post('machineID[]');
        $floorID = $this->input->post('floorID[]');
        $attDate = $this->input->post('attDate[]');
        $clock_in = $this->input->post('clock-in[]');
        $clock_out = $this->input->post('clock-out[]');
        $onDuty = $this->input->post('onDuty[]');
        $offDuty = $this->input->post('offDuty[]');
        $att_type = $this->input->post('att-type[]');
        $h_lateHours = $this->input->post('h_lateHours[]');
        $m_lateHours = $this->input->post('m_lateHours[]');
        $h_earlyHours = $this->input->post('h_earlyHours[]');
        $m_earlyHours = $this->input->post('m_earlyHours[]');
        $h_OTHours = $this->input->post('h_OTHours[]');
        $m_OTHours = $this->input->post('m_OTHours[]');
        $weekend = $this->input->post('weekend[]');
        $holiday = $this->input->post('holiday[]');
        $nDaysOT = $this->input->post('nDaysOT[]');
        $h_weekendOT = $this->input->post('h_weekendOT[]');
        $m_weekendOT = $this->input->post('m_weekendOT[]');
        $h_holidayOT = $this->input->post('h_holidayOT[]');
        $m_holidayOT = $this->input->post('m_holidayOT[]');
        $companyID = current_companyID();
        $companyCode = current_companyCode();

        $data = array();

        foreach ($empArr as $key => $emp) {
            $data[$key]['empID'] = $emp;
            $data[$key]['machineID'] = $machineID[$key];
            $data[$key]['floorID'] = $floorID[$key];
            $data[$key]['attendanceDate'] = $attDate[$key];
            $data[$key]['onDuty'] = $onDuty[$key];
            $data[$key]['offDuty'] = $offDuty[$key];
            $data[$key]['presentTypeID'] = $att_type[$key];
            $data[$key]['checkIn'] = $clock_in[$key];
            $data[$key]['checkOut'] = $clock_out[$key];

            $total_lateHours = ($h_lateHours[$key] * 60) + $m_lateHours[$key];
            $data[$key]['lateHours'] = $total_lateHours;

            $total_earlyHours = ($h_earlyHours[$key] * 60) + $m_earlyHours[$key];
            $data[$key]['earlyHours'] = $total_earlyHours;

            $total_OTHours = ($h_OTHours[$key] * 60) + $m_OTHours[$key];
            $data[$key]['OTHours'] = $total_OTHours;

            $data[$key]['mustCheckIn'] = $clock_out[$key];
            $data[$key]['mustCheckOut'] = $clock_out[$key];

            $data[$key]['weekend'] = $weekend[$key];
            $data[$key]['holiday'] = $holiday[$key];
            $data[$key]['NDaysOT'] = $nDaysOT[$key];

            $total_weekendOTHours = ($h_weekendOT[$key] * 60) + $m_weekendOT[$key];
            $data[$key]['weekendOTHours'] = $total_weekendOTHours;

            $total_holidayOTHours = ($h_holidayOT[$key] * 60) + $m_holidayOT[$key];
            $data[$key]['holidayOTHours'] = $total_holidayOTHours;
            $data[$key]['companyID'] = $companyID;
            $data[$key]['companyCode'] = $companyCode;
        }


        //echo count($_POST).'<pre>';print_r($data); echo '</pre>'; die();

        $this->db->trans_start();
        $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to Update payroll');
        } else {
            $this->db->trans_commit();

            return array('s', ' generated successfully');
        }


    }

    function get_attendanceData2($approvedYN = 1)
    {

        $companyID = current_companyID();
        $frmDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $floor = $this->input->post('location');
        //$floor = $this->input->post('floorID');
        //$floorID = implode(", ", $floor);
        $select_arr = $this->input->post('select_arr');
        $filter = '';
        $confirmed = 0;

        $department = $this->input->post('department');
        $segment = $this->input->post('segment');

        if($select_arr){
            $filter .= " att_rv.ID IN ($select_arr) ";
            $confirmed = 1;

        }else{
            $filter .= " attendanceDate BETWEEN '{$frmDate}' AND '{$toDate}' ";
            $confirmed = 0;
        }

        if($floor){
            $filter .= " AND att_rv.floorID = '{$floor}' ";
        }

        $departmentString = '';
        $departmentStringJoin = '';
        if($department){
            $departmentStringJoin .= 'LEFT JOIN srp_empdepartments as empDepartment ON empDepartment.isPrimary = 1 AND srp_employeesdetails.EIdNo = empDepartment.EmpID';
            $departmentString = " AND empDepartment.DepartmentMasterID = {$department} ";
        }

        $segmentString = '';
        if($segment){
            $segmentString .= " AND srp_employeesdetails.segmentID = {$segment} ";
        }

        $approvedStr = '';
        if($approvedYN == 1){
            $approvedStr .= 'AND approvedYN = 0';
        }

        $qry = "SELECT att_rv.ID,specialOThours,isWeekEndDay,isHoliday,isCheckin,att_rv.empID,ECode,Ename1,normalTime,normalDay, Ename2, att_rv.deviceID, empMachineID, floorin.floorDescription AS clockinFloorDescription, ID, machineID, att_rv.floorID, attendanceDate,checkInDate,checkOutDate,isShiftNextDay,
                presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, 
                lateHours, earlyHours, OTHours,mustCheck, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours,realTime,approvedComment, att_rv.isMultipleOcc,
                SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',1) as graceperiodhrs,
	            SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',-1) as gracemins,
                flootout.floorDescription AS  clockoutFloorDescription,att_rv.shiftID
                FROM srp_erp_pay_empattendancereview AS att_rv
                JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo 
                {$departmentStringJoin} 
                LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = att_rv.floorID 
                LEFT JOIN srp_erp_pay_floormaster flootout ON flootout.floorID = att_rv.clockoutFloorID
                
                WHERE $filter AND att_rv.companyID = {$companyID}  {$approvedStr} {$segmentString} {$departmentString}
                AND confirmedYN = {$confirmed} ";
   
        $data = $this->db->query($qry)->result_array();
        // echo $this->db->last_query();
        return $data;
    }

    function get_attendanceDataRecord($empAttandanceView,$confirmed = 0)
    {

        $companyID = current_companyID();
        $frmDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        //$floor = $this->input->post('floorID');
        //$floorID = implode(", ", $floor);
        $str_filter = '';
        if($frmDate){
            $str_filter .= "attendanceDate BETWEEN '{$frmDate}' AND '{$toDate}' AND";
        }

        $qry = "SELECT ID,isWeekEndDay,isHoliday,isCheckin,empID,ECode,Ename1,normalTime,normalDay, Ename2, att_rv.deviceID, empMachineID, floorin.floorDescription AS clockinFloorDescription, ID, machineID, att_rv.floorID, attendanceDate,checkInDate,checkOutDate,isShiftNextDay,
                presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, 
                lateHours, earlyHours, OTHours,mustCheck, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours,realTime,approvedComment, att_rv.isMultipleOcc,
                SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',1) as graceperiodhrs,
	            SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',-1) as gracemins,
                flootout.floorDescription AS  clockoutFloorDescription
                FROM srp_erp_pay_empattendancereview AS att_rv
                JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo 
                LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = att_rv.floorID 
                LEFT JOIN srp_erp_pay_floormaster flootout ON flootout.floorID = att_rv.clockoutFloorID
                WHERE $str_filter att_rv.companyID = {$companyID}  AND approvedYN = 0 AND ID = '{$empAttandanceView}'
                AND confirmedYN = {$confirmed} ";

        $data = $this->db->query($qry)->result_array();

        return $data;
    }

    function get_attendanceDataManual(){
        
        $companyID = current_companyID();
        $frmDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $attendance_master = $this->input->post('attendance_master');
        //$floor = $this->input->post('floorID');
        //$floorID = implode(", ", $floor);

        $qry = "SELECT
            isWeekEndDay,
            isHoliday,
            isCheckin,
            empID,
            ECode,
            Ename1,
            normalTime,
            normalDay,
            Ename2,
            att_rv.deviceID,
            empMachineID,
            ID,
            machineID,
            att_rv.floorID,
            attendanceDate,
            presentTypeID,
            checkInDate,
            checkOutDate,
            isShiftNextDay,
            specialOThours,
            DATE_FORMAT(checkIn, '%h:%i %p')    checkIn,
            DATE_FORMAT(checkOut, '%h:%i %p')    checkOut,
            DATE_FORMAT(onDuty, '%h:%i %p')    onDuty,
            DATE_FORMAT(offDuty, '%h:%i %p')    offDuty,
            lateHours,
            earlyHours,
            OTHours,
            mustCheck,
            weekend,
            holiday,
            NDaysOT,
            shiftID,
            weekendOTHours,
            holidayOTHours,
            realTime,
            approvedComment,
            att_rv.isMultipleOcc,
            SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',1) AS graceperiodhrs,
            SUBSTRING_INDEX( CONCAT(FLOOR(att_rv.gracePeriod/60),':',LPAD(MOD(att_rv.gracePeriod,60),2,'0')),':',-1) AS gracemins,
            att_rv.contractReference,
            att_rv.jobReference,
            att_rv.floorID,
            att_rv.clockoutFloorID,
            floorin.floorDescription AS clockinFloorDescription,
            flootout.floorDescription AS clockoutFloorDescription
            FROM srp_empattendancemaster AS em_master
            LEFT JOIN srp_erp_pay_empattendancereview AS att_rv ON em_master.EmpAttMasterID = att_rv.empAttMasterID
            LEFT JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo
            LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = att_rv.floorID 
            LEFT JOIN srp_erp_pay_floormaster flootout ON flootout.floorID = att_rv.clockoutFloorID
        
            WHERE 
            att_rv.companyID = {$companyID} AND att_rv.empAttMasterID = {$attendance_master}";

        //att_rv.attendanceDate BETWEEN '$frmDate' AND '$toDate'

        $data = $this->db->query($qry)->result_array();

        return $data;

    }

    function load_attendance_det()
    {
        $companyID = current_companyID();
        $frmDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');


        $begin = new DateTime($frmDate);
        $end = new DateTime($toDate);
        $end = $end->add(new DateInterval('P1D'));
        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $uniqueKey = current_userID() . '' . $companyID . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];
        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }

        $data['on_leave'] = [];
        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);

            $data['on_leave'] = $this->db->query("SELECT empID, documentCode, CONCAT_WS(' - ', empSecondaryCode, Ename2) AS empName, 
                                    dateTemp.actualDate, CONCAT_WS('-', empID, dateTemp.actualDate) AS leave_key
                                    FROM srp_erp_leavemaster AS levMas
                                    JOIN srp_employeesdetails AS empTb ON empTb.EIdNo = levMas.empID
                                    JOIN srp_erp_pay_empattendancedaterangetemp AS dateTemp 
                                    ON dateTemp.uniqueID = '{$uniqueKey}' AND dateTemp.actualDate BETWEEN startDate AND endDate 
                                    WHERE approvedYN = 1 AND (cancelledYN = 0 OR cancelledYN IS NULL)  
                                    ")->result_array();

            $this->db->delete('srp_erp_pay_empattendancedaterangetemp', ['uniqueID'=>$uniqueKey, 'companyID'=>$companyID]);
        }


        $data['att'] = $this->db->query("SELECT logID, EIdNo AS empID, CONCAT_WS(' - ', empSecondaryCode, Ename2) AS empName, atten_tb.empMachineID, 
                            attendanceDate, floor_mas.floorDescription AS location, floor_mas.floorID, inTime, outTime, punchRecord, totalDuration, 
                            overTime, statusCode, missedInPunch, missedOutPunch, IF( approvedYN = 1, 2, IF(confirmedYN = 1, 1, 0) ) AS cnfStatus
                            FROM srp_erp_attendance_oman_oil AS atten_tb
                            JOIN srp_employeesdetails AS emp_tb ON emp_tb.empMachineID = atten_tb.empMachineID
                            LEFT JOIN srp_erp_pay_floormaster AS floor_mas ON floor_mas.floorID = atten_tb.locationID
                            WHERE atten_tb.companyID = {$companyID} AND attendanceDate BETWEEN '{$frmDate}' AND '{$toDate}'                           
                            -- AND confirmedYN = 0 
                            ORDER BY attendanceDate ASC  -- LIMIT 10 ")->result_array();

        return $data;
    }

    /*End of Attendance review*/

    function get_attendanceData1()
    {
        $companyID = current_companyID();
        $data = $this->db->query("SELECT EIdNo, ECode, Ename1, tem.empMachineID, tem.attDate,
                                  DATE_FORMAT(tem.attTime, \"%h:%i %p\") AS attTime,
                                  DATE_FORMAT(tem2.attTime, \"%h:%i %p\") AS offTime,
                                  DATE_FORMAT(onDutyTime, \"%h:%i %p\") AS onDutyTime,
                                  DATE_FORMAT(offDutyTime, \"%h:%i %p\") AS offDutyTime
                                  FROM srp_erp_pay_empattendancetemptable AS tem
                                  LEFT JOIN srp_employeesdetails AS emp ON emp.empMachineID = tem.empMachineID AND emp.Erp_companyID={$companyID}
                                  LEFT JOIN srp_erp_pay_empattendancetemptable AS tem2 ON tem2.empMachineID = tem.empMachineID AND tem2.companyID={$companyID}
                                  AND tem2.attDate = tem.attDate AND tem2.attTime > tem.attTime
                                  LEFT JOIN srp_erp_pay_shiftemployees AS shiftEmp ON shiftEmp.empID = emp.EIdNo AND shiftEmp.companyID={$companyID}
                                  LEFT JOIN srp_erp_pay_shiftdetails AS shiftDet ON shiftDet.shiftID = shiftEmp.shiftID  AND shiftDet.weekDayNo=WEEKDAY(tem.attDate)
                                  INNER JOIN (
                                    SELECT DISTINCT (attDate) AS attDateDistinc FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID}
                                  ) dt ON dt.attDateDistinc = tem.attDate
                                  WHERE tem.companyID={$companyID} AND tem.attDate BETWEEN '2015-01-01' AND '2015-01-31'
                                  GROUP BY tem.empMachineID, tem.attDate
                                  ORDER BY tem.attDateTime ASC")->result_array();

        return $data;
    }

    function fetch_employees_typeAhead()
    {

        $empID = $this->input->get('empID');
        $search_string = "%" . $this->input->get('query') . "%";
        $companyID = current_companyID();
        $dataArr = array();
        $dataArr2 = array();

        $data = $this->db->query("SELECT EIdNo, Ename1, CONCAT(ECode,' _ ', Ename2) AS nameWithCode
                                  FROM srp_employeesdetails WHERE Erp_companyID={$companyID} AND EIdNo='{$empID}'
                                  UNION
                                  SELECT EIdNo, Ename1, CONCAT(ECode,' _ ', Ename2) AS nameWithCode
                                  FROM srp_employeesdetails WHERE (Ename2 LIKE '{$search_string }' OR ECode LIKE '{$search_string }')
                                  AND empConfirmedYN=1 AND isDischarged=0 AND Erp_companyID={$companyID} 
                                  UNION
                                  SELECT EIdNo,	Ename1,	CONCAT( ECode, ' _ ', Ename2 ) AS nameWithCode 
                                  FROM srp_employeesdetails WHERE ( Ename2 LIKE '{$search_string }' OR ECode LIKE '{$search_string }') 
                                  AND empConfirmedYN = 1 AND isDischarged = 0 AND Erp_companyID IN (
	                              SELECT companyID FROM	srp_erp_companygroupdetails WHERE companyGroupID = ( 
                                  SELECT companyGroupID FROM srp_erp_companygroupdetails WHERE companyID = {$companyID} )	AND companyID not in($companyID) )
                                  ")->result_array();

        if (!empty($data)) {
            foreach ($data as $val) {
                $dataArr[] = array(
                    'value' => $val["nameWithCode"],
                    'data' => $val['EIdNo'],
                );
            }
        }

        $dataArr2['suggestions'] = $dataArr;


        return $dataArr2;
    }

    function save_social_insurance()
    {
        $str = $this->input->post('socialInsuranceMasterID');
        $explod = explode("_", $str);
        $socialInsuranceMasterID = $explod['0'];
        $socialInsuranceType = $explod['1'];
        //$socialInsuranceMasterID = $this->input->post('socialInsuranceMasterID');
        $socialInsuranceNumber = $this->input->post('socialInsuranceNumber');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $createdUserGroup = current_user_group();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $current_user = current_user();

        if ($socialInsuranceType == "sso") {
            $data = array(
                'socialInsuranceMasterID' => $socialInsuranceMasterID,
                'empID' => $empID,
                'socialInsuranceNumber' => $socialInsuranceNumber,
                'companyID' => $companyID,
                'companyCode' => $companyCode,
                'createdUserGroup' => $createdUserGroup,
                'createdPCID' => $createdPCID,
                'createdUserID' => $createdUserID,
                'createdDateTime' => $current_date,
                'createdUserName' => $current_user,
                'timestamp' => $current_date,
            );
        } else if ($socialInsuranceType == "Payee") {
            $data = array(
                'payeeID' => $socialInsuranceMasterID,
                'empID' => $empID,
                'socialInsuranceNumber' => $socialInsuranceNumber,
                'companyID' => $companyID,
                'companyCode' => $companyCode,
                'createdUserGroup' => $createdUserGroup,
                'createdPCID' => $createdPCID,
                'createdUserID' => $createdUserID,
                'createdDateTime' => $current_date,
                'createdUserName' => $current_user,
                'timestamp' => $current_date,
            );
        }
        if ($socialInsuranceType == "sso") {
            $isAvailable = $this->db->query("SELECT * FROM srp_erp_socialinsurancedetails WHERE socialInsuranceMasterID='{$socialInsuranceMasterID}' AND empID='{$empID}'")->row_array();
            if ($isAvailable) {
                return array('e', 'Social Insurance Already Exist.', $empID);
            }
        } else if ($socialInsuranceType == "Payee") {
            $isAvailable = $this->db->query("SELECT * FROM srp_erp_socialinsurancedetails WHERE payeeID='{$socialInsuranceMasterID}' AND empID='{$empID}'")->row_array();
            if ($isAvailable) {
                return array('e', 'Social Insurance Already Exist.', $empID);
            }
        }


        $this->db->trans_start();
        $this->db->insert('srp_erp_socialinsurancedetails', $data);
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Social Insurance Created Successfully.', $empID);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Social Insurance Creating');
        }

    }

    function delete_si()
    {
        $socialInsuranceDetailID = $this->input->post('socialInsuranceDetailID');
        $this->db->trans_start();
        $delete = $this->db->query("DELETE FROM `srp_erp_socialinsurancedetails` WHERE (`socialInsuranceDetailID`='$socialInsuranceDetailID')");
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Social Insurance Deleted Successfully.');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Social Insurance Deleting');
        }
    }


    /*Natinality*/

    function update_si()
    {
        $pk = $this->input->post('pk');
        $value = $this->input->post('value');
        $empId = $this->input->post('empId');
        $companyID = current_companyID();

        $update = $this->db->query("UPDATE srp_erp_socialinsurancedetails SET socialInsuranceNumber = '{$value}' WHERE socialInsuranceDetailID = '{$pk}' AND empID = '{$empId}' AND companyID = '$companyID' ");

        if ($update) {
            return $this->output
                ->set_content_type('application/html')
                ->set_status_header(200)
                ->set_output('Successfully Updated.');
        } else {
            return $this->output
                ->set_content_type('application/html')
                ->set_status_header(400)
                ->set_output('Updated Failed.');
        }

    }

    function saveNationality()
    {
        $description = $this->input->post('description[]');

        $companyId = current_companyID();
        $availble = $this->db->select('Nationality')
            ->from('srp_nationality')
            ->where('Erp_companyID', $companyId)
            ->get()->result_array();


        $na = array();
        foreach ($availble as $item) {
            $na[] = $item['Nationality'];
        }

        $data = array();
        foreach ($description as $key => $de) {
            if (in_array($de, $na)) {
                continue;
            }

            $data[$key]['Nationality'] = $de;
            $data[$key]['SchMasterId'] = current_schMasterID();
            $data[$key]['branchID'] = current_schBranchID();
            $data[$key]['Erp_companyID'] = current_companyID();
            $data[$key]['CreatedPC'] = current_pc();
            $data[$key]['CreatedUserName'] = current_employee();
            $data[$key]['CreatedDate'] = current_date();
        }

        if (empty($data)) {

        } else {
            $this->db->insert_batch('srp_nationality', $data);
        }
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editNationality()
    {
        $description = $this->input->post('nationalityDes');
        $hidden_id = $this->input->post('hidden-id');

        $data = array(
            'Nationality' => $description,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
            'Timestamp' => current_date(),
        );

        $this->db->where('NId', $hidden_id)->update('srp_nationality', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }


    function deleteNationality()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT Nid FROM srp_employeesdetails WHERE Rid={$hidden_id}")->row('Nid');

        if (isset($isInUse)) {
            return array('e', 'This Nationality is in use</br>You can not delete this');
        } else {
            $this->db->where('NId', $hidden_id)->delete('srp_nationality');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    /*Social Insurance*/
    function saveSocialInsurance()
    {
        $sortCode = $this->input->post('sortCode[]');
        $description = $this->input->post('description[]');
        $employee = $this->input->post('employee[]');
        $employer = $this->input->post('employer[]');
        $expenseGlAutoID = $this->input->post('expenseGlAutoID[]');
        $liabilityGlAutoID = $this->input->post('liabilityGlAutoID[]');
        $isSlab = $this->input->post('isSlabHidden[]');
        $ifSlab = $this->input->post('ifSlab[]');

        $companyId = current_companyID();
        $companyCode = current_companyCode();
        $createdUserGroup = current_user_group();
        $current_pc = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $createdUserName = current_user();

        $SSO_description = join('\',\'', $sortCode);
        $SSO_description = '\'' . $SSO_description . '\'';

        $existItems = $this->db->query("SELECT sortCode FROM srp_erp_socialinsurancemaster WHERE companyID={$companyId} AND
                                      sortCode IN ({$SSO_description})")->result_array();


        if (!empty($existItems)) {
            $str = implode(', ', array_column($existItems, 'sortCode'));
            return ['e', 'Following short codes already exist <br/>' . $str];
            exit;
        }


        $data = array();
        $append = array();
        foreach ($sortCode as $key => $de) {

            $data['sortCode'] = $de;
            $data['Description'] = $description[$key];
            $data['employeeContribution'] = $employee[$key];
            $data['employerContribution'] = $employer[$key];
            $data['expenseGlAutoID'] = $expenseGlAutoID[$key];
            $data['liabilityGlAutoID'] = $liabilityGlAutoID[$key];
            $data['companyID'] = $companyId;
            $data['companyCode'] = $companyCode;
            $data['createdUserGroup'] = $createdUserGroup;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $createdUserID;
            $data['createdDateTime'] = $current_date;
            $data['createdUserName'] = $createdUserName;
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $createdUserID;
            $data['modifiedDateTime'] = $current_date;
            $data['modifiedUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;

            $data['isSlabApplicable'] = ($isSlab[$key] == 1) ? 1 : null;
            $data['SlabID'] = ($isSlab[$key] == 1) ? $ifSlab[$key] : null;


            $this->db->insert('srp_erp_socialinsurancemaster', $data);


            $append['description'] = $de;
            $append['socialInsuranceID'] = $this->db->insert_id();
            /*$append['isPayee'] = 0;*/
            $append['companyID'] = $companyId;
            $append['companyCode'] = $companyCode;
            $append['createdUserGroup'] = $createdUserGroup;
            $append['createdPCID'] = $current_pc;
            $append['createdUserID'] = $createdUserID;
            $append['createdDateTime'] = $current_date;
            $append['createdUserName'] = $createdUserName;
            $append['modifiedPCID'] = $current_pc;
            $append['modifiedUserID'] = $createdUserID;
            $append['modifiedDateTime'] = $current_date;
            $append['modifiedUserName'] = $createdUserName;
            $append['timestamp'] = $current_date;

            $this->db->insert('srp_erp_paygroupmaster', $append);
            $payGroupID = $this->db->insert_id();

            $appendFiled['fieldName'] = $de;
            $appendFiled['caption'] = $de;
            $appendFiled['fieldType'] = 'G';
            /*$appendFiled['isCalculate'] = 0;*/
            $appendFiled['payGroupID'] = $payGroupID;


            $appendFiled['companyID'] = $companyId;
            $appendFiled['companyCode'] = $companyCode;
            $appendFiled['createdUserGroup'] = $createdUserGroup;
            $appendFiled['createdPCID'] = $current_pc;
            $appendFiled['createdUserID'] = $createdUserID;
            $appendFiled['createdDateTime'] = $current_date;
            $appendFiled['createdUserName'] = $createdUserName;
            $appendFiled['modifiedPCID'] = $current_pc;
            $appendFiled['modifiedUserID'] = $createdUserID;
            $appendFiled['modifiedDateTime'] = $current_date;
            $appendFiled['modifiedUserName'] = $createdUserName;
            $appendFiled['timestamp'] = $current_date;
            $this->db->insert('srp_erp_pay_templatefields', $appendFiled);

        }

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editSocialInsurance()
    {
        $sortCode = $this->input->post('siSortCode');
        $description = $this->input->post('siDes');
        $employee = $this->input->post('siEmployee');
        $employer = $this->input->post('siEmployer');
        $expenseGlAutoID = $this->input->post('si_expenseGlAutoID');
        $liabilityGlAutoID = $this->input->post('si_liabilityGlAutoID');
        $hidden_id = $this->input->post('hidden-id');
        $siIsSlab = $this->input->post('siIsSlab');//on
        $siSlab = $this->input->post('siSlab');

        $companyId = current_companyID();
        $current_pc = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $createdUserName = current_user();

        $data = array(
            'sortCode' => $sortCode,
            'Description' => $description,
            'employeeContribution' => $employee,
            'employerContribution' => $employer,
            'expenseGlAutoID' => $expenseGlAutoID,
            'liabilityGlAutoID' => $liabilityGlAutoID,
            'modifiedPCID' => $current_pc,
            'modifiedUserID' => $createdUserID,
            'ModifiedUserName' => $createdUserName,
            'modifiedDateTime' => $current_date,
            'timestamp' => $current_date,
        );


        $payGroupData = array(
            'Description' => $sortCode,
            'modifiedPCID' => $current_pc,
            'modifiedUserID' => $createdUserID,
            'ModifiedUserName' => $createdUserName,
            'modifiedDateTime' => $current_date,
            'timestamp' => $current_date,
        );

        if (!is_null($siIsSlab)) {
            $data['isSlabApplicable'] = 1;
            $data['SlabID'] = $siSlab;
        } else {
            $data['isSlabApplicable'] = null;
            $data['SlabID'] = null;
        }


        $this->db->where('socialInsuranceID', $hidden_id)->where('companyID', $companyId)->update('srp_erp_socialinsurancemaster', $data);
        $this->db->where('socialInsuranceID', $hidden_id)->where('companyID', $companyId)->update('srp_erp_paygroupmaster', $payGroupData);

        $pagGroupID = $this->db->where('socialInsuranceID', $hidden_id)->select('payGroupID')->from('srp_erp_paygroupmaster')->get()->row_array();


        $filedData['fieldName'] = $sortCode;
        $filedData['caption'] = $sortCode;
        $filedData['modifiedPCID'] = $current_pc;
        $filedData['modifiedUserID'] = $createdUserID;
        $filedData['modifiedDateTime'] = $current_date;
        $filedData['modifiedUserName'] = $createdUserName;
        $filedData['timestamp'] = $current_date;

        $this->db->where('payGroupID', $pagGroupID['payGroupID'])->where('companyID', current_companyID())->update('srp_erp_pay_templatefields', $filedData);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }

    function deleteSocialInsurance()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT socialInsuranceMasterID FROM srp_erp_socialinsurancedetails WHERE socialInsuranceMasterID={$hidden_id}")->row('socialInsuranceMasterID');

        if (isset($isInUse)) {
            return array('e', 'This Social Insurance is in use</br>You can not delete this');
        } else {
            $this->db->where('socialInsuranceID', $hidden_id)->delete('srp_erp_socialinsurancemaster');
            $deltesRows = $this->db->affected_rows();
            $pagGroupID = $this->db->where('socialInsuranceID', $hidden_id)->select('payGroupID')->from('srp_erp_paygroupmaster')->get()->row_array();

            $this->db->where('socialInsuranceID', $hidden_id)->delete('srp_erp_paygroupmaster');

            $this->db->where('payGroupID', $pagGroupID['payGroupID'])->where('fieldType', 'G')->delete('srp_erp_pay_templatefields');


            if ($deltesRows > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }

    function save_employee_declaration_master()
    {

        $this->load->library('sequence');
        $currency_code = explode('|', trim($this->input->post('currency_code') ?? ''));
        $isPayrollCategory = trim($this->input->post('isPayrollCategory') ?? '');
        $isInitialDeclaration = trim($this->input->post('isInitialDeclaration') ?? '');
        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('documentDate');
        $declaration_template = $this->input->post('declaration_template');
        $isVariable = $this->input->post('isVariable');
        $documentDate = input_format_date($invDueDate, $date_format_policy);

        if($isVariable){
            $data['documentID'] = 'SVD';
            $data['documentSystemCode'] = $this->sequence->sequence_generator("SVD");
        }else{
            $data['documentID'] = 'SD';
            $data['documentSystemCode'] = $this->sequence->sequence_generator("SD");
        }

        $data['documentDate'] = trim($documentDate);
        if($this->uri->segment(3) == 'period_base'){
            $data['payrollGroup'] = trim($this->input->post('p_group') ?? '');
        }
        $data['Description'] = trim($this->input->post('salary_description') ?? '');
        $data['isPayrollCategory'] = $isPayrollCategory;
        $data['declaration_template'] = $declaration_template;
        $data['isInitialDeclaration'] = $isInitialDeclaration;
        $data['transactionCurrencyID'] = trim($this->input->post('MasterCurrency') ?? '');
        $data['transactionCurrency'] = trim($currency_code['0'] ?? '');
        $data['transactionER'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = $this->common_data['company_data']['company_default_currencyID'];
        $data['companyLocalCurrency'] = $this->common_data['company_data']['company_default_currency'];
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalER'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
        $data['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingER'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $data['companyID'] = $this->common_data['company_data']['company_id'];
        $data['companyCode'] = $this->common_data['company_data']['company_code'];
        $data['createdUserGroup'] = $this->common_data['user_group'];
        $data['createdPCID'] = $this->common_data['current_pc'];
        $data['createdUserID'] = $this->common_data['current_userID'];
        $data['createdUserName'] = $this->common_data['current_user'];
        $data['createdDateTime'] = current_date();

        if($isVariable){
            $this->db->insert('srp_erp_variable_salarydeclarationmaster', $data);
        }else{
            $this->db->insert('srp_erp_salarydeclarationmaster', $data);
        }
        
        if ($this->db->affected_rows() === FALSE) {
            $errMsg = 'Salary Declaration Save Failed ' . $this->db->_error_message();
            return array('e', $errMsg);
        } else {
            $last_id = $this->db->insert_id();
            return array('s', 'Salary Declaration Saved Successfully.', 'id' => $last_id, 'declaration_template' => $declaration_template);
        }
    }

    function save_all_salary_declaration()
    {
        $this->form_validation->set_rules('employee', 'Employee', 'trim|required');
        $this->form_validation->set_rules('amount[]', 'Amount', 'trim|required');
        $this->form_validation->set_rules('effectiveDate', 'Effective Date', 'trim|required|date');
        $this->form_validation->set_rules('cat[]', 'Category', 'trim|required');
        $this->form_validation->set_rules('salaryType', 'Salary Type', 'trim|required');
        $this->form_validation->set_rules('payDate', 'Pay Date', 'trim|required|date');
        $this->form_validation->set_rules('empJoinDate', 'Employee Join Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            return array('e', validation_errors());
        } else {
            $masterID = trim($this->input->post('declarationMasterID') ?? '');

            $masterDetail = $this->get_salaryDeclarationMaster($masterID);


            $companyID = $this->common_data['company_data']['company_id'];
            $companyCode = $this->common_data['company_data']['company_code'];
            $com_currency = $this->common_data['company_data']['company_default_currency'];
            $com_currencyDPlace = $this->common_data['company_data']['company_default_decimal'];
            $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
            $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
            $createdPCID = $this->common_data['current_pc'];
            $createdUserID = $this->common_data['current_userID'];
            $createdUserName = $this->common_data['current_user'];
            $createdUserGroup = $this->common_data['user_group'];
            $createdDateTime = current_date();

            $empID = $this->input->post('employee');
            $amount = $this->input->post('amount');
            $salaryType = $this->input->post('salaryType');
            $cat = $this->input->post('cat');
            $empJoinDate1 = $empJoinDate = $this->input->post('empJoinDate');
            $effDate = $this->input->post('effectiveDate');
            $payDate = $this->input->post('payDate');
            $narration = $this->input->post('narration');
            $currentAmount = $this->input->post('currentAmount');
            $currentAmount = (empty($currentAmount)) ? 0 : str_replace(',', '', $currentAmount);

            $date_format_policy = date_format_policy();

            $empJoinDate = input_format_date($empJoinDate, $date_format_policy);
            $effDate = input_format_date($effDate, $date_format_policy);
            $payDate = input_format_date($payDate, $date_format_policy);

            if ($effDate < $empJoinDate) {
                return ['e', 'Effective date should be greater than employee <br/>join date [ ' . $empJoinDate1 . ' ]'];
            }

            if ($payDate < $effDate) {
                return ['e', 'Pay date should be greater than effective date'];
            }


            $lastPayrollProcessed = lastPayrollProcessedForEmp($empID, $masterDetail['isPayrollCategory']);

            $payDateFirst = date('Y-m-01', strtotime($payDate));
            if ($lastPayrollProcessed >= $payDateFirst) {
                return ['e', 'Pay date should be greater than [ ' . date('Y-F', strtotime($lastPayrollProcessed)) . ' ]'];
            }

            $data = array();

            if (!empty($cat)) {
                $i = 0;
                $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
                $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;


                $totalWorkingDays = getPolicyValues('SCD', 'All');
                $totalWorkingDays = (empty($totalWorkingDays)) ? 'totalWorkingDays' : $totalWorkingDays;
                $totalWorkingDays = (trim($totalWorkingDays) == 'LAST_DAY(effectiveDate)') ? 'totalWorkingDays' : $totalWorkingDays;

                $this->db->trans_start();
                foreach ($cat as $key => $catVal) {
                    $groupID = $this->db->query("SELECT groupID FROM srp_erp_payrollgroupemployees
                                                 WHERE companyID={$companyID} AND employeeID={$empID}")->row('groupID');

                    $tr_amount = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                    $localCon = currency_conversion($masterDetail['transactionCurrency'], $com_currency, $tr_amount);
                    $reportCon = currency_conversion($masterDetail['transactionCurrency'], $com_repCurrency, $tr_amount);
                    $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currencyDPlace) : round($tr_amount, $com_currencyDPlace);
                    $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);
                    $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];

                    $data['declarationMasterID'] = $masterID;
                    $data['employeeNo'] = $empID;
                    $data['accessGroupID'] = $groupID;
                    $data['salaryCategoryType'] = $salaryType;
                    $data['salaryCategoryID'] = $catVal;
                    $data['amount'] = $amount[$key];
                    $data['effectiveDate'] = $effDate;
                    $data['payDate'] = $payDate;
                    $data['narration'] = $narration;
                    $data['currentAmount'] = $currentAmount;


                    $data['transactionCurrencyID'] = $masterDetail['transactionCurrencyID'];
                    $data['transactionCurrency'] = $masterDetail['transactionCurrency'];
                    $data['transactionER'] = $masterDetail['transactionER'];
                    $data['transactionCurrencyDecimalPlaces'] = $dPlace;


                    $data['companyLocalCurrencyID'] = $localCon['currencyID'];
                    $data['companyLocalCurrency'] = $com_currency;
                    $data['companyLocalER'] = $localCon['conversion'];
                    $data['companyLocalCurrencyDecimalPlaces'] = $com_currencyDPlace;


                    $data['companyReportingCurrencyID'] = $reportCon['currencyID'];
                    $data['companyReportingCurrency'] = $com_repCurrency;
                    $data['companyReportingER'] = $reportCon['conversion'];
                    $data['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;
                    $data['amount'] = $tr_amount;
                    $data['transactionAmount'] = $tr_amount;
                    $data['companyLocalAmount'] = $localAmount;
                    $data['companyReportingAmount'] = $reportAmount;

                    $data['companyID'] = $companyID;
                    $data['companyCode'] = $companyCode;
                    $data['createdPCID'] = $createdPCID;
                    $data['createdUserID'] = $createdUserID;
                    $data['createdUserName'] = $createdUserName;
                    $data['createdUserGroup'] = $createdUserGroup;
                    $data['createdDateTime'] = $createdDateTime;

                    $this->db->insert('srp_erp_salarydeclarationdetails', $data);

                    $insert_id = $this->db->insert_id();

                    /*** effective date and pay date should not be same month for balance calculation ***/
                    if (date('Y-m-01', strtotime($effDate)) != date('Y-m-01', strtotime($payDate))) {
                        /*** start of calculation for effective month balance ***/

                        $effDay = date('d', strtotime($effDate));
                        if ($effDay == 1) {
                            $balanceAmount = round($tr_amount, $dPlace);
                        } else {
                            /************************************************************************
                             * salaryProportionDays == 1 means
                             * formula will be (Salary / no of day in month) * worked days
                             ***********************************************************************/
                            if ($salaryProportionDays == 1) {
                                $totalDaysInEffectiveMonth = date('t', strtotime($effDate));
                                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                                $balanceAmount = ($tr_amount / $totalDaysInEffectiveMonth) * $balanceDate;
                                $balanceAmount = round($balanceAmount, $dPlace);
                            } else {
                                $totalDaysInEffectiveMonth = ($totalWorkingDays == 'totalWorkingDays') ? date('t', strtotime($effDate)) : $totalWorkingDays;
                                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                                $balanceAmount = round((($tr_amount * 12) / $salaryProportionDays) * $balanceDate, $dPlace);
                            }
                        }

                        /*** end of calculation for effective month balance ***/


                        /*** start of calculation for except effective month balance ***/
                        $effDate1 = date('Y-m-01', strtotime($effDate));
                        $payDate1 = date('Y-m-01', strtotime(date('Y-m-01', strtotime($payDate)) . ' -1 month'));


                        $j = 0;
                        while ($effDate1 < $payDate1) {
                            $effDate1 = date('Y-m-d', strtotime($effDate1 . ' +1 month'));
                            $balanceAmount += $tr_amount;

                            if ($j > 150) {
                                break;
                            }
                            $j++;
                        }

                        /*** end of calculation for except effective month balance ***/

                        $detail['empID'] = $empID;
                        $detail['sdMasterID'] = $masterID;
                        $detail['declarationDetailID'] = $insert_id;
                        $detail['fromDate'] = $effDate;
                        $detail['balanceAmount'] = round($balanceAmount, $dPlace);
                        $detail['dueDate'] = $payDate;
                        $detail['salaryCatID'] = $catVal;
                        $detail['companyID'] = $companyID;
                        $detail['createdUserGroup'] = $createdUserGroup;
                        $detail['createdPCID'] = $createdPCID;
                        $detail['createdUserID'] = $createdUserID;
                        $detail['createdDateTime'] = $createdDateTime;
                        $detail['createdUserName'] = $createdUserName;

                        $this->db->insert('srp_erp_pay_balancepayment', $detail);
                    }

                    $i++;
                }

                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return array('s', 'Insert successfully ', $masterID);
                } else {
                    $this->db->trans_rollback();
                    return array('s', 'Failed to insert record');
                }
            }
        }

    }

    function get_salaryDeclarationMaster($id)
    {
        $this->db->select("*");
        $this->db->from("srp_erp_salarydeclarationmaster");
        $this->db->where("salarydeclarationMasterID", $id);
        $this->db->where("companyID", current_companyID());
        $result = $this->db->get()->row_array();
        return $result;
    }

    function get_salaryVariableDeclarationMaster($id)
    {
        $this->db->select("*");
        $this->db->from("srp_erp_variable_salarydeclarationmaster");
        $this->db->where("salarydeclarationMasterID", $id);
        $this->db->where("companyID", current_companyID());
        $result = $this->db->get()->row_array();
        return $result;
    }

    function ConfirmSalaryDeclaration()
    {
        $companyID = current_companyID();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdUserName = current_employee();
        $createdDateTime = current_date();
        $masterID = trim($this->input->post('masterID') ?? '');
        $salaryControlCheckPass = $this->input->post('salaryControlCheckPass');

        $masterDetail = $this->get_salaryDeclarationMaster($masterID);
        if ($masterDetail['approvedYN'] == 1) {
            return ['e', 'This document is already approved'];
        } else if ($masterDetail['confirmedYN'] == 1) {
            return ['e', 'This document is already confirmed'];
        }

        if($salaryControlCheckPass == 0){
            $salaryControl = getPolicyValues('EGS', 'All'); //Employee grade wise salary control
            if($salaryControl == 1){
                $salaryControlStatus = $this->salaryControlGradeWiseCheck($masterID, $masterDetail);
                if($salaryControlStatus[0] == 'e'){
                    $msg = $salaryControlStatus[1];
                    return ['m', $msg];
                }
            }
        }


        $declarationData = $this->db->query("SELECT declarationDetailID, declarationMasterID, employeeNo, salaryCategoryID,
                                             transactionAmount, effectiveDate, payDate
                                             FROM srp_erp_salarydeclarationdetails AS detailTB
                                             WHERE declarationMasterID ={$masterID} AND detailTB.companyID={$companyID}
                                             ORDER BY employeeNo")->result_array();

        /***Get all salary category in this salary declaration ***/ //, '' AS payGroups
        $salaryCats = $this->db->query("SELECT salaryCategoryID, '' AS payGroups FROM srp_erp_salarydeclarationdetails AS detailTB
                                        WHERE declarationMasterID={$masterID} AND detailTB.companyID={$companyID}
                                        GROUP BY salaryCategoryID")->result_array();

        /***Get all SSO in this company ***/
        $payGroups = $this->db->query("SELECT payGroup.payGroupID, formulaString, payGroupCategories
                                       FROM srp_erp_paygroupmaster AS payGroup
                                       JOIN srp_erp_paygroupformula AS payFormula ON payFormula.payGroupID=payGroup.payGroupID
                                       AND payFormula.companyID={$companyID}
                                       JOIN srp_erp_socialinsurancemaster AS ssoMaster ON ssoMaster.socialInsuranceID = payGroup.socialInsuranceID
                                       AND ssoMaster.companyID={$companyID}
                                       WHERE payGroup.companyID={$companyID} AND payGroup.socialInsuranceID IS NOT NULL")->result_array();

        foreach ($payGroups as $keyPay => $group) {
            $categories = payGroupSalaryCategories_decode($group);
            /** Get all salary categories related to the SSO formula **/
            foreach ($salaryCats as $key_cat => $salaryCats_row) {
                /** if the salary category is in this SSO formula adding the payGroupID to the $salaryCats => payGroups array  **/
                if (in_array($salaryCats_row['salaryCategoryID'], $categories)) {

                    if (is_array($salaryCats[$key_cat]['payGroups'])) {
                        array_push($salaryCats[$key_cat]['payGroups'], $group['payGroupID']);
                    } else {
                        $salaryCats[$key_cat]['payGroups'] = array($group['payGroupID']);
                    }
                }
            }
        }

        $salaryCats = array_group_by($salaryCats, 'salaryCategoryID');

        $this->db->trans_begin();
        $this->db->where(array('sdMasterID' => $masterID, 'companyID' => $companyID))->delete('srp_erp_pay_balancessopayment');

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;

        $totalWorkingDays = getPolicyValues('SCD', 'All');
        $totalWorkingDays = (empty($totalWorkingDays)) ? 'totalWorkingDays' : $totalWorkingDays;
        $totalWorkingDays = (trim($totalWorkingDays) == 'LAST_DAY(effectiveDate)') ? 'totalWorkingDays' : $totalWorkingDays;

        foreach ($declarationData as $key => $row) {
            $detailID = $row['declarationDetailID'];
            $empID = $row['employeeNo'];
            $categoryID = $row['salaryCategoryID'];
            $tr_amount = (!empty($row['transactionAmount'])) ? str_replace(',', '', $row['transactionAmount']) : 0;
            $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];
            $payGroups = null;

            /*** balance SSO payment ***/
            if (array_key_exists($categoryID, $salaryCats)) {
                if (array_key_exists('payGroups', $salaryCats[$categoryID][0])) {
                    $payGroups = $salaryCats[$categoryID][0]['payGroups'];
                }
            }
            if (!empty($payGroups)) {
                $effDate = $row['effectiveDate'];
                $payDate = $row['payDate'];
                $balanceSSOAmount = 0;
                $effDate1 = date('Y-m-01', strtotime($effDate));
                $payDate1 = date('Y-m-01', strtotime($payDate));
                $effDay = date('d', strtotime($effDate));

                if ($effDate1 == $payDate1 && $effDay != '01') {
                    /************************************************************************
                     * salaryProportionDays == 1 means
                     * formula will be (Salary / no of day in month) * proportion days
                     ***********************************************************************/
                    if ($salaryProportionDays == 1) {
                        $totalDaysInEffectiveMonth = date('t', strtotime($effDate));
                        $proportionDays = ($totalDaysInEffectiveMonth - $effDay) + 1;
                        $proportionVal = ($tr_amount / $totalDaysInEffectiveMonth) * $proportionDays;
                        $balanceSSOAmount = round(($tr_amount - $proportionVal), $dPlace);
                        //$balanceSSOAmount = $proportionDays;
                    } else {
                        $totalDaysInEffectiveMonth = ($totalWorkingDays == 'totalWorkingDays') ? date('t', strtotime($effDate)) + 1 : ($totalWorkingDays + 1);
                        $proportionDays = $totalDaysInEffectiveMonth - $effDay;
                        $proportionVal = ($tr_amount * 12 / $salaryProportionDays) * $proportionDays;
                        $balanceSSOAmount = round(($tr_amount - $proportionVal), $dPlace);
                    }
                } else if ($effDate1 < $payDate1) {
                    $datetime1 = new DateTime($effDate1);
                    $datetime2 = new DateTime($payDate);
                    $interval = $datetime2->diff($datetime1);
                    $totalMonth = (($interval->format('%y') * 12) + $interval->format('%m'));
                    $balanceSSOAmount += ($tr_amount * $totalMonth);
                }

                if ($balanceSSOAmount != 0) {
                    $detailSSOPayment = array();
                    foreach ($payGroups as $payGroupKey => $payGroupRow) {
                        $detailSSOPayment[$payGroupKey]['empID'] = $empID;
                        $detailSSOPayment[$payGroupKey]['sdMasterID'] = $masterID;
                        $detailSSOPayment[$payGroupKey]['declarationDetailID'] = $detailID;
                        $detailSSOPayment[$payGroupKey]['payGroupID'] = $payGroupRow;
                        $detailSSOPayment[$payGroupKey]['fromDate'] = $effDate;
                        $detailSSOPayment[$payGroupKey]['balanceAmount'] = round($balanceSSOAmount, $dPlace);
                        $detailSSOPayment[$payGroupKey]['dueDate'] = $payDate;
                        $detailSSOPayment[$payGroupKey]['companyID'] = $companyID;
                        $detailSSOPayment[$payGroupKey]['createdUserGroup'] = $createdUserGroup;
                        $detailSSOPayment[$payGroupKey]['createdPCID'] = $createdPCID;
                        $detailSSOPayment[$payGroupKey]['createdUserID'] = $createdUserID;
                        $detailSSOPayment[$payGroupKey]['createdDateTime'] = $createdDateTime;
                        $detailSSOPayment[$payGroupKey]['createdUserName'] = $createdUserName;
                    }
                    $this->db->insert_batch('srp_erp_pay_balancessopayment', $detailSSOPayment);
                }
            }
        }

        if ($this->db->trans_status() === true) {
            $this->load->library('approvals');
            $documentCode = $masterDetail['documentSystemCode'];
            $documentCodeField = 'documentSystemCode';
            $table = 'srp_erp_salarydeclarationmaster';
            $primaryColumn = 'salarydeclarationMasterID';
            $documentName = 'Salary Declaration';
            $documentDate = $masterDetail['documentDate'];

            $validate_code = validate_code_duplication($documentCode, $documentCodeField, $masterID,$primaryColumn, $table);
            if(!empty($validate_code)) {
                return ['e', 'The document Code Already Exist.(' . $validate_code . ')'];
            }

            $isAutoApproval = get_document_auto_approval('SD');
            if ($isAutoApproval == 0) { // If auto approval
                $this->approvals->auto_approve($masterID, $table, $primaryColumn, 'SD', $documentCode, $documentDate);
                $this->insert_records_to_declaration_table($masterID, $masterDetail);
                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approved successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval process'];
                }
            }

            $approvals_status = $this->approvals->CreateApproval('SD', $masterID, $documentCode, $documentName, $table, $primaryColumn, 0, $documentDate);
            $this->db->trans_complete();
            if ($approvals_status == 1) {
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approvals created successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval created process'];
                }
            }
            if ($approvals_status == 3) {
                $this->db->trans_rollback();
                return ['w', 'There are no users exist to perform \'Salary Declaration\' approval for this company.'];
            } else {
                $this->db->trans_rollback();
                return ['e', 'Error in process'];
            }
        } else {
            $this->db->trans_rollback();
            return array('s', 'Failed to update balance amounts');
        }
    }

    function VariableConfirmSalaryDeclaration(){

        
        $companyID = current_companyID();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdUserName = current_employee();
        $createdDateTime = current_date();
        $masterID = trim($this->input->post('masterID') ?? '');
        $salaryControlCheckPass = $this->input->post('salaryControlCheckPass');

        $masterDetail = $this->get_salaryVariableDeclarationMaster($masterID);
        if ($masterDetail['approvedYN'] == 1) {
            return ['e', 'This document is already approved'];
        } else if ($masterDetail['confirmedYN'] == 1) {
            return ['e', 'This document is already confirmed'];
        }

     

        if($salaryControlCheckPass == 0){
            $salaryControl = getPolicyValues('EGS', 'All'); //Employee grade wise salary control
            if($salaryControl == 1){
                $salaryControlStatus = $this->salaryControlGradeWiseCheck($masterID, $masterDetail);
                if($salaryControlStatus[0] == 'e'){
                    $msg = $salaryControlStatus[1];
                    return ['m', $msg];
                }
            }
        }


        $declarationData = $this->db->query("SELECT declarationDetailID, declarationMasterID, employeeNo, salaryCategoryID,monthlyDeclarationID,
                                             transactionAmount, effectiveDate, payDate
                                             FROM srp_erp_variable_salarydeclarationdetails AS detailTB
                                             WHERE declarationMasterID ={$masterID} AND detailTB.companyID={$companyID}
                                             ORDER BY employeeNo")->result_array();

        /***Get all salary category in this salary declaration ***/ //, '' AS payGroups
        $salaryCats = $this->db->query("SELECT monthlyDeclarationID, '' AS payGroups 
                                        FROM srp_erp_variable_salarydeclarationdetails AS detailTB
                                        WHERE declarationMasterID={$masterID} AND detailTB.companyID={$companyID}
                                        GROUP BY monthlyDeclarationID")->result_array();

        

        /***Get all SSO in this company ***/
        $payGroups = $this->db->query("SELECT payGroup.payGroupID, formulaString, payGroupCategories
                                       FROM srp_erp_paygroupmaster AS payGroup
                                       JOIN srp_erp_paygroupformula AS payFormula ON payFormula.payGroupID=payGroup.payGroupID
                                       AND payFormula.companyID={$companyID}
                                       JOIN srp_erp_socialinsurancemaster AS ssoMaster ON ssoMaster.socialInsuranceID = payGroup.socialInsuranceID
                                       AND ssoMaster.companyID={$companyID}
                                       WHERE payGroup.companyID={$companyID} AND payGroup.socialInsuranceID IS NOT NULL")->result_array();

        

        foreach ($payGroups as $keyPay => $group) {
            $categories = payGroupSalaryCategories_decode($group);
            /** Get all salary categories related to the SSO formula **/
            foreach ($salaryCats as $key_cat => $salaryCats_row) {
                /** if the salary category is in this SSO formula adding the payGroupID to the $salaryCats => payGroups array  **/
                if (in_array($salaryCats_row['monthlyDeclarationID'], $categories)) {

                    if (is_array($salaryCats[$key_cat]['payGroups'])) {
                        array_push($salaryCats[$key_cat]['payGroups'], $group['payGroupID']);
                    } else {
                        $salaryCats[$key_cat]['payGroups'] = array($group['payGroupID']);
                    }
                }
            }
        }

        $salaryCats = array_group_by($salaryCats, 'monthlyDeclarationID');

        $this->db->trans_begin();
        //$this->db->where(array('sdMasterID' => $masterID, 'companyID' => $companyID))->delete('srp_erp_pay_balancessopayment');

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;

        $totalWorkingDays = getPolicyValues('SCD', 'All');
        $totalWorkingDays = (empty($totalWorkingDays)) ? 'totalWorkingDays' : $totalWorkingDays;
        $totalWorkingDays = (trim($totalWorkingDays) == 'LAST_DAY(effectiveDate)') ? 'totalWorkingDays' : $totalWorkingDays;

        foreach ($declarationData as $key => $row) {
            $detailID = $row['declarationDetailID'];
            $empID = $row['employeeNo'];
            $categoryID = $row['salaryCategoryID'];
            $monthlyDeclarationID = $row['monthlyDeclarationID'];
            $tr_amount = (!empty($row['transactionAmount'])) ? str_replace(',', '', $row['transactionAmount']) : 0;
            $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];
            $payGroups = null;

            /*** balance SSO payment ***/
            if (array_key_exists($categoryID, $salaryCats)) {
                if (array_key_exists('payGroups', $salaryCats[$categoryID][0])) {
                    $payGroups = $salaryCats[$categoryID][0]['payGroups'];
                }
            }
            if (!empty($payGroups)) {
                $effDate = $row['effectiveDate'];
                $payDate = $row['payDate'];
                $balanceSSOAmount = 0;
                $effDate1 = date('Y-m-01', strtotime($effDate));
                $payDate1 = date('Y-m-01', strtotime($payDate));
                $effDay = date('d', strtotime($effDate));

                if ($effDate1 == $payDate1 && $effDay != '01') {
                    /************************************************************************
                     * salaryProportionDays == 1 means
                     * formula will be (Salary / no of day in month) * proportion days
                     ***********************************************************************/
                    if ($salaryProportionDays == 1) {
                        $totalDaysInEffectiveMonth = date('t', strtotime($effDate));
                        $proportionDays = ($totalDaysInEffectiveMonth - $effDay) + 1;
                        $proportionVal = ($tr_amount / $totalDaysInEffectiveMonth) * $proportionDays;
                        $balanceSSOAmount = round(($tr_amount - $proportionVal), $dPlace);
                        //$balanceSSOAmount = $proportionDays;
                    } else {
                        $totalDaysInEffectiveMonth = ($totalWorkingDays == 'totalWorkingDays') ? date('t', strtotime($effDate)) + 1 : ($totalWorkingDays + 1);
                        $proportionDays = $totalDaysInEffectiveMonth - $effDay;
                        $proportionVal = ($tr_amount * 12 / $salaryProportionDays) * $proportionDays;
                        $balanceSSOAmount = round(($tr_amount - $proportionVal), $dPlace);
                    }
                } else if ($effDate1 < $payDate1) {
                    $datetime1 = new DateTime($effDate1);
                    $datetime2 = new DateTime($payDate);
                    $interval = $datetime2->diff($datetime1);
                    $totalMonth = (($interval->format('%y') * 12) + $interval->format('%m'));
                    $balanceSSOAmount += ($tr_amount * $totalMonth);
                }

                if ($balanceSSOAmount != 0) {
                    $detailSSOPayment = array();
                    foreach ($payGroups as $payGroupKey => $payGroupRow) {
                        $detailSSOPayment[$payGroupKey]['empID'] = $empID;
                        $detailSSOPayment[$payGroupKey]['sdMasterID'] = $masterID;
                        $detailSSOPayment[$payGroupKey]['declarationDetailID'] = $detailID;
                        $detailSSOPayment[$payGroupKey]['payGroupID'] = $payGroupRow;
                        $detailSSOPayment[$payGroupKey]['fromDate'] = $effDate;
                        $detailSSOPayment[$payGroupKey]['balanceAmount'] = round($balanceSSOAmount, $dPlace);
                        $detailSSOPayment[$payGroupKey]['dueDate'] = $payDate;
                        $detailSSOPayment[$payGroupKey]['companyID'] = $companyID;
                        $detailSSOPayment[$payGroupKey]['createdUserGroup'] = $createdUserGroup;
                        $detailSSOPayment[$payGroupKey]['createdPCID'] = $createdPCID;
                        $detailSSOPayment[$payGroupKey]['createdUserID'] = $createdUserID;
                        $detailSSOPayment[$payGroupKey]['createdDateTime'] = $createdDateTime;
                        $detailSSOPayment[$payGroupKey]['createdUserName'] = $createdUserName;
                    }
                    $this->db->insert_batch('srp_erp_pay_balancessopayment', $detailSSOPayment);
                }
            }
        }

        if ($this->db->trans_status() === true) {
            $this->load->library('approvals');
            $documentCode = $masterDetail['documentSystemCode'];
            $documentCodeField = 'documentSystemCode';
            $table = 'srp_erp_variable_salarydeclarationmaster';
            $primaryColumn = 'salarydeclarationMasterID';
            $documentName = 'Variable Salary Declaration';
            $documentDate = $masterDetail['documentDate'];

            $validate_code = validate_code_duplication($documentCode, $documentCodeField, $masterID,$primaryColumn, $table);
            if(!empty($validate_code)) {
                return ['e', 'The document Code Already Exist.(' . $validate_code . ')'];
            }

            $isAutoApproval = get_document_auto_approval('SVD');
            if ($isAutoApproval == 0) { // If auto approval
                $this->approvals->auto_approve($masterID, $table, $primaryColumn, 'SVD', $documentCode, $documentDate);
                $this->insert_records_to_declaration_table_variable($masterID, $masterDetail);
                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approved successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval process'];
                }
            }

            $approvals_status = $this->approvals->CreateApproval('SVD', $masterID, $documentCode, $documentName, $table, $primaryColumn, 0, $documentDate);
            $this->db->trans_complete();
            if ($approvals_status == 1) {
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approvals created successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval created process'];
                }
            }
            if ($approvals_status == 3) {
                $this->db->trans_rollback();
                return ['w', 'There are no users exist to perform \'Variable Salary Declaration\' approval for this company.'];
            } else {
                $this->db->trans_rollback();
                return ['e', 'Error in process'];
            }
        } else {
            $this->db->trans_rollback();
            return array('s', 'Failed to update balance amounts');
        }

    }

    function salaryControlGradeWiseCheck($masterID, $masterDetail){
        $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];
        $companyID = current_companyID();

        $validate = $this->db->query("SELECT emp, gradeDescription, salaryDescription, oldAmount, decAmount, startRange, endRange
                                FROM srp_erp_employeegrade AS gradeTb
                                JOIN (                                
                                    SELECT CONCAT(ECode, ' - ', Ename2) emp, catTb.salaryDescription, salaryGradeID,
                                    IFNULL(decAmount,0) AS oldAmount, amount AS decAmount, startRange, endRange,
                                    IF(
                                        ( (IFNULL(decAmount,0) + amount) BETWEEN startRange AND endRange ), 'Y', 'N'
                                    ) AS validDeclaration
                                    FROM srp_erp_salarydeclarationdetails AS decDet
                                    LEFT JOIN (
                                        SELECT employeeNo AS empID, salaryCategoryID AS catID , SUM(amount) AS decAmount 
                                        FROM srp_erp_pay_salarydeclartion WHERE companyID = {$companyID}
                                        GROUP BY employeeNo, salaryCategoryID
                                    ) AS appTb ON appTb.empID = decDet.employeeNo AND appTb.catID = decDet.salaryCategoryID
                                    JOIN srp_employeesdetails ed ON ed.EIdNo = decDet.employeeNo  
                                    JOIN srp_erp_pay_salarycategories AS catTb ON decDet.salaryCategoryID=catTb.salaryCategoryID
                                    JOIN (
                                        SELECT salaryGradeID, categoryID, startRange, endRange 
                                        FROM srp_erp_employeegradesalary WHERE companyID = {$companyID}
                                    ) AS grSalary ON ed.gradeID = grSalary.salaryGradeID AND decDet.salaryCategoryID = grSalary.categoryID
                                    WHERE declarationMasterID = {$masterID} HAVING validDeclaration = 'N'
                                    ORDER BY employeeNo, catTb.salaryDescription                                
                                ) AS validateTb ON validateTb.salaryGradeID = gradeTb.gradeID")->result_array();

        if(!empty($validate)){
            $msg = '<div style="width: 800px"></div> Following declaration are not match with grade wise salary ranges.<br/><br/>';
            $msg .= '<table class="'.table_class().'">';
            $msg .= '<thead>';
            $msg .= '<tr><th>Employee</th><th>Grade</th><th>Category</th><th>Old Amount</th><th>New Declaration</th><th>Total</th>';
            $msg .= '<th>Start range</th><th>End range</th></tr>';
            $msg .= '</thead>';
            $msg .= '<tbody>';

            foreach($validate as $row){
                $msg .= '<tr>';
                $msg .= '<td>'.$row['emp'].'</td>';
                $msg .= '<td>'.$row['gradeDescription'].'</td>';
                $msg .= '<td>'.$row['salaryDescription'].'</td>';
                $msg .= '<td style="text-align: right">'.number_format($row['oldAmount'], $dPlace).'</td>';
                $msg .= '<td style="text-align: right">'.number_format($row['decAmount'], $dPlace).'</td>';
                $msg .= '<td style="text-align: right">'.number_format(($row['oldAmount'] + $row['decAmount']), $dPlace).'</td>';
                $msg .= '<td style="text-align: right">'.number_format($row['startRange'], $dPlace).'</td>';
                $msg .= '<td style="text-align: right">'.number_format($row['endRange'], $dPlace).'</td>';
                $msg .= '</tr>';
            }

            $msg .= '</thead>';
            $msg .= '</table>';
            $msg .= '</div>';
            return ['e', $msg];
        }

        return ['s'];
    }

    function save_salary_declaration_approval()
    {

        $this->db->trans_start();
        $this->load->library('approvals');
        $system_code = trim($this->input->post('salaryOrderID') ?? '');
        $level_id = trim($this->input->post('Level') ?? '');
        $status = trim($this->input->post('approval_status') ?? '');
        $comments = trim($this->input->post('comments') ?? '');
        $isVariable = trim($this->input->post('isVariable') ?? '');

        if($isVariable){
            $doc_code = 'SVD';
            $masterDetail = $this->get_salaryVariableDeclarationMaster($system_code);
        }else{
            $doc_code = 'SD';
            $masterDetail = $this->get_salaryDeclarationMaster($system_code);
        }
        

        $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, $doc_code);


        if ($approvals_status == 1) {

            if($isVariable){
                $this->insert_records_to_declaration_table_variable($system_code, $masterDetail);
            }else{
                $this->insert_records_to_declaration_table($system_code, $masterDetail);
            }
            

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return ['e', 'Error In Salary Declaration Approval Process.'];
            } else {
                $this->db->trans_commit();
                return ['s', 'Salary Declaration Approved Successfully.'];
            }

        } else if ($approvals_status == 2) {
            return ['s', 'Salary Declaration Approval : Level ' . $level_id . ' Successfully.'];
        } else if ($approvals_status == 3) {
            return ['s', '[ ' . $masterDetail['documentSystemCode'] . ' ] Approvals  Reject Process Successfully done.'];
        } else if ($approvals_status == 5) {
            return ['w', '[ ' . $masterDetail['documentSystemCode'] . ' ] Previous Level Approval Not Finished.'];
        } else {
            return ['e', 'Error in approvals Of  [ ' . $masterDetail['documentSystemCode'] . ' ] ', $approvals_status];
        }

    }

    function insert_records_to_declaration_table($masterID, $masterDetail)
    {
        $this->db->select('*');
        $this->db->from('srp_erp_salarydeclarationdetails');
        $this->db->where('declarationMasterID', $masterID);
        $details_arr = $this->db->get()->result_array();

        $createdUserID = $this->common_data['current_userID'];
        $createdUserName = $this->common_data['current_user'];
        $createdUserGroup = $this->common_data['user_group'];
        $createdPCID = current_pc();
        $createdDateTime = current_date();

        $declarationDet_arr = array();
        for ($i = 0; $i < count($details_arr); $i++) {
            $declarationDet_arr[$i]['sdMasterID'] = $masterID;
            $declarationDet_arr[$i]['sdDetailID'] = $details_arr[$i]['declarationDetailID'];
            $declarationDet_arr[$i]['employeeNo'] = $details_arr[$i]['employeeNo'];
            $declarationDet_arr[$i]['accessGroupID'] = $details_arr[$i]['accessGroupID'];
            $declarationDet_arr[$i]['salaryCategoryID'] = $details_arr[$i]['salaryCategoryID'];
            $declarationDet_arr[$i]['transactionCurrencyID'] = $details_arr[$i]['transactionCurrencyID'];
            $declarationDet_arr[$i]['transactionCurrency'] = $details_arr[$i]['transactionCurrency'];
            $declarationDet_arr[$i]['transactionER'] = $details_arr[$i]['transactionER'];
            $declarationDet_arr[$i]['transactionCurrencyDecimalPlaces'] = $details_arr[$i]['transactionCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['transactionAmount'] = $details_arr[$i]['transactionAmount'];
            $declarationDet_arr[$i]['amount'] = $details_arr[$i]['amount'];
            $declarationDet_arr[$i]['percentage'] = $details_arr[$i]['percentage'];
            $declarationDet_arr[$i]['effectiveDate'] = $details_arr[$i]['effectiveDate'];
            $declarationDet_arr[$i]['payDate'] = $details_arr[$i]['payDate'];
            $declarationDet_arr[$i]['narration'] = $details_arr[$i]['narration'];
            $declarationDet_arr[$i]['companyLocalCurrencyID'] = $details_arr[$i]['companyLocalCurrencyID'];
            $declarationDet_arr[$i]['companyLocalCurrency'] = $details_arr[$i]['companyLocalCurrency'];
            $declarationDet_arr[$i]['companyLocalER'] = $details_arr[$i]['companyLocalER'];
            $declarationDet_arr[$i]['companyLocalCurrencyDecimalPlaces'] = $details_arr[$i]['companyLocalCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyLocalAmount'] = $details_arr[$i]['companyLocalAmount'];
            $declarationDet_arr[$i]['companyReportingCurrencyID'] = $details_arr[$i]['companyReportingCurrencyID'];
            $declarationDet_arr[$i]['companyReportingCurrency'] = $details_arr[$i]['companyReportingCurrency'];
            $declarationDet_arr[$i]['companyReportingER'] = $details_arr[$i]['companyReportingER'];
            $declarationDet_arr[$i]['companyReportingCurrencyDecimalPlaces'] = $details_arr[$i]['companyReportingCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyReportingAmount'] = $details_arr[$i]['companyReportingAmount'];
            $declarationDet_arr[$i]['confirmedYN'] = 1;
            $declarationDet_arr[$i]['confirmedByEmpID'] = $masterDetail['confirmedByEmpID'];
            $declarationDet_arr[$i]['confirmedByName'] = $masterDetail['confirmedByName'];
            $declarationDet_arr[$i]['confirmedDate'] = $masterDetail['confirmedDate'];
            $declarationDet_arr[$i]['companyID'] = $details_arr[$i]['companyID'];
            $declarationDet_arr[$i]['companyCode'] = $details_arr[$i]['companyCode'];
            $declarationDet_arr[$i]['createdUserGroup'] = $createdUserGroup;
            $declarationDet_arr[$i]['createdUserID'] = $createdUserID;
            $declarationDet_arr[$i]['createdPCID'] = $createdPCID;
            $declarationDet_arr[$i]['createdDateTime'] = $createdDateTime;
            $declarationDet_arr[$i]['createdUserName'] = $createdUserName;
        }

        if (!empty($declarationDet_arr)) {
            $declarationDet_arr = array_values($declarationDet_arr);
            $tableName = ($masterDetail['isPayrollCategory'] == 1) ? 'srp_erp_pay_salarydeclartion' : 'srp_erp_non_pay_salarydeclartion';
            $this->db->insert_batch($tableName, $declarationDet_arr);
        }
    }

    function insert_records_to_declaration_table_variable($masterID, $masterDetail)
    {
        $this->db->select('*');
        $this->db->from('srp_erp_variable_salarydeclarationdetails');
        $this->db->where('declarationMasterID', $masterID);
        $details_arr = $this->db->get()->result_array();

        $createdUserID = $this->common_data['current_userID'];
        $createdUserName = $this->common_data['current_user'];
        $createdUserGroup = $this->common_data['user_group'];
        $createdPCID = current_pc();
        $createdDateTime = current_date();

        $declarationDet_arr = array();
        for ($i = 0; $i < count($details_arr); $i++) {
            $declarationDet_arr[$i]['sdMasterID'] = $masterID;
            $declarationDet_arr[$i]['sdDetailID'] = $details_arr[$i]['declarationDetailID'];
            $declarationDet_arr[$i]['employeeNo'] = $details_arr[$i]['employeeNo'];
            $declarationDet_arr[$i]['accessGroupID'] = $details_arr[$i]['accessGroupID'];
            $declarationDet_arr[$i]['salaryCategoryID'] = $details_arr[$i]['salaryCategoryID'];
            $declarationDet_arr[$i]['monthlyDeclarationID'] = $details_arr[$i]['monthlyDeclarationID'];
            $declarationDet_arr[$i]['transactionCurrencyID'] = $details_arr[$i]['transactionCurrencyID'];
            $declarationDet_arr[$i]['transactionCurrency'] = $details_arr[$i]['transactionCurrency'];
            $declarationDet_arr[$i]['transactionER'] = $details_arr[$i]['transactionER'];
            $declarationDet_arr[$i]['transactionCurrencyDecimalPlaces'] = $details_arr[$i]['transactionCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['transactionAmount'] = $details_arr[$i]['transactionAmount'];
            $declarationDet_arr[$i]['amount'] = $details_arr[$i]['amount'];
            $declarationDet_arr[$i]['percentage'] = $details_arr[$i]['percentage'];
            $declarationDet_arr[$i]['effectiveDate'] = $details_arr[$i]['effectiveDate'];
            $declarationDet_arr[$i]['payDate'] = $details_arr[$i]['payDate'];
            $declarationDet_arr[$i]['narration'] = $details_arr[$i]['narration'];
            $declarationDet_arr[$i]['companyLocalCurrencyID'] = $details_arr[$i]['companyLocalCurrencyID'];
            $declarationDet_arr[$i]['companyLocalCurrency'] = $details_arr[$i]['companyLocalCurrency'];
            $declarationDet_arr[$i]['companyLocalER'] = $details_arr[$i]['companyLocalER'];
            $declarationDet_arr[$i]['companyLocalCurrencyDecimalPlaces'] = $details_arr[$i]['companyLocalCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyLocalAmount'] = $details_arr[$i]['companyLocalAmount'];
            $declarationDet_arr[$i]['companyReportingCurrencyID'] = $details_arr[$i]['companyReportingCurrencyID'];
            $declarationDet_arr[$i]['companyReportingCurrency'] = $details_arr[$i]['companyReportingCurrency'];
            $declarationDet_arr[$i]['companyReportingER'] = $details_arr[$i]['companyReportingER'];
            $declarationDet_arr[$i]['companyReportingCurrencyDecimalPlaces'] = $details_arr[$i]['companyReportingCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyReportingAmount'] = $details_arr[$i]['companyReportingAmount'];
            $declarationDet_arr[$i]['confirmedYN'] = 1;
            $declarationDet_arr[$i]['confirmedByEmpID'] = $masterDetail['confirmedByEmpID'];
            $declarationDet_arr[$i]['confirmedByName'] = $masterDetail['confirmedByName'];
            $declarationDet_arr[$i]['confirmedDate'] = $masterDetail['confirmedDate'];
            $declarationDet_arr[$i]['companyID'] = $details_arr[$i]['companyID'];
            $declarationDet_arr[$i]['companyCode'] = $details_arr[$i]['companyCode'];
            $declarationDet_arr[$i]['createdUserGroup'] = $createdUserGroup;
            $declarationDet_arr[$i]['createdUserID'] = $createdUserID;
            $declarationDet_arr[$i]['createdPCID'] = $createdPCID;
            $declarationDet_arr[$i]['createdDateTime'] = $createdDateTime;
            $declarationDet_arr[$i]['createdUserName'] = $createdUserName;
        }

        if (!empty($declarationDet_arr)) {
            $declarationDet_arr = array_values($declarationDet_arr);
            $tableName = ($masterDetail['isPayrollCategory'] == 1) ? 'srp_erp_pay_variable_salarydeclartion' : 'srp_erp_non_pay_salarydeclartion';
            $this->db->insert_batch($tableName, $declarationDet_arr);
        }
    }

    function getDeclarationmasterCurrency_edit()
    {
        $this->db->select('salarydeclarationMasterID,transactionCurrencyID,transactionCurrency');
        $this->db->where('salarydeclarationMasterID', $this->input->post('masterID'));
        return $this->db->get('srp_erp_salarydeclarationmaster')->row_array();
    }

    function delete_salary_declaration()
    {
        $id = trim($this->input->post('detailID') ?? '');
        $isVariable = trim($this->input->post('isVariable') ?? '');
        $companyID = current_companyID();

        $this->db->trans_start();

        if($isVariable){
            $this->db->delete('srp_erp_variable_salarydeclarationdetails', ['declarationDetailID' => $id, 'companyID' => $companyID]);
            // $this->db->delete('srp_erp_pay_balancepayment', ['declarationDetailID' => $id, 'companyID' => $companyID]);
            // $this->db->delete('srp_erp_pay_balancessopayment', ['declarationDetailID' => $id, 'companyID' => $companyID]);
        }else{
            $this->db->delete('srp_erp_salarydeclarationdetails', ['declarationDetailID' => $id, 'companyID' => $companyID]);
            $this->db->delete('srp_erp_pay_balancepayment', ['declarationDetailID' => $id, 'companyID' => $companyID]);
            $this->db->delete('srp_erp_pay_balancessopayment', ['declarationDetailID' => $id, 'companyID' => $companyID]);
        }
       

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return ['e', 'Fail to delete salary declaration'];
        } else {
            $this->db->trans_commit();
            return ['s', 'Successfully deleted'];
        }
    }

    function save_pay_slabs_master()
    {
        $this->load->library('sequence');
        $currency_code = explode('|', trim($this->input->post('currency_code') ?? ''));

        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('documentDate');
        $documentDate = input_format_date($invDueDate, $date_format_policy);

        $data['documentID'] = 'SLM';
        $data['documentSystemCode'] = $this->sequence->sequence_generator("SLM");
        //$data['documentDate'] = trim($this->input->post('documentDate') ?? '');
        $data['documentDate'] = trim($documentDate);
        $data['Description'] = trim($this->input->post('description') ?? '');
        $data['transactionCurrencyID'] = trim($this->input->post('MasterCurrency') ?? '');
        $data['transactionCurrency'] = trim($currency_code['0'] ?? '');
        $data['companyID'] = $this->common_data['company_data']['company_id'];
        $data['companyCode'] = $this->common_data['company_data']['company_code'];
        $data['createdUserGroup'] = $this->common_data['user_group'];
        $data['createdPCID'] = $this->common_data['current_pc'];
        $data['createdUserID'] = $this->common_data['current_userID'];
        $data['createdUserName'] = $this->common_data['current_user'];
        $data['createdDateTime'] = current_date();
        $this->db->insert('srp_erp_slabsmaster', $data);
        $last_id = $this->db->insert_id();
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->session->set_flashdata('e', 'Save Failed ' . $this->db->_error_message());
            $this->db->trans_rollback();
            return array('status' => false);
        } else {
            $this->session->set_flashdata('s', 'Save Successfully.');
            $this->db->trans_commit();
            return array('status' => true, 'last_id' => $last_id);
        }
    }

    function get_paySlabMaster($id)
    {
        $this->db->select("*");
        $this->db->from("srp_erp_slabsmaster");
        $this->db->where("slabsMasterID", $id);
        $result = $this->db->get()->row_array();
        return $result;
    }

    function save_pay_slabs_detail()
    {
        $data['slabsMasterID'] = trim($this->input->post('slabMasterID') ?? '');
        $data['rangeStartAmount'] = trim($this->input->post('start_amount') ?? '');
        $data['rangeEndAmount'] = trim($this->input->post('end_amount') ?? '');
        $data['percentage'] = trim($this->input->post('percentage') ?? '');
        $data['thresholdAmount'] = trim($this->input->post('threshold_amount') ?? '');
        $data['companyID'] = $this->common_data['company_data']['company_id'];
        $data['companyCode'] = $this->common_data['company_data']['company_code'];
        $data['createdUserGroup'] = $this->common_data['user_group'];
        $data['createdPCID'] = $this->common_data['current_pc'];
        $data['createdUserID'] = $this->common_data['current_userID'];
        $data['createdUserName'] = $this->common_data['current_user'];
        $data['createdDateTime'] = current_date();
        $this->db->insert('srp_erp_slabsdetail', $data);
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Record Created Successfully.', $this->input->post('slabMasterID'));
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Record Creating');
        }
    }

    function delete_payee_slab_detail()
    {
        $this->db->delete('srp_erp_slabsdetail', array('slabsDetailID' => trim($this->input->post('detailID') ?? '')));
        return true;
    }

    function delete_salary_declaration_master()
    {
        $this->db->trans_start();

        $masterID = trim($this->input->post('masterID') ?? '');
        $isVariable = trim($this->input->post('isVariable') ?? '');

        if($isVariable){

            $this->db->delete('srp_erp_variable_salarydeclarationmaster', array('salarydeclarationMasterID' => $masterID));
            $this->db->delete('srp_erp_variable_salarydeclarationdetails', array('declarationMasterID' => $masterID));

        }else{
            $this->db->delete('srp_erp_salarydeclarationmaster', array('salarydeclarationMasterID' => $masterID));
            $this->db->delete('srp_erp_salarydeclarationdetails', array('declarationMasterID' => $masterID));
            $this->db->delete('srp_erp_pay_balancepayment', array('sdMasterID' => $masterID));
            $this->db->delete('srp_erp_pay_balancessopayment', array('sdMasterID' => $masterID));
        }
       
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return ['s', 'Deleted successfully.'];
        } else {
            return ['e', 'Error in process.'];
        }
    }

    function save_leaveGroup()
    {
        $description = trim($this->input->post('description') ?? '');
        //$isHourly = $this->input->post('isMonthly');
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();
        $data = ['description' => $description, 'companyID' => $companyID];
        $dateTime = current_date();
        $this->db->trans_start();

        if ($masterID == '') {

            $isExist = $this->db->get_where('srp_erp_leavegroup', $data)->row_array();

            if (!empty($isExist)) {
                die(json_encode(['e', 'This description already exists']));
            }

            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = $dateTime;
            $data['timestamp'] = $dateTime;

            $this->db->insert('srp_erp_leavegroup', $data);
            $last_id = $this->db->insert_id();

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                die(json_encode(array('s', 'Leave group inserted successfully.', 'leaveGroupID' => $last_id)));
            } else {
                die(json_encode(array('e', 'Error in process.')));
            }

        } else {
            $isExist = $this->db->get_where('srp_erp_leavegroup', $data)->row('leaveGroupID');

            if (!empty($isExist)) {
                if ($isExist !== $masterID) {
                    die(json_encode(['e', 'This description already exists']));
                }
            }

            $data['description'] = $description;
            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedDateTime'] = $dateTime;
            $data['timestamp'] = $dateTime;

            $this->db->where('leaveGroupID', $masterID);
            $this->db->update('srp_erp_leavegroup', $data);


            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                die(json_encode(array('s', 'Leave group updated successfully', 'leaveGroupID' => $masterID)));
            } else {
                die(json_encode(array('e', 'Error in process.')));
            }
        }

    }


    /**
     *
     */
    public function save_leaveAccrual()
    {
        $this->db->trans_begin();
        $companyID = current_companyID();
        $description = $this->input->post('description');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $masterID = $this->input->post('masterID');
        $this->load->library('sequence');
        $code = $this->sequence->sequence_generator('LAM');
        $period = $this->input->post('period');
        $d = explode('-', $this->input->post('period'));
        $isexist = $this->db->query("SELECT
	GROUP_CONCAT(leaveaccrualMasterCode) as leaveaccrualMasterCode
FROM
	`srp_erp_leaveaccrualmaster`
	where
	leaveGroupID = $leaveGroupID
	AND policyMasterID =3 
	AND DATE_FORMAT( CONCAT( `YEAR`, '-', `MONTH`, '-01' ), '%Y-%m-%d' ) > '$d[1]-$d[0]-01'
	AND manualYN = 0")->row_array();

        if(!empty($isexist['leaveaccrualMasterCode']))
        {

            echo json_encode(array('e','Leave accrual is processed for future months ('.$isexist['leaveaccrualMasterCode'].')'));
            exit;
        }

        if ($masterID == '') {
            $data = array(
                'companyID' => current_companyID(),
                'leaveaccrualMasterCode' => $code,
                'documentID' => 'LAM',
                'description' => $description,
                'year' => $d[1],
                'month' => $d[0],
                'leaveGroupID' => $leaveGroupID,
                'createdUserGroup' => current_user_group(),
                'createDate' => date('Y-m-d H:i:s'),
                'createdpc' => current_pc(),
                /* 'confirmedYN' => 1,
                 'confirmedby' => $this->common_data['current_userID'],
                 'confirmedDate' => current_date(),*/
                'policyMasterID' => 3

            );
            $insert = $this->db->insert('srp_erp_leaveaccrualmaster', $data);
            if ($insert) {
                $last_id = $this->db->insert_id();
                $detail = array();
                $date = $d[1] . '-' . $d[0] . '-' . '01';
                $lastDate = date("Y-m-t", strtotime($date));

                //  $q="SELECT concat(EIdNo,'-',srp_erp_leavetype.leaveTypeID) as leaveTypeKey,EIdNo,srp_employeesdetails.leaveGroupID,srp_erp_leavegroupdetails.*,policyID FROM srp_employeesdetails INNER JOIN `srp_erp_leavegroupdetails` on srp_erp_leavegroupdetails.leaveGroupID=srp_employeesdetails.leaveGroupID  AND DateAssumed <='$date' INNER JOIN `srp_erp_leavetype` on srp_erp_leavegroupdetails.leaveTypeID=srp_erp_leavetype.leaveTypeID WHERE Erp_companyID = {$companyID} AND srp_employeesdetails.leaveGroupID IS NOT NULL AND srp_employeesdetails.leaveGroupID=$leaveGroupID";

                $q2 = "SELECT DateAssumed, CONCAT(EIdNo, '-', srp_erp_leavetype.leaveTypeID) AS leaveTypeKey, EIdNo, srp_employeesdetails.leaveGroupID, srp_erp_leavegroupdetails.*, policyID FROM `srp_employeesdetails` INNER JOIN `srp_erp_leavegroupdetails` ON srp_erp_leavegroupdetails.leaveGroupID = srp_employeesdetails.leaveGroupID AND policyMasterID=3 AND DateAssumed <= '{$lastDate}' INNER JOIN `srp_erp_leavetype` ON srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leavetype.leaveTypeID WHERE isDischarged !=1 AND Erp_companyID = {$companyID} AND srp_employeesdetails.leaveGroupID IS NOT NULL AND srp_employeesdetails.leaveGroupID = {$leaveGroupID} AND (EIdNo , srp_erp_leavetype.leaveTypeID) NOT IN (SELECT empID, leaveType FROM `srp_erp_leaveaccrualmaster` INNER JOIN srp_erp_leaveaccrualdetail ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID = srp_erp_leaveaccrualdetail.leaveaccrualMasterID WHERE year = {$d[1]} AND month = {$d[0]} AND srp_erp_leaveaccrualmaster.leaveaccrualMasterID != {$last_id} AND srp_erp_leaveaccrualmaster.manualYN=0 GROUP BY empID , leaveType)";

                $result = $this->db->query($q2)->result_array();

                //$entitled = $this->db->query("select leaveEntitledID, leaveTypeID, empID, concat(empID,'-',leaveTypeID) as entitleKey,  days, hourly, companyID, companyCode from  srp_erp_leaveentitled WHERE companyID={$companyID}")->result_array();


                $updateArr = array();
                $insert_Arr = array();
                if ($result) {
                    foreach ($result as $val) {
                        $daysEntitled = $val['noOfDays'];


                        $datas = array('leaveaccrualMasterID' => $last_id,
                            'empID' => $val['EIdNo'],
                            'leaveGroupID' => $leaveGroupID,
                            'leaveType' => $val['leaveTypeID'],
                            'daysEntitled' => $daysEntitled,

                            'description' => 'Leave Accrual ' . $this->input->post('period'),
                            'createDate' => date('Y-m-d H:i:s'),
                            'createdUserGroup' => current_user_group(),
                            'createdPCid' => current_pc()
                        );

                        /*    $keys = array_keys(array_column($entitled, 'entitleKey'), $val['leaveTypeKey']);
                            $new_array = array_map(function ($k) use ($entitled) {
                                return $entitled[$k];
                            }, $keys);*/


                        /*   if (!empty($new_array)) {
                               array_push($updateArr, array('leaveEntitledID' => $new_array[0]['leaveEntitledID'], 'days' => $new_array[0]['days'] + $daysEntitled, 'hourly' => $new_array[0]['hourly'] + $hoursEntitled));

                           } else {*/
                        array_push($insert_Arr, array(
                            'leaveTypeID' => $val['leaveTypeID'], 'empID' => $val['EIdNo'], 'days' => $daysEntitled, 'companyID' => current_companyID(), 'companyCode' => current_companyCode(), 'createdUserGroup' => '',
                            'createdPCID' => $this->common_data['current_pc'],
                            'createdUserID' => $this->common_data['current_userID'],
                            'createdDateTime' => current_date(),
                            'createdUserName' => $this->common_data['current_user'],
                        ));
                        /* }*/
                        array_push($detail, $datas);
                    }

                    /* if (!empty($updateArr)) {
                         $this->db->update_batch('srp_erp_leaveentitled', $updateArr, 'leaveEntitledID');
                     }*/
                    /* if (!empty($insert_Arr)) {
                         $this->db->insert_batch('srp_erp_leaveentitled', $insert_Arr);
                     }*/
                    $this->db->insert_batch('srp_erp_leaveaccrualdetail', $detail);
                }
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', 'Failed.');

                    echo json_encode(array('error' => 1));
                    exit;
                } else {
                    $this->db->trans_commit();
                    $this->session->set_flashdata('s', 'Leave Accrual inserted successfully.');

                    echo json_encode(array('error' => 0, 'leaveGroupID' => $last_id));
                    exit;
                }


            } else {
                $this->session->set_flashdata('e', 'Failed');

                echo json_encode(array('error' => 1));
                exit;
            }

        } else {


            //   $this->session->set_flashdata('s', 'Leave group inserted successfully.');

            echo json_encode(array('error' => 0, 'leaveGroupID' => $masterID));
            exit;
        }

    }

    function updatePayGroupDetails()
    {
        $salaryCategory = $this->input->post('salaryCategory');
        $payGroupId = $this->input->post('payGroupId');
        $companyID = current_companyID();
        $createdUserName = current_employee();
        $current_date = current_date();
        $current_pc = current_pc();
        $user_id = current_userID();
        $user_group = current_user_group();

        $payGroups = $this->db->query("SELECT salaryCategoryID FROM srp_erp_paygroupdetails WHERE groupID='{$payGroupId}'")->result_array();


        $pg = array();
        foreach ($payGroups as $payGroup) {
            $pg[] = $payGroup['salaryCategoryID'];
        }

        foreach ($salaryCategory as $item) {
            if (in_array($item, $pg)) {
                continue;
            }

            $data['groupID'] = $payGroupId;
            $data['salaryCategoryID'] = $item;
            $data['companyID'] = $companyID;
            $data['companyCode'] = $companyID;
            $data['createdUserGroup'] = $user_group;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $user_id;
            $data['createdDateTime'] = $current_date;
            $data['createdUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            $this->db->insert('srp_erp_paygroupdetails', $data);
            return array('s', 'Record Created Successfully.');
        }

    }

    function saveFormula()
    {
        $formulaOriginal = $this->input->post('formulaOriginal');
        $formulaText = $this->input->post('formulaText');
        $payGroupID = $this->input->post('payGroupID');
        $salaryCategories = $this->input->post('salaryCategories');
        $companyID = current_companyID();
        $createdUserName = current_employee();
        $current_date = current_date();
        $current_pc = current_pc();
        $user_id = current_userID();
        $user_group = current_user_group();

        $data['payGroupID'] = $payGroupID;
        $data['formulaString'] = $formulaOriginal;
        $data['formula'] = $formulaText;
        $data['salaryCategories'] = $salaryCategories;

        $isHas = $this->db->query("SELECT * FROM srp_erp_paygroupformula WHERE payGroupID = '{$payGroupID}' AND companyID = '{$companyID}'")->row_array();
        if ($isHas) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $user_id;
            $data['modifiedDateTime'] = $current_date;
            $data['modifiedUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            $this->db->where('payGroupID', $payGroupID)->where('companyID', $companyID)->update('srp_erp_paygroupformula', $data);
            return ['s', 'Record Updated Successfully.'];
        } else {
            $data['companyID'] = $companyID;
            $data['companyCode'] = $companyID;
            $data['createdUserGroup'] = $user_group;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $user_id;
            $data['createdDateTime'] = $current_date;
            $data['createdUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            $this->db->insert('srp_erp_paygroupformula', $data);
            return ['s', 'Record Created Successfully.'];
        }


    }

    function saveFormula_new()
    {
        $formulaString = $this->input->post('formulaString');
        $formula = $this->input->post('formula');
        $payGroupID = $this->input->post('payGroupID');
        $salaryCategories = $this->input->post('salaryCategoryContainer');
        $salaryCategories = (trim($salaryCategories) == '') ? null : $salaryCategories;
        $ssoCategories = $this->input->post('SSOContainer');
        $ssoCategories = (trim($ssoCategories) == '') ? null : $ssoCategories;
        $payGroupCategories = $this->input->post('payGroupContainer');
        $payGroupCategories = (trim($payGroupCategories) == '') ? null : $payGroupCategories;
        $companyID = current_companyID();
        $createdUserName = current_employee();
        $current_date = current_date();
        $current_pc = current_pc();
        $user_id = current_userID();
        $user_group = current_user_group();

        $data['payGroupID'] = $payGroupID;
        $data['formulaString'] = $formulaString;
        $data['formula'] = $formula;
        $data['salaryCategories'] = $salaryCategories;
        $data['ssoCategories'] = $ssoCategories;
        $data['payGroupCategories'] = $payGroupCategories;

        $isHas = $this->db->query("SELECT payGroupID, IF(ISNULL(socialInsuranceID), payeeID, socialInsuranceID) AS social_paye, isGroupTotal, formula_payGroupID
                                   FROM srp_erp_paygroupmaster AS groupMaster
                                   LEFT JOIN (
                                      SELECT payGroupID AS formula_payGroupID FROM srp_erp_paygroupformula WHERE payGroupID='{$payGroupID}'
                                      AND companyID = '{$companyID}'
                                   ) AS formulaTB ON formulaTB.formula_payGroupID = groupMaster.payGroupID
                                   WHERE payGroupID = '{$payGroupID}' AND companyID = '{$companyID}'")->row_array();


        if (!empty($isHas['social_paye']) && $payGroupCategories != null) {
            /*************************************************************************************************
             * Validate if SSO / PAYE item going to save the formula, is the formula contain pay group check,
             * than the pay group is only contains salary categories
             *************************************************************************************************/
            $payGroupData = $this->db->query("SELECT masterTB.description FROM srp_erp_paygroupmaster AS masterTB
                                              JOIN srp_erp_paygroupformula AS formula ON formula.payGroupID=masterTB.payGroupID
                                              WHERE masterTB.companyID = '{$companyID}' AND formula.payGroupID IN ({$payGroupCategories})
                                              AND (ssoCategories IS NOT NULL OR payGroupCategories IS NOT NULL )")->result_array();

            if (!empty($payGroupData)) {
                $description = implode('<br/>-', array_column($payGroupData, 'description'));
                return ['e', 'Following pay group/groups should only contain salary categories<br/>-' . $description];
            }
        }

        if ($isHas['isGroupTotal'] == 1 && $payGroupCategories != null) {
            /*************************************************************************************************
             * Validate if pay group item going to save the formula, is the formula pulled in SSO,PAYE formula,
             * than this pay group is only contains salary categories
             *************************************************************************************************/
            $SSOData = $this->db->query("SELECT payGroup.description  FROM srp_erp_paygroupmaster AS payGroup
                                         JOIN srp_erp_paygroupformula AS payFormula ON payFormula.payGroupID=payGroup.payGroupID
                                         AND payFormula.companyID={$companyID}
                                         JOIN srp_erp_socialinsurancemaster AS ssoMaster ON ssoMaster.socialInsuranceID = payGroup.socialInsuranceID
                                         AND ssoMaster.companyID={$companyID}
                                         WHERE payGroup.companyID={$companyID} AND payGroup.socialInsuranceID IS NOT NULL AND
                                         (
                                             payGroupCategories LIKE '%,{$payGroupID},%' OR payGroupCategories='{$payGroupID}' OR payGroupCategories
                                             LIKE '{$payGroupID},%' OR payGroupCategories LIKE '%,{$payGroupID}'
                                         )
                                         UNION
                                         SELECT payGroup.description  FROM srp_erp_paygroupmaster AS payGroup
                                         JOIN srp_erp_paygroupformula AS payFormula ON payFormula.payGroupID=payGroup.payGroupID
                                         AND payFormula.companyID={$companyID}
                                         JOIN srp_erp_payeemaster AS payeeMaster ON payeeMaster.payeeMasterID = payGroup.payeeID
                                         AND payeeMaster.companyID={$companyID}
                                         WHERE payGroup.companyID={$companyID} AND payGroup.payeeID IS NOT NULL AND
                                         (
                                             payGroupCategories LIKE '%,{$payGroupID},%' OR payGroupCategories='{$payGroupID}' OR payGroupCategories
                                             LIKE '{$payGroupID},%' OR payGroupCategories LIKE '%,{$payGroupID}'
                                         )
                                         UNION
                                         SELECT CONCAT('SSO slab | ', description ,' ( ', startRangeAmount,' - ',endRangeAmount,' )') AS description
                                         FROM srp_erp_ssoslabmaster AS slabmaster
                                         JOIN srp_erp_ssoslabdetails AS slabDetails ON slabDetails.ssoSlabMasterID=slabmaster.ssoSlabMasterID
                                         AND slabDetails.companyID={$companyID}
                                         WHERE slabmaster.companyID={$companyID} AND
                                         (
                                             payGroupCategories LIKE '%,{$payGroupID},%' OR payGroupCategories='{$payGroupID}' OR payGroupCategories
                                             LIKE '{$payGroupID},%' OR payGroupCategories LIKE '%,{$payGroupID}'
                                         ) ")->result_array();

            if (!empty($SSOData)) {
                $description = implode('<br/>-', array_column($SSOData, 'description'));
                return ['e', 'Following SSO/PAYE/SSO slab contain this pay group, so you can only select salary categories to this pay group <br/>-' . $description];
            }

            //validate added pay groups or it's sub groups contains this pay group
            $payGr_arr = explode(',', $payGroupCategories);
            foreach ($payGr_arr as $g) {
                $validation = payGroup_validation($payGroupID, $g);
                if ($validation[0] == 'e') {
                    $description = $this->db->query("SELECT description FROM srp_erp_paygroupmaster WHERE companyID={$companyID}    
                                      AND payGroupID={$g}")->row('description');

                    die(json_encode(['e', $description . ' OR it\'s sub elements formula contain this group.<br/> You can not add ' . $description . ' to this formula']));
                }
                if ($validation[0] == 'w') {
                    die(json_encode($validation));
                }
            }
        }

        if (!empty($isHas['formula_payGroupID'])) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $user_id;
            $data['modifiedDateTime'] = $current_date;
            $data['modifiedUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            $this->db->where('payGroupID', $payGroupID)->where('companyID', $companyID)->update('srp_erp_paygroupformula', $data);
            return ['s', 'Formula updated successfully.'];
        } else {
            $data['companyID'] = $companyID;
            $data['companyCode'] = $companyID;
            $data['createdUserGroup'] = $user_group;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $user_id;
            $data['createdDateTime'] = $current_date;
            $data['createdUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            $this->db->insert('srp_erp_paygroupformula', $data);
            return ['s', 'Formula updated successfully.'];
        }


    }

    function savePayGroup()
    {
        $description = $this->input->post('description[]');
        $companyId = current_companyID();
        $companyCode = current_companyCode();
        $createdUserGroup = current_user_group();
        $current_pc = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $createdUserName = current_user();
        $description = array_map('trim', $description);
        $description_list = "'" . implode("','", $description) . "'";

        $isExist = $this->db->query("SELECT description FROM srp_erp_paygroupmaster WHERE companyID={$companyId}
                     AND description IN ({$description_list})")->result_array();

        if (!empty($isExist)) {
            $description_list = implode('</br> - ', array_column($isExist, 'description'));
            return array('e', 'Following descriptions already exist.</br> - ' . $description_list);
        }

        $this->db->trans_start();
        $append = array();
        foreach ($description as $key => $de) {

            $append['isGroupTotal'] = 1;
            $append['description'] = $de;
            $append['companyID'] = $companyId;
            $append['companyCode'] = $companyCode;
            $append['createdUserGroup'] = $createdUserGroup;
            $append['createdPCID'] = $current_pc;
            $append['createdUserID'] = $createdUserID;
            $append['createdDateTime'] = $current_date;
            $append['createdUserName'] = $createdUserName;
            $append['modifiedPCID'] = $current_pc;
            $append['modifiedUserID'] = $createdUserID;
            $append['modifiedDateTime'] = $current_date;
            $append['modifiedUserName'] = $createdUserName;
            $append['timestamp'] = $current_date;

            $this->db->insert('srp_erp_paygroupmaster', $append);
            $payGroupID = $this->db->insert_id();


            $appendFiled['fieldName'] = $de;
            $appendFiled['caption'] = $de;
            $appendFiled['fieldType'] = 'G';
            $appendFiled['isCalculate'] = 1;
            $appendFiled['payGroupID'] = $payGroupID;


            $appendFiled['companyID'] = $companyId;
            $appendFiled['companyCode'] = $companyCode;
            $appendFiled['createdUserGroup'] = $createdUserGroup;
            $appendFiled['createdPCID'] = $current_pc;
            $appendFiled['createdUserID'] = $createdUserID;
            $appendFiled['createdDateTime'] = $current_date;
            $appendFiled['createdUserName'] = $createdUserName;
            $appendFiled['modifiedPCID'] = $current_pc;
            $appendFiled['modifiedUserID'] = $createdUserID;
            $appendFiled['modifiedDateTime'] = $current_date;
            $appendFiled['modifiedUserName'] = $createdUserName;
            $appendFiled['timestamp'] = $current_date;
            $this->db->insert('srp_erp_pay_templatefields', $appendFiled);

        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }

    }

    function updatePayGroup()
    {
        $description = trim($this->input->post('pgDes') ?? '');
        $hidden_id = $this->input->post('hidden-id');
        $companyID = current_companyID();

        $isExist = $this->db->query("SELECT payGroupID FROM srp_erp_paygroupmaster WHERE payGroupID != {$hidden_id}  AND 
                      description = '{$description}' AND companyID={$companyID}")->row('payGroupID');

        if (!empty($isExist)) {
            return array('e', 'This description already exist');
        }

        $data = array(
            'description' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date(),
            'timestamp' => current_date()
        );

        $data2 = array(
            'fieldName' => $description,
            'caption' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date(),
            'timestamp' => current_date()
        );


        $this->db->where(['payGroupID' => $hidden_id, 'companyID' => $companyID])->update('srp_erp_paygroupmaster', $data);
        $this->db->where(['payGroupID' => $hidden_id, 'companyID' => $companyID])->update('srp_erp_pay_templatefields', $data2);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }

    function deletePayGroup()
    {
        $hidden_id = $this->input->post('hidden-id');

        $this->db->trans_start();

        $this->db->where('payGroupID', $hidden_id)->delete('srp_erp_paygroupmaster');
        $this->db->where('payGroupID', $hidden_id)->delete('srp_erp_paygroupformula');
        $this->db->where('payGroupID', $hidden_id)->where('fieldType', 'G')->delete('srp_erp_pay_templatefields');

        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records deleted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in deleting process');
        }

    }

    function searchleaveEmployee($keyword)
    {
        $currentEmpID = $this->input->get('currentEmpID');
        $com = $this->common_data['company_data']['company_id'];
        $where = "(Ename1 LIKE '%$keyword%' OR Ename2 LIKE '%$keyword%' OR Ename3 LIKE '%$keyword%' OR Ename4 LIKE '%$keyword%' OR ECode LIKE '%$keyword%' ";
        $where .= "OR DesDescription  LIKE '%$keyword%') AND srp_employeesdetails.Erp_companyID='$com'";
        $con = "IFNULL(Ename2, ''),' | ', DesDescription , '    |   ', ECode";

        $this->db->select("EIdNo, ECode, IFNULL(Ename1, '') Ename1, IFNULL(Ename2, '') Ename2, IFNULL(Ename3, '') Ename3, IFNULL(Ename4, '') Ename4, DesDescription, CONCAT(" . $con . ") AS 'Match'");
        $this->db->from('srp_employeesdetails');

        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID');
        $this->db->where($where);


        $query = $this->db->get();

        return $query->result();
    }

    public function save_leaveAdjustment()
    {
        $this->db->trans_begin();
        $companyID = current_companyID();
        $description = $this->input->post('description');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $masterID = $this->input->post('masterID');
        $policyMasterID = $this->input->post('policyMasterID');
        $this->load->library('sequence');
        $code = $this->sequence->sequence_generator('LAM');


        if ($masterID == '') {
            $data = array(
                'companyID' => current_companyID(),
                'leaveaccrualMasterCode' => $code,
                'documentID' => 'LAM',
                'description' => $description,
                'year' => date('Y'),
                'month' => date('m'),
                'leaveGroupID' => $leaveGroupID,
                'createdUserGroup' => current_user_group(),
                'createDate' => date('Y-m-d H:i:s'),
                'createdpc' => current_pc(),
                'manualYN' => 1,
                'policyMasterID' => $policyMasterID

            );
            $insert = $this->db->insert('srp_erp_leaveaccrualmaster', $data);
            if ($insert) {
                $last_id = $this->db->insert_id();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', 'Failed.');

                    echo json_encode(array('error' => 1));
                    exit;
                } else {
                    $this->db->trans_commit();
                    $this->session->set_flashdata('s', 'Leave Accrual inserted successfully.');

                    echo json_encode(array('error' => 0, 'leaveGroupID' => $last_id));
                    exit;
                }
            } else {
                $this->session->set_flashdata('e', 'Failed');

                echo json_encode(array('error' => 1));
                exit;
            }
        } else {
            echo json_encode(array('error' => 0, 'leaveGroupID' => $masterID));
            exit;
        }

    }

    function save_payeeMaster()
    {
        $sortCode = $this->input->post('sortCode[]');
        $description = $this->input->post('description[]');

        $liabilityGlAutoID = $this->input->post('liabilityGlAutoID[]');
        $payrollType = $this->input->post('payrollType[]');
        $isSlab = $this->input->post('ifSlab[]');
        $ifSlab = $this->input->post('ifSlabHidden[]');


        $companyId = current_companyID();
        $companyCode = current_companyCode();
        $createdUserGroup = current_user_group();
        $current_pc = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $createdUserName = current_user();

        $availble = $this->db->select('sortCode')
            ->from('srp_erp_payeemaster')
            ->where('companyID', $companyId)
            ->get()->result_array();


        $si = array();
        foreach ($availble as $item) {
            $si[] = $item['sortCode'];
        }

        $data = array();
        $append = array();
        foreach ($sortCode as $key => $de) {

            if (in_array($de, $si)) {
                continue;
            }


            $data['sortCode'] = $de;
            $data['Description'] = $description[$key];


            $data['liabilityGlAutoID'] = $liabilityGlAutoID[$key];
            $data['isNonPayroll'] = $payrollType[$key];
            $data['companyID'] = $companyId;
            $data['companyCode'] = $companyCode;
            $data['createdUserGroup'] = $createdUserGroup;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $createdUserID;
            $data['createdDateTime'] = $current_date;
            $data['createdUserName'] = $createdUserName;
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $createdUserID;
            $data['modifiedDateTime'] = $current_date;
            $data['modifiedUserName'] = $createdUserName;
            $data['timestamp'] = $current_date;
            if ($isSlab[$key] > 0) {

                $data['SlabID'] = $ifSlab[$key];
            }

            $this->db->insert('srp_erp_payeemaster', $data);
            $payeeID = $this->db->insert_id();


            $append['description'] = $de;
            $append['payeeID'] = $payeeID;
            $append['companyID'] = $companyId;
            $append['companyCode'] = $companyCode;
            $append['createdUserGroup'] = $createdUserGroup;
            $append['createdPCID'] = $current_pc;
            $append['createdUserID'] = $createdUserID;
            $append['createdDateTime'] = $current_date;
            $append['createdUserName'] = $createdUserName;
            $append['modifiedPCID'] = $current_pc;
            $append['modifiedUserID'] = $createdUserID;
            $append['modifiedDateTime'] = $current_date;
            $append['modifiedUserName'] = $createdUserName;
            $append['timestamp'] = $current_date;

            $this->db->insert('srp_erp_paygroupmaster', $append);
            $payGroupID = $this->db->insert_id();

            $appendFiled['fieldName'] = $de;
            $appendFiled['caption'] = $de;
            $appendFiled['fieldType'] = 'G';
            /*$appendFiled['isCalculate'] = 0;*/
            $appendFiled['payGroupID'] = $payGroupID;
            $appendFiled['companyID'] = $companyId;

            $appendFiled['companyCode'] = $companyCode;
            $appendFiled['createdUserGroup'] = $createdUserGroup;
            $appendFiled['createdPCID'] = $current_pc;
            $appendFiled['createdUserID'] = $createdUserID;
            $appendFiled['createdDateTime'] = $current_date;
            $appendFiled['createdUserName'] = $createdUserName;
            $appendFiled['modifiedPCID'] = $current_pc;
            $appendFiled['modifiedUserID'] = $createdUserID;
            $appendFiled['modifiedDateTime'] = $current_date;
            $appendFiled['modifiedUserName'] = $createdUserName;
            $appendFiled['timestamp'] = $current_date;
            $this->db->insert('srp_erp_pay_templatefields', $appendFiled);

        }


        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records inserted successfully');
        } else {
            return array('e', 'Error in insert record');
        }
    }

    function editPayeeMaster()
    {
        $sortCode = $this->input->post('siSortCode');
        $description = $this->input->post('siDes');
        $liabilityGlAutoID = $this->input->post('si_liabilityGlAutoID');
        $hidden_id = $this->input->post('hidden-id');
        $siIsSlab = $this->input->post('siIsSlab');//on
        $siSlab = $this->input->post('siSlab');

        $companyId = current_companyID();
        $companyCode = current_companyCode();
        $createdUserGroup = current_user_group();
        $current_pc = current_pc();
        $createdUserID = current_userID();
        $current_date = current_date();
        $createdUserName = current_user();

        $data = array(
            'sortCode' => $sortCode,
            'Description' => $description,
            'liabilityGlAutoID' => $liabilityGlAutoID,
            'SlabID' => $siSlab,
            'modifiedPCID' => $current_pc,
            'modifiedUserID' => $createdUserID,
            'ModifiedUserName' => $createdUserName,
            'modifiedDateTime' => $current_date,
            'timestamp' => $current_date,
        );


        $payGroupData = array(
            'Description' => $sortCode,
            'modifiedPCID' => $current_pc,
            'modifiedUserID' => $createdUserID,
            'ModifiedUserName' => $createdUserName,
            'modifiedDateTime' => $current_date,
            'timestamp' => $current_date,
        );


        $this->db->where('payeeMasterID', $hidden_id)->update('srp_erp_payeemaster', $data);
        $this->db->where('payeeID', $hidden_id)->where('companyID', current_companyID())->update('srp_erp_paygroupmaster', $payGroupData);

        $pagGroupID = $this->db->where('payeeID', $hidden_id)->select('payGroupID')->from('srp_erp_paygroupmaster')->get()->row_array();


        $filedData['fieldName'] = $sortCode;
        $filedData['caption'] = $sortCode;
        $filedData['modifiedPCID'] = $current_pc;
        $filedData['modifiedUserID'] = $createdUserID;
        $filedData['modifiedDateTime'] = $current_date;
        $filedData['modifiedUserName'] = $createdUserName;
        $filedData['timestamp'] = $current_date;

        $this->db->where('payGroupID', $pagGroupID['payGroupID'])->where('companyID', current_companyID())->update('srp_erp_pay_templatefields', $filedData);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }

    function deletePayeeMaster()
    {
        $hidden_id = $this->input->post('hidden-id');


        $this->db->where('payeeMasterID', $hidden_id)->delete('srp_erp_payeemaster ');
        $deltesRows = $this->db->affected_rows();
        $pagGroupID = $this->db->where('payeeID', $hidden_id)->select('payGroupID')->from('srp_erp_paygroupmaster')->get()->row_array();
        $this->db->where('payGroupID', $pagGroupID['payGroupID'])->delete('srp_erp_paygroupformula');
        $this->db->where('payeeID', $hidden_id)->delete('srp_erp_paygroupmaster');

        $this->db->where('payGroupID', $pagGroupID['payGroupID'])->where('fieldType', 'G')->delete('srp_erp_pay_templatefields');


        if ($deltesRows > 0) {
            return array('s', 'Records deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }

    }

    /*function insert_default_dashboard_for_all_employee()
    {
        $getDashboard = $this->db->query("select * from srp_erp_systemuserdashboardmaster")->result_array();
        $getemployeeDetails = $this->db->query("select EIdNo,Erp_companyID from srp_employeesdetails")->result_array();
        foreach ($getemployeeDetails as $edetail) {
            $empID=$edetail['EIdNo'];
            $companyID=$edetail['Erp_companyID'];
            foreach ($getDashboard as $val) {
                $userDashboardWidgetID = $val['userDashboardID'];
                $dashborddata['employeeID'] = $empID;
                $dashborddata['dashboardDescription'] = $val['dashboardDescription'];
                $dashborddata['templateID'] = $val['templateID'];
                $dashborddata['companyID'] = $companyID;
                $dashborddata['isDefault'] = 1;
                $insertDashBoard = $this->db->insert('srp_erp_userdashboardmaster', $dashborddata);
                $userDashboardID = $this->db->insert_id();
                if ($insertDashBoard) {
                    $this->db->query("INSERT INTO srp_erp_userdashboardwidget (userDashboardID,positionID,widgetID,sortOrder,employeeID,companyID  ) select $userDashboardID as userDashboardID, positionID,widgetID,sortOrder, $empID as empID, $companyID as comid from srp_erp_systemuserdashboardwidget where userDashboardID= $userDashboardWidgetID");
                }
            }
        }
    }*/

    function load_declaration_drilldown_table()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $employeeid = $this->input->post('employeeID');
        $convertFormat = convert_date_format_sql();


        /*$this->db->select('srp_erp_salarydeclarationdetails.declarationDetailID,declarationMasterID,employeeNo,srp_erp_salarydeclarationdetails.salaryCategoryID,
                           srp_erp_salarydeclarationdetails.salaryCategoryType,effectiveDate,srp_employeesdetails.ECode,srp_employeesdetails.Ename2,
                           srp_erp_pay_salarycategories.salaryDescription,transactionAmount, DATE_FORMAT(effectiveDate, \''.$convertFormat.'\') AS effectiveDate2,
                           payDate, DATE_FORMAT(payDate,\''.$convertFormat.'\') AS payDate2, narration, balanceAmount');
        $this->db->where('declarationMasterID', $masterID);
        $this->db->where('employeeNo', $employeeid);
        $this->db->from('srp_erp_salarydeclarationdetails');
        if(!empty($employeeid )){
            $this->db->join('( SELECT balanceAmount, detailID FROM srp_erp_pay_balancepayment
                            WHERE companyID='.$companyID.' AND empID='.$employeeid.' AND declarationDetailID='.$masterID.' ) AS balanceTB',
                'balanceTB.detailID = srp_erp_salarydeclarationdetails.declarationMasterID', 'left');
        }
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_salarydeclarationdetails.employeeNo');
        $this->db->join('srp_erp_pay_salarycategories1', 'srp_erp_pay_salarycategories.salaryCategoryID = srp_erp_salarydeclarationdetails.salaryCategoryID');*/

        $this->db->select('srp_erp_salarydeclarationdetails.declarationDetailID,declarationMasterID,employeeNo,srp_erp_salarydeclarationdetails.salaryCategoryID,
                           srp_erp_salarydeclarationdetails.salaryCategoryType,effectiveDate,srp_employeesdetails.ECode,srp_employeesdetails.Ename2,
                           srp_erp_pay_salarycategories.salaryDescription,transactionAmount, DATE_FORMAT(effectiveDate, \'' . $convertFormat . '\') AS effectiveDate2,
                           payDate, DATE_FORMAT(payDate,\'' . $convertFormat . '\') AS payDate2, narration, transactionCurrencyDecimalPlaces AS trDPlace');
        $this->db->where('declarationMasterID', $masterID);
        $this->db->where('employeeNo', $employeeid);
        $this->db->from('srp_erp_salarydeclarationdetails');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_salarydeclarationdetails.employeeNo');
        $this->db->join('srp_erp_pay_salarycategories', 'srp_erp_pay_salarycategories.salaryCategoryID = srp_erp_salarydeclarationdetails.salaryCategoryID');
        return $this->db->get()->result_array();

    }

    /*Employee type*/
    function saveEmployeeType()
    {
        $description = trim($this->input->post('description') ?? '');
        $conType = $this->input->post('conType');
        $pr_period = $this->input->post('probation_period');
        $is_open_contract = $this->input->post('is_open_contract');
        $typeID = $this->input->post('conType');
        $period = $this->input->post('period');

        $exist = $this->db->select('Description')->from('srp_empcontracttypes')->where('Description', $description)
            ->where('Erp_companyID', current_companyID())->get()->row('Description');

        if ($exist) {
            return ['e', 'This description is already available.'];
        }

        $is_open_contract = ($typeID == 2) ? $is_open_contract : null;

        $period = (!empty($period)) ? $period : 0;
        $period = ($typeID == 2 && $is_open_contract == 0) ? $period : null;

        $pr_period = ($typeID != 4) ? $pr_period : null;

        $data = [
            'Description' => $description, 'typeID' => $conType, 'period' => $period, 'is_open_contract' => $is_open_contract, 'probation_period' => $pr_period,
            'SchMasterId' => current_schMasterID(), 'branchID' => current_schBranchID(), 'Erp_companyID' => current_companyID(),
            'CreatedPC' => current_pc(), 'CreatedUserName' => current_employee(), 'CreatedDate' => current_date(), 'Timestamp' => current_date()
        ];

        $this->db->insert('srp_empcontracttypes', $data);

        if ($this->db->affected_rows() > 0) {
            $id = $this->db->insert_id();
            return array('s', 'Records inserted successfully', 'autoID' => $id);
        } else {
            return array('e', 'Error in record insert');
        }
    }

    function deleteEmployeeTypeMaster()
    {
        $hidden_id = $this->input->post('hidden-id');

        $isInUse = $this->db->query("SELECT EmployeeConType FROM srp_employeesdetails WHERE EmployeeConType={$hidden_id}")->row('EmployeeConType');

        if (isset($isInUse)) {
            return array('e', 'This Employee Type is in use</br>You can not delete this');
        } else {
            $this->db->where('EmpContractTypeID', $hidden_id)->delete('srp_empcontracttypes');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
        }
    }


    function editEmployeeTypeMaster()
    {
        $description = trim($this->input->post('description') ?? '');
        $period = $this->input->post('period');
        $typeID = $this->input->post('typeID_hidden');
        $pr_period = $this->input->post('probation_period');
        $is_open_contract = $this->input->post('is_open_contract');
        $hidden_id = $this->input->post('hidden-id');

        $is_open_contract = ($typeID == 2) ? $is_open_contract : null;

        $period = (!empty($period)) ? $period : 0;
        $period = ($typeID == 2 && $is_open_contract == 0) ? $period : null;

        $pr_period = ($typeID != 4) ? $pr_period : null;


        $data = array(
            'Description' => $description, 'period' => $period, 'is_open_contract' => $is_open_contract, 'probation_period' => $pr_period,
            'ModifiedPC' => current_pc(), 'ModifiedUserName' => current_employee(), 'Timestamp' => current_date(),
        );

        $this->db->where('EmpContractTypeID', $hidden_id)->where('Erp_companyID', current_companyID())->update('srp_empcontracttypes', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records updated successfully', 'autoID' => $hidden_id);
        } else {
            return array('e', 'Error in updating record');
        }
    }

    function discharge_update()
    {
        $updateID = $this->input->post('updateID');
        $empData = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $updateID])->row_array();
        if ($empData['isDischarged'] == 1) {
            return ['e', 'This employee already discharged.'];
        }

        $pos_exist = $this->db->get_where('srp_erp_pos_shiftdetails', ['empID' => $updateID, 'isclosed' => 0])->row_array();
        
        if($pos_exist){
            return ['e', 'This employee has a pending POS sessions to close'];
        }
        
        $isDischarged = $this->input->post('isDischarged');
        $dischargedDate = $this->input->post('dischargedDate');
        $lastWorkingDate = $this->input->post('lastWorkingDate');
        $dischargedComment = $this->input->post('dischargedComment');
        $dischargeReasonID = $this->input->post('dischargereason');

        $date_format_policy = date_format_policy();
        $dischargedDate = input_format_date($dischargedDate, $date_format_policy);
        $lastWorkingDate = input_format_date($lastWorkingDate, $date_format_policy);
        $dateTime = current_date();
        $companyID = current_companyID();
        $trCurr = $empData['payCurrencyID'];

        $data = array(
            'isDischarged' => $isDischarged,
            'isLeft' => $isDischarged,
            'dischargedByEmpID' => current_userID(),
            'dischargedDate' => $dischargedDate,
            'DateLeft' => $dischargedDate,
            'lastWorkingDate' => $lastWorkingDate,
            'dischargeReasonID' => $dischargeReasonID,
            'dischargedComment' => $dischargedComment,
            'LeftComment' => $dischargedComment,
            'ModifiedPC' => current_pc(),
            'ModifiedUserName' => current_employee(),
            'Timestamp' => $dateTime,
        );


        //Generate document Code
        $serialNo = $this->db->query("SELECT serialNo FROM srp_erp_pay_finalsettlementmaster WHERE companyID={$companyID} ORDER BY masterID DESC LIMIT 1")->row('serialNo');
        $serialNo = ($serialNo != null) ? $serialNo + 1 : 1;
        $this->load->library('sequence');
        $documentCode = $this->sequence->sequence_generator('FS', $serialNo);

        $localCurrencyID = $this->common_data['company_data']['company_default_currencyID'];
        $com_curr_data = currency_conversionID($trCurr, $localCurrencyID);

        $repCurrencyID = $this->common_data['company_data']['company_reporting_currencyID'];
        $rpt_curr_data = currency_conversionID($trCurr, $repCurrencyID);

        $finData = [
            'documentCode' => $documentCode, 'empID' => $updateID, 'dateOfJoin' => $empData['EDOJ'], 'lastWorkingDay' => $lastWorkingDate, 'documentID' => 'FS',

            'serialNo' => $serialNo, 'trCurrencyID' => $trCurr, 'trDPlace' => fetch_currency_desimal_by_id($trCurr), 'netPay' => 0, 'narration' => $dischargedComment,
            'localCurrencyID' => $localCurrencyID, 'localDPlace' => $com_curr_data['DecimalPlaces'], 'localCurrencyER' => $com_curr_data['conversion'],
            'rptCurrencyID' => $repCurrencyID, 'rptDPlace' => $rpt_curr_data['DecimalPlaces'], 'rptCurrencyER' => $rpt_curr_data['conversion'],

            'companyID' => $companyID, 'createdPCID' => current_pc(), 'createdUserID' => current_userID(), 'createdUserGroup' => current_user_group(),
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where('EIdNo', $updateID)->update('srp_employeesdetails', $data);

        /*** Delete approvals ***/
        $this->db->where('employeeID', $updateID)->delete('srp_erp_approvalusers');

        /*** Delete navigation access ***/
        $this->db->where('empID', $updateID)->delete('srp_erp_employeenavigation');

        /*** Create final settlement master documents ***/
        $this->db->insert('srp_erp_pay_finalsettlementmaster', $finData);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return ['s', 'Final settlement document created successfully.'];
        } else {
            return ['e', 'Error in process.'];
        }

    }

    public function save_leave_annualAccrual()
    {
        $this->db->trans_begin();
        $companyID = current_companyID();
        $description = $this->input->post('description');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $masterID = $this->input->post('masterID');
        $this->load->library('sequence');
        $code = $this->sequence->sequence_generator('LAM');


        if ($masterID == '') {
            $data = array(
                'companyID' => current_companyID(),
                'leaveaccrualMasterCode' => $code,
                'documentID' => 'LAM',
                'description' => $description,
                'year' => date('Y'),
                'month' => date('m'),
                'leaveGroupID' => $leaveGroupID,
                'createdUserGroup' => current_user_group(),
                'createDate' => date('Y-m-d H:i:s'),
                'createdpc' => current_pc(),
                /* 'confirmedYN' => 1,
                 'confirmedby' => $this->common_data['current_userID'],
                 'confirmedDate' => current_date(),*/
                'policyMasterID' => 1

            );
            $insert = $this->db->insert('srp_erp_leaveaccrualmaster', $data);
            if ($insert) {
                $last_id = $this->db->insert_id();
                $detail = array();
                $date = date('Y');
                //   $q2 = "SELECT DateAssumed, CONCAT(EIdNo, '-', srp_erp_leavetype.leaveTypeID) AS leaveTypeKey, EIdNo, srp_employeesdetails.leaveGroupID, srp_erp_leavegroupdetails.*, policyID FROM `srp_employeesdetails` INNER JOIN `srp_erp_leavegroupdetails` ON srp_erp_leavegroupdetails.leaveGroupID = srp_employeesdetails.leaveGroupID AND DateAssumed <= '{$date}' INNER JOIN `srp_erp_leavetype` ON srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leavetype.leaveTypeID WHERE Erp_companyID = {$companyID} AND srp_employeesdetails.leaveGroupID IS NOT NULL AND srp_employeesdetails.leaveGroupID = {$leaveGroupID} AND (EIdNo , srp_erp_leavetype.leaveTypeID) NOT IN (SELECT empID, leaveType FROM `srp_erp_leaveaccrualmaster` INNER JOIN srp_erp_leaveaccrualdetail ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID = srp_erp_leaveaccrualdetail.leaveaccrualMasterID WHERE year = {$d[1]} AND month = {$d[0]} AND srp_erp_leaveaccrualmaster.leaveaccrualMasterID != {$last_id} AND srp_erp_leaveaccrualmaster.manualYN=0 GROUP BY empID , leaveType)";

                // $q2="SELECT * FROM srp_employeesdetails WHERE NOT EXISTS( SELECT * FROM srp_erp_leaveaccrualdetail WHERE srp_employeesdetails.EIdNo = empID AND leaveGroupID = 5 AND nextDate={$date} GROUP BY empID) AND srp_employeesdetails.leaveGroupID = {$leaveGroupID} AND isActive=1 ";

                $q2 = "SELECT * FROM srp_employeesdetails inner JOIN(select * from `srp_erp_leavegroupdetails` WHERE leaveGroupID = {$leaveGroupID} AND policyMasterID=1 ) leavegroup on leavegroup.leaveGroupID=srp_employeesdetails.leaveGroupID WHERE NOT EXISTS( SELECT * FROM srp_erp_leaveaccrualdetail WHERE srp_employeesdetails.EIdNo = empID AND leaveGroupID = {$leaveGroupID} AND initalDate={$date} GROUP BY empID) AND srp_employeesdetails.leaveGroupID = {$leaveGroupID} AND isDischarged !=1 AND  Erp_companyID={$companyID}";
                $q12 = $q2;

                $result = $this->db->query($q2)->result_array();

                $exist = $this->db->query("SELECT concat(det.empID,'-',det.leaveGroupID,'-',det.leaveType) as leavekey FROM `srp_erp_leaveaccrualmaster` INNER JOIN (SELECT * FROM `srp_erp_leaveaccrualdetail` WHERE nextDate IS NOT NULL) det ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID=det.leaveaccrualMasterID WHERE companyID = {$companyID} AND initalDate={$date} ")->result_array();


                $updateArr = array();
                $insert_Arr = array();
                if ($result) {
                    foreach ($result as $val) {
                        $daysEntitled = 0;
                        $hoursEntitled = 0;

                        $accrualAfterMonth = $val['accrualAfterMonth'];
                        $provisionAfterMonth = $val['provisionAfterMonth'];
                        $daysAssumed = new  DateTime($val['DateAssumed']);
                        $dateToday = new  DateTime(current_date(true));
                        $Months = $dateToday->diff($daysAssumed); 
                        $ManyMonths = (($Months->y) * 12) + ($Months->m);
                    

                        if($ManyMonths > $accrualAfterMonth){
                            $daysEntitled = $val['noOfDays'];
                        }else{
                            if($ManyMonths < $provisionAfterMonth ){
                                $daysEntitled = $val['noOfDays'];
                            }else{
                                $daysEntitled = 0;
                            }
                        }
    
                        $datas = array('leaveaccrualMasterID' => $last_id, 'empID' => $val['EIdNo'],
                            'leaveGroupID' => $leaveGroupID, 'leaveType' => $val['leaveTypeID'],
                            'daysEntitled' => $daysEntitled, 'hoursEntitled' => $hoursEntitled,
                            'description' => 'Leave Accrual ' . date('Y'),
                            'createDate' => date('Y-m-d H:i:s'),
                            'createdUserGroup' => current_user_group(), 'createdPCid' => current_pc(),
                            'initalDate' => date('Y'), 'nextDate' => date('Y') + 1,
                        );

                        $keys = array_keys(array_column($exist, 'leavekey'), $val['EIdNo'] . '-' . $val['leaveGroupID'] . '-' . $val['leaveTypeID']);
                        $new_array = array_map(function ($k) use ($exist) {
                            return $exist[$k];
                        }, $keys);


                        /* array_push($insert_Arr, array(
                             'leaveTypeID' => $val['leaveTypeID'], 'empID' => $val['EIdNo'], 'days' => $daysEntitled, 'hourly' => $hoursEntitled, 'companyID' => current_companyID(), 'companyCode' => current_companyCode(), 'createdUserGroup' => '',
                             'createdPCID' => $this->common_data['current_pc'],
                             'createdUserID' => $this->common_data['current_userID'],
                             'createdDateTime' => current_date(),
                             'createdUserName' => $this->common_data['current_user'],
                         ));*/
                        if (empty($new_array)) {
                            array_push($detail, $datas);
                        }

                    }

                    if (!empty($detail)) {
                        $this->db->insert_batch('srp_erp_leaveaccrualdetail', $detail);
                    }

                }
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', 'Failed.');

                    echo json_encode(array('error' => 1));
                    exit;
                } else {
                    $this->db->trans_commit();
                    $this->session->set_flashdata('s', 'Leave Accrual inserted successfully.');

                    echo json_encode(array('error' => 0, 'leaveGroupID' => $last_id, 'q' => $q12));
                    exit;
                }


            } else {
                $this->session->set_flashdata('e', 'Failed');

                echo json_encode(array('error' => 1));
                exit;
            }

        } else {


            //   $this->session->set_flashdata('s', 'Leave group inserted successfully.');

            echo json_encode(array('error' => 0, 'leaveGroupID' => $masterID));
            exit;
        }

    }

    function save_employeesLeave()
    {

        $empID = $this->input->post('empName');
        $entryDate = $this->input->post('entryDate');
        $leaveTypeID = $this->input->post('leaveTypeID');
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');
        $halfDay = $this->input->post('halfDay');
        $shift = $this->input->post('shift');
        $comment = $this->input->post('comment');
        $isCalenderDays = $this->input->post('isCalenderDays');
        $leaveReason = $this->input->post('leaveReason');
        $entitleSpan = $this->input->post('entitleSpan');
        $appliedLeave = $this->input->post('appliedLeave');
        $leaveBlance = $this->input->post('leaveBlance');
        $workingDays = $this->input->post('workingDays');
        $policyMasterID = $this->input->post('policyMasterID');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $applicationType = $this->input->post('applicationType');
        $companyID = $this->common_data['company_data']['company_id'];
        $companyCode = $this->common_data['company_data']['company_code'];
        $createdPCID = $this->common_data['current_pc'];
        $createdUserID = $this->common_data['current_userID'];
        $createdUserName = $this->common_data['current_user'];
        $createdUserGroup = $this->common_data['user_group'];
        $getTravel = $this->input->post('getTravel');

        $leaveReasonText = $this->input->post('leaveReasonText');
        $annualComment = $this->input->post('annualComment');

        $createdDateTime = current_date();
        $confirmedYN = $this->input->post('isConfirmed');
        $hour = 0;
        //Get last leave no
        $lastCodeArray = $this->db->query("SELECT serialNo FROM srp_erp_leavemaster WHERE companyID={$companyID}
                                                ORDER BY leaveMasterID DESC LIMIT 1")->row_array();
        $lastCodeNo = $lastCodeArray['serialNo'];
        $lastCodeNo = ($lastCodeNo == NULL) ? 1 : $lastCodeArray['serialNo'] + 1;

        $this->load->library('sequence');
        $dCode = $this->sequence->sequence_generator('LA', $lastCodeNo);

        if ($isCalenderDays == 1) {
            $days = $appliedLeave;
            $workingDays = $appliedLeave;
            $nonWorkingDays = $days;
            $leaveAvailable = $entitleSpan;

        } else {

            $days = $workingDays;
            $nonWorkingDays = $appliedLeave;
            $leaveAvailable = $entitleSpan;

        }

        if ($policyMasterID == 2) {
            /*if its hourly set value for hour and clear*/
            $hour = $days;
            $days = 0;
            $nonWorkingDays = 0;
            $dteStart = new DateTime($startDate);
            $dteEnd = new DateTime($endDate);


            $startDate = $dteStart->format('Y-m-d H:i:s');
            $endDate = $dteEnd->format('Y-m-d H:i:s');

        }

        $data = array(

            'empID' => $empID,
            'leaveTypeID' => $leaveTypeID,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'days' => $days,
            'ishalfDay' => $halfDay,
            'shift' => $shift,
            'isCalenderDays' => $isCalenderDays,
            'workingDays' => $workingDays,
            'nonWorkingDays' => $nonWorkingDays,
            'leaveGroupID' => $leaveGroupID,
            'policyMasterID' => $policyMasterID,
            'applicationType' => $applicationType,
            'leaveAvailable' => $leaveAvailable,
            'documentCode' => $dCode,
            'serialNo' => $lastCodeNo,
            'hours' => $hour,
            'entryDate' => date('Y-m-d'),
            'comments' => $comment,
            'companyID' => $companyID,
            'companyCode' => $companyCode,
            'createdPCID' => $createdPCID,
            'createdUserID' => $createdUserID,
            'createdUserGroup' => $createdUserGroup,
            'createdDateTime' => $createdDateTime,
            // 'leaveReasonID' => $leaveReason,
            'leaveReasonText' => $leaveReasonText,
            'annualComment' => $annualComment,
            'isTravelRequest'=>$getTravel
        );

        if ($confirmedYN == 1) {
            $data['confirmedYN'] = 1;
            $data['confirmedByEmpID'] = $createdUserID;
            $data['confirmedByName'] = $this->common_data['current_user'];
            $data['confirmedDate'] = $createdDateTime;
        } else {
            $data['confirmedYN'] = 0;
        }


        $document_file = $this->input->post('document_file');
        if ($this->input->post('isConfirmed') == 1) {
            if (empty($_FILES['document_file']['name'])) {

                $leaveTypeID = $this->input->post('leaveTypeID');
                $isRequiredYes = $this->db->query("select * from srp_erp_leavetype WHERE  leaveTypeID=$leaveTypeID AND attachmentRequired=1 ")->row_array();
                if (!empty($isRequiredYes)) {
                    $leaveMasterID = $this->input->post('leaveMasterID');
                    $attachmentExist = $this->db->query("SELECT * FROM srp_erp_documentattachments WHERE documentID = 'LA' AND
                                                         documentSystemCode='$leaveMasterID'")->row_array();
                    if (empty($attachmentExist)) {
                        echo exit(json_encode(array('e', 'Please attach relevant document to confirm')));

                    }
                }
            }


        }

        $this->db->trans_start();
        $this->db->insert('srp_erp_leavemaster', $data);
        $leaveMasterID = $this->db->insert_id();


        $coveringEmpID = $this->input->post('coveringEmpID[]');
        if (!empty($coveringEmpID)) {
            foreach ($coveringEmpID as $convertid) {
                $data = array(
                    'coveringID' => $convertid,
                    'leaveapplicationID' => $leaveMasterID,
                );
                //  var_dump($data);
                $this->db->insert('srp_erp_leave_covering_employee', $data);
            }
        } 
        // else {
        //     return array('e', 'Invalid input data');
        // }


        


        if (!empty($_FILES['document_file']['name'])) {

            $attachmentDesc = trim($this->input->post('attachmentDescription') ?? '');
            if ($attachmentDesc == '') {
                return ['e', 'Please enter attachment description'];
            }

            $num = $this->db->select('companyID')->where('documentID', 'LA')->get('srp_erp_documentattachments')->result_array();
            $file_name = current_companyCode() . '/LA' . '_' . $leaveMasterID . '_' . (count($num) + 1);

            $file = $_FILES['document_file'];

            if ($file['error'] == 1) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
            }
            $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
            $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
            $allowed_types = explode('|', $allowed_types);
            if (!in_array($ext, $allowed_types)) {
                die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
            }

            $size = $file['size'];
            $size = number_format($size / 1048576, 2);

            if ($size > 5) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"]));
            }

            $file_name = "$file_name.$ext";
            $s3Upload = $this->s3->upload($file['tmp_name'], $file_name);

            if (!$s3Upload) {
                die(json_encode(['e', 'Error in document upload location configuration']));
            }

            $detail['documentID'] = 'LA';
            $detail['documentSystemCode'] = $leaveMasterID;
            $detail['attachmentDescription'] = $attachmentDesc;
            $detail['myFileName'] = $file_name;
            $detail['fileType'] = $ext;
            $detail['fileSize'] = $size;
            $detail['timestamp'] = date('Y-m-d H:i:s');
            $detail['companyID'] = $this->common_data['company_data']['company_id'];
            $detail['companyCode'] = $this->common_data['company_data']['company_code'];
            $detail['createdUserGroup'] = $this->common_data['user_group'];
            $detail['modifiedPCID'] = $this->common_data['current_pc'];
            $detail['modifiedUserID'] = $this->common_data['current_userID'];
            $detail['modifiedUserName'] = $this->common_data['current_user'];
            $detail['modifiedDateTime'] = current_date();
            $detail['createdPCID'] = $this->common_data['current_pc'];
            $detail['createdUserID'] = $this->common_data['current_userID'];
            $detail['createdUserName'] = $this->common_data['current_user'];
            $detail['createdDateTime'] = current_date();
            $this->db->insert('srp_erp_documentattachments', $detail);
        }

        $notify_list = $this->input->post('notify-list');
        if(!empty($notify_list)){
            $notify_data = [];
            foreach ($notify_list as $notify_emp){
                $notify_data[] = [
                    'documentID'=> 'LA', 'systemID'=> $leaveMasterID, 'empID'=> $notify_emp,
                    'companyID'=> $companyID, 'createdPCID'=> $createdPCID, 'createdUserID'=> $createdUserID,
                    'createdDateTime'=> $createdDateTime, 'timestamp'=> $createdDateTime
                ];
            }
            $this->db->insert_batch('srp_erp_notify', $notify_data);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed Insert Data');
        } else {
            $this->db->trans_commit();

            if ($confirmedYN == 1) {
                $this->leave_notify($leaveMasterID, 'confirm');
                return $this->leave_ApprovalCreate($leaveMasterID, $level = 1);
            } else {
                return array('s', 'Leave Save Process Success.');
            }

        }


    }

    function add_employees_to_shift()
    {
        $shiftID = $this->input->post('shieftIDhn');
        $empID = $this->input->post('empHiddenID');
        /* $endDate = $this->input->post('endDate');
         $startDate = $this->input->post('startDate');*/

        $date_format_policy = date_format_policy();

        $endDat = $this->input->post('endDate');
        if (!empty($endDat)) {
            $endDate = input_format_date($endDat, $date_format_policy);
        }

        $strtdt = $this->input->post('startDate');
        $startDate = input_format_date($strtdt, $date_format_policy);
        if (empty($endDat)) {
            $endDate = '2100-01-01';
        }

        $result = '';
        if ($endDate >= $startDate) {

            $message = '';
            $emp_arr = array();
            $err_arr = array();

            if(count($empID) > 0){
                foreach ($empID as $val) {

                    $getShieft = $this->db->query("SELECT autoID,shiftID,startDate,endDate FROM srp_erp_pay_shiftemployees WHERE shiftID={$shiftID}
                                                AND empID='$val'")->result_array();
                    $do_exists_shift = 0;
    
                    foreach($getShieft as $ex_shift){
    
                        $set_start_date = $ex_shift['startDate'];
                        $set_end_date = $ex_shift['endDate'];
                        
    
                        if(($startDate >= $set_start_date && $startDate <= $set_end_date) || ($endDate >= $set_start_date && $endDate <= $set_end_date)){
                            $do_exists_shift = 1;
                        }
    
                        if(($set_start_date >= $startDate && $set_start_date <= $endDate) || ($set_end_date >= $startDate && $set_end_date <= $endDate) ){
                            $do_exists_shift = 1;
                        }
                    }
    
    
                    if($do_exists_shift == 1){
                        $err_arr[] = $val;
                        continue;
                    }else{
    
                        $emp_arr[] = $val;
    
                        $data = array(
                            'shiftID' => $shiftID,
                            'empID' => $val,
                            'startDate' => $startDate,
                            'endDate' => $endDate,
                            'companyID' => current_companyID(),
                            'companyCode' => current_companyCode(),
                            'createdPCID' => current_pc(),
                            'createdUserGroup' => current_user_group(),
                            'createdUserID' => current_userID(),
                            'createdUserName' => current_employee(),
                            'createdDateTime' => current_date()
                        );
    
                        $result = $this->db->insert('srp_erp_pay_shiftemployees', $data);
    
                    }
    
                }
            }
            
            if ((count($emp_arr) > 0) && (count($err_arr) > 0))  {
                return array('w', 'Some Employees has some overlapping shifts.');
            } else if((count($emp_arr) == 0)) {
                return array('e', 'This Employee has been Assign to this shift.');
            } else{
                return array('s', 'Successfully Completed the assign.');
            }
        } else {
            return array('e', 'End date should be grater than or equal to Start date.');
        }

    }

    function update_employeesLeave()
    {
        $leaveMasterID = $this->input->post('leaveMasterID');
        $empID = $this->input->post('empName');
        $leaveType = $this->input->post('leaveTypeID');
        if ($this->input->post('policyMasterID') == 2) {
            $startDate = $this->input->post('startDatetime');
            $endDate = $this->input->post('endDatetime');
        } else {
            $startDate = $this->input->post('startDate');
            $endDate = $this->input->post('endDate');
        }

        $isConfirmed = $this->input->post('isConfirmed');
        $entitleSpan = $this->input->post('entitleSpan');
        $entryDate = $this->input->post('entryDate');
        $halfDay = $this->input->post('halfDay');
        $shift = $this->input->post('shift');
        $comment = $this->input->post('comment');
        $isCalenderDays = $this->input->post('isCalenderDays');
        $appliedLeave = $this->input->post('appliedLeave');
        $leaveBlance = $this->input->post('leaveBlance');
        $workingDays = $this->input->post('workingDays');
        $policyMasterID = $this->input->post('policyMasterID');
        $applicationType = $this->input->post('applicationType');
        $leaveReasonText = $this->input->post('leaveReasonText');
        $annualComment = $this->input->post('annualComment');

        $leaveGroupID = $this->input->post('leaveGroupID');
        $hour = 0;
        $leaveAvailable = $entitleSpan;
        $notify_list = $this->input->post('notify-list');

        $det = $this->employeeLeave_details($leaveMasterID);

        if ($det['confirmedYN'] == 1) {
            return (array('e', '[ ' . $det['documentCode'] . ' ] is already confirmed'));
        }
        else {

            if ($isCalenderDays == 1) {
                $days = $appliedLeave;
                $workingDays = $days;
                $nonWorkingDays = $days;

            } else {
                $days = $workingDays;
                $nonWorkingDays = $appliedLeave;
            }

            if ($policyMasterID == 2) {
                /*if its hourly set value for hour and clear*/
                $hour = $days;
                $days = 0;
                $nonWorkingDays = 0;

                $dteStart = new DateTime($startDate);
                $dteEnd = new DateTime($endDate);
                $startDate = $dteStart->format('Y-m-d H:i:s');
                $endDate = $dteEnd->format('Y-m-d H:i:s');
            }

            $date_time = current_date();

            $modifiedPCID = $this->common_data['current_pc'];
            $modifiedUserID = $this->common_data['current_userID'];
            $modifiedUserName = $this->common_data['current_user'];
            $modifiedDateTime = $date_time;

            $data = array(
                'empID' => $empID,
                'leaveTypeID' => $leaveType,
                'startDate' => $startDate,
                'endDate' => $endDate,
                'days' => $days,
                'ishalfDay' => $halfDay,
                'shift' => $shift,
                'isCalenderDays' => $isCalenderDays,
                'workingDays' => $workingDays,
                'nonWorkingDays' => $nonWorkingDays,
                'leaveGroupID' => $leaveGroupID,
                'policyMasterID' => $policyMasterID,
                'applicationType' => $applicationType,
                'hours' => $hour,
                'leaveAvailable' => $leaveAvailable,
                'comments' => $comment,
                'modifiedPCID' => $modifiedPCID,
                'modifiedUserID' => $modifiedUserID,
                'modifiedUserName' => $modifiedUserName,
                'modifiedDateTime' => $modifiedDateTime,
                'leaveReasonText' => $leaveReasonText,
                'annualComment' => $annualComment
            );

            if ($isConfirmed == 1) {
                $data['confirmedYN'] = 1;
                $data['confirmedByEmpID'] = $this->common_data['current_userID'];
                $data['confirmedByName'] = $this->common_data['current_user'];
                $data['confirmedDate'] = current_date();
            } else {
                $data['confirmedYN'] = 0;
            }

            $this->db->trans_start();

            /*attachment */

            if (!empty($_FILES['document_file']['name'])) {
                $attachmentDesc = trim($this->input->post('attachmentDescription') ?? '');
                if ($attachmentDesc == '') {
                    return ['e', 'Please enter attachment description'];
                }

                $num = $this->db->select('companyID')->where('documentID', 'LA')->get('srp_erp_documentattachments')->result_array();
                $file_name = current_companyCode() . '/LA' . '_' . $leaveMasterID . '_' . (count($num) + 1);

                $file = $_FILES['document_file'];

                if ($file['error'] == 1) {
                    die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
                }
                $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
                $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
                $allowed_types = explode('|', $allowed_types);
                if (!in_array($ext, $allowed_types)) {
                    die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
                }

                $size = $file['size'];
                $size = number_format($size / 1048576, 2);

                if ($size > 5) {
                    die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"]));
                }

                $file_name = "$file_name.$ext";
                $s3Upload = $this->s3->upload($file['tmp_name'], $file_name);

                if (!$s3Upload) {
                    die(json_encode(['e', 'Error in document upload location configuration']));
                }

                $detail['documentID'] = 'LA';
                $detail['documentSystemCode'] = $leaveMasterID;
                $detail['attachmentDescription'] = $attachmentDesc;
                $detail['myFileName'] = $file_name;
                $detail['fileType'] = $ext;
                $detail['fileSize'] = $size;
                $detail['timestamp'] = date('Y-m-d H:i:s');
                $detail['companyID'] = $this->common_data['company_data']['company_id'];
                $detail['companyCode'] = $this->common_data['company_data']['company_code'];
                $detail['createdUserGroup'] = $this->common_data['user_group'];
                $detail['modifiedPCID'] = $this->common_data['current_pc'];
                $detail['modifiedUserID'] = $this->common_data['current_userID'];
                $detail['modifiedUserName'] = $this->common_data['current_user'];
                $detail['modifiedDateTime'] = current_date();
                $detail['createdPCID'] = $this->common_data['current_pc'];
                $detail['createdUserID'] = $this->common_data['current_userID'];
                $detail['createdUserName'] = $this->common_data['current_user'];
                $detail['createdDateTime'] = current_date();
                $this->db->insert('srp_erp_documentattachments', $detail);
            }


            if ($this->input->post('isConfirmed') == 1) {
                $leaveTypeID = $this->input->post('leaveTypeID');
                $isRequiredYes = $this->db->query("select * from srp_erp_leavetype WHERE  leaveTypeID=$leaveTypeID AND attachmentRequired=1 ")->row_array();
                if (!empty($isRequiredYes)) {
                    $leaveMasterID = $this->input->post('leaveMasterID');
                    $attachmentExist = $this->db->query("SELECT * FROM srp_erp_documentattachments WHERE documentID='LA' AND documentSystemCode='$leaveMasterID'")->row_array();
                    if (empty($attachmentExist)) {
                        echo exit(json_encode(array('e', 'Please attach relevant document to confirm')));

                    }
                }
            }
            /*leave Update*/
            $this->db->where('leaveMasterID', $leaveMasterID)->update('srp_erp_leavemaster', $data);

            /*Notify table function*/
            $companyID = current_companyID();
            $this->db->where('documentID', 'LA')->where('systemID', $leaveMasterID)
                ->where('companyID', $companyID)->delete('srp_erp_notify');
            if(!empty($notify_list)){
                $notify_data = [];
                foreach ($notify_list as $notify_emp){
                    $notify_data[] = [
                        'documentID'=> 'LA', 'systemID'=> $leaveMasterID, 'empID'=> $notify_emp,
                        'companyID'=> $companyID, 'createdPCID'=> $modifiedPCID, 'createdUserID'=> $modifiedUserID,
                        'createdDateTime'=> $date_time, 'timestamp'=> $date_time
                    ];
                }
                $this->db->insert_batch('srp_erp_notify', $notify_data);
            }

            $this->db->trans_complete();

            

            /* Covering Employee */

        $coveringEmpID = $this->input->post('coveringEmpID[]');
        $this->db->trans_start();
        if (!empty($coveringEmpID)) 
        {

                // Delete existing records not present in the new set of values
                $this->db->where('leaveapplicationID', $leaveMasterID);
                $this->db->where_not_in('coveringID', $coveringEmpID);
                $this->db->delete('srp_erp_leave_covering_employee');

                // Update existing records
                foreach ($coveringEmpID as $conempupdate) {
                    $data = array(
                        'coveringID' => $conempupdate,
                    );

                    $this->db->where('leaveapplicationID', $leaveMasterID);
                    $this->db->where('coveringID', $conempupdate);
                    $this->db->update('srp_erp_leave_covering_employee', $data);
                }

                // Insert new records
                $existingCoveringIDs = $this->db
                    ->select('coveringID')
                    ->get_where('srp_erp_leave_covering_employee', array('leaveapplicationID' => $leaveMasterID))
                    ->result_array();

                $existingCoveringIDs = array_column($existingCoveringIDs, 'coveringID');
                $newCoveringIDs = array_diff($coveringEmpID, $existingCoveringIDs);

                foreach ($newCoveringIDs as $newCoveringID) {
                    $data = array(
                        'leaveapplicationID' => $leaveMasterID,
                        'coveringID' => $newCoveringID,
                    );
                    $this->db->insert('srp_erp_leave_covering_employee', $data);
                }
                $this->db->trans_complete();

            //return array('s', 'Records updated successfully');
        } 
        // else 
        // {
        //     return array('e', 'Invalid input data');
        // }

                        
                    

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();

                return array('e', 'Failed Update Data');
            } else {
                $this->db->trans_commit();

                if ($isConfirmed == 1) {
                    $this->leave_notify($leaveMasterID, 'confirm');
                    return $this->leave_ApprovalCreate($leaveMasterID, $level = 1);
                } else {
                    return ['s', 'Leave Update Process Success.'];
                }
            }
        }

    }

    function leave_notify($id, $on){
        $list = $this->get_notify_list('LA', $id);
        if(empty($list)){
            return true;
        }
        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID 
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$id}")->row_array();
        $body = '';
        $startDate = date('Y-m-d', strtotime($leave['startDate']));
        $endDate = date('Y-m-d', strtotime($leave['endDate']));
        switch($on){
            case 'confirm':
                $body = "{$leave['Ename2']} - {$leave['empCode']} has applied a leave [ {$leave['documentCode']} ] ";
                $body .= ($startDate != $endDate)? "from {$startDate} to {$endDate}": "on {$startDate}";
            break;

            case 'approval':
                $body = "Leave Application [ {$leave['documentCode']} ] of {$leave['Ename2']} - {$leave['empCode']} is approved.";
            break;

            case 'refer-back':
                $body = "Leave Application [ {$leave['documentCode']} ] of {$leave['Ename2']} - {$leave['empCode']} is referred back.";
            break;
        }

        $this->load->library('firebase_notification');
        $subject = 'Leave Notification';
        foreach ($list as $notify_emp){
            $param["empName"] = $notify_emp["Ename2"];
            $param["body"] = $body;

            $empID = $notify_emp["empID"];
            $docCode = $leave['documentCode'];

            $mailData = [
                'approvalEmpID' => $empID, 'documentCode' => $docCode,
                'toEmail' => $notify_emp["EEmail"], 'subject' => $subject, 'param' => $param
            ];

            send_approvalEmail($mailData);

            /*** Firebase Mobile Notification*/
            $token_android = firebaseToken($empID, 'android');
            $token_ios = firebaseToken($empID, 'apple');

            if(!empty($token_android)) {
                $this->firebase_notification->sendFirebasePushNotification($subject, $body, $token_android, 1, $docCode, "LA", $id, "android");
            }
            if(!empty($token_ios)) {
                $this->firebase_notification->sendFirebasePushNotification($subject, $body, $token_ios, 1, $docCode, "LA", $id, "apple");
            }
        }
    }

    function leave_ApprovalCreate($leaveMasterID, $level)
    {
        $companyID = current_companyID();
        $companies = $companyID;
        $groupCompanyID = $this->db->query("SELECT companyGroupID 
                                            FROM srp_erp_companygroupdetails 
                                            WHERE srp_erp_companygroupdetails.companyID = $companyID"
                                            )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }
        $current_userID = current_userID();

        $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

        if($leaveApprovalWithGroup==1){
            $leave_master = $this->db->query("SELECT * FROM srp_erp_leavemaster WHERE companyID={$companyID} AND leaveMasterID ={$leaveMasterID}")->row_array();
            $isCovering_with_policy = $this->db->query("SELECT approvalType FROM srp_erp_leaveapprovalsetup WHERE companyID={$companyID} AND leaveGroupID ={$leave_master['leaveGroupID']} AND approvalType=4")->row_array();

            if($isCovering_with_policy){
                $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, lce.coveringID as coveringEmpIDs,empTB.leaveGroupID
                FROM srp_erp_leavemaster AS leaveMaster
                JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                JOIN srp_erp_leave_covering_employee lce ON leaveMaster.leaveMasterID = lce.leaveapplicationID
                WHERE leaveMasterID={$leaveMasterID}  AND companyID={$companyID} GROUP BY leaveMaster.empID")->row_array();
            }else{
                $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID as coveringEmpIDs,empTB.leaveGroupID
                FROM srp_erp_leavemaster AS leaveMaster
                JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                WHERE leaveMasterID={$leaveMasterID} AND companyID={$companyID}")->row_array();
            }
        }else{
            $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID as coveringEmpIDs,empTB.leaveGroupID
            FROM srp_erp_leavemaster AS leaveMaster
            JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
            WHERE leaveMasterID={$leaveMasterID} AND companyID={$companyID}")->row_array();
        }
        
        
        $empID = $leave['empID'];
        $coveringEmpID = $leave['coveringEmpIDs'];
        $leaveGroupID = $leave['leaveGroupID'];

        if($leaveApprovalWithGroup==1){
            $setupData = getLeaveApprovalSetup(null,null,$leaveGroupID);
        }else{
            $setupData = getLeaveApprovalSetup(null,null,null);
        }
        $approvalEmp_arr = $setupData['approvalEmp'];
        $approvalLevel = $setupData['approvalLevel'];
        $isManagerAvailableForNxtApproval = 0;
        $nextLevel = null;
        $nextApprovalEmpID = null;
        $data_app = [];


        /**** If the number of approval level is less than current approval than only this process will run ****/
        if ($level <= $approvalLevel) {

            $managers = $this->db->query("SELECT *, {$coveringEmpID} AS coveringEmp FROM (
                                             SELECT repManager,HOD
                                             FROM srp_employeesdetails AS empTB

                                             LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.EmpID={$empID} 
                                             AND dpt.isPrimary = 1
                                            ) AS HodData ON empTB.EIdNo = HodData.EmpNew

                                             LEFT JOIN (
                                                 SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers
                                                 WHERE active = 1 AND empID={$empID} AND companyID={$companyID}
                                             ) AS repoManagerTB ON empTB.EIdNo = repoManagerTB.empID
                                             WHERE Erp_companyID = '{$companyID}' AND EIdNo={$empID}
                                         ) AS empData
                                         LEFT JOIN (
                                              SELECT managerID AS topManager, empID AS topEmpID
                                              FROM srp_erp_employeemanagers WHERE companyID={$companyID} AND active = 1
                                         ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID")->row_array();

            $approvalSetup = $setupData['approvalSetup'];
            $x = $level;


            /**** Validate is there a manager available for next approval level ****/

            $i = 0;

            while ($x <= $approvalLevel) {

                $isCurrentLevelApproval_exist = 0;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $x);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';

                if ($approvalType == 3) {
                    $isCurrentLevelApproval_exist = 1;

                    if ($isManagerAvailableForNxtApproval == 0) {
                        $nextLevel = $x;
                        $nextApprovalEmpID = (array_key_exists($x, $approvalEmp_arr)) ? $approvalEmp_arr[$x] : '';
                        $isManagerAvailableForNxtApproval = 1;
                    }

                }else if($approvalType == 4){

                    $isCurrentLevelApproval_exist = 1;


                    $this->db->select('*');
                    $this->db->from('srp_erp_leave_covering_employee');
                    $this->db->where('leaveapplicationID', $leaveMasterID);
                    $covering_emp = $this->db->get()->result_array();

                        if($covering_emp){
                            $coveringEmpID = $covering_emp;
                        }else{
                            $coveringEmpID = [];
                        }

                    if ($isManagerAvailableForNxtApproval == 0) {
                        foreach($coveringEmpID as $val){
                            $nextLevel = $x;
                            $nextApprovalEmpID = $val['coveringID'];
                            $isManagerAvailableForNxtApproval = 1;
                        }
                        
                    }
                    
                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if (!empty($managers[$managerType])) {
                        $isCurrentLevelApproval_exist = 1;

                        if ($isManagerAvailableForNxtApproval == 0) {
                            $nextLevel = $x;
                            $nextApprovalEmpID = $managers[$managerType];
                            $isManagerAvailableForNxtApproval = 1;
                        }
                    }
                }

                if ($isCurrentLevelApproval_exist == 1) {
                        $data_app[$i]['companyID'] = $companyID;
                        $data_app[$i]['companyCode'] = current_companyCode();
                        $data_app[$i]['departmentID'] = 'LA';
                        $data_app[$i]['documentID'] = 'LA';
                        $data_app[$i]['documentSystemCode'] = $leaveMasterID;
                        $data_app[$i]['documentCode'] = $leave['documentCode'];
                        $data_app[$i]['table_name'] = 'srp_erp_leavemaster';
                        $data_app[$i]['table_unique_field_name'] = 'leaveMasterID';
                        $data_app[$i]['documentDate'] = current_date();
                        $data_app[$i]['approvalLevelID'] = $x;
                        $data_app[$i]['roleID'] = null;
                        $data_app[$i]['approvalGroupID'] = current_user_group();
                        $data_app[$i]['roleLevelOrder'] = null;
                        $data_app[$i]['docConfirmedDate'] = current_date();
                        $data_app[$i]['docConfirmedByEmpID'] = $current_userID;
                        $data_app[$i]['approvedEmpID'] = null;
                        $data_app[$i]['approvedYN'] = 0;
                        $data_app[$i]['approvedDate'] = null;
                        $i++;
                }

                $x++;
            }

        }
        if (!empty($data_app)) {

            $this->db->insert_batch('srp_erp_documentapproved', $data_app);

            $upData = [
                'currentLevelNo' => $nextLevel,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            ];
            $this->db->where('leaveMasterID', $leaveMasterID);
            $update = $this->db->update('srp_erp_leavemaster', $upData);

            if ($update) {

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];
                $balanceLeave = ($balanceLeave > 0) ? ($balanceLeave - $leave['days']) : 0;

                if (is_array($nextApprovalEmpID)) {
                    /**** If the approval type HR there may be more than one employee for next approval process ****/
                    $nextApprovalEmpID = implode(',', array_column($nextApprovalEmpID, 'empID'));
                }

                $nxtEmpData_arr = $this->db->query("SELECT EIdNo, Ename2, EEmail FROM srp_employeesdetails WHERE Erp_companyID IN ({$companies})
                AND EIdNo IN ({$nextApprovalEmpID})")->result_array();

                /*** Firebase Mobile Notification*/
                $token_android = firebaseToken($nextApprovalEmpID, 'android');
                $token_ios = firebaseToken($nextApprovalEmpID, 'apple');

                if($leave['startDate'] == $leave['endDate']) {
                    $firebaseBody = $leave['Ename2'] . " has applied for a leave on " . date('d M Y', strtotime($leave['startDate']));
                } else {
                    $firebaseBody = $leave['Ename2'] . " has applied for a leave from " . date('d M Y', strtotime($leave['startDate'])) . " to " . date('d M Y', strtotime($leave['endDate']));
                }

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Leave Approval", $firebaseBody, $token_android, 1, $leave['documentCode'], "LA", $leaveMasterID, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Leave Approval", $firebaseBody, $token_ios, 1, $leave['documentCode'], "LA", $leaveMasterID, "apple");
                }

             
                foreach ($nxtEmpData_arr as $nxtEmpData) {

                    $bodyData = 'Leave application ' . $leave['documentCode'] . ' is pending for your approval.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr> ';

                    if ($coveringEmpID != $nxtEmpData['EIdNo']) {
                        $bodyData .= '<tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>';
                    }

                    $bodyData .= '</table>';

                    $param["empName"] = $nxtEmpData["Ename2"];
                    $param["body"] = $bodyData;

                    $mailData = [
                        'approvalEmpID' => $leave['empID'],
                        'documentCode' => $leave['documentCode'],
                        'toEmail' => $nxtEmpData["EEmail"],
                        'subject' => 'Employee Leave Approvel',
                        'empID' => $empID,
                        'type' => 'leaveApproval',
                        'param' => $param,
                    ];
    
                    send_approvalEmail_Manual($mailData);
             
                }

                return ['s', 'Leave Approval created successfully.'];


            } else {
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }

        } else {

            $data = array(
                'currentLevelNo' => $approvalLevel,
                'approvedYN' => 1,
                'approvedDate' => current_date(),
                'approvedbyEmpID' => $current_userID,
                'approvedbyEmpName' => $this->common_data['current_user'],
                'approvalComments' => '',
            );

            $this->db->trans_start();

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->update('srp_erp_leavemaster', $data);

            /**** Confirm leave accrual pending*/
            $accrualData = [
                'confirmedYN' => 1,
                'confirmedby' => current_userID(),
                'confirmedDate' => current_date()
            ];

            $this->db->where('companyID', $companyID);
            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where('confirmedYN', 0);
            $this->db->update('srp_erp_leaveaccrualmaster', $accrualData);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                /*** Firebase Mobile Notification*/
                $token_android = firebaseToken($empID, 'android');
                $token_ios = firebaseToken($empID, 'apple');


                if($leave['startDate'] == $leave['endDate']) {
                    $firebaseBody = "Your leave on " . date('d M Y', strtotime($leave['startDate'])) . ' has been approved';
                } else {
                    $firebaseBody = "Your leave from " . date('d M Y', strtotime($leave['startDate'])) . " to " . date('d M Y', strtotime($leave['endDate'])) . ' has been approved';
                }

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Approved", $firebaseBody, $token_android, 3, $leave['documentCode'], "LA", $leaveMasterID, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Approved", $firebaseBody, $token_ios, 3, $leave['documentCode'], "LA", $leaveMasterID, "apple");
                }

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];

                $param["empName"] = $leave["Ename2"];
                $param["body"] = 'Leave application ' . $leave['documentCode'] . ' is approved.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>
                                      <tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>
                                  </table>';

                $mailData = [
                    'approvalEmpID' => $leave['empID'],
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $leave["EEmail"],
                    'subject' => 'Employee Leave Approved',
                    'empID' => $empID,
                    'type' => 'leaveApproval',
                    'param' => $param,
                ];

                send_approvalEmail_Manual($mailData);

                $success_msg = $this->lang->line('hrms_payroll_approved_successfully');/*'Approved successfully'*/
                return array('s', $success_msg);

            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }
        }
    }

    function unloackUser()
    {

        $data['NoOfLoginAttempt'] = $this->input->post('chkdVal');
        $this->db->where('EIdNo', $this->input->post('empID'));
        $result = $this->db->update('srp_employeesdetails', $data);
        if ($result) {
            return array('s', 'Updated Successfully ');
        } else {
            return array('e', 'Update Failed ');
        }
    }

    function save_machineMapping()
    {
        $data['description'] = $this->input->post('description');
        if ($this->input->post('dbYN') == 1) {
            $data['dbhost'] = $this->input->post('dbhost');
            $data['dbname'] = $this->input->post('dbname');
            $data['dbpassword'] = $this->input->post('dbpassword');
            $data['dbuser'] = $this->input->post('dbuser');
            $data['dbtableName'] = $this->input->post('dbtableName');
        }
        $insert = $this->db->insert('srp_erp_machinemaster', $data);
        if ($insert) {
            return array('s', 'Successfully Inserted', $this->db->insert_id());
        } else {
            return array('e', 'Failed');
        }
    }

    function save_machineMapping_detail()
    {
        $data['columnName'] = $this->input->post('columnName');
        $data['machineMasterID'] = $this->input->post('machineID');

        $fetch_sortOrder = $this->db->query("select * from srp_erp_machinedetail where machineMasterID = {$data['machineMasterID']} order by sortOrder desc limit 1 ")->row_array();
        if (empty($fetch_sortOrder) || $fetch_sortOrder['sortOrder'] == null) {
            $data['sortOrder'] = 1;
        } else {
            $data['sortOrder'] = $fetch_sortOrder['sortOrder'] + 1;
        }

        $insert = $this->db->insert('srp_erp_machinedetail', $data);
        if ($insert) {
            return array('s', 'Successfully Inserted', $this->db->insert_id());
        } else {
            return array('e', 'Failed');
        }
    }

    /*function update_machineMappingcolumn_detail()
    {
        $value = $this->input->post('value');
        $masterID = $this->input->post('masterID');
        $detailID = $this->input->post('detailID');
        $this->db->update('srp_erp_machinedetail', array('machineTypeID' => $value), array('machineDetailID' => $detailID));
    }*/

    function update_machineMappingcolumn_detail()
    {
        $value = $this->input->post('value');
        $masterID = $this->input->post('masterID');
        $detailID = $this->input->post('detailID');
        $this->db->update('srp_erp_machinedetail', array('machineTypeID' => $value), array('machineDetailID' => $detailID));

        return array('s', 'Successfully Updated');
    }

    /** Over-time management for Salam-Air **/
    function save_OT_monthAddition()
    {
        $companyID = current_companyID();
        $monthDescription = $this->input->post('monthDescription');
        $currencyID = $this->input->post('currencyID');
        $additionDate = $this->input->post('dateDesc');
        $date_format_policy = date_format_policy();
        $additionDate = input_format_date($additionDate, $date_format_policy);

        $serialNo = $this->db->query("SELECT IF( ISNULL(MAX(serialNo)), 1 , ( MAX(serialNo) + 1) ) AS lastNumber
                                      FROM srp_erp_ot_monthlyadditionsmaster WHERE companyID={$companyID}")->row('lastNumber');

        $this->load->library('sequence');
        $docCode = $this->sequence->sequence_generator('OTA', $serialNo);


        $data = array(
            'monthlyAdditionsCode' => $docCode,
            'serialNo' => $serialNo,
            'documentID' => 'OTA',
            'description' => $monthDescription,
            'currencyID' => $currencyID,
            'dateMA' => $additionDate,
            'companyID' => current_companyID(),
            'companyCode' => current_companyCode(),
            'createdPCID' => current_pc(),
            'createdUserGroup' => current_user_group(),
            'createdUserID' => current_userID(),
            'createdUserName' => current_employee(),
            'createdDateTime' => current_date()
        );

        $this->db->trans_start();


        $this->db->insert('srp_erp_ot_monthlyadditionsmaster', $data);
        $monthlyAdditionsMasterID = $this->db->insert_id();


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Employee Created Successfully.', $monthlyAdditionsMasterID);
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error In Employee Creating');
        }
    }

    public function edit_OT_monthAddition($editID = null)
    {
        $id = (isset($editID)) ? $editID : $this->input->post('editID');
        $convertFormat = convert_date_format_sql();
        $dateField = 'DATE_FORMAT(dateMA,\'' . $convertFormat . '\') AS dateMA ';
        $data = $this->db->select('monthlyAdditionsCode, description, confirmedYN, currencyID, isProcessed, ' . $dateField)
            ->from('srp_erp_ot_monthlyadditionsmaster')
            ->where('monthlyAdditionsMasterID', $id)
            ->get()->row_array();

        return $data;
    }

    function save_OT_employeeAsTemp()
    {
        $empDet = $this->input->post('temp_empHiddenID');
        $empCurrencyID = $this->input->post('temp_empCurrencyID');
        $empCurrencyCode = $this->input->post('temp_empCurrencyCode');
        $empCurrencyDPlace = $this->input->post('temp_empCurrencyDPlace');
        $masterID = $this->input->post('masterID');
        $rateInt = $this->input->post('temp_rateInt');
        $rateIntLay = $this->input->post('temp_rateIntLay');
        $rateLocalLay = $this->input->post('temp_rateLocalLay');
        $temp_slabID = $this->input->post('temp_slabID');
        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $pcID = current_pc();
        $userID = current_userID();
        $userName = current_employee();
        $userGroup = current_user_group();

        $data = array();
        $current_date = current_date();
        $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];


        foreach ($empDet as $key => $emp) {
            $trCurrencyID = $empCurrencyID[$key];
            $data[$key]['empID'] = $emp;
            $data[$key]['monthlyAdditionsMasterID'] = $masterID;
            $data[$key]['intHRInputID'] = 1;
            $data[$key]['intHRhourlyRate'] = $rateInt[$key];
            $data[$key]['lclLyHRInputID'] = 2;
            $data[$key]['lclLyHRhourlyRate'] = $rateLocalLay[$key];
            $data[$key]['intLyInputID'] = 3;
            $data[$key]['intLyhourlyRate'] = $rateIntLay[$key];
            $data[$key]['totalblockInputID'] = 4;
            $data[$key]['slabMasterID'] = $temp_slabID[$key];
            $data[$key]['transactionCurrencyID'] = $trCurrencyID;
            $data[$key]['transactionCurrency'] = $empCurrencyCode[$key];
            $data[$key]['transactionExchangeRate'] = 1;
            $data[$key]['transactionCurrencyDecimalPlaces'] = $empCurrencyDPlace[$key];

            if ($key > 0) {
                if ($trCurrencyID == $empCurrencyID[$key - 1]) {
                    $com_exchangeRate = $data[$key - 1]['companyLocalExchangeRate'];
                } else {
                    $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                    $com_exchangeRate = $com_exchangeRateData['conversion'];
                }
            } else {
                $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                $com_exchangeRate = $com_exchangeRateData['conversion'];
            }

            $data[$key]['companyLocalCurrencyID'] = $com_currencyID;
            $data[$key]['companyLocalCurrency'] = $com_currency;
            $data[$key]['companyLocalExchangeRate'] = $com_exchangeRate;
            $data[$key]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;

            $data[$key]['companyID'] = $companyID;
            $data[$key]['companyCode'] = $companyCode;
            $data[$key]['createdPCID'] = $pcID;
            $data[$key]['createdUserID'] = $userID;
            $data[$key]['createdUserName'] = $userName;
            $data[$key]['createdUserGroup'] = $userGroup;
            $data[$key]['createdDateTime'] = $current_date;
        }

        //echo '<pre>'; print_r($data); echo '</pre>';die();
        $this->db->trans_start();
        $this->db->insert_batch('srp_erp_ot_monthlyadditiondetail', $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to Update');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function save_fixed_element_salaryDeclaration()
    {


        $this->load->library('sequence');
        $currency_code = explode('|', trim($this->input->post('currency_code') ?? ''));
        $isPayrollCategory = trim($this->input->post('isPayrollCategory') ?? '');
        $isInitialDeclaration = trim($this->input->post('isInitialDeclaration') ?? '');
        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('documentDate');
        $documentDate = input_format_date($invDueDate, $date_format_policy);

        $data['documentID'] = 'FED';
        $data['documentSystemCode'] = $this->sequence->sequence_generator("FED");
        $data['documentDate'] = trim($documentDate);
        $data['Description'] = trim($this->input->post('salary_description') ?? '');
        //$data['isPayrollCategory'] = $isPayrollCategory;
        //$data['isInitialDeclaration'] = $isInitialDeclaration;
        $data['transactionCurrencyID'] = trim($this->input->post('MasterCurrency') ?? '');
        $data['transactionCurrency'] = trim($currency_code['0'] ?? '');
        $data['transactionER'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = $this->common_data['company_data']['company_default_currencyID'];
        $data['companyLocalCurrency'] = $this->common_data['company_data']['company_default_currency'];
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalER'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
        $data['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingER'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $data['companyID'] = $this->common_data['company_data']['company_id'];
        $data['companyCode'] = $this->common_data['company_data']['company_code'];
        $data['createdUserGroup'] = $this->common_data['user_group'];
        $data['createdPCID'] = $this->common_data['current_pc'];
        $data['createdUserID'] = $this->common_data['current_userID'];
        $data['createdUserName'] = $this->common_data['current_user'];
        $data['createdDateTime'] = current_date();
        $this->db->insert('srp_erp_ot_fixedelementdeclarationmaster', $data);
        if ($this->db->affected_rows() === FALSE) {
            $errMsg = 'Fixed Element Declaration Save Failed ' . $this->db->_error_message();
            return array('e', $errMsg);
        } else {
            $last_id = $this->db->insert_id();
            return array('s', 'Fixed Element Declaration Saved Successfully.', $last_id);
        }
    }

    function fetch_FixedElementDeclarationMaster($id)
    {
        $this->db->select("*");
        $this->db->from("srp_erp_ot_fixedelementdeclarationmaster");
        $this->db->where("fedeclarationMasterID", $id);
        $result = $this->db->get()->row_array();
        return $result;
    }

    function save_fixed_element_declaration()
    {
        $this->form_validation->set_rules('employee', 'Employee', 'trim|required');
        $this->form_validation->set_rules('amount[]', 'Amount', 'trim|required');
        $this->form_validation->set_rules('effectiveDate', 'Effective Date', 'trim|required|date');
        $this->form_validation->set_rules('cat[]', 'Category', 'trim|required');


        if ($this->form_validation->run() == FALSE) {
            return array('e', validation_errors());
        } else {
            $masterID = trim($this->input->post('feDeclarationMasterID') ?? '');

            $masterDetail = $this->fetch_FixedElementDeclarationMaster($masterID);


            $companyID = $this->common_data['company_data']['company_id'];
            $companyCode = $this->common_data['company_data']['company_code'];
            $com_currency = $this->common_data['company_data']['company_default_currency'];
            $com_currencyDPlace = $this->common_data['company_data']['company_default_decimal'];
            $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
            $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
            $createdPCID = $this->common_data['current_pc'];
            $createdUserID = $this->common_data['current_userID'];
            $createdUserName = $this->common_data['current_user'];
            $createdUserGroup = $this->common_data['user_group'];
            $createdDateTime = current_date();

            $empID = $this->input->post('employee');
            $amount = $this->input->post('amount');
            $cat = $this->input->post('cat');
            $effDate = $this->input->post('effectiveDate');
            $narration = $this->input->post('narration');

            $date_format_policy = date_format_policy();
            $effDate = input_format_date($effDate, $date_format_policy);


            $lastPayrollProcessed = lastPayrollProcessedForEmp($empID);

            $payDateFirst = date('Y-m-01', strtotime($effDate));
            if ($lastPayrollProcessed >= $payDateFirst) {
                return ['e', 'Pay date should be greater than [ ' . date('Y-F', strtotime($lastPayrollProcessed)) . ' ]'];
                exit;
            }

            $data = array();

            $i = 0;
            $this->db->trans_start();
            foreach ($cat as $key => $catVal) {

                $tr_amount = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                $localCon = currency_conversion($masterDetail['transactionCurrency'], $com_currency, $tr_amount);
                $reportCon = currency_conversion($masterDetail['transactionCurrency'], $com_repCurrency, $tr_amount);
                $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currencyDPlace) : round($tr_amount, $com_currencyDPlace);
                $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);
                $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];

                $data['feDeclarationMasterID'] = $masterID;
                $data['employeeNo'] = $empID;
                $data['fixedElementID'] = $catVal;
                $data['effectiveDate'] = $effDate;
                $data['narration'] = $narration;


                $data['transactionCurrencyID'] = $masterDetail['transactionCurrencyID'];
                $data['transactionCurrency'] = $masterDetail['transactionCurrency'];
                $data['transactionER'] = $masterDetail['transactionER'];
                $data['transactionCurrencyDecimalPlaces'] = $dPlace;


                $data['companyLocalCurrencyID'] = $localCon['currencyID'];
                $data['companyLocalCurrency'] = $com_currency;
                $data['companyLocalER'] = $localCon['conversion'];
                $data['companyLocalCurrencyDecimalPlaces'] = $com_currencyDPlace;


                $data['companyReportingCurrencyID'] = $reportCon['currencyID'];
                $data['companyReportingCurrency'] = $com_repCurrency;
                $data['companyReportingER'] = $reportCon['conversion'];
                $data['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;


                $data['amount'] = $tr_amount;
                $data['transactionAmount'] = $tr_amount;
                $data['companyLocalAmount'] = $localAmount;
                $data['companyReportingAmount'] = $reportAmount;

                $data['companyID'] = $companyID;
                $data['companyCode'] = $companyCode;
                $data['createdPCID'] = $createdPCID;
                $data['createdUserID'] = $createdUserID;
                $data['createdUserName'] = $createdUserName;
                $data['createdUserGroup'] = $createdUserGroup;
                $data['createdDateTime'] = $createdDateTime;

                $this->db->insert('srp_erp_ot_fixedelementdeclarationdetails', $data);
                $i++;
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                return array('s', 'Insert successfully ', $masterID);
            } else {
                $this->db->trans_rollback();
                return array('s', 'Failed to insert record');
            }

        }

    }

    function load_fixedElement_declaration_drilldown_table()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $employeeid = $this->input->post('employeeID');
        $convertFormat = convert_date_format_sql();

        $this->db->select('srp_erp_ot_fixedelementdeclarationdetails.feDeclarationDetailID,feDeclarationMasterID,employeeNo,srp_erp_ot_fixedelementdeclarationdetails.fixedElementID,
                           effectiveDate,srp_employeesdetails.ECode,srp_employeesdetails.Ename2,
                           srp_erp_ot_fixedelements.fixedElementDescription,transactionAmount, DATE_FORMAT(effectiveDate, \'' . $convertFormat . '\') AS effectiveDate2,
                           payDate, DATE_FORMAT(payDate,\'' . $convertFormat . '\') AS payDate2, narration');
        $this->db->where('feDeclarationMasterID', $masterID);
        $this->db->where('employeeNo', $employeeid);
        $this->db->from('srp_erp_ot_fixedelementdeclarationdetails');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_ot_fixedelementdeclarationdetails.employeeNo');
        $this->db->join('srp_erp_ot_fixedelements', 'srp_erp_ot_fixedelements.fixedElementID = srp_erp_ot_fixedelementdeclarationdetails.fixedElementID');
        return $this->db->get()->result_array();

    }

    function ConfirmFixedElementDeclaration()
    {
        $masterID = trim($this->input->post('masterID') ?? '');
        $masterDetail = $this->fetch_FixedElementDeclarationMaster($masterID);

        if ($masterDetail['approvedYN'] == 1) {
            return ['e', 'This document is already approved'];
        } else if ($masterDetail['confirmedYN'] == 1) {
            return ['e', 'This document is already confirmed'];
        }
        if ($masterDetail) {
            $systemCode = $masterDetail['documentSystemCode'];
            $table = 'srp_erp_ot_fixedelementdeclarationmaster';
            $primaryColumn = 'fedeclarationMasterID';
            $documentName = 'Fixed Element Declaration';
            $documentCode = $masterDetail['documentSystemCode'];
            $documentDate = $masterDetail['documentDate'];

            $validate_code = validate_code_duplication($documentCode, 'documentSystemCode', $masterID,'fedeclarationMasterID', 'srp_erp_ot_fixedelementdeclarationmaster');
            if(!empty($validate_code)) {
                return ['e', 'The document Code Already Exist.(' . $validate_code . ')'];
            }
            $this->load->library('approvals');
            $isAutoApproval = get_document_auto_approval('FED');
            if ($isAutoApproval == 0) { // If auto approval
                $this->db->trans_start();
                $this->approvals->auto_approve($masterID, $table, $primaryColumn, 'FED', $documentCode, $documentDate);
                $this->ot_insert_records_to_declaration_table($masterID, $masterDetail);
                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approved successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval process'];
                }
            }

            $approvals_status = $this->approvals->CreateApproval('FED', $masterID, $systemCode, $documentName, $table, $primaryColumn, 0, $documentDate);
            if ($approvals_status == 1) {
                return ['s', 'Approvals created successfully'];
            }
            if ($approvals_status == 3) {
                return ['w', 'There are no users exist to perform \'Fixed Element Declaration\' approval for this company.'];
            } else {
                return ['e', 'Error in process'];
            }
        } else {
            return ['e', 'No Master Records Found'];
        }
    }

    function delete_fixed_element_declaration_master()
    {
        $masterID = trim($this->input->post('masterID') ?? '');
        $this->db->delete('srp_erp_ot_fixedelementdeclarationmaster', array('fedeclarationMasterID' => $masterID));
        $this->db->delete('srp_erp_ot_fixedelementdeclarationdetails', array('feDeclarationMasterID' => $masterID));
        return true;
    }


    function save_fixed_element_declaration_approval()
    {

        $this->db->trans_start();
        $this->load->library('approvals');
        $system_code = trim($this->input->post('salaryOrderID') ?? '');
        $level_id = trim($this->input->post('Level') ?? '');
        $status = trim($this->input->post('approval_status') ?? '');
        $comments = trim($this->input->post('comments') ?? '');


        $masterDetail = $this->fetch_FixedElementDeclarationMaster($system_code);

        $this->db->trans_begin();

        $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'FED');

        if ($approvals_status == 1) {
            $this->ot_insert_records_to_declaration_table($system_code, $masterDetail);

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return ['e', 'Fixed Element Declaration Approval Process.'];
            } else {
                $this->db->trans_commit();
                return ['s', 'Fixed Element Declaration Approved Successfully.'];
            }


        } else if ($approvals_status == 2) {
            return ['s', 'Salary Declaration Approval : Level ' . $level_id . ' Successfully.'];
        } else if ($approvals_status == 3) {
            return ['s', '[ ' . $masterDetail['documentSystemCode'] . ' ] Approvals  Reject Process Successfully done.'];
        } else if ($approvals_status == 5) {
            return ['w', '[ ' . $masterDetail['documentSystemCode'] . ' ] Previous Level Approval Not Finished.'];
        } else {
            return ['e', 'Error in approvals Of  [ ' . $masterDetail['documentSystemCode'] . ' ] ', $approvals_status];
        }

    }

    function ot_insert_records_to_declaration_table($system_code, $masterDetail)
    {
        $createdPCID = $this->common_data['current_pc'];
        $createdUserID = $this->common_data['current_userID'];
        $createdUserName = $this->common_data['current_user'];
        $createdUserGroup = $this->common_data['user_group'];
        $createdDateTime = current_date();

        $this->db->select('*');
        $this->db->from('srp_erp_ot_fixedelementdeclarationdetails');
        $this->db->where('feDeclarationMasterID', $system_code);
        $details_arr = $this->db->get()->result_array();


        $declarationDet_arr = array();
        for ($i = 0; $i < count($details_arr); $i++) {
            $declarationDet_arr[$i]['fdMasterID'] = $system_code;
            $declarationDet_arr[$i]['fdDetailID'] = $details_arr[$i]['feDeclarationDetailID'];
            $declarationDet_arr[$i]['employeeNo'] = $details_arr[$i]['employeeNo'];
            $declarationDet_arr[$i]['fixedElementID'] = $details_arr[$i]['fixedElementID'];
            $declarationDet_arr[$i]['transactionCurrencyID'] = $details_arr[$i]['transactionCurrencyID'];
            $declarationDet_arr[$i]['transactionCurrency'] = $details_arr[$i]['transactionCurrency'];
            $declarationDet_arr[$i]['transactionER'] = $details_arr[$i]['transactionER'];
            $declarationDet_arr[$i]['transactionCurrencyDecimalPlaces'] = $details_arr[$i]['transactionCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['transactionAmount'] = $details_arr[$i]['transactionAmount'];
            $declarationDet_arr[$i]['amount'] = $details_arr[$i]['amount'];
            $declarationDet_arr[$i]['effectiveDate'] = $details_arr[$i]['effectiveDate'];
            $declarationDet_arr[$i]['narration'] = $details_arr[$i]['narration'];
            $declarationDet_arr[$i]['companyLocalCurrencyID'] = $details_arr[$i]['companyLocalCurrencyID'];
            $declarationDet_arr[$i]['companyLocalCurrency'] = $details_arr[$i]['companyLocalCurrency'];
            $declarationDet_arr[$i]['companyLocalER'] = $details_arr[$i]['companyLocalER'];
            $declarationDet_arr[$i]['companyLocalCurrencyDecimalPlaces'] = $details_arr[$i]['companyLocalCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyLocalAmount'] = $details_arr[$i]['companyLocalAmount'];
            $declarationDet_arr[$i]['companyReportingCurrencyID'] = $details_arr[$i]['companyReportingCurrencyID'];
            $declarationDet_arr[$i]['companyReportingCurrency'] = $details_arr[$i]['companyReportingCurrency'];
            $declarationDet_arr[$i]['companyReportingER'] = $details_arr[$i]['companyReportingER'];
            $declarationDet_arr[$i]['companyReportingCurrencyDecimalPlaces'] = $details_arr[$i]['companyReportingCurrencyDecimalPlaces'];
            $declarationDet_arr[$i]['companyReportingAmount'] = $details_arr[$i]['companyReportingAmount'];
            $declarationDet_arr[$i]['confirmedYN'] = 1;
            $declarationDet_arr[$i]['confirmedByEmpID'] = $masterDetail['confirmedByEmpID'];
            $declarationDet_arr[$i]['confirmedByName'] = $masterDetail['confirmedByName'];
            $declarationDet_arr[$i]['confirmedDate'] = $masterDetail['confirmedDate'];
            $declarationDet_arr[$i]['companyID'] = $details_arr[$i]['companyID'];
            $declarationDet_arr[$i]['companyCode'] = $details_arr[$i]['companyCode'];
            $declarationDet_arr[$i]['createdUserGroup'] = $createdUserGroup;
            $declarationDet_arr[$i]['createdUserID'] = $createdUserID;
            $declarationDet_arr[$i]['createdPCID'] = $createdPCID;
            $declarationDet_arr[$i]['createdDateTime'] = $createdDateTime;
            $declarationDet_arr[$i]['createdUserName'] = $createdUserName;
        }

        if (!empty($declarationDet_arr)) {
            $declarationDet_arr = array_values($declarationDet_arr);
            $this->db->insert_batch('srp_erp_ot_pay_fixedelementdeclration', $declarationDet_arr);
        }
    }

    function save_empMonthlyAdditionOT()
    {

        if (empty($this->input->post('empHiddenID'))) {
            return array('e', 'Please select at least one employee');
        } else {

            $this->form_validation->set_rules('empHiddenID[]', 'Employee', 'trim|required');

            if ($this->input->post('isConform') == 1) {
                //$this->form_validation->set_rules('amount[]', 'Amount/s', 'trim|required');
            }


            if ($this->form_validation->run() == FALSE) {
                return array('e', validation_errors());
            } else {
                $updateID = trim($this->input->post('updateID') ?? '');
                $isConfirmed = $this->input->post('isConfirm');

                $description = $this->input->post('monthDescription');
                $dateDesc = $this->input->post('dateDesc');
                $date_format_policy = date_format_policy();
                $dateDesc = input_format_date($dateDesc, $date_format_policy);
                $updateCode = $this->input->post('updateCode');
                $companyID = current_companyID();
                $companyCode = current_companyCode();
                $pcID = current_pc();
                $userID = current_userID();
                $userName = current_employee();
                $userGroup = current_user_group();
                $current_date = current_date();

                $editionDet = $this->edit_OT_monthAddition($updateID);
                if ($editionDet['confirmedYN'] == 1) {
                    return ['e', $this->input->post('updateCode') . ' is already confirmed, you can not change this.'];
                    exit;
                }

                $data_master = array(
                    'description' => $description,
                    'dateMA' => $dateDesc,
                    'modifiedPCID' => $pcID,
                    'modifiedUserID' => $userID,
                    'modifiedUserName' => $userName,
                    'modifiedDateTime' => $current_date
                );

                if ($isConfirmed == 1) {
                    $data_master['confirmedYN'] = 1;
                    $data_master['confirmedByEmpID'] = $userID;
                    $data_master['confirmedByName'] = $userName;
                    $data_master['confirmedDate'] = $current_date;
                }


                $this->db->trans_start();

                $this->db->where('monthlyAdditionsMasterID', $updateID)->where('companyID', $companyID)->update('srp_erp_ot_monthlyadditionsmaster', $data_master);
                $this->db->where('monthlyAdditionsMasterID', $updateID)->where('companyID', $companyID)->delete('srp_erp_ot_monthlyadditiondetail');

                $com_currency = $this->common_data['company_data']['company_default_currency'];
                $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
                $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
                $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];

                $empHiddenID = $this->input->post('empHiddenID');
                $empCurrencyDPlace = $this->input->post('empCurrencyDPlace');
                $empCurrencyCode = $this->input->post('empCurrencyCode');
                $h_intHRhourlyRate = $this->input->post('h_intHRhourlyRate');
                $m_intHRhourlyRate = $this->input->post('m_intHRhourlyRate');
                $_intHRhourlyRate = $this->input->post('_intHRhourlyRate');
                $h_lclLyHRhourlyRate = $this->input->post('h_lclLyHRhourlyRate');
                $m_lclLyHRhourlyRate = $this->input->post('m_lclLyHRhourlyRate');
                $_lclLyHRhourlyRate = $this->input->post('_lclLyHRhourlyRate');
                $h_intLyhourlyRate = $this->input->post('h_intLyhourlyRate');
                $m_intLyhourlyRate = $this->input->post('m_intLyhourlyRate');
                $_intLyhourlyRate = $this->input->post('_intLyhourlyRate');
                $h_totalblockHours = $this->input->post('h_totalblockHours');
                $m_totalblockHours = $this->input->post('m_totalblockHours');
                $amount_totalblockHours = $this->input->post('amount_totalblockHours');
                $_slabID = $this->input->post('_slabID');
                $amount = $this->input->post('amount');


                $data = array();
                foreach ($empHiddenID as $key => $empID) {
                    $tr_amount = (!empty($amount[$key])) ? str_replace(',', '', $amount[$key]) : 0;
                    $localCon = currency_conversion($empCurrencyCode[$key], $com_currency, $tr_amount);
                    $reportCon = currency_conversion($empCurrencyCode[$key], $com_repCurrency, $tr_amount);
                    $tot_InstructorMinutes = ($h_intHRhourlyRate[$key] * 60 + $m_intHRhourlyRate[$key]);
                    $tot_localLayOverMinutes = ($h_lclLyHRhourlyRate[$key] * 60 + $m_lclLyHRhourlyRate[$key]);
                    $tot_interNationalLayoverMinutes = ($h_intLyhourlyRate[$key] * 60 + $m_intLyhourlyRate[$key]);
                    $tot_blockHours = ($h_totalblockHours[$key] * 60 + $m_totalblockHours[$key]);
                    $intHRAmount = (($h_intHRhourlyRate[$key] * $_intHRhourlyRate[$key]) + ($m_intHRhourlyRate[$key] * ($_intHRhourlyRate[$key] / 60)));
                    $lclLYHRAmount = (($h_lclLyHRhourlyRate[$key] * $_lclLyHRhourlyRate[$key]) + ($m_lclLyHRhourlyRate[$key] * ($_lclLyHRhourlyRate[$key] / 60)));
                    $intLyAmount = (($h_intLyhourlyRate[$key] * $_intLyhourlyRate[$key]) + ($m_intLyhourlyRate[$key] * ($_intLyhourlyRate[$key] / 60)));
                    $dPlace = $empCurrencyDPlace[$key];

                    $data[$key]['empID'] = $empID;
                    $data[$key]['monthlyAdditionsMasterID'] = $updateID;
                    $data[$key]['intHRInputID'] = 1;
                    $data[$key]['intHRotHours'] = $tot_InstructorMinutes;
                    $data[$key]['intHRhourlyRate'] = $_intHRhourlyRate[$key];
                    $data[$key]['intHRAmount'] = round($intHRAmount, $dPlace);
                    $data[$key]['lclLyHRInputID'] = 2;
                    $data[$key]['lclLyHRotHours'] = $tot_localLayOverMinutes;
                    $data[$key]['lclLyHRhourlyRate'] = $_lclLyHRhourlyRate[$key];
                    $data[$key]['lclLYHRAmount'] = round($lclLYHRAmount, $dPlace);
                    $data[$key]['intLyInputID'] = 3;
                    $data[$key]['intLyotHours'] = $tot_interNationalLayoverMinutes;
                    $data[$key]['intLyhourlyRate'] = $_intLyhourlyRate[$key];
                    $data[$key]['intLyAmount'] = round($intLyAmount, $dPlace);
                    $data[$key]['totalblockInputID'] = 4;
                    $data[$key]['totalblockHours'] = $tot_blockHours;
                    $data[$key]['totalblockAmount'] = round(str_replace(',', '', $amount_totalblockHours[$key]), $dPlace);
                    $data[$key]['slabMasterID'] = $_slabID[$key];
                    $data[$key]['transactionCurrencyID'] = $localCon['trCurrencyID'];
                    $data[$key]['transactionCurrency'] = $empCurrencyCode[$key];
                    $data[$key]['transactionExchangeRate'] = 1;
                    $data[$key]['transactionCurrencyDecimalPlaces'] = $empCurrencyDPlace[$key];
                    $data[$key]['companyLocalCurrencyID'] = $localCon['currencyID'];
                    $data[$key]['companyLocalCurrency'] = $com_currency;
                    $data[$key]['companyLocalExchangeRate'] = $localCon['conversion'];
                    $data[$key]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                    $data[$key]['companyReportingCurrencyID'] = $reportCon['currencyID'];
                    $data[$key]['companyReportingCurrency'] = $com_repCurrency;
                    $data[$key]['companyReportingExchangeRate'] = $reportCon['conversion'];
                    $data[$key]['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;
                    $data[$key]['companyID'] = $companyID;
                    $data[$key]['companyCode'] = $companyCode;
                    $data[$key]['createdPCID'] = $pcID;
                    $data[$key]['createdUserID'] = $userID;
                    $data[$key]['createdUserName'] = $userName;
                    $data[$key]['createdUserGroup'] = $userGroup;
                    $data[$key]['createdDateTime'] = $current_date;
                }


                $this->db->insert_batch('srp_erp_ot_monthlyadditiondetail', $data);
                $this->db->trans_complete();

                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('s', 'Failed to Update [ ' . $updateCode . ' ] ');
                } else {
                    $this->db->trans_commit();
                    return array('s', '[ ' . $updateCode . ' ] Updated successfully');
                }
            }
        }

    }

    function removeAllEmp_OT()
    {
        $masterID = $this->input->post('masterID');
        $masterData = $this->Employee_model->edit_OT_monthAddition($masterID);
        if ($masterData['isProcessed'] == 1) {
            return ['e', 'This document is already processed you can not make changes on this.'];
        }

        if ($masterData['confirmedYN'] == 1) {
            return ['e', 'This document is already confirmed you can not make changes on this.'];
        }

        $this->db->trans_start();
        $this->db->where('monthlyAdditionsMasterID', $masterID)->delete('srp_erp_ot_monthlyadditiondetail');
        $this->db->trans_complete();

        if ($this->db->trans_status() == false) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function remove_emp_OT()
    {
        $masterID = $this->input->post('masterID');
        $detailID = $this->input->post('detailID');
        $masterData = $this->Employee_model->edit_OT_monthAddition($masterID);
        if ($masterData['isProcessed'] == 1) {
            return ['e', 'This document is already processed you can not make changes on this.'];
        }

        if ($masterData['confirmedYN'] == 1) {
            return ['e', 'This document is already confirmed you can not make changes on this.'];
        }

        $this->db->trans_start();
        $this->db->where('monthlyAdditionsMasterID', $masterID)->where('monthlyAdditionDetailID', $detailID)->delete('srp_erp_ot_monthlyadditiondetail');
        $this->db->trans_complete();

        if ($this->db->trans_status() == false) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function delete_fixedElement_declaration_detail()
    {
        $this->db->delete('srp_erp_ot_fixedelementdeclarationdetails', array('feDeclarationDetailID' => trim($this->input->post('detailID') ?? '')));
        $this->session->set_flashdata('s', 'Delete Successfully.');
        return true;
    }


    function update_userName()
    {
        $db2 = $this->load->database('db2', TRUE);
        $empId = $this->input->post('EIdNo');
        $userName = $this->input->post('UserName');
        $companyID = current_companyID();

        $result = $db2->query("SELECT Username FROM user WHERE empID != '{$empId}' AND Username = '{$userName}'")->row_array();
        if (!empty($result)) {
            return ['e', 'Employee User Name already exist'];
        }

        if (is_QHSE_integrated() == 'Y') {
            //Update user in QHSE DB
            $userData = $this->db->query("SELECT Ename2 AS empName,EEmail, integratedUserID, isActive
                            FROM srp_employeesdetails AS empTB
                            JOIN srp_erp_system_integration_user AS usr ON usr.empID = empTB.EIdNo 
                            AND integratedSystem = 'QHSE'
                            WHERE EIdNo = {$empId}")->row_array();

            if(!empty($userData['integratedUserID'])){
                $this->load->model('Company_model');

                $url = 'api/v1/user/update/'.$userData['integratedUserID'];
                $res_data = $this->Company_model->QHSE_api_requests([
                    'name'=> $userData['empName'], 'username'=> $userName,'email'=> $userData['EEmail'], 'activeYN'=> $userData['isActive']
                ], $url, $is_put=true);

                if($res_data['status'] == 'e'){
                    return ['e', "QHSE - Error<br/>{$res_data['message']}", 'http_code'=> $res_data['http_code']];
                }
            }
        }


        $data_central = ['Username' => $userName];
        $centralUpdate = $db2->where('empID', $empId)->where('companyID', $companyID)->update('user', $data_central);
        if ($centralUpdate) {
            $data2['UserName'] = $userName;

            $this->db->where('EIdNo', trim($empId));
            $update = $this->db->update('srp_employeesdetails', $data2);
            if ($update) {
                $is_logout = 0;
                if(current_userID() == $empId){
                    /**** if logged in user`s user name changed then, user have to logout ****/
                    $is_logout = 1;
                    $this->session->unset_userdata('empID');
                }
                return array('s', 'User Name updated successfully', 'is_logout'=> $is_logout);
            } else {
                return array('e', 'User Name update failed');
            }
        }
    }

    function fetch_family_details($empID, $isFromEmpMaster = '')
    {
        $this->db->select("*,srp_erp_family_details.name as name,r.relationship as relationshipDesc,c.Nationality as countryName,g.name as genderDesc, i.description as insuranDesc, cn_mas.CountryDes AS flag_img,idExpiryNo");
        $this->db->from("srp_erp_family_details");
        $this->db->join("srp_erp_family_relationship r", "r.relationshipID=srp_erp_family_details.relationship", "left");
        $this->db->join("srp_nationality c", "c.NId = srp_erp_family_details.nationality", "left");
        $this->db->join("srp_erp_countrymaster cn_mas", "cn_mas.countryID = c.countryID", "left");
        $this->db->join("srp_erp_gender g", "g.genderID = srp_erp_family_details.gender", "left");
        $this->db->join("srp_erp_family_insurancecategory i", "i.insurancecategoryID = srp_erp_family_details.insuranceCategory", "left");
        $this->db->where("empID", $empID);
        if ($isFromEmpMaster !== '') {
            $this->db->where("approvedYN", $isFromEmpMaster);
        }
        $output = $this->db->get()->result_array();

        return $output;
    }

    function fetch_bank_details($empID)
    {
        $this->db->select("srp_erp_pay_salaryaccounts.bankID,srp_erp_pay_salaryaccounts.branchID,srp_erp_pay_bankbranches.branchName as branchName,srp_erp_pay_bankmaster.bankName as bankName,srp_employeesdetails.Ename2 as Ename2");
        $this->db->from("srp_erp_pay_salaryaccounts");
        $this->db->join("srp_erp_pay_bankbranches", "srp_erp_pay_bankbranches.branchID=srp_erp_pay_salaryaccounts.branchID", "left");
        $this->db->join("srp_erp_pay_bankmaster", "srp_erp_pay_bankmaster.bankID = srp_erp_pay_salaryaccounts.bankID", "left");
        $this->db->join("srp_employeesdetails", "srp_employeesdetails.EIdNo = srp_erp_pay_salaryaccounts.employeeNo", "left");
        $this->db->where("employeeNo", $empID);
        $output = $this->db->get()->result_array();

        return $output;
    }

    function insert_familyDetails()
    {
        $isNeedApproval = getPolicyValues('EPD', 'All');
        $frm_profile = (!empty($this->input->post('frmprofile'))) ? $this->input->post('frmprofile') : 0;
        $national_no = trim($this->input->post('fam_national_no') ?? '');
        $id_expiry = trim($this->input->post('fam_id_expiry') ?? '');
        $id_no = trim($this->input->post('fam_id_no') ?? '');
        $passport_no = trim($this->input->post('fam_passport_no') ?? '');
        $pass_expiry = trim($this->input->post('fam_pass_expiry') ?? '');
        $pass_expiry = (empty($pass_expiry)) ? null : format_date_mysql_datetime($pass_expiry);
        $visa_no = trim($this->input->post('fam_visa_no') ?? '');
        $visa_expiry = trim($this->input->post('fam_visa_expiry') ?? '');
        $visa_expiry = (empty($visa_expiry)) ? null : format_date_mysql_datetime($visa_expiry);
        $ins_category = trim($this->input->post('fam_ins_category') ?? '');
        $insurance_no = trim($this->input->post('fam_insurance_no') ?? '');
        $cover_from = trim($this->input->post('fam_cover_from') ?? '');
        $cover_from = (empty($cover_from)) ? null : format_date_mysql_datetime($cover_from);

        $data = array(
            "empID" => $this->input->post('employeeID'),
            "name" => $this->input->post('name'),
            "relationship" => $this->input->post('relationshipType'),
            "nationality" => $this->input->post('nationality'),
            "DOB" => format_date_mysql_datetime(trim($this->input->post('DOB') ?? '')),
            "gender" => $this->input->post('gender'),
            'idNO' => $id_no,
            'idExpiryNo'=> $id_expiry,
            'nationalCode' => $national_no,
            'insuranceCategory' => $ins_category,
            'insuranceCode' => $insurance_no,
            'coverFrom' => $cover_from,
            'passportNo' => $passport_no,
            'passportExpiredate' => $pass_expiry,
            'VisaNo' => $visa_no,
            'VisaexpireDate' => $visa_expiry,
            "createdUserID" => current_userID(),
            "createdUserGroup" => current_user_group(),
            "createdPCid" => current_pc(),
            "timestamp" => current_date(),
        );

        if ($isNeedApproval == 1 && $frm_profile == 1) {
            $data['approvedYN'] = 0;
        }


        $empID = $this->input->post('employeeID');
        $result = $this->db->insert('srp_erp_family_details', $data);
        if ($result) {
            echo json_encode(array('error' => 0, 'message' => 'Family detail added successfully', 'empID' => $empID));
        } else {
            echo json_encode(array('error' => 1, 'message' => 'Error, Insert Error, Please contact your system support team'));
        }
    }


    function xeditable_update($tableName, $pkColumn)
    {
        $column = $this->input->post('name');
        $value = $this->input->post('value');
        $pk = $this->input->post('pk');
        switch ($column) {
            case 'DOB_O':
            case 'dateAssumed_O':
            case 'endOfContract_O':
            case 'SLBSeniority_O':
            case 'WSISeniority_O':
            case 'passportExpireDate_O':
            case 'VisaexpireDate_O':
            case 'coverFrom_O':
                $value = format_date_mysql_datetime($value);
                break;
        }

        $table = $tableName;
        $data = array($column => $value);
        if (in_array($column, ['passportExpiredate', 'VisaexpireDate'])) {
            $mail_column = ('passportExpiredate' == $column) ? 'isPassExpiryMailSend' : 'isVisaExpiryMailSend';
            $data[$mail_column] = 0;
        }
        $this->db->where($pkColumn, $pk);
        $result = $this->db->update($table, $data);
        //echo $this->db->last_query();
        return $result;
    }


    function delete_familydetail()
    {
        $this->db->trans_start();
        $id = trim($this->input->post('empfamilydetailsID') ?? '');

        $attachments = $this->db->select('myFileName')->where(['empFamilyDetailsID' => $id])->get('srp_erp_familydetailsattachments')->result_array();
        if (!empty($attachments)) {
            foreach ($attachments as $row) {
                $this->s3->delete($row['myFileName']);
            }
        }

        $this->db->delete('srp_erp_familydetailsattachments', ['empFamilyDetailsID' => $id]);
        $this->db->delete('srp_erp_family_details', ['empfamilydetailsID' => $id]);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            return ['s', 'Deleted successfully.'];
        } else {
            return ['e', 'Error in deleted process.'];
        }
    }

    function delete_family_attachment()
    {
        $id = trim($this->input->post('attachmentID') ?? '');

        $filename = $this->db->get_where('srp_erp_familydetailsattachments', ['attachmentID' => $id])->row('myFileName');
        $this->s3->delete($filename);

        $this->db->delete('srp_erp_familydetailsattachments', array('attachmentID' => $id));
        return array('s', 'Deleted Successfully');
    }


    function save_leaveApproval()
    {
        $companyID = current_companyID();
        $current_userID = current_userID();

        $companies = $companyID;
        $groupCompanyID = $this->db->query(
            "SELECT companyGroupID 
             FROM srp_erp_companygroupdetails 
             WHERE srp_erp_companygroupdetails.companyID = $companyID"
        )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }

        $status = $this->input->post('status');
        $level = $this->input->post('level');
        $comments = $this->input->post('comments');
        $leaveMasterID = $this->input->post('hiddenLeaveID');

        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, leaveMaster.leaveTypeID, isSickLeave, coveringEmpID,empTB.leaveGroupID,empTB.EcMobile, empTB.EmpDesignationId
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_erp_leavetype AS leaveType ON leaveType.leaveTypeID=leaveMaster.leaveTypeID
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$leaveMasterID} AND leaveMaster.companyID IN ({$companies}) AND Erp_companyID IN ({$companies})
                                   AND leaveType.companyID IN ({$companies})")->row_array();
        $empID = $leave['empID'];
        $coveringEmpID = $leave['coveringEmpID'];
        $companies = $leave['companyID'];
        if ($status == 2) {
            /**** Document refer back process ****/

            $upData = [
                'currentLevelNo' => 0,
                'confirmedYN' => 2,
                'confirmedByEmpID' => null,
                'confirmedByName' => null,
                'confirmedDate' => null,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            ];

            $this->db->trans_start();

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $upData);


            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->delete('srp_erp_documentapproved');


            $rejectData = [
                'documentID' => 'LA',
                'systemID' => $leaveMasterID,
                'documentCode' => $leave['documentCode'],
                'comment' => $comments,
                'rejectedLevel' => $level,
                'rejectByEmpID' => current_userID(),
                'table_name' => 'srp_erp_leavemaster',
                'table_unique_field' => 'leaveMasterID',
                'companyID' => $companies,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            ];

            $this->db->insert('srp_erp_approvalreject', $rejectData);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();

                /*** Firebase Mobile Notification*/
                $token_android = firebaseToken($leave["empID"], 'android');
                $token_ios = firebaseToken($leave["empID"], 'apple');

                if($leave['startDate'] == $leave['endDate']) {
                    $firebaseBody = "Your leave on " . date('d M Y', strtotime($leave['startDate'])) . ' has been referred back';
                } else {
                    $firebaseBody = "Your leave from " . date('d M Y', strtotime($leave['startDate'])) . " to " . date('d M Y', strtotime($leave['endDate'])) . ' has been referred back';
                }

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Referred back", $firebaseBody, $token_android, 3, $leave['documentCode'], "LA", $leaveMasterID, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Referred back", $firebaseBody, $token_ios, 3, $leave['documentCode'], "LA", $leaveMasterID, "apple");
                }

                /**Before bug fixes */
                /*$param["empName"] = $leave["Ename2"];
                $param["body"] = 'Leave application ' . $leave['documentCode'] . ' is refer backed';

                $mailData = [
                    'approvalEmpID' => $leave['empID'],
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $leave["EEmail"],
                    'subject' => 'Employee Leave Refer backed',
                    'param' => $param,
                ];
                send_approvalEmail($mailData); */

                /**after bug fixes*/
                $leave2 = $this->db->query("SELECT leaveMaster.empID, leaveMaster.leaveMasterID,leaveMaster.documentCode, 
                                        empTB.Ename2, empTB.EEmail, ECode AS empCode,leaveMaster.leaveTypeID, isSickLeave, coveringEmpID,empTB.leaveGroupID
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_erp_leavetype AS leaveType ON leaveType.leaveTypeID=leaveMaster.leaveTypeID
                                   JOIN srp_employeesdetails AS empTB ON leaveMaster.empID=empTB.EIdNo
                                   WHERE leaveMasterID={$leaveMasterID} AND leaveMaster.companyID IN ({$companies}) AND Erp_companyID IN ({$companies})
                                   AND leaveType.companyID IN ({$companies})")->row_array();

                $param["empName"] = $leave2["Ename2"];
                $param["body"] = 'Leave application ' . $leave2['documentCode'] . ' is refer backed';
                // $param["body"] = 'Leave application ' . $leave['documentCode'] . ' is refer backed.<br/>
                //                   <table border="0px">
                //                       <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                //                       <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                //                       <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>
                //                       <tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                //                        <tr><td><strong>Applied Days</td><td> : ' . $leave['days'] . ' Days</td></tr>
                //                       <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>
                //                   </table>';
                $mailData = [
                    // 'approvalEmpID' => $leave2['empID'],
                    'empID' => $leave2['empID'],
                    'documentSystemCode' => $leave2['leaveMasterID'],
                    'documentCode' => $leave2['documentCode'],
                    'documentID' =>  'LA',
                    'empEmail' => $leave2["EEmail"],
                    'emailSubject' => 'Leave Rejected',
                    'type' => "leaveApproval",
                    'param' => $param,
                ];

                send_approvalEmail($mailData);

                $this->leave_notify($leaveMasterID,'refer-back');

                return array('s', 'Leave application refer backed successfully');

            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }
        }
        
        $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

        if($leaveApprovalWithGroup == 1){
            $setupData = getLeaveApprovalSetup(null,null,$leave['leaveGroupID']);
        }else{
            $setupData = getLeaveApprovalSetup();
        }
    
        $approvalLevel = $setupData['approvalLevel'];
        $approvalEmp_arr = $setupData['approvalEmp'];
        $isManagerAvailableForNxtApproval = 0;
        $nextApprovalEmpID = null;
        $nextLevel = ($level + 1);
     
        /**** If the number of approval level is less than current approval than only this process will run ****/
        if ($nextLevel <= $approvalLevel) {

            $managers = $this->db->query("SELECT * FROM (
                                             SELECT repManager,HOD
                                             FROM srp_employeesdetails AS empTB

                                             LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.EmpID={$empID} 
                                             AND dpt.isPrimary = 1
                                            ) AS HodData ON empTB.EIdNo = HodData.EmpNew

                                             LEFT JOIN (
                                                 SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers
                                                 WHERE active = 1 AND empID={$empID} AND companyID IN ({$companies})
                                             ) AS repoManagerTB ON empTB.EIdNo = repoManagerTB.empID
                                             WHERE Erp_companyID IN ({$companies}) AND EIdNo={$empID}
                                         ) AS empData
                                         LEFT JOIN (
                                              SELECT managerID AS topManager, empID AS topEmpID
                                              FROM srp_erp_employeemanagers WHERE companyID IN ({$companies}) AND active = 1
                                         ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID")->row_array();

            $approvalSetup = $setupData['approvalSetup'];
            $x = $nextLevel;

            /**** Validate is there a manager available for next approval level ****/
            while ($x <= $approvalLevel) {
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $x);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);
              
                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                if ($approvalType == 3) {
                    //$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '';
                    $hrManagerID = (array_key_exists($x, $approvalEmp_arr)) ? $approvalEmp_arr[$x] : '';
                    $nextLevel = $x;
                    $nextApprovalEmpID = $hrManagerID;
                    $isManagerAvailableForNxtApproval = 1;
                    $x = $approvalLevel;

                }elseif($approvalType == 4){


                    $this->db->select('*');
                    $this->db->from('srp_erp_leave_covering_employee');
                    $this->db->where('leaveapplicationID', $leaveMasterID);
                    $covering_emp = $this->db->get()->result_array();

                        if($covering_emp){
                            $coveringEmpID = $covering_emp;
                        }else{
                            $coveringEmpID = [];
                        }

                   
                        foreach($coveringEmpID as $val){
                            
                            $nextApprovalEmpID = $val['coveringID'];
                           
                        }
                        $nextLevel = $x;
                        $isManagerAvailableForNxtApproval = 1;
                   
                    $x = $approvalLevel;
                }
                
                else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if (!empty($managers[$managerType])) {
                        $nextLevel = $x;
                        $nextApprovalEmpID = $managers[$managerType];
                        $isManagerAvailableForNxtApproval = 1;
                        $x = $approvalLevel;
                    }

                }

                $x++;
            }

        }

        if ($isManagerAvailableForNxtApproval == 1) {
            $upData = [
                'currentLevelNo' => $nextLevel,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            ];

            $this->db->trans_start();

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $upData);
           
            $approvalData = [
                'approvedYN' => $status,
                'approvedEmpID' => current_userID(),
                'approvedComments' => $comments,
                'approvedDate' => current_date(),
                'approvedPC' => current_pc()
            ];

            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->where('approvalLevelID', $level);
            $this->db->update('srp_erp_documentapproved', $approvalData);

            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];
                $balanceLeave = ($balanceLeave > 0) ? ($balanceLeave - $leave['days']) : 0;

                if (is_array($nextApprovalEmpID)) {
                    /**** If the approval type HR there may be more than one employee for next approval process ****/
                    $nextApprovalEmpID = implode(',', array_column($nextApprovalEmpID, 'empID'));
                }

                $nxtEmpData_arr = $this->db->query("SELECT EIdNo, Ename2, EEmail FROM srp_employeesdetails WHERE Erp_companyID IN ({$companies})
                                                    AND EIdNo IN ({$nextApprovalEmpID})")->result_array();

                /*** Firebase Mobile Notification*/
                $token_android = firebaseToken($nextApprovalEmpID, 'android');
                $token_ios = firebaseToken($nextApprovalEmpID, 'apple');

                if($leave['startDate'] == $leave['endDate']) {
                    $firebaseBody = $leave['Ename2'] . " has applied for a leave on " . date('d M Y', strtotime($leave['startDate']));
                } else {
                    $firebaseBody = $leave['Ename2'] . " has applied for a leave from " . date('d M Y', strtotime($leave['startDate'])) . " to " . date('d M Y', strtotime($leave['endDate']));
                }

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Leave Approval", $firebaseBody, $token_android, 1, $leave['documentCode'], "LA", $leaveMasterID, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Leave Approval", $firebaseBody, $token_ios, 1, $leave['documentCode'], "LA", $leaveMasterID, "apple");
                }

                foreach ($nxtEmpData_arr as $nxtEmpData) {

                    $bodyData = 'Leave application ' . $leave['documentCode'] . ' is pending for your approval.<br/>
                                 <table border="0px">
                                    <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                    <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                    <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr> ';

                    if ($coveringEmpID != $nxtEmpData["EIdNo"]) {
                        $bodyData .= '<tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>';
                    }

                    $bodyData .= '</table>';

                    $param["empName"] = $nxtEmpData["Ename2"];
                    $param["body"] = $bodyData;

                    $mailData = [
                        'approvalEmpID' => $nxtEmpData["EIdNo"],
                        'empID' => $empID,
                        'documentCode' => $leave['documentCode'],
                        'toEmail' => $nxtEmpData["EEmail"],
                        'subject' => 'Leave Approval',
                        'type' => 'leaveApproval',
                        'param' => $param
                    ];


                    send_approvalEmail_Manual($mailData);
                }

                $success_msg = strtolower($this->lang->line('hrms_payroll_approved_successfully'));/*'Approved successfully'*/
                return array('s', 'Level ' . $level . ' is ' . $success_msg);

            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }

        }
        else {

            $data = array(
                'currentLevelNo' => $approvalLevel,
                'approvedYN' => 1,
                'approvedDate' => current_date(),
                'approvedbyEmpID' => $current_userID,
                'approvedbyEmpName' => $this->common_data['current_user'],
                'approvalComments' => $comments,
            );
            
            $this->db->trans_start();


            if ($leave["isSickLeave"] == 1) {
                $this->sickLeaveNoPay_calculation($leave);
            }

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $data);

            $approvalData = [
                'approvedYN' => $status,
                'approvedEmpID' => current_userID(),
                'approvedComments' => $comments,
                'approvedDate' => current_date(),
                'approvedPC' => current_pc()
            ];

            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->where('approvalLevelID', $level);
            $this->db->update('srp_erp_documentapproved', $approvalData);

            
            /**** Confirm leave accrual pending*/
            $accrualData = [
                'confirmedYN' => 1,
                'confirmedby' => current_userID(),
                'confirmedDate' => current_date()
            ];

            $this->db->where_in('companyID', $companies);
            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where('confirmedYN', 0);
            $this->db->update('srp_erp_leaveaccrualmaster', $accrualData);

            $this->db->trans_complete();
            
            if ($this->db->trans_status() == true) {
                /*** Firebase Mobile Notification*/
                $token_android = firebaseToken($leave['empID'], 'android');
                $token_ios = firebaseToken($leave['empID'], 'apple');

                if($leave['startDate'] == $leave['endDate']) {
                    $firebaseBody = "Your leave on " . date('d M Y', strtotime($leave['startDate'])) . ' has been approved';
                } else {
                    $firebaseBody = "Your leave from " . date('d M Y', strtotime($leave['startDate'])) . " to " . date('d M Y', strtotime($leave['endDate'])) . ' has been approved';
                }

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Approved", $firebaseBody, $token_android, 3, $leave['documentCode'], "LA", $leaveMasterID, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("Leave Approved", $firebaseBody, $token_ios, 3, $leave['documentCode'], "LA", $leaveMasterID, "apple");
                }

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];

                $param["empName"] = $leave["Ename2"];
                $param["body"] = 'Leave application ' . $leave['documentCode'] . ' is approved.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>
                                      <tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                       <tr><td><strong>Applied Days</td><td> : ' . $leave['days'] . ' Days</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>
                                  </table>';

                $mailData = [
                    'approvalEmpID' => $leave['empID'],
                    'empID' => $empID,
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $leave["EEmail"],
                    'subject' => 'Employee Leave Approved',
                    'type' => 'leaveApproval',
                    'param' => $param,

                ];
                send_approvalEmail_Manual($mailData);

                $this->leave_notify($leaveMasterID,'approval');

                if($leave['isTravelRequest']==1){

                    $this->db->select('managerID')
                    ->from('srp_erp_employeemanagers')
                    ->where('empID',$leave['empID'])
                    ->where('companyID',$companyID);
                    $query=$this->db->get();
                    $managerID = $query->row(); 
                   
                  $travelRequest=[
                    'empID'=>$leave['empID'],
                    'desingationID'=>$leave['EmpDesignationId'],
                    'managerID' => $managerID->managerID,
                    'requestDate'=>$leave['startDate'],
                    'requestedByEmpID'=>$leave['empID'],
                    'subject'=>'Created from Annual Leave',
                    'descriptions'=>'Created from Annual Leave',
                    'loaclMobileNumber'=>$leave['EcMobile'],
                    'companyID'=>$companyID ,
                    'documentID'=>'TRQ',
                    'requestType'=>'Travel Request',
                    'travelRequestCode'=> $this->sequence->sequence_generator("TRQ"),
                    'leaveMasterID'=>$leaveMasterID
                  ];
                  $this->db->insert('srp_erp_travel_request', $travelRequest);
                  
                }

                $success_msg = $this->lang->line('hrms_payroll_approved_successfully');/*'Approved successfully'*/
                return array('s', $success_msg);
            } else {
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }
        }
    }

    function leave_cancellation_approval()
    {
        $companyID = current_companyID();
        $current_userID = current_userID();

        $companies = $companyID;
        $groupCompanyID = $this->db->query(
            "SELECT companyGroupID 
             FROM srp_erp_companygroupdetails 
             WHERE srp_erp_companygroupdetails.companyID = $companyID"
        )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }

        $status = $this->input->post('status');
        $level = $this->input->post('level');
        $comments = $this->input->post('comments');
        $leaveMasterID = $this->input->post('hiddenLeaveID');

        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, leaveMaster.leaveTypeID, isSickLeave, coveringEmpID
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_erp_leavetype AS leaveType ON leaveType.leaveTypeID=leaveMaster.leaveTypeID
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$leaveMasterID} AND leaveMaster.companyID  IN ({$companies}) AND Erp_companyID  IN ({$companies})
                                   AND leaveType.companyID  IN ({$companies})")->row_array();
        $empID = $leave['empID'];
        $coveringEmpID = $leave['coveringEmpID'];
        $companies = $leave['companyID'];

        if ($status == 2) {
            /**** Document refer back process ****/
            //die(json_encode(['e', 'Error']));
            $upData = [
                'requestForCancelYN' => 2,
                'cancelRequestedDate' => null,
                'cancelRequestComment' => null,
                'cancelRequestByEmpID' => null,
                'modifiedPCID' => current_pc(),
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => current_employee(),
                'modifiedDateTime' => current_date()
            ];

            $this->db->trans_start();

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $upData);


            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('isCancel', 1);
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->delete('srp_erp_documentapproved');


            $rejectData = [
                'documentID' => 'LA',
                'systemID' => $leaveMasterID,
                'documentCode' => $leave['documentCode'],
                'comment' => $comments,
                'isFromCancel' => 1,
                'rejectedLevel' => $level,
                'rejectByEmpID' => current_userID(),
                'table_name' => 'srp_erp_leavemaster',
                'table_unique_field' => 'leaveMasterID',
                'companyID' => $companies,
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            ];

            $this->db->insert('srp_erp_approvalreject', $rejectData);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                $param["empName"] = $leave["Ename2"];
                $param["body"] = 'Leave cancellation ' . $leave['documentCode'] . ' is refer backed';

                $mailData = [
                    'approvalEmpID' => $leave['empID'],
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $leave["EEmail"],
                    'subject' => 'Employee Leave Refer backed',
                    'param' => $param,
                ];

                send_approvalEmail($mailData);

                return array('s', 'Leave cancellation refer backed successfully');

            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }
        }


        $setupData = getLeaveApprovalSetup();
        $approvalLevel = $setupData['approvalLevel'];
        $approvalEmp_arr = $setupData['approvalEmp'];
        $isManagerAvailableForNxtApproval = 0;
        $nextApprovalEmpID = null;
        $nextLevel = ($level + 1);

        /**** If the number of approval level is less than current approval than only this process will run ****/
        if ($nextLevel <= $approvalLevel) {

            $managers = $this->db->query("SELECT * FROM (
                                             SELECT repManager,HOD
                                             FROM srp_employeesdetails AS empTB

                                             LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.EmpID={$empID} 
                                             AND dpt.isPrimary = 1
                                            ) AS HodData ON empTB.EIdNo = HodData.EmpNew

                                             LEFT JOIN (
                                                 SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers
                                                 WHERE active = 1 AND empID={$empID} AND companyID IN ({$companies})
                                             ) AS repoManagerTB ON empTB.EIdNo = repoManagerTB.empID
                                             WHERE Erp_companyID IN ({$companies}) AND EIdNo={$empID}
                                         ) AS empData
                                         LEFT JOIN (
                                              SELECT managerID AS topManager, empID AS topEmpID
                                              FROM srp_erp_employeemanagers WHERE companyID IN ({$companies}) AND active = 1
                                         ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID")->row_array();

            $approvalSetup = $setupData['approvalSetup'];
            $x = $nextLevel;

            /**** Validate is there a manager available for next approval level ****/
            while ($x <= $approvalLevel) {
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $x);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                if ($approvalType == 3) {
                    //$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '';
                    $hrManagerID = (array_key_exists($x, $approvalEmp_arr)) ? $approvalEmp_arr[$x] : '';
                    $nextLevel = $x;
                    $nextApprovalEmpID = $hrManagerID;
                    $isManagerAvailableForNxtApproval = 1;
                    $x = $approvalLevel;

                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if (!empty($managers[$managerType])) {
                        $nextLevel = $x;
                        $nextApprovalEmpID = $managers[$managerType];
                        $isManagerAvailableForNxtApproval = 1;
                        $x = $approvalLevel;
                    }

                }

                $x++;
            }

        }


        if ($isManagerAvailableForNxtApproval == 1) {
            $upData = [
                'currentLevelNo' => $nextLevel,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            ];

            $this->db->trans_start();

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $upData);
            
            
            $approvalData = [
                'approvedYN' => $status,
                'approvedEmpID' => current_userID(),
                'approvedComments' => $comments,
                'approvedDate' => current_date(),
                'approvedPC' => current_pc()
            ];

            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->where('approvalLevelID', $level);
            $this->db->update('srp_erp_documentapproved', $approvalData);
           
            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];
                $balanceLeave = ($balanceLeave > 0) ? ($balanceLeave - $leave['days']) : 0;

                if (is_array($nextApprovalEmpID)) {
                    /**** If the approval type HR there may be more than one employee for next approval process ****/
                    $nextApprovalEmpID = implode(',', array_column($nextApprovalEmpID, 'empID'));
                }

                $nxtEmpData_arr = $this->db->query("SELECT EIdNo, Ename2, EEmail FROM srp_employeesdetails WHERE Erp_companyID IN ({$companies})
                                                    AND EIdNo IN ({$nextApprovalEmpID})")->result_array();

                foreach ($nxtEmpData_arr as $nxtEmpData) {

                    $bodyData = 'Leave cancellation ' . $leave['documentCode'] . ' is pending for your approval.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>';

                    if ($coveringEmpID != $nxtEmpData["EIdNo"]) {
                        $bodyData .= '<tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>';
                    }

                    $bodyData .= '</table>';

                    $param["empName"] = $nxtEmpData["Ename2"];
                    $param["body"] = $bodyData;

                    $mailData = [
                        'approvalEmpID' => $nxtEmpData["EIdNo"],
                        'documentCode' => $leave['documentCode'],
                        'toEmail' => $nxtEmpData["EEmail"],
                        'subject' => 'Leave Cancellation Approval',
                        'param' => $param
                    ];


                    send_approvalEmail($mailData);
                }

                $success_msg = strtolower($this->lang->line('hrms_payroll_approved_successfully'));/*'Approved successfully'*/
                return array('s', 'Level ' . $level . ' is ' . $success_msg);

            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }

        } else {

            $data = array(
                'cancelledYN' => 1,
                'currentLevelNo' => $approvalLevel,
                'cancelledDate' => current_date(),
                'cancelledByEmpID' => $current_userID,
                'cancelledComment' => $comments,
            );

            $this->db->trans_start();
            

            if ($leave["isSickLeave"] == 1) {
                //$this->sickLeaveNoPay_calculation($leave);
            }


            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->where_in('companyID', $companies);
            $this->db->update('srp_erp_leavemaster', $data);
            
            $approvalData = [
                'approvedYN' => $status,
                'approvedEmpID' => current_userID(),
                'approvedComments' => $comments,
                'approvedDate' => current_date(),
                'approvedPC' => current_pc()
            ];

            $this->db->where('isCancel', 1);
            $this->db->where_in('companyID', $companies);
            $this->db->where('departmentID', 'LA');
            $this->db->where('documentSystemCode', $leaveMasterID);
            $this->db->where('approvalLevelID', $level);
            $this->db->update('srp_erp_documentapproved', $approvalData);
            

            /**** delete leave accruals that are created from calender holiday declaration*/
            $this->db->where_in('companyID', $companies);
            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->delete('srp_erp_leaveaccrualmaster');

            $this->db->where('leaveMasterID', $leaveMasterID);
            $this->db->delete('srp_erp_leaveaccrualdetail');


            //if($leave['isCalenderDays'] == 0){
            /***** create leave accrual for leave cancellation  *****/
            $this->create_leave_accrual($leave);
            //}

            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {

                $leaveBalanceData = $this->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];

                $param["empName"] = $leave["Ename2"];
                $param["body"] = 'Leave application ' . $leave['documentCode'] . ' is cancelled.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>
                                      <tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>
                                  </table>';

                $mailData = [
                    'approvalEmpID' => $leave['empID'],
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $leave["EEmail"],
                    'subject' => 'Employee Leave Cancelled',
                    'param' => $param,
                ];

                send_approvalEmail($mailData);

                $success_msg = $this->lang->line('hrms_payroll_approved_successfully');/*'Approved successfully'*/
                return array('s', $success_msg);
            } else {
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                return array('e', $common_failed);
            }
        }
    }

    function create_leave_accrual($leave)
    {
        $accDet = [];
        $leaveMasterID = $leave['leaveMasterID'];
        $daysEntitle = $leave['days'];
        $period = $leave['startDate'];
        $d = explode('-', $period);
        $description = 'Leave Accrual for leave cancellation ';
        $comment = $description . ' - ' . $leave['documentCode'];
        $leaveGroupID = $leave['leaveGroupID'];
        $policyMasterID = $leave['policyMasterID'];
        $this->load->library('sequence');
        $code = $this->sequence->sequence_generator('LAM');


        $accMaster = [
            'companyID' => current_companyID(),
            'leaveaccrualMasterCode' => $code,
            'documentID' => 'LAM',
            'cancelledLeaveMasterID' => $leaveMasterID,
            'description' => $comment,
            'year' => $d[0],
            'month' => $d[1],
            'leaveGroupID' => $leaveGroupID,
            'policyMasterID' => $policyMasterID,
            'createdUserGroup' => current_user_group(),
            'createDate' => current_date(),
            'createdpc' => current_pc(),
            'confirmedYN' => 1,
            'confirmedby' => current_userID(),
            'confirmedDate' => current_date(),
        ];


        $this->db->insert('srp_erp_leaveaccrualmaster', $accMaster);


        $accDet['leaveaccrualMasterID'] = $this->db->insert_id();
        $accDet['cancelledLeaveMasterID'] = $leaveMasterID;
        $accDet['empID'] = $leave['empID'];
        $accDet['comment'] = '';
        $accDet['leaveGroupID'] = $leaveGroupID;
        $accDet['leaveType'] = $leave['leaveTypeID'];
        $accDet['daysEntitled'] = $daysEntitle;
        $accDet['comment'] = $comment;
        $accDet['description'] = $description;
        $accDet['leaveMasterID'] = $leaveMasterID;
        $accDet['createDate'] = current_date();
        $accDet['createdUserGroup'] = current_user_group();
        $accDet['createdPCid'] = current_pc();

        $this->db->insert('srp_erp_leaveaccrualdetail', $accDet);

        return 1;
    }

    function sickLeaveNoPay_calculation($leave = [])
    {
        $companyID = current_companyID();
        $isNonSalaryProcess = getPolicyValues('NSP', 'All');
        $leaveTypeID = $leave["leaveTypeID"];
        $empID = $leave["empID"];

        $result = $this->db->query("SELECT salaryCategoryID, formulaString, isNonPayroll FROM srp_erp_sickleavesetup
                                    WHERE companyID='{$companyID}' AND leaveTypeID={$leaveTypeID}")->result_array();

        if (!empty($result)) {
            $detail = [];
            foreach ($result as $key => $row) {

                $isNonPayroll = $row['isNonPayroll'];
                $table = ($isNonPayroll != 'Y') ? 'srp_erp_pay_salarydeclartion' : 'srp_erp_non_pay_salarydeclartion';
                $formula = trim($row['formulaString'] ?? '');
                $formulaBuilder = formulaBuilder_to_sql_simple_conversion($formula);
                $formulaDecodeFormula = $formulaBuilder['formulaDecode'];
                $select_str = $formulaBuilder['select_str'];
                $whereInClause = $formulaBuilder['whereInClause'];

                $f_Data = $this->db->query("SELECT (round(({$formulaDecodeFormula }), dPlace) )AS transactionAmount, dPlace
                                            FROM (
                                                SELECT employeeNo, " . $select_str . ", transactionCurrencyDecimalPlaces AS dPlace
                                                FROM {$table} AS salDec
                                                JOIN srp_erp_pay_salarycategories AS salCat ON salCat.salaryCategoryID = salDec.salaryCategoryID
                                                WHERE salDec.companyID = {$companyID} AND employeeNo={$empID} AND salDec.salaryCategoryID
                                                IN (" . $whereInClause . ") AND salCat.companyID ={$companyID}
                                                GROUP BY employeeNo, salDec.salaryCategoryID
                                            ) calculationTB
                                            JOIN srp_employeesdetails AS emp ON emp.EIdNo = calculationTB.employeeNo
                                            WHERE EIdNo={$empID} AND Erp_companyID = {$companyID}
                                            GROUP BY employeeNo")->row_array();

                $_amount = (!empty($f_Data)) ? $f_Data['transactionAmount'] : 0;
                $dPlace = (!empty($f_Data)) ? $f_Data['dPlace'] : 0;
                $_amount = round(($_amount * $leave['workingDays']), $dPlace);
                if ($row['isNonPayroll'] == 'N') {
                    $detail['noPayAmount'] = $_amount;
                    $detail['salaryCategoryID'] = $row['salaryCategoryID'];
                } else {
                    $detail['noPaynonPayrollAmount'] = $_amount;
                    $detail['nonPayrollSalaryCategoryID'] = $row['salaryCategoryID'];
                }
            }

            if ($detail['noPayAmount'] != 0 || ($detail['noPaynonPayrollAmount'] != 0)) {
                $detail['leaveMasterID'] = $leave['leaveMasterID'];
                $detail['empID'] = $empID;
                $detail['attendanceDate'] = date('Y-m-d', strtotime($leave['endDate']));
                $detail['companyID'] = $companyID;
                $detail['companyCode'] = current_companyCode();

                $this->db->insert('srp_erp_pay_empattendancereview', $detail);
            }
        }
    }

    function save_salary_category()
    {
        $nopaySystemID = $this->input->post('nopaySystemID');
        $salaryCategoryID = $this->input->post('salaryCategoryID');
        $companyID = current_companyID();

        $this->db->select('nopaySystemID');
        $this->db->where('nopaySystemID', trim($nopaySystemID));
        $this->db->where('companyID', trim($companyID));
        $this->db->from('srp_erp_nopayformula');
        $nopayexsist = $this->db->get()->row_array();
        if (!empty($nopayexsist)) {
            return array('e', 'No pay Category already exist');
        } else {
            $data = array(
                'nopaySystemID' => $nopaySystemID,
                'salaryCategoryID' => $salaryCategoryID,
                'companyID' => $companyID,
                'companyCode' => current_companyCode(),
                'createdUserGroup' => $this->common_data['user_group'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdDateTime' => current_date(),
            );
            $result = $this->db->insert('srp_erp_nopayformula', $data);
            if ($result) {
                return array('s', 'Salary Category Successfully Added');
            }
        }
    }

    function edit_salary_category()
    {
        $noPaySystemID = $this->input->post('noPaySystemIDHidden');
        $salaryCategoryID = $this->input->post('salaryCategoryID');
        $companyID = current_companyID();

        $data = array(
            'salaryCategoryID' => $salaryCategoryID,
        );
        $this->db->where('nopaySystemID', trim($noPaySystemID));
        $this->db->where('companyID', trim($companyID));
        $result = $this->db->update('srp_erp_nopayformula', $data);
        if ($result) {
            return array('s', 'Salary Category Updated Successfully');
        }
    }

    function save_company_active()
    {
        $isActive = $this->input->post('chkdVal');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $isActive = ($isActive == 1)? 1: 0;

        /*if ($isActive == 1) {
            $noOfUser = $this->db->query("SELECT noOfUsers FROM srp_erp_company WHERE company_id = {$companyID} ")->row('noOfUsers');
            $activeUsers = $this->db->query("SELECT Count(EIdNo) AS cn FROM srp_employeesdetails WHERE isActive = 1 AND Erp_companyID = {$companyID}")->row('cn');
            if($activeUsers >= $noOfUser) {
                return array('w', 'Maximum user count exceeded ');
            }
        }*/

        if (is_QHSE_integrated() == 'Y') {
            //Update user in QHSE DB
            $userData = $this->db->query("SELECT Ename2 AS empName, EEmail,integratedUserID, UserName
                                    FROM srp_employeesdetails AS empTB
                                    JOIN srp_erp_system_integration_user AS usr ON usr.empID = empTB.EIdNo 
                                    AND integratedSystem = 'QHSE'
                                    WHERE EIdNo = {$empID}")->row_array();

            if(!empty($userData['integratedUserID'])){
                $this->load->model('Company_model');

                $url = 'api/v1/user/update/'.$userData['integratedUserID'];
                $res_data = $this->Company_model->QHSE_api_requests([
                    'name'=> $userData['empName'], 'username'=> $userData['UserName'],'email'=> $userData['EEmail'], 'activeYN'=> $isActive
                ], $url, $is_put=true);

                if($res_data['status'] == 'e'){
                    return ['e', "QHSE - Error<br/>{$res_data['message']}", 'http_code'=> $res_data['http_code']];
                }
            }
        }


        $this->db->where('EIdNo', trim($empID))->where('Erp_companyID', trim($companyID));
        $this->db->update('srp_employeesdetails', ['isActive'=> $isActive]);

        $msg = ($isActive)? '': 'de';
        return array('s', "User Successfully {$msg} activated", $isActive);
    }

    function save_user_change_password()
    {
        $isChangePassword = $this->input->post('chkdVal');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();

        $data = array(
            'isChangePassword' => $isChangePassword,
        );
        $this->db->where('EIdNo', trim($empID));
        $this->db->where('Erp_companyID', trim($companyID));
        $result = $this->db->update('srp_employeesdetails', $data);
        if ($result) {
            return array('s', 'successfully Saved');
        }
    }

    function save_user_change_super_admin()
    {

        $isSuperAdmin= $this->input->post('chkdVal');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();

        $data = array(
            'isSystemAdmin' => $isSuperAdmin,
        );
        $this->db->where('EIdNo', trim($empID));
        $this->db->where('Erp_companyID', trim($companyID));
        $result = $this->db->update('srp_employeesdetails', $data);
        if ($result) {
            return array('s', 'successfully Saved');
        }
    }

    function getemployeedetails($empID)
    {
        $companyID = current_companyID();
        $companies = $companyID;
        $groupCompanyID = $this->db->query(
            "SELECT companyGroupID 
             FROM srp_erp_companygroupdetails 
             WHERE srp_erp_companygroupdetails.companyID = $companyID"
        )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }



        $qry = "SELECT srp_employeesdetails.EIdNo, srp_employeesdetails.ECode, srp_employeesdetails.EmpSecondaryCode, DesDescription,
                IFNULL(srp_employeesdetails.Ename2, '') AS employee, srp_employeesdetails.leaveGroupID,srp_employeesdetails.DateAssumed,
                DepartmentDes as department, concat(manager.ECode,' | ',manager.Ename2) as manager
                FROM srp_employeesdetails
                INNER JOIN srp_designation on srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
                INNER JOIN srp_erp_leavegroup on srp_employeesdetails.leaveGroupID=srp_erp_leavegroup.leaveGroupID
                LEFT JOIN srp_erp_segment  on srp_erp_segment.segmentID=srp_employeesdetails.segmentID
                LEFT JOIN  (
                     SELECT EmpID AS empID_Dep, DepartmentDes FROM srp_departmentmaster AS departTB
                     JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
                     WHERE EmpID=$empID AND departTB.Erp_companyID IN ($companies) AND empDep.Erp_companyID IN ($companies) AND empDep.isActive=1
                ) AS departTB ON departTB.empID_Dep=srp_employeesdetails.EIdNo
                LEFT JOIN `srp_erp_employeemanagers` on EIdNo=empID AND active=1
                LEFT JOIN srp_employeesdetails manager on managerID=manager.EIdNo
                WHERE srp_employeesdetails.Erp_companyID IN ($companies) AND srp_employeesdetails.EIdNo =$empID ";
        $data = $this->db->query($qry)->row_array();

        return $data;
    }

    function deleteEmpAssignedShift()
    {
        $autoID = $this->input->post('autoID');

        $this->db->trans_start();
        $this->db->where('autoID', $autoID)->delete('srp_erp_pay_shiftemployees');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records deleted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in deleting process');
        }
    }

    function saveGrade()
    {
        try {
            $gradeID = $this->input->post('gradeID');
            $datetime = date('Y-m-d');
            $grade_des = trim($this->input->post('gradeDescription') ?? '');
            $companyID = current_companyID();
            $where = ['gradeDescription'=> $grade_des, 'companyID'=> $companyID];

            $description_exist = $this->db->get_where('srp_erp_employeegrade', $where)->row('gradeID');

            if (!$gradeID) {
                if(!empty($description_exist)){
                    return ['error' => 1, 'message' => 'This description is already exists'];
                }

                /** Insert */
                $data['gradeDescription'] = $grade_des;
                $data['companyID'] = $companyID;
                $data['createdPCID'] = current_pc();
                $data['createdUserID'] = current_userID();
                $data['createdDateTime'] = $datetime;
                $data['createdUserName'] = current_user();
                $data['timestamp'] = $datetime;

                $this->db->trans_start();

                $this->db->insert('srp_erp_employeegrade', $data);

                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('error' => 1, 'message' => 'Error while updating');

                } else {
                    $this->db->trans_commit();
                    return array('error' => 0, 'message' => 'Successfully Employee Grade created');
                }

            }
            else {
                /** Update */

                if(!empty($description_exist)) {
                    if ($gradeID != $description_exist) {
                        return ['error' => 1, 'message' => 'This description is already exists'];
                    }
                }

                $data['gradeDescription'] = $grade_des;
                $data['modifiedUserID'] = current_userID();
                $data['modifiedUserName'] = current_user();
                $data['modifiedDateTime'] = $datetime;
                $data['modifiedPCID'] = current_pc();

                $this->db->trans_start();

                $this->db->where('gradeID', $gradeID);
                $this->db->update('srp_erp_employeegrade', $data);

                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback(); 
                    return array('error' => 1, 'message' => 'Error while updating');
                } else {
                    $this->db->trans_commit();
                    return array('error' => 0, 'message' => 'Successfully Employee Grade updated');
                }
            }
        } catch (Exception $e) {
            return array('error' => 1, 'message' => 'Error while updating');
        }
    }

    function deleteGrade()
    {
        $gradeID = trim($this->input->post('gradeID') ?? '');
        $usCount = $this->db->query("SELECT COUNT(EIdNo) AS usCount FROM srp_employeesdetails WHERE gradeID = {$gradeID}")->row('usCount');

        if($usCount > 0){
            return array('error' => 1, 'message' => 'This grade is assigned to employees.<br/>You can not delete this record.');
        }

        $this->db->trans_start();

        $this->db->delete('srp_erp_employeegrade', ['gradeID' => $gradeID]);
        $this->db->delete('srp_erp_employeegradesalary', ['salaryGradeID' => $gradeID]);

        $this->db->trans_complete();
        if($this->db->trans_status() == true){
            return array('error' => 0, 'message' => 'Employee grade successfully deleted');
        }else{
            return array('error' => 1, 'message' => 'Error while deleting employee grade');
        }

    }

    function deleteall_attendanceMaster()
    {
        $companyID = current_companyID();
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $floor = $this->input->post('floorID');

        if($floor){
            $floorID = implode(", ", $floor);
            $delete = $this->db->where_in('floorID', $floor)->where('companyID', $companyID)->where("attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' ")->where('confirmedYN', 0)->delete('srp_erp_pay_empattendancereview');
        }else{
            $delete = $this->db->where('companyID', $companyID)->where("attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' ")->where('confirmedYN', 0)->delete('srp_erp_pay_empattendancereview');
        }
        
        if ($delete) {
            echo json_encode(array('s', ' Deleted Successfully'));
            exit;
        } else {
            echo json_encode(array('e', 'Failed.'));
            exit;
        }
    }

    function finalSettlement_masterData($masterID)
    {
        return $this->db->get_where('srp_erp_pay_finalsettlementmaster', ['masterID' => $masterID])->row_array();
    }

    function get_final_settlement_details($masterID, $isDeduction)
    {
        $CI =& get_instance();
        $companyID = current_companyID();
        $det = $CI->db->query("SELECT det.fsDetID, itm.description, det.amount, narration, itm.typeID, mnDec, entryType,
                    IF( det.itemID = 12 AND entryType = 'PAYE', payDes, ssoDes ) AS othDes
                    FROM srp_erp_pay_finalsettlementdetail det
                    JOIN srp_erp_pay_finalsettlementitems itm ON det.itemID = itm.typeID
                    LEFT JOIN (
                        SELECT fsDetID, entryType FROM srp_erp_pay_finalsettlementmoredetails
                        WHERE fsMasterID = {$masterID} GROUP BY fsDetID
                    ) morDet ON morDet.fsDetID = det.fsDetID
                    LEFT JOIN (
                        SELECT monthlyDeclarationID mnID, monthlyDeclaration mnDec
                        FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                    ) mnTypeTB ON det.linkedDetailID = mnTypeTB.mnID
                    LEFT JOIN (
                        SELECT socialInsuranceID AS ssoID, Description AS ssoDes
                        FROM srp_erp_socialinsurancemaster WHERE companyID={$companyID}
                    ) ssoTB ON det.linkedDetailID = ssoTB.ssoID AND (det.itemID = 12 AND entryType IN ('SSO', 'SSO-E')) 
                    LEFT JOIN (
                        SELECT payeeMasterID, Description AS payDes
                        FROM srp_erp_payeemaster WHERE companyID={$companyID}
                    ) payTB ON det.linkedDetailID = payTB.payeeMasterID AND (det.itemID = 12 AND entryType = 'PAYE')
                    WHERE det.fsMasterID = {$masterID} AND itm.isDedction = {$isDeduction} 
                    ORDER BY det.fsDetID")->result_array();

        return $det;
    }

    function contract_renewal_report()
    {


        $companyID = current_companyID();
        $segment = $this->input->post('segment');
        $convertFormat = convert_date_format_sql();
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $where = '';
        $period = '';

        $segmentList = implode(',', $segment);

        if (!empty($empID)) {
            $empList = implode(',', $empID);
            $where = " AND EIdNo IN ({$empList})";
        } else {
            $period = "From {$fromDate} To {$toDate}";
            $date_format_policy = date_format_policy();
            $fromDate = input_format_date($fromDate, $date_format_policy);
            $toDate = input_format_date($toDate, $date_format_policy);

            if ($fromDate > $toDate) {
                die(json_encode(['e', 'To date should be greater than from date']));
            }

            $where = " AND con.contractEndDate BETWEEN '{$fromDate}' AND '{$toDate}'";
        }

        $detail = $this->db->query("SELECT empTB.Ename2, ECode, segmentStr, designationStr, conTyp.Description, contactTypeID, 
                              con.contractRefNo, DATE_FORMAT(con.contractStartDate,'{$convertFormat}') AS cStart, 
                              DATE_FORMAT(con.contractEndDate,'{$convertFormat}') AS cEnd                       
                              FROM srp_employeesdetails empTB
                              LEFT JOIN (
                                  SELECT segmentID, description AS segmentStr FROM srp_erp_segment WHERE companyID={$companyID}
                              ) AS segmentTB ON segmentTB.segmentID=empTB.segmentID
                              LEFT JOIN (
                                  SELECT DesignationID, DesDescription AS designationStr FROM srp_designation WHERE Erp_companyID={$companyID}
                              ) AS designationTB ON designationTB.DesignationID=empTB.EmpDesignationId   
                              JOIN srp_erp_empcontracthistory con ON con.empID = empTB.EIdNo
                              AND con.isCurrent = 1 AND companyID = {$companyID}
                              JOIN srp_empcontracttypes conTyp ON conTyp.EmpContractTypeID = con.contactTypeID
                              AND conTyp.Erp_CompanyID = {$companyID}
                              WHERE empTB.Erp_companyID = {$companyID} AND empTB.segmentID IN ({$segmentList}) $where
                              ORDER BY con.contractEndDate ASC")->result_array();

        return $detail;

    }

    function variable_pay_declaration_master($id)
    {
        $this->db->select("masTB.*, crMas.CurrencyCode AS trCurr");
        $this->db->from("srp_erp_variablepaydeclarationmaster masTB");
        $this->db->join("srp_erp_currencymaster crMas", "masTB.trCurrencyID=crMas.currencyID");
        $this->db->where("vpMasterID", $id);
        $this->db->where("masTB.companyID", current_companyID());

        return $this->db->get()->row_array();
    }

    function leave_encashment_details($id)
    {
        $companyID = current_companyID();
        $detail = $this->db->query("SELECT id, CONCAT(ECode, ' - ',  Ename2) AS empName, lv_type.description, lv_type.leaveTypeID AS lvtype,
                              leave_balance, gross_amount, noOfWorkingDaysInMonth, amount, narration, encashment_days
                              FROM srp_employeesdetails empTB                               
                              JOIN srp_erp_pay_leaveencashmentdetails det ON det.empID = empTB.EIdNo       
                              JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = det.leave_typeID
                              WHERE empTB.Erp_companyID = {$companyID} AND det.encash_masterID = {$id}  
                              ORDER BY empTB.ECode ASC")->result_array();

        return $detail;
    }

    function leave_salary_details($id)
    {
        $companyID = current_companyID();
        $detail = $this->db->query("SELECT id, CONCAT(ECode, ' - ',  Ename2) AS empName, gross_amount,noOfWorkingDaysInMonth, salary_days, amount, 
                              DATE_FORMAT(salary_pay_date, '%Y %M') AS salary_pay_date, narration
                              FROM srp_employeesdetails AS empTB                               
                              JOIN srp_erp_pay_leaveencashmentdetails AS det ON det.empID = empTB.EIdNo                                      
                              WHERE empTB.Erp_companyID = {$companyID} AND det.encash_masterID = {$id}  
                              ORDER BY empTB.ECode ASC")->result_array();
        return $detail;
    }

    function update_userType()
    {
        $companyID = current_companyID();
        $noofusers = $this->db->query("SELECT noOfUsers FROM srp_erp_company WHERE company_id = $companyID")->row_array();
        $currentusercount = $this->db->query("SELECT count(EIdNo) as usercount from srp_employeesdetails 
            where Erp_companyID = $companyID AND userType = 1 AND isDischarged = 0")->row_array();
        $Type = $this->input->post('type');

        $noofactive = $currentusercount['usercount'];
        $noofusers = $noofusers['noOfUsers'];

        if ($Type != 1) {
            $EIdNo = $this->input->post('EIdNo');

            $data['userType'] = $Type;
            $this->db->where('EIdNo', $EIdNo);
            $this->db->update('srp_employeesdetails', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'User Type Update Failed ' . $this->db->_error_message());

            } else {
                $this->db->trans_commit();
                return array('s', 'User Type Updated Successfully.');
            }
        } 
        else {
            if ($noofactive < $noofusers || $noofusers == 0) {
                $EIdNo = $this->input->post('EIdNo');

                $data['userType'] = $Type;
                $this->db->where('EIdNo', $EIdNo);
                $this->db->update('srp_employeesdetails', $data);
                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'User Type Update Failed ' . $this->db->_error_message());

                } else {
                    $this->db->trans_commit();
                    return array('s', 'User Type Updated Successfully.');
                }

            } else if ($noofactive >= $noofusers) {
                return array('w', 'Maximum user count exceeded ');
            }
        }
    }

    function get_notify_list($doc_id, $sys_id){
        return $this->db->select('empID, empTB.Ename2, EEmail, ECode AS empCode')
            ->from('srp_erp_notify AS nfy')
            ->join('srp_employeesdetails AS empTB', 'empID=empTB.EIdNo')
            ->where('nfy.systemID', $sys_id)->where('nfy.documentID', $doc_id)
            ->get()->result_array();
    }

    function create_split_salary()
    {
        $this->db->trans_start();
        $date_format_policy = date_format_policy();
        $splitCurrency = $this->input->post('splitCurrency');
        $splitStartDate = $this->input->post('splitStartDate');
        $splitEndDate = $this->input->post('splitEndDate');
        $Description = $this->input->post('Description');
        $no_of_months = $this->input->post('no_of_months');
        $startDate = input_format_date($splitStartDate, $date_format_policy);
        $endDate = input_format_date($splitEndDate, $date_format_policy);

        $master['documentID'] = 'SS';
        $master['startDate'] = $startDate;
        $master['endDate'] = $endDate;
        $master['description'] = $Description;
        $master['noOfMonths'] = $no_of_months;
        $master['currencyID'] = $splitCurrency;
        $master['CompanyID'] = current_companyID();
        $master['createdUserGroup'] = current_user_group();
        $master['createdPCID'] = current_pc();
        $master['createdUserID'] = current_userID();
        $master['createdUserName'] = current_user();
        $master['createdDateTime'] = current_date();

        $this->db->insert('srp_erp_splitsalarymaster', $master);
        $last_id = $this->db->insert_id();
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to create Split Salary');
        } else {
            $this->db->trans_commit();
            return array('s', 'Created Split Salary Successfully!');
        }
    }

    function reOpen_split_salary()
    {
        $data = array(
            'isDeleted' => 0,
            'deletedEmpID' => null,
            'deletedDate' => null
        );
        $this->db->where('splitSalaryMasterID', trim($this->input->post('masterID') ?? ''));
        $this->db->update('srp_erp_splitsalarymaster', $data);
        $this->session->set_flashdata('s', 'Split Salary Re Opened Successfully.');
        return true;
    }

    function save_split_salary_details()
    {
        $this->db->trans_start();
        $companyID = current_companyID();
        $splitSalaryMasterID = $this->input->post('splitSalaryMasterID');
        $customerID = $this->input->post('customerID');
        $monthlyDeduction = $this->input->post('monthlyDeduction');
        $comment = $this->input->post('comment');
        $accountNo = $this->input->post('accountNo');
        $grossSalary = $this->input->post('grossSalary');
        $startdate = $this->input->post('startdate');

        $master = $this->db->query("SELECT startDate, endDate, currencyID FROM srp_erp_splitsalarymaster WHERE CompanyID = {$companyID} AND splitSalaryMasterID = {$splitSalaryMasterID}")->row_array();

        foreach ($startdate as $key => $det) {
//            $validateExist = $this->db->query("SELECT splitSalaryID FROM srp_erp_splitsalary
//                                    WHERE empID = {$customerID[$key]}
//                                    AND (
//                                    '{$master['startDate']}' BETWEEN startFrom AND endDate OR '{$master['endDate']}' BETWEEN startFrom AND endDate
//                                    )")->row_array();
//            if(!empty($validateExist)) {
//                $empName = fetch_employeeNo($customerID[$key]);
//                return array('e', 'Split salary Record already exist for ' . $empName['Ename2']);
//                exit();
//            }
            $bankDet = $this->db->query("SELECT bnk.bankID, bankName, accountNo, acc.id, branchName FROM srp_erp_pay_salaryaccounts AS acc JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID = acc.bankID JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID = acc.branchID WHERE acc.id = {$accountNo[$key]}")->row_array();

            $data['splitSalaryMasterID'] = $splitSalaryMasterID;
            $data['empID'] = $customerID[$key];
            $data['startFrom'] = $master['startDate'];
            $data['endDate'] = $master['endDate'];
            $data['monthlyDeduction'] = $monthlyDeduction[$key];
            $data['currency'] = $master['currencyID'];
            $data['grossSalary'] = $grossSalary[$key];
            $data['localCurrencyID'] = $this->common_data['company_data']['company_default_currencyID'];
            $default_currency = currency_conversionID($data['currency'], $data['localCurrencyID']);
            $data['localCurrencyER'] = $default_currency['conversion'];
            $data['localAmount'] = round(($monthlyDeduction[$key] / $default_currency['conversion']), $default_currency['DecimalPlaces']);
            $data['rptCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
            $reporting_currency = currency_conversionID($data['currency'], $data['rptCurrencyID']);
            $data['rptCurrencyER'] = $reporting_currency['conversion'];
            $data['rptAmount'] = round(($monthlyDeduction[$key] / $reporting_currency['conversion']), $reporting_currency['DecimalPlaces']);
            $data['comments'] = $comment[$key];
            $data['bankMasterID'] = $bankDet['bankID'];
            $data['employeeBankDetailsID'] = $bankDet['id'];
            $data['accountNo'] = $bankDet['accountNo'];
            $data['bankName'] = $bankDet['bankName'];
            $data['branch'] = $bankDet['branchName'];
            $data['isActive'] = 1;
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCid'] = current_pc();
            $data['createdUserID'] = current_userID();

            $this->db->insert('srp_erp_splitsalary', $data);
        }

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to create Split Salary details');
        } else {
            $this->db->trans_commit();
            return array('s', 'Created Split Salary Details Successfully!');
        }

    }

    function fetch_split_salary_details()
    {
        $splitSalaryID = trim($this->input->post('splitSalaryID') ?? '');
        $data = $this->db->query("SELECT srp_erp_splitsalary.*, CurrencyCode FROM srp_erp_splitsalary 
LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_splitsalary.currency WHERE splitSalaryID = {$splitSalaryID}")->row_array();

        return $data;
    }

    function edit_split_salary_details()
    {
        $this->db->trans_start();
        $companyID = current_companyID();
        $splitSalaryMasterID = $this->input->post('splitSalaryMasterID');
        $splitSalaryID = $this->input->post('splitSalaryID');
        $customerID = $this->input->post('customerID');
        $monthlyDeduction = $this->input->post('monthlyDeduction');
        $comment = $this->input->post('comment');
        $accountNo = $this->input->post('accountNo');
        $grossSalary = $this->input->post('grossSalary');

        $master = $this->db->query("SELECT startDate, endDate, currencyID FROM srp_erp_splitsalarymaster WHERE CompanyID = {$companyID} AND splitSalaryMasterID = {$splitSalaryMasterID}")->row_array();

        $bankDet = $this->db->query("SELECT bnk.bankID, bankName, accountNo, acc.id, branchName FROM srp_erp_pay_salaryaccounts AS acc JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID = acc.bankID JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID = acc.branchID WHERE acc.id = {$accountNo}")->row_array();

//        $validateExist = $this->db->query("SELECT splitSalaryID FROM srp_erp_splitsalary
//                                    WHERE empID = {$customerID}
//                                    AND splitSalaryID != {$splitSalaryID}
//                                    AND (
//                                    '{$master['startDate']}' BETWEEN startFrom AND endDate OR '{$master['endDate']}' BETWEEN startFrom AND endDate
//                                    )")->row_array();
//        if(!empty($validateExist)) {
//            $empName = fetch_employeeNo($customerID);
//            return array('e', 'Split salary Record already exist for ' . $empName['Ename2']);
//            exit();
//        }
        $data['empID'] = $customerID;
        $data['startFrom'] = $master['startDate'];
        $data['endDate'] = $master['endDate'];
        $data['monthlyDeduction'] = $monthlyDeduction;
        $data['currency'] = $master['currencyID'];
        $data['grossSalary'] = $grossSalary;
        $data['localCurrencyID'] = $this->common_data['company_data']['company_default_currencyID'];
        $default_currency = currency_conversionID($data['currency'], $data['localCurrencyID']);
        $data['localCurrencyER'] = $default_currency['conversion'];
        $data['localAmount'] = round(($monthlyDeduction / $default_currency['conversion']), $default_currency['DecimalPlaces']);
        $data['rptCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
        $reporting_currency = currency_conversionID($data['currency'], $data['rptCurrencyID']);
        $data['rptCurrencyER'] = $reporting_currency['conversion'];
        $data['rptAmount'] = round(($monthlyDeduction / $reporting_currency['conversion']), $reporting_currency['DecimalPlaces']);
        $data['comments'] = $comment;
        $data['bankMasterID'] = $bankDet['bankID'];
        $data['employeeBankDetailsID'] = $bankDet['id'];
        $data['accountNo'] = $bankDet['accountNo'];
        $data['bankName'] = $bankDet['bankName'];
        $data['branch'] = $bankDet['branchName'];
        $data['isActive'] = 1;
        $data['createdUserGroup'] = current_user_group();
        $data['createdPCid'] = current_pc();
        $data['createdUserID'] = current_userID();

        $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
        $this->db->where('splitSalaryID', $splitSalaryID);
        $this->db->update('srp_erp_splitsalary', $data);

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to Update Split Salary details');
        } else {
            $this->db->trans_commit();
            return array('s', 'Update Split Salary Detail Successfully!');
        }
    }

    function split_salary_confirmation()
    {
        $this->db->trans_start();
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();
        $splitSalaryMasterID = trim($this->input->post('splitSalaryMasterID') ?? '');

        $this->db->select('*');
        $this->db->where('splitSalaryMasterID', trim($splitSalaryMasterID));
        $this->db->from('srp_erp_splitsalary');
        $this->db->group_by('empID');
        $record = $this->db->get()->result_array();
        if (empty($record)) {
            $this->session->set_flashdata('w', 'There are no records to confirm this document!');
            return array(false, 'error');
        } else {
            $salaryExceed_arr = array();
            foreach ($record AS $salary) {
                $this->db->select('SUM(monthlyDeduction) AS monthlyDeduction, grossSalary, Ename2, EmpSecondaryCode');
                $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_splitsalary.empID');
                $this->db->where('empID', trim($salary['empID'] ?? ''));
                $this->db->where("('{$salary['startFrom']}' BETWEEN startFrom AND endDate OR '{$salary['endDate']}' BETWEEN startFrom AND endDate)");
                $this->db->from('srp_erp_splitsalary');
                $sal = $this->db->get()->row_array();
                if($sal['monthlyDeduction'] > $sal['grossSalary']) {
                    $x['employee'] = $sal['EmpSecondaryCode'] . ' | ' . $sal['Ename2'];
                    $x['grossSalary'] = ROUND($sal['grossSalary'], 2);
                    $x['monthlyDeduction'] = ROUND($sal['monthlyDeduction'], 2);

                    array_push($salaryExceed_arr, $x);
                }
            }

            if(!empty($salaryExceed_arr)) {
                $this->session->set_flashdata('w', 'Employee monthly deduction exceeded gross salary!');
                return array(false, 'error', 'exceed' => $salaryExceed_arr);
            }

            $this->db->select('splitSalaryMasterID');
            $this->db->where('splitSalaryMasterID', trim($splitSalaryMasterID));
            $this->db->where('confirmedYN', 1);
            $this->db->from('srp_erp_splitsalarymaster');
            $Confirmed = $this->db->get()->row_array();
            if (!empty($Confirmed)) {
                $this->session->set_flashdata('w', 'Document already confirmed ');
                return array(false, 'error');
            } else {
                $this->load->library('Approvals');
                $this->db->select('*, DATE_FORMAT(createdDateTime,\'' . $convertFormat . '\') AS documentDate');
                $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
                $this->db->from('srp_erp_splitsalarymaster');
                $master_dt = $this->db->get()->row_array();
                $this->load->library('sequence');
                $lenth=strlen($master_dt['splitSalaryCode']);
                if($lenth == 1){
                    $codegerator = $this->sequence->sequence_generator($master_dt['documentID']);
                    $validate_code = validate_code_duplication($codegerator, 'splitSalaryCode', $splitSalaryMasterID,'splitSalaryMasterID', 'srp_erp_splitsalarymaster');
                    if(!empty($validate_code)) {
                        $this->session->set_flashdata('e', 'The document Code Already Exist.(' . $validate_code . ')');
                        return array(false, 'error');
                    }
                    $splitSalaryCode = array(
                        'splitSalaryCode' => $codegerator,
                    );
                    $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
                    $this->db->update('srp_erp_splitsalarymaster', $splitSalaryCode);
                } else {
                    $validate_code = validate_code_duplication($master_dt['splitSalaryCode'], 'splitSalaryCode', $splitSalaryMasterID,'splitSalaryMasterID', 'srp_erp_splitsalarymaster');
                    if(!empty($validate_code)) {
                        $this->session->set_flashdata('e', 'The document Code Already Exist.(' . $validate_code . ')');
                        return array(false, 'error');
                    }
                }

                $autoApproval = get_document_auto_approval('SS');
                if ($autoApproval == 0) {
                    $approvals_status = $this->approvals->auto_approve($master_dt['splitSalaryMasterID'], 'srp_erp_splitsalarymaster', 'splitSalaryMasterID', 'SS', $master_dt['purchaseOrderCode'], $master_dt['documentDate']);
                } elseif ($autoApproval == 1) {
                    $approvals_status = $this->approvals->CreateApproval('SS', $master_dt['splitSalaryMasterID'], $master_dt['splitSalaryCode'], 'Split Salary', 'srp_erp_splitsalarymaster', 'splitSalaryMasterID', 0, $master_dt['documentDate']);
                } else {
                    $this->session->set_flashdata('e', 'Approval levels are not set for this document');
                    return array(false, 'error');
                }
                if ($approvals_status == 1) {
                    $data = array(
                        'confirmedYN' => 1,
                        'confirmedDate' => current_date(),
                        'confirmedByEmpID' => current_userID(),
                        'confirmedByName' => current_user()
                    );
                    $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
                    $this->db->update('srp_erp_splitsalarymaster', $data);
                }elseif($approvals_status == 3){
                    return array('w', 'There are no users exist to perform approval for this document.');
                }
            }
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed to confirm Split Salary Document ' . $this->db->_error_message());
            } else {
                $this->db->trans_commit();
                return array('s', 'Split Salary Document confirmed successfully');
            }
        }
    }

    function fetch_split_salary_confirmation($splitSalaryMasterID)
    {
        $convertFormat = convert_date_format_sql();
        $this->db->select('srp_erp_splitsalarymaster.*, CONCAT(CurrencyName, \' (\',CurrencyCode, \')\') AS CurrencyCode, DATE_FORMAT(srp_erp_splitsalarymaster.createdDateTime,\'' . $convertFormat . '\') AS documentDate,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate,(DATE_FORMAT(approvedDate,\'' . $convertFormat . ' %h:%i:%s\')) AS approvedDate,CASE WHEN confirmedYN = 2 || confirmedYN = 3   THEN " - " WHEN confirmedYN = 1 THEN 
CONCAT_WS(\' on \',IF(LENGTH(confirmedbyName),confirmedbyName,\'-\'),IF(LENGTH(DATE_FORMAT( confirmedDate, \'' . $convertFormat . ' %h:%i:%s\' )),DATE_FORMAT( confirmedDate, \'' . $convertFormat . ' %h:%i:%s\' ),NULL)) ELSE "-" END confirmedYNn');
        $this->db->join('srp_erp_currencymaster','srp_erp_currencymaster.currencyID = srp_erp_splitsalarymaster.currencyID','LEFT');
        $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
        $this->db->from('srp_erp_splitsalarymaster');
        $data['master'] = $this->db->get()->row_array();


        $this->db->select('srp_erp_splitsalary.*, CurrencyCode, Ename2,  CONCAT(bankName,\' | \',branch,\' | \', accountNo) AS bank');
        $this->db->join('srp_erp_currencymaster','srp_erp_currencymaster.currencyID = srp_erp_splitsalary.currency','LEFT');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_splitsalary.empID','LEFT');
        $this->db->where('splitSalaryMasterID', $splitSalaryMasterID);
        $this->db->from('srp_erp_splitsalary');
        $data['detail'] = $this->db->get()->result_array();
        return $data;
    }

    function save_split_salary_approval($autoappLevel = 1, $system_idAP = 0, $statusAP = 0, $commentsAP = 0)
    {
        $this->db->trans_start();
        $this->load->library('Approvals');
        $companyID = current_companyID();
        if ($autoappLevel == 1) {
            $system_code = trim($this->input->post('splitSalaryMasterID') ?? '');
            $level_id = trim($this->input->post('Level') ?? '');
            $status = trim($this->input->post('po_status') ?? '');
            $comments = trim($this->input->post('comments') ?? '');
        } else {
            $system_code = $system_idAP;
            $level_id = 0;
            $status = $statusAP;
            $comments = $commentsAP;
            $_post['splitSalaryMasterID'] = $system_code;
            $_post['Level'] = $level_id;
            $_post['status'] = $status;
            $_post['comments'] = $comments;
        }

        if ($autoappLevel == 0) {
            $approvals_status = 1;
        } else {
            $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'SS');
        }
        if ($approvals_status == 1) {
            $data['approvedYN'] = $status;
            $data['approvedbyEmpID'] = current_userID();
            $data['approvedbyEmpName'] = current_user();
            $data['approvedDate'] = current_date();

            $this->db->where('splitSalaryMasterID', trim($system_code));
            $this->db->update('srp_erp_splitsalarymaster', $data);

            $this->session->set_flashdata('s', 'Document Approved Successfully.');
        } else {
            $this->session->set_flashdata('s', 'Approval Rejected Successfully.');
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return true;
        } else {
            $this->db->trans_commit();
            return true;
        }
    }

    function late_attendance_mail()
    { 
        $IDs = $this->input->post('ID');
        $ID = join(',', $IDs);
        $companyID = current_companyID();
        $emp = $this->db->query("SELECT DISTINCT(empID) as empID, ECode, Ename1, EEmail, Ename2
                                FROM srp_erp_pay_empattendancereview AS att_rv
                                JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo
                                WHERE presentTypeID = 2 AND att_rv.companyID = {$companyID} AND att_rv.ID IN ($ID)")->result_array();
                    
        foreach ($emp as $key=>$empID) {
            if($empID["EEmail"]) {
                $this->db->select("att_rv.ID, CONCAT(attendanceDate, ' by ', DATE_FORMAT(TIMEDIFF(checkIn, onDuty), '%i'), ' minutes') as details, attendanceDate, TIMEDIFF(checkIn, onDuty) as lateTime, DATE_FORMAT( checkIn, '%h:%i %p' ) checkIn, DATE_FORMAT( onDuty, '%h:%i %p' ) onDuty");
                $this->db->from("srp_erp_pay_empattendancereview att_rv");
                $this->db->join("srp_employeesdetails", "att_rv.empID = srp_employeesdetails.EIdNo");
                $this->db->where("att_rv.ID IN ('$ID')");
                $this->db->where("empID", $empID['empID']);
                $this->db->where("att_rv.companyID", $companyID);
                $this->db->having("details IS NOT NULL");
                $data = $this->db->get()->result_array();
    
                if($data) {
                    $body = 'Confirmed attendance shows that you were late on ' .
                    join(', ', array_column($data, 'details')) . 
                    '. Please note that late attendance records will be accumulated end of the month and added for a deduction.';
                    $param["empName"] = $empID["Ename2"];
                    $param["body"] = $body;

                    $empID = $empID["empID"];
                    $mailData = [
                        'toEmail' => $emp[$key]['EEmail'],
                        'approvalEmpID' => current_userID(),
                        'documentCode' => '',
                        'subject' => "Late attendance notification",
                        'param' => $param
                    ];
                    send_approvalEmail($mailData);

                    $update_det['isMailSent'] = 1;
                    $this->db->where('ID IN (' . join(',', array_column($data, 'ID')) . ')');
                    $this->db->update('srp_erp_pay_empattendancereview', $update_det);
                }
            }
        }
        $this->session->set_flashdata('s', 'Mail Sent Successfully!');
    }

    function attandance_reUpload()
    {
        $this->db->trans_start();
        $companyID = current_companyID();
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
       //$floorIDs = $this->input->post('floorID');
       // $floorID = join(',', $floorIDs);

        $this->db->select("ID");
        $this->db->from("srp_erp_pay_empattendancereview");
        //$this->db->where("floorID IN ({$floorID})");
        $this->db->where("attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}'");
        $this->db->where("approvedYN", 1);
        $this->db->where("companyID", $companyID);
        $approved = $this->db->get()->row_array();
        if($approved) {
            return array('e', 'Some details already approved in this date range!');
        } else {
            $this->db->select("ID");
            $this->db->from("srp_erp_pay_empattendancereview");
            //$this->db->where("floorID IN ({$floorID})");
            $this->db->where("attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}'");
            $this->db->where("confirmedYN", 1);
            $this->db->where("companyID", $companyID);
            $confirmed = $this->db->get()->row_array();
            if($confirmed) {
                return array('w', 'Some details already confirmed in this date range!');
            } else {
                $this->db->where("attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}'");
                //$this->db->where("floorID IN ({$floorID})");
                $this->db->delete("srp_erp_pay_empattendancereview");
              
                $attTempData = $this->db->query("SELECT isUpdated FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID} AND attDate BETWEEN '{$fromDate}' AND '{$toDate}' ")->result_array();
                if (empty($attTempData)) {
                    return array('w', 'No Records Found.');
                }

                //$notApprovedatndnce = $this->db->query("SELECT documentCode FROM srp_erp_leavemaster INNER JOIN ( SELECT EIdNo FROM srp_employeesdetails WHERE Erp_companyID = $companyID  AND floorID IN ($floorID) ) empdtl ON empdtl.EIdNo = srp_erp_leavemaster.empID WHERE companyID = $companyID AND applicationType = 1 AND approvedYN = 0 AND startDate >= '{$fromDate}' AND endDate <= '{$toDate}' ")->result_array();
                //(SME-2886)
                $notApprovedatndnce = $this->db->query("SELECT documentCode FROM srp_erp_leavemaster INNER JOIN ( SELECT EIdNo FROM srp_employeesdetails WHERE Erp_companyID = $companyID    ) empdtl ON empdtl.EIdNo = srp_erp_leavemaster.empID WHERE companyID = $companyID AND applicationType = 1 AND approvedYN = 0 AND startDate >= '{$fromDate}' AND endDate <= '{$toDate}' ")->result_array();

                $begin = new DateTime($this->input->post('fromDate'));
                $end = new DateTime($this->input->post('toDate'));
                $end = $end->add(new DateInterval('P1D'));
                $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);
        
                $companyID = current_companyID();
                $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');
                $date_arr = [];
                foreach ($dateRange as $key => $date) {
                    $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
                    $date_arr[$key]['uniqueID'] = $uniqueKey;
                    $date_arr[$key]['companyID'] = $companyID;
                }

                if (!empty($date_arr)) {
                    $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
                }
                
                /* $multiple_occ = $this->db->query("sSELECT COUNT(autoID), tem.device_id, tem.empMachineID, attDate
                                FROM srp_erp_pay_empattendancetemptable AS tem
                                JOIN srp_employeesdetails AS emp ON emp.empMachineID = tem.empMachineID
                                WHERE emp.floorID IN ({$floorID}) AND tem.attDate BETWEEN '{$fromDate}' AND '{$toDate}' AND companyID = {$companyID} 		
                                GROUP BY tem.device_id, tem.empMachineID, attDate
                                HAVING COUNT(autoID) > 2")->result_array(); */
                //(SME-2886) 
                $multiple_occ = $this->db->query("SELECT COUNT(autoID), tem.device_id, tem.empMachineID, attDate
                                FROM srp_erp_pay_empattendancetemptable AS tem
                                JOIN (
                                    SELECT
                                        EIdNo,
                                        empattLoc.floorID AS floorID,
                                        empattLoc.empMachineID AS empMachineID,
                                        empattLoc.deviceID AS deviceID 
                                    FROM
                                        srp_employeesdetails
                                        JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                        AND empattLoc.companyID =  {$companyID} 
                                    WHERE
                                        Erp_companyID =  {$companyID} 
                                    ) empLoc ON empLoc.empMachineID = tem.empMachineID AND empLoc.deviceID = tem.device_id 


                                WHERE tem.attDate BETWEEN '{$fromDate}' AND '{$toDate}' AND companyID = {$companyID} 		
                                GROUP BY tem.device_id, tem.empMachineID, attDate
                                HAVING COUNT(autoID) > 2")->result_array();

                $skip_str = "";
                $multiple_occ_chk_arr = [];
                if (!empty($multiple_occ)) {
                    $skip_arr = [];
                    foreach ($multiple_occ as $occ_row) { /*Get skipping records */
                        $_attDate = $occ_row['attDate'];
                        $_deviceID = $occ_row['device_id'];
                        $_machineID = $occ_row['empMachineID'];
                        $multiple_occ_chk_arr[] = "{$_attDate}-{$_deviceID}-{$_machineID}";
                        $occ_arr = $this->db->query("SELECT autoID, tem.empMachineID, attDate, attTime, attDateTime
                                        FROM srp_erp_pay_empattendancetemptable AS tem                              
                                        WHERE tem.attDate = '{$_attDate}' AND tem.empMachineID = {$_machineID} 
                                        AND device_id = {$_deviceID}
                                        AND autoID NOT IN (
                                        SELECT * FROM(
                                            SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_asc
                                            WHERE tem_asc.attDate = '{$_attDate}' AND tem_asc.empMachineID = {$_machineID}
                                            AND device_id = {$_deviceID} ORDER BY attDateTime ASC LIMIT 1
                                        ) t2
                                        )
                                        AND autoID NOT IN (
                                            SELECT * FROM(
                                                SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_asc
                                                WHERE tem_asc.attDate = '{$_attDate}' AND tem_asc.empMachineID = {$_machineID} 
                                                AND device_id = {$_deviceID} ORDER BY attDateTime DESC LIMIT 1 
                                            ) t1
                                        )")->result_array();

                        $skip_arr = array_merge($skip_arr, $occ_arr);
                    }

                    $skip_arr = array_column($skip_arr, 'autoID');
                    $skip_str = implode(',', $skip_arr);
                    $skip_str = " AND temp.autoID NOT IN({$skip_str}) ";
                }

                /* $sql = "SELECT shiftDet.gracePeriod AS gracePeriod,temp.autoID, emp.EIdNo, emp.ECode, emp.Ename2, date_temp.actualDate, emp.deviceID, emp.empMachineID, temp.attDate, temp.attTime AS attTime, shiftDet.onDutyTime AS onDutyTime,
                    shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend, floorDescription, fd.floorID,IFNULL(leaveExist.leaveHalf, 0) as leaveHalf, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave,
                    IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday, attDateTime, t1.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay, IFNULL(uploadType, 0) uploadType
                    FROM srp_employeesdetails AS emp
                    JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                    LEFT JOIN (
                            SELECT empData.*, tem.actualDate
                            FROM srp_erp_pay_empattendancedaterangetemp AS tem
                            JOIN (
                                SELECT EIdNo, empMachineID, isCheckin, sh_emp.shiftID, startDate, endDate
                                FROM srp_employeesdetails emp  
                                LEFT JOIN srp_erp_pay_shiftemployees sh_emp ON sh_emp.empID = emp.EIdNo AND companyID = {$companyID} 		
                                WHERE Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND floorID IN ({$floorID}) AND isDischarged = 0
                            ) empData  
                            WHERE tem.actualDate BETWEEN '{$fromDate}' AND '{$toDate}' AND tem.actualDate BETWEEN startDate AND endDate
                            AND companyID = {$companyID} AND uniqueID = '{$uniqueKey}'
                    ) t1 ON t1.EIdNo = emp.EIdNo AND date_temp.actualDate = t1.actualDate
                    LEFT JOIN srp_erp_pay_shiftdetails shiftDet ON  shiftDet.shiftID = t1.shiftID AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
                    LEFT JOIN ( 
                        SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                    ) fd ON fd.floorID = emp.floorID 
                    LEFT JOIN ( 
                        SELECT autoID, device_id, empMachineID, attDate, attTime, attDateTime, uploadType 
                        FROM srp_erp_pay_empattendancetemptable 
                        WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$fromDate}' AND '{$toDate}' ) 
                    ) temp ON temp.empMachineID = t1.empMachineID AND date_temp.actualDate = attDate AND emp.deviceID = temp.device_id
                    LEFT JOIN ( 
                        SELECT leaveMasterID, empID, startDate, endDate,srp_erp_leavemaster.ishalfDay as leaveHalf FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1
                    ) AS leaveExist ON leaveExist.empID = t1.EIdNo AND t1.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                    LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = t1.actualDate                 
                    WHERE Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND emp.floorID IN ({$floorID}) AND isDischarged = 0 AND empConfirmedYN = 1
                    AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' AND date_temp.actualDate BETWEEN '{$fromDate}' AND '{$toDate}' 
                    AND NOT EXISTS (
                        SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview AS review 
                        WHERE companyID = {$companyID} AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate
                        GROUP BY empID,attendanceDate
                    )  {$skip_str}
                    GROUP BY actualDate, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC"; */
                //(SME-2886)
                $sql = "SELECT shiftDet.gracePeriod AS gracePeriod,temp.autoID, emp.EIdNo, emp.ECode, emp.Ename2, date_temp.actualDate, empLoc.deviceID, empLoc.empMachineID, temp.attDate, temp.attTime AS attTime, shiftDet.onDutyTime AS onDutyTime,
                    shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend, floorDescription, fd.floorID,IFNULL(leaveExist.leaveHalf, 0) as leaveHalf, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave,
                    IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday, attDateTime, t1.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay, IFNULL(uploadType, 0) uploadType
                    FROM srp_employeesdetails AS emp
                    JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID}
                    JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                    LEFT JOIN (
                            SELECT empData.*, tem.actualDate
                            FROM srp_erp_pay_empattendancedaterangetemp AS tem
                            JOIN (
                                SELECT EIdNo, empLoc.empMachineID AS empMachineID, isCheckin, sh_emp.shiftID, startDate, endDate
                                FROM srp_employeesdetails emp  
                                JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID} 
                                LEFT JOIN srp_erp_pay_shiftemployees sh_emp ON sh_emp.empID = emp.EIdNo AND sh_emp.companyID = {$companyID} 		
                                WHERE Erp_companyID = {$companyID} AND isSystemAdmin = 0  AND isDischarged = 0
                            ) empData  
                            WHERE tem.actualDate BETWEEN '{$fromDate}' AND '{$toDate}' AND tem.actualDate BETWEEN startDate AND endDate
                            AND tem.companyID = {$companyID} AND uniqueID = '{$uniqueKey}'
                    ) t1 ON t1.EIdNo = emp.EIdNo AND date_temp.actualDate = t1.actualDate
                    LEFT JOIN srp_erp_pay_shiftdetails shiftDet ON  shiftDet.shiftID = t1.shiftID AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
                    LEFT JOIN ( 
                        SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                    ) fd ON fd.floorID = empLoc.floorID 
                    LEFT JOIN ( 
                        SELECT autoID, device_id, empMachineID, attDate, attTime, attDateTime, uploadType 
                        FROM srp_erp_pay_empattendancetemptable 
                        WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$fromDate}' AND '{$toDate}' ) 
                    ) temp ON temp.empMachineID = t1.empMachineID AND date_temp.actualDate = attDate AND emp.deviceID = temp.device_id
                    LEFT JOIN ( 
                        SELECT leaveMasterID, empID, startDate, endDate,srp_erp_leavemaster.ishalfDay as leaveHalf FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1
                    ) AS leaveExist ON leaveExist.empID = t1.EIdNo AND t1.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                    LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = t1.actualDate                 
                    WHERE Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND isDischarged = 0 AND empConfirmedYN = 1
                    AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' AND date_temp.actualDate BETWEEN '{$fromDate}' AND '{$toDate}' 
                    AND NOT EXISTS (
                        SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview AS review 
                        WHERE companyID = {$companyID} AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate
                        GROUP BY empID,attendanceDate
                    )  {$skip_str}
                    GROUP BY actualDate, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC";

                $temp = $this->db->query($sql)->result_array();
                $tempAttendanceDate = array_column($temp, 'autoID');
                $tempAttendanceArray = array_unique(array_filter($tempAttendanceDate));
                if (!empty($tempAttendanceArray)) {
                    foreach ($tempAttendanceArray as $key => $item) {
                        $tempattendaceUpdate[$key]['autoID'] = $item;
                        $tempattendaceUpdate[$key]['isUpdated'] = 1;
                    }
                }
                if (!empty($tempattendaceUpdate)) {
                    $this->db->update_batch('srp_erp_pay_empattendancetemptable', $tempattendaceUpdate, 'autoID');
                }

                $data = [];
                if ($temp) {
                    $i = 0;
                    $employee = '';
                    $continue = FALSE;
                    foreach ($temp as $row) {
                        if ($continue) {
                            /*skip if its set for clockout */
                            $continue = FALSE;
                            $i++;
                            continue;
                        }
                        $employee = $row['EIdNo'];
                        $attendanceDate = $row['actualDate'];
                        $onDuty = $row['onDutyTime'];
                        $graceperiod = $row['gracePeriod'];
                       
                        $offDuty = $row['offDutyTime'];
                        $clockIn = $row['attTime'];
                        $nextKey = $i + 1;
                        $clockOut = NULL;
                        $isAllSet = 0;
                        $earlyHours = '';
                        $lateHours = '';
                        $workingHours = "";
                        $totWorkingHours = "";
                        $realtime = "";
                        $overTimeHours = '';
                        $actualWorkingHours_obj = NULL;
                        $totWorkingHours_obj = NULL;
                        $normaloverTimeHours = 0;
                        $weekendOTHours = 0;
                        $holidayoverTimeHours = 0;
                        $isCheckin = 0;
                        $isHalfDay = 1;
                        $normalrealtime = 0;
                        $weekendrealtime = 0;
                        $holidayrealtime = 0;
                        $floorID = $row['floorID'];
                        $clockoutFloorID = $row['floorID'];

                        /*check next array */
                        if (array_key_exists($nextKey, $temp)) {
                            if ($temp[$nextKey]['EIdNo'] == $row['EIdNo'] && $attendanceDate == $temp[$nextKey]['actualDate']) {
                                $clockOut = $temp[$nextKey]['attTime']; /*Set clockout*/
                                $clockoutFloorID = $temp[$nextKey]['floorID'];/*Set clockout floorID*/
                                $continue = TRUE;
                            }
                        }
        
                        /************ Calculate the actual working hours *************/
                        if ($onDuty != NULL && $offDuty != NULL && $clockOut != NULL) {
                            $datetime1 = new DateTime($onDuty);
                            $datetime2 = new DateTime($offDuty);
                            $actualWorkingHours_obj = $datetime1->diff($datetime2);
                            $minutes = $actualWorkingHours_obj->format('%i');
                            $hours = $actualWorkingHours_obj->format('%h');
                            $workingHours = ($hours * 60) + $minutes;
                        } else {
                            $isAllSet += 1;
                        }
        
                        /****** Employee total working hours for this day ******/
                        if ($clockIn != NULL && $clockOut != NULL) {
        
                            if ($offDuty != '' && $offDuty <= $clockOut) {
                                $datetime1 = new DateTime($offDuty);
                            } else {
                                $datetime1 = new DateTime($clockOut);
                            }
                            if ($onDuty != '' && $onDuty >= $clockIn) {
                                $datetime2 = new DateTime($onDuty);
                            } else {
                                $datetime2 = new DateTime($clockIn);
                            }
                            $totWorkingHours_obj = $datetime1->diff($datetime2);
                            $Hours = $totWorkingHours_obj->format('%h');
                            $minutes = $totWorkingHours_obj->format('%i');
                            $totWorkingHours = ($Hours * 60) + $minutes;
        
                            if ($workingHours != "" && $totWorkingHours != "") {
                                $realtime = $totWorkingHours / $workingHours;
                                $realtime = round($realtime, 1);
                            }
                        } else {
                            $isAllSet += 1;
                        }
                        if ($isAllSet == 0) {
                            /**** Calculation for late hours ****/
                            $clockIn_datetime = new DateTime($clockIn);
                            
                            $onDuty_datetime = new DateTime($onDuty);
                            $minutesToAdd = $graceperiod;
                            $onDuty_datetime->modify("+{$minutesToAdd} minutes");
        
                            if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                                $interval = $clockIn_datetime->diff($onDuty_datetime);
        
                                $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                                $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                                $lateHours = $hours * 60 + $minutes;
                            }
        
                            /**** Calculation for early hours ****/
                            $datetime1 = date('Y-m-d H:i:s', strtotime($clockOut));
                            $datetime2 = date('Y-m-d H:i:s', strtotime($offDuty));
                            if ($datetime1 < $datetime2) {
                                $datetime1 = new DateTime($clockOut);
                                $datetime2 = new DateTime($offDuty);
                                $interval = $datetime2->diff($datetime1);
                                $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                                $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                                $earlyHours = $hours * 60 + $minutes;
        
                            }
        
                            $clockouttime = date('Y-m-d H:i:s', strtotime($clockOut));
                            $offduty = date('Y-m-d H:i:s', strtotime($offDuty));
        
                            if ($clockouttime > $offduty) {
                                $Fdate = date('Y-m-d');
                                $onDutyForOT = new DateTime($clockOut);
                                if ($onDuty >= $clockIn) {
                                    $onDutyForOT = new DateTime($onDuty);
                                } else {
                                    $onDutyForOT = new DateTime($clockIn);
                                }
                                //$clockOutForOT = new DateTime($offDuty);
                                $clockOutForOT = new DateTime($clockOut);
                                $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                                $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                                $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
        
                                if ($totW->format('h:i') > $actW->format('h:i')) {
                                    $overTime_obj = $actW->diff($totW);
                                    $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                                    $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                                    $overTimeHours = $hours * 60 + $minutes;
                                } else {
                                    $overTimeHours = 0;
                                }
                            }
                        }
        
                        if ($clockIn == NULL && $clockOut == NULL) {
                            $AttPresentTypeID = 4;
                            /**** Absents *****/
                        } else {
                            $clockIn_datetime = date('Y-m-d H:i', strtotime($clockIn));
                            $onDuty_datetime = date('Y-m-d H:i', strtotime($onDuty));
                            
                            $clockIn_datetime_grace = new DateTime($clockIn);
                            $onDuty_datetime_grace = new DateTime($onDuty);
                         
                            $minutesToAdd = $graceperiod;
                            $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");
        
                            if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                                $AttPresentTypeID = 1;
                            } /**** Presented On time *****/
                            elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                                $AttPresentTypeID = 2;
                            } /**** Presented Later*****/
                            else {
                                $AttPresentTypeID = '';
                            }
                            /***** Let the user decide ****/
                        }
        
                        if ($row['isOnLeave'] == 1) {
                            $AttPresentTypeID = 5;
                        }
                        /**** Employee On Leave *****/
        
                        $normaloverTimeHours = $overTimeHours;
                        $normalrealtime = $realtime;
                        $isNormalDay = 0;
                        $isWeekEndDay = 0;
                        $isHoliday = 0;
        
                        if ($row['isWeekend'] == 1) {
                            /**/
                            if ($clockIn != NULL || $clockOut != NULL) {
                                $AttPresentTypeID = 1;
                            }
                            $overTimeHours = $totWorkingHours;
                            /**/
                            $normaloverTimeHours = 0;
                            $weekendOTHours = $totWorkingHours;
        
                            $normalrealtime = 0;
                            $weekendrealtime = $realtime;
                            $isNormalDay = 0;
                            $isWeekEndDay = 1;
                        }
        
                        if ($row['holiday'] == 1) {
                            /**/
                            if ($clockIn != NULL || $clockOut != NULL) {
                                $AttPresentTypeID = 1;
                            }
                            $overTimeHours = $totWorkingHours;
                            /**/
                            $normaloverTimeHours = 0;
                            $weekendOTHours = 0;
                            $holidayoverTimeHours = $totWorkingHours;
                            $normalrealtime = 0;
                            $weekendrealtime = 0;
                            $holidayrealtime = $realtime;
                            $isNormalDay = 0;
                            $isWeekEndDay = 0;
                            $isHoliday = 1;
                        }
        
                        if ($row['isCheckin'] == 1) {
                            $isCheckin = 1;
                        }
        
                        if ($row['isHalfDay'] == 1) {
                            $isHalfDay = 0.5;
                        }
        
                        if ($row['leaveHalf'] == 1) {
                            $AttPresentTypeID = 7;
                        }
        
                        if ($clockIn == '00:00:00') {
                            $clockIn = null;
                        }
        
                        /*Check multiple occurrence entry*/
                        $mul_key = "{$attendanceDate}-" . $row['deviceID'] . '-' . $row['empMachineID'];
                        $po[] = $mul_key;
                        $isMultipleOcc = (array_search($mul_key, $multiple_occ_chk_arr) !== false) ? 1 : 0;
                        array_push($data, [
                            'empID' => $row['EIdNo'],
                            'deviceID' => $row['deviceID'],
                            'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                            'floorID' =>$row['floorID'],
                            'clockoutFloorID' =>$clockoutFloorID,
                            'attendanceDate' => $attendanceDate,
                            'onDuty' => $onDuty,
                            'gracePeriod' => $graceperiod,
                            'offDuty' => $offDuty,
                            'checkIn' => $clockIn,
                            'checkOut' => $clockOut,
                            'presentTypeID' => $AttPresentTypeID,
                            'lateHours' => $lateHours,
                            'earlyHours' => $earlyHours,
                            'OTHours' => $overTimeHours,
                            'weekendOTHours' => $weekendOTHours,
                            'mustCheck' => $isCheckin,
                            'normalTime' => $isHalfDay,
                            'realTime' => $realtime,
                            'NDaysOT' => $normaloverTimeHours,
                            'holidayOTHours' => $holidayoverTimeHours,
                            'normalDay' => $normalrealtime,
                            'weekend' => $weekendrealtime,
                            'holiday' => $holidayrealtime,
                            'companyID' => current_companyID(),
                            'companyCode' => current_companyCode(),
                            'isNormalDay' => $isNormalDay,
                            'isWeekEndDay' => $isWeekEndDay,
                            'isHoliday' => $isHoliday,
                            'uploadType' => $row['uploadType'],
                            'isMultipleOcc' => $isMultipleOcc
                        ]);
                        $i++;
                    }        
                }
                $this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');
                if (!empty($data)) {
                    $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);
                } else {
                    return array('w', 'No Records Found.');
                }
                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to Reupload Attendance.');
                } else {
                    $this->db->trans_commit();
                    return array('s', 'Successfully Reupload Attendance.');
                }
            }
        }
    }

    function update_pay_variable_values(){
        
        $type = $this->input->post('type');
        $empViewID = $this->input->post('empViewID');
        $mothlyDeclarationID = $this->input->post('mothlyDeclarationID');
        $value = $this->input->post('value');

        if($type == 'day'){
            $get_ex_record = fetch_emp_variable_attandance_value($empViewID,$mothlyDeclarationID);
            $get_empViewRecord = fetch_emp_attandance_view_record($empViewID);

            if($get_ex_record){

                $data = array();
                $data['value'] =  $value;

                $this->db->where('empattendancereviewID',$empViewID)->where('monthlyDeclarationID',$mothlyDeclarationID)->update('srp_erp_pay_variable_empattendancereview',$data);

                return array('error' => 0,'message' => 'Successfully Updated');

            }else{
                $monthlyTypes_detail = get_pay_monthlydeclarationstypes_by_id($mothlyDeclarationID);

                if($monthlyTypes_detail){
                    $monthlyDeclaration = $monthlyTypes_detail['monthlyDeclarationID'];

                    $data = array();
                    $data['empattendancereviewID'] = $empViewID;
                    $data['monthlyDeclarationID'] = $monthlyTypes_detail['monthlyDeclarationID'];
                    $data['monthlyDeclaration'] = $monthlyTypes_detail['monthlyDeclaration'];
                    $data['linkType'] = $monthlyTypes_detail['linkType'];
                    $data['calType'] = $monthlyTypes_detail['calType'];
                    $data['empID'] = $get_empViewRecord['empID'];
                    $data['value'] = $value;

                   $this->db->insert('srp_erp_pay_variable_empattendancereview',$data);
                }

                return array('error' => 0,'message' => 'Successfully Added');
            }

        }elseif(in_array($type,['hours','minutes'])){

            $get_ex_record = fetch_emp_variable_attandance_value($empViewID,$mothlyDeclarationID);
            $get_empViewRecord = fetch_emp_attandance_view_record($empViewID);

            if($get_ex_record){

                $data = array();
                $data['value'] =  $value;

                $this->db->where('empattendancereviewID',$empViewID)->where('monthlyDeclarationID',$mothlyDeclarationID)->update('srp_erp_pay_variable_empattendancereview',$data);

                return array('error' => 0,'message' => 'Successfully Updated');

            }else{

                $monthlyTypes_detail = get_pay_monthlydeclarationstypes_by_id($mothlyDeclarationID);

                if($monthlyTypes_detail){
                    $monthlyDeclaration = $monthlyTypes_detail['monthlyDeclarationID'];

                    $data = array();
                    $data['empattendancereviewID'] = $empViewID;
                    $data['monthlyDeclarationID'] = $monthlyTypes_detail['monthlyDeclarationID'];
                    $data['monthlyDeclaration'] = $monthlyTypes_detail['monthlyDeclaration'];
                    $data['linkType'] = $monthlyTypes_detail['linkType'];
                    $data['calType'] = $monthlyTypes_detail['calType'];
                    $data['empID'] = $get_empViewRecord['empID'];
                    $data['value'] = $value;

                   $this->db->insert('srp_erp_pay_variable_empattendancereview',$data);
                }

                return array('error' => 0,'message' => 'Successfully Added');

            }


        }else{
            return array('error' => 1,'message' => 'Undefined Type');
        }

    }

    function save_empLocation()
    {
        $empID = $this->input->post('empID');
        $floorID = $this->input->post('floorID');
        $deviceID = $this->input->post('deviceID');
        $empMachineID = $this->input->post('empMachineID');
        $companyID = current_companyID();
        
        $this->db->select('*');
        $this->db->where('empID',$empID);
        $this->db->where('floorID',$floorID);
        $this->db->where('companyID',$companyID);
        $this->db->from('srp_erp_empattendancelocation');
        $record = $this->db->get()->row_array();
        
        if (!empty($record)) {
            return array('e', 'Location already exist.'  );
            exit;
        } 

        $this->db->select('*');
        $this->db->where('deviceID',$deviceID);
        $this->db->where('empMachineID',$empMachineID);
        $this->db->where('companyID',$companyID);
        $this->db->from('srp_erp_empattendancelocation');
        $record = $this->db->get()->row_array();
        
        if (!empty($record)) {
            return array('e', 'Machine ID already exist for the device '.$deviceID );
            exit;
        } 

        $this->db->trans_start();
        
        $data = array();
        $data['floorID'] = $floorID;
        $data['empID'] = $empID;
        $data['deviceID'] = $deviceID;
        $data['empMachineID'] = $empMachineID;
        $data['companyID'] = $companyID;
        $data['createdUserGroup'] = current_user_group();
        $data['createdPCID'] = current_pc();
        $data['createdUserID'] = current_userID();
        $data['CreatedUserName'] = current_employee();
        $data['createdDateTime'] = current_date();

        $this->db->insert('srp_erp_empattendancelocation', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Records inserted successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in insert record ');
        }

    }

    function update_empLocation()
    {
        $attendanceLocationID = $this->input->post('attendanceLocationID');
        $empID = $this->input->post('empID');
        $floorID = $this->input->post('floorID');
        $deviceID = $this->input->post('deviceID');
        $empMachineID = $this->input->post('empMachineID');
        $companyID = current_companyID();

        $this->db->select('*');
        $this->db->where('empID',$empID);
        $this->db->where('floorID',$floorID);
        $this->db->where('companyID',$companyID);
        $this->db->where_not_in('attendanceLocationID', $attendanceLocationID);
        $this->db->from('srp_erp_empattendancelocation');
        $record = $this->db->get()->row_array();
        
        if (!empty($record)) {
            return array('e', 'Location already exist.'  );
            exit;
        } 

        $this->db->select('*');
        $this->db->where('deviceID',$deviceID);
        $this->db->where('empMachineID',$empMachineID);
        $this->db->where('companyID',$companyID);
        $this->db->where_not_in('attendanceLocationID', $attendanceLocationID);
        $this->db->from('srp_erp_empattendancelocation');
        $record = $this->db->get()->row_array();
        
        if (!empty($record)) {
            return array('e', 'Machine ID already exist for the device '.$record['deviceID'] );
            exit;
        }  

        $this->db->trans_start();
        
        $data = array(
            
            'empID' => $empID,
            'floorID' => $floorID,
            'deviceID' => $deviceID,
            'empMachineID' => $empMachineID,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        );

        $this->db->where('attendanceLocationID', $attendanceLocationID)->update('srp_erp_empattendancelocation', $data);
        
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return array('s', 'Record updated successfully');
        } else {
            $this->db->trans_rollback();
            return array('e', 'Error in record update');
        }
    }
    function delete_empLocation()
    {
        $hidden_id = $this->input->post('hidden-id');
        $this->db->where('attendanceLocationID', $hidden_id)->delete('srp_erp_empattendancelocation');
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Records deleted successfully');
        } else {
            return array('e', 'Error in deleting process');
        }
    }


    //////////////////////////////////////////////////

    function getEmployeeMasterEmail($email){

        $CI =& get_instance();
        
        $db2 = $CI->load->database('db2', TRUE);

        $user = $db2->from('user')->where('username', $email)->get()->row();
       
        return $user;

    }

    function setEmployeeMasterRandom($email,$encrypted){

        $CI =& get_instance();
        
        $db2 = $CI->load->database('db2', TRUE);

        return $db2->where("email", $email)->update('user', array('randNum' => trim($encrypted)));

    }

    function save_user()
    {
        $Name=$this->input->post('name');
        $userName=$this->input->post('email');
        $password= md5($this->input->post('password'));
        $type=$this->input->post('type');
        $EmpID=$this->input->post('empselect');


        $this->db->trans_start();
        $data=array(
            'Name'=>$Name,
            'userName'=>$userName,
            'password'=>$password,
            'type'=>$type,
            'EmpID'=>$EmpID
        );


        $this->db->insert('user_asset', $data);
        // echo  $this->db->last_query();
        $empID = $this->db->insert_id();
    }

    function get_variable_salary_declaration(){
        
        $monthly_type = $this->input->post('category');
        $emp_code = $this->input->post('emp_code');

        $emp_details = fetch_employee_detail_tbl(1,$emp_code);

        $declarations = fetch_variable_declaration_emp($emp_details['EIdNo'],$monthly_type);

        if($declarations && isset($declarations['transactionAmount'])){
            return array('amount' => ($declarations['transactionAmount'] + $declarations['currentAmount']));
        }else{
            return array('amount' => 0);
        }

    }


// start: salary provision configuration 

    public function save_gl_setup(){

        $provisionGL = trim($this->input->post('provision_gl') ?? '');
        $expenseGl = trim($this->input->post('expenseGl') ?? '');
        $salaryProvisionMonth = trim($this->input->post('salary_provision_months') ?? '');
        $eligibleAfterMonth = trim($this->input->post('eligible_after_months') ?? '');
        $companyid = current_companyID();

        $this->db->select('Id');
                $this->db->from('srp_erp_leave_salary_provision');
                $this->db->where('isProvision', 1);
                $this->db->where('companyID', $companyid);
                //$this->db->where_not_in('x', $y);
                $record = $this->db->get()->row_array();

                $this->db->trans_start();

                if (isset($record)) {
                    $id = $record['Id'];

                    $data['GlAutoID'] = $provisionGL;
                    $data['expenseGlAutoID'] = $expenseGl;
                    $data['salaryProvisionMonths'] = $salaryProvisionMonth;
                    $data['eligibleAfterMonths'] = $eligibleAfterMonth;
                    $data['modifiedPCID'] = $this->common_data['current_pc'];
                    $data['modifiedUserID'] = $this->common_data['current_userID'];
                    $data['modifiedUserName'] = $this->common_data['current_user'];
                    $data['modifiedDateTime'] = $this->common_data['current_date'];

                    $this->db->where('Id',$id);
                    $this->db->update('srp_erp_leave_salary_provision', $data);
                    $this->db->trans_complete();

                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        return array('e', 'GL Setup Update failed ' . $this->db->_error_message());
                    } else {
                        $this->db->trans_commit();
                        return array('s', 'GL Setup Updated Successfully.');
                    }
                  
                }else{
                    $isProvision = 1;
                    $data['isProvision'] = $isProvision;

                    $data['GlAutoID'] = $provisionGL;
                    $data['expenseGlAutoID'] = $expenseGl;
                    $data['salaryProvisionMonths'] = $salaryProvisionMonth;
                    $data['eligibleAfterMonths'] = $eligibleAfterMonth;
                    $data['companyID'] = current_companyID();
                    $data['createdUserGroup'] = $this->common_data['user_group'];
                    $data['createdPCID'] = $this->common_data['current_pc'];
                    $data['createdUserID'] = $this->common_data['current_userID'];
                    $data['createdDateTime'] = $this->common_data['current_date'];
                    $data['createdUserName'] = $this->common_data['current_user'];
                    $data['TIMESTAMP'] = current_date(true);

                    $this->db->insert('srp_erp_leave_salary_provision', $data);
                    $this->db->trans_complete();

                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        return array('e', 'GL Setup Save failed ' . $this->db->_error_message());
                    } else {
                        $this->db->trans_commit();
                        return array('s', 'GL Setup saved Successfully.');
                    }
                }
    }


    public function add_salary_categories()
    {
        
        $salarycategoryid = trim($this->input->post('salarycategoryid') ?? '');
        $companyid = current_companyID();  

        $this->db->select('Id');
        $this->db->where('isProvision', 0);
        $this->db->where('salarycategoryID',$salarycategoryid);
        $this->db->where('companyID', $companyid);
        $this->db->from('srp_erp_leave_salary_provision');
        $record2 = $this->db->get()->row_array();
        $this->db->trans_start();

        if(!empty($record2)){
            return array('e', 'This Salary category already Exists');

        }else{
            $isProvision = 0;
            $data['isProvision'] = $isProvision;

            $data['salarycategoryID'] = $salarycategoryid;
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = $this->common_data['user_group'];
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['TIMESTAMP'] = current_date(true);

            $this->db->insert('srp_erp_leave_salary_provision', $data);
            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'failed to save Salary Category' . $this->db->_error_message());
            } else {
                $this->db->trans_commit();
                return array('s', 'Salary Category saved Successfully.');
            }
        }

    }


    /*function edit_salaryProvision_config()
    {
        $sal = $this->input->post('salarycategoryid');
        //$gl = $this->input->post('glcode2');
        $hidden_id = $this->input->post('hidden-id');

        $MUI = $this->common_data['current_userID'];
        $CU = $this->common_data['current_user'];
        $MDT = $this->common_data['current_date'];
        $MPcI = $this->common_data['current_pc'];

        $data = array(
            'salarycategoryID' => $sal,
            //'GlAutoID' => $gl,
            'modifiedPCID' => $MPcI,
            'modifiedUserID'=> $MUI,
            'modifiedUserName' => $CU,
            'modifiedDateTime' => $MDT
        );

        $this->db->where('Id', $hidden_id)->update('srp_erp_leave_salary_provision', $data);
        if ($this->db->affected_rows() > 0) {
            return array('s', 'Salary Category updated successfully');
        } else {
            return array('e', 'Error in updating record');
        }
    }*/

    function delete_salaryProvision_config()
    {
        $id = $this->input->post('id');

        $isIn = $this->db->query("SELECT Id FROM srp_erp_leave_salary_provision WHERE Id={$id}")->row('Id');

        if (isset($isIn)) {
            $this->db->where('Id', $id)->delete('srp_erp_leave_salary_provision');
            if ($this->db->affected_rows() > 0) {
                return array('s', 'Records deleted successfully');
            } else {
                return array('e', 'Error in deleting process');
            }
            
        } else {
            return array('e', 'This Record is not availabe'); 
        }
    }

// end : leave salary provision configuration


    function save_WFH_employee_applivation()
    {
        $this->db->trans_start();

        $documentCode =  0;
        $documentID = 'WFH';
        $empID = current_userID();
        $wfhid = $this->input->post('wfhID');
        $applicationDate = $this->input->post('entryDate');
        $WFHStartDate = $this->input->post('WFHStartDate');
        $WFHEndDate = $this->input->post('WFHEndDate');
        $comment = $this->input->post('comment');
        $companyID = $this->common_data['company_data']['company_id'];

        $date_format_policy = date_format_policy();
        $formated_documentDate = input_format_date($applicationDate, $date_format_policy);
        $formated_startDate = input_format_date($WFHStartDate, $date_format_policy);
        $formated_endDate = input_format_date($WFHEndDate, $date_format_policy);

        /**check already exist */
        if($wfhid){
            $isIn = $this->db->query("  SELECT wfhID 
                                    FROM srp_erp_work_from_home 
                                    WHERE wfhID = {$wfhid}
                                        AND empID={$empID} 
                                        AND documentID = 'WFH' 
                                        AND companyID = {$companyID} 
                                        /*AND DATE_FORMAT(startDate, '%Y-%m-%d') = {$WFHStartDate}*/ 
                                        /*AND DATE_FORMAT(endDate, '%Y-%m-%d') = {$WFHEndDate}*/
                                    ")->row('wfhID');  
        } 

        $this->load->library('sequence');  

        if(!empty($isIn)){
            $data['startDate'] = $formated_startDate;
            $data['endDate'] = $formated_endDate;
            $data['comments'] = $comment;

            $data['modifiedPCID'] = $this->common_data['current_pc'];
            $data['modifiedUserID'] = $this->common_data['current_userID'];
            $data['modifiedUserName'] = $this->common_data['current_user'];
            $data['modifiedDateTime'] = $this->common_data['current_date'];

            $this->db->where('wfhID', $isIn);
            $this->db->update('srp_erp_work_from_home', $data);

            /**start : document upload process */
                $documentSystemCode = $isIn;
                $this->db->select('companyID');
                $this->db->where('documentID', 'WFH');
                $num = $this->db->get('srp_erp_documentattachments')->result_array();
                $file_name = 'WFH' . '_' . $documentSystemCode . '_' . (count($num) + 1);
                $config['upload_path'] = realpath(APPPATH . '../attachments');
                $config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar|msg';
                $config['max_size'] = '5120'; // 5 MB
                $config['file_name'] = $file_name;

                /** call s3 library */
                $file = $_FILES['doc_file'];
                $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
                if(empty($ext)) {
                    echo json_encode(array('status' => 0, 'type' => 'e', 'message' => 'No extension found for the selected attachment'));
                    exit();
                }
                $cc = current_companyCode();
                $folderPath = !empty($cc) ? $cc . '/' : '';
                if ($this->s3->upload($file['tmp_name'], $folderPath . $file_name . '.' . $ext)) {
                    $s3Upload = true;
                } else {
                    $s3Upload = false;
                }
                /** end of s3 integration */

                $data_f['documentID'] = 'WFH';
                $data_f['documentSystemCode'] = $documentSystemCode;
                $data_f['attachmentDescription'] = trim($this->input->post('data_field') ?? '');
                $data_f['myFileName'] = $folderPath . $file_name . '.' . $ext;
                $data_f['fileType'] = trim($ext);
                $data_f['fileSize'] = trim($file["size"]);
                $data_f['timestamp'] = date('Y-m-d H:i:s');
                $data_f['companyID'] = $this->common_data['company_data']['company_id'];
                $data_f['companyCode'] = $this->common_data['company_data']['company_code'];
                $data_f['createdUserGroup'] = $this->common_data['user_group'];
                $data_f['modifiedPCID'] = $this->common_data['current_pc'];
                $data_f['modifiedUserID'] = $this->common_data['current_userID'];
                $data_f['modifiedUserName'] = $this->common_data['current_user'];
                $data_f['modifiedDateTime'] = $this->common_data['current_date'];
                $data_f['createdPCID'] = $this->common_data['current_pc'];
                $data_f['createdUserID'] = $this->common_data['current_userID'];
                $data_f['createdUserName'] = $this->common_data['current_user'];
                $data_f['createdDateTime'] = $this->common_data['current_date'];

                $this->db->insert('srp_erp_documentattachments', $data_f);
            /**end : document upload process */

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed to Updated WFH Application');
            } else {
                $this->db->trans_commit();
                return array('s', 'Updated WFH Application Successfullty');
            }

        }else{

            $lastCodeArray = $this->db->query("SELECT serialNo FROM srp_erp_work_from_home WHERE companyID={$companyID}
            ORDER BY wfhID DESC LIMIT 1")->row_array();

            $lastCodeNo = $lastCodeArray['serialNo'];
            $lastCodeNo = ($lastCodeNo == NULL) ? 1 : $lastCodeArray['serialNo'] + 1;

            $this->load->library('sequence');
            $dCode = $this->sequence->sequence_generator('WFH', $lastCodeNo);

            $data['empID'] = $empID;
            $data['applicationTypeID'] = 0;
            $data['startDate'] = $formated_startDate;
            $data['endDate'] = $formated_endDate;
            $data['documentCode'] = $dCode;
            $data['documentID'] = $documentID;
            $data['documentDate'] = $formated_documentDate;
            $data['comments'] = $comment;
            $data['serialNo'] = $lastCodeNo;

            $data['companyID'] = current_companyID();
            $data['companyCode'] = $this->common_data['company_data']['company_code'];
            $data['createdUserGroup'] = $this->common_data['user_group'];
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['timestamp'] = current_date(true);

            $this->db->insert('srp_erp_work_from_home', $data);
            $last_id = $this->db->insert_id();

            /**start : document upload process */
                //$doc_file = trim($this->input->post('doc_file') ?? '');
                $documentSystemCode = $last_id;

                $this->db->select('companyID');
                $this->db->where('documentID', 'WFH');
                $num = $this->db->get('srp_erp_documentattachments')->result_array();
                $file_name = 'WFH' . '_' . $documentSystemCode . '_' . (count($num) + 1);
                $config['upload_path'] = realpath(APPPATH . '../attachments');
                $config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar|msg';
                $config['max_size'] = '5120'; // 5 MB
                $config['file_name'] = $file_name;

                /** call s3 library */
                    $file = $_FILES['doc_file'];
                    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
                    if(empty($ext)) {
                        echo json_encode(array('status' => 0, 'type' => 'e', 'message' => 'No extension found for the selected attachment'));
                        exit();
                    }
                    $cc = current_companyCode();
                    $folderPath = !empty($cc) ? $cc . '/' : '';
                    if ($this->s3->upload($file['tmp_name'], $folderPath . $file_name . '.' . $ext)) {
                        $s3Upload = true;
                    } else {
                        $s3Upload = false;
                    }
                /** end of s3 integration */

                $data_f['documentID'] = 'WFH';
                $data_f['documentSystemCode'] = $documentSystemCode;
                $data_f['attachmentDescription'] = trim($this->input->post('data_field') ?? '');
                $data_f['myFileName'] = $folderPath . $file_name . '.' . $ext;
                $data_f['fileType'] = trim($ext);
                $data_f['fileSize'] = trim($file["size"]);
                $data_f['timestamp'] = date('Y-m-d H:i:s');
                $data_f['companyID'] = $this->common_data['company_data']['company_id'];
                $data_f['companyCode'] = $this->common_data['company_data']['company_code'];
                $data_f['createdUserGroup'] = $this->common_data['user_group'];
                $data_f['modifiedPCID'] = $this->common_data['current_pc'];
                $data_f['modifiedUserID'] = $this->common_data['current_userID'];
                $data_f['modifiedUserName'] = $this->common_data['current_user'];
                $data_f['modifiedDateTime'] = $this->common_data['current_date'];
                $data_f['createdPCID'] = $this->common_data['current_pc'];
                $data_f['createdUserID'] = $this->common_data['current_userID'];
                $data_f['createdUserName'] = $this->common_data['current_user'];
                $data_f['createdDateTime'] = $this->common_data['current_date'];

                $this->db->insert('srp_erp_documentattachments', $data_f);
                //$this->wfh_documentUpload($data_f, $file_name, $s3Upload);
            /**end : document upload process */

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed to Save WFH Application');
            } else {
                $this->db->trans_commit();
                return array('s', 'Saved WFH Application Successfullty', $last_id);
            }

        }

    }


/*checking with policyMasterID */
//  function employee_WFH_details($masterID)
//  {
//      return $this->db->query("SELECT IFNULL(approvalComments,'') as approvalComments,leaveAvailable,leaveMasterID, empI,
//                               IF(policyMasterID = 2, DATE_FORMAT(startDate, '%Y-%m-%d %h:%i %p'), DATE_FORMAT(startDate, '%Y-%m-%d')) AS startDate, currentLevelNo,
//                               IF(policyMasterID = 2, DATE_FORMAT(endDate, '%Y-%m-%d %h:%i %p'), DATE_FORMAT(endDate, '%Y-%m-%d')) AS endDate, days, hours, ishalfDay,shift,
//                               documentCode, serialNo, entryDate, comments, isCalenderDays, nonWorkingDays, workingDays, leaveGroupID, isAttendance, policyMasterID,
//                               confirmedYN, confirmedByEmpID, confirmedByName, confirmedDate, approvedYN, approvedDate, approvedbyEmpID, approvedbyEmpName, coveringEmpID,
//                               srp_erp_leavemaster.companyID, srp_erp_leavemaster.companyCode, description, applicationType, requestForCancelYN, cancelledYN
//                               FROM 
//                               LEFT JOIN srp_erp_leavetype on srp_erp_leavetype.leaveTypeID=srp_erp_leavemaster.leaveTypeID
//                               WHERE srp_erp_leavemaster.leaveMasterID={$masterID}")->row_array();
//  }
 function wfh_employee_details($wfhID)
 {
     return $this->db->query("SELECT IFNULL(approvalComments,'') as approvalComments,wfhID, empID,
                              DATE_FORMAT(startDate, '%Y-%m-%d') AS startDate, currentLevelNo,
                              DATE_FORMAT(endDate, '%Y-%m-%d') AS endDate,
                              documentCode, documentDate, comments,
                              confirmedYN, confirmedByEmpID, confirmedByName, confirmedDate, approvedYN, approvedDate, approvedbyEmpID, approvedbyEmpName,
                              companyID, companyCode, applicationTypeID
                              FROM srp_erp_work_from_home 
                              WHERE wfhID={$wfhID}")->row_array();
 }


    function delete_empWFH()
    {
        $WFH_Delete_ID = $this->input->post('deleteID');
        $det = $this->wfh_employee_details($WFH_Delete_ID);

       // $det = $this->db->query("SELECT approvedYN, documentCode FROM srp_erp_work_from_home WHERE wfhID ={$WFH_Delete_ID}")->row_array();

        if ($det['approvedYN'] == 1) {
            return array('e', 'This leave application is Approved');
        } else {
            $this->db->trans_start();

            $this->db->where('wfhID', $WFH_Delete_ID)->delete('srp_erp_work_from_home');

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Failed to delete -' . $det['documentCode'] . '');
            } else {
                $this->db->trans_commit();
                return array('s', 'Successfully Deleted -' . $det['documentCode'] . '');
            }
        }
    }

/* should have to discuss and confirm about what is the most suitable function to use here :- getemployeedetails_for_WFH() OR getemployeedetails()  */
    function getemployeedetails_for_WFH($empID)
    {
        $companyID = current_companyID();
        $companies = $companyID;
        $groupCompanyID = $this->db->query(
            "SELECT companyGroupID 
             FROM srp_erp_companygroupdetails 
             WHERE srp_erp_companygroupdetails.companyID = $companyID"
        )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }

        $qry = "SELECT srp_employeesdetails.EIdNo, srp_employeesdetails.ECode, srp_employeesdetails.EmpSecondaryCode, srp_designation.DesDescription,
                IFNULL(srp_employeesdetails.Ename2, '') AS employee, srp_employeesdetails.DateAssumed,
                DepartmentDes as department
                FROM srp_employeesdetails
                LEFT JOIN srp_designation ON srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
                LEFT JOIN  (
                     SELECT EmpID AS empID_Dep, DepartmentDes FROM srp_departmentmaster AS departTB
                     JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
                     WHERE EmpID=$empID AND departTB.Erp_companyID IN ($companies) AND empDep.Erp_companyID IN ($companies) AND empDep.isActive=1
                ) AS departTB ON departTB.empID_Dep=srp_employeesdetails.EIdNo
                WHERE srp_employeesdetails.Erp_companyID IN ($companies) AND srp_employeesdetails.EIdNo =$empID ";
        $data = $this->db->query($qry)->row_array();
        // print_r($data);
        // exit;
        return $data;
    }
    

    function confirmation_WFH_document()
    {
        $wfhmasterId = trim($this->input->post('wfhmasterId') ?? '');

        $this->db->select('wfhID');
        $this->db->where('wfhID', $wfhmasterId);
        $this->db->where('confirmedYN', 1);
        $this->db->from('srp_erp_work_from_home');
        $Confirmed = $this->db->get()->row_array();
        if (!empty($Confirmed)) {
            return array('w', 'WFH Request already confirmed');
        }

        $this->db->select('*');
        $this->db->where('wfhID', $wfhmasterId);
        $this->db->from('srp_erp_work_from_home');
        $wfh_data = $this->db->get()->row_array();

        $this->db->select('documentID');
        $this->db->where('wfhID', $wfhmasterId);
        $this->db->from('srp_erp_work_from_home');
        $detail = $this->db->get()->row_array();

        if($detail){
            $validate_code = validate_code_duplication($wfh_data['documentCode'], 'documentCode', $wfhmasterId,'wfhID', 'srp_erp_work_from_home');
            if(!empty($validate_code)) {
                return array('e', 'The document Code Already Exist.(' . $validate_code . ')');//'e'
            }

            $data = array(
                'confirmedYN' => 1,
                'confirmedDate' => $this->common_data['current_date'],
                'confirmedByEmpID' => $this->common_data['current_userID'],
                'confirmedByName' => $this->common_data['current_user'],
            );
            // $this->db->where('wfhID', trim($this->input->post('wfhmasterId') ?? ''));
            // $this->db->update('srp_erp_work_from_home', $data);

            $this->load->library('Approvals');
            $isAutoApproval = get_document_auto_approval('WFH');

            $documentName = 'WFH Application Approval';
            $tableName = 'srp_erp_work_from_home';
            $documentCode = $wfh_data['documentCode'];
            $createdDate = $wfh_data['documentDate'];
            $masterID = $wfhmasterId;

            if ($isAutoApproval == 0) { // If auto approval
                $this->approvals->auto_approve($masterID, $tableName, 'wfhID', 'WFH', $documentCode, $createdDate);
                
                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return array('s', 'Approved successfully');
                } else {
                    $this->db->trans_rollback();
                    return array('e', 'Error in approval process');
                }
            }

            $approvals_status = $this->approvals->CreateApproval('WFH', $masterID, $documentCode, $documentName, $tableName, 'wfhID', 0, $createdDate);

            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                return array('e', 'Something went wrong In approval create process');
            }

            if ($approvals_status == 3) {
                $this->db->trans_rollback();
                return array('w', 'There is no user exists to perform <b>Personal Action approval</b> for this company.');
            } else if($approvals_status == 1) {
               
                $this->db->where('wfhID', $wfhmasterId);
                $this->db->update('srp_erp_work_from_home', $data);
                
                $this->session->set_flashdata('s', 'Create Approval : ' . $wfh_data['documentCode'] . ' Approvals Created Successfully ');


                if ($this->db->trans_status() === false) {
                    $this->db->trans_rollback();
                    return array('e', 'Something went wrong In approval create process');
                }

                $this->db->trans_commit();
                return array('s', 'Approval created : ' . $documentCode);
            } else {
                $this->db->trans_rollback();
                return array('w', 'some thing went wrong', $approvals_status);
            }

            $firbase_status = null;

            if($firbase_status){
                 /*** Firebase Mobile Notification*/
                $this->db->select('managerID');
                $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
                $this->db->where('active', 1);
                $this->db->from('srp_erp_employeemanagers');
                $managerid = $this->db->get()->row_array();

                $token_android = firebaseToken($managerid["managerID"], 'android');
                $token_ios = firebaseToken($managerid["managerID"], 'apple');

                $firebaseBody = $pa_data['createdUserName'] . " has applied for a work from home.";

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("New WFH Application", $firebaseBody, $token_android, 2, $pa_data['documentCode'], "WFH", $id, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("New WFH Application", $firebaseBody, $token_ios, 2, $pa_data['documentCode'], "WFH", $id, "apple");
                }
            }

            return array('s','Approvals Created Successfully');
            // $this->db->select('documentCode,documentDate,wfhID');
            // $this->db->where('wfhID', trim($this->input->post('wfhmasterId') ?? ''));
            // $this->db->from('srp_erp_work_from_home');
            // $po_data = $this->db->get()->row_array();

            // $autoApproval= get_document_auto_approval('WFH');/* chech levelNo in srp_erp_approvalusers & 
            //                                                     if levelNo==0 then return 0, if levelNo ==1 then return 1, else return 2 */

            // if($autoApproval==0){
            //     $approvals_status = $this->approvals->auto_approve($po_data['wfhID'], 'srp_erp_work_from_home','wfhID', 'WFH',$po_data['documentCode'],$po_data['documentDate']);
            // }elseif($autoApproval==1){
            //     $approvals_status = $this->approvals->CreateApproval('WFH', $po_data['wfhID'], $po_data['documentCode'], 'WFH Request', 'srp_erp_work_from_home', 'wfhID',0,$po_data['documentDate']);
            // }else{
            //     $this->session->set_flashdata('e', 'Approval levels are not set for this document');
            //     return false;
            // }
            

            // if ($approvals_status == 1) {
            //     $autoApproval= get_document_auto_approval('WFH');

            //     if($autoApproval==0) {
            //         $result = $this->save_wfh_request_approval(0, $po_data['wfhID'], 1, 'Auto Approved');
            //         if($result){
            //             $this->session->set_flashdata('s', 'Approvals Created Successfully ');
            //             return true;
            //         }
            //     }else{
            //         $data = array(
            //             'confirmedYN' => 1,
            //             'approvedYN' => 0,
            //             'confirmedDate' => $this->common_data['current_date'],
            //             'confirmedByEmpID' => $this->common_data['current_userID'],
            //             'confirmedByName' => $this->common_data['current_user'],
            //         );
            //         $this->db->where('wfhID', trim($this->input->post('wfhID') ?? ''));
            //         $this->db->update('srp_erp_work_from_home', $data);

            //         $this->session->set_flashdata('s', 'Document Confirmed Successfully ');
            //         return true;
            //     }
            // }else if($approvals_status==3){
            //     return array('w', 'There are no users exist to perform approval for this document.');
            // }
            // else {
            //     return false;
            // }

            // return array('s','WFH Confirmed Successfully');
        }else{
            //$this->session->set_flashdata('e', 'No records found to confirm this document');
            return array('e','No records found to confirm this document');
        }

    }


    function save_wfh_request_approval($autoappLevel=1,$system_idAP=0,$statusAP=0,$commentsAP=0)
    {
        //$this->db->trans_start();
        $this->load->library('Approvals');
        $wfhID = trim($this->input->post('wfhID') ?? '');

        $this->db->select('*');
        $this->db->where('wfhID', trim($this->input->post('wfhID') ?? ''));
        $this->db->from('srp_erp_work_from_home');
        $wfh_data = $this->db->get()->row_array();

        $companyID = current_companyID();

        if($autoappLevel==1){
            $system_code = trim($this->input->post('wfhID') ?? '');
            $level_id = trim($this->input->post('Level') ?? '');
            $status = trim($this->input->post('po_status') ?? '');
            $comments = trim($this->input->post('comments') ?? '');
        }else{
            $system_code = $system_idAP;
            $level_id = 0;
            $status = $statusAP;
            $comments = $commentsAP;
            $_post['wfhID']=$system_code;
            $_post['Level']=$level_id;
            $_post['status']=$status;
            $_post['comments']=$comments;
        }

        if($autoappLevel==0){
            $approvals_status=1;
        }else{
            $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'WFH');
        }

        if ($approvals_status == 1) {
            $data = array(
                'approvedYN' => 1,
                'approvedDate' => $this->common_data['current_date'],
                'approvedbyEmpID' => $this->common_data['current_userID'],
                'approvedbyEmpName' => $this->common_data['current_user'],
                'approvalComments' => $this->input->post('comments'),
            );
            $this->db->where('wfhID', trim($this->input->post('id') ?? ''));
            $this->db->update('srp_erp_work_from_home', $data);

            // /*** Firebase Mobile Notification*/
            // $token_android = firebaseToken($wfh_data["createdUserID"], 'android');
            // $token_ios = firebaseToken($wfh_data["createdUserID"], 'apple');

            // $this->load->library('firebase_notification');
            // if(!empty($token_android)) {
            //     $this->firebase_notification->sendFirebasePushNotification("WFH Application Approved", "Your work from home application has been approved", $token_android, 4, $wfh_data['documentCode'], "WFH", $wfhID, "android");
            // }
            // if(!empty($token_ios)) {
            //     $this->firebase_notification->sendFirebasePushNotification("WFH Application Approved", "Your work from home application has been approved", $token_ios, 4, $wfh_data['documentCode'], "WFH", $wfhID, "apple");
            // }

            $this->session->set_flashdata('s', 'Approved Successfully.');
            return true;
        }

        if($status != 1) {
            $this->db->select('documentCode');
            $this->db->where('wfhID', trim($this->input->post('wfhID') ?? ''));
            $this->db->from('srp_erp_work_from_home');
            $documentCode = $this->db->get()->row_array();


            $datas = array(
                'confirmedYN' => 3,
                /*'confirmedDate' => null,
                'confirmedByEmpID' => null,
                'confirmedByName' => null,*/
            );
            $this->db->where('wfhID', trim($this->input->post('wfhID') ?? ''));
            $update = $this->db->update('srp_erp_work_from_home', $datas);
            if ($update) {
                $data = array(
                    'documentID' => "WFH",
                    'systemID' => $this->input->post('wfhID'),
                    'documentCode' => $documentCode['documentCode'],
                    'comment' => $this->input->post('comments'),
                    'rejectedLevel' => 1,
                    'rejectByEmpID' => $this->common_data['current_userID'],
                    'rejectByEmpName' => $this->common_data['current_user'],
                    'table_name' => "srp_erp_work_from_home",
                    'table_unique_field' => "wfhID",
                    'companyID' => current_companyID(),
                    'companyCode' => current_companyCode(),
                    'createdUserGroup' => $this->common_data['user_group'],
                    'createdPCID' => $this->common_data['current_pc'],
                    'createdUserID' => $this->common_data['current_userID'],
                    'createdUserName' => $this->common_data['current_user'],
                    'createdDateTime' => $this->common_data['current_date'],
                );
                $this->db->insert('srp_erp_approvalreject', $data);

                // /*** Firebase Mobile Notification*/
                // $token_android = firebaseToken($paa_data["createdUserID"], 'android');
                // $token_ios = firebaseToken($paa_data["createdUserID"], 'apple');

                // $firebaseBody = "Your personal application has referred back";

                // $this->load->library('firebase_notification');
                // if(!empty($token_android)) {
                //     $this->firebase_notification->sendFirebasePushNotification("WFH Application Referred Back", $firebaseBody, $token_android, 4, $paa_data['documentCode'], "WFH", $wfhID, "android");
                // }
                // if(!empty($token_ios)) {
                //     $this->firebase_notification->sendFirebasePushNotification("WFH Application Referred Back", $firebaseBody, $token_ios, 4, $paa_data['documentCode'], "WFH", $wfhID, "apple");
                // }

                $this->session->set_flashdata('s', ' Rejected Successfully ');
                return true;
            }
        }

        // $this->db->trans_complete();
        // if ($this->db->trans_status() === FALSE) {
        //     $this->db->trans_rollback();
        //     return false;
        // } else {
        //     $this->db->trans_commit();
        //     return true;
        // }
    }


    function fetch_template_data($wfhID)
    {
        $secondaryCode = getPolicyValues('SSC', 'All'); 
        
        $convertFormat = convert_date_format_sql();
        $this->db->select('wfhID,srp_erp_work_from_home.createdUserName as createdUserName,srp_erp_work_from_home.documentCode as documentCode, DATE_FORMAT(createdDateTime,\'' . $convertFormat . '\') AS createdDateTime,
                createdUserID, confirmedByEmpID, confirmedbyName,empID,comments,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate,confirmedByName,confirmedYN,
                DATE_FORMAT(confirmedDate,\'' . $convertFormat . '\') AS confirmedDate,approvedbyEmpID,approvedbyEmpName,approvedYN,DATE_FORMAT(approvedDate,\'' . $convertFormat . ' %h:%i:%s\') AS approvedDate,
                DATE_FORMAT(documentDate,\'' . $convertFormat . '\') AS documentDate,segmentCode,CASE WHEN confirmedYN = 2 || confirmedYN = 3   THEN " - " WHEN confirmedYN = 1 THEN 
                CONCAT_WS(\' on \',IF(LENGTH(confirmedbyName),confirmedbyName,\'-\'),IF(LENGTH(DATE_FORMAT( confirmedDate, \'' . $convertFormat . ' %h:%i:%s\' )),DATE_FORMAT( confirmedDate, \'' . $convertFormat . ' %h:%i:%s\' ),NULL)) ELSE "-" END confirmedYNn,srp_employeesdetails.Ename2');
        $this->db->where('wfhID', $wfhID);
        $this->db->from('srp_erp_work_from_home');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_work_from_home.empID', 'left');
        $data['master'] = $this->db->get()->row_array();

        $this->db->select('approvedYN, approvedDate, approvalLevelID, Ename1, Ename2, Ename3, Ename4, documentCode');
        $this->db->where('documentSystemCode', $wfhID);
        $this->db->where('documentID', 'WFH');
        $this->db->from('srp_erp_documentapproved');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_documentapproved.approvedEmpID', 'left');
        $data['approval'] = $this->db->get()->result_array();
        return $data;
    }

    function fetch_signaturelevel()
    {
        $this->db->select('approvalSignatureLevel');
        $this->db->where('companyID', current_companyID());
        $this->db->where('documentID', 'WFH');
        $this->db->from('srp_erp_documentcodemaster');
        return $this->db->get()->row_array();
    }

    function fetch_employee_detail_travel_id(){
        $empID = trim($this->input->post('empID') ?? '');
 
        $com = current_companyID();
        $this->db->select("EIdNo, ECode,DesDescription, IFNULL(Ename2, '') AS employee,srp_employeesdetails.leaveGroupID, DepartmentDes,repotingManagerTB.managerID,repotingManagerTB.managerReporting, srp_employeesdetails.EmpDesignationId");
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID');
        $this->db->join(' (
                         SELECT EmpID AS empID_Dep, DepartmentDes FROM srp_departmentmaster AS departTB
                         JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
                         WHERE departTB.Erp_companyID=' . $com . ' AND empDep.Erp_companyID=' . $com . ' AND empDep.isActive=1 AND empDep.isPrimary = 1  GROUP BY EmpID
                     ) AS departTB', 'departTB.empID_Dep=srp_employeesdetails.EIdNo', 'left');
        $this->db->join(' (
            SELECT empID,managerID, CONCAT( EmpSecondaryCode,\'-\', Ename2 ) AS managerReporting FROM srp_erp_employeemanagers
        JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo=srp_erp_employeemanagers.managerID
        WHERE companyID =' . $com . ' AND active=1
        ) AS repotingManagerTB', 'repotingManagerTB.managerID=srp_employeesdetails.EIdNo', 'left');
        $this->db->where('srp_employeesdetails.Erp_companyID', $com);
        $this->db->where('srp_employeesdetails.EIdNo', $empID);
        $customer = $this->db->get()->row_array();
        //var_dump($this->db->last_query());exit;
        return  $customer;
    }

    function fetch_city() {
        $countryID = trim($this->input->post('countryID') ?? '');
    
        $this->db->select('destinationID, City');
        $this->db->from('srp_erp_airportdestinationmaster');
        $this->db->where('countryID', $countryID);
        $cities = $this->db->get()->result_array();
    
        return $cities;
    }

    public function save_request() {
        $empID = $this->input->post('empID');
        $designationID = $this->input->post('designationID');
        $managerID = $this->input->post('manager_id');
        $tripTypeID = $this->input->post('trip_type');

        $seat_preference = $this->input->post('seatPrefernce');
        $meal_preference = $this->input->post('mealPreference');
        $mobile_number = $this->input->post('mobile_number');
        $flyer_no_if_any = $this->input->post('frequantFlyNo');
        $linkLeave=$this->input->post('linkLeave');
        $classType=$this->input->post('classType');
        $requestDate = $this->input->post('date');
        $requestByEmpID = $this->input->post('request_by_employee_id');
        $subject = $this->input->post('subject');
        $descriptions = $this->input->post('description');
        $company_id = $this->input->post('company_id');
        $requestid=$this->input->post('requestid');
        $requestTypeID=$this->input->post('requestTypeID');
        $projectType=$this->input->post('projectType');
        $projectID=$this->input->post('projectID');

        $haveVisa=$this->input->post('haveVisa');
        $typeOfTravel=$this->input->post('typeOfTravel');
        $bookingType=$this->input->post('bookingType');

        $lastCodeArray = $this->db->query("SELECT serialNo FROM srp_erp_documentcodemaster WHERE companyID={$company_id} and documentID= 'TRQ'
        ORDER BY codeID DESC LIMIT 1")->row_array();

        $lastCodeNo = $lastCodeArray['serialNo'];
        $lastCodeNo = ($lastCodeNo == NULL) ? 1 : $lastCodeArray['serialNo'] + 1;
        $this->load->library('sequence');
        $travel_document_code=$this->sequence->sequence_generator('TRQ', $lastCodeNo);
        $data = array(
            'empID' => $empID,
            'desingationID' => $designationID,
            'documentID' => 'TRQ',
            'travelRequestCode' =>$travel_document_code,
            'managerID' => $managerID,
            'tripTypeID' => $tripTypeID,
            'requestDate' => $requestDate,
            'requestedByEmpID' => $requestByEmpID,
            'subject' => $subject,
            'descriptions' => $descriptions,
            'companyID' => $company_id,
            'seatPrefernce'=>$seat_preference,
            'mealPreference'=>$meal_preference,
            'loaclMobileNumber'=>$mobile_number,
            'frequantFlyNo'=>$flyer_no_if_any,
            'leaveMasterID'=>$linkLeave,
            'projectID'=>$projectID,
            'projectType'=>$projectType,
            'requestType'=>$requestTypeID,
            'classType'=>$classType,
            'bookingType'=>$bookingType,
            'haveVisa'=>$haveVisa,
            'typeOfTravel'=>$typeOfTravel,
            'createdPCID' => $this->common_data['current_pc'],
            'createdUserID' => $this->common_data['current_userID'],
            'createdUserName' => $this->common_data['current_user'],
            'createdDateTime' => $this->common_data['current_date'],
            'modifiedPCID' => $this->common_data['current_pc'],
            'modifiedUserID' => $this->common_data['current_userID'],
            'modifiedUserName' => $this->common_data['current_user'],
            'modifiedDateTime' => $this->common_data['current_date']
        );

        $this->db->trans_start();
        if (trim($this->input->post('requestid') ?? '')) {
            $this->db->where('id', trim($this->input->post('requestid') ?? ''));
            $this->db->update('srp_erp_travel_request', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->session->set_flashdata('e', 'Travel Request Updating  Failed ' . $this->db->_error_message());
                $this->db->trans_rollback();
                return array('status' => false);
            } else {
                $this->session->set_flashdata('s', 'Travel request Updated Successfully.');
                $this->db->trans_commit();
                return array('success' => true, 'message' => 'Request saved successfully', 'requestID' => $requestid);
            }
        }
       else
       {
        $this->db->insert('srp_erp_travel_request', $data);
        $requestID = $this->db->insert_id();

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            return array('success' => false, 'message' => 'Failed to save request');
        } else {
            $this->db->trans_commit();
            return array('success' => true, 'message' => 'Request saved successfully', 'requestID' => $requestID);
        }
       }
    }

    public function saveTravelRequestDetail() {

        $requestID = $this->input->post('requestID');
        $empid = $this->input->post('empName');
        $destinationIDs = $this->input->post('to_destination');
        $startDates = $this->input->post('start_date');
        $endDates = $this->input->post('end_date');
        $currencyIDs = $this->input->post('currency_code');
        $amounts = $this->input->post('travel_advance'); 
        $comments = $this->input->post('trip_reason');
        $familyid = $this->input->post('familyname'); 
        // $roundTrip = $this->input->post('roundTrip');
        $from_destination = $this->input->post('from_destination');
    
        foreach ($empid as $index => $emp) {
            $data[] = array(
                'travelRequestID' => $requestID,
                'empID' => $empid[$index],
                'destinationID' => $destinationIDs[$index],
                'startDate' => $startDates[$index],
                'endDate' => $endDates[$index],
                'currencyID' => $currencyIDs[$index],
                // 'amount' => $amounts[$index],
                'amount' => 0,
                'comments' => $comments[$index],
                // 'tripType'=>$roundTrip[$index],
                'fromDestionationID'=>$from_destination[$index],
                'relationID'=> isset($familyid[$index]) ? $familyid[$index] : null, 
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdDateTime' => $this->common_data['current_date']
            );
        }
    
        foreach ($data as $item) {
            $this->db->insert('srp_erp_travel_request_details', $item);
        }
    
        if ($this->db->affected_rows() > 0) {
            return array('success' => true, 'message' => 'Request saved successfully');
        } else {
            return array('error' => false, 'message' => 'Failed to save request');
        }
    }
    
    
    public function fetch_travel_request_detail_table()
    {
        $requestID = $this->input->post('requestID');
        
        if ($requestID) {
            $sql = "SELECT
                        trd.detailID,
                        trd.empID,
                        trd.relationID,
                        trd.tripType AS roundTrip,
                        frm.relationship AS relationName,
                        fam.name,
                        fam.DOB AS DOB,
                        cm.CountryDes AS countryName,
                        adm.City AS cityName,
                        trd.startDate,
                        trd.endDate,
                        cur.CurrencyCode,
                        trd.amount,
                        trd.comments,
                        emp.Ename2 AS employeeName,
                        (SELECT adm_inner.City 
                         FROM srp_erp_airportdestinationmaster AS adm_inner
                         WHERE adm_inner.destinationID = trd.fromDestionationID) AS fromDestinationCity
                    FROM
                        srp_erp_travel_request_details AS trd
                    LEFT JOIN srp_erp_countrymaster AS cm ON trd.countryID = cm.CountryID
                    LEFT JOIN srp_erp_airportdestinationmaster AS adm ON trd.destinationID = adm.destinationID
                    LEFT JOIN srp_erp_currencymaster AS cur ON trd.currencyID = cur.currencyID
                    LEFT JOIN srp_employeesdetails AS emp ON trd.empID = emp.EIdNo
                    LEFT JOIN srp_erp_family_details AS fam ON trd.relationID = fam.empfamilydetailsID
                    LEFT JOIN srp_erp_family_relationship frm ON fam.relationship = frm.relationshipID
                    WHERE trd.travelRequestID = ?";
    
            $query = $this->db->query($sql, array($requestID));
    
            if ($query) {
                if ($query->num_rows() > 0) {
                    $result = $query->result_array();
                
                    foreach ($result as &$row) {
                        if (!empty($row['DOB'])) {
                            $row['DOB'] = date('Y-m-d', strtotime($row['DOB']));
                        }
                    }
                
                $data['detail'] = $result;
                } else {
                    $data['detail'] = array(); 
                }
            } else {
                $data['detail'] = array(); 
            }
        } else {
            $data['detail'] = array();
        }
    
        return $data;
    }
    
    public function delete_travel_request_detail()
    {
        $detailID = $this->input->post('detailID');
        $this->db->delete('srp_erp_travel_request_details', array('detailID' => $detailID));
        return true;
    }
    public function edit_travel_request_detail()
    {
        $detailID = $this->input->post('detailID');
        if ($detailID) {
            $sql = "SELECT
                        trd.detailID,
                        trd.empID,
                        trd.fromDestionationID,
                        trd.travelRequestID,
                        trd.relationID,
                        trd.tripType AS roundTrip,
                        trd.countryID,
                        trd.destinationID,
                        cm.CountryDes AS countryName,
                        adm.City AS cityName,
                        trd.startDate,
                        trd.endDate,
                        trd.currencyID,
                        cur.CurrencyCode,
                        trd.amount,
                        trd.comments,
                        emp.Ename2 AS employeeName
                    FROM
                        srp_erp_travel_request_details AS trd
                    LEFT JOIN srp_erp_countrymaster AS cm ON trd.countryID = cm.CountryID
                    LEFT JOIN srp_erp_airportdestinationmaster AS adm ON trd.destinationID = adm.destinationID
                    LEFT JOIN srp_erp_currencymaster AS cur ON trd.currencyID = cur.currencyID
                    LEFT JOIN srp_employeesdetails AS emp ON trd.relationID = emp.EIdNo
                    WHERE trd.detailID = ?";
    
            $query = $this->db->query($sql, array($detailID));
    
            if ($query) {
                if ($query->num_rows() > 0) {
                    $data['detail'] = $query->result_array();
                } else {
                    $data['detail'] = array(); 
                }
            } else {
                $data['detail'] = array(); 
            }
        } else {
            $data['detail'] = array(); 
        }
    
        return $data;
    }
    public function updateTravelRequestDetails() {
        $detailID = $this->input->post('detailID');
        $requestID = $this->input->post('requestID');
        $famedit=$this->input->post('famedit');
        // $roundTrip = $this->input->post('roundTripedit');
        $from_destinationEdit=$this->input->post('from_destinationEdit');

        $data = array(
            'relationID' => $famedit,
            // 'tripType'=>$roundTrip,
            'fromDestionationID'=>$from_destinationEdit,
            'empID'=>$this->input->post('empName'),
            'StartDate' => $this->input->post('start_date'),
            'EndDate' => $this->input->post('end_date'),
            // 'countryID' => $this->input->post('trip_country'),
            'destinationID' => $this->input->post('city'),
            'currencyID' => $this->input->post('currency_code'),
            'amount' => $this->input->post('travel_advance'),
            'comments' => $this->input->post('trip_reason'),
            'modifiedPCID' => $this->common_data['current_pc'],
            'modifiedUserID' => $this->common_data['current_userID'],
            'modifiedUserName' => $this->common_data['current_user'],
            'modifiedDateTime' => $this->common_data['current_date']
        );

        $this->db->where('detailID', $detailID);
        $this->db->where('travelRequestID', $requestID);
        $result = $this->db->update('srp_erp_travel_request_details', $data);

        if ($result) {
            return array('success', 'Travel request: Updated Successfully.');
        } 
    }
    
    public function get_travel_request_details($id)
    {
        $data = array();
    
        $sql = "SELECT
                tr.id AS id,
                tr.requestDate AS requestDate,
                tr.descriptions,
                tr.typeOfTravel,
                tr.haveVisa,
                tr.bookingType,
                tr.travelRequestCode,
                tr.loaclMobileNumber AS loaclMobileNumber,
                tr.seatPrefernce,
                tr.mealPreference,
                tr.frequantFlyNo,
                tr.classType,
                tt.tripType AS tripType,
                frm.relationship AS relationName,
                emp.Ename2 AS employeeName,
                emp.EDOB,
                emp.Ename4 AS lastname,
                emp.Ename3 As middeleName,
                emp2.Ename2 AS employeeName2,
                fam.name,
                trd.detailID,
                trd.tripType AS roundTrip,
                trd.relationID,
                cm.CountryDes AS countryName,
                adm.City AS cityName,
                trd.startDate,
                trd.endDate,
                cur.CurrencyCode,
                trd.amount,
                trd.departureSector,
                trd.departureTime,
                trd.returnSector,
                trd.returnTime,
                trd.comments,
                tr.requestType,
                tr.approvedYN,
                tr.approvedbyEmpName,
                tr.approvedDate,
                title.TitleDescription AS empTitle,
                desig.DesDescription,
                emp.EmpSecondaryCode,
                emp.initial,
                dept.DepartmentDes,
                project.job_name,
                ctry.countryShortCode,
                compny.company_code,
                fam.DOB,
                po.purchaseOrderCode,
                emp.EpMobile,
                (SELECT adm_inner.City 
                FROM srp_erp_airportdestinationmaster AS adm_inner
                WHERE adm_inner.destinationID = trd.fromDestionationID) AS fromDestinationCity
            FROM srp_erp_travel_request tr
            LEFT JOIN srp_erp_travel_type tt ON tr.tripTypeID = tt.id
            LEFT JOIN srp_designation desig ON tr.desingationID = desig.DesignationID
            LEFT JOIN srp_empdepartments empdep ON tr.empID = empdep.EmpID
            LEFT JOIN srp_erp_jobsmaster project ON tr.projectID = project.id 
            LEFT JOIN srp_departmentmaster dept ON empdep.DepartmentMasterID = dept.DepartmentMasterID
            LEFT JOIN srp_employeesdetails emp ON tr.empID = emp.EIdNo
            LEFT JOIN srp_countrymaster ctry ON emp.countryID = ctry.countryID 
            LEFT JOIN srp_erp_company compny ON compny.company_id = tr.companyID 
            LEFT JOIN srp_titlemaster title ON title.TitleID = emp.EmpTitleId
            LEFT JOIN srp_erp_travel_request_details trd ON tr.id = trd.travelRequestID
            LEFT JOIN srp_erp_countrymaster cm ON trd.countryID = cm.CountryID
            LEFT JOIN srp_erp_airportdestinationmaster adm ON trd.destinationID = adm.destinationID
            LEFT JOIN srp_erp_currencymaster cur ON trd.currencyID = cur.currencyID
            LEFT JOIN srp_employeesdetails emp2 ON trd.empID = emp2.EIdNo
            LEFT JOIN srp_erp_family_details fam ON trd.relationID = fam.empfamilydetailsID
            LEFT JOIN srp_erp_family_relationship frm ON fam.relationship = frm.relationshipID
            LEFT JOIN srp_erp_purchaseordermaster po ON po.linkedDocumentmasterID = tr.id AND po.linkeddocumentID = 'TRQ'
            WHERE tr.id = ?";

    
        $query = $this->db->query($sql, array($id));
        if ($query && $query->num_rows() > 0) {
            $results = $query->result_array();
    
            $data['detail'] = array(
                'id' => $results[0]['id'],
                'relationName' => $results[0]['relationName'],
                'fromDestinationCity' => $results[0]['fromDestinationCity'],
                'roundTrip' => $results[0]['roundTrip'],
                'requestDate' => $results[0]['requestDate'],
                'tripType' => $results[0]['tripType'],
                'employeeName' => $results[0]['employeeName'],
                'approvedYN' => $results[0]['approvedYN'],
                'approvedbyEmpName' => $results[0]['approvedbyEmpName'],
                'DOB'=>$results[0]['DOB'],

                'requestType'=>$results[0]['requestType'],
                'loaclMobileNumber'=>$results[0]['loaclMobileNumber'],
                'approvedDate' => $results[0]['approvedDate'],
                'classType' => $results[0]['classType'],
                'seatPrefernce' => $results[0]['seatPrefernce'],
                'mealPreference' => $results[0]['mealPreference'],
                'lastname' => $results[0]['lastname'],
                'EDOB' => $results[0]['EDOB'],
                'empTitle' => $results[0]['empTitle'],
                'EmpSecondaryCode' => $results[0]['EmpSecondaryCode'],
                'descriptions' => $results[0]['descriptions'],
                'DesDescription' => $results[0]['DesDescription'],
                'DepartmentDes' => $results[0]['DepartmentDes'],
                'middeleName' => $results[0]['middeleName'],
                'job_name' => $results[0]['job_name'],
                'countryShortCode' => $results[0]['countryShortCode'],
                'initial' => $results[0]['initial'],
                'travelRequestCode' => $results[0]['travelRequestCode'],
                'company_code' => $results[0]['company_code'],
                'EpMobile' => $results[0]['EpMobile'],
                'departureSector' => $results[0]['departureSector'],
                'departureTime' => $results[0]['departureTime'],
                'returnSector' => $results[0]['returnSector'],
                'returnTime' => $results[0]['returnTime'],
                'typeOfTravel' => $results[0]['typeOfTravel'],
                'haveVisa' => $results[0]['haveVisa'],
                'bookingType' => $results[0]['bookingType'],
                'purchaseOrderCode' => $results[0]['purchaseOrderCode'],
                'frequantFlyNo' => $results[0]['frequantFlyNo']

            );
    
            $data['details'] = array();
            foreach ($results as $result) {
                $data['details'][] = array(
                    'detailID' => $result['detailID'],
                    'relationID' => $result['relationID'],
                    'name' => $result['name'],
                    'countryName' => $result['countryName'],
                    'cityName' => $result['cityName'],
                    'startDate' => $result['startDate'],
                    'endDate' => $result['endDate'],
                    'CurrencyCode' => $result['CurrencyCode'],
                    'amount' => $result['amount'],
                    'comments' => $result['comments'],
                    'roundTrip' => $result['roundTrip'],
                    'relationName' => $result['relationName'],

                    'requestType'=>$result['requestType'],
                    'fromDestinationCity' => $result['fromDestinationCity'],
                    'DOB' => $result['DOB'],
                    'loaclMobileNumber' => $result['loaclMobileNumber'],
                    'mealPreference' => $result['mealPreference'],
                    'employeeName2' => $result['employeeName2'],
                    'classType' => $result['classType'],
                    'seatPrefernce' => $result['seatPrefernce'],
                    'lastname' => $result['lastname'],
                    'EDOB' => $result['EDOB'],
                    'empTitle' => $result['empTitle'],
                    'EmpSecondaryCode' => $result['EmpSecondaryCode'],
                    'descriptions' => $result['descriptions'],
                    'DesDescription' => $result['DesDescription'],
                    'DepartmentDes' => $result['DepartmentDes'],
                    'middeleName' => $result['middeleName'],
                    'job_name' => $result['job_name'],
                    'countryShortCode' => $result['countryShortCode'],
                    'initial' => $result['initial'],
                    'travelRequestCode' => $result['travelRequestCode'],
                    'requestDate' => $result['requestDate'],
                    'company_code' => $result['company_code'],
                    'EpMobile' => $result['EpMobile'],
                    'departureSector' => $result['departureSector'],
                    'departureTime' => $result['departureTime'],
                    'returnSector' => $result['returnSector'],
                    'returnTime' => $result['returnTime'],
                    'typeOfTravel' => $result['typeOfTravel'],
                    'haveVisa' => $result['haveVisa'],
                    'bookingType' => $result['bookingType'],
                    'purchaseOrderCode' => $result['purchaseOrderCode'],
                    'approvedbyEmpName' => $result['approvedbyEmpName'],
                    'frequantFlyNo' => $result['frequantFlyNo']

                );
            }

            $data['details'] = $this->removeDuplicates($data['details'], 'detailID');
    
        } else {
            $data['detail'] = array();
            $data['details'] = array();
        }
    
        return $data;
    }
    
    private function removeDuplicates($array, $key) {
        $temp_array = [];
        $key_array = [];
    
        foreach ($array as $val) {
            if (!in_array($val[$key], $key_array)) {
                $key_array[] = $val[$key];
                $temp_array[] = $val;
            }
        }
        return $temp_array;
    }
    
    function travel_request_confirmation()
    {
        $this->db->trans_start(); 
        $requestid = trim($this->input->post('requestid') ?? '');
        $this->db->select('*');
        $this->db->where('id', trim($this->input->post('requestid') ?? ''));
        $this->db->from('srp_erp_travel_request');
        $ec_data = $this->db->get()->row_array();

        $this->db->select('detailID');
        $this->db->where('travelRequestID', trim($this->input->post('requestid') ?? ''));
        $this->db->from('srp_erp_travel_request_details');
        $detail = $this->db->get()->row_array();

        /*if ($approvals_status == 1) {*/
        if($detail){
            $validate_code = validate_code_duplication($ec_data['travelRequestCode'], 'travelRequestCode', $requestid,'id', 'srp_erp_travel_request');
            if(!empty($validate_code)) {
                return array('e', 'The document Code Already Exist.(' . $validate_code . ')');
            }
           
            $this->load->library('approvals');
            $isAutoApproval = get_document_auto_approval('TRQ');
            $documentName = 'Travel Request';
            $tableName = 'srp_erp_travel_request';
            $documentCode = $ec_data['travelRequestCode'];
            $createdDate = $ec_data['createdDateTime'];
            $masterID = $this->input->post('requestid');

            if ($isAutoApproval == 0) { // If auto approval

                $this->approvals->auto_approve($masterID, $tableName, 'id', 'TRQ', $documentCode, $createdDate);
                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return ['s', 'Approved successfully'];
                } else {
                    $this->db->trans_rollback();
                    return ['e', 'Error in approval process'];
                }
            }

            if($ec_data['requestType']=="Trip Request"){
                $travelType=1;
            }
            else if($ec_data['requestType']=="Travel Request"){
                $travelType=2;
            }else{
                $travelType=null;
            }

            $approvals_status = $this->approvals->CreateApproval('TRQ', $masterID, $documentCode, $documentName, $tableName, 'id', 0, $createdDate,null, null, null, null, $travelType);

            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                return ['e', 'Something went wrong!, In approval create process'];
            }

            if ($approvals_status == 3) {
                $this->db->trans_rollback();
                return ['w', 'There is no user exists to perform <b>Travel Request approval</b> for this company.'];
            } elseif ($approvals_status == 1) {

                if ($this->db->trans_status() === false) {
                    $this->db->trans_rollback();
                    return ['e', 'Something went wrong!, In approval create process'];
                }
                $this->db->trans_commit();
                return ['s', 'Approval created : '. $documentCode];
            } else {
                $this->db->trans_rollback();
                return ['w', 'some thing went wrong', $approvals_status];
            }

            
            $firbase_status = null;

            if($firbase_status){
                 /*** Firebase Mobile Notification*/
                $this->db->select('managerID');
                $this->db->where('empID', trim($ec_data['requestedByEmpID'] ?? ''));
                $this->db->where('active', 1);
                $this->db->from('srp_erp_employeemanagers');
                $managerid = $this->db->get()->row_array();

                $token_android = firebaseToken($managerid["managerID"], 'android');
                $token_ios = firebaseToken($managerid["managerID"], 'apple');

                $firebaseBody = $ec_data['requestedByEmpID'] . " has applied for a Travel Request.";

                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Travel Request", $firebaseBody, $token_android, 2, $ec_data['travelRequestCode'], "TRQ", $requestid, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("New Travel Request", $firebaseBody, $token_ios, 2, $ec_data['travelRequestCode'], "TRQ", $requestid, "apple");
                }
            }

            return array('s','Approvals Created Successfully');

        }else{
            return array('e','No records found to confirm this document');
        }
    }


    public function fetch_travel_request_confirm_table()
    {
        $request = $_POST;
    
        $columns = [
            'tr.id',
            'tr.travelRequestCode',
            'emp.Ename2 AS requestedByEmpName',
            'des.DesDescription AS designation',
            'tr.requestType',
            'tr.confirmedYN',
            'tr.approvedYN'
        ];
    
        $this->db->select($columns);
        $this->db->from('srp_erp_travel_request AS tr');
        $this->db->join('srp_erp_travel_type', 'tr.tripTypeID = srp_erp_travel_type.id', 'left');
        $this->db->join('srp_employeesdetails AS emp', 'tr.empID = emp.EIdNo', 'left');
        $this->db->join('srp_designation AS des', 'tr.desingationID = des.DesignationID', 'left');
    
        if (!empty($request['search']['value'])) {
            $search_value = $request['search']['value'];
            $this->db->group_start();
            $this->db->like('tr.travelRequestCode', $search_value);
            $this->db->or_like('emp.Ename2', $search_value);
            $this->db->or_like('des.DesDescription', $search_value);
            $this->db->or_like('srp_erp_travel_type.tripType', $search_value);
            $this->db->group_end();
        }
    
        if ($request['length'] != -1) {
            $this->db->limit($request['length'], $request['start']);
        }
    
        if (isset($request['order'])) {
            $order = $request['order'][0];
            $column_index = $order['column'];
            $column_name = $columns[$column_index];
            $order_dir = $order['dir'];
            $this->db->order_by($column_name, $order_dir);
        } else {
            $this->db->order_by('tr.travelRequestCode', 'DESC');
        }

        $query = $this->db->get();
        $data = $query->result_array();
    

        foreach ($data as &$row) {

            if ($row['confirmedYN'] == 0) {

                $row['confirmedYN'] = '<center><span class="label label-danger" style="background-color: rgba(255, 72, 49, 0.96); color: #FFFFFF; font-size: 11px;">&nbsp;</span></center>';

                $row['action'] = 
                        '<span class="pull-right">' .
                        '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a href="#" onclick="fetchPage(\'/system/travel/travel_request_form\', \'' . $row['id'] . '\', \'' . $this->lang->line('common_edit_travel_request') . '\', \'TRQ\'); return false;">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-pencil" data-original-title="Edit"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" href="' . site_url('Employee/load_travel_request_conformation/') . '/' . $row['id']  . '" >
                            <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a onclick="delete_item(' . $row['id'] . ', \'Travel Request\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-trash" style="color:rgb(209, 91, 71);" data-original-title="Delete"></span></a>' .
                        '</span>';

            } else {

                $row['confirmedYN'] = '<center><span class="label label-success" style="background-color: #8bc34a; color: #FFFFFF; font-size: 11px;">&nbsp;</span></center>';

                if ($row['approvedYN'] == 1) {
                    $row['action'] = 
                            '<span class="pull-right">' .
                            '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                                <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                            '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                                <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                            '<a target="_blank" href="' . site_url('Employee/load_travel_request_conformation/') . '/' . $row['id']  . '" >
                                <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;' .
                        '</span>';
                } else {
                    $row['action'] = 
                            '<span class="pull-right">' .
                             '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                                <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                            '<a onclick="reviseClaim('. $row['id'] .')">
                                <span title="" rel="tooltip" class="glyphicon glyphicon-repeat" style="color:rgb(209, 91, 71);" data-original-title="Refer Back"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                            '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                                <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                            '<a target="_blank" href="' . site_url('Employee/load_travel_request_conformation/') . '/' . $row['id']  . '" >
                                <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;' .
                        '</span>';
                }
            }
            
              $row['approvedYN'] = ($row['approvedYN'] == 0)
            ? '<center><a onclick="fetch_all_approval_users_modal(\'TRQ\', \'' . $row['id'] . '\')" class="label label-danger"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a></center>'
            : '<center><a onclick="fetch_approval_user_modal(\'TRQ\', \'' . $row['id'] . '\')" class="label label-success"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a></center>';    
        }
    
        $total_records = $this->db->count_all('srp_erp_travel_request');
    
        $this->db->reset_query();
        $this->db->select('COUNT(*) AS count');
        $this->db->from('srp_erp_travel_request AS tr');
        $this->db->join('srp_erp_travel_type', 'tr.tripTypeID = srp_erp_travel_type.id', 'left');
        $this->db->join('srp_employeesdetails AS emp', 'tr.empID = emp.EIdNo', 'left');
        $this->db->join('srp_designation AS des', 'tr.desingationID = des.DesignationID', 'left');
    
        if (!empty($request['search']['value'])) {
            $search_value = $request['search']['value'];
            $this->db->group_start();
            $this->db->like('tr.travelRequestCode', $search_value);
            $this->db->or_like('emp.Ename2', $search_value);
            $this->db->or_like('des.DesDescription', $search_value);
            $this->db->or_like('srp_erp_travel_type.tripType', $search_value);
            $this->db->group_end();
        }
    
        $filtered_query = $this->db->get();
        $filtered_count = $filtered_query->row()->count;
    
        $response = [
            "draw" => intval($request['draw']),
            "recordsTotal" => intval($total_records),
            "recordsFiltered" => intval($filtered_count),
            "data" => $data
        ];
    
        return $response;
    }

    public function fetch_travel_request_confirm_table_hr()
    {
        $request = $_POST;
    
        $columns = [
            'tr.id',
            'tr.travelRequestCode',
            'emp.Ename2 AS requestedByEmpName',
            'des.DesDescription AS designation',
            'tr.requestType',
            'tr.confirmedYN',
            'tr.approvedYN'
        ];
    
        $this->db->select($columns);
        $this->db->from('srp_erp_travel_request AS tr');
        $this->db->join('srp_erp_travel_type', 'tr.tripTypeID = srp_erp_travel_type.id', 'left');
        $this->db->join('srp_employeesdetails AS emp', 'tr.empID = emp.EIdNo', 'left');
        $this->db->join('srp_designation AS des', 'tr.desingationID = des.DesignationID', 'left');
    
        if (!empty($request['search']['value'])) {
            $search_value = $request['search']['value'];
            $this->db->group_start();
            $this->db->like('tr.travelRequestCode', $search_value);
            $this->db->or_like('emp.Ename2', $search_value);
            $this->db->or_like('des.DesDescription', $search_value);
            $this->db->or_like('srp_erp_travel_type.tripType', $search_value);
            $this->db->group_end();
        }
    
        if ($request['length'] != -1) {
            $this->db->limit($request['length'], $request['start']);
        }
    
        if (isset($request['order'])) {
            $order = $request['order'][0];
            $column_index = $order['column'];
            $column_name = $columns[$column_index];
            $order_dir = $order['dir'];
            $this->db->order_by($column_name, $order_dir);
        } else {
            $this->db->order_by('tr.travelRequestCode', 'DESC');
        }

        $query = $this->db->get();
        $data = $query->result_array();
    

        foreach ($data as &$row) {


            if ($row['confirmedYN'] == 0) {

                $row['confirmedYN'] = '<center><span class="label label-danger" style="background-color: rgba(255, 72, 49, 0.96); color: #FFFFFF; font-size: 11px;">&nbsp;</span></center>';

                $row['action'] = 
                        '<span class="pull-right">' .
                        '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a href="#" onclick="fetchPage(\'/system/hrm/hrms_travel_request_form\', \'' . $row['id'] . '\', \'' . $this->lang->line('common_edit_travel_request') . '\', \'TRQ\'); return false;">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-pencil" data-original-title="Edit"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" href="' . site_url('Employee/load_travel_request_conformation/') . '/' . $row['id']  . '" >
                            <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a onclick="delete_item(' . $row['id'] . ', \'Travel Request\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-trash" style="color:rgb(209, 91, 71);" data-original-title="Delete"></span></a>' .
                        '</span>';

            }else if ($row['approvedYN'] == 1) {
                $row['confirmedYN'] = '<center><span class="label label-success" style="background-color: #8bc34a; color: #FFFFFF; font-size: 11px;">&nbsp;</span></center>';

                $id=$row['id'];
                $this->db->select('purchaseOrderID');
                $this->db->from('srp_erp_purchaseordermaster');
                $this->db->Where('linkedDocumentmasterID',$id);
                $query= $this->db->get();

                $this->db->select('purchaseRequestID');
                $this->db->from('srp_erp_purchaserequestmaster');
                $this->db->Where('linkedDocumentmasterID',$id);
                $prq= $this->db->get();

                $this->db->select('expenseClaimMasterAutoID');
                $this->db->from('srp_erp_expenseclaimmaster');
                $this->db->Where('linkedDocumentmasterID',$id);
                $expense= $this->db->get();

                if($query->num_rows() > 0 || $expense->num_rows() > 0 || $prq->num_rows() > 0){
                    $row['action'] = 
                        '<span class="pull-right">' .
                         '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" href="' . site_url('Employee/load_travel_request_conformation/') . '/' . $row['id']  . '" >
                            <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;' .
                    '</span>';
                }
                else{
                    $row['action'] = 
                    '<span class="pull-right">' .
                     '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                    '<a onclick="generatePOExpense(\'' . $row['id'] . '\')"><span style="color:rgb(209, 91, 71);" title="Generate PO / PR / Expense Claim" rel="tooltip" class="glyphicon glyphicon-plus-sign"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                    '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                        <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                    '<a target="_blank" href="/work/spur/index.php/Employee/load_travel_request_conformation/' . $row['id'] . '">
                        <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;' .
                '</span>';
                }
               
            }
            else {

                $row['confirmedYN'] = '<center><span class="label label-success" style="background-color: #8bc34a; color: #FFFFFF; font-size: 11px;">&nbsp;</span></center>';

                $row['action'] = 
                        '<span class="pull-right">' .
                         '<a onclick="fetchAttachments(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-paperclip" data-original-title="Attachment"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a onclick="reviseClaim('. $row['id'] .')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-repeat" style="color:rgb(209, 91, 71);" data-original-title="Refer Back"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" onclick="view_close(\'' . $row['id'] . '\')">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-eye-open" data-original-title="View"></span></a>&nbsp;&nbsp;| &nbsp;&nbsp;' .
                        '<a target="_blank" href="/work/spur/index.php/Employee/load_travel_request_conformation/' . $row['id'] . '">
                            <span title="" rel="tooltip" class="glyphicon glyphicon-print" data-original-title="Print"></span></a>&nbsp;&nbsp;' .
                    '</span>';
            }
            $row['approvedYN'] = ($row['approvedYN'] == 0)
            ? '<center><a onclick="fetch_all_approval_users_modal(\'TRQ\', \'' . $row['id'] . '\')" class="label label-danger"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a></center>'
            : '<center><a onclick="fetch_approval_user_modal(\'TRQ\', \'' . $row['id'] . '\')" class="label label-success"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a></center>';
        
   
        }
    
        $total_records = $this->db->count_all('srp_erp_travel_request');
    
        $this->db->reset_query();
        $this->db->select('COUNT(*) AS count');
        $this->db->from('srp_erp_travel_request AS tr');
        $this->db->join('srp_erp_travel_type', 'tr.tripTypeID = srp_erp_travel_type.id', 'left');
        $this->db->join('srp_employeesdetails AS emp', 'tr.empID = emp.EIdNo', 'left');
        $this->db->join('srp_designation AS des', 'tr.desingationID = des.DesignationID', 'left');
    
        if (!empty($request['search']['value'])) {
            $search_value = $request['search']['value'];
            $this->db->group_start();
            $this->db->like('tr.travelRequestCode', $search_value);
            $this->db->or_like('emp.Ename2', $search_value);
            $this->db->or_like('des.DesDescription', $search_value);
            $this->db->or_like('srp_erp_travel_type.tripType', $search_value);
            $this->db->group_end();
        }
    
        $filtered_query = $this->db->get();
        $filtered_count = $filtered_query->row()->count;
    
        $response = [
            "draw" => intval($request['draw']),
            "recordsTotal" => intval($total_records),
            "recordsFiltered" => intval($filtered_count),
            "data" => $data
        ];
    
        return $response;
    }
    
    public function fetch_approval_detail() {

        $documentID = $this->input->post('documentID');
        $document = $this->input->post('document');
        $id = $this->input->post('id');
        $this->load->database();

        $this->db->select('
            tr.travelRequestCode,
            tr.requestDate,
            tr.confirmedDate,
            tr.approvedYN,
            tr.approvedDate,
            tr.confirmedByEmpID,
            emp.Ename2 AS requestedByEmpName
        ');
        $this->db->from('srp_erp_travel_request AS tr');
        $this->db->join('srp_employeesdetails AS emp', 'tr.empID = emp.EIdNo', 'left');
        $this->db->where('tr.id', $id);
    
        $query = $this->db->get();
        $response = $query->row_array();
    
        echo json_encode($response);
    }
    
    
    function load_travel_request_header()
    {
        $convertFormat = convert_date_format_sql();
        $this->db->select('*');
        $this->db->where('id', trim($this->input->post('requestid') ?? ''));
        $this->db->from('srp_erp_travel_request');
        return $this->db->get()->row_array();
    }
    
    
    
    
    
    
/**SMSD : create */
/** suitable to call this function when "reffer back in approval" part not in "reffer back confirmation" part */
    /** change the content relevant to the WFH Applcation */
   /* function leave_notify($id, $on){
        $list = $this->get_notify_list('LA', $id);
        if(empty($list)){
            return true;
        }
        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID 
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$id}")->row_array();
        $body = '';
        $startDate = date('Y-m-d', strtotime($leave['startDate']));
        $endDate = date('Y-m-d', strtotime($leave['endDate']));
        switch($on){
            case 'confirm':
                $body = "{$leave['Ename2']} - {$leave['empCode']} has applied a leave [ {$leave['documentCode']} ] ";
                $body .= ($startDate != $endDate)? "from {$startDate} to {$endDate}": "on {$startDate}";
            break;

            case 'approval':
                $body = "Leave Application [ {$leave['documentCode']} ] of {$leave['Ename2']} - {$leave['empCode']} is approved.";
            break;

            case 'refer-back':
                $body = "Leave Application [ {$leave['documentCode']} ] of {$leave['Ename2']} - {$leave['empCode']} is referred back.";
            break;
        }

        $this->load->library('firebase_notification');
        $subject = 'Leave Notification';
        foreach ($list as $notify_emp){
            $param["empName"] = $notify_emp["Ename2"];
            $param["body"] = $body;

            $empID = $notify_emp["empID"];
            $docCode = $leave['documentCode'];

            $mailData = [
                'approvalEmpID' => $empID, 'documentCode' => $docCode,
                'toEmail' => $notify_emp["EEmail"], 'subject' => $subject, 'param' => $param
            ];

            send_approvalEmail($mailData);

            // Firebase Mobile Notification
            $token_android = firebaseToken($empID, 'android');
            $token_ios = firebaseToken($empID, 'apple');

            if(!empty($token_android)) {
                $this->firebase_notification->sendFirebasePushNotification($subject, $body, $token_android, 1, $docCode, "LA", $id, "android");
            }
            if(!empty($token_ios)) {
                $this->firebase_notification->sendFirebasePushNotification($subject, $body, $token_ios, 1, $docCode, "LA", $id, "apple");
            }
        }
    }*/

    public function save_description()
    {
        $this->db->trans_start();
        $structures = $this->input->post('structures');
        $empID = $this->input->post('empID');

        if (!empty($structures)) {
            // Iterate through each structure object in the array
            foreach ($structures as $structure) {
                // Access ID and structure value from the structure object
                $reportingStructureID = $structure['reportingStructureID'];
                $reportingStructureDetailID = $structure['reportingStructureDetailID'];

                if(empty($reportingStructureDetailID)){
                    $data['reportingStructureDetailID'] = null;
                }else{
                    $data['reportingStructureDetailID'] = $reportingStructureDetailID; 
                }

                $this->db->select('id');
                $this->db->where('companyID', current_companyID());
                $this->db->where('empID', trim($this->input->post('empID') ?? ''));
                $this->db->where('reportingStructureID', $reportingStructureID);
                //$this->db->where('reportingStructureDetailID', trim($this->input->post('structures') ?? ''));
                $this->db->from('srp_erp_employee_reporting_structure');
                $isIn = $this->db->get()->row('id');

                if(!empty($isIn))
                {
                    $data['modifiedPCID'] = $this->common_data['current_pc'];
                    $data['modifiedUserID'] = $this->common_data['current_userID'];
                    $data['modifiedUserName'] = $this->common_data['current_user'];
                    $data['modifiedDateTime'] = $this->common_data['current_date'];

                    $this->db->where('id', $isIn);
                    $this->db->update('srp_erp_employee_reporting_structure', $data);
                }
                else
                {
                    $data['reportingStructureID'] = $reportingStructureID;
                    $data['empID'] = $empID;

                    $data['companyID'] = current_companyID();
                    $data['createdUserGroup'] = $this->common_data['user_group'];
                    $data['createdPCID'] = $this->common_data['current_pc'];
                    $data['createdUserID'] = $this->common_data['current_userID'];
                    $data['createdDateTime'] = $this->common_data['current_date'];
                    $data['createdUserName'] = $this->common_data['current_user'];
                    $data['timestamp'] = current_date(true);

                    $this->db->insert('srp_erp_employee_reporting_structure', $data);
                    //$last_id = $this->db->insert_id();

                }
            }

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('error' => 1, 'message' => 'Failed to Save !');
            } else {
                $this->db->trans_commit();
                return array('error' => 0, 'message' => 'saved Successfully !');
            }

        } 
        else
        {
            return array('error' => 1, 'message' => 'Error in Save !');
        }
    }

     function load_relevant_job_details(){

        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('date');

        $detail = $this->db->query("SELECT
        crew.name,crew.designation,activity.description,activity.dateFrom,activity.dateTo,master.job_code,master.job_name,master.confirmed
        FROM
            `srp_erp_job_shift_crewdetail` AS crew 
        LEFT JOIN srp_erp_job_activitydetail as activity ON crew.job_id = activity.job_id AND crew.shift_id = activity.shift_id
        LEFT JOIN srp_erp_jobsmaster as master ON crew.job_id = master.id
        WHERE
            crew.empID = '{$empID}' AND '{$attendanceDate}' >= DATE(activity.dateFrom) AND '{$attendanceDate}' <= DATE(activity.dateTo)")->result_array();
      
        return $detail;

    }

    
    function load_manufature_job(){

        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('date');
        $companyID = current_companyID();

        $detail = $this->db->query("SELECT
                job.*
            FROM
                `srp_erp_mfq_job` AS job 
            LEFT JOIN srp_erp_mfq_crews as crews ON crews.EIdNo = {$empID} AND crews.Erp_companyID = {$companyID}
            LEFT JOIN srp_erp_mfq_workprocesscrew as workcrews ON crews.crewID = workcrews.crewID AND workcrews.companyID = {$companyID} AND job.workProcessID = workcrews.workProcessID 
            WHERE
                job.companyID = '{$companyID}' AND job.closedYN != '1' AND job.startDate <= '{$attendanceDate}' GROUP BY job.workProcessID")->result_array();

        //AND workcrews.crewID IS NOT NULL

        $base_arr = array();
        foreach($detail as  $val){
            $base_arr[$val['workProcessID']] = $val['documentCode'].' - '. $val['description'];
        }
      
        return $base_arr;

    }


    function update_shift_details_emp(){

        $shiftID = $this->input->post('shiftID');
        $attendanceDate = $this->input->post('attendanceDate');
        $empID = $this->input->post('empID');

        // $shift_details =  
        // AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
        $details = $this->db->query("
            SELECT * 
            FROM srp_erp_pay_shiftmaster as master
            LEFT JOIN srp_erp_pay_shiftdetails as details ON master.shiftID = details.shiftID
            WHERE master.shiftID = '{$shiftID}' AND details.weekDayNo = WEEKDAY('$attendanceDate')
        ")->row_array();

        if($details){

            $data = array();
            $data['shiftID'] = $shiftID;
            $data['onDuty'] = $details['onDutyTime'];
            $data['offDuty'] = $details['offDutyTime'];

            $res = $this->db->where('empID',$empID)->where('attendanceDate',$attendanceDate)->update('srp_erp_pay_empattendancereview',$data);

        }

        return True;

    }

    function add_mfqjob_employee(){
        
        $empID = $this->input->post('empID');
        $manufatureID = $this->input->post('manufatureID');
        $attendanceDate = $this->input->post('attendanceDate');
        $companyID = current_companyID();

        //add 
        $updated = array();
        foreach($manufatureID as $mvalue){

            $data = array();

            //check ex
            $ex_record = $this->db->where('jobID',$mvalue)->where('empID',$empID)->where('attendanceDate',$attendanceDate)->where('companyID',$companyID)->from('srp_erp_empmfqjobattendance')->get()->row_array();

            // if($ex_record){
            //     $this->session->set_flashdata('w', 'Already added Job.');
            //     continue;
            // }

            //get mfq_job
            $get_mfq_job = $this->db->where('workProcessID',$mvalue)->where('companyID',$companyID)->from('srp_erp_mfq_job')->get()->row_array();

            $data['attendanceDate'] = $attendanceDate;
            $data['empID'] = $empID;
            $data['companyID'] = $companyID;
            $data['jobDescription'] =  $get_mfq_job['description'];
            $data['jobCode'] = $get_mfq_job['documentCode'];
            $data['jobID'] = $get_mfq_job['workProcessID'];
            $data['companyID'] = $companyID;
            $data['createdUserGroup'] = $this->common_data['user_group'];
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['timestamp'] = current_date(true);

            $this->db->insert('srp_erp_empmfqjobattendance',$data);

            $updated[] = $empID;
        }

        if(count($updated) > 0){
            $this->session->set_flashdata('s', 'Added Successfully.');
        }
       
        return True;

       
    }

    function load_manufature_job_added(){

        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('date');
        $companyID = current_companyID();

        $jobs_added = $this->db->where('attendanceDate',$attendanceDate)->where('empID',$empID)->from('srp_erp_empmfqjobattendance')->get()->result_array();

        foreach($jobs_added as $key => $job_val){

           $labour_details = $this->db->select('overhead.overHeadID,overhead.overHeadCode,overhead.description')->where('workProcessID',$job_val['jobID'])->from('srp_erp_mfq_jc_labourtask as task')->join('srp_erp_mfq_overhead as overhead','task.labourTask = overhead.overHeadID','left')->get()->result_array();
        
           $jobs_added[$key]['labour_tasks'] = $labour_details;

        }

        return $jobs_added;

    }

    function update_labour_taskID()
    {
        $id = $this->input->post('id');
        $labour = $this->input->post('labour');

        $data = array();
        $data['labourTaskID'] = $labour;

        $this->db->where('id',$id)->update('srp_erp_empmfqjobattendance',$data);

        $this->session->set_flashdata('s', 'Updated Successfully.');
        return true;

    }
    function change_job_minutes_hours(){

        $value = $this->input->post('value');
        $id = $this->input->post('id');
        $type = $this->input->post('type');
        $companyID = current_companyID();

        $data = array();
        $ex_records =   $this->db->where('id',$id)->from('srp_erp_empmfqjobattendance')->get()->row_array();

        if($type == 'hours'){
            $data['worked_hour'] = $value;
        }elseif($type == 'typeOfWork'){
            $data['typeOfWork'] = $value;
        }else{
            $data['worked_minute'] = $value;
        }

        if($ex_records){
            $worked_hour = $ex_records['worked_hour'];
            $worked_minutes = $ex_records['worked_hour'];

            $empID = $ex_records['empID'];
            $attendanceDate = $ex_records['attendanceDate'];

            $ex_jobrecords =   $this->db->where('empID',$empID)->where('attendanceDate',$attendanceDate)->where('id !=',$id)->from('srp_erp_empmfqjobattendance')->get()->result_array();

            $total_hours = 0;
            foreach($ex_jobrecords as $jobrecords){
                $total_hours += ($jobrecords['worked_hour'].'.'.$jobrecords['worked_minute']);
            }

            if($type == 'hours'){
                $worked_hour = $value;
            }else if($type == 'minutes'){
                $worked_minutes = $value;
            }

            $presentValue = $worked_hour.'.'.$worked_minutes;


            if(($presentValue + $total_hours) > 8){
                $this->session->set_flashdata('e', 'Exceeds the working hours.');
                return true;
            }

        }


        //update record
        $this->db->where('id',$id)->update('srp_erp_empmfqjobattendance',$data);

        $this->session->set_flashdata('s', 'Updated Successfully.');
        return true;

    }

    function remove_mfq_job_added(){

        $id = $this->input->post('id');

        $this->db->where('id',$id)->delete('srp_erp_empmfqjobattendance');

        $this->session->set_flashdata('s', 'Successfully Deleted.');
        return true;
        
    }

    /**save personal action details */
    function save_personal_action_details($id) {
        $this->db->trans_start(); // Start transaction
        $companyID = current_companyID();
    
        // Ensure $id is properly sanitized
        // Example using CI's Active Record:
        $id = $this->db->escape_str($id);
    
        $details = $this->db->query("
            SELECT * 
            FROM srp_erp_personal_action_details
            WHERE id = ? AND companyID = ?
        ", array($id, $companyID))->result_array();
    
        foreach ($details as $row) {
            foreach ($_POST as $key => $value) {
                if ($row['fieldType'] == $key) {
                    $data = array(
                        'NewValue' => $value
                    );
    
                    $this->db->where('fieldType', $key);
                    $this->db->where('id', $id);
    
                    $this->db->update('srp_erp_personal_action_details', $data);
                }
            }
        }
    
        $this->db->trans_complete();
    
        if ($this->db->trans_status() === FALSE) {
            return array('status' => false, 'message' => 'An error occurred while updating data.');
        } else {
            return array('status' => true, 'message' => 'updated successfully.');
        }
    }
    
    


    


/**save personal action header */
function save_personal_action_header(){
    $this->db->trans_start();
    $companyID = current_companyID();
    $id = trim($this->input->post('id') ?? '');
    $actionType = $this->input->post('actionType');
    $empName = $this->input->post('empName');
    $documentDate = $this->input->post('actionDate');
    $remarks = $this->input->post('remarks');
    
    $date_format_policy = date_format_policy();
    $formated_documentDate = input_format_date($documentDate, $date_format_policy);

    if(isset($remarks) && !empty($id)){
        $data['Remarks'] = $remarks;
        $data['modifiedPCID'] = $this->common_data['current_pc'];
        $data['modifiedUserID'] = $this->common_data['current_userID'];
        $data['modifiedUserName'] = $this->common_data['current_user'];
        $data['modifiedDateTime'] = $this->common_data['current_date'];

        $this->db->where('id', $id);
        $this->db->update('srp_erp_personal_action', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('status' => 1, 'message' => 'Failed to update remark !');
        } else {
            $this->db->trans_commit();
            return array('status' => 0, 'message' => 'Remark updated successfully !', 'masterID' => $id);
        }
    }

    if(empty($id)){

    /**get manager id and designation */
    $manager = $this->db->query("SELECT
    srp_erp_employeemanagers.managerID AS managerid,
    srp_employeesdetails.EmpDesignationId AS managerdesignation, 
    srp_employeesdetails.ECode AS employee_code, 
    srp_employeesdetails.EDOJ AS EDOJ
    FROM
        srp_erp_employeemanagers
        JOIN srp_employeesdetails ON srp_erp_employeemanagers.managerID = srp_employeesdetails.EIdNo 
    WHERE
        srp_erp_employeemanagers.empID = {$empName} 
        AND srp_erp_employeemanagers.companyID = {$companyID} 
        AND srp_erp_employeemanagers.active = 1
    ")->row_array();

    /**get employee designation */
    $emp_designation = $this->db->query("SELECT
        DesignationID  
    FROM
        srp_employeedesignation
    WHERE
        EmpID = {$empName} 
        AND Erp_companyID = {$companyID} 
        AND isActive = 1
    ")->row_array();

    if($empName){
        $Erp_companyID = $this->db->query("SELECT Erp_companyID 
        FROM 
            srp_employeesdetails 
        WHERE 
            EIdNo = {$empName} 
        ")->row_array('Erp_companyID');
    }
    $Erp_companyID = $this->db->escape($Erp_companyID['Erp_companyID']);
    
    /**Insert PAA*/
            $this->load->library('sequence');

            $data['actionType'] = $actionType;
            $data['empID'] = $empName;
            $data['documentDate'] = $formated_documentDate;//$documentDate;
            $data['documentID'] = 'PAA';
            $data['documentCode'] = $this->sequence->sequence_generator($data['documentID']);
            $data['Remarks'] = $remarks;
            $data['empDesignationID'] = $emp_designation['DesignationID'] ?? null;
            $data['managerID'] = $manager['managerid'] ?? 0;
            $data['managerDesignationID'] = $manager['managerdesignation'] ?? 0;

            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = $this->common_data['user_group'];
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['timestamp'] = current_date(true);

            $this->db->insert('srp_erp_personal_action', $data);
            $last_id = $this->db->insert_id();


        /**add common fields */
        /**insert srp_erp_personal_action_details */
        $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue,NewValue, currentText, NewValueText)
                SELECT 
                    '{$last_id}',
                    'Company',
                    Erp_companyID,
                    Erp_companyID AS Erp_companyIDNew,
                    CONCAT(srp_erp_company.company_code, ' | ' , srp_erp_company.company_name),
                    CONCAT(srp_erp_company.company_code, ' | ' , srp_erp_company.company_name)  AS  cname 
                    FROM
                        srp_employeesdetails
                        LEFT JOIN srp_erp_company ON srp_employeesdetails.Erp_companyID = srp_erp_company.company_id
                    WHERE
                        srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 

                SELECT 
                    '{$last_id}',
                    'Division',
                    srp_erp_reporting_structure_details.id,
                    srp_erp_reporting_structure_details.id AS idnew,
                    CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description) ,
                     CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description) AS d_des
                FROM
                    srp_erp_employee_reporting_structure
                    LEFT JOIN srp_erp_reporting_structure_details ON srp_erp_employee_reporting_structure.reportingStructureDetailID = srp_erp_reporting_structure_details.id
                    LEFT JOIN srp_erp_reporting_structure_master ON srp_erp_reporting_structure_details.structureMasterID = srp_erp_reporting_structure_master.id 
                WHERE
                    
                    srp_erp_employee_reporting_structure.empID = {$empName}
                    AND srp_erp_reporting_structure_master.systemTypeID = 2 
                UNION ALL 
                SELECT 
                        '{$last_id}',
                        'Name',
                        EIdNo,
                        EIdNo AS EIdNoNew,  
                        Ename2 ,
                        Ename2 AS Ename2New
                    FROM
                        srp_employeesdetails
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 
                SELECT 
                    '{$last_id}',
                    'Designation',
                    EmpDesignationId, 
                    EmpDesignationId AS EmpDesignationIdNew,
                    DesDescription,
                    DesDescription AS DesDescriptionNew
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_designation ON srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID 
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND EIdNo = {$empName} 
                UNION ALL 
                SELECT 
                    '{$last_id}',
                    'EmpCODE',
                    EIdNo, 
                    EIdNo AS EIdNoNew,
                    EmpSecondaryCode ,
                    EmpSecondaryCode AS EmpSecondaryCodeNew
                    FROM
                        srp_employeesdetails
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 
                SELECT 
                    '{$last_id}',
                    'Grade',
                    srp_employeesdetails.gradeID AS gradeID, 
                     srp_employeesdetails.gradeID AS gradeIDNew,
                    gradeDescription,
                    gradeDescription AS gradeDescriptionNew
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_erp_employeegrade ON srp_employeesdetails.gradeID = srp_erp_employeegrade.gradeID 
                WHERE 
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 
                SELECT 
                        '{$last_id}',
                        'EDOJ',
                        EIdNo,
                        EIdNo AS EIdNoNew, 
                        EDOJ ,
                        EDOJ AS EDOJNew
                    FROM
                        srp_employeesdetails
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 
                SELECT 
                    '{$last_id}', 
                    'Last Review Date', 
                     empID,
                    empID AS empIDNew, 
                    MAX(documentDate) AS max_documentDate,
                     MAX(documentDate) AS max_documentDateNew 
                FROM 
                    srp_erp_personal_action
                WHERE 
                    empID = {$empName} 
                    AND {$last_id} != id 
                UNION ALL 
                SELECT 
                    '{$last_id}', 
                    'Last Increment Amount', 
                    employeeNo, 
                    employeeNo AS employeeNoNew,
                    SUM(transactionAmount) AS last_increment_amount,
                     SUM(transactionAmount) AS last_increment_amountNew 
                FROM 
                    srp_erp_pay_salarydeclartion AS t1 
                WHERE 
                    sdMasterID = (
                        SELECT MAX(sdMasterID)  
                        FROM srp_erp_pay_salarydeclartion AS t2 
                        WHERE t1.employeeNo = t2.employeeNo 
                    ) 
                    AND employeeNo = {$empName} 
                GROUP BY 
                    employeeNo 
                UNION ALL
                 SELECT
                    '{$last_id}',
                    'Segment',
                    srp_erp_reporting_structure_details.id,
                    srp_erp_reporting_structure_details.id AS idNew,
                    CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description),
                    CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description) AS dt_new 
                FROM
                    srp_erp_employee_reporting_structure
                    LEFT JOIN srp_erp_reporting_structure_details ON srp_erp_employee_reporting_structure.reportingStructureDetailID = srp_erp_reporting_structure_details.id
                    LEFT JOIN srp_erp_reporting_structure_master ON srp_erp_reporting_structure_details.structureMasterID = srp_erp_reporting_structure_master.id 
                WHERE
                    srp_erp_employee_reporting_structure.empID = {$empName}
                    AND srp_erp_reporting_structure_master.systemTypeID = 1 
                UNION ALL 
                SELECT
                    '{$last_id}',
                    'Sub Segment',
                    srp_erp_reporting_structure_details.id,
                    srp_erp_reporting_structure_details.id AS idNew,
                    CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description),
                    CONCAT(srp_erp_reporting_structure_details.detail_code, '-' , srp_erp_reporting_structure_details.detail_description) AS dtt_new 
                FROM
                    srp_erp_employee_reporting_structure
                    LEFT JOIN srp_erp_reporting_structure_details ON srp_erp_employee_reporting_structure.reportingStructureDetailID = srp_erp_reporting_structure_details.id
                    LEFT JOIN srp_erp_reporting_structure_master ON srp_erp_reporting_structure_details.structureMasterID = srp_erp_reporting_structure_master.id 
                WHERE
                    srp_erp_employee_reporting_structure.empID = {$empName}
                    AND srp_erp_reporting_structure_master.systemTypeID = 3  
                
                
        ");

        
        /**add unique fields for transfer */
        if($actionType == 1){
            $details = $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue,NewValue, currentText, NewValueText)
                SELECT 
                    '{$last_id}',
                    'Reporting Manager',
                    EIdNo, 
                    EIdNo AS EIdNoNew,
                    Ename2,
                    Ename2 AS  Ename2New
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_erp_employeemanagers ON srp_employeesdetails.EIdNo = srp_erp_employeemanagers.managerID 
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName} 
                    AND srp_erp_employeemanagers.active = 1 
                    AND srp_erp_employeemanagers.isprimary = 1 
                    GROUP BY srp_erp_employeemanagers.empID
                UNION ALL  
                SELECT 
                    '{$last_id}',
                    'Location',
                    srp_employeesdetails.locationID AS locationID, 
                    srp_employeesdetails.locationID AS locationIDNew,
                    locationName,
                    locationName AS locationNameNew
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_erp_location ON srp_employeesdetails.locationID = srp_erp_location.locationID 
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName} 
                UNION ALL 
                SELECT
                    '{$last_id}',
                    'Activity Code',
                    activitycodeID,
                    activitycodeID AS activitycodeIDNew,
                    srp_erp_activity_code_main.activity_code ,
                    srp_erp_activity_code_main.activity_code AS activity_codeNew
                FROM
                    srp_employeesdetails
                    JOIN srp_erp_activity_code_main ON srp_employeesdetails.activityCodeID = srp_erp_activity_code_main.id 
                WHERE
                    EIdNo = {$empName}  

            ");


            $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue)
            VALUES
                ({$last_id}, 'Transfer Type', '-'),
                ({$last_id}, 'Transfer Term', '-') ");


            /**add reporting structure details */
            /**add reporting structures( from srp_erp_reporting_structure_master TB) and relevant descriptions(from srp_erp_reporting_structure_details TB) */
            $this->db->query("INSERT INTO `srp_erp_personal_action_details` (
                paID,
                fieldType,
                currentValue,
                currentText,
                ReportingStruDetailID,
                ReportingStruMasterID,
                ActivityCodeType
            )
            SELECT
                '{$last_id}',
                srp_erp_reporting_structure_master.description,
                srp_erp_reporting_structure_details.id,
                CONCAT(srp_erp_reporting_structure_details.detail_code, '|', srp_erp_reporting_structure_details.detail_description),
                srp_erp_reporting_structure_details.id,
                srp_erp_reporting_structure_master.id,
                1 AS ActivityCodeType
            FROM
                srp_erp_employee_reporting_structure
            JOIN srp_erp_reporting_structure_details ON srp_erp_employee_reporting_structure.reportingStructureDetailID = srp_erp_reporting_structure_details.id
            JOIN srp_erp_reporting_structure_master ON srp_erp_employee_reporting_structure.reportingStructureID = srp_erp_reporting_structure_master.id
            WHERE
                srp_erp_employee_reporting_structure.empID = {$empName} 
            ");

        }

        /**add unique fields for increment */
        else if($actionType == 2){
             $details = $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue, NewValue, currentText,NewValueText)
                SELECT 
                    '{$last_id}',
                    'Reporting Manager',
                    EIdNo, 
                    EIdNo as EIdNoNew,
                    Ename2,
                    Ename2 AS Ename2New
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_erp_employeemanagers ON srp_employeesdetails.EIdNo = srp_erp_employeemanagers.managerID 
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName} 
                    AND srp_erp_employeemanagers.active = 1 
                    AND srp_erp_employeemanagers.isprimary = 1 
                    GROUP BY srp_erp_employeemanagers.empID 
                UNION ALL  
                SELECT 
                    '{$last_id}',
                    'Status',
                    isActive,
                    isActive as isActiveNew, 
                    CASE 
                        WHEN isActive = 0 THEN 'Not Active Employee'
                        WHEN isActive = 1 THEN 'Active Employee'
                        
                    ELSE '-' 
                END AS is_Active,
                     CASE 
                        WHEN isActive = 0 THEN 'Not Active Employee'
                        WHEN isActive = 1 THEN 'Active Employee'
                    ELSE '-' 
                END AS is_ActiveNew  
                FROM
                    srp_employeesdetails 
                WHERE 
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName}   
                UNION ALL 
                SELECT 
                    '{$last_id}',
                    'Leave Group',
                    srp_employeesdetails.leaveGroupID AS leaveGroupID, 
                   srp_employeesdetails.leaveGroupID AS leaveGroupIDNew, 
                    description ,
                    description AS descriptionNew
                FROM
                    srp_employeesdetails
                    LEFT JOIN srp_erp_leavegroup ON srp_employeesdetails.leaveGroupID = srp_erp_leavegroup.leaveGroupID
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID}
                    AND srp_employeesdetails.EIdNo = {$empName}
                UNION ALL 
                SELECT 
                    '{$last_id}',
                    'Location',
                    srp_employeesdetails.locationID AS locationID,
                    srp_employeesdetails.locationID AS locationIDNew,  
                    locationName,
                    locationName AS locationNameNew
                FROM
                    srp_employeesdetails 
                    LEFT JOIN srp_erp_location ON srp_employeesdetails.locationID = srp_erp_location.locationID 
                WHERE
                    srp_employeesdetails.Erp_companyID = {$companyID} 
                    AND srp_employeesdetails.EIdNo = {$empName} 
                --
                -- SELECT 
                --     '{$last_id}',
                --     'LAST REVIEW DATE',
                --     empID,
                --     empID as empIDNew,
                --     MAX(documentDate) AS max_documentDate,
                --     MAX(documentDate) AS max_documentDateNew
                -- FROM 
                --     srp_erp_personal_action
                -- WHERE 
                --     empID = {$empName} 
                --     AND {$last_id} != id 
                -- UNION ALL 
                -- SELECT 
                --     '{$last_id}', 
                --     'LAST INCREMENT AMOUNT', 
                --     employeeNo, 
                --     employeeNo AS employeeNoNew, 
                --     SUM(transactionAmount) AS last_increment_amount ,
                --     SUM(transactionAmount) AS last_increment_amountNew 
                -- FROM 
                --     srp_erp_pay_salarydeclartion AS t1 
                -- WHERE 
                --     sdMasterID = (
                --         SELECT MAX(sdMasterID)  
                --         FROM srp_erp_pay_salarydeclartion AS t2 
                --         WHERE t1.employeeNo = t2.employeeNo 
                --     ) 
                --     AND employeeNo = {$empName} 
                -- GROUP BY 
                --     employeeNo
            ");

                /**insert salary categoris */
                $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, salaryCategoryID, fieldType, currentText , NewValueText ) 
                SELECT
                '{$last_id}' AS paID,
                srp_erp_pay_salarycategories.salaryCategoryID,
                srp_erp_pay_salarycategories.salaryDescription AS fieldType ,
                amt AS currentValue,
                amt AS currentValueNew
                FROM
                    srp_employeesdetails
                    JOIN srp_erp_pay_salarycategories ON srp_employeesdetails.Erp_companyID = srp_erp_pay_salarycategories.companyID
                    LEFT JOIN ( SELECT employeeNo, sum( transactionAmount ) AS amt, salaryCategoryID FROM srp_erp_pay_salarydeclartion GROUP BY employeeNo, salaryCategoryID ) salary ON srp_erp_pay_salarycategories.salaryCategoryID = salary.salaryCategoryID 
                    AND salary.employeeNo = srp_employeesdetails.EIdNo 
                WHERE
                    srp_employeesdetails.EIdNo = {$empName} ");

        }
        /**add unique fields(monthly declaration types) for Bonus */
        else if($actionType == 3){
            
                $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, salaryCategoryID, monthlyDeclarationID )
                SELECT
                    '{$last_id}' AS paID,
                    srp_erp_pay_monthlydeclarationstypes.monthlyDeclaration AS fieldType, 
                    srp_erp_pay_monthlydeclarationstypes.salaryCategoryID AS salaryCategoryID,
                    srp_erp_pay_monthlydeclarationstypes.monthlyDeclarationID AS monthlyDeclarationID
                    
                FROM
                    srp_employeesdetails
                    JOIN srp_erp_pay_monthlydeclarationstypes ON srp_employeesdetails.Erp_companyID = srp_erp_pay_monthlydeclarationstypes.companyID
                    LEFT JOIN ( SELECT employeeNo, salaryCategoryID FROM srp_erp_pay_salarydeclartion GROUP BY employeeNo, salaryCategoryID ) salary ON srp_erp_pay_monthlydeclarationstypes.salaryCategoryID = salary.salaryCategoryID 
                    AND salary.employeeNo = srp_employeesdetails.EIdNo 
                WHERE
                    srp_employeesdetails.EIdNo = {$empName}
                    AND srp_erp_pay_monthlydeclarationstypes.companyID = {$Erp_companyID} 
                    AND srp_erp_pay_monthlydeclarationstypes.monthlyDeclarationType = 'A' 
                    AND ( srp_erp_pay_monthlydeclarationstypes.isVariable = 0 
                    OR 
                    srp_erp_pay_monthlydeclarationstypes.isVariable = NULL)
                ");
        }

//    }

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('status' => 1, 'message' => 'Failed to Save !');
        } else {
            $this->db->trans_commit();
            return array('status' => 0, 'message' => 'saved Successfully !', 'masterID' => $last_id);
        }

    }
}


/**print view */
function fetch_personal_action_template_data($id)
{
    $convertFormat = convert_date_format_sql();
    $data = array();
    $this->db->select('
        srp_erp_personal_action.id AS id,
        srp_erp_personal_action.documentID AS documentID,
        srp_erp_personal_action.documentCode AS documentCode, 
        DATE_FORMAT(srp_erp_personal_action.documentDate, \'' . $convertFormat . '\') AS documentDate,
        srp_erp_personal_action.Remarks AS Remarks,
        srp_erp_personal_action.confirmedYN AS confirmedYN,
        srp_erp_personal_action.confirmedByEmpID AS confirmedByEmpID,
        srp_erp_personal_action.confirmedByName AS confirmedByName,
        srp_erp_personal_action.approvedYN AS approvedYN,
        srp_erp_personal_action.approvedByEmpName AS approvedByEmpName,
        DATE_FORMAT(srp_erp_personal_action.approvedDate, \'' . $convertFormat . '\') AS approvedDate,
        srp_employeesdetails.ECode AS ECode,
        srp_erp_personal_action.currentLevelNo AS currentLevelNo,
        srp_erp_personal_action.createdUserID AS createdUserID,
        srp_erp_personal_action.createdDateTime AS createdDateTime,
        srp_erp_personal_action.createdUserName AS createdUserName,
        srp_erp_personal_action.actionType AS actionType
    ');
    $this->db->where('id', $id);
    $this->db->from('srp_erp_personal_action');
    $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_personal_action.empID');
    $data['master'] = $this->db->get()->row_array();

    // $this->db->select('*');
    // $this->db->where('paID', $id);
    // $this->db->from('srp_erp_personal_action_details');
    // $data['detail'] = $this->db->get()->result_array();

    $data['detail'] = $this->db->query("SELECT
                * 
            FROM
                srp_erp_personal_action_details 
            WHERE
                paID = {$id} 
                AND (
                ActivityCodeType IS NULL 
                OR ActivityCodeType IN ( SELECT NewValue FROM srp_erp_personal_action_details WHERE paID = {$id} AND fieldType = 'ACTIVITY CODE' )) ")->result_array();


    $this->db->select('approvedYN, approvedDate, approvalLevelID,Ename1,Ename2,Ename3,Ename4');
    $this->db->where('documentSystemCode', $id);
    $this->db->where('documentID', 'PAA');
    $this->db->from('srp_erp_documentapproved');
    $this->db->join('srp_employeesdetails', 'srp_employeesdetails.ECode = srp_erp_documentapproved.approvedEmpID');
    $data['approval'] = $this->db->get()->result_array();

    return $data;
}


/**approval part */
function personal_action_confirmation()
{
    $this->db->trans_start(); 

    $id = trim($this->input->post('id') ?? '');

    $this->db->select('id');
    $this->db->where('id', trim($this->input->post('id') ?? ''));
    $this->db->where('confirmedYN', 1);
    $this->db->from('srp_erp_personal_action');
    $Confirmed = $this->db->get()->row_array();
    if (!empty($Confirmed)) {
        return array('w', 'Personal Application already confirmed');
    }

    $this->db->select('*');
    $this->db->where('id', trim($this->input->post('id') ?? ''));
    $this->db->from('srp_erp_personal_action');
    $pa_data = $this->db->get()->row_array();

    $this->db->select('detailID');
    $this->db->where('paID', trim($this->input->post('id') ?? ''));
    $this->db->from('srp_erp_personal_action_details');
    $detail = $this->db->get()->row_array();

    if($detail){
        $validate_code = validate_code_duplication($pa_data['documentCode'], 'documentCode', $id,'id', 'srp_erp_personal_action');
        if(!empty($validate_code)) {
            return array('e', 'The document Code Already Exist.(' . $validate_code . ')');
        }


        $data = array(
            'confirmedYN' => 1,
            'confirmedDate' => $this->common_data['current_date'],
            'confirmedByEmpID' => $this->common_data['current_userID'],
            'confirmedByName' => $this->common_data['current_user'],
        );


        $this->load->library('approvals');
        $isAutoApproval = get_document_auto_approval('PAA');

        $documentName = 'Personal Action Approval';
        $tableName = 'srp_erp_personal_action';
        $documentCode = $pa_data['documentCode'];
        $createdDate = $pa_data['createdDateTime'];
        $masterID = $id;

        if ($isAutoApproval == 0) { // If auto approval

            $this->approvals->auto_approve($masterID, $tableName, 'id', 'PAA', $documentCode, $createdDate);

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                return ['s', 'Approved successfully'];
            } else {
                $this->db->trans_rollback();
                return ['e', 'Error in approval process'];
            }
        }

        $approvals_status = $this->approvals->CreateApproval('PAA', $masterID, $documentCode, $documentName, $tableName, 'id', 0, $createdDate);

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            return ['e', 'Something went wrong!, In approval create process'];
        }

        if ($approvals_status == 3) {
            $this->db->trans_rollback();
            return ['w', 'There is no user exists to perform <b>Personal Action approval</b> for this company.'];
        } else if($approvals_status == 1) {
           
            $this->db->where('id', trim($this->input->post('id') ?? ''));
            $this->db->update('srp_erp_personal_action', $data);
            
            $this->session->set_flashdata('s', 'Create Approval : ' . $pa_data['documentCode'] . ' Approvals Created Successfully ');


            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                return ['e', 'Something went wrong!, In approval create process'];
            }
            $this->db->trans_commit();
            return ['s', 'Approval created : ' . $documentCode];
        } else {
            $this->db->trans_rollback();
            return ['w', 'some thing went wrong', $approvals_status];
        }

        
        $firbase_status = null;

        if($firbase_status){
             /*** Firebase Mobile Notification*/
            $this->db->select('managerID');
            $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
            $this->db->where('active', 1);
            $this->db->from('srp_erp_employeemanagers');
            $managerid = $this->db->get()->row_array();

            $token_android = firebaseToken($managerid["managerID"], 'android');
            $token_ios = firebaseToken($managerid["managerID"], 'apple');

            $firebaseBody = $pa_data['createdUserName'] . " has applied for a personal action.";

            $this->load->library('firebase_notification');
            if(!empty($token_android)) {
                $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_android, 2, $pa_data['documentCode'], "PAA", $id, "android");
            }
            if(!empty($token_ios)) {
                $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_ios, 2, $pa_data['documentCode'], "PAA", $id, "apple");
            }
        }

        return array('s','Approvals Created Successfully');

    }else{
        return array('e','No records found to confirm this document');
    }

}


    //ok.........
    function personal_application_get_template_data( $iDD = NULL){
        $id = $this->input->post('id');
        $data_array = array();
        $base_transferArray = array();

        if($iDD){
            //$transfer_details = $this->db->where('paID', $iDD)->from('srp_erp_personal_action_details')->get()->result_array();
            $transfer_details = $this->db->query("SELECT
                * 
            FROM
                srp_erp_personal_action_details 
            WHERE
                paID = {$iDD} 
                AND (
                ActivityCodeType IS NULL 
                OR ActivityCodeType IN ( SELECT NewValue FROM srp_erp_personal_action_details WHERE paID = {$iDD} AND fieldType = 'ACTIVITY CODE' )) ")->result_array();
        
        }else{
                //$transfer_details = $this->db->where('paID', $id)->from('srp_erp_personal_action_details')->get()->result_array();
                $transfer_details = $this->db->query("SELECT
                    * 
                FROM
                    srp_erp_personal_action_details 
                WHERE
                    paID = {$id} 
                    AND (
                    ActivityCodeType IS NULL 
                    OR ActivityCodeType IN ( SELECT NewValue FROM srp_erp_personal_action_details WHERE paID = {$id} AND fieldType = 'ACTIVITY CODE' )) ")->result_array();
            }
        
        foreach($transfer_details as $row){
            $base_transferArray[$row['fieldType']] = $row;
        }

        $data_array['transfer_details'] = $base_transferArray;

        return $data_array;
        
}

    //ok............
    function update_persional_action_details(){
        $id = $this->input->post('id');
        $fieldType = trim($this->input->post('fieldType') ?? '');
        $fieldValue = trim($this->input->post('fieldValue') ?? '');
        $fieldText = trim($this->input->post('fieldText') ?? '');
        $type = trim($this->input->post('type') ?? '');

        $data =array();
        if($type == 1){
            $data['NewValue'] = trim($fieldValue);
            $data['NewValueText'] = trim($fieldText);
        }else if($type == 2){
            if($fieldText){
                $data['NewValue'] = trim($fieldValue);
                $data['NewValueText'] = trim($fieldText);
            }else{
                $data['NewValueText'] = trim($fieldValue);
            }
        }
        
        $this->db->select('*');
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->where('fieldType', $fieldType);
        $this->db->from('srp_erp_personal_action_details');
        $isexist = $this->db->get()->row_array();

        if(!empty($isexist)){
            /**update  srp_erp_personal_action_details */
            $this->db->where('detailID', $isexist['detailID']);
            $this->db->update('srp_erp_personal_action_details', $data);

            return array('s','Updated Successfully');
        }else{
                $data_r['paID'] = trim($id);
                $data_r['fieldType'] = trim($fieldType);
                if($type == 1){
                    if(!empty($isexist['currentValue']) || !empty($isexist['currentText'])){
                        $data_r['currentValue'] = trim($fieldValue);
                        $data_r['currentText'] = trim($fieldText);
                    }
                    $data_r['NewValue'] = trim($fieldValue);
                    $data_r['NewValueText'] = trim($fieldText);
                }else if($type == 2){
                    if($fieldText){
                        if(!empty($isexist['currentValue']) || !empty($isexist['currentText'])){
                            $data_r['currentValue'] = trim($fieldValue);
                            $data_r['currentText'] = trim($fieldText);
                        }
                        $data_r['NewValue'] = trim($fieldValue);
                        $data_r['NewValueText'] = trim($fieldText);
                    }else{
                        $data_r['currentText'] = trim($fieldValue);
                        $data_r['NewValueText'] = trim($fieldValue);
                    }
                }

            $this->db->insert('srp_erp_personal_action_details', $data_r);

            return array('s','saved Successfully');
        }

    }

    
    function fetch_approval_user_modal_pa(){
        $convertFormat = convert_date_format_sql();
        $companyID = $this->common_data['company_data']['company_id'];
        $documentSystemCode = $this->input->post('documentSystemCode');

        $this->db->select('*');
        $this->db->from('srp_erp_personal_action');
        $this->db->join('srp_employeesdetails as empTB','srp_erp_personal_action.empID = empTB.EIdNo');
        $this->db->where('id', $documentSystemCode);
        $this->db->where_in('companyID', $companyID);
        $masterData = $this->db->get()->row_array();

        if($masterData){
            $claimEmpID = $masterData['empID'];

            //fetch levels and users
            $this->db->select("approvalLevelID,approvedYN,approvedDate,approvedComments,documentCode,docConfirmedByEmpID,
                DATE_FORMAT(documentDate,\"" . $convertFormat . "\") AS documentDate, '' AS Ename2,
                DATE_FORMAT(docConfirmedDate,\"" . $convertFormat . "\") AS docConfirmedDate,
                DATE_FORMAT(approvedDate,\"" . $convertFormat . "\") AS approveDate,
                ap.employeeID");
            $this->db->from('srp_erp_documentapproved');
            $this->db->join("srp_erp_approvalusers AS ap", "ap.levelNo = srp_erp_documentapproved.approvalLevelID AND ap.documentID = 'PAA' AND ap.companyID = '{$companyID}'");
            $this->db->where('srp_erp_documentapproved.documentID', 'PAA');
            $this->db->where('documentSystemCode', $documentSystemCode);
            $this->db->where('srp_erp_documentapproved.companyID', $companyID);
            $this->db->order_by('srp_erp_documentapproved.approvalLevelID');
            $approved = $this->db->get()->result_array();

            $managers = $this->db->query("SELECT
                                                * 
                                            FROM
                                                (
                                                SELECT
                                                    repManager,
                                                    repManagerName,
                                                    currentLevelNo,
                                                    HOD,
                                                    HODName 
                                                FROM
                                                    srp_erp_personal_action AS paTB
                                                    JOIN srp_erp_documentapproved ON paTB.documentID = 'PAA'
                                                    LEFT JOIN (
                                                    SELECT
                                                        hod_id AS HOD,
                                                        EmpID AS EmpNew,
                                                        t3.Ename2 AS HODName 
                                                    FROM
                                                        srp_empdepartments AS dpt
                                                        JOIN srp_departmentmaster AS departmentmaster ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                                        JOIN srp_employeesdetails AS t3 ON departmentmaster.hod_id = t3.EIdNo 
                                                        AND t3.Erp_companyID = {$companyID} 
                                                    WHERE
                                                        dpt.isPrimary = 1 
                                                    ) AS HodData ON paTB.empID = HodData.EmpNew
                                                    LEFT JOIN (
                                                    SELECT
                                                        empID,
                                                        managerID AS repManager,
                                                        Ename2 AS repManagerName 
                                                    FROM
                                                        srp_erp_employeemanagers AS t1
                                                        JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo 
                                                    WHERE
                                                        active = 1 
                                                        AND t1.companyID = {$companyID}
                                                    ) AS repoManagerTB ON paTB.empID = repoManagerTB.empID 
                                                WHERE
                                                    paTB.companyID = {$companyID} 
                                                    AND id = {$documentSystemCode}
                                                    
                                                ) AS empData
                                                LEFT JOIN (
                                                SELECT
                                                    managerID AS topManager,
                                                    Ename2 AS topManagerName,
                                                    empID AS topEmpID 
                                                FROM
                                                    srp_erp_employeemanagers AS t1
                                                    JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo 
                                                    AND t2.Erp_companyID ={$companyID} 
                                                WHERE
                                                    t1.companyID = {$companyID}
                                                AND active = 1 
                                                ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID;
            
            ")->row_array();

            $data_arr = array();

            foreach($approved as $key => $approve_details){

                $employeeID = $approve_details['employeeID'];

                if($employeeID == -1){
                    $approved[$key]['Ename2'] =  $managers['repManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['repManager'];
                }elseif($employeeID == -2){
                    $approved[$key]['Ename2'] =  $managers['HODName'];
                    $approved[$key]['levelUserID'] =  $managers['HOD'];
                }elseif($employeeID == -3){
                    $approved[$key]['Ename2'] =  $managers['topManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['topManager'];
                }else{
                    $employee_details = fetch_employeeNo($employeeID);
                    $approved[$key]['Ename2'] =  $employee_details['Ename2'];
                    $approved[$key]['levelUserID'] =  $employee_details['EIdNo'];
                }


            }
            $data_arr['approved'] = $approved;
            $data_arr['documentCode'] = isset($data_arr['approved'][0]['documentCode']) ? $data_arr['approved'][0]['documentCode'] : '';
            $data_arr['documentDate'] = isset($data_arr['approved'][0]['documentDate']) ? $data_arr['approved'][0]['documentDate'] : '' ;
            $data_arr['confirmedDate'] = isset($data_arr['approved'][0]['docConfirmedDate']) ? $data_arr['approved'][0]['docConfirmedDate'] : '';

            $confirmedEmpID = isset($data_arr['approved'][0]['docConfirmedByEmpID']) ? $data_arr['approved'][0]['docConfirmedByEmpID'] : '';
            $emp = fetch_employeeNo($confirmedEmpID);
            //$data_arr['conformed_by']   = $emp['ECode'].' - '.$emp['Ename2'];
            $data_arr['confirmedByName'] = $emp['Ename2'];

            $data_arr['confirmedYN'] = $masterData['confirmedYN'];

            // if(!empty($data_arr['approved'])){
            //     $data_arr['document_code'] = $data_arr['approved'][0]['documentCode'];
            //     $data_arr['document_date'] = $data_arr['approved'][0]['documentDate'];
            //     $data_arr['confirmed_date'] = $data_arr['approved'][0]['docConfirmedDate'];
            //     $emp = fetch_employeeNo($data_arr['approved'][0]['docConfirmedByEmpID']);
            //     //$data_arr['conformed_by']   = $emp['ECode'].' - '.$emp['Ename2'];
            //     $data_arr['conformed_by'] = $emp['Ename2'];
            // }
          
        }

        return $data_arr;


    }

    // function personal_application_approval($autoappLevel=1,$system_idAP=0,$statusAP=0,$commentsAP=0)
    // {
    //     $this->db->trans_start();
    //     $this->load->library('Approvals');

    //     if($autoappLevel==1){
    //         $system_code = trim($this->input->post('wfhID') ?? '');
    //         $level_id = trim($this->input->post('Level') ?? '');
    //         $status = trim($this->input->post('po_status') ?? '');
    //         $comments = trim($this->input->post('comments') ?? '');
    //     }else{
    //         $system_code = $system_idAP;
    //         $level_id = 0;
    //         $status = $statusAP;
    //         $comments = $commentsAP;
    //         $_post['wfhID']=$system_code;
    //         $_post['Level']=$level_id;
    //         $_post['status']=$status;
    //         $_post['comments']=$comments;
    //     }

    //     if($autoappLevel==0){
    //         $approvals_status=1;
    //     }else{
    //         $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'WFH');
    //     }

    //     if ($approvals_status == 1) {
    //         $this->session->set_flashdata('s', 'Approved Successfully.');
    //     }

    //     $this->db->trans_complete();
    //     if ($this->db->trans_status() === FALSE) {
    //         $this->db->trans_rollback();
    //         return true;
    //     } else {
    //         $this->db->trans_commit();
    //         return true;
    //     }
    // }



    function personal_application_approval($autoappLevel=1,$system_idAP=0,$statusAP=0,$commentsAP=0)
    {
        $this->load->library('Approvals');

        $id = trim($this->input->post('id') ?? '');
        $this->db->select('*');
        $this->db->where('id', trim($this->input->post('id') ?? ''));
        $this->db->from('srp_erp_personal_action');
        $paa_data = $this->db->get()->row_array();

        // $system_code = trim($this->input->post('id') ?? '');
        // $level_id = trim($this->input->post('level') ?? '');
        // $status = trim($this->input->post('po_status') ?? '');
        // $comments = trim($this->input->post('comments') ?? '');

        $companyID = current_companyID();

        if($autoappLevel==1){
            $system_code = trim($this->input->post('id') ?? '');
            $level_id = trim($this->input->post('level') ?? '');
            $status = trim($this->input->post('po_status') ?? '');
            $comments = trim($this->input->post('comments') ?? '');
        }else{
            $system_code = $system_idAP;
            $level_id = 0;
            $status = $statusAP;
            $comments = $commentsAP;
            $_post['id']=$system_code;
            $_post['level']=$level_id;
            $_post['po_status']=$status;
            $_post['comments']=$comments;
        }

        if($autoappLevel == 0){
            $approvals_status = 1;
        }else{
            $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'PAA');
        }

        if ($approvals_status == 1) {
            $data = array(
                'approvedYN' => 1,
                'approvedDate' => $this->common_data['current_date'],
                'approvedbyEmpID' => $this->common_data['current_userID'],
                'approvedbyEmpName' => $this->common_data['current_user'],
                'approvalComments' => $this->input->post('comments'),
            );
            $this->db->where('id', trim($this->input->post('id') ?? ''));
            $this->db->update('srp_erp_personal_action', $data);

            // /*** Firebase Mobile Notification*/
            // $token_android = firebaseToken($paa_data["createdUserID"], 'android');
            // $token_ios = firebaseToken($paa_data["createdUserID"], 'apple');

            // $this->load->library('firebase_notification');
            // if(!empty($token_android)) {
            //     $this->firebase_notification->sendFirebasePushNotification("Personal Application Approved", "Your personal application has been approved", $token_android, 4, $paa_data['documentCode'], "PAA", $id, "android");
            // }
            // if(!empty($token_ios)) {
            //     $this->firebase_notification->sendFirebasePushNotification("Personal Application Approved", "Your personal application has been approved", $token_ios, 4, $paa_data['documentCode'], "PAA", $id, "apple");
            // }

            $this->session->set_flashdata('s', ' Approved Successfully ');
            return true;
        } 
        
        if($status != 1) {
            $this->db->select('documentCode');
            $this->db->where('id', trim($this->input->post('id') ?? ''));
            $this->db->from('srp_erp_personal_action');
            $documentCode = $this->db->get()->row_array();


            $datas = array(
                'confirmedYN' => 3,
                /*'confirmedDate' => null,
                'confirmedByEmpID' => null,
                'confirmedByName' => null,*/
            );
            $this->db->where('id', trim($this->input->post('id') ?? ''));
            $update = $this->db->update('srp_erp_personal_action', $datas);
            if ($update) {

                $this->db->select('rejectID');
                $this->db->where('systemID', trim($this->input->post('id') ?? ''));
                $this->db->from('srp_erp_approvalreject');
                $rejectID = $this->db->get()->row_array('rejectID');

                if(!empty($rejectID)){
                    $data = array(
                        'documentID' => "PAA",
                        'systemID' => $this->input->post('id'),
                        'documentCode' => $documentCode['documentCode'],
                        'comment' => $this->input->post('comments'),
                        'rejectedLevel' => 1,
                        'rejectByEmpID' => $this->common_data['current_userID'],
                        'rejectByEmpName' => $this->common_data['current_user'],
                        'table_name' => "srp_erp_personal_action",
                        'table_unique_field' => "id",
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'createdUserGroup' => $this->common_data['user_group'],
                        'modifiedPCID' => $this->common_data['current_pc'],
                        'modifiedUserID' => $this->common_data['current_userID'],
                        'modifiedUserName' => $this->common_data['current_user'],
                        'modifiedDateTime' => $this->common_data['current_date'],
                    );
                    $this->db->where('rejectID',$rejectID['rejectID']);
                    $this->db->update('srp_erp_approvalreject', $data);
                }else{
                    $data = array(
                        'documentID' => "PAA",
                        'systemID' => $this->input->post('id'),
                        'documentCode' => $documentCode['documentCode'],
                        'comment' => $this->input->post('comments'),
                        'rejectedLevel' => 1,
                        'rejectByEmpID' => $this->common_data['current_userID'],
                        'rejectByEmpName' => $this->common_data['current_user'],
                        'table_name' => "srp_erp_personal_action",
                        'table_unique_field' => "id",
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'createdUserGroup' => $this->common_data['user_group'],
                        'createdPCID' => $this->common_data['current_pc'],
                        'createdUserID' => $this->common_data['current_userID'],
                        'createdUserName' => $this->common_data['current_user'],
                        'createdDateTime' => $this->common_data['current_date'],
                    );
                    $this->db->insert('srp_erp_approvalreject', $data);
                }

                // /*** Firebase Mobile Notification*/
                // $token_android = firebaseToken($paa_data["createdUserID"], 'android');
                // $token_ios = firebaseToken($paa_data["createdUserID"], 'apple');

                // $firebaseBody = "Your personal application has referred back";

                // $this->load->library('firebase_notification');
                // if(!empty($token_android)) {
                //     $this->firebase_notification->sendFirebasePushNotification("Personal Application Referred Back", $firebaseBody, $token_android, 4, $paa_data['documentCode'], "PAA", $id, "android");
                // }
                // if(!empty($token_ios)) {
                //     $this->firebase_notification->sendFirebasePushNotification("Personal Application Referred Back", $firebaseBody, $token_ios, 4, $paa_data['documentCode'], "PAA", $id, "apple");
                // }

                $this->session->set_flashdata('s', ' Rejected Successfully ');
                return true;
            }
        }
    }

    function add_my_attendees()
    {
        $attendees = $this->input->post('attendees[]');
        $empID = $this->input->post('empID');

        $data = array();
        foreach ($attendees as $key => $de) {

            $this->db->select('*');
            $this->db->where('empID', $empID);
            $this->db->where('attendeeID', $de);
            $this->db->where('companyID', current_companyID());
            $this->db->where('isActive', 1);
            $this->db->from('srp_erp_employee_attendees');
            $attend = $this->db->get()->row_array();

            if($attend){

            }else{
                $data['companyID'] = current_companyID();
                $data['empID'] = $empID;
                $data['attendeeID'] = $de;
                $data['isActive'] = 1;
                $data['createdUserGroup'] = $this->common_data['user_group'];
                $data['createdPCID'] = $this->common_data['current_pc'];
                $data['createdUserID'] = $this->common_data['current_userID'];
                $data['createdUserName'] = $this->common_data['current_user'];
                $data['createdDateTime'] = $this->common_data['current_date'];
                $data['modifiedPCID'] = $this->common_data['current_pc'];
                $data['modifiedUserID'] = $this->common_data['current_userID'];
                $data['modifiedUserName'] = $this->common_data['current_user'];
                $data['modifiedDateTime'] = $this->common_data['current_date'];

                $this->db->insert('srp_erp_employee_attendees', $data);
            }
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Error in insert record');
        } else {
            $this->db->trans_commit();
            return array('s', 'Records inserted successfully');
        }
    }

    function delete_assign_attenddes(){
        $id = $this->input->post('id');

        $this->db->trans_start();
        
        $this->db->where('id', $id)->delete('srp_erp_employee_attendees');
        
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e','Update Fail');
        } else {
            
            $this->db->trans_commit();
            return array('s','Successfully Deleted');
        }
    }

    // function update_persional_action_details_actionCodeType(){
    //     $id = $this->input->post('id');
    //     $fieldType = trim($this->input->post('fieldType') ?? '');
    //     $fieldValue = $this->input->post('fieldValue');
    //     $fieldText = $this->input->post('fieldText');

    //     $data =array();
    //     $data['NewValue'] = trim($fieldValue);
    //     $data['NewValueText'] = trim($fieldText);

    //     // $this->db->select('detailID');
    //     // $this->db->where('paID', trim($this->input->post('id') ?? ''));
    //     // $this->db->where('fieldType', $fieldType);
    //     // $this->db->from('srp_erp_personal_action_details');
    //     // $actionType = $this->db->get()->row_array();

    //     /**update activityCode */
    //     $this->db->where('paID', trim($this->input->post('id') ?? ''));
    //     $this->db->where('fieldType', $fieldType);
    //     $x = $this->db->update('srp_erp_personal_action_details', $data);

    //     // /**update reporting fields */
    //     // $y = 'ActivityCodeType IS NOT NULL';
    //     // //$all_reporting_fields = $this->db->query("SELECT fieldType FROM srp_erp_personal_action_details WHERE paID = {$id} AND ActivityCodeType != NULL ")->result_array();
    //     // $this->db->select('*');
    //     // $this->db->where('paID', trim($this->input->post('id') ?? ''));
    //     // $this->db->where($y);
    //     // $this->db->from('srp_erp_personal_action_details');
    //     // $all_reporting_fields = $this->db->get()->result_array();

       
    //     // $new_reporting_fields = $this->db->query("SELECT *,
    //     //                 srp_erp_reporting_structure_master.description AS fieldType
    //     //             FROM
    //     //                 srp_erp_activity_code_sub
    //     //                 JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id
    //     //             WHERE
    //     //                 srp_erp_activity_code_sub.main_id = {$fieldValue} 
    //     //         ")->result_array();
        
            
    //     //     foreach($new_reporting_fields as $new){
    //     //         foreach($all_reporting_fields as $old){
    //     //             if($new['fieldType'] == $old['fieldType']){
    //     //                 if (is_string($new)) {
    //     //                 $data = array('ActivityCodeType' => $x);
    //     //                 $this->db->where('paID', $id);
    //     //                 $this->db->where('fieldType', $new['fieldType']);
    //     //                 $this->db->update('srp_erp_personal_action_details', $data);
    //     //                 }


    //     //                 // $this->db->query("UPDATE srp_erp_personal_action_details 
    //     //                 //     JOIN srp_erp_activity_code_sub ON srp_erp_personal_action_details.ReportingStruDetailID = srp_erp_activity_code_sub.rpt_struc_detail_id
    //     //                 //     JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
    //     //                 //     JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id 
    //     //                 //     SET 
    //     //                 //         srp_erp_personal_action_details.ReportingStruDetailID = srp_erp_reporting_structure_details.id,
    //     //                 //         srp_erp_personal_action_details.ReportingStruMasterID = srp_erp_reporting_structure_master.id,
    //     //                 //         srp_erp_personal_action_details.ActivityCodeType = {$fieldValue}
    //     //                 //     WHERE
    //     //                 //         srp_erp_activity_code_sub.main_id = {$fieldValue}");  
    //     //             }
    //     //         }
    //     //     }
    //     // return $fieldValue;

    //         if(!empty($fieldValue)){
    //             $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, fieldType, NewValue, NewValueText, ReportingStruDetailID, ReportingStruMasterID, ActivityCodeType ) 
    //             SELECT
    //             '{$id}',
    //             srp_erp_reporting_structure_master.description,
    //             srp_erp_reporting_structure_details.id,
    //             CONCAT( srp_erp_reporting_structure_details.detail_code, '|', srp_erp_reporting_structure_details.detail_description ),
    //             srp_erp_reporting_structure_details.id,
    //             srp_erp_reporting_structure_master.id,
    //             2 AS ActivityCodeType 
    //             FROM
    //                 srp_erp_activity_code_sub
    //                 JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
    //                 JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id
                    
    //             WHERE
    //                 srp_erp_activity_code_sub.main_id = {$fieldValue}
    //             ");
    //         }

    //     return $fieldValue;
    // }

    function update_persional_action_details_actionCodeType()
    {
        $id = $this->input->post('id');
        $fieldType = trim($this->input->post('fieldType') ?? '');

        $activitycodeID = $this->input->post('fieldValue');
        $activitycodeName = $this->input->post('fieldText');

        $data =array();
        $data['NewValue'] = trim($activitycodeID);
        $data['NewValueText'] = trim($activitycodeName);

        /**update activityCode */
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->where('fieldType', $fieldType);
        $x = $this->db->update('srp_erp_personal_action_details', $data);

        /**chech whether data already exists based on activity code type */
         $this->db->select('*');
         $this->db->where('paID', trim($this->input->post('id') ?? ''));
         $this->db->where('ActivityCodeType', 2);
         $this->db->from('srp_erp_personal_action_details');
         $isexist = $this->db->get()->result_array();

        if(!empty($isexist)){
            $deleted = $this->db->query("DELETE 
            FROM
                srp_erp_personal_action_details 
            WHERE
                ActivityCodeType = 2");
            
            if($deleted){
            $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, fieldType, NewValue, NewValueText, ReportingStruDetailID, ReportingStruMasterID, ActivityCodeType ) 
                    SELECT
                    '{$id}',
                    srp_erp_reporting_structure_master.description,
                    srp_erp_reporting_structure_details.id,
                    CONCAT( srp_erp_reporting_structure_details.detail_code, '|', srp_erp_reporting_structure_details.detail_description ),
                    srp_erp_reporting_structure_details.id,
                    srp_erp_reporting_structure_master.id, 
                    2 AS ActivityCodeType 
                    FROM
                        srp_erp_activity_code_sub
                        JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
                        JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id
                        
                    WHERE
                        srp_erp_activity_code_sub.main_id = {$activitycodeID} 
            ");
            }
            return array('s','Updated Successfully..!');
            
        }else{
            $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, fieldType, NewValue, NewValueText, ReportingStruDetailID, ReportingStruMasterID, ActivityCodeType ) 
                    SELECT
                    '{$id}',
                    srp_erp_reporting_structure_master.description,
                    srp_erp_reporting_structure_details.id,
                    CONCAT( srp_erp_reporting_structure_details.detail_code, '|', srp_erp_reporting_structure_details.detail_description ),
                    srp_erp_reporting_structure_details.id,
                    srp_erp_reporting_structure_master.id, 
                    2 AS ActivityCodeType 
                    FROM
                        srp_erp_activity_code_sub
                        JOIN srp_erp_reporting_structure_details ON srp_erp_activity_code_sub.rpt_struc_detail_id = srp_erp_reporting_structure_details.id
                        JOIN srp_erp_reporting_structure_master ON srp_erp_activity_code_sub.rpt_struc_master_id = srp_erp_reporting_structure_master.id
                        
                    WHERE
                        srp_erp_activity_code_sub.main_id = {$activitycodeID} 
            ");

            return array('s','Updated Successfully');
        }
    }

    /**employeement - salary stop details */
    function save_salaryStopDetail(){

        $this->db->trans_start();
        $salaryStopDate = $this->input->post('salaryStopDate');
        $date_format_policy = date_format_policy();
        $formated_salaryStopDate = (!empty($salaryStopDate)) ? input_format_date($salaryStopDate, $date_format_policy) : null;

        $salaryStopReason = $this->input->post('salaryStopReason');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();

        $data['salaryStopDate'] = $salaryStopDate;
        $data['salaryStopReason'] = $salaryStopReason;

        $this->db->where('EIdNo', $empID);
        $this->db->where('Erp_companyID', $companyID);
        $this->db->update('srp_employeesdetails', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e','Salary stop details Save Failed');
        } else {
            $this->db->trans_commit();
            return array('s','Salary stop details successfully Saved');
        }
    }

    public function get_travel_detail($id)
    {
        $sql = "SELECT tr.id AS id,
                tr.requestDate AS requestDate,
                tt.tripType AS tripType,
                emp.Ename2 AS employeeName,
                emp2.Ename2 AS employeeName2,
                trd.detailID,
                trd.relationID,
                cm.CountryDes AS countryName,
                adm.City AS cityName,
                trd.startDate,
                trd.endDate,
                cur.CurrencyCode,
                trd.amount,
                trd.comments,
                tr.confirmedYN,
                tr.approvedYN,
                tr.approvedbyEmpName,
                tr.approvedDate
            FROM srp_erp_travel_request tr
            LEFT JOIN srp_erp_travel_type tt ON tr.tripTypeID = tt.id
            LEFT JOIN srp_employeesdetails emp ON tr.empID = emp.EIdNo
            LEFT JOIN srp_erp_travel_request_details trd ON tr.id = trd.travelRequestID
            LEFT JOIN srp_erp_countrymaster cm ON trd.countryID = cm.CountryID
            LEFT JOIN srp_erp_airportdestinationmaster adm ON trd.destinationID = adm.destinationID
            LEFT JOIN srp_erp_currencymaster cur ON trd.currencyID = cur.currencyID
            LEFT JOIN srp_employeesdetails emp2 ON trd.relationID = emp2.EIdNo
            WHERE tr.id = ?";

        $query = $this->db->query($sql, array($id));

        if ($query && $query->num_rows() > 0) {
            return $query->result_array();
        } else {
            return array();
        }
    }


    /**save medical details of an employee */
    function save_medical(){

        $this->db->trans_start();

        $empID = $this->input->post(trim('empID'));
        $medicalInformationID = $this->input->post('medicalInformationID');
        $medicalcategoryID = $this->input->post('medicalcategoryID');
        $companyid = current_companyID();
        $date_format_policy = date_format_policy();

        //  $this->db->select('id');
        //  $this->db->where('empID', trim($empID));
        //  $this->db->where('companyID', $companyid);
        //  $this->db->from('srp_erp_employee_medical_information');
        //  $isexist = $this->db->get()->row_array('id');

        //header info
        $data['empID'] = $this->input->post('empID');
        $data['empCode'] = $this->input->post('empCode');
        $data['eeGroup'] = $this->input->post('eeGroup');
        $data['eeSubGroup'] = $this->input->post('eeSubGroup');
        $data['fromDate'] = input_format_date($this->input->post('startDate'), $date_format_policy);
        $data['empName'] = $this->input->post('empName');
        $data['perse_area'] = $this->input->post('perse_area');
        $data['costCenter'] = $this->input->post('costCenter');
        $data['toDate'] = input_format_date($this->input->post('toDate'), $date_format_policy);
        $data['chngDate'] = input_format_date($this->input->post('chngDate'), $date_format_policy);

        $data['hospital'] = $this->input->post('hospital');
        $data['foodHandlerYN'] = $this->input->post('foodHandlerYN');

        //medical examination
        $data['audiogram'] = $this->input->post('audiogram');
        $data['visualAcuity_colorVision'] = $this->input->post('visualAcuity_colorVision');

        //physical examination
        $data['height'] = $this->input->post('height');
        $data['weight'] = $this->input->post('weight');
        $data['bmi'] = $this->input->post('bmi');
        $data['waistLine'] = $this->input->post('waistLine');
        $data['smoker'] = $this->input->post('smoker');
        $data['bp_pr'] = $this->input->post('bp_pr');
        $data['respiratoryRate_temperature'] = $this->input->post('respiratoryRate_temperature');
        $data['neurological'] = $this->input->post('neurological');
        $data['lymphNode'] = $this->input->post('lymphNode');
        $data['chest_lungs'] = $this->input->post('chest_lungs');
        $data['abdomen'] = $this->input->post('abdomen');
        $data['extremities'] = $this->input->post('extremities');
        $data['allergies'] = $this->input->post('allergies');
        $data['currentMedication'] = $this->input->post('currentMedication');
        $data['medicalCondition'] = $this->input->post('medicalCondition');

        //laboratery examination
        $data['ecg_akg'] = $this->input->post('ecg_ekg');
        $data['bloodGroup'] = $this->input->post('bloodGroup');
        $data['cbc'] = $this->input->post('cbc');
        $data['fbs'] = $this->input->post('fbs');
        $data['hba1c'] = $this->input->post('hba1c');
        $data['totCholestterol'] = $this->input->post('totCholestterol');
        $data['hdl'] = $this->input->post('hdl');
        $data['ldl'] = $this->input->post('ldl');
        $data['triglycerides'] = $this->input->post('triglycerides');
        $data['serumCreatinine'] = $this->input->post('serumCreatinine');
        $data['ast'] = $this->input->post('ast');
        $data['alt'] = $this->input->post('alt');
        $data['hepatitis_B'] = $this->input->post('hepatitis_B');
        $data['hepatitis_C'] = $this->input->post('hepatitis_C');
        $data['hiv'] = $this->input->post('hiv');
        $data['urineAnalysis'] = $this->input->post('urineAnalysis');
        $data['stoolAnalysis'] = $this->input->post('stoolAnalysis');
        $data['throatSwab'] = $this->input->post('throatSwab');
        $data['weightCategory'] = $this->input->post('weightCategory');
        $data['diabetes'] = $this->input->post('diabetes');
        $data['diabetes'] = $this->input->post('diabetes');
        $data['nameAndSignatureOfAttendingPhysician'] = $this->input->post('nameAndSignatureOfAttendingPhysician');
        $data['documentDate'] = $this->input->post('documentDate');

        if (!empty($medicalInformationID)) {
            $data['modifiedPCID'] = $this->common_data['current_pc'];
            $data['modifiedUserID'] = $this->common_data['current_userID'];
            $data['modifiedUserName'] = $this->common_data['current_user'];
            $data['modifiedDateTime'] = $this->common_data['current_date'];

            //$this->db->set('timestamp', current_date(true));
            $this->db->where('id', $medicalInformationID);
            $header = $this->db->update('srp_erp_employee_medical_information', $data);

        } else {
            $data['companyID'] = current_companyID();
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['timestamp'] = current_date(true);
            
            $header = $this->db->insert('srp_erp_employee_medical_information', $data);

            $last_id = $this->db->insert_id();
        }

        if($header){

            $this->db->select('id');
            $this->db->where('empID', trim($empID));
            $this->db->where('companyID', $companyid);
            $this->db->from('srp_erp_employee_medical_categories');
            $isCatexist = $this->db->get()->row_array('id');

            $data_h['empID'] = $this->input->post('empID');
            $data_h['name'] = $this->input->post('empName');

            //category
            $data_h['category1'] = $this->input->post('category1');
            $data_h['category2'] = $this->input->post('category2');
            $data_h['category3'] = $this->input->post('category3');
            $data_h['category4'] = $this->input->post('category4');
            $data_h['category5'] = $this->input->post('category5');
            $data_h['category6'] = $this->input->post('category6');

            //recommendation
            $data_h['dietControlYN'] = $this->input->post('dietControlYN');
            $data_h['exerciseYN'] = $this->input->post('excerciseYN');
            $data_h['increaseFluidIntakeYN'] = $this->input->post('increaseFluidIntakeYN');
            $data_h['furtherTestingYN'] = $this->input->post('furtherTestingYN');
            $data_h['furtherTestingText'] = $this->input->post('furtherTestingText');
            $data_h['nextCheckupDate'] = input_format_date($this->input->post('nextCheckupDate'), $date_format_policy);
            $data_h['healthyLifeStyle'] = $this->input->post('furtherTestingYN');
            $data_h['knowYourBody'] = $this->input->post('furtherTestingText');

            if (!empty($medicalcategoryID)) {
                $data_h['modifiedPCID'] = $this->common_data['current_pc'];
                $data_h['modifiedUserID'] = $this->common_data['current_userID'];
                $data_h['modifiedUserName'] = $this->common_data['current_user'];
                $data_h['modifiedDateTime'] = $this->common_data['current_date'];

                $this->db->where('id', $isCatexist['id']);
                $this->db->update('srp_erp_employee_medical_categories', $data_h);

            }else {
                $data_h['informationAutoID'] = $last_id;
                $data_h['companyID'] = current_companyID();
                $data_h['createdPCID'] = $this->common_data['current_pc'];
                $data_h['createdUserID'] = $this->common_data['current_userID'];
                $data_h['createdDateTime'] = $this->common_data['current_date'];
                $data_h['createdUserName'] = $this->common_data['current_user'];
                $data_h['timestamp'] = current_date(true);
                $this->db->insert('srp_erp_employee_medical_categories', $data_h);

            }

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Medical details Save Failed ');
    
            } else {
                $this->db->trans_commit();
                return array('s', 'Medical details Save Successfully.');
            }
        }

    }

    function delete_medical_details()
    {
        $medicalInformationID = trim($this->input->post('medicalInformationID') ?? '');
        $deleted = $this->db->delete('srp_erp_employee_medical_information', array('id' => $medicalInformationID));

        if($deleted){
            $this->db->delete('srp_erp_employee_medical_categories', array('informationAutoID' => $medicalInformationID)); 
            return true;
        }else{
            return false;
        }
       
    }



/** start : almansoori chnges for personal application */
    /**save MSE personal action header */

    function save_mse_personal_action_header(){
        $this->db->trans_start();
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $id = trim($this->input->post('id') ?? '');
        $actionType = $this->input->post('actionType');
        $empName = $this->input->post('empName');
        $documentDate = $this->input->post('actionDate');
        $remarks = $this->input->post('remarks');
        
        $date_format_policy = date_format_policy();
        $formated_documentDate = input_format_date($documentDate, $date_format_policy);
    
        if(isset($remarks) && !empty($id)){
            $data['Remarks'] = $remarks;
            $data['modifiedPCID'] = $this->common_data['current_pc'];
            $data['modifiedUserID'] = $this->common_data['current_userID'];
            $data['modifiedUserName'] = $this->common_data['current_user'];
            $data['modifiedDateTime'] = $this->common_data['current_date'];
    
            $this->db->where('id', $id);
            $this->db->update('srp_erp_personal_action', $data);
    
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 1, 'message' => 'Failed to update remark !');
            } else {
                $this->db->trans_commit();
                return array('status' => 0, 'message' => 'Remark updated successfully !', 'masterID' => $id);
            }
        }
    
        if(empty($id))
        {
            /**get manager id and designation */
            $manager = $this->db->query("SELECT
            srp_erp_employeemanagers.managerID AS managerid,
            srp_employeesdetails.EmpDesignationId AS managerdesignation, 
            srp_employeesdetails.ECode AS employee_code, 
            srp_employeesdetails.EDOJ AS EDOJ
            FROM
                srp_erp_employeemanagers
                JOIN srp_employeesdetails ON srp_erp_employeemanagers.managerID = srp_employeesdetails.EIdNo 
            WHERE
                srp_erp_employeemanagers.empID = {$empName} 
                AND srp_erp_employeemanagers.companyID = {$companyID} 
                AND srp_erp_employeemanagers.active = 1
            ")->row_array();
        
            /**get employee designation */
            $emp_designation = $this->db->query("SELECT
                DesignationID  
            FROM
                srp_employeedesignation
            WHERE
                EmpID = {$empName} 
                AND Erp_companyID = {$companyID} 
                AND isActive = 1
            ")->row_array();
        
            if($empName){
                $Erp_companyID = $this->db->query("SELECT Erp_companyID 
                FROM 
                    srp_employeesdetails 
                WHERE 
                    EIdNo = {$empName} 
                ")->row_array('Erp_companyID');
            }
            $Erp_companyID = $this->db->escape($Erp_companyID['Erp_companyID']);
    

            /**Insert PAA*/
                $this->load->library('sequence');
    
                $data['actionType'] = $actionType;
                $data['empID'] = $empName;
                $data['documentDate'] = $formated_documentDate;//$documentDate;
                $data['documentID'] = 'PAA';
                $data['documentCode'] = $this->sequence->sequence_generator($data['documentID']);
                $data['Remarks'] = $remarks;
                $data['empDesignationID'] = $emp_designation['DesignationID'];
                $data['managerID'] = $manager['managerid'];
                $data['managerDesignationID'] = $manager['managerdesignation'];
    
                $data['companyID'] = current_companyID();
                $data['createdUserGroup'] = $this->common_data['user_group'];
                $data['createdPCID'] = $this->common_data['current_pc'];
                $data['createdUserID'] = $this->common_data['current_userID'];
                $data['createdDateTime'] = $this->common_data['current_date'];
                $data['createdUserName'] = $this->common_data['current_user'];
                $data['timestamp'] = current_date(true);
    
                $this->db->insert('srp_erp_personal_action', $data);
                $last_id = $this->db->insert_id();
    
    
            /**insert details into srp_erp_personal_action_details */
            $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue,NewValue, currentText, NewValueText)
                    SELECT 
                        '{$last_id}',
                        'Company',
                        Erp_companyID,
                        Erp_companyID AS Erp_companyIDNew,
                        CONCAT(srp_erp_company.company_code, ' | ' , srp_erp_company.company_name),
                        CONCAT(srp_erp_company.company_code, ' | ' , srp_erp_company.company_name)  AS  cname
                        FROM
                            srp_employeesdetails
                            LEFT JOIN srp_erp_company ON srp_employeesdetails.Erp_companyID = srp_erp_company.company_id
                        WHERE
                            srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                        '{$last_id}',
                        'Division',
                        srp_departmentmaster.DepartmentMasterID,
                        srp_departmentmaster.DepartmentMasterID AS idnew,
                        srp_departmentmaster.DepartmentDes,
                        srp_departmentmaster.DepartmentDes AS d_des
                    FROM
                        srp_employeesdetails
                        JOIN srp_empdepartments ON srp_employeesdetails.EIdNo = srp_empdepartments.EmpID
                        LEFT JOIN srp_departmentmaster ON srp_empdepartments.DepartmentMasterID = srp_departmentmaster.DepartmentMasterID
                    WHERE
                        srp_employeesdetails.EIdNo = {$empName}
                        AND srp_employeesdetails.Erp_companyID = {$companyID} 
                    UNION ALL 
                    SELECT 
                            '{$last_id}',
                            'Name',
                            EIdNo,
                            EIdNo AS EIdNoNew,  
                            Ename2 ,
                            Ename2 AS Ename2New
                        FROM
                            srp_employeesdetails
                        WHERE
                            srp_employeesdetails.Erp_companyID = {$companyID}
                            AND srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                        '{$last_id}',
                        'Designation',
                        EmpDesignationId, 
                        EmpDesignationId AS EmpDesignationIdNew,
                        DesDescription,
                        DesDescription AS DesDescriptionNew
                    FROM
                        srp_employeesdetails 
                        LEFT JOIN srp_designation ON srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID 
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID} 
                        AND EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                        '{$last_id}',
                        'EmpCODE',
                        EIdNo, 
                        EIdNo AS EIdNoNew,
                        EmpSecondaryCode ,
                        EmpSecondaryCode AS EmpSecondaryCodeNew
                        FROM
                            srp_employeesdetails
                        WHERE
                            srp_employeesdetails.Erp_companyID = {$companyID}
                            AND srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                        '{$last_id}',
                        'Grade',
                        srp_employeesdetails.gradeID AS gradeID, 
                         srp_employeesdetails.gradeID AS gradeIDNew,
                        gradeDescription,
                        gradeDescription AS gradeDescriptionNew
                    FROM
                        srp_employeesdetails 
                        LEFT JOIN srp_erp_employeegrade ON srp_employeesdetails.gradeID = srp_erp_employeegrade.gradeID 
                    WHERE 
                        srp_employeesdetails.Erp_companyID = {$companyID} 
                        AND srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                            '{$last_id}',
                            'EDOJ',
                            EIdNo,
                            EIdNo AS EIdNoNew, 
                            EDOJ ,
                            EDOJ AS EDOJNew
                        FROM
                            srp_employeesdetails
                        WHERE
                            srp_employeesdetails.Erp_companyID = {$companyID}
                            AND srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL 
                    SELECT 
                        '{$last_id}', 
                        'Last Review Date', 
                        empID,
                        empID AS empIDNew, 
                        MAX(documentDate) AS max_documentDate,
                        MAX(documentDate) AS max_documentDateNew
                       
                    FROM 
                        srp_erp_personal_action
                    WHERE 
                        empID = {$empName} 
                        AND {$last_id} != id 
                    UNION ALL 
                    SELECT 
                        '{$last_id}', 
                        'Last Increment Amount', 
                        employeeNo, 
                        employeeNo AS employeeNoNew,
                        SUM(transactionAmount) AS last_increment_amount,
                        SUM(transactionAmount) AS last_increment_amountNew
                    FROM 
                        srp_erp_pay_salarydeclartion AS t1 
                    WHERE 
                        sdMasterID = (
                            SELECT MAX(sdMasterID)  
                            FROM srp_erp_pay_salarydeclartion AS t2 
                            WHERE t1.employeeNo = t2.employeeNo 
                        ) 
                        AND employeeNo = {$empName} 
                    GROUP BY 
                        employeeNo 
                    UNION ALL
                     SELECT
                        '{$last_id}',
                        'Segment',
                        srp_erp_segment.segmentID,
                        srp_erp_segment.segmentID AS idNew,
                        CONCAT(srp_erp_segment.segmentCode, '-' , srp_erp_segment.description),
                        CONCAT(srp_erp_segment.segmentCode, '-' , srp_erp_segment.description) AS dt_new
                    FROM
                        srp_employeesdetails
                        LEFT JOIN srp_erp_segment ON srp_employeesdetails.segmentID = srp_erp_segment.segmentID
                    WHERE
                        srp_employeesdetails.EIdNo = {$empName}
                        AND srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_erp_segment.status = 1
                        AND srp_erp_segment.isShow = 1
                    UNION ALL
                    SELECT
                        '{$last_id}',
                        'Action Type',
                        documentCategoryID,
                        documentCategoryID AS idNew,
                        categoryDescription,
                        categoryDescription AS dt_new
                    FROM
                        srp_erp_system_document_categories
                    WHERE
                        documentCategoryID = {$actionType}
                        AND documentID = 'PAA'
                    UNION ALL
                    SELECT 
                        '{$last_id}',
                        'Leave Group',
                        srp_employeesdetails.leaveGroupID AS leaveGroupID, 
                       srp_employeesdetails.leaveGroupID AS leaveGroupIDNew, 
                        description ,
                        description AS descriptionNew
                    FROM
                        srp_employeesdetails
                        LEFT JOIN srp_erp_leavegroup ON srp_employeesdetails.leaveGroupID = srp_erp_leavegroup.leaveGroupID
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_employeesdetails.EIdNo = {$empName}
                    UNION ALL
                    SELECT 
                        '{$last_id}',
                        'Location',
                        srp_employeesdetails.locationID AS locationID, 
                        srp_employeesdetails.locationID AS locationIDNew,
                        locationName,
                        locationName AS locationNameNew
                    FROM
                        srp_employeesdetails 
                        LEFT JOIN srp_erp_location ON srp_employeesdetails.locationID = srp_erp_location.locationID 
                    WHERE
                        srp_employeesdetails.Erp_companyID = {$companyID} 
                        AND srp_employeesdetails.EIdNo = {$empName}
                    UNION ALL
                    SELECT 
                        '{$last_id}',
                        'Status',
                        familyStatusID,
                        familyStatusID AS familyStatusID_new, 
                        CASE 
                            WHEN familyStatusID = 0 OR familyStatusID IS NULL THEN 'Single'
                            WHEN familyStatusID = 1 THEN 'Family'
                        ELSE '-' 
                    END AS familystatus,
                         CASE 
                            WHEN familyStatusID = 0 OR familyStatusID IS NULL THEN 'Single'
                            WHEN familyStatusID = 1 THEN 'Family'
                        ELSE '-' 
                    END AS familystatus_new  
                    FROM
                        srp_employeesdetails 
                    WHERE 
                        srp_employeesdetails.Erp_companyID = {$companyID} 
                        AND srp_employeesdetails.EIdNo = {$empName} 
                    UNION ALL
                    SELECT
                        '{$last_id}',
                        'Periodical Medical Date',
                        id,
                        id AS idNew,
                        DATE_FORMAT(MAX(nextCheckupDate),'{$convertFormat}') AS nextCheckupDate,
                        DATE_FORMAT(MAX(nextCheckupDate),'{$convertFormat}') AS nextCheckupDate_new
                    FROM
                        srp_erp_employee_medical_categories
                    WHERE
                        empID = {$empName}
                        AND companyID = {$companyID}
                    UNION ALL
                    SELECT
                        '{$last_id}',
                        'currency',
                        payCurrencyID,
                        payCurrencyID AS payCurrencyID_new,
                        payCurrency AS payCurrency,
                        payCurrency AS payCurrency_new
                    FROM
                        srp_employeesdetails
                    WHERE
                        EIdNo = {$empName} 
                        AND Erp_companyID = {$companyID}
            ");

            /**check weather employee has promoted or not */
                $this->db->select('*');
                $this->db->where('actionType', $actionType);
                $this->db->where('empID', $empName);
                $this->db->where('companyID', $companyID);
                $this->db->from('srp_erp_personal_action');
                $isexist = $this->db->get()->row_array();
                if(!empty($isexist)){
                    /**if employee has promoted */
                    $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue,NewValue, currentText, NewValueText) 
                        SELECT
                            '{$last_id}',
                            'Last Promotion Date',
                            id,
                            id AS idNew,
                            MAX(documentDate) AS documentDate,
                            MAX(documentDate) AS documentDate_new
                        FROM
                            srp_erp_personal_action
                        WHERE
                            actionType = 5
                            AND empID = {$empName}
                            AND companyID = {$companyID}
                    ");
                }else{
                    /**if employee has not promoted */
                    $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentText) 
                        VALUES
                            ({$last_id}, 'Last Promotion Date', 'Not Promoted')
                    ");
                }
    

                $this->db->query("INSERT INTO srp_erp_personal_action_details (paID, fieldType, currentValue)
                VALUES
                    ({$last_id}, 'newEngagment', '-'),
                    ({$last_id}, 'effectiveDate', '-'), 
                    ({$last_id}, 'project', '-'),
                    ({$last_id}, 'projectCode', '-'),
                    ({$last_id}, 'global', '-'),
                    ({$last_id}, 'onBudget', '-'),
                    ({$last_id}, 'budgetreferenceNumber', '-'),
                    ({$last_id}, 'ifNotOnBudget', '-'),
                    ({$last_id}, 'overtime_entitlment', '-'),
                    ({$last_id}, 'workLeaveSchedule', '-'),
                    ({$last_id}, 'divisionOrProject', '-'),
                    ({$last_id}, 'remark1', '-'),
                    ({$last_id}, 'remark2', '-'),
                    ({$last_id}, 'allowance', '-')
                ");
    
                /**insert salary categoris */
                $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, salaryCategoryID, fieldType, currentText , NewValueText ) 
                    SELECT
                    '{$last_id}' AS paID,
                    srp_erp_pay_salarycategories.salaryCategoryID,
                    srp_erp_pay_salarycategories.salaryDescription AS fieldType ,
                    amt AS currentValue,
                    amt AS currentValueNew
                    FROM
                        srp_employeesdetails
                        JOIN srp_erp_pay_salarycategories ON srp_employeesdetails.Erp_companyID = srp_erp_pay_salarycategories.companyID
                        LEFT JOIN ( SELECT employeeNo, sum( transactionAmount ) AS amt, salaryCategoryID FROM srp_erp_pay_salarydeclartion GROUP BY employeeNo, salaryCategoryID ) salary ON srp_erp_pay_salarycategories.salaryCategoryID = salary.salaryCategoryID 
                        AND salary.employeeNo = srp_employeesdetails.EIdNo 
                    WHERE
                        srp_employeesdetails.EIdNo = {$empName} 
                        AND srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_erp_pay_salarycategories.salaryCategoryType = 'A' 
                        AND (amt IS NOT NULL OR amt != 0)
                ");

                /**insert basic salary*/
                $this->db->query("INSERT INTO srp_erp_personal_action_details ( paID, fieldType, currentText , NewValueText ) 
                    SELECT
                        '{$last_id}' AS paID,
                        'basicSalary',
                        amt AS currentValue,
                        amt AS currentValueNew 
                    FROM
                        srp_employeesdetails
                        JOIN srp_erp_pay_salarycategories ON srp_employeesdetails.Erp_companyID = srp_erp_pay_salarycategories.companyID
                        LEFT JOIN ( SELECT employeeNo, sum( transactionAmount ) AS amt, salaryCategoryID FROM srp_erp_pay_salarydeclartion GROUP BY employeeNo, salaryCategoryID) salary ON srp_erp_pay_salarycategories.salaryCategoryID = salary.salaryCategoryID 
                        AND salary.employeeNo = srp_employeesdetails.EIdNo 
                    WHERE
                        srp_employeesdetails.EIdNo = {$empName}
                        AND srp_employeesdetails.Erp_companyID = {$companyID}
                        AND srp_erp_pay_salarycategories.salaryDescription = 'Basic Salary'
                ");
    
        }
    
        $this->db->trans_complete();
    
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('status' => 1, 'message' => 'Failed to Save !' . $this->db->_error_message());
        } else {
            $this->db->trans_commit();
            return array('status' => 0, 'message' => 'saved Successfully !', 'masterID' => $last_id);
        }
    
    }

    function mse_personal_application_get_template_data( $iDD = null ){
        $id = $this->input->post('id');
        if($iDD){
            $id = $iDD;
        }
        $data_array = array();
        $base_transferArray = array();

                $transfer_details = $this->db->query("SELECT
                    * 
                FROM
                    srp_erp_personal_action_details 
                WHERE
                    paID = {$id} 
                ")->result_array();
      
        
        foreach($transfer_details as $row){
            $base_transferArray[$row['fieldType']] = $row;
        }

        $data_array['transfer_details'] = $base_transferArray;
        //echo '<pre>';print_r( $data_array['transfer_details']);exit;
        return $data_array;
        
    }


    function update_persional_action_details_mse(){
        $id = $this->input->post('id');
        $fieldType = trim($this->input->post('fieldType') ?? '');
        $fieldValue = trim($this->input->post('fieldValue') ?? '');
        $fieldText = trim($this->input->post('fieldText') ?? '');
        $type = trim($this->input->post('type') ?? '');

        $data =array();
        if($type == 1){
            $data['NewValue'] = trim($fieldValue);
            $data['NewValueText'] = trim($fieldText);
        }else if($type == 2){
            if($fieldText){
                $data['NewValue'] = trim($fieldValue);
                $data['NewValueText'] = trim($fieldText);
            }else{
                $data['NewValueText'] = trim($fieldValue);
            }
        }
        
        $this->db->select('*');
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->where('fieldType', $fieldType);
        $this->db->from('srp_erp_personal_action_details');
        $isexist = $this->db->get()->row_array();

        if(!empty($isexist)){
            /**update  srp_erp_personal_action_details */
            $this->db->where('detailID', $isexist['detailID']);
            $this->db->update('srp_erp_personal_action_details', $data);

            return array('s','Updated Successfully');
        }else{
                $data_r['paID'] = trim($id);
                $data_r['fieldType'] = trim($fieldType);
                if($type == 1){
                    if(!empty($isexist['currentValue']) || !empty($isexist['currentText'])){
                        $data_r['currentValue'] = trim($fieldValue);
                        $data_r['currentText'] = trim($fieldText);
                    }
                    $data_r['NewValue'] = trim($fieldValue);
                    $data_r['NewValueText'] = trim($fieldText);
                }else if($type == 2){
                    if($fieldText){
                        if(!empty($isexist['currentValue']) || !empty($isexist['currentText'])){
                            $data_r['currentValue'] = trim($fieldValue);
                            $data_r['currentText'] = trim($fieldText);
                        }
                        $data_r['NewValue'] = trim($fieldValue);
                        $data_r['NewValueText'] = trim($fieldText);
                    }else{
                        $data_r['currentText'] = trim($fieldValue);
                        $data_r['NewValueText'] = trim($fieldValue);
                    }
                }

            $this->db->insert('srp_erp_personal_action_details', $data_r);

            return array('s','saved Successfully');
        }

    }

    function update_persional_action_details_actionCodeType_mse()
    {
        $id = $this->input->post('id');
        $fieldType = trim($this->input->post('fieldType') ?? '');

        $fieldValue = $this->input->post('fieldValue');
        $fieldText = $this->input->post('fieldText');

        $data =array();
        $data['NewValue'] = trim($fieldValue);
        $data['NewValueText'] = trim($fieldText);

        /**update activityCode */
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->where('fieldType', $fieldType);
        $x = $this->db->update('srp_erp_personal_action_details', $data);

        if ($this->db->affected_rows() > 0) {
            return array('s', 'updated successfully.');
        } else {
            return array('e', 'Failed to update');
        }

    }


    function fetch_personal_action_template_data_mse($id)
    {
        $convertFormat = convert_date_format_sql();
        $data = array();
        $this->db->select('
            srp_erp_personal_action.id AS id,
            srp_erp_personal_action.documentID AS documentID,
            srp_erp_personal_action.documentCode AS documentCode, 
            DATE_FORMAT(srp_erp_personal_action.documentDate, \'' . $convertFormat . '\') AS documentDate,
            srp_erp_personal_action.Remarks AS Remarks,
            srp_erp_personal_action.confirmedYN AS confirmedYN,
            srp_erp_personal_action.confirmedByEmpID AS confirmedByEmpID,
            srp_erp_personal_action.confirmedByName AS confirmedByName,
            srp_erp_personal_action.approvedYN AS approvedYN,
            srp_erp_personal_action.approvedByEmpName AS approvedByEmpName,
            DATE_FORMAT(srp_erp_personal_action.approvedDate, \'' . $convertFormat . '\') AS approvedDate,
            srp_employeesdetails.ECode AS ECode,
            srp_erp_personal_action.currentLevelNo AS currentLevelNo,
            srp_erp_personal_action.createdUserID AS createdUserID,
            srp_erp_personal_action.createdDateTime AS createdDateTime,
            srp_erp_personal_action.createdUserName AS createdUserName,
            srp_erp_personal_action.actionType AS actionType
        ');
        $this->db->where('id', $id);
        $this->db->from('srp_erp_personal_action');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_personal_action.empID');
        $data['master'] = $this->db->get()->row_array();

        $data['detail'] = $this->db->query("SELECT
                    * 
                FROM
                    srp_erp_personal_action_details 
                WHERE
                    paID = {$id} 
                    
                ")->result_array();


        $this->db->select('approvedYN, approvedDate, approvalLevelID,Ename1,Ename2,Ename3,Ename4');
        $this->db->where('documentSystemCode', $id);
        $this->db->where('documentID', 'PAA');
        $this->db->from('srp_erp_documentapproved');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.ECode = srp_erp_documentapproved.approvedEmpID');
        $data['approval'] = $this->db->get()->result_array();

        return $data;
    }

    /**approval part */
    function personal_action_confirmation_mse()
    {
        $this->db->trans_start(); 

        $id = trim($this->input->post('id') ?? '');
        $companyID = current_companyID();

        $this->db->select('*');
        $this->db->where('id', trim($this->input->post('id') ?? ''));
        $this->db->from('srp_erp_personal_action');
        $pa_data = $this->db->get()->row_array();

        $personal_action_type = $pa_data['actionType'];

        
        $this->db->select('*');
        $this->db->where('documentCategoryID', $personal_action_type);
        $this->db->from('srp_erp_system_document_categories');
        $personal_action_name = $this->db->get()->row_array();

        $this->db->select('*');
        $this->db->where('documentID', 'PAA');
        $this->db->where('typeID', $personal_action_type);
        $this->db->where('companyID', $companyID);
        $this->db->from('srp_erp_approvalusers');
        $this->db->group_by('typeID');
        $paa_docs_in_approvalusers_TB = $this->db->get()->row_array();
        
        /**check status */
        $this->db->select('id');
        $this->db->where('id', trim($this->input->post('id') ?? ''));
        $this->db->where('confirmedYN', 1);
        $this->db->from('srp_erp_personal_action');
        $Confirmed = $this->db->get()->row_array();
        if (!empty($Confirmed)) {
            return array('w', 'Personal Application already confirmed');
        }

        $this->db->select('*');
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->from('srp_erp_personal_action_details');
        $details = $this->db->get()->result_array();

        $this->db->select('approvalType');
        $this->db->where('documentID', 'PAA');
        $this->db->where('companyID', $companyID);
        $this->db->from('srp_erp_documentcodemaster');
        $check_approvalType = $this->db->get()->row_array();

        if(!empty($paa_docs_in_approvalusers_TB))
        {
            if($check_approvalType['approvalType'] == 2) /**less than one year approval */
            {
                        $empID = $pa_data['empID'];
                        $documentDate = $pa_data['documentDate'];

                        $this->db->select('typeID');
                        $this->db->where('documentID', 'PAA');
                        $this->db->where('typeID', $personal_action_type);
                        $this->db->where('criteriaID', 1);
                        $this->db->where('companyID', $companyID);
                        $this->db->from('srp_erp_approvalusers');
                        $this->db->group_by('typeID');
                        $isExist_withinOneYear_criteria_Doc = $this->db->get()->row_array();


                        $this->load->library('approvals');
                        $isAutoApproval = get_document_auto_approval_mse('PAA', $personal_action_type);

                        $documentName = 'Personal Action Approval';
                        $tableName = 'srp_erp_personal_action';
                        $documentCode = $pa_data['documentCode'];
                        $createdDate = $pa_data['createdDateTime'];
                        $masterID = $id;

                        if ($isAutoApproval == 0)  // If auto approval
                        {
                            $this->approvals->auto_approve($masterID, $tableName, 'id', 'PAA', $documentCode, $createdDate);

                            $this->db->trans_complete();
                            if ($this->db->trans_status() === true) {
                                $this->db->trans_commit();
                                return ['s', 'Document is Auto Approved successfully'];
                            } else {
                                $this->db->trans_rollback();
                                return ['e', 'Error in Auto approval process'];
                            }
                        }

                        if($isAutoApproval == 1)
                        {
                            $approvals_status = $this->approvals->CreateApproval('PAA', $masterID, $documentCode, $documentName, $tableName, 'id', 0, $createdDate, null, null, null, $personal_action_type);
                        }

                        if ($approvals_status == 3)
                        {
                            $this->db->trans_rollback();
                            return ['w', 'There is no user exists to perform <b>Personal Action approval</b> for this document.'];
                        }
                        
                        if($approvals_status == 1)
                        {
                            if(!empty($isExist_withinOneYear_criteria_Doc)){
                                $data = array(
                                    'confirmedYN' => 1,
                                    'confirmedDate' => $this->common_data['current_date'],
                                    'confirmedByEmpID' => $this->common_data['current_userID'],
                                    'confirmedByName' => $this->common_data['current_user'],
                                    'criteriaID' => 1,
                                );

                                $this->db->where('id', trim($this->input->post('id') ?? ''));
                                $this->db->update('srp_erp_personal_action', $data);

                                if ($this->db->affected_rows() > 0){
                                    $this->db->trans_commit();
                                                
                                    $firbase_status = null;
                                    if($firbase_status){
                                        /*** Firebase Mobile Notification*/
                                        $this->db->select('managerID');
                                        $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
                                        $this->db->where('active', 1);
                                        $this->db->from('srp_erp_employeemanagers');
                                        $managerid = $this->db->get()->row_array();
                
                                        $token_android = firebaseToken($managerid["managerID"], 'android');
                                        $token_ios = firebaseToken($managerid["managerID"], 'apple');
                
                                        $firebaseBody = $pa_data['createdUserName'] . " has applied for a personal action.";
                
                                        $this->load->library('firebase_notification');
                                        if(!empty($token_android)) {
                                            $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_android, 2, $pa_data['documentCode'], "PAA", $id, "android");
                                        }
                                        if(!empty($token_ios)) {
                                            $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_ios, 2, $pa_data['documentCode'], "PAA", $id, "apple");
                                        }
                                    }
                                    return array('s', 'Create Approval : ' . $pa_data['documentCode'] . ' Approvals Created Successfully ');
                                
                                }else{
                                    return array('w', 'Approval Created. but, the document('. $documentCode .') Not added to Criteria based approval');
                                }

                            }else{
                                $this->db->trans_commit();
                                                
                                $firbase_status = null;
                                if($firbase_status){
                                    /*** Firebase Mobile Notification*/
                                    $this->db->select('managerID');
                                    $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
                                    $this->db->where('active', 1);
                                    $this->db->from('srp_erp_employeemanagers');
                                    $managerid = $this->db->get()->row_array();
            
                                    $token_android = firebaseToken($managerid["managerID"], 'android');
                                    $token_ios = firebaseToken($managerid["managerID"], 'apple');
            
                                    $firebaseBody = $pa_data['createdUserName'] . " has applied for a personal action.";
            
                                    $this->load->library('firebase_notification');
                                    if(!empty($token_android)) {
                                        $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_android, 2, $pa_data['documentCode'], "PAA", $id, "android");
                                    }
                                    if(!empty($token_ios)) {
                                        $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_ios, 2, $pa_data['documentCode'], "PAA", $id, "apple");
                                    }
                                }
                                return array('s', 'Create Approval : ' . $pa_data['documentCode'] . ' Approvals Created Successfully ');
                            }
                    
                        } else {
                            $this->db->trans_rollback();
                            return array('e', 'some thing went wrong in create approval process', $approvals_status);
                        }
            }
            else{
                    $this->load->library('approvals');
                    $isAutoApproval = get_document_auto_approval_mse('PAA', $personal_action_type);

                    $documentName = 'Personal Action Approval';
                    $tableName = 'srp_erp_personal_action';
                    $documentCode = $pa_data['documentCode'];
                    $createdDate = $pa_data['createdDateTime'];
                    $masterID = $id;

                    if ($isAutoApproval == 0)  // If auto approval
                    {
                        $this->approvals->auto_approve($masterID, $tableName, 'id', 'PAA', $documentCode, $createdDate);

                        $this->db->trans_complete();
                        if ($this->db->trans_status() === true) {
                            $this->db->trans_commit();
                            return ['s', 'Document is Auto Approved successfully'];
                        } else {
                            $this->db->trans_rollback();
                            return ['e', 'Error in Auto approval process'];
                        }
                    }

                    if($isAutoApproval == 1)
                    {
                        $approvals_status = $this->approvals->CreateApproval('PAA', $masterID, $documentCode, $documentName, $tableName, 'id', 0, $createdDate, null, null, null, $personal_action_type);
                    }

                    if ($approvals_status == 3)
                    {
                        $this->db->trans_rollback();
                        return ['w', 'There is no user exists to perform <b>Personal Action approval</b> for this document.'];
                    }
                        
                    if($approvals_status == 1)
                    {
                                $this->db->trans_commit();
                                                
                                $firbase_status = null;
                                if($firbase_status){
                                    /*** Firebase Mobile Notification*/
                                    $this->db->select('managerID');
                                    $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
                                    $this->db->where('active', 1);
                                    $this->db->from('srp_erp_employeemanagers');
                                    $managerid = $this->db->get()->row_array();
            
                                    $token_android = firebaseToken($managerid["managerID"], 'android');
                                    $token_ios = firebaseToken($managerid["managerID"], 'apple');
            
                                    $firebaseBody = $pa_data['createdUserName'] . " has applied for a personal action.";
            
                                    $this->load->library('firebase_notification');
                                    if(!empty($token_android)) {
                                        $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_android, 2, $pa_data['documentCode'], "PAA", $id, "android");
                                    }
                                    if(!empty($token_ios)) {
                                        $this->firebase_notification->sendFirebasePushNotification("New Personal Action", $firebaseBody, $token_ios, 2, $pa_data['documentCode'], "PAA", $id, "apple");
                                    }
                                }

                        return array('s', 'Create Approval : ' . $pa_data['documentCode'] . ' Approvals Created Successfully ');
                    
                    } else {
                        $this->db->trans_rollback();
                        return ['e', 'some thing went wrong in create approval process', $approvals_status];
                    }
            }

        }else{
            return array('e', 'Approval Setup not configured for the ' . $personal_action_name['categoryDescription'] . ' Type Personal Action..!');
        }
    }

    function fetch_approval_user_modal_pa_mse(){
        $convertFormat = convert_date_format_sql();
        $companyID = $this->common_data['company_data']['company_id'];
        $documentSystemCode = $this->input->post('documentSystemCode');
        $personalAction_typeID = $this->input->post('typeId');

        $this->db->select('*');
        $this->db->from('srp_erp_personal_action');
        $this->db->join('srp_employeesdetails as empTB','srp_erp_personal_action.empID = empTB.EIdNo');
        $this->db->where('id', $documentSystemCode);
        $this->db->where_in('companyID', $companyID);
        $masterData = $this->db->get()->row_array();

        if($masterData){
            $claimEmpID = $masterData['empID'];

            //fetch levels and users
            $this->db->select("approvalLevelID,approvedYN,approvedDate,approvedComments,documentCode,docConfirmedByEmpID,
                DATE_FORMAT(documentDate,\"" . $convertFormat . "\") AS documentDate, '' AS Ename2,
                DATE_FORMAT(docConfirmedDate,\"" . $convertFormat . "\") AS docConfirmedDate,
                DATE_FORMAT(approvedDate,\"" . $convertFormat . "\") AS approveDate,
                ap.employeeID");
            $this->db->from('srp_erp_documentapproved');
            $this->db->join("srp_erp_approvalusers AS ap", "ap.levelNo = srp_erp_documentapproved.approvalLevelID AND ap.documentID = 'PAA' AND ap.companyID = '{$companyID}'");
            $this->db->where('srp_erp_documentapproved.documentID', 'PAA');
            $this->db->where('documentSystemCode', $documentSystemCode);
            $this->db->where('srp_erp_documentapproved.companyID', $companyID);
            $this->db->where('ap.typeId', $personalAction_typeID);
            $this->db->where('ap.companyID', $companyID);
            $this->db->order_by('srp_erp_documentapproved.approvalLevelID');
            $approved = $this->db->get()->result_array();

            $managers = $this->db->query("SELECT
                                                * 
                                            FROM
                                                (
                                                SELECT
                                                    repManager,
                                                    repManagerName,
                                                    currentLevelNo,
                                                    HOD,
                                                    HODName 
                                                FROM
                                                    srp_erp_personal_action AS paTB
                                                    JOIN srp_erp_documentapproved ON paTB.documentID = 'PAA'
                                                    LEFT JOIN (
                                                    SELECT
                                                        hod_id AS HOD,
                                                        EmpID AS EmpNew,
                                                        t3.Ename2 AS HODName 
                                                    FROM
                                                        srp_empdepartments AS dpt
                                                        JOIN srp_departmentmaster AS departmentmaster ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                                        JOIN srp_employeesdetails AS t3 ON departmentmaster.hod_id = t3.EIdNo 
                                                        AND t3.Erp_companyID = {$companyID} 
                                                    WHERE
                                                        dpt.isPrimary = 1 
                                                    ) AS HodData ON paTB.empID = HodData.EmpNew
                                                    LEFT JOIN (
                                                    SELECT
                                                        empID,
                                                        managerID AS repManager,
                                                        Ename2 AS repManagerName 
                                                    FROM
                                                        srp_erp_employeemanagers AS t1
                                                        JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo 
                                                    WHERE
                                                        active = 1 
                                                        AND t1.companyID = {$companyID}
                                                    ) AS repoManagerTB ON paTB.empID = repoManagerTB.empID 
                                                WHERE
                                                    paTB.companyID = {$companyID} 
                                                    AND id = {$documentSystemCode}
                                                    
                                                ) AS empData
                                                LEFT JOIN (
                                                SELECT
                                                    managerID AS topManager,
                                                    Ename2 AS topManagerName,
                                                    empID AS topEmpID 
                                                FROM
                                                    srp_erp_employeemanagers AS t1
                                                    JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo 
                                                    AND t2.Erp_companyID ={$companyID} 
                                                WHERE
                                                    t1.companyID = {$companyID}
                                                AND active = 1 
                                                ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID;
            
            ")->row_array();

            $data_arr = array();

            foreach($approved as $key => $approve_details){

                $employeeID = $approve_details['employeeID'];

                if($employeeID == -1){
                    $approved[$key]['Ename2'] =  $managers['repManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['repManager'];
                }elseif($employeeID == -2){
                    $approved[$key]['Ename2'] =  $managers['HODName'];
                    $approved[$key]['levelUserID'] =  $managers['HOD'];
                }elseif($employeeID == -3){
                    $approved[$key]['Ename2'] =  $managers['topManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['topManager'];
                }else{
                    $employee_details = fetch_employeeNo($employeeID);
                    $approved[$key]['Ename2'] =  $employee_details['Ename2'];
                    $approved[$key]['levelUserID'] =  $employee_details['EIdNo'];
                }


            }
            $data_arr['approved'] = $approved;
            $data_arr['documentCode'] = isset($data_arr['approved'][0]['documentCode']) ? $data_arr['approved'][0]['documentCode'] : '';
            $data_arr['documentDate'] = isset($data_arr['approved'][0]['documentDate']) ? $data_arr['approved'][0]['documentDate'] : '' ;
            $data_arr['confirmedDate'] = isset($data_arr['approved'][0]['docConfirmedDate']) ? $data_arr['approved'][0]['docConfirmedDate'] : '';

            $confirmedEmpID = isset($data_arr['approved'][0]['docConfirmedByEmpID']) ? $data_arr['approved'][0]['docConfirmedByEmpID'] : '';
            $emp = fetch_employeeNo($confirmedEmpID);
            //$data_arr['conformed_by']   = $emp['ECode'].' - '.$emp['Ename2'];
            $data_arr['confirmedByName'] = $emp['Ename2'];

            $data_arr['confirmedYN'] = $masterData['confirmedYN'];

        }

        return $data_arr;
    }


    function personal_application_approval_mse($autoappLevel=1,$system_idAP=0,$statusAP=0,$commentsAP=0)
    {
        $this->load->library('Approvals');

        $id = trim($this->input->post('id') ?? '');
        $this->db->select('*');
        $this->db->where('id', trim($this->input->post('id') ?? ''));
        $this->db->from('srp_erp_personal_action');
        $paa_data = $this->db->get()->row_array();

        $companyID = current_companyID();
        $approvals_status = null;

        /**validate promotion & designation change */
        $effectDate = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','effectiveDate')->get()->row_array();
        $employeeJoinDate = $this->db->select('currentText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','EDOJ')->get()->row_array();
        if($paa_data['actionType']==5 || $paa_data['actionType']==6){
            if(trim($this->input->post('po_status') ?? '')==1 && ( empty($effectDate['NewValueText']) || ($effectDate['NewValueText'] < $employeeJoinDate['currentText']) )){
                $this->session->set_flashdata('w', 'Effective date should be greater than employee <br/>join date [ ' . $employeeJoinDate['currentText'] . ' ]');
                return false;
            }else{
                if($autoappLevel==1){
                    $system_code = trim($this->input->post('id') ?? '');
                    $level_id = trim($this->input->post('level') ?? '');
                    $status = trim($this->input->post('po_status') ?? '');
                    $comments = trim($this->input->post('comments') ?? '');
                }else{
                    $system_code = $system_idAP;
                    $level_id = 0;
                    $status = $statusAP;
                    $comments = $commentsAP;
                    $_post['id']=$system_code;
                    $_post['level']=$level_id;
                    $_post['po_status']=$status;
                    $_post['comments']=$comments;
                }
        
                if($autoappLevel == 0){
                    $approvals_status = 1;
                }else{
                    $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'PAA');
                }
            }

        }else{
            if($autoappLevel==1){
                $system_code = trim($this->input->post('id') ?? '');
                $level_id = trim($this->input->post('level') ?? '');
                $status = trim($this->input->post('po_status') ?? '');
                $comments = trim($this->input->post('comments') ?? '');
            }else{
                $system_code = $system_idAP;
                $level_id = 0;
                $status = $statusAP;
                $comments = $commentsAP;
                $_post['id']=$system_code;
                $_post['level']=$level_id;
                $_post['po_status']=$status;
                $_post['comments']=$comments;
            }

            if($autoappLevel == 0){
                $approvals_status = 1;
            }else{
                $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'PAA');
            }
        }

        /**details for emails */
        $next_level = $level_id + 1;
        $masterID = $this->input->post('id');
        $actionType = $paa_data['actionType'];
        $email_details = $this->db->query("SELECT masterTB.empID, masterTB.id AS actionMasterID,masterTB.documentCode AS documentCode, 
                                                empTB.Ename2, empTB.EEmail, ECode AS empCode,masterTB.actionType
                                        FROM srp_erp_personal_action AS masterTB
                                        JOIN srp_employeesdetails AS empTB ON masterTB.empID=empTB.EIdNo
                                        WHERE masterTB.id={$masterID} AND masterTB.companyID={$companyID}
                                        ")->row_array();

        if($status == 1)
        {
                    if ($approvals_status == 1) {   /**document is fully approved */

                        $data = array(
                            'approvedYN' => 1,
                            'approvedDate' => $this->common_data['current_date'],
                            'approvedbyEmpID' => $this->common_data['current_userID'],
                            'approvedbyEmpName' => $this->common_data['current_user'],
                            'approvalComments' => $this->input->post('comments'),
                        );
                        $this->db->where('id', trim($this->input->post('id') ?? ''));
                        $this->db->update('srp_erp_personal_action', $data);

                        /**create monthly addition for */
                        $result_detail = false;
                        if($paa_data['actionType']==5 || $paa_data['actionType']==6){

                            $description = $paa_data['Remarks'];
                            $payroll_group = 0;
                            $isPayrollCategory = 1;
                            $isInitialDeclaration = 'N';
                            $isVariable = '';
                            $date_format_policy = date_format_policy();
                            $invDueDate = $paa_data['documentDate'];
                            $declaration_template = 2;
                            $documentDate = input_format_date($invDueDate, $date_format_policy);

                            $result_master = $this->save_employeedeclaration_master($description, $payroll_group, $isPayrollCategory, $isInitialDeclaration,$isVariable, $declaration_template, $documentDate);

                            if(!empty($result_master)){
                                //$details = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$id)->get()->result_array();
                                $masterID = $result_master;
                                $salaryTypes = $this->db->select('salaryCategoryID, currentText, NewValueText')->from('srp_erp_personal_action_details')->where('paID',$id)->get()->result_array();
                                $empID = $paa_data['empID'];
                                $salaryType = 'A';
                                $empJoinDate = $this->db->select('currentText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','EDOJ')->get()->row_array();
                                $effDate = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','effectiveDate')->get()->row_array();
                                $payDate = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','effectiveDate')->get()->row_array();
                                $narration = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('paID',$id)->where('fieldType','remark2')->get()->row_array();
                                $result_detail = $this->save_salary_declaration_detail($masterID, $salaryTypes, $empID, $salaryType, $effDate['NewValueText'], $payDate['NewValueText'], $narration['NewValueText'], $empJoinDate);
                            }

                            if($result_detail){
                                $this->session->set_flashdata('s', ' Approved Successfully');
                                $this->session->set_flashdata('i', ' Created Salary Declaration Successfully');
                            }else{
                                $this->session->set_flashdata('s', ' Approved Successfully ');
                                $this->session->set_flashdata('w', ' Create Salary Declaration Failed');
                            }

                        }else{
                            if($this->db->affected_rows() > 0){
                                $this->session->set_flashdata('s', ' Approved Successfully');
                            }else{
                                $this->session->set_flashdata('s', ' Approved Successfully ');
                                $this->session->set_flashdata('w', ' Master table not updated');
                            }
                        }

                        /**send email to the employee */
                        if($result_detail){
                            $param["body"] = 'Personal application ' . $email_details['documentCode'] . ' is Approved With Salary Declaration';
                        }else{
                            $param["body"] = 'Personal application ' . $email_details['documentCode'] . ' is Approved without Salary Declaration';
                        }
                        $param["empName"] = $email_details["Ename2"];
                            
                        $mailData = [
                                // 'approvalEmpID' => $email_details['empID'],
                                'empID' => $email_details['empID'],
                                'documentSystemCode' => $email_details['actionMasterID'],
                                'documentCode' => $email_details['documentCode'],
                                'documentID' =>  'PAA',
                                'empEmail' => $email_details["EEmail"],
                                'emailSubject' => 'Personal Action Approved',
                                'type' => "Personal Action Approval",
                                'param' => $param,
                        ];

                        /**send approved email to the personal action employee */
                        send_personal_action_approvalEmail($mailData);

                        return true;
                    } 


                    if($approvals_status == 2)  /**document not fully approved */ /**sending email to next approval users*/
                    {
                        //get empID next level approval user
                        $nextLevelemployeeID =  $this->db->query("SELECT DISTINCT
                            employeeID 
                        FROM
                            srp_erp_documentapproved
                            JOIN srp_erp_approvalusers ON srp_erp_documentapproved.approvalLevelID = srp_erp_approvalusers.levelNo 
                        WHERE
                            srp_erp_documentapproved.documentSystemCode = {$masterID} 
                            AND srp_erp_documentapproved.approvalLevelID = {$next_level}
                            AND srp_erp_documentapproved.companyID = {$companyID}
                            AND srp_erp_approvalusers.companyID = {$companyID} 
                            AND srp_erp_approvalusers.documentID = 'PAA' 
                            AND srp_erp_approvalusers.typeID = {$actionType}
                        ")->row_array();

                        //get personal action employee data
                        $emp_details = $this->db->query("SELECT masterTB.empID, masterTB.id AS actionMasterID,masterTB.documentCode AS documentCode, 
                            empTB.Ename2, empTB.EEmail, ECode AS empCode,masterTB.actionType
                            FROM srp_erp_personal_action AS masterTB
                            JOIN srp_employeesdetails AS empTB ON masterTB.empID=empTB.EIdNo
                            WHERE masterTB.id={$masterID} AND masterTB.companyID={$companyID}
                        ")->row_array();

                        $employee = $emp_details['empID'];
                        $email_empID = null;
                        $email = null;
                        $email_empName = null;

                        if($nextLevelemployeeID['employeeID'] == -1)
                        {
                            $manager_details = $this->db->query("	SELECT
                                emp_details.EIdNo,
                                emp_details.EEmail,
                                emp_details.Ename2
                            FROM
                                srp_employeesdetails AS emp_details
                            JOIN (
                                SELECT 
                                    srp_erp_employeemanagers.managerID
                                FROM
                                    srp_erp_employeemanagers 
                                WHERE
                                    srp_erp_employeemanagers.empID = {$employee}
                                    AND srp_erp_employeemanagers.active = 1 
                                    AND srp_erp_employeemanagers.companyID = {$companyID} 
                            ) AS repmanager_subquery ON emp_details.EIdNo = repmanager_subquery.managerID
                            ")->row_array();

                            $email_empID = $manager_details['EIdNo'];
                            $email = $manager_details['EEmail'];
                            $email_empName = $manager_details['Ename2'];

                        }
                        elseif ($nextLevelemployeeID['employeeID'] == -2)
                        {
                            $hod_detail = $this->db->query("SELECT
                                emp_details.EIdNo,
                                emp_details.EEmail,
                                emp_details.Ename2
                            FROM
                                srp_employeesdetails AS emp_details
                            JOIN (
                                SELECT 
                                    srp_dep.hod_id
                                FROM
                                    srp_departmentmaster AS srp_dep
                                JOIN srp_empdepartments AS emp_dep ON srp_dep.DepartmentMasterID = emp_dep.DepartmentMasterID
                                JOIN srp_employeesdetails AS emp_detail ON emp_dep.EmpID = emp_detail.EIdNo 
                                WHERE
                                    srp_dep.isActive = 1
                                    AND emp_dep.isactive = 1 
                                    AND emp_dep.Erp_companyID = {$companyID} 
                                    AND emp_dep.EmpID = {$employee}
                                ) AS hod_subquery ON emp_details.EIdNo = hod_subquery.hod_id
                            ")->row_array();

                            $email_empID = $hod_detail['EIdNo'];
                            $email = $hod_detail['EEmail'];
                            $email_empName = $hod_detail['Ename2'];

                        }
                        elseif ($nextLevelemployeeID['employeeID'] == -3)
                        {
                            $manager_detail = $this->db->query("	SELECT
                                emp_details.EIdNo,
                                emp_details.EEmail,
                                emp_details.Ename2
                            FROM
                                srp_employeesdetails AS emp_details
                            JOIN (
                                SELECT 
                                    srp_erp_employeemanagers.managerID
                                FROM
                                    srp_erp_employeemanagers 
                                WHERE
                                    srp_erp_employeemanagers.empID = {$employee}
                                    AND srp_erp_employeemanagers.active = 1 
                                    AND srp_erp_employeemanagers.companyID = {$companyID} 
                            ) AS repmanager_subquery ON emp_details.EIdNo = repmanager_subquery.managerID
                            ")->row_array();

                            $emp_id = $manager_detail['EIdNo'];

                            $top_manager_detail = $this->db->query("SELECT
                                emp_details.EIdNo,
                                emp_details.EEmail,
                                emp_details.Ename2
                            FROM
                                srp_employeesdetails AS emp_details
                            JOIN (
                            SELECT 
                                srp_erp_employeemanagers.managerID
                            FROM
                                srp_erp_employeemanagers 
                            WHERE
                                srp_erp_employeemanagers.empID = {$emp_id}
                                AND srp_erp_employeemanagers.active = 1 
                                AND srp_erp_employeemanagers.companyID = {$companyID} 
                            ) AS repmanager_subquery ON emp_details.EIdNo = repmanager_subquery.managerID
                            ")->row_array();

                            $email_empID = $top_manager_detail['EIdNo'];
                            $email = $top_manager_detail['EEmail'];
                            $email_empName = $top_manager_detail['Ename2'];

                        }else{
                            $emp_id = $nextLevelemployeeID['employeeID'];
                            $emp_det = $this->db->query("SELECT 
                                    *
                                FROM
                                    srp_employeesdetails 
                                WHERE
                                    EIdNo = {$emp_id}
                                    AND isActive = 1 
                                    AND isDischarged=0
                                    AND Erp_companyID = {$companyID} ")->row_array();

                            $email_empID = $emp_det['EIdNo'];
                            $email = $emp_det['EEmail'];
                            $email_empName = $emp_det['Ename2'];
                        }

                        //email
                        $param["empName"] = $email_empName;
                        $param["body"] = 'Personal application ' . $email_details['documentCode'] . ' is refer backed';
                        
                        $mailData = [
                            // 'approvalEmpID' => $email_details['empID'],
                            'empID' => $email_empID,
                            'documentSystemCode' => $email_details['actionMasterID'],
                            'documentCode' => $email_details['documentCode'],
                            'documentID' =>  'PAA',
                            'empEmail' => $email,
                            'emailSubject' => 'Personal Action Approved',
                            'type' => "Personal Action Approval",
                            'param' => $param,
                        ];

                        /**send approval email to the next approval user */
                        send_personal_action_approvalEmail($mailData);
                    
                        return true;
                    }
        }
        
        if($status == 2){
                if($approvals_status == 3){  /**document refered back */
                    
                    $param["empName"] = $email_details["Ename2"];
                    $param["body"] = 'Personal application ' . $email_details['documentCode'] . ' is refer backed';
                    
                    $mailData = [
                        // 'approvalEmpID' => $email_details['empID'],
                        'empID' => $email_details['empID'],
                        'documentSystemCode' => $email_details['actionMasterID'],
                        'documentCode' => $email_details['documentCode'],
                        'documentID' =>  'PAA',
                        'empEmail' => $email_details["EEmail"],
                        'emailSubject' => 'Personal Action Rejected',
                        'type' => "Personal Action Approval Refer-Back",
                        'param' => $param,
                    ];

                    /**send refer back email to the relevant employee */
                    send_personal_action_approvalEmail($mailData);
                    return true;
                }
        }
        
    }

    function save_employeedeclaration_master($description=null, $payroll_group=null, $isPayrollCategory=null, $isInitialDeclaration=null,$isVariable=null, $declaration_template=null, $documentDate=null)
    {

        $defaultCurrencyID = $this->common_data['company_data']['company_default_currencyID'];
        $defaultCurrency = $this->common_data['company_data']['company_default_currency'];

        $this->load->library('sequence');

        if($isVariable){
            $data['documentID'] = 'SVD';
            $data['documentSystemCode'] = $this->sequence->sequence_generator("SVD");
        }else{
            $data['documentID'] = 'SD';
            $data['documentSystemCode'] = $this->sequence->sequence_generator("SD");
        }

        $data['documentDate'] = trim($documentDate);
        if($this->uri->segment(3) == 'period_base'){
            $data['payrollGroup'] = $payroll_group;
        }
        $data['Description'] = $description;
        $data['isPayrollCategory'] = $isPayrollCategory;
        $data['declaration_template'] = $declaration_template;
        $data['isInitialDeclaration'] = $isInitialDeclaration;
        $data['transactionCurrencyID'] = $defaultCurrencyID;
        $data['transactionCurrency'] = $defaultCurrency;
        $data['transactionER'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = $this->common_data['company_data']['company_default_currencyID'];
        $data['companyLocalCurrency'] = $this->common_data['company_data']['company_default_currency'];
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalER'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
        $data['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingER'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $data['companyID'] = $this->common_data['company_data']['company_id'];
        $data['companyCode'] = $this->common_data['company_data']['company_code'];
        $data['createdUserGroup'] = $this->common_data['user_group'];
        $data['createdPCID'] = $this->common_data['current_pc'];
        $data['createdUserID'] = $this->common_data['current_userID'];
        $data['createdUserName'] = $this->common_data['current_user'];
        $data['createdDateTime'] = current_date();

        if($isVariable){
            $this->db->insert('srp_erp_variable_salarydeclarationmaster', $data);
        }else{
            $this->db->insert('srp_erp_salarydeclarationmaster', $data);
        }

        $last_id = $this->db->insert_id();

        if ($this->db->affected_rows() === FALSE) {
            return $last_id;
        } else {
            return $last_id;
        }
    }
    

    function save_salary_declaration_detail($masterID, $salaryTypes, $empID, $salaryType, $effDate, $payDate, $narration, $empJoinDate)
    {
            $masterDetail = $this->get_salaryDeclarationMaster($masterID);

            $companyID = $this->common_data['company_data']['company_id'];
            $companyCode = $this->common_data['company_data']['company_code'];
            $com_currency = $this->common_data['company_data']['company_default_currency'];
            $com_currencyDPlace = $this->common_data['company_data']['company_default_decimal'];
            $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
            $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
            $createdPCID = $this->common_data['current_pc'];
            $createdUserID = $this->common_data['current_userID'];
            $createdUserName = $this->common_data['current_user'];
            $createdUserGroup = $this->common_data['user_group'];
            $createdDateTime = current_date();

            $empJoinDate1 = $empJoinDate['currentText'];

            $date_format_policy = date_format_policy();

            $empJoinDate = input_format_date($empJoinDate['currentText'], $date_format_policy);
            $effDate = input_format_date($effDate, $date_format_policy);
            $payDate = input_format_date($payDate, $date_format_policy);

            if ($effDate < $empJoinDate) {
                $this->session->set_flashdata('e', 'Effective date should be greater than employee <br/>join date [ ' . $empJoinDate1 . ' ]');
                return false; //['e', 'Effective date should be greater than employee <br/>join date [ ' . $empJoinDate1 . ' ]'];
            }

            if ($payDate < $effDate) {
                $this->session->set_flashdata('e', 'Pay date should be greater than effective date');
                return false; //['e', 'Pay date should be greater than effective date'];
            }

            $lastPayrollProcessed = lastPayrollProcessedForEmp($empID, $masterDetail['isPayrollCategory']);

            $payDateFirst = date('Y-m-01', strtotime($payDate));
            // if ($lastPayrollProcessed >= $payDateFirst) {
            //     $this->session->set_flashdata('e', 'Pay date should be greater than [ ' . date('Y-F', strtotime($lastPayrollProcessed)) . ' ]');
            //     return false; //['e', 'Pay date should be greater than [ ' . date('Y-F', strtotime($lastPayrollProcessed)) . ' ]'];
            // }

            $data = array();

            if (!empty($salaryTypes)) {
                $i = 0;
                $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
                $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;

                $totalWorkingDays = getPolicyValues('SCD', 'All');
                $totalWorkingDays = (empty($totalWorkingDays)) ? 'totalWorkingDays' : $totalWorkingDays;
                $totalWorkingDays = (trim($totalWorkingDays) == 'LAST_DAY(effectiveDate)') ? 'totalWorkingDays' : $totalWorkingDays;

                $this->db->trans_start();
                foreach ($salaryTypes as $key => $catVal) {
                    $groupID = $this->db->query("SELECT groupID FROM srp_erp_payrollgroupemployees
                                                 WHERE companyID={$companyID} AND employeeID={$empID}")->row('groupID');

                    $tr_amount = (!empty($salaryTypes[$i]['NewValueText'])) ? str_replace(',', '', $salaryTypes[$i]['NewValueText']) : 0;
                    $localCon = currency_conversion($masterDetail['transactionCurrency'], $com_currency, $tr_amount);
                    $reportCon = currency_conversion($masterDetail['transactionCurrency'], $com_repCurrency, $tr_amount);
                    $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $com_currencyDPlace) : round($tr_amount, $com_currencyDPlace);
                    $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $com_repCurDPlace) : round($tr_amount, $com_repCurDPlace);
                    $dPlace = $masterDetail['transactionCurrencyDecimalPlaces'];

                    $currentAmount = (empty($salaryTypes[$key]['currentText'])) ? 0 : str_replace(',', '', $salaryTypes[$key]['currentText']);

                    $data['declarationMasterID'] = $masterID;
                    $data['employeeNo'] = $empID;
                    $data['accessGroupID'] = $groupID;
                    $data['salaryCategoryType'] = $salaryType;
                    $data['salaryCategoryID'] = $catVal['salaryCategoryID'];
                    $data['amount'] = $salaryTypes[$key]['NewValueText'];
                    $data['effectiveDate'] = $effDate;
                    $data['payDate'] = $payDate;
                    $data['narration'] = $narration;
                    $data['currentAmount'] = $currentAmount;

                    $data['transactionCurrencyID'] = $masterDetail['transactionCurrencyID'];
                    $data['transactionCurrency'] = $masterDetail['transactionCurrency'];
                    $data['transactionER'] = $masterDetail['transactionER'];
                    $data['transactionCurrencyDecimalPlaces'] = $dPlace;

                    $data['companyLocalCurrencyID'] = $localCon['currencyID'];
                    $data['companyLocalCurrency'] = $com_currency;
                    $data['companyLocalER'] = $localCon['conversion'];
                    $data['companyLocalCurrencyDecimalPlaces'] = $com_currencyDPlace;

                    $data['companyReportingCurrencyID'] = $reportCon['currencyID'];
                    $data['companyReportingCurrency'] = $com_repCurrency;
                    $data['companyReportingER'] = $reportCon['conversion'];
                    $data['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;
                    //$data['amount'] = $tr_amount;
                    $data['transactionAmount'] = $tr_amount;
                    $data['companyLocalAmount'] = $localAmount;
                    $data['companyReportingAmount'] = $reportAmount;

                    $data['companyID'] = $companyID;
                    $data['companyCode'] = $companyCode;
                    $data['createdPCID'] = $createdPCID;
                    $data['createdUserID'] = $createdUserID;
                    $data['createdUserName'] = $createdUserName;
                    $data['createdUserGroup'] = $createdUserGroup;
                    $data['createdDateTime'] = $createdDateTime;

                    $this->db->insert('srp_erp_salarydeclarationdetails', $data);

                    $insert_id = $this->db->insert_id();

                    /*** effective date and pay date should not be same month for balance calculation ***/
                    if (date('Y-m-01', strtotime($effDate)) != date('Y-m-01', strtotime($payDate))) {
                        /*** start of calculation for effective month balance ***/

                        $effDay = date('d', strtotime($effDate));
                        if ($effDay == 1) {
                            $balanceAmount = round($tr_amount, $dPlace);
                        } else {
                            /************************************************************************
                             * salaryProportionDays == 1 means
                             * formula will be (Salary / no of day in month) * worked days
                             ***********************************************************************/
                            if ($salaryProportionDays == 1) {
                                $totalDaysInEffectiveMonth = date('t', strtotime($effDate));
                                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                                $balanceAmount = ($tr_amount / $totalDaysInEffectiveMonth) * $balanceDate;
                                $balanceAmount = round($balanceAmount, $dPlace);
                            } else {
                                $totalDaysInEffectiveMonth = ($totalWorkingDays == 'totalWorkingDays') ? date('t', strtotime($effDate)) : $totalWorkingDays;
                                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                                $balanceAmount = round((($tr_amount * 12) / $salaryProportionDays) * $balanceDate, $dPlace);
                            }
                        }

                        /*** end of calculation for effective month balance ***/


                        /*** start of calculation for except effective month balance ***/
                        $effDate1 = date('Y-m-01', strtotime($effDate));
                        $payDate1 = date('Y-m-01', strtotime(date('Y-m-01', strtotime($payDate)) . ' -1 month'));


                        $j = 0;
                        while ($effDate1 < $payDate1) {
                            $effDate1 = date('Y-m-d', strtotime($effDate1 . ' +1 month'));
                            $balanceAmount += $tr_amount;

                            if ($j > 150) {
                                break;
                            }
                            $j++;
                        }

                        /*** end of calculation for except effective month balance ***/

                        $detail['empID'] = $empID;
                        $detail['sdMasterID'] = $masterID;
                        $detail['declarationDetailID'] = $insert_id;
                        $detail['fromDate'] = $effDate;
                        $detail['balanceAmount'] = round($balanceAmount, $dPlace);
                        $detail['dueDate'] = $payDate;
                        $detail['salaryCatID'] = $catVal['salaryCategoryID'];
                        $detail['companyID'] = $companyID;
                        $detail['createdUserGroup'] = $createdUserGroup;
                        $detail['createdPCID'] = $createdPCID;
                        $detail['createdUserID'] = $createdUserID;
                        $detail['createdDateTime'] = $createdDateTime;
                        $detail['createdUserName'] = $createdUserName;

                        $this->db->insert('srp_erp_pay_balancepayment', $detail);
                    }

                    $i++;
                }

                $this->db->trans_complete();
                if ($this->db->trans_status() === true) {
                    $this->db->trans_commit();
                    return true;
                } else {
                    $this->db->trans_rollback();
                    return false;
                }
            }
    }
/** end : almansoori chnges for personal application */


/**start : monthly allowance claim */
    function save_monthly_allowance_header($documentID)
    {
        $this->form_validation->set_rules('documentDate', 'Document Date', 'trim|required|date');
        $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'trim|required|date');
        $this->form_validation->set_rules('monthDescription', 'Description', 'trim|required');
        
        if ($this->form_validation->run() == FALSE) {
            return array('e', validation_errors());
        } else {
            $description = $this->input->post('monthDescription');
            $dDate = $this->input->post('documentDate');
            $from = $this->input->post('fromDate');
            $to = $this->input->post('toDate');
            $frequency = $this->input->post('frequency');
            
            $date_format_policy = date_format_policy();
            $documentDate = input_format_date($dDate, $date_format_policy);
            $dateFrom = input_format_date($from, $date_format_policy);
            $dateTo = input_format_date($to, $date_format_policy);
            $current_date = current_date();

            //Get last no
            $query = $this->db->select('serialNo')
                ->from('srp_erp_pay_monthlyadditionclaim')
                ->where('companyID', current_companyID())
                ->order_by('monthlyClaimMasterID', 'desc')
                ->get();
            $lastAddArray = $query->row_array();
            $additionNo = $lastAddArray['serialNo'];
            $additionNo = ($additionNo == null) ? 1 : $lastAddArray['serialNo'] + 1;

            //Generate Code
            $this->load->library('sequence');
            $additionCode = $this->sequence->sequence_generator($documentID, $additionNo);

            $data = array(
                'monthlyClaimCode' => $additionCode,
                'frequencyID'=> $frequency,
                'serialNo' => $additionNo,
                'documentID' => 'MAC',
                'empID' => $this->common_data['current_userID'],
                'dateFrom' => $dateFrom,
                'dateTo' => $dateTo,
                'description' => $description,
                'documentDate'=> $documentDate,
                'confirmedYN' => 0,
                'currency' => $this->common_data['company_data']['company_default_currency'],
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => $current_date
            );

            $this->db->insert('srp_erp_pay_monthlyadditionclaim', $data);

            if ($this->db->affected_rows() > 0) {
                $insert_id = $this->db->insert_id();
                $msg = 'Monthly Allowance Claim';
                return array('s', $msg . '[ ' . $additionCode . ' ] Insert successfully', $insert_id);
            } else {
                return (array('s', 'Failed to insert record' . $msg));
            }
        }
    }

    function editmonthAddition($type, $id = 0)
    {
        $editID = $this->input->post('editID');
        $editID = ($editID == null) ? $id : $editID;
        $id = (isset($editID)) ? $editID : $this->input->post('updateID');
        $convertFormat = convert_date_format_sql();

        $empDetails = $this->db->select("ECode, Ename2, payCurrencyID, payCurrency, segmentID")
                ->from('srp_employeesdetails')
                ->where('EIdNo', current_userID())
                ->get()
                ->row_array();

        $data = array();
        $data['segment'] = $empDetails['segmentID'];
        $data['empCode'] = $empDetails['ECode'];
        $data['empName'] = $empDetails['Ename2'];
        $data['empCurrencyID'] = $empDetails['payCurrencyID'];
        $data['empCurrency'] = $empDetails['payCurrency'];

        $details = $this->db->select("*")
                ->from('srp_erp_pay_monthlyadditionclaimdetail')
                ->where('monthlyClaimMasterID', $id)
                ->get()
                ->result_array();

        $tableName = 'srp_erp_pay_monthlyadditionclaim';
        $monthID = 'monthlyClaimMasterID';
        $monthlyCode = 'monthlyClaimCode, monthlyClaimMasterID';
        $documentDateField = 'DATE_FORMAT(documentDate,\'' . $convertFormat . '\') AS documentDate ';
        $fromDateField = 'DATE_FORMAT(dateFrom,\'' . $convertFormat . '\') AS dateFrom ';
        $toDateField = 'DATE_FORMAT(dateTo,\'' . $convertFormat . '\') AS dateTo ';
       
        $master = $this->db->select("{$monthlyCode} , '' AS pullType,'' AS payrollGroup, description, documentID, confirmedYN, approvedYN,'N' AS isNonPayroll,'0' AS typeID, {$documentDateField}, {$fromDateField}, {$toDateField}")
                ->from($tableName)
                ->where($monthID, $id)
                ->get()
                ->row_array();

        $data['master'] = $master;
        $data['details'] = $details;

        return $data;
    }

    function save_emp_Monthly_Allowance()
    {
        $this->db->trans_start();
        $monthlyClaimMasterID = $this->input->post('monthlyClaimMasterID');
        $monthlyClaimDetailID = $this->input->post('monthlyClaimDetailID');
        $ECode = $this->input->post('ECode');	
        $empCurrencyID = $this->input->post('empCurrencyID');
        $empCurrencyCode = $this->input->post('empCurrencyCode');
        $declarationID = $this->input->post('declarationID');
        $amount = $this->input->post('amount');
        $documentCode = $this->input->post('documentCode');
        $description = $this->input->post('description');
        $current_date = current_date();
        $decDetID = $this->input->post('decDetID');
        $additionType = 0;

        //$com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
        
        //$companyReportingCurrencyID = $this->common_data['company_data']['company_reporting_currencyID'];
        $com_repCurrency = $this->common_data['company_data']['company_reporting_currency'];
        $com_repCurDPlace = $this->common_data['company_data']['company_reporting_decimal'];
        
        $this->db->select('*');
        $this->db->from('srp_erp_pay_monthlyadditionclaim');
        $this->db->where('monthlyClaimMasterID', $monthlyClaimMasterID);
        $master = $this->db->get()->row_array();
        if ($master['confirmedYN'] == 1) {
            return array('e', $this->input->post('documentCode') . ' is already confirmed, you can not make any change on this document.');
        }

            if($this->input->post('isConform') == 0){
                $x = null;
                    foreach($declarationID as $i => $decID){
                        if(!empty($monthlyClaimDetailID[$i])){
                            $amnt = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                            $update_arr = array(
                                'description' => $description[$i],
                                'transactionAmount' => $amnt,
                                'declarationID'=> $declarationID[$i]
                            );
                            $this->db->where('monthlyClaimDetailID', $monthlyClaimDetailID[$i])->update('srp_erp_pay_monthlyadditionclaimdetail', $update_arr);
                            
                            if($this->db->affected_rows() > 0){
                                $x = 2;
                            }else{
                                $x = 1;
                            }
                            
                        }elseif(empty($monthlyClaimDetailID[$i])){
                            $data = array();
                                $tr_amount = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                                $localCon = currency_conversion($empCurrencyCode, $com_currency, $tr_amount);
                                $reportCon = currency_conversion($empCurrencyCode, $com_repCurrency, $tr_amount);
                                $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $localCon['DecimalPlaces']) : round($tr_amount, $localCon['DecimalPlaces']);
                                $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $reportCon['DecimalPlaces']) : round($tr_amount,  $reportCon['DecimalPlaces']);
            
                                $data[$i]['empID'] = current_userID();
                                $data[$i]['monthlyClaimMasterID'] = $monthlyClaimMasterID;
                                if ($additionType == 0)
                                { // not variable pay
                                    $data[$i]['description'] = $description[$i];
                                    $data[$i]['declarationID'] = $declarationID[$i];
                                    //$data[$i]['GLCode'] = $HGLCode[$i];
                                }
                               
                                $data[$i]['transactionCurrencyID'] = $empCurrencyID;
                                $data[$i]['transactionCurrency'] = $empCurrencyCode;
                                $data[$i]['transactionExchangeRate'] = 1;
                                $data[$i]['transactionAmount'] = $tr_amount;
                                $data[$i]['transactionCurrencyDecimalPlaces'] = $localCon['DecimalPlaces']; //

                                $data[$i]['companyLocalCurrencyID'] = $localCon['currencyID'];
                                $data[$i]['companyLocalCurrency'] = $com_currency;
                                $data[$i]['companyLocalExchangeRate'] = $localCon['conversion'];
                                $data[$i]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                                $data[$i]['companyLocalAmount'] = $localAmount;

                                $data[$i]['companyReportingCurrencyID'] = $reportCon['currencyID'];
                                $data[$i]['companyReportingCurrency'] = $com_repCurrency;
                                $data[$i]['companyReportingAmount'] = $reportAmount;
                                $data[$i]['companyReportingExchangeRate'] = $reportCon['conversion'];
                                $data[$i]['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;

                                $data[$i]['companyID'] = $this->common_data['company_data']['company_id'];
                                $data[$i]['companyCode'] = $this->common_data['company_data']['company_code'];
                                $data[$i]['createdPCID'] = $this->common_data['current_pc'];
                                $data[$i]['createdUserID'] = $this->common_data['current_userID'];
                                $data[$i]['createdUserName'] = $this->common_data['current_user'];
                                $data[$i]['createdUserGroup'] = $this->common_data['user_group'];
                                $data[$i]['createdDateTime'] = $current_date;

                            $this->db->insert_batch('srp_erp_pay_monthlyadditionclaimdetail', $data);
                            if($this->db->affected_rows() > 0){
                                $x = 4;
                            }else{
                                $x = 3;
                            }
                        }
                    }

                    $this->db->trans_complete();
                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        if($x==1){ 
                            return array('s', 'Failed to Update [ ' . $documentCode . ' ] ' . 'Monthly Allowance');
                        }elseif($x==3){
                            return array('s', 'Failed to Save [ ' . $documentCode . ' ] ' . 'Monthly Allowance');
                        }
                    } else {
                        $this->db->trans_commit();
                        if($x==2){
                            return array('s', 'Monthly Allowance' . '[ ' . $documentCode . ' ] Updated successfully');
                        }elseif($x==4){
                            return array('s', 'Monthly Allowance' . '[ ' . $documentCode . ' ] saved successfully');
                        }
                    }

            }elseif($this->input->post('isConform') == 1){
 
                if ($additionType == 0) {
                    $this->form_validation->set_rules('amount[]', 'Amount/s', 'trim|required');
                    $this->form_validation->set_rules('declarationID[]', 'Description/s', 'trim|required');
                }
           
                if ($this->form_validation->run() == FALSE) {
                    return ['e', validation_errors()];
                } else {
                    $masterUpdate = $this->update_month_Allowance($monthlyClaimMasterID);
                    if ($masterUpdate[0] == 's'){
                        //if (!empty($monthlyClaimDetailID)){
                            //$this->db->where('monthlyClaimMasterID', $monthlyClaimMasterID)->delete('srp_erp_pay_monthlyadditionclaimdetail');
                            foreach($declarationID as $i => $decID){
                                if ($monthlyClaimDetailID[$i]) {
                                    $amnt = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                                    $update_arr = array(
                                        'description' => $description[$i],
                                        'transactionAmount' => $amnt,
                                        'declarationID'=> $decID,
                                        'modifiedPCID' => $this->common_data['current_pc'],
                                        'modifiedUserID' => $this->common_data['current_userID'], 
                                        'modifiedUserName' => $this->common_data['current_user'],
                                        'modifiedDateTime' => $current_date
                                    );
            
                                    $this->db->where('monthlyClaimDetailID', $monthlyClaimDetailID[$i])->update('srp_erp_pay_monthlyadditionclaimdetail', $update_arr);
            
                                    if($this->db->affected_rows() > 0){
                                        $x = 2;
                                    }else{
                                        $x = 1;
                                    }
                                }
                                else{
                                    $data = array();
                                    $tr_amount = (!empty($amount[$i])) ? str_replace(',', '', $amount[$i]) : 0;
                                    $localCon = currency_conversion($empCurrencyCode, $com_currency, $tr_amount);
                                    $reportCon = currency_conversion($empCurrencyCode, $com_repCurrency, $tr_amount);
                                    $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), $localCon['DecimalPlaces']) : round($tr_amount, $localCon['DecimalPlaces']);
                                    $reportAmount = ($reportCon['conversion'] > 0) ? round(($tr_amount / $reportCon['conversion']), $reportCon['DecimalPlaces']) : round($tr_amount,  $reportCon['DecimalPlaces']);
                
                                    $data[$i]['empID'] = current_userID();
                                    $data[$i]['monthlyClaimMasterID'] = $monthlyClaimMasterID;
                                    if ($additionType == 0)
                                    { // not variable pay
                                        $data[$i]['description'] = $description[$i];
                                        $data[$i]['declarationID'] = $declarationID[$i];
                                        //$data[$i]['GLCode'] = $HGLCode[$i];
                                    }
                                
                                    $data[$i]['transactionCurrencyID'] = $empCurrencyID;
                                    $data[$i]['transactionCurrency'] = $empCurrencyCode;
                                    $data[$i]['transactionExchangeRate'] = 1;
                                    $data[$i]['transactionAmount'] = $tr_amount;
                                    $data[$i]['transactionCurrencyDecimalPlaces'] = $localCon['DecimalPlaces']; //

                                    $data[$i]['companyLocalCurrencyID'] = $localCon['currencyID'];
                                    $data[$i]['companyLocalCurrency'] = $com_currency;
                                    $data[$i]['companyLocalExchangeRate'] = $localCon['conversion'];
                                    $data[$i]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                                    $data[$i]['companyLocalAmount'] = $localAmount;

                                    $data[$i]['companyReportingCurrencyID'] = $reportCon['currencyID'];
                                    $data[$i]['companyReportingCurrency'] = $com_repCurrency;
                                    $data[$i]['companyReportingAmount'] = $reportAmount;
                                    $data[$i]['companyReportingExchangeRate'] = $reportCon['conversion'];
                                    $data[$i]['companyReportingCurrencyDecimalPlaces'] = $com_repCurDPlace;

                                    $data[$i]['companyID'] = $this->common_data['company_data']['company_id'];
                                    $data[$i]['companyCode'] = $this->common_data['company_data']['company_code'];
                                    $data[$i]['createdPCID'] = $this->common_data['current_pc'];
                                    $data[$i]['createdUserID'] = $this->common_data['current_userID'];
                                    $data[$i]['createdUserName'] = $this->common_data['current_user'];
                                    $data[$i]['createdUserGroup'] = $this->common_data['user_group'];
                                    $data[$i]['createdDateTime'] = $current_date;

                                    $this->db->insert_batch('srp_erp_pay_monthlyadditionclaimdetail', $data);
                                    if($this->db->affected_rows() > 0){
                                        $x = 4;
                                    }else{
                                        $x = 3;
                                    }
                                }
                            }

                            $this->db->trans_complete();
                            if ($this->db->trans_status() === FALSE) {
                                $this->db->trans_rollback();
                                if($x==1){ 
                                    return array('s', 'Failed to Update [ ' . $documentCode . ' ] ' . 'Monthly Allowance');
                                }elseif($x==3){
                                    return array('s', 'Failed to Save [ ' . $documentCode . ' ] ' . 'Monthly Allowance');
                                }
                            } else {
                                $this->db->trans_commit();
                                if($x==2){
                                    return array('s', 'Monthly Allowance' . '[ ' . $documentCode . ' ] Updated successfully');
                                }elseif($x==4){
                                    return array('s', 'Monthly Allowance' . '[ ' . $documentCode . ' ] saved successfully');
                                }
                            }

                    } else {
                        return $masterUpdate;
                    }
                }
            }
      //}
    }

    //ok
    function update_month_Allowance($masterID)
    {
     
            $monthlyClaimMasterID = $masterID;
            $date_format_policy = date_format_policy();
            $datDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($datDsc, $date_format_policy);

            $isConform = $this->input->post('isConform');
            $documentCode = $this->input->post('documentCode');
            $current_date = current_date();

            $this->db->select('*');
            $this->db->where('monthlyClaimMasterID', $monthlyClaimMasterID);
            $this->db->from('srp_erp_pay_monthlyadditionclaim');
            $pa_data = $this->db->get()->row_array();

            $systemType = 0;
 
            $isConfirmed = $this->isAlready_Conformed('srp_erp_pay_monthlyadditionclaim', 'monthlyClaimMasterID', $monthlyClaimMasterID);

            if ($isConfirmed != 1) {
              
                    $validate_code = validate_code_duplication($pa_data['monthlyClaimCode'], 'monthlyClaimCode', $monthlyClaimMasterID,'monthlyClaimMasterID', 'srp_erp_pay_monthlyadditionclaim');
                    if(!empty($validate_code)) {
                        return array('e', 'The document Code Already Exist.(' . $validate_code . ')');
                    }

                    $code = $pa_data['monthlyClaimCode'];
                    $is_in_approvedTB = $this->db->query("SELECT * FROM srp_erp_documentapproved WHERE documentSystemCode = ? AND documentCode = ?", array($monthlyClaimMasterID, $code))->row_array();
                    
                    if(!empty($is_in_approedTB)){
                        return array('e', 'The document Code Already Exist.(' . $validate_code . ')');
                    }
                    else{
                        $data = array(
                            'confirmedYN' => $isConform, 
                            'confirmedByEmpID' => current_userID(),
                            'confirmedByName' => current_employee(), 
                            'confirmedDate' => $current_date, 
                            'modifiedPCID' => $this->common_data['current_pc'],
                            'modifiedUserID' => $this->common_data['current_userID'], 
                            'modifiedUserName' => $this->common_data['current_user'],
                            'modifiedDateTime' => $current_date
                        ); //'description' => $description, 
                        
                        if ($systemType == 0) { // if not variable pay
                            $data['documentDate'] = $dateDesc;
                        }

                        $this->load->library('approvals');
                        $isAutoApproval = get_document_auto_approval('MAC');

                        $documentCode = $pa_data['monthlyClaimCode'];
                        $createdDate = $pa_data['documentDate'];

                            if ($isAutoApproval == 0) { // If auto approval

                                $this->approvals->auto_approve($monthlyClaimMasterID, 'srp_erp_pay_monthlyadditionclaim', 'monthlyClaimMasterID', 'MAC', $documentCode, $createdDate);

                                $this->db->trans_complete();
                                if ($this->db->trans_status() === true) {
                                    $this->db->trans_commit();
                                    return ['s', 'Approved successfully'];
                                } else {
                                    $this->db->trans_rollback();
                                    return ['e', 'Error in approval process'];
                                }
                            }

                            $approvals_status = $this->approvals->CreateApproval('MAC', $monthlyClaimMasterID, $documentCode, 'Monthly Allowance Claim', 'srp_erp_pay_monthlyadditionclaim', 'monthlyClaimMasterID', 0, $createdDate);

                            if ($this->db->trans_status() === false) {
                                $this->db->trans_rollback();
                                return ['e', 'Something went wrong!, In approval create process'];
                            }

                            if ($approvals_status == 3) {
                                $this->db->trans_rollback();
                                return ['w', 'There is no user exists to perform <b>Monthly Allowance Claim Approval</b> for this company.'];
                            }
                            else if($approvals_status == 1) {
                            
                                $this->db->where('monthlyClaimMasterID', $monthlyClaimMasterID);
                                $this->db->update('srp_erp_pay_monthlyadditionclaim', $data);
                                
                                $this->session->set_flashdata('s', 'Create Approval : ' . $pa_data['monthlyClaimCode'] . ' Approvals Created Successfully ');

                                if ($this->db->trans_status() === false) {
                                    $this->db->trans_rollback();
                                    return ['e', 'Something went wrong!, In approval create process'];
                                }
                                $this->db->trans_commit();
                                return ['s', 'Approval created : ' . $documentCode];
                            } else {
                                $this->db->trans_rollback();
                                return ['w', 'some thing went wrong', $approvals_status];
                            }

                            
                            $firbase_status = null;

                            if($firbase_status){
                                /*** Firebase Mobile Notification*/
                                $this->db->select('managerID');
                                $this->db->where('empID', trim($pa_data['createdUserID'] ?? ''));
                                $this->db->where('active', 1);
                                $this->db->from('srp_erp_employeemanagers');
                                $managerid = $this->db->get()->row_array();

                                $token_android = firebaseToken($managerid["managerID"], 'android');
                                $token_ios = firebaseToken($managerid["managerID"], 'apple');

                                $firebaseBody = $pa_data['createdUserName'] . " has applied for a Monthly Allowance.";

                                $this->load->library('firebase_notification');
                                if(!empty($token_android)) {
                                    $this->firebase_notification->sendFirebasePushNotification("New Monthly Allowance", $firebaseBody, $token_android, 2, $pa_data['monthlyClaimCode'], "MAC", $monthlyClaimMasterID, "android");
                                }
                                if(!empty($token_ios)) {
                                    $this->firebase_notification->sendFirebasePushNotification("New Monthly Allowance", $firebaseBody, $token_ios, 2, $pa_data['monthlyClaimCode'], "MAC", $monthlyClaimMasterID, "apple");
                                }
                            }

                        return array('s','Approvals Created Successfully');
                    }

            } else {
                return array('e', '[' . $documentCode	 . '] is already confirmed, You can not Update this.');
            }
    }

    function isAlready_Conformed($tableName, $monthID, $autoID)
    {
        $query = $this->db->select('confirmedYN')
            ->from($tableName)
            ->where($monthID, $autoID)
            ->get();
        $data = $query->row_array();
        $result = $data['confirmedYN'];

        return $result;
    }

    function saveemployeeAsTemp()
    {
        $empDet = $this->input->post('temp_empHiddenID');
        $empCurrencyID = $this->input->post('temp_empCurrencyID');
        $empCurrencyCode = $this->input->post('temp_empCurrencyCode');
        $empCurrencyDPlace = $this->input->post('temp_empCurrencyDPlace');
        $accGroupID = $this->input->post('temp_accGroupID');
        $masterID = $this->input->post('masterID');
        $type_m = $this->input->post('type_m');

        $additionType = 0;
        if ($type_m == 'MAC') {
            $tableName = 'srp_erp_pay_monthlyadditionclaimdetail';
            $masterColumn = 'monthlyClaimMasterID';
            $masterDet = $this->editmonthAddition($type_m, $masterID);
            $additionType = $masterDet['det']['typeID'];
        }

        $data = array();
        $companyID = current_companyID();
        $current_date = current_date();
        $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];

        $declarations = [];
        $glCode = null;
        if ($additionType != 0) { /*If Variable pay*/
            $empIDList = implode(',', $empDet);

            $isExists = $this->db->query("SELECT CONCAT(ECode, ' - ',  Ename2) AS empName 
                            FROM srp_erp_pay_monthlyadditionclaimdetail AS detTB
                            JOIN srp_employeesdetails AS empTB ON detTB.empID=empTB.EIdNo
                            WHERE monthlyClaimMasterID = {$masterID} AND empID IN ({$empIDList})")->result_array();

            // if (!empty($isExists)) {
            //     $msg = 'Following Employees already added on this document <br/>';
            //     $msg .= implode('<br/>', array_column($isExists, 'empName'));
            //     return ['e', $msg];
            // }

            $glCode = $this->db->get_where('srp_erp_pay_salarycategories', ['salaryCategoryID' => $additionType])->row('GLCode');

            $declarations = $this->db->query("SELECT empID, detailID, amount 
                                  FROM srp_erp_variablepaydeclarationdetails                                   
                                  WHERE companyID = {$companyID} 
                                  AND salaryCategoryID = {$additionType} 
                                  AND isActive = 1 AND empID IN ({$empIDList})")->result_array();

            $declarations = array_group_by($declarations, 'empID');
        }

        $tempEmpArr = [];
        $existing_emp = [];
        foreach ($empDet as $key => $emp) { /*If Variable pay*/
            if ($additionType != 0) {
                if (in_array($emp, $tempEmpArr)) {
                    $existing_emp[] = $emp;
                } else {
                    $tempEmpArr[] = $emp;
                }

                $data[$key]['categoryID'] = $additionType;
                $data[$key]['GLCode'] = $glCode;
                $data[$key]['declarationAmount'] = (!empty($declarations[$emp])) ? $declarations[$emp][0]['amount'] : 0;
                $data[$key]['declarationDetID'] = (!empty($declarations[$emp])) ? $declarations[$emp][0]['detailID'] : 0;
            }

            $trCurrencyID = $empCurrencyID[$key];
            $data[$key]['empID'] = $emp;
            $data[$key]['accessGroupID'] = $accGroupID[$key];
            $data[$key][$masterColumn] = $masterID;
            $data[$key]['transactionCurrencyID'] = $trCurrencyID;
            $data[$key]['transactionCurrency'] = $empCurrencyCode[$key];
            $data[$key]['transactionExchangeRate'] = 1;
            $data[$key]['transactionCurrencyDecimalPlaces'] = $empCurrencyDPlace[$key];

            if ($key > 0) {
                if ($trCurrencyID == $empCurrencyID[$key - 1]) {
                    $com_exchangeRate = $data[$key - 1]['companyLocalExchangeRate'];
                } else {
                    $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                    $com_exchangeRate = $com_exchangeRateData['conversion'];
                }
            } else {
                $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                $com_exchangeRate = $com_exchangeRateData['conversion'];
            }

            $data[$key]['companyLocalCurrencyID'] = $com_currencyID;
            $data[$key]['companyLocalCurrency'] = $com_currency;
            $data[$key]['companyLocalExchangeRate'] = $com_exchangeRate;
            $data[$key]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;

            $data[$key]['companyID'] = $companyID;
            $data[$key]['companyCode'] = $this->common_data['company_data']['company_code'];
            $data[$key]['createdPCID'] = $this->common_data['current_pc'];
            $data[$key]['createdUserID'] = $this->common_data['current_userID'];
            $data[$key]['createdUserName'] = $this->common_data['current_user'];
            $data[$key]['createdUserGroup'] = $this->common_data['user_group'];
            $data[$key]['createdDateTime'] = $current_date;
        }

        if (!empty($existing_emp)) {    /*If Variable pay a single employee can not be add more than one time*/
            $msg = 'Following Employees selected more than one time <br/>';
            $empList = implode(',', $existing_emp);

            $empList = $this->db->query("SELECT CONCAT(ECode, ' - ', Ename2) empName  FROM 
                        srp_employeesdetails WHERE EIdNo IN ({$empList})")->result_array('empName');
            $msg .= implode('<br/>', array_column($empList, 'empName'));

            return ['e', $msg];
        }

        $this->db->trans_start();
        $this->db->insert_batch($tableName, $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to Update');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function remove_Single_emp()
    {
        $detailID = $this->input->post('detailID');
        $monthType = $this->input->post('type_m');

        if ($monthType == 'MAC') {
            $tableName = 'srp_erp_pay_monthlyadditionclaimdetail';
            $masterColumn = 'monthlyClaimDetailID';
        }

        $this->db->trans_start();
        $this->db->where(array($masterColumn => $detailID))->delete($tableName);
        $this->db->trans_complete();

        if ($this->db->trans_status() == false) {
            $this->db->trans_rollback();
            return array('e', 'Error');
        } else {
            $this->db->trans_commit();
            return array('s', '');
        }
    }

    function delete_monthAllowance($type)
    {
        $delID = $this->input->post('delID');

        if ($type == 'MAC') {
                $tableName = 'srp_erp_pay_monthlyadditionclaim';
                $tableDetail = 'srp_erp_pay_monthlyadditionclaimdetail';
                $monthID = 'monthlyClaimMasterID';

            $isConfirmed = $this->isAlready_Conformed($tableName, $monthID, $delID);
            $deleteArray = array($monthID => $delID);

            if ($isConfirmed == 1) {
                return array('e', 'This ' . $type . ' is already confirmed, You can not delete this.');
            } else {
                $this->db->trans_start();
                $this->db->delete($tableName, $deleteArray);
                $this->db->delete($tableDetail, $deleteArray);

                $this->db->trans_complete();
                if ($this->db->trans_status() == true) {
                    $this->db->trans_commit();
                    return array('s', 'Deleted successfully');
                } else {
                    $this->db->trans_rollback();
                    return array('e', 'Failed to delete record');
                }
            }
        } else {
            return array('e', 'Some thing went wrong');
        }
    }

    function delete_claimDetail(){
        $monthlyClaimMasterID = $this->input->post('monthlyClaimMasterID');
        $monthlyClaimDetailID = $this->input->post('monthlyClaimDetailID');

        $isConfirmed = $this->isAlready_Conformed('srp_erp_pay_monthlyadditionclaim', 'monthlyClaimMasterID', $monthlyClaimMasterID);

        if ($isConfirmed == 1) {
            return array('e', 'This Claim is already confirmed, You can not delete this.');
        }
        else {
            $this->db->trans_start();
            $this->db->where('monthlyClaimDetailID', $monthlyClaimDetailID)->delete('srp_erp_pay_monthlyadditionclaimdetail');

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                return array('s', 'Deleted successfully');
            } else {
                $this->db->trans_rollback();
                return array('e', 'Failed to delete record');
            }
        }
    }

    function referBack_month_Allowance()
    {
        $id = $this->input->post('referID');

        $query = $this->db->select('monthlyClaimCode AS code')
            ->from('srp_erp_pay_monthlyadditionclaim')
            ->where('monthlyClaimMasterID', $id)
            ->get();
        $details = $query->row();

        $this->db->where('documentSystemCode', $id)->delete('srp_erp_documentapproved');

            if($this->db->affected_rows() > 0){
                $updateDetail = array(
                    'confirmedYN' => 2,
                    'modifiedPCID' => $this->common_data['current_pc'],
                    'modifiedUserID' => $this->common_data['current_userID'],
                    'modifiedUserName' => $this->common_data['current_user'],
                    'modifiedDateTime' => current_date()
                );
                $this->db->where('monthlyClaimMasterID', $id)->update('srp_erp_pay_monthlyadditionclaim', $updateDetail);
                if ($this->db->affected_rows() > 0) {
                    return array('s', '[' . $details->code . '] Refer backed successfully');
                } else {
                    return array('e', 'Error in refer back process [' . $details->code . ']');
                }
                
            }
    }

    function empMonth_Allowance_printData($id)
    {
        $con = "IFNULL(Ename2, '')";
        $this->db->select('ECode, CONCAT(' . $con . ') AS empName, transactionCurrency, transactionAmount,
                          transactionCurrencyDecimalPlaces dPlace, description, declarationTB.monthlyDeclaration AS declarationDes')
            ->from('srp_erp_pay_monthlyadditionclaimdetail')
            ->join('srp_employeesdetails AS empTB', 'srp_erp_pay_monthlyadditionclaimdetail.empID=empTB.EIdNo')
            ->join('srp_erp_pay_monthlydeclarationstypes AS declarationTB', 'srp_erp_pay_monthlyadditionclaimdetail.declarationID=declarationTB.monthlyDeclarationID')
            ->where('monthlyClaimMasterID', $id)
            ->order_by('transactionCurrency');

        return $this->db->get()->result_array();
    }

    function monthly_allowance_details($masterID)
    {
        return $this->db->query("SELECT *,
        IFNULL(approvalComments, '') AS approvalComments
        
    FROM 
        srp_erp_pay_monthlyadditionclaim
    WHERE 
        srp_erp_pay_monthlyadditionclaim.monthlyClaimMasterID = {$masterID}
    GROUP BY
        srp_erp_pay_monthlyadditionclaim.monthlyClaimMasterID")->row_array();
    }

    function monthlyAllowance_approval($autoappLevel=1,$system_idAP=0,$statusAP=0,$commentsAP=0)
    {
        $this->load->library('Approvals');

        $id = trim($this->input->post('id') ?? '');
        $this->db->select('*');
        $this->db->where('monthlyClaimMasterID', trim($this->input->post('id') ?? ''));
        $this->db->from('srp_erp_pay_monthlyadditionclaim');
        $paa_data = $this->db->get()->row_array();

        $companyID = current_companyID();

        if($autoappLevel==1){
            $system_code = trim($this->input->post('id') ?? '');
            $level_id = trim($this->input->post('level') ?? '');
            $status = trim($this->input->post('po_status') ?? '');
            $comments = trim($this->input->post('comments') ?? '');
        }else{
            $system_code = $system_idAP;
            $level_id = 0;
            $status = $statusAP;
            $comments = $commentsAP;
            $_post['id']=$system_code;
            $_post['level']=$level_id;
            $_post['po_status']=$status;
            $_post['comments']=$comments;
        }

        if($autoappLevel == 0){
            $approvals_status = 1;
        }else{
            $approvals_status = $this->approvals->approve_document($system_code, $level_id, $status, $comments, 'MAC');
        }

        if ($approvals_status == 1) {
            $data = array(
                'approvedYN' => 1,
                'approvedDate' => $this->common_data['current_date'],
                'approvedbyEmpID' => $this->common_data['current_userID'],
                'approvedbyEmpName' => $this->common_data['current_user'],
                // 'approvalComments' => $this->input->post('comments'),
            );
            $this->db->where('monthlyClaimMasterID', trim($this->input->post('id') ?? ''));
            $this->db->update('srp_erp_pay_monthlyadditionclaim', $data);

            $this->db->select('*');
            $this->db->from('srp_erp_pay_monthlyadditionclaim');
            $this->db->where('monthlyClaimMasterID', $id);
            $this->db->where('companyID', current_companyID());
            $query = $this->db->get();
            $macHeader = $query->row_array();

            $this->session->set_flashdata('s', ' Approved Successfully ');
            if(!empty($macHeader['frequencyID'])){

                $this->db->select('*');
                $this->db->from('srp_erp_pay_monthlyadditionclaimdetail');
                $this->db->where('monthlyClaimMasterID', $id);
                $this->db->where('companyID', current_companyID());
                $query = $this->db->get();
                $macDetails = $query->result_array();
        
                $dateFrom = new DateTime($macHeader['dateFrom']);
                $dateTo = new DateTime($macHeader['dateTo']);
                $frequency = $macHeader['frequencyID'];
                $periods = [];

                $intervals = [
                    1 => new DateInterval('P1M'),  
                    2 => new DateInterval('P3M'), 
                    3 => new DateInterval('P6M'),  
                    4 => new DateInterval('P12M') 
                ];
                
                while ($dateFrom <= $dateTo) {
                    $periods[] = $dateFrom->format('Y-m-d');
                    $dateFrom->add($intervals[$frequency]);
                }
                
                if (end($periods) !== $dateTo->format('Y-m-d')) {
                    $periods[] = $dateTo->format('Y-m-d');
                }

                foreach ($periods as $date) {
        
                    $monthlyadditionHeader = [
                        'monthlyAdditionsCode' => $this->sequence->sequence_generator('MA'),
                        'serialNo' => $macHeader['serialNo'],
                        'documentID' => 'MA',
                        'description' => $macHeader['description'],
                        'currencyID' => $macHeader['currencyID'],
                        'currency' => $macHeader['currency'],
                        'dateMA' => $date, 
                        'currentLevelNo' => $macHeader['currentLevelNo'],
                        'companyID' => $macHeader['companyID'],
                        'companyCode' => $macHeader['companyCode'], 
                        'segmentID' => $macHeader['segmentID'],
                        'segmentCode' => $macHeader['segmentCode'],
                        'confirmedYN' => 1,
                        'confirmedByEmpID' =>$this->common_data['current_userID'],
                        'confirmedByName' =>$this->common_data['current_user'], 
                        'confirmedDate' => $this->common_data['current_date'],
                        'currentApprovalLevel' => $macHeader['currentApprovalLevel'],
                        'createdUserGroup' =>  $this->common_data['user_group'],
                        'createdPCID' => $this->common_data['current_pc'],
                        'createdUserID' => $this->common_data['current_userID'], 
                        'createdDateTime' => $this->common_data['current_date'],
                        'createdUserName' => $this->common_data['current_user'],
                        'timestamp' => current_date(true),
                        'montlyCaimID' => $id
                    ];
                    $this->db->insert('srp_erp_pay_monthlyadditionsmaster', $monthlyadditionHeader);
                    $last_id = $this->db->insert_id();
        
                    foreach ($macDetails as $detail) {
                        $monthlyadditionDetail = [
                            'monthlyAdditionsMasterID' => $last_id,
                            'empID' => $detail['empID'],
                            'accessGroupID' => $detail['accessGroupID'],
                            'description' => $detail['description'], 
                            'declarationID' => $detail['declarationID'],
                            'GLCode' => $detail['GLCode'],
                            'categoryID' => $detail['categoryID'],
                            'declarationAmount' => $detail['declarationAmount'],
                            'declarationDetID' => $detail['declarationDetID'],
                            'noOfUnits' =>$detail['noOfUnits'],
                            'transactionCurrencyID' => $detail['transactionCurrencyID'],
                            'transactionCurrency' => $detail['transactionCurrency'],
                            'transactionExchangeRate' =>$detail['transactionExchangeRate'],
                            'transactionAmount' => $detail['transactionAmount'],
                            'transactionCurrencyDecimalPlaces' => $detail['transactionCurrencyDecimalPlaces'],
                            'companyLocalCurrencyID' =>$detail['companyLocalCurrencyID'],
                            'companyLocalCurrency' => $detail['companyLocalCurrency'],
                            'companyLocalExchangeRate' => $detail['companyLocalExchangeRate'],
                            'companyLocalAmount' =>$detail['companyLocalAmount'],
                            'companyLocalCurrencyDecimalPlaces' => $detail['companyLocalCurrencyDecimalPlaces'],
                            'companyReportingCurrencyID' => $detail['companyReportingCurrencyID'],
                            'companyReportingCurrency' =>$detail['companyReportingCurrency'],
                            'companyReportingExchangeRate' => $detail['companyReportingExchangeRate'],
                            'companyReportingAmount' => $detail['companyReportingAmount'],
                            'companyReportingCurrencyDecimalPlaces' =>$detail['companyReportingCurrencyDecimalPlaces'],
                            'IsSSO' => $detail['IsSSO'],
                            'IsTax' => $detail['IsTax'],
                            'companyID' =>$detail['companyID'],
                            'companyCode' => $detail['companyCode'],
                            'segmentID' => $detail['segmentID'],
                            'segmentCode' =>$detail['segmentCode'],
                            'createdUserGroup' => $this->common_data['user_group'],
                            'createdPCID' => $this->common_data['current_pc'],
                            'createdUserID' => $this->common_data['current_userID'], 
                            'createdDateTime' => $this->common_data['current_date'],
                            'createdUserName' => $this->common_data['current_user'],
                            'timestamp' => current_date(true),
                            'payUnit' => $detail['payUnit'],
                            'payRate' => $detail['payRate']
                            
                        ];
                
        
                        $this->db->insert('srp_erp_pay_monthlyadditiondetail', $monthlyadditionDetail); 
                    }
                }
               
            }
            $this->session->set_flashdata('s', ' Successfully Monthly addtion created.');
            return true;
        } 
        
        if($status != 1) {
            $this->db->select('monthlyClaimCode');
            $this->db->where('monthlyClaimMasterID', trim($this->input->post('id') ?? ''));
            $this->db->from('srp_erp_pay_monthlyadditionclaim');
            $documentCode = $this->db->get()->row_array();


            $datas = array(
                'confirmedYN' => 3,
            );
            $this->db->where('id', trim($this->input->post('monthlyClaimMasterID') ?? ''));
            $update = $this->db->update('srp_erp_pay_monthlyadditionclaim', $datas);
            if ($update) {

                $this->db->select('rejectID');
                $this->db->where('systemID', trim($this->input->post('id') ?? ''));
                $this->db->from('srp_erp_approvalreject');
                $rejectID = $this->db->get()->row_array('rejectID');

                if(!empty($rejectID)){
                    $data = array(
                        'documentID' => "MAC",
                        'systemID' => $this->input->post('id'),
                        'documentCode' => $documentCode['monthlyClaimCode'],
                        'comment' => $this->input->post('comments'),
                        'rejectedLevel' => 1,
                        'rejectByEmpID' => $this->common_data['current_userID'],
                        'rejectByEmpName' => $this->common_data['current_user'],
                        'table_name' => "srp_erp_personal_action",
                        'table_unique_field' => "id",
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'createdUserGroup' => $this->common_data['user_group'],
                        'modifiedPCID' => $this->common_data['current_pc'],
                        'modifiedUserID' => $this->common_data['current_userID'],
                        'modifiedUserName' => $this->common_data['current_user'],
                        'modifiedDateTime' => $this->common_data['current_date'],
                    );
                    $this->db->where('rejectID',$rejectID['rejectID']);
                    $this->db->update('srp_erp_approvalreject', $data);
                }else{
                    $data = array(
                        'documentID' => "MAC",
                        'systemID' => $this->input->post('id'),
                        'documentCode' => $documentCode['monthlyClaimCode'],
                        'comment' => $this->input->post('comments'),
                        'rejectedLevel' => 1,
                        'rejectByEmpID' => $this->common_data['current_userID'],
                        'rejectByEmpName' => $this->common_data['current_user'],
                        'table_name' => "srp_erp_personal_action",
                        'table_unique_field' => "id",
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'createdUserGroup' => $this->common_data['user_group'],
                        'createdPCID' => $this->common_data['current_pc'],
                        'createdUserID' => $this->common_data['current_userID'],
                        'createdUserName' => $this->common_data['current_user'],
                        'createdDateTime' => $this->common_data['current_date'],
                    );
                    $this->db->insert('srp_erp_approvalreject', $data);
                }

                $this->session->set_flashdata('s', ' Rejected Successfully ');
                // return true;
            }

          
        }
        
        
       

    }
/**end : monthly allowance claim */

    public function updateEmpImage() {
        $empID = $this->input->post('empID');
        $imgData = ['s', ''];

        if (isset($_FILES['empImage']['name']) && !empty($_FILES['empImage']['name'])) {
            $ECode = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $empID])->row('ECode');
            $imgData = $this->image_upload_s3($ECode);
            
        } else {
            $emp_gender = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $empID])->row('Gender');
            $img = ($emp_gender == 2) ? 'images/users/female.png' : 'images/users/male.png';
            $imgData = ['s', $img];
        }

        $response = [];
        if ($imgData[0] === 's') {
            $data = ['EmpImage' => $imgData[1]];
            $this->db->where('EIdNo', $empID);
            $this->db->update('srp_employeesdetails', $data);

            if ($this->db->affected_rows() > 0) {
                if ($empID == current_userID()) {
                    $imageURL = $this->s3->createPresignedRequest($imgData[1], '+24 hour');
                    $this->session->set_userdata('empImage', $imageURL);
                    $response['imageURL'] = $imageURL;
                }
                $response = [
                    'status' => 's',
                    'message' => 'Image updated successfully',
                    'imageURL'=>$imageURL
                ];
            } else {
                $response = ['status' => 'e', 'message' => 'Failed to update image'];
            }
        } else {
            $response = ['status' => 'e', 'message' => 'Image upload failed'];
        }

        header('Content-Type: application/json');
        echo json_encode($response);
        exit; 
    }

    function saveAccommodation(){

        $accommodationType=$this->input->post('accommodation_type');
        $companyID=current_companyID();

        $data=array(
            'description'=>$accommodationType,
            'companyID'=>$companyID
        );

        $this->db->insert('srp_erp_accomadationmaster', $data);
        $this->session->set_flashdata('s', ' Accommodation saved Successfully ');
        return true;
    }


    function saveEmpAccommodation() {
        $employeeAccomID = $this->input->post('employeeAccomID');
        $accommodationType = $this->input->post('accommodation_emp_type');
        $emp = current_userID();
        $narration = $this->input->post('acc_narration');
        $companyID = current_companyID();
    
        $data = array(
            'narration' => $narration,
            'empID' => $emp,
            'accomadationID' => $accommodationType,
            'companyID' => $companyID,
            'timestamp'=>current_date(true)
        );
    
        if (!empty($employeeAccomID)) {
            
            $data['modifiedPCID'] = $this->common_data['current_pc'];
            $data['modifiedUserID'] = $this->common_data['current_userID'];
            $data['modifiedUserName'] = $this->common_data['current_user'];
            $data['modifiedDateTime'] = $this->common_data['current_date'];
            $this->db->where('empAccID', $employeeAccomID);
            $this->db->update('srp_erp_employee_accomadation', $data);
            $this->session->set_flashdata('s', 'Accommodation updated Successfully');
        } else {
           
            $data['createdPCID'] = $this->common_data['current_pc'];
            $data['createdUserID'] = $this->common_data['current_userID'];
            $data['createdUserName'] = $this->common_data['current_user'];
            $data['createdDateTime'] = $this->common_data['current_date'];
            $this->db->insert('srp_erp_employee_accomadation', $data);
            $this->session->set_flashdata('s', 'Accommodation Assigned Successfully');
        }
    
        return true;
    }


    /**personal action : almansoori */
    function add_new_allowanse_mse()
    {
        $id = $this->input->post('id');
        $fieldType = trim($this->input->post('fieldType') ?? '');
        $fieldValue = trim($this->input->post('fieldValue') ?? '');

        $data =array();

        $this->db->select('*');
        $this->db->where('paID', trim($this->input->post('id') ?? ''));
        $this->db->where('salaryCategoryID', $fieldValue);
        $this->db->where('fieldType', $fieldType);
        $this->db->from('srp_erp_personal_action_details');
        $isexist = $this->db->get()->row_array();

        if(!empty($isexist))
        {
            return array('w','Allowance that you selected is already exist.');
        }
        else{
            $data_r['paID'] = trim($id);
            $data_r['salaryCategoryID'] = trim($fieldValue);
            $data_r['fieldType'] = trim($fieldType);
               
            $this->db->insert('srp_erp_personal_action_details', $data_r);

            return array('s','saved Successfully');
        }
    }
  
    function save_allowance()
    {
        $gradeID = $this->input->post('gradeID');
        $allowances = $this->input->post('allowances');
        $maxAllowance = $this->input->post('maxAllowance');
        $companyID = current_companyID();

        $this->db->trans_start();

        if (!empty($allowances)) {
            $i = 0;
            foreach ($allowances as $monthlyDeclarationID => $isActive) {
              
                $maxAllowanceAmount = isset($maxAllowance[$i]) ? $maxAllowance[$i] : null;
                
                // Check declarationTypeID already exists
                $existingRecord = $this->db->get_where('srp_erp_employeeclaimassign', [
                    'gradeID' => $gradeID,
                    'declarationTypeID' => $monthlyDeclarationID,
                    'companyID' => $companyID
                ])->row_array();

                $data = [
                    'gradeID' => $gradeID,
                    'maxAllowanceAmount'=>$maxAllowanceAmount,
                    'declarationTypeID' => $monthlyDeclarationID,
                    'isActive' => $isActive,
                    'companyID' => $companyID,
                    'timestamp' => current_date(true),
                    'createdPCID' => $this->common_data['current_pc'],
                    'createdUserID' => $this->common_data['current_userID'],
                    'createdUserName' => $this->common_data['current_user'],
                    'createdDateTime' => $this->common_data['current_date']
                ];

                if ($existingRecord) {
                    // If exists, update
                    $this->db->where('gradeID', $gradeID);
                    $this->db->where('declarationTypeID', $monthlyDeclarationID);
                    $this->db->where('companyID', $companyID);
                    $this->db->update('srp_erp_employeeclaimassign', $data);
                } else {
                    // otherwise, insert
                    $this->db->insert('srp_erp_employeeclaimassign', $data);
                }
                $i++; 
            }
        }

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            return array('e', 'Save failed.');
        } else {
            return array('s', 'Saved successfully.');
        }
    }

    function update_monthly_allowance_header()
    {
        $this->db->trans_start();
        $desDate = $this->input->post('desDate_edit');
        $fromDate = $this->input->post('fromDate_edit');
        $toDate = $this->input->post('toDate_edit');
        $monthDescription = $this->input->post('monthDescription_edit');
        $monthlyClaimMasterID = $this->input->post('monthlyClaimMasterID');

        $data = array(
            'dateFrom'=> $fromDate,
            'dateTo'=> $toDate,
            'documentDate' => $desDate,
            'description'=> $monthDescription
        );

        $this->db->where('monthlyClaimMasterID',$monthlyClaimMasterID);
        $this->db->update('srp_erp_pay_monthlyadditionclaim', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to update header details !');
        } else {
            $this->db->trans_commit();
            return array('s', 'updated successfully !');
        }
    }

    function getTravelRequestMoreDetails(){
        $requestDetailId = $this->input->post('id');
       
        $query = $this->db->select('*')
                 ->from('srp_erp_travel_request_details')
                 ->where('detailID',$requestDetailId)
                 ->get();
        $result = $query->row_array();
        
        return $result;
    }

    function saveTrMoreDetails(){

        $this->db->trans_start();
        $detailID=$this->input->post("requestDeatilId");
        $startDate=$this->input->post("departureDate");
        $departuresector=$this->input->post("departuresector");
        $departuretime=$this->input->post("departuretime");
        $returnDate=$this->input->post("returnDate");
        $returnsector=$this->input->post("returnsector");
        $returntime=$this->input->post("returntime");

        $data=[
            'startDate'=>$startDate,
            'departureSector'=>$departuresector,
            'departureTime'=>$departuretime,
            'EndDate'=>$returnDate,
            'returnSector'=>$returnsector,
            'returnTime'=>$returntime
        ];

        $this->db->where('detailID',$detailID);
        $this->db->update('srp_erp_travel_request_details', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('e', 'Failed to update extra details !');
        } else {
            $this->db->trans_commit();
            return array('s', 'updated successfully !');
        }
    } 

    function fetch_all_approval_users_modal($requestid)
    {
        $companyID = $this->common_data['company_data']['company_id'];
        $documentID = 'TRQ';
        $systemID = $requestid;
        $singleSourcePR = getPolicyValues('SSPR', 'All');

        $requestType=$this->db->select('requestType')
                 ->from('srp_erp_travel_request')
                 ->where('id',$systemID)
                 ->get()
                 ->row();

        if(!empty($requestType)){
            $requestTypeID = $requestType->requestType === 'Trip Request' ? 1 : 2;
        }
                

        $companies = $companyID;
        $groupCompanyID = $this->db->query(
            "SELECT companyGroupID 
             FROM srp_erp_companygroupdetails 
             WHERE srp_erp_companygroupdetails.companyID = $companyID"
        )->row('companyGroupID');

        if(!empty($groupCompanyID)){
            $companyList = $this->db->query(
                "SELECT companyID 
                    FROM srp_erp_companygroupdetails 
                    WHERE srp_erp_companygroupdetails.companyGroupID = $groupCompanyID"
            )->result_array();

            $companies = implode(',', array_column($companyList, 'companyID'));
        }

        $company_doc_approval_type = getApprovalTypesONDocumentCode('TRQ',$companyID);
        $approval_type_data = $this->db->query("SELECT segmentID,itemCategoryID FROM srp_erp_purchaseordermaster where purchaseOrderID = $systemID AND companyID = {$companyID}")->row_array();

        $convertFormat = convert_date_format_sql();
        $data_arr = array();
        $this->db->select("app_emp.EIdNo,app_emp.ECode,app_emp.Ename2,levelNo AS approvalLevelID, approved.approvedYN, approvedDate,approvedComments, approved.documentCode,approved.docConfirmedByEmpID,
                            approved.documentDate as documentDate, approved.docConfirmedDate AS docConfirmedDate, DATE_FORMAT(approvedDate,\"" . $convertFormat . "\")
                            AS approveDate,DATE_FORMAT(approvedDate, '%H:%i:%s') AS approveTime");
        $this->db->from('srp_erp_approvalusers ap');
        $this->db->join('srp_erp_documentapproved', 'ap.levelNo = srp_erp_documentapproved.approvalLevelID AND
                                                                    srp_erp_documentapproved.approvedEmpID = ap.employeeID AND
                                ;                                    srp_erp_documentapproved.documentID = "' . $documentID . '" AND
                                                                    srp_erp_documentapproved.companyID = "' . $companyID . '" AND
                                                                    srp_erp_documentapproved.documentSystemCode = "' . $systemID . '"', 'LEFT');
        $this->db->join('(SELECT approvedYN, approvalLevelID, documentCode, DATE_FORMAT(documentDate,\'' . $convertFormat . '\') AS documentDate, 
                DATE_FORMAT(docConfirmedDate,\'' . $convertFormat . '\') AS docConfirmedDate, docConfirmedByEmpID AS docConfirmedByEmpID FROM srp_erp_documentapproved WHERE `documentID` = "'. $documentID .'" AND `companyID` = "'. $companyID .'" AND `documentSystemCode` = "'. $systemID .'") approved', '`ap`.`levelNo` = `approved`.`approvalLevelID`', 'LEFT');
        $this->db->join('srp_employeesdetails app_emp', 'app_emp.EIdNo = ap.employeeID');
        $this->db->where('ap.documentID', $documentID);
        $this->db->where('ap.typeID', $requestTypeID);
        $this->db->where('ap.companyID', $companyID);
        $this->db->order_by('levelNo', 'ASC');
        $this->db->order_by('approvedYN', 'DESC');
        $data_arr['approved'] = $this->db->get()->result_array();
        // print_r( $data_arr['approved']);exit;
        if(!empty($data_arr['approved'])){
            $data_arr['document_code'] = $data_arr['approved'][0]['documentCode'];
            $data_arr['document_date'] = $data_arr['approved'][0]['documentDate'];
            $data_arr['confirmed_date'] = $data_arr['approved'][0]['docConfirmedDate'];
            $emp = fetch_employeeNo($data_arr['approved'][0]['docConfirmedByEmpID']);
            //$data_arr['conformed_by']   = $emp['ECode'].' - '.$emp['Ename2'];
            $data_arr['conformed_by'] = $emp['Ename2'];
        }
        return $data_arr;
        
    }

    /**
     * Fetch Employee details by ID
     *
     * @param int $empId
     * @return array|null
     */
    public function getById(int $empId): ?array
    {
        $this->db->where('EIdNo', $empId);
        $this->db->WHERE('empConfirmedYN', 1);
        $this->db->WHERE('isDischarged', 0);
        $this->db->where('Erp_companyID', current_companyID());
        return $this->db->get('srp_employeesdetails')->row_array();
    }
    
}