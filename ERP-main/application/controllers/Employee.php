<?php

use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

defined('BASEPATH') OR exit('No direct script access allowed');

/** ================================
 * -- File Name : Employee.php
 * -- Project Name : Gs_SME
 * -- Module Name : Employee
 * -- Create date : 02 - May 2016
 * -- Description :
 */
class Employee extends ERP_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Employee_model');
        $this->load->helper('employee');
        $this->load->helper('template_paySheet');
        $this->load->library('email_manual');
        $this->load->library('s3');

        ini_set('max_execution_time', 360);
        ini_set('memory_limit', '2048M');
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('hrms_approvals', $primaryLanguage);
        $this->lang->load('common', $primaryLanguage);
    }

    public function index()
    {

    }

    public function fetch_employees()
    {
        $employee_filter = '';
        $segment_filter = '';
        $employee = $this->input->post('employeeCode');
        $segment = $this->input->post('segment');
        $isDischarged = $this->input->post('isDischarged');
        if (!empty($employee) && $employee != 'null') {
            $employee = array($this->input->post('employeeCode'));
            $whereIN = "( " . join("' , '", $employee) . " )";
            $employee_filter = " AND EIdNo IN " . $whereIN;
        }
        if (!empty($segment) && $segment != 'null') {
            $segment = array($this->input->post('segment'));
            $whereIN = "( " . join("' , '", $segment) . " )";
            $segment_filter = " AND t1.segmentID IN " . $whereIN;
        }

        $male_img = $this->s3->createPresignedRequest('images/users/male.png', '1 hour');
        $female_img = $this->s3->createPresignedRequest('images/users/female.png', '1 hour');


        switch ($isDischarged) {
            case 'N':
                $discharged_filter = ' AND isDischarged != 1';
                break;

            case 'Y':
                $discharged_filter = ' AND isDischarged = 1';
                break;

            default:
                $discharged_filter = '';
        }

        $companyid = $this->common_data['company_data']['company_id'];
        $where = "t1.Erp_companyID = " . $companyid . $employee_filter . $segment_filter . $discharged_filter . "";
        $this->datatables->select('Ename2 AS empName, ECode, EDOJ, EIdNo, EmpImage,Ename2,EmpSecondaryCode,EpTelephone,DesDescription,srp_erp_segment.description as segment, Gender', false)
            ->from('srp_employeesdetails t1')
            ->join('srp_designation', 'DesignationID=t1.EmpDesignationId', 'LEFT')
            ->join('srp_erp_segment', 'srp_erp_segment.segmentID=t1.segmentID', 'LEFT')
            ->add_column('img', '<center><img class="" src="$1" style="width:30px;height: 20px;" ></center>', 'empImage_s3(EmpImage, Gender, \'' . $male_img . '\',  \'' . $female_img . '\')')
            ->add_column('emp_image', '$1', 'empMaster_action(EIdNo, empName)')
            ->add_column('action', '$1', 'empMaster_action(EIdNo, empName)')
            ->where('isSystemAdmin !=', 1)
            ->where($where);
        echo $this->datatables->generate();
    }

    public function fetch_reporting_manager_history()
    {
        $empId = trim($this->input->post('empId') ?? '');

        $this->datatables->select('empID,employeeManagersID,t3.Ename2 AS modifiedUser,t1.modifiedDate AS modifiedDate, t2.Ename2 AS managerName', false)
            ->from('srp_erp_employeemanagers t1')
            ->join('srp_employeesdetails AS t2', 't1.managerID=t2.EIdNo')
            ->join('srp_employeesdetails AS t3', 't1.modifiedUserID=t3.EIdNo')
            ->where('t1.empID', $empId)
            ->where('t1.companyID', current_companyID());
        echo $this->datatables->generate();
    }

    public function load_reporting_manager_history()
    {
        $convertFormat = convert_date_format_sql(); 
        $empID = $this->input->post('empID');
        $this->datatables->select('t1.employeeManagersID AS employeeManagersID,t1.managerID AS managerID , t3.Ename2 AS modifiedUser, t2.Ename2 AS managerName,  t1.modifiedDate AS modifiedDate, t1.active AS active,t1.isprimary AS isprimary')
            ->from('srp_erp_employeemanagers t1')
            ->join('srp_employeesdetails AS t2', 't1.managerID=t2.EIdNo', 'left')
            ->join('srp_employeesdetails AS t3', 't1.modifiedUserID=t3.EIdNo', 'left')
            ->add_column('edit', '$1', 'action_for_rep_manager(employeeManagersID, managerName)')
            ->add_column('isprimary', '$1', 'isPrimary_manager(employeeManagersID, isprimary)')
            ->add_column('isActive', '$1', 'manager_status(employeeManagersID, active)')
            ->where('t1.empID', $empID)
            ->where('t1.companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function new_employee()
    {

        $this->form_validation->set_rules('emp_title', 'Title', 'trim|required');
        //$this->form_validation->set_rules('initial', 'Initials', 'trim|required');
        $this->form_validation->set_rules('Ename4', 'Name', 'trim|required');
        $this->form_validation->set_rules('fullName', 'Full Name', 'trim|required');
        $this->form_validation->set_rules('emp_email', 'Email', 'trim|required|valid_email');
        $this->form_validation->set_rules('emp_gender', 'Gender', 'trim|required');

        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        if ($isAutoGenerate != 1) {
            $this->form_validation->set_rules('EmpSecondaryCode', 'Secondary Code', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->new_employee());
        }
    }

    public function new_empSave()
    {
        $isTibian = ($this->uri->segment(3) == 'tibian') ? 'Y' : 'N';

        $this->form_validation->set_rules('emp_title', 'Title', 'trim|required');
        //$this->form_validation->set_rules('initial', 'Initials', 'trim|required');

        if ($isTibian == 'Y') {
            $this->form_validation->set_rules('tibian_type', 'Type', 'trim|required');
            $this->form_validation->set_rules('firstName', 'First Name', 'trim|required');
            $this->form_validation->set_rules('familyName', 'Family Name', 'trim|required');
        } else {
            $this->form_validation->set_rules('Ename4', 'Name', 'trim|required');
            $this->form_validation->set_rules('fullName', 'Full Name', 'trim|required');
        }

        $this->form_validation->set_rules('emp_email', 'Email', 'trim|required|valid_email');
        $this->form_validation->set_rules('emp_gender', 'Gender', 'trim|required');

        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        if ($isAutoGenerate != 1) {
            $this->form_validation->set_rules('EmpSecondaryCode', 'Secondary Code', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->new_empSave());
        }
    }

    public function update_employee()
    {
        $isTibian = ($this->uri->segment(3) == 'tibian') ? 'Y' : 'N';

        $this->form_validation->set_rules('updateID', 'Employee ID', 'trim|required');
        //Employee System Code Auto Generated Policy
        $isAutoGenerate = getPolicyValues('ECG', 'All');
        if ($isAutoGenerate != 1) {
            $this->form_validation->set_rules('EmpSecondaryCode', 'Secondary Code', 'trim|required');
        }
        $this->form_validation->set_rules('emp_title', 'Title', 'trim|required');

        if ($isTibian == 'Y') {
            $this->form_validation->set_rules('firstName', 'First Name', 'trim|required');
            $this->form_validation->set_rules('familyName', 'Family Name', 'trim|required');
        } else {
            $this->form_validation->set_rules('Ename4', 'Name', 'trim|required');
            $this->form_validation->set_rules('fullName', 'Full Name', 'trim|required');
        }

        $this->form_validation->set_rules('emp_email', 'Email', 'trim|required|valid_email');
        $this->form_validation->set_rules('emp_gender', 'Gender', 'trim|required');


        /*if discharged*/
        $updateID = $this->input->post('updateID');
        $isDischarged = $this->db->query("SELECT isDischarged FROM srp_employeesdetails WHERE EIdNo = '$updateID'")->row('isDischarged');
        if ($isDischarged) {
            exit(json_encode(array('e', "<p>Employee is Discharged. You cannot edit.</p>")));
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $status = ['s'];

            if ($this->input->post('isConfirmed')) {

                $status = require_employeeDataStatus($updateID, $isTibian);
            }

            if ($status[0] == 'e') {
                echo json_encode(['e', 'Please fill following and then confirm <br/> ' . $status[1]]);
            } else {
                echo json_encode($this->Employee_model->update_employee());
            }

        }
    }

    public function new_employee_details()
    {
        $data = employee_details();
        echo json_encode($data);
    }

    public function employee_details()
    {
        echo json_encode($this->Employee_model->employee_details());
    }

    public function contactDetails_update()
    {

        $this->form_validation->set_rules('updateID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('ep_address4', 'Permanent Country', 'trim|required');
        $this->form_validation->set_rules('ec_address4', 'Current Country', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->contactDetails_update());
        }
    }

    public function update_emergency_contact_details()
    {

        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('contactName', 'Contact Name', 'trim|required');
        $this->form_validation->set_rules('mobile', 'Contact Mobile', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $empID = $this->input->post('empID');
        $updateID = $this->input->post('updateID');
        $contactName = $this->input->post('contactName');
        $contactName_other = $this->input->post('contactName_other');
        $mobile = $this->input->post('mobile');
        $telNo = $this->input->post('telNo');
        $address = $this->input->post('address');
        $address_other = $this->input->post('address_other');
        $relationshipType = $this->input->post('relationshipType');
        $country = $this->input->post('country');
        $companyID = current_companyID();
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $data = [
            'personToContactName' => $contactName, 'personToContactName_O' => $contactName_other, 'personToContactMobile' => $mobile,
            'personToContactTelephone' => $telNo, 'personToContactAddress' => $address, 'personToContactAddress_O' => $address_other,
            'relationshipType' => $relationshipType, 'country' => $country,
        ];

        $this->db->trans_start();

        if (empty($updateID)) {
            $insert_data = [
                'empID' => $empID, 'companyID' => $companyID, 'createdPCID' => $pc,
                'createdByUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
            ];
            $data = array_merge($data, $insert_data);
            $this->db->insert('srp_erp_employeepersontocontactdetails', $data);
        } else {
            $update_data = [
                'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
            ];
            $data = array_merge($data, $update_data);
            $this->db->where('autoID', $updateID)->update('srp_erp_employeepersontocontactdetails', $data);
        }


        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Error in emergency contact details update process']);
        } else {
            echo json_encode(['s', 'Emergency contact details updated successfully.']);
        }
    }

    public function fetch_emergency_contact_details()
    {
        $empID = trim($this->input->post('empID') ?? '');
        $companyID = current_companyID();
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-pencil" onclick="edit_emergencyContact(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span class="glyphicon glyphicon-trash traceIcon" onclick="delete_emergencyContact(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('autoID, personToContactName, personToContactName_O, personToContactMobile, personToContactTelephone, personToContactAddress,  
                 personToContactAddress_O, relationshipType, relationship, country, CountryDes,isDefault', false)
            ->from('srp_erp_employeepersontocontactdetails t1')
            ->join('srp_erp_family_relationship rel', 'rel.relationshipID=t1.relationshipType', 'left')
            ->join('srp_countrymaster county', 'county.countryID=t1.country', 'left')
            ->add_column('isCurrentStr', '<div align="center">$1</div>', 'isDefault')
            ->add_column('contactName', '$1<br/>$2', 'personToContactName,personToContactName_O')
            ->add_column('address', '$1<br/>$2', 'personToContactAddress,personToContactAddress_O')
            ->add_column('isMajorAction', '$1', 'emergency_contact_status(autoID, isDefault)')
            ->add_column('action', $details)
            ->where('t1.empID', $empID)
            ->where('t1.companyID', $companyID);
        echo $this->datatables->generate();
    }

    function delete_emergencyContact()
    {
        $delID = $this->input->post('delID');

        $this->db->trans_start();

        $this->db->delete('srp_erp_employeepersontocontactdetails', ['autoID' => $delID]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Error in emergency contact details deleted process']);
        } else {
            echo json_encode(['s', 'Emergency contact details deleted successfully.']);
        }
    }

    public function changeEmergencyContactDetails()
    {
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $hidden_id = $this->input->post('hidden-id');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();

        $this->db->trans_start();

        $this->db->query("UPDATE srp_erp_employeepersontocontactdetails SET isDefault=0 WHERE EmpID={$empID} AND companyID={$companyID}");
        $this->db->query("UPDATE srp_erp_employeepersontocontactdetails SET isDefault=1 WHERE EmpID={$empID} AND autoID={$hidden_id} AND companyID={$companyID}");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Updated successfully']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process']);
        }
    }

    public function visaDetails_update()
    {
        $this->form_validation->set_rules('updateID', 'Employee ID', 'trim|required');
        $moreRecordCount = 0;
        foreach ($_POST as $key => $postData) {
            if ($key != 'updateID' && !empty($postData)) {
                $moreRecordCount++;
            }
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            if ($moreRecordCount == 0) {
                die(json_encode(['e', 'There is no data to update']));

            }
            echo json_encode($this->Employee_model->visaDetails_update());
        }
    }

    public function update_contact_details()
    {
        $this->form_validation->set_rules('updateID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('contractStartDate', 'Start Date', 'trim|required|date');


        $empID = $this->input->post('updateID');
        $companyID = current_companyID();
        $data = $this->db->query("SELECT contType.Description, period , EmployeeConType, typeID, contType.Erp_companyID, contData.contractEndDate,
                                  (SELECT COUNT(contractID) FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID})
                                  AS contactCount, contType.is_open_contract
                                  FROM srp_employeesdetails AS empTB
                                  JOIN srp_empcontracttypes AS contType ON contType.EmpContractTypeID = empTB.EmployeeConType
                                  JOIN srp_erp_systememployeetype AS sysType ON sysType.employeeTypeID = contType.typeID
                                  LEFT JOIN(
                                        SELECT empID AS contEmpID, contractEndDate
                                        FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID} AND isCurrent=1
                                  ) AS contData ON contData.contEmpID=EIdNo
                                  AND contType.Erp_companyID={$companyID} WHERE empTB.Erp_companyID={$companyID} AND EIdNo={$empID}
                                  ")->row_array();

        if ($data['typeID'] != 2) {
            die(json_encode(['e', 'Employment type is not a contract type']));
        }

        if ($data['is_open_contract'] != 1) {
            $this->form_validation->set_rules('contractEndDate', 'End Date', 'trim|required|date');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $contractID = $this->input->post('contractID');
        $isRenew = $this->input->post('isRenew');
        $contractStartDate = $this->input->post('contractStartDate');
        $contractEndDate = $this->input->post('contractEndDate');
        $contractRefNo = $this->input->post('contractRefNo');


        $date_format_policy = date_format_policy();
        $contractStartDate = (!empty($contractStartDate)) ? input_format_date($contractStartDate, $date_format_policy) : null;
        $contractEndDate = (!empty($contractEndDate)) ? input_format_date($contractEndDate, $date_format_policy) : null;


        $lastContractDate = $data['contractEndDate'];
        $period = $data['period'];
        $endDate = date('Y-m-d', strtotime($contractStartDate . ' +' . $period . ' month'));

        if ($data['is_open_contract'] != 1) {
            if ($contractStartDate > $contractEndDate) {
                die(json_encode(['e', 'Contract end date should be greater than start date.']));
            }

            if ($contractEndDate > $endDate) {
                die(json_encode(['e', 'Contract end date should be lesser than ' . $endDate]));
            }
        } else {
            if ($contractEndDate != null) {
                if ($contractStartDate > $contractEndDate) {
                    die(json_encode(['e', 'Contract end date should be greater than start date.']));
                }
            }
        }


        $isPeriodExist = $this->db->query("SELECT contractID FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID}
                                           AND (
                                              ('$contractStartDate' BETWEEN contractStartDate AND contractEndDate )
                                              OR ('$contractEndDate' BETWEEN contractStartDate AND contractEndDate )
                                              OR ( (contractStartDate > '$contractStartDate') AND (contractEndDate < '$contractEndDate') )
                                           )")->row('contractID');


        $this->db->trans_start();

        $this->db->where(['empID' => $empID, 'companyID' => $companyID])->update('srp_erp_empcontracthistory', ['isCurrent' => 0]);

        $isRenew = ($data['contactCount'] == 0) ? 1 : $isRenew;

        if ($isRenew == 1) {

            if (!empty($isPeriodExist)) {
                die(json_encode(['e', 'Contract period is falling with already existing contact dates']));
            }

            $data = array(
                'empID' => $empID,
                'contactTypeID' => $data['EmployeeConType'],
                'contractStartDate' => $contractStartDate,
                'contractEndDate' => $contractEndDate,
                'contractRefNo' => $contractRefNo,
                'companyID' => $companyID,
                'CreatedUserName' => current_employee(),
                'CreatedPC' => current_pc(),
                'CreatedDate' => current_date()
            );

            $this->db->insert('srp_erp_empcontracthistory', $data);
            $contractID = $this->db->insert_id();
        } else {

            if (!empty($isPeriodExist) && $contractID != $isPeriodExist) {
                die(json_encode(['e', 'Contract period is falling with already existing contact dates']));
            }

            $data = array(
                'isCurrent' => 1,
                'contractStartDate' => $contractStartDate,
                'contractEndDate' => $contractEndDate,
                'contractRefNo' => $contractRefNo,
                'ModifiedUserName' => current_employee(),
                'ModifiedPC' => current_pc()
            );

            $this->db->where(['empID' => $empID, 'companyID' => $companyID, 'contractID' => $contractID])
                ->update('srp_erp_empcontracthistory', $data);

        }

        $this->db->trans_complete();
        if ($this->db->trans_status() > 0) {
            $this->db->trans_commit();
            die(json_encode(['s', 'Employee Contract Details Updated Successfully.', $contractID]));
        } else {
            $this->db->trans_rollback();
            die(json_encode(['e', 'Error In Employee Contract Details Updating']));
        }
    }

    public function new_empTitle()
    {
        $this->form_validation->set_rules('title', 'Title', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->new_empTitle());
        }
    }

    public function new_travel_frequency()
    {
        $this->form_validation->set_rules('travel_frequency', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $travel_frequency = trim($this->input->post('travel_frequency') ?? '');
        $companyID = current_companyID();
        $isExist = $this->db->query("SELECT travelFrequencyID FROM srp_erp_travelfrequency WHERE companyID={$companyID} AND frequencyDescription='$travel_frequency' ")->row_array();

        if (isset($isExist)) {
            die(json_encode(['e', 'This description is already exists']));
        }

        $data = array(
            'frequencyDescription' => $travel_frequency,
            'companyID' => current_companyID(),
            'createdPC' => current_pc(),
            'createdUserID' => current_userID(),
            'createdDate' => current_date()
        );

        $this->db->insert('srp_erp_travelfrequency', $data);
        if ($this->db->affected_rows() > 0) {
            $insertID = $this->db->insert_id();
            echo json_encode(['s', 'Travel frequency is created successfully.', $insertID]);
        } else {
            echo json_encode(['e', 'Error in travel frequency Creating']);
        }
    }

    public function employee_rejoin()
    {
        $this->form_validation->set_rules('rejoinEmpID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('rejoinDate', 'Rejoin date', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->employee_rejoin());
        }
    }

    /*Start of Employee Employment */
    public function load_employmentView()
    {
        $empID = $this->input->post('empID');
        $template = trim($this->input->post('template') ?? '');
        $template = (!empty($template)) ? trim($template) : '';
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $data['empID'] = $empID;
        $data['isInitialLoad'] = 'Y';

        /*$data['isSalaryDeclared'] = $this->db->query("SELECT count(employeeNo) AS decCount FROM srp_erp_salarydeclarationdetails
                                                      WHERE companyID={$companyID} AND employeeNo={$empID}")->row('decCount');*/

        $data['isSalaryDeclared'] = 0;
       

        if ($template == 'envoy_' or $template == 'tibian_') {
            $str = "LEFT JOIN(
                        SELECT empID AS contEmpID, contractID, contactTypeID, contractStartDate, contractEndDate, contractRefNo
                        FROM srp_erp_empcontracthistory WHERE companyID={$companyID} AND empID={$empID} AND isCurrent=1
                    ) AS contData ON contData.contEmpID=EIdNo";
            $subTB = 'contData.';
            $selectCol = ', contractID, commissionSchemeID';
        } else {
            $str = $subTB = $selectCol = '';
        }
        
        $data['employmentData'] = $this->db->query("SELECT empTB.sponsorID,DATE_FORMAT(EDOJ,'{$convertFormat}') AS EDOJ, DATE_FORMAT(DateAssumed,'{$convertFormat}') AS DateAssumed,burdenRate,ClientID,clientCommisionPerentage,
                                                    payCurrency, payCurrencyID, segmentID, probationPeriod, isPayrollEmployee, gratuityID, EmployeeConType, typeID,DATE_FORMAT(salaryStopDate,'{$convertFormat}') AS salaryStopDate,salaryStopReason,visaProfession,labourCode, 
                                                    IF(ISNULL(probationPeriod),0,TIMESTAMPDIFF(MONTH, DateAssumed, probationPeriod)) AS probationPeriodMonth,
                                                    managerName, managerID, DATE_FORMAT({$subTB}contractStartDate,'{$convertFormat}') AS contractStartDate,
                                                    DATE_FORMAT({$subTB}contractEndDate,'{$convertFormat}') AS contractEndDate, {$subTB}contractRefNo,locationID,                                                    
                                                    DATE_FORMAT(probationPeriod,'{$convertFormat}') AS probationPeriodCnvt, manPowerNo, gradeID, pos_barCode,
                                                    DATE_FORMAT(EPassportExpiryDate,'{$convertFormat}') AS EPassportExpiryDate, AirportDestinationID,travelFrequencyID,
                                                    EPassportNO, DATE_FORMAT(EVisaExpiryDate,'{$convertFormat}') AS EVisaExpiryDate, familyStatusID, payee_emp_type, 
                                                    mobileCreditLimit {$selectCol},visaPartyType,visaPartyID, empTB.activityCodeID AS activityCodeID, srp_erp_activity_code_main.activity_code AS activity_code, empTB.airTicketEligible,visaNumber,transportationProvided,employeePersonalNumber
                                                    FROM srp_employeesdetails AS empTB
                                                    LEFT JOIN(
                                                       SELECT empID, managerID, CONCAT(ECode, '_' ,Ename2) AS managerName FROM  srp_erp_employeemanagers
                                                       JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo=srp_erp_employeemanagers.managerID
                                                       WHERE empID={$empID} AND companyID={$companyID} AND active=1
                                                    )  AS managersTB ON managersTB.empID = empTB.EIdNo
                                                    {$str}
                                                    LEFT JOIN(
                                                      SELECT typeID, EmpContractTypeID FROM srp_empcontracttypes AS empConTyp
                                                      JOIN srp_erp_systememployeetype AS sysType ON sysType.employeeTypeID=empConTyp.typeID
                                                      WHERE Erp_CompanyID={$companyID}
                                                    ) AS sysContractType ON sysContractType.EmpContractTypeID = EmployeeConType 
                                                    LEFT JOIN srp_erp_activity_code_main ON empTB.activityCodeID = srp_erp_activity_code_main.id
                                                    WHERE Erp_companyID={$companyID} AND EIdNo={$empID} ")->row_array();

        $this->load->view('system/hrm/ajax/' . $template . 'load_employmentView', $data);
        unset($data['employmentData']);


        $data['moreDesignation'] = $this->db->query("SELECT t1.DesignationID, t1.DesDescription FROM srp_designation t1 WHERE
                                                     Erp_companyID={$companyID} AND NOT EXISTS (
                                                           SELECT DesignationID FROM srp_employeedesignation WHERE
                                                           DesignationID = t1.DesignationID AND EmpID={$empID}
                                                         ) AND isDeleted!=1
                                                     ")->result_array();

        $data['empDesignationCount'] = $this->db->query("SELECT COUNT(DesignationID) usageCount FROM srp_employeedesignation
                                                         WHERE EmpID={$empID} AND isActive=1")->row('usageCount');
        $this->load->view('system/hrm/ajax/load_empDesignationView', $data);
        unset($data['empDesignationCount']);
        unset($data['moreDesignation']);

        $data['moreDepartment'] = $this->db->query("SELECT t1.DepartmentMasterID, t1.DepartmentDes FROM srp_departmentmaster t1 WHERE
                                                     Erp_companyID={$companyID} AND NOT EXISTS (
                                                           SELECT DepartmentMasterID FROM srp_empdepartments WHERE
                                                           DepartmentMasterID = t1.DepartmentMasterID AND EmpID={$empID}
                                                         )
                                                     AND isActive=1")->result_array();
        $this->load->view('system/hrm/ajax/load_empDepartmentView', $data);

    }

    public function load_reporting_structure(){

        $this->load->helper('employee_helper');
        $empID = trim($this->input->post('empID') ?? '');

        //$master = get_all_reporting_structures();
        $master = $this->db->query("SELECT 
                    MASTER.description,
                MASTER.id
            FROM
                srp_erp_employee_reporting_structure reporting
                LEFT JOIN srp_erp_reporting_structure_master MASTER ON reporting.reportingStructureID = MASTER.id
                LEFT JOIN srp_employeesdetails details ON reporting.empID = details.EIdNo 
            WHERE
                details.EIdNo = '{$empID}' 
                AND details.activityCodeID IS NOT NULL 
                AND MASTER.captureHRYN = 1;
        ")->result_array();


        $det = $this->db->query("SELECT
                details.id AS id,
                details.detail_code,
                details.detail_description,
                details.structureMasterID AS structureMasterID 
            FROM
                srp_erp_reporting_structure_details details
                LEFT JOIN srp_erp_reporting_structure_master MASTER ON details.structureMasterID = MASTER.id
        ")->result_array();


        $this->db->select('*');
        $this->db->from('srp_erp_employee_reporting_structure');
        $this->db->where('empID', $empID);
        $desc = $this->db->get()->result_array();

        $data['master'] = $master;
        $data['details'] = $det;
        $data['description'] = $desc;
        //$this->load->view('system/hrm/ajax/load_ajax_reporting_structures_view_new', $data);
        $this->load->view('system/hrm/ajax/load_ajax_reporting_structures_view', $data);
    }


    public function getEmployeeJoinDate()
    {
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();

        $joinDate = $this->db->query("SELECT DATE_FORMAT(EDOJ,'{$convertFormat}') AS EDOJ FROM srp_employeesdetails
                                    WHERE Erp_companyID={$companyID} AND EIdNo={$empID} ")->row('EDOJ');
        echo json_encode(['s', $joinDate]);
    }

    public function save_employmentData()
    {
        $empID = $this->input->get('empID');
        $empConfirmedYN = isEmployeeConfirmed($empID);

        if ($empConfirmedYN == 1) {
            $this->form_validation->set_rules('empDoj', 'Date of joined', 'trim|date');
            $this->form_validation->set_rules('dateAssumed', 'Date Assumed', 'trim|required');
            $this->form_validation->set_rules('employeeConType', 'Employee Type', 'trim|required');
            $this->form_validation->set_rules('empCurrency', 'Currency', 'trim|required');
            $this->form_validation->set_rules('empSegment', 'Segment', 'trim|required');

            if ($this->form_validation->run() == FALSE) {
                echo json_encode(array('e', validation_errors()));
            } else {
                echo json_encode($this->Employee_model->save_employmentData());
            }

        } else {
            $otherData = $this->input->post();
            $isValueSet = 0;

            foreach ($otherData as $key => $val) {
                if (!empty(trim($val))) {
                    $isValueSet = 1;
                    break;
                }
            }

            if ($isValueSet == 0) {
                echo json_encode(['e', 'There is no data to save']);
            } else {
                $dateAssumed = trim($this->input->post('dateAssumed') ?? '');
                $probationPeriod = trim($this->input->post('probationPeriod') ?? '');

                if (!empty($probationPeriod) && empty($dateAssumed)) {
                    exit(json_encode(['e', 'You can not add probation period without date assume']));
                }

                echo json_encode($this->Employee_model->save_employmentData());
            }
        }


    }

    public function save_employmentData_envoy()
    {
        $empID = $this->input->get('empID');
        $visaPartyType = $this->input->post('visaPartyType');
        $empConfirmedYN = isEmployeeConfirmed($empID);
        $advacneCost = getPolicyValues('ACC', 'All');
        $dateConfirmed=getPolicyValues('LNG', 'All');

        if ($empConfirmedYN == 1) {
            $this->form_validation->set_rules('empDoj', 'Date of joined', 'trim|date');
            $this->form_validation->set_rules('employeeConType', 'Employee Type', 'trim|required');
            $this->form_validation->set_rules('empCurrency', 'Currency', 'trim|required');
            $this->form_validation->set_rules('empSegment', 'Segment', 'trim|required');
            $this->form_validation->set_rules('visaPartyType', 'Visa Type', 'trim|required');
            if($advacneCost == 1){
                $this->form_validation->set_rules('activityCode', 'Activity Code', 'trim|required');
            }

            if($dateConfirmed != 'MSE'){
                $this->form_validation->set_rules('dateAssumed', 'Date Assumed', 'trim|required');
            }
          

            if($visaPartyType == 2){
                $this->form_validation->set_rules('visaPartyID', 'Visa Sponsorer', 'trim|required');
            }
            

            if ($this->form_validation->run() == FALSE) {
                echo json_encode(array('e', validation_errors()));
            } else {
                echo json_encode($this->Employee_model->save_employmentData_envoy());
            }

        } else {
            $otherData = $this->input->post();
            $isValueSet = 0;

            foreach ($otherData as $key => $val) {
                if (!empty(trim($val))) {
                    $isValueSet = 1;
                    break;
                }
            }

            if ($isValueSet == 0) {
                echo json_encode(['e', 'There is no data to save']);
            } else {
                $dateAssumed = trim($this->input->post('dateAssumed') ?? '');
                $probationPeriod = trim($this->input->post('probationPeriod') ?? '');

                if (!empty($probationPeriod) && empty($dateAssumed)) {
                    exit(json_encode(['e', 'You can not add probation period without date assume']));
                }

                echo json_encode($this->Employee_model->save_employmentData_envoy());
            }
        }
    }

    public function change_employee_activityCodeType(){
        $this->form_validation->set_rules('activityCodeID', 'Activity Code Type', 'trim|date');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }
        else{
            echo json_encode($this->Employee_model->change_employee_activityCodeType());
        }
    }

    public function update_employee_reporting_structure(){
        echo json_encode($this->Employee_model->update_employee_reporting_structure());
    }

    public function save_employmentData_tibian()
    {
        $empID = $this->input->get('empID');
        $empConfirmedYN = isEmployeeConfirmed($empID);

        if ($empConfirmedYN == 1) {
            $this->form_validation->set_rules('empDoj', 'Date of joined', 'trim|date');
            $this->form_validation->set_rules('employeeConType', 'Employee Type', 'trim|required');
            $this->form_validation->set_rules('empCurrency', 'Currency', 'trim|required');
            $this->form_validation->set_rules('empSegment', 'Segment', 'trim|required');

            if ($this->form_validation->run() == FALSE) {
                die(json_encode(['e', validation_errors()]));
            }

            echo json_encode($this->Employee_model->save_employmentData_tibian());

        } else {
            $otherData = $this->input->post();
            $isValueSet = 0;

            foreach ($otherData as $key => $val) {
                if (!empty(trim($val))) {
                    $isValueSet = 1;
                    break;
                }
            }

            if ($isValueSet == 0) {
                die(json_encode(['e', 'There is no data to save']));
            }

            $empDoj = trim($this->input->post('empDoj') ?? '');
            $probationPeriod = trim($this->input->post('probationPeriod') ?? '');

            if (!empty($probationPeriod) && empty($empDoj)) {
                die(json_encode(['e', 'You can not add probation period without date join']));
            }

            echo json_encode($this->Employee_model->save_employmentData_tibian());
        }
    }

    public function fetch_contractHistory()
    {
        $empID = trim($this->input->post('empID') ?? '');
        $format = convert_date_format_sql();
        $companyID = current_companyID();

        $isContract = $this->db->query("SELECT typeID FROM srp_employeesdetails AS empTB
                                        LEFT JOIN(
                                            SELECT typeID, EmpContractTypeID FROM srp_empcontracttypes AS empConTyp
                                            JOIN srp_erp_systememployeetype AS sysType ON sysType.employeeTypeID=empConTyp.typeID
                                            WHERE Erp_CompanyID={$companyID}
                                       ) AS sysContractType ON sysContractType.EmpContractTypeID = EmployeeConType
                                       WHERE Erp_companyID={$companyID} AND EIdNo={$empID} ")->row('typeID');


        $this->datatables->select('contractID, DATE_FORMAT(contractStartDate,\'' . $format . '\') AS contractStartDate, IF(isCurrent=1, \'Yes\', \'No\') AS isCurrent1,
                          DATE_FORMAT(contractEndDate,\'' . $format . '\') AS contractEndDate, contractRefNo, isCurrent', false)
            ->from('srp_erp_empcontracthistory t1')
            ->add_column('isCurrentStr', '<div align="center">$1</div>', 'isCurrent1')
            ->add_column('action', '$1', 'action_contractHistory(contractID, ' . $isContract . ')')
            ->where('t1.empID', $empID)
            ->where('t1.companyID', $companyID);
        echo $this->datatables->generate();
    }

    function print_contractHistory()
    {
        $empID = trim($empID = trim($this->uri->segment(3)));
        $format = convert_date_format_sql();

        $data['master'] = $this->Employee_model->employee_details($empID);
        $data['history'] = $this->db->select('contractID, DATE_FORMAT(contractStartDate,\'' . $format . '\') AS contractStartDate,
                            IF(isCurrent=1, \'Yes\', \'No\') AS isCurrent1,
                            DATE_FORMAT(contractEndDate,\'' . $format . '\') AS contractEndDate, contractRefNo')
            ->from('srp_erp_empcontracthistory t1')
            ->where('t1.empID', $empID)
            ->where('t1.companyID', current_companyID())
            ->get()->result_array();

        $html = $this->load->view('system\hrm\print\contractHistory', $data, true);
        //echo $html;
        $this->load->library('pdf');
        $this->pdf->printed($html, 'A5', 1);
    }

    function export_excelContractHistory()
    {

        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Employee Contact History');

        $header = ['Contract Start Date', 'Contract End Date ', 'Contract Ref No.', 'Is Current'];
        $empID = trim($empID = trim($this->uri->segment(3)));
        $format = convert_date_format_sql();

        $emp_data = $this->Employee_model->employee_details($empID);
        $history = $this->db->select('DATE_FORMAT(contractStartDate,\'' . $format . '\') AS contractStartDate,
                            DATE_FORMAT(contractEndDate,\'' . $format . '\') AS contractEndDate, contractRefNo,
                            IF(isCurrent=1, \'Yes\', \'No\') AS isCurrent1,')
            ->from('srp_erp_empcontracthistory t1')
            ->where('t1.empID', $empID)
            ->where('t1.companyID', current_companyID())
            ->get()->result_array();


        $this->excel->getActiveSheet()->fromArray([current_companyName()], null, 'A1');

        $this->excel->getActiveSheet()->getStyle('A1')->getFont()->setBold(true)->setSize(13)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray([$emp_data['ECode'] . ' - ' . $emp_data['Ename1']], null, 'A2');
        $this->excel->getActiveSheet()->getStyle('A2')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray(['Employee Contract History'], null, 'A3');
        $this->excel->getActiveSheet()->getStyle('A3')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A3')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray($header, null, 'A5');
        $this->excel->getActiveSheet()->fromArray($history, null, 'A6');

        $filename = 'Employee Contact History.xls'; //save our workbook as this file name
        header('Content-Type: application/vnd.ms-excel;charset=utf-16'); //mime type
        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name
        header('Cache-Control: max-age=0'); //no cache
        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function getDate()
    {

        $pr_period = $this->input->post('pr_period');
        $period = $this->input->post('period');
        $empDoj = $this->input->post('empDoj');
        $date_format_policy = date_format_policy();
        $empDoj = input_format_date($empDoj, $date_format_policy);
        $convertFormat = str_replace('%', '', convert_date_format_sql());

        if (empty($pr_period) or $pr_period == 0) {
            $date = '';
        } else {
            $date = date('Y-m-d', strtotime($empDoj . ' +' . $pr_period . ' month'));
            $date = date('Y-m-d', strtotime($date . ' -1 day'));
            $date = date($convertFormat, strtotime($date));
        }


        if (empty($period) or $period == 0) {
            $date2 = '';
        } else {
            $date2 = date('Y-m-d', strtotime($empDoj . ' +' . $period . ' month'));
            $date2 = date('Y-m-d', strtotime($date2 . ' -1 day'));
            $date2 = date($convertFormat, strtotime($date2));

        }

        echo json_encode([$date, $date2]);
    }

    function delete_empContract()
    {
        $contractID = trim($this->input->post('contractID') ?? '');

        $this->db->trans_start();
        $this->db->where(['companyID' => current_companyID(), 'contractID' => $contractID])->delete('srp_erp_empcontracthistory');
        $this->db->trans_complete();
        if ($this->db->trans_status() > 0) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Employee Contract Details Deleted Successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error In Employee Contract Details Deleting']);
        }
    }


    public function save_reportingManager()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('managerID', 'Manager', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_reportingManager());
        }
    }
    /*End of Employee Employment */



    /*Start of Employee Designation */
    public function load_empDesignationView()
    {
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $data['empID'] = $empID;
        $data['isInitialLoad'] = 'N';
        $data['moreDesignation'] = $this->db->query("SELECT t1.DesignationID, t1.DesDescription FROM srp_designation t1 WHERE
                                                     Erp_companyID={$companyID} AND NOT EXISTS (
                                                           SELECT DesignationID FROM srp_employeedesignation WHERE
                                                           DesignationID = t1.DesignationID AND EmpID={$empID}
                                                         )
                                                     ")->result_array();

        $data['empDesignationCount'] = $this->db->query("SELECT COUNT(DesignationID) usageCount FROM srp_employeedesignation
                                                         WHERE EmpID={$empID} AND isActive=1")->row('usageCount');

        $this->load->view('system/hrm/ajax/load_empDesignationView', $data);
    }

    public function load_empDesignation_PDF_print()
    {
        $convertFormat = convert_date_format_sql();
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $data['master'] = $this->Employee_model->employee_details($empID);
        $data['moreDesignation'] = $this->db->query('SELECT EmpDesignationID, startDate, endDate, isMajor, t1.DesignationID AS DesignationID, DesDescription, isActive,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate_format, DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate_format FROM srp_employeedesignation AS t1 LEFT JOIN srp_designation AS t2 ON t1.DesignationID=t2.DesignationID WHERE EmpID = ' . $empID . ' AND isActive = 1 AND t1.Erp_companyID = ' . $companyID . '')->result_array();
        $html = $this->load->view('system/hrm/print/employeeDesignation_history_print', $data, true);
        $this->load->library('pdf');
        $pdf = $this->pdf->printed($html, 'A4', $data);
    }

    public function fetch_empDesignations()
    {
        $convertFormat = convert_date_format_sql();

        $empID = $this->input->post('empID');
        $this->datatables->select('EmpDesignationID, startDate, endDate, isMajor, t1.DesignationID AS DesignationID, DesDescription, isActive,
                DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate_format, DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate_format,
                ')
            ->from('srp_employeedesignation AS t1')
            ->join('srp_designation AS t2', 't1.DesignationID=t2.DesignationID')
            ->add_column('edit', '$1', 'action_empDesignation(EmpDesignationID, DesDescription, isMajor)')
            ->add_column('isMajorAction', '$1', 'designation_status(DesignationID, isMajor)')
            ->add_column('isActiveAction', '$1', 'designationActive_status(EmpDesignationID, isActive)')
            ->where('EmpID', $empID)
            //->where('isActive', 1) As discuss with Hisham and Hilmy we have to show in-active records also as a History (2019-06-12)
            ->where('t1.Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }


    public function delete_reportingManagers()
    {
        $this->form_validation->set_rules('managerAutoID', 'Reporting Auto ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_reportingManagers());
        }
    }


    public function save_empDesignations()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('designationID', 'Designation', 'trim|required');
        $this->form_validation->set_rules('startDate[]', 'Start Date', 'trim|date|required');
        $this->form_validation->set_rules('endDat', 'End Date', 'trim|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empDesignations());
        }
    }

    public function edit_empDesignations()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('designationID-hidden', 'Designation', 'trim|required');
        $this->form_validation->set_rules('edit_startDate', 'Start Date', 'trim|required|date');
        $this->form_validation->set_rules('edit_endDate', 'End Date', 'trim|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_empDesignations());
        }
    }


    public function delete_empDesignation()
    {
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empDesignation());
        }
    }

    public function changeEmpMajorDesignation()
    {
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->changeEmpMajorDesignation());
        }
    }
    public function change_rep_manager_Active_status()
    {
        //$this->form_validation->set_rules('hidden-id', 'Manager ID', 'required');
        $this->form_validation->set_rules('empID', 'empID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->change_rep_manager_Active_status());
        }
    }

    public function change_rep_manager_primary_status()
    {
       // $this->form_validation->set_rules('managerAutoID', 'Reporting Manager ID', 'required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->change_rep_manager_primary_status());
        }
    }

    public function changeActiveDesignation()
    {
        $this->form_validation->set_rules('hidden-id', 'Reporting Manager ID', 'required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->changeActiveDesignation());
        }
    }

    /*End of Employee Designation */


    /*Start of Religion */
    public function fetch_religion()
    {
        $this->datatables->select('RId,Religion,
               IFNULL( (SELECT COUNT(EIdNo) FROM srp_employeesdetails WHERE Rid=t1.RId GROUP BY Rid), 0 ) AS usageCount')
            ->from('srp_religion AS t1')
            ->add_column('edit', '$1', 'action_religion(RId,Religion,usageCount)')
            ->where('Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveReligion()
    {
        $this->form_validation->set_rules('description[]', 'Religion', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveReligion());
        }
    }

    public function editReligion()
    {
        $this->form_validation->set_rules('religionDes', 'Religion', 'required');
        $this->form_validation->set_rules('hidden-id', 'Religion ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editReligion());
        }
    }

    public function deleteReligion()
    {
        $this->form_validation->set_rules('hidden-id', 'Religion ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteReligion());
        }
    }
    /*End of Religion */


    /*Start of Country */
    public function fetch_country()
    {
        $this->datatables->select('countryID, countryShortCode, CountryDes,
            IFNULL( (SELECT COUNT(EIdNo) FROM srp_employeesdetails WHERE EcAddress4=t1.countryID  OR EpAddress4=t1.countryID ), 0 ) AS usageCount,t2.cityName as cityName')
            ->from('srp_countrymaster AS t1')
            ->join('srp_erp_citymaster as t2','t1.countryID = t2.countrtyID','left')
            ->add_column('edit', '$1', 'action_country(countryID,CountryDes,usageCount,cityName)')
            ->where('Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    /*public function fetch_allCountry(){
        $this->datatables->select('countryID, countryShortCode, CountryDes')
            ->from('srp_erp_countrymaster AS t1')
            ->add_column('edit', '$1', 'action_selectCountry(countryID, CountryDes, countryShortCode)')
            ->where('NOT EXISTS ( SELECT countryID FROM srp_countrymaster WHERE countryMasterID = t1.countryID
                        AND Erp_companyID ='.current_companyID().')');

        echo $this->datatables->generate();
    }*/

    public function fetch_allCountry()
    {
        $data['countries'] = $this->Employee_model->fetch_allCountry();
        $this->load->view('system/hrm/ajax/load_countries', $data);
    }

    public function saveCountry()
    {
        $this->form_validation->set_rules('country', 'Country', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveCountry());
        }
    }

    public function editCountry()
    {
        $this->form_validation->set_rules('religionDes', 'Religion', 'required');
        $this->form_validation->set_rules('hidden-id', 'Religion ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editCountry());
        }
    }

    public function deleteCountry()
    {
        $this->form_validation->set_rules('hidden-id', 'Religion ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteCountry());
        }
    }

    
    function fetchCity(){
        $this->form_validation->set_rules('countryID', 'Country ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->fetchCity());
        }
    }

    function addCity(){
        $this->form_validation->set_rules('countryID', 'Country ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $continue = $this->input->post('continue');
            echo json_encode($this->Employee_model->addCity($continue));
        }
    }

    function deleteCity(){
        echo json_encode($this->Employee_model->deleteCity());
    }

    public function fetch_airport_destination()
    {
        $this->datatables->select('destinationID, airportName, shortCode,
            countryID,Country,cityID,City')
            ->from('srp_erp_airportdestinationmaster AS t1')
            ->add_column('edit', '$1', 'action_airport_destination(countryID,destinationID, cityID, City)');

        echo $this->datatables->generate();
    }
    /*End of Country */


    /*Start of Designation */
    public function fetch_designation()
    {
        $this->datatables->select('DesignationID, DesDescription,
            IFNULL( (SELECT COUNT(EmpDesignationID) FROM srp_employeedesignation WHERE DesignationID=t1.DesignationID ), 0 ) AS usageCount')
            ->from('srp_designation AS t1')
            ->add_column('edit', '$1', 'action_designation(DesignationID, DesDescription, usageCount)')
            ->where('isDeleted', '0')
            ->where('Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function fetch_job_category()
    {
        $this->datatables->select('id,JobCategory,companyID')
            ->from('srp_erp_designation_category')
            ->add_column('edit', '$1', 'action_job_category(id, JobCategory, companyID)')
            ->where('isDeleted', '0')
            ->where('companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveDesignation()
    {
        $this->form_validation->set_rules('designationName', 'Designation Name', 'required');
        $this->form_validation->set_rules('jobCategoryID', 'Job Category', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveDesignation());
        }
    }

    public function updateJDDescription()
    {
        $this->form_validation->set_rules('JDDescription', 'JD Description', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->updateJDDescription());
        }
    }

    function checkJDDescription()
    {
        $id = $this->input->post('id');
        $companyID = current_companyID();
        $data = $this->db->query("SELECT JDDescription FROM srp_designation WHERE DesignationID={$id} AND Erp_companyID={$companyID}")->row_array();
        echo json_encode($data);
    }

    public function editDesignation()
    {
        $this->form_validation->set_rules('designationDes', 'Designation', 'required');
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editDesignation());
        }
    }

    public function deleteDesignation()
    {
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteDesignation());
        }
    }
    /*End of Designation */

    public function saveJobCategory()
    {
        $this->form_validation->set_rules('job_category_name', 'Job Category', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveJobCategory());
        }
    }

    public function deleteJobCategory()
    {
        $this->form_validation->set_rules('hidden-id', 'Job Category ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteJobCategory());
        }
    }


    /*Start of Qualification */
    public function load_empQualificationView()
    {
        //$this->load->view('system/hrm/ajax/load_empQualificationView');

        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $dateColumns = 'DATE_FORMAT(dateFrom,\'' . $convertFormat . '\') AS dateFromStr,';
        $dateColumns .= 'DATE_FORMAT(dateTo,\'' . $convertFormat . '\') AS dateToStr';
        $ed_details = $this->db->query("SELECT *, {$dateColumns} FROM srp_erp_employeeeducationaldetails AS t1
                                        JOIN srp_erp_degreetype AS t2 ON t2.degreeTypeID=t1.degree
                                        WHERE empID={$empID} AND companyID={$companyID}")->result_array();
        $data['details'] = $ed_details;

        $dateColumns = 'DATE_FORMAT(AwardedDate,\'' . $convertFormat . '\') AS awardedDateStr';
        $certification_data = $this->db->query("SELECT *, {$dateColumns} FROM srp_empcertification WHERE EmpID={$empID}")->result_array();
        $data['certification_data'] = $certification_data;

        $this->load->view('system/hrm/ajax/load_empEducationView', $data);
    }

    public function fetch_qualification()
    {
        $empID = $this->input->post('empID');
        $this->datatables->select('certificateID, Description, AwardedDate, GPA, Institution')
            ->from('srp_empcertification')
            ->add_column('edit', '$1', 'action_qualification(certificateID, Description)')
            ->where('EmpID', $empID);

        echo $this->datatables->generate();
    }

    public function saveQualification()
    {
        $this->form_validation->set_rules('certification', 'Certification', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveQualification());
        }
    }

    public function editQualification()
    {
        $this->form_validation->set_rules('certification', 'Qualification', 'required');
        $this->form_validation->set_rules('hidden-id', 'Qualification ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editQualification());
        }
    }

    public function deleteQualification()
    {
        $this->form_validation->set_rules('hidden-id', 'Qualification ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteQualification());
        }
    }
    /*End of Qualification */

    /***Start of Employee Academic ***/
    function saveAcademic()
    {

        $this->form_validation->set_rules('school', 'School', 'required');
        $this->form_validation->set_rules('degree', 'Degree', 'required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $school = $this->input->post('school');
        $empID = $this->input->post('empID');
        $degree = $this->input->post('degree');
        $fieldOfStudy = $this->input->post('fieldOfStudy');
        $grade = $this->input->post('grade');
        $dateFrom = $this->input->post('dateFrom');
        $dateTo = $this->input->post('dateTo');
        $currentlyReadingYN = $this->input->post('currentlyReadingYN');
        $description = $this->input->post('description');
        $acc_society = $this->input->post('acc_society');
        $isFrom = $this->input->post('isFrom');
        $hrVerified = $this->input->post('isVerified');


        $date_format_policy = date_format_policy();
        $dateFrom = (!empty($dateFrom)) ? input_format_date($dateFrom, $date_format_policy) : null;
        $dateTo = (!empty($dateTo)) ? input_format_date($dateTo, $date_format_policy) : null;

        $data = array(
            'empID' => $empID,
            'school' => $school,
            'degree' => $degree,
            'fieldOfStudy' => $fieldOfStudy,
            'grade' => $grade,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
            'currentlyReadingYN' => $currentlyReadingYN,
            'description' => $description,
            'activitiesSocieties' => $acc_society,
            'companyID' => current_companyID(),
            'createdUserID' => current_userID(),
            'createdPCID' => current_pc(),
            'createdDateTime' => current_date()
        );

        if ($isFrom != 'profile') {
            if ($hrVerified == 1) {
                $data['hrVerified'] = $hrVerified;
                $data['verifiedUserID'] = current_userID();
                $data['verifiedPC'] = current_pc();
                $data['verifiedDateTime'] = current_date();
            }

        }

        $int = $this->db->insert('srp_erp_employeeeducationaldetails', $data);

        if ($int) {
            echo json_encode(['s', 'Inserted successfully']);
        } else {
            $common_failed = $this->lang->line('common_failed');/* 'failed'*/
            echo json_encode(['e', $common_failed]);
        }
    }

    function updateAcademic()
    {

        $this->form_validation->set_rules('school', 'School', 'required');
        $this->form_validation->set_rules('degree', 'Degree', 'required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $id = $this->input->post('hidden-id-acc');
        $school = $this->input->post('school');
        $empID = $this->input->post('empID');
        $degree = $this->input->post('degree');
        $fieldOfStudy = $this->input->post('fieldOfStudy');
        $grade = $this->input->post('grade');
        $dateFrom = $this->input->post('dateFrom');
        $dateTo = $this->input->post('dateTo');
        $currentlyReadingYN = $this->input->post('currentlyReadingYN');
        $description = $this->input->post('description');
        $acc_society = $this->input->post('acc_society');
        $isFrom = $this->input->post('isFrom');
        $hrVerified = $this->input->post('isVerified');

        $date_format_policy = date_format_policy();
        $dateFrom = (!empty($dateFrom)) ? input_format_date($dateFrom, $date_format_policy) : null;
        $dateTo = (!empty($dateTo)) ? input_format_date($dateTo, $date_format_policy) : null;

        $data = array(
            'empID' => $empID,
            'school' => $school,
            'degree' => $degree,
            'fieldOfStudy' => $fieldOfStudy,
            'grade' => $grade,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
            'currentlyReadingYN' => $currentlyReadingYN,
            'description' => $description,
            'activitiesSocieties' => $acc_society,
            'modifiedUserID' => current_userID(),
            'modifiedPCID' => current_pc(),
            'modifiedDateTime' => current_date()
        );

        if ($isFrom != 'profile') {
            $companyID = current_companyID();
            $isAlreadyVerified = $this->db->query("SELECT hrVerified FROM srp_erp_employeeeducationaldetails
                                                       WHERE id={$id} AND companyID={$companyID}")->row('hrVerified');
            if ($isAlreadyVerified != $hrVerified) {
                if ($hrVerified == 1) {
                    $data['hrVerified'] = 1;
                    $data['verifiedUserID'] = current_userID();
                    $data['verifiedPC'] = current_pc();
                    $data['verifiedDateTime'] = current_date();
                } else {
                    $data['hrVerified'] = 0;
                    $data['verifiedUserID'] = null;
                    $data['verifiedPC'] = null;
                    $data['verifiedDateTime'] = null;
                }
            }
        }

        $this->db->where('id', $id)->update('srp_erp_employeeeducationaldetails', $data);

        echo json_encode(['s', 'Updated successfully']);
    }

    function deleteAcademic()
    {
        $id = $this->input->post('id');

        $del = $this->db->where('id', $id)->delete('srp_erp_employeeeducationaldetails');

        if ($del) {
            echo json_encode(['s', 'deleted successfully']);
        } else {
            $common_failed = $this->lang->line('common_failed');/* 'failed'*/
            echo json_encode(['e', $common_failed]);
        }
    }

    function getAcademicData()
    {
        $id = $this->input->post('id');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $dateColumns = 'DATE_FORMAT(dateFrom,\'' . $convertFormat . '\') AS dateFromStr,';
        $dateColumns .= 'DATE_FORMAT(dateTo,\'' . $convertFormat . '\') AS dateToStr';
        $data = $this->db->query("SELECT *, {$dateColumns} FROM srp_erp_employeeeducationaldetails WHERE id={$id} AND companyID={$companyID}")->row_array();
        echo json_encode($data);
    }
    /***End of Employee Academic ***/


    /*Start of Document Setups */
    public function fetch_documentDescriptionMaster()
    {
        $this->datatables->select('t1.DocDesID as doc_ID, DocDescription as doc_Description, t1.SortOrder AS SortOrder, 
                    systemTypeID, t3.description sysDes, isMandatory, issueDate_req, expireDate_req, issuedBy_req')
            ->from('srp_documentdescriptionmaster AS t1')
            ->join('srp_documentdescriptionsetup AS t2', 't1.DocDesID=t2.DocDesID')
            ->join('srp_erp_system_document_types AS t3', 't1.systemTypeID=t3.id')
            ->add_column('edit', '$1', 'action_docSetup(doc_ID, doc_Description)')
            ->add_column('mandatory', '<center>$1</center>', 'mandatoryStatus(isMandatory)')
            ->add_column('st_issueDate_req', '<center>$1</center>', 'mandatoryStatus(issueDate_req)')
            ->add_column('st_expireDate_req', '<center>$1</center>', 'mandatoryStatus(expireDate_req)')
            ->add_column('st_issuedBy_req', '<center>$1</center>', 'mandatoryStatus(issuedBy_req)')
            ->where('t1.Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function save_documentDescriptions()
    {
        $this->form_validation->set_rules('sysType[]', 'System Type', 'trim|required');
        $this->form_validation->set_rules('description[]', 'Documents', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_documentDescriptions());
        }
    }

    public function edit_documentDescription()
    {
        $this->form_validation->set_rules('edit_description', 'Documents Description', 'trim|required');
        $this->form_validation->set_rules('hidden-id', 'Document ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_documentDescription());
        }
    }

    public function delete_documentDescription()
    {
        $this->form_validation->set_rules('hidden-id', 'Documents ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_documentDescription());
        }
    }


    public function fetch_documentSetups()
    {
        $this->datatables->select('t1.DocDesID as doc_ID, t1.DocDescription as doc_Description, isMandatory, t2.SortOrder AS SortOrder, DocDesSetupID')
            ->from('srp_documentdescriptionmaster AS t1')
            ->join('srp_documentdescriptionsetup AS t2', 't1.DocDesID=t2.DocDesID')
            ->add_column('mandatory', '<center>$1</center>', 'mandatoryStatus(isMandatory)')
            ->add_column('edit', '$1', 'action_docSetup(DocDesSetupID, doc_Description)')
            ->where('t2.Erp_companyID', current_companyID())
            ->where('FormType', 'EMP');

        echo $this->datatables->generate();
    }

    public function saveDoc_master()
    {
        $this->form_validation->set_rules('descriptionID[]', 'Documents', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveDoc_master());
        }
    }

    public function edit_document()
    {
        $this->form_validation->set_rules('edit_descriptionID', 'Documents Description', 'trim|required');
        $this->form_validation->set_rules('hidden-id', 'Document ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_document());
        }
    }

    public function delete_DocSetup()
    {
        $this->form_validation->set_rules('hidden-id', 'Documents ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_DocSetup());
        }
    }
    /*End of Document Setups */


    /*Start of Employee Document*/
    public function load_empDocumentView()
    {
        $empID = $this->input->post('empID');

        $data['empID'] = $empID;
        $data['isFromProfile'] = 'N';
        $this->load->view('system/hrm/ajax/load_empDocumentView', $data);
    }

    public function fetch_emp_document()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $convertFormat = convert_date_format_sql();
        $where = "PersonID = {$empID} AND PersonType = 'E' AND isActive = 1 AND isDeleted = 0";
        $where2 = "PersonID = {$empID} AND PersonType = 'E' AND isActive = 0 AND t1.DocDesID=mas.DocDesID AND t1.isDeleted = 0";
        $lang_documents_no = $this->lang->line('common_documents_no');
        $lang_issued_by = $this->lang->line('common_issued_by');

        $this->datatables->select("DocDesFormID, DocDescription, isMandatory, FileName, DATE_FORMAT(issueDate,'{$convertFormat}') AS issueDate,
                   DATE_FORMAT(expireDate,'{$convertFormat}') AS expireDate, issuedBy, issuedByText, mas.DocDesID AS DocDesID, documentNo, 
                   IF(issuedBy=-1, issuedByText, IF(sysType.issuedByType = 1, CONCAT(company_code, ' - ', company_name), country_tb.CountryDes) ) AS issueDet,
                   sub_types.description AS sub_typesDes,
                   (SELECT count(DocDesFormID) FROM srp_documentdescriptionforms t1 WHERE {$where2}) AS incCount, sysType.issuedByType,isCTC,ctcCost")
            ->from('srp_documentdescriptionmaster mas')
            ->join('srp_documentdescriptionsetup AS setup', 'mas.DocDesID=setup.DocDesID')
            ->join('srp_erp_system_document_types AS sysType', 'mas.systemTypeID=sysType.id')
            ->join("(SELECT * FROM srp_documentdescriptionforms WHERE {$where}) forms", 'forms.DocDesID=mas.DocDesID', 'LEFT')
            ->join("(SELECT * FROM srp_erp_system_document_sub_types WHERE companyID={$companyID}) sub_types", 'sub_types.sub_id=forms.subDocumentType', 'LEFT')
            ->join('srp_erp_company AS comTB', 'forms.issuedBy=comTB.company_id', 'LEFT')
            ->join("(SELECT * FROM srp_countrymaster WHERE Erp_companyID={$companyID}) country_tb", 'country_tb.countryID=forms.issuedBy', 'LEFT')
            ->add_column('docs_status', '$1', 'emp_docs_status(DocDesFormID,incCount)')
            ->add_column('edit', '$1', 'action_emp_docs(DocDesFormID,FileName,incCount,DocDesID,DocDescription)')
            ->add_column('fullDescription', "$1", 'emp_docs_full_description(DocDescription,sub_typesDes)')
            ->add_column('otherDetails', "<b>{$lang_documents_no}</b> : $1<br/><b>{$lang_issued_by}</b> : $2", 'documentNo,issueDet')
            ->where('mas.Erp_companyID', $companyID)->where('mas.isDeleted = 0');

        echo $this->datatables->generate();
    }

    public function emp_documentSave()
    {
        $this->form_validation->set_rules('document', 'Document', 'trim|required');
        $this->form_validation->set_rules('docEmpID', 'Employee ID', 'trim|required');

        $documentID = $this->input->post('document');
        if (!empty($documentID)) {
            $req_field = $this->db->get_where('srp_documentdescriptionsetup', ['DocDesID' => $documentID, 'FormType' => 'EMP'])->row_array();

            if ($req_field['issueDate_req'] == 1) {
                $this->form_validation->set_rules('issueDate', 'Issue Date', 'trim|required');
            }

            if ($req_field['expireDate_req'] == 1) {
                $this->form_validation->set_rules('expireDate', 'Expiry Date', 'trim|required');
            }

            if ($req_field['issuedBy_req'] == 1) {
                $issuedBy = $this->input->post('issuedBy');
                if ($issuedBy == -1) {
                    $this->form_validation->set_rules('issuedByText', 'Issue By', 'trim|required');
                } else {
                    $this->form_validation->set_rules('issuedBy', 'Issue By', 'trim|required');
                }
            }
        }


        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->emp_documentSave());
        }
    }

    function emp_documentUpdate()
    {
        $this->form_validation->set_rules('documentType', 'Document', 'trim|required');
        $this->form_validation->set_rules('editID', 'Master ID', 'trim|required');


        $documentID = $this->input->post('documentType');
        if (!empty($documentID)) {
            $req_field = $this->db->get_where('srp_documentdescriptionsetup', ['DocDesID' => $documentID, 'FormType' => 'EMP'])->row_array();

            if ($req_field['issueDate_req'] == 1) {
                $this->form_validation->set_rules('issueDate', 'Issue Date', 'trim|required');
            }

            if ($req_field['expireDate_req'] == 1) {
                $this->form_validation->set_rules('expireDate', 'Expiry Date', 'trim|required');
            }

            if ($req_field['issuedBy_req'] == 1) {
                $issuedBy = $this->input->post('issuedBy');
                if ($issuedBy == -1) {
                    $this->form_validation->set_rules('issuedByText', 'Issue By', 'trim|required');
                } else {
                    $this->form_validation->set_rules('issuedBy', 'Issue By', 'trim|required');
                }
            }
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(array('e', validation_errors())));
        }

        $companyID = current_companyID();
        $editID = $this->input->post('editID');
        $documentNo = $this->input->post('edit_documentNo');
        $issueDate = $this->input->post('issueDate');
        $expireDate = $this->input->post('expireDate');
        $issuedBy = $this->input->post('issuedBy');
        $issuedByText = $this->input->post('issuedByText');
        $issuedByText = ($issuedBy == -1) ? $issuedByText : null;
        $dateTime = current_date();

        $date_format_policy = date_format_policy();

        $issueDate = (!empty($issueDate)) ? input_format_date_php($issueDate, $date_format_policy) : null;
        $expireDate = (!empty($expireDate)) ? input_format_date_php($expireDate, $date_format_policy) : null;

        if ($expireDate != null and $issueDate != null) {
            if ($issueDate > $expireDate) {
                die(json_encode(['e', 'Issue date can not be greater than Expiry Date']));
            }
        }

        $data = array(
            'issueDate' => $issueDate, 'expireDate' => $expireDate, 'issuedBy' => $issuedBy, 'issuedByText' => $issuedByText,
            'documentNo' => $documentNo, 'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(), 'isExpiryMailSend' => 0,
            'ModifiedUserName' => current_employee(), 'ModifiedDateTime' => $dateTime
        );

        $where = ['DocDesFormID' => $editID, 'Erp_companyID' => $companyID];

        $this->db->trans_start();
        $this->db->where($where)->update('srp_documentdescriptionforms', $data);


        $systemTypeID = $this->db->get_where('srp_documentdescriptionmaster', ['DocDesID' => $documentID])->row('systemTypeID');
        if (in_array($systemTypeID, [3, 4])) {//Is visa or passport document
            $columnName = ($systemTypeID == 3) ? 'EVisaExpiryDate' : 'EPassportExpiryDate';
            $empUpdateData = [$columnName => $expireDate, 'ModifiedUserName' => current_employee(), 'ModifiedPC' => current_pc(), 'Timestamp' => $dateTime];
            $empID = $this->db->get_where('srp_documentdescriptionforms', ['DocDesFormID' => $editID])->row('PersonID');
            if ($systemTypeID == 4) { /*update passport no*/
                $empUpdateData['EPassportNO'] = $documentNo;
            }
            $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $empUpdateData);
        }

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Document details updated successfully']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in document details updated']);
        }


    }

    public function delete_empDocument()
    {
        $this->form_validation->set_rules('hidden-id', 'Document ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $hiddenID = $this->input->post('hidden-id');
            echo json_encode($this->Employee_model->delete_empDocument($hiddenID));
        }
    }

    public function fetch_emp_document_history()
    {
        $companyID = current_companyID();
        $docType = $this->input->post('docType');
        $empID = $this->input->post('empID');
        $convertFormat = convert_date_format_sql();
        $where = "PersonID = {$empID} AND PersonType = 'E' AND isActive = 0 AND DocDesID={$docType} AND isDeleted = 0";

        $this->datatables->select("DocDesFormID, DocDescription, isMandatory, FileName, DATE_FORMAT(issueDate,'{$convertFormat}') AS issueDate,
                   DATE_FORMAT(expireDate,'{$convertFormat}') AS expireDate, issuedBy, issuedByText, mas.DocDesID, forms.documentNo,
                   sub_types.description AS sub_typesDes, 
                   IF(issuedBy=-1, issuedByText, IF(sysType.issuedByType = 1, CONCAT(company_code, ' - ', company_name), country_tb.CountryDes) ) issueDet")
            ->from('srp_documentdescriptionmaster mas')
            ->join('srp_documentdescriptionsetup AS setup', 'mas.DocDesID=setup.DocDesID')
            ->join('srp_erp_system_document_types AS sysType', 'mas.systemTypeID=sysType.id')
            ->join("(SELECT * FROM srp_documentdescriptionforms WHERE {$where}) forms", 'forms.DocDesID=mas.DocDesID')
            ->join("(SELECT * FROM srp_erp_system_document_sub_types WHERE companyID={$companyID}) sub_types", 'sub_types.sub_id=forms.subDocumentType', 'LEFT')
            ->join('srp_erp_company AS comTB', 'forms.issuedBy=comTB.company_id', 'LEFT')
            ->join("(SELECT * FROM srp_countrymaster WHERE Erp_companyID={$companyID}) country_tb", 'country_tb.countryID=forms.issuedBy', 'LEFT')
            ->add_column('docs_status', '<div style="text-align: center"><span class="label label-warning">&nbsp;</span></div>', '')
            ->add_column('edit', '$1', 'action_emp_docs_history(DocDesFormID,FileName)')
            ->where('mas.Erp_companyID', $companyID)->where('mas.isDeleted = 0');

        echo $this->datatables->generate();
    }

    function emp_documentUpload()
    {
        $this->form_validation->set_rules('uploadDocID', 'ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(json_encode(['e', validation_errors()])));
        }

        $documentID = $this->input->post('uploadDocID');
        $dateTime = current_date();

        $empID = $this->db->get_where('srp_documentdescriptionforms', ['DocDesFormID' => $documentID])->row('PersonID');
        $fileName = str_replace(' ', '', strtolower($empID)) . '_' . time();

        /*$path = UPLOAD_PATH_POS . 'documents/users/'; // imagePath();

        $config['upload_path'] = $path;
        $config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        if (!$this->upload->do_upload("doc_file")) {
            die( json_encode(['e', 'Upload failed ' . $this->upload->display_errors(), 'path' => $path]));
        }*/

        $file = $_FILES['doc_file'];

        if ($file['error'] == 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
        }

        $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
        $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|PDF|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
        $allowed_types = explode('|', $allowed_types);
        if (!in_array($ext, $allowed_types)) {
            die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
        }

        $size = $file['size'];
        $size = number_format($size / 1048576, 2);

        if ($size > 50) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"]));
        }

        $fileName = "documents/users/$fileName.$ext";
        $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

        if (!$s3Upload) {
            die(json_encode(['e', 'Error in document upload location configuration']));
        }

        $this->db->trans_start();

        $updateData = [
            'FileName' => $fileName, 'ModifiedPC' => current_pc(), 'ModifiedUserID' => current_userID(),
            'ModifiedUserName' => current_employee(), 'ModifiedDateTime' => $dateTime, 'Timestamp' => $dateTime
        ];

        $this->db->where(['DocDesFormID' => $documentID])->update('srp_documentdescriptionforms', $updateData);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Document successfully uploaded']);
        } else {
            echo json_encode(['e', 'Error in document upload']);
        }
    }
    /*End of Employee Document*/


    /*Start of Employee Department*/
    public function fetch_department()
    {
        $this->datatables->select('DepartmentMasterID, DepartmentDes, isActive, hod_id as hod_id,
            IFNULL( (SELECT count(DepartmentMasterID) FROM srp_empdepartments WHERE DepartmentMasterID=t1.DepartmentMasterID), 0 ) AS usageCount')
            ->from('srp_departmentmaster AS t1')
            ->add_column('status', '$1', 'confirm(isActive)')
            ->add_column('hod', '$1', 'make_employee_dropDown(hod_id,DepartmentMasterID)')
            ->add_column('edit', '$1', 'action_department(DepartmentMasterID, DepartmentDes, isActive, usageCount)')
            ->where('Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveDepartment()
    {
        $this->form_validation->set_rules('department[]', 'Department', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveDepartment());
        }
    }

    public function addHodFromDepartment()
    {
        $this->form_validation->set_rules('empID', 'Employee', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->addHodFromDepartment());
        }
    }

    public function editDepartment()
    {
        $this->form_validation->set_rules('departmentDes', 'Department', 'required');
        $this->form_validation->set_rules('status', 'Status', 'required');
        $this->form_validation->set_rules('hidden-id', 'Department ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editDepartment());
        }
    }

    public function deleteDepartment()
    {
        $this->form_validation->set_rules('hidden-id', 'Designation ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteDepartment());
        }
    }
    /*End of Employee Department*/

    /*Start of Employee Department */
    public function load_empDepartmentsView()
    {
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $data['empID'] = $empID;
        $data['isInitialLoad'] = 'N';
        $data['moreDepartment'] = $this->db->query("SELECT t1.DepartmentMasterID, t1.DepartmentDes FROM srp_departmentmaster t1 WHERE
                                                     Erp_companyID={$companyID} AND NOT EXISTS (
                                                           SELECT DepartmentMasterID FROM srp_empdepartments WHERE
                                                           DepartmentMasterID = t1.DepartmentMasterID AND EmpID={$empID}
                                                         )
                                                     AND isActive=1")->result_array();

        $this->load->view('system/hrm/ajax/load_empDepartmentView', $data);
    }

    public function fetch_empDepartments()
    {
        $empID = $this->input->post('empID');
        $this->datatables->select('EmpDepartmentID, t1.DepartmentMasterID AS DepartmentMasterID, DepartmentDes, 
        t1.isActive AS isActive, isPrimary')
            ->from('srp_empdepartments AS t1')
            ->join('srp_departmentmaster AS t2', 't1.DepartmentMasterID=t2.DepartmentMasterID')
            ->add_column('edit', '$1', 'action_empDepartment(EmpDepartmentID, DepartmentDes)')
            ->add_column('status', '$1', 'department_status(EmpDepartmentID, isActive)')
            ->add_column('primary_str', '$1', 'isPrimary_department(EmpDepartmentID, isPrimary)')
            ->where('EmpID', $empID)
            ->where('t1.Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function save_empDepartments()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('items[]', 'Departments', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empDepartments());
        }
    }

    public function delete_empDepartments()
    {
        $this->form_validation->set_rules('hidden-id', 'Departments ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empDepartments());
        }
    }

    public function statusChangeEmpDepartments()
    {
        $this->form_validation->set_rules('hidden-id', 'Departments ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->statusChangeEmpDepartments());
        }
    }

    public function make_primary_department()
    {
        $this->form_validation->set_rules('hidden-id', 'auto ID', 'required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $hidden_id = $this->input->post('hidden-id');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $status = $this->input->post('status');
        $this->load->helpers('configuration_helper');
        $dataChange=getPolicyValues('APEMP', 'All');


        $isActive = $this->db->get_where('srp_empdepartments', ['EmpDepartmentID' => $hidden_id])->row('isActive');
        if ($isActive != 1) {
            die(json_encode(['e', 'Please active this department and try again.']));
        }
        $this->db->trans_start();
        if($dataChange==0){
            $this->db->query("UPDATE srp_empdepartments SET isPrimary=0 WHERE EmpID={$empID} AND Erp_companyID={$companyID}");
            $this->db->query("UPDATE srp_empdepartments SET isPrimary=1 WHERE EmpID={$empID} AND EmpDepartmentID={$hidden_id} AND Erp_companyID={$companyID}");
        }
        else{
            $change=[
                'empID'=>$empID,
                'relatedColumnID'=>$hidden_id,
                'realtedColumnName'=>'EmpDepartmentID',
                'columnName'=>'isPrimary',
                'columnVal'=> 1,
                'approvedYN'=>0,
                'companyID'=>$companyID ,
                'timestamp'=>current_date(),
                'tableName'=>'srp_empdepartments',
            ];
            $this->db->insert('srp_erp_employeedatachanges',$change);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully']);
        } else {
            echo json_encode(['e', 'Error in process']);
        }
    }
    /*End of Employee Department */


    /*Employee Salary details*/
    public function empSalaryDetails()
    {
        $empID = $this->input->post('empID');
        $empCurrency = $this->input->post('empCurrency');

        echo json_encode(
            array(
                0 => fetch_currency_desimal($empCurrency),
                1 => $this->Employee_model->loadEmpDeclarations($empID),
            )
        );
    }

    public function empSalaryDetailsView()
    {
        $companyID = current_companyID();
        $currentEmp = current_userID();
        $empID = $this->input->post('empID');

        $isGroupAccess = getPolicyValues('PAC', 'All');
        $access = 1;
        if ($isGroupAccess == 1) {
            if ($currentEmp != $empID) {
                $access = $this->db->query("SELECT 1 AS acc FROM srp_erp_payrollgroupemployees AS empTB
                                    JOIN srp_erp_payrollgroupincharge AS inCharge ON inCharge.groupID=empTB.groupID
                                    WHERE empTB.companyID={$companyID} AND inCharge.companyID={$companyID}
                                    AND employeeID={$empID} AND empID={$currentEmp}")->row('acc');
            }
        }

        $data['access'] = $access;
        if ($access == 1) {
            $data['groupBYSalary'] = $this->db->query("SELECT id, salaryDescription, SUM(amount) AS amount, salaryCategoryType, transactionCurrency,
                                                   transactionCurrencyDecimalPlaces AS dPlaces
                                                   FROM srp_erp_pay_salarydeclartion AS declartionTB
                                                   JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = declartionTB.salaryCategoryID
                                                   WHERE employeeNo={$empID} AND declartionTB.companyID={$companyID}
                                                   GROUP BY declartionTB.salaryCategoryID  ORDER BY salaryDescription ASC")->result();
            $empCurrency = $this->db->query("SELECT payCurrency FROM srp_employeesdetails WHERE EIdNo={$empID}")->row('payCurrency');
            $data['dPlaces'] = fetch_currency_desimal($empCurrency);
            $data['salaryDet'] = $this->Employee_model->loadEmpDeclarations($empID);
            $data['salaryDetNon'] = $this->Employee_model->loadEmpDeclarations_nonPayroll($empID);

            $convertFormat = convert_date_format_sql();
            $data['vpDeclarations'] = $this->db->query("SELECT masTB.documentCode, catTB.salaryDescription, amount, narration,            
                                        DATE_FORMAT(effectiveDate, '{$convertFormat}') AS effectiveDate, catTB.salaryCategoryID,
                                        trCurrencyDPlaces
                                        FROM srp_erp_variablepaydeclarationdetails detTB
                                        JOIN srp_erp_variablepaydeclarationmaster masTB ON masTB.vpMasterID = detTB.masterID
                                        JOIN srp_erp_pay_salarycategories catTB ON catTB.salaryCategoryID = detTB.salaryCategoryID
                                        WHERE empID = {$empID} AND isActive = 1")->result_array();
        }


        $this->load->view('system/hrm/ajax/load_empSalaryDeclarations', $data);
    }


    /*Start of Employee shift*/
    public function load_empShiftView()
    {
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();

        $data['empID'] = $empID;
        $data['attendanceData'] = $this->db->query("SELECT leaveGroupID, isCheckin, empMachineID, floorID, overTimeGroup,isNoPayAbsent,
                                        deviceID, isMobileCheckIn,
                                        IFNULL( (SELECT adjustmentDone FROM srp_erp_leavegroupchangehistory
                                        WHERE empID = empTB.EIdNo ORDER BY id DESC LIMIT 1), 1) AS leaveAdjustmentStatus
                                        FROM srp_employeesdetails AS empTB
                                        WHERE Erp_companyID={$companyID} AND EIdNo={$empID} ")->row_array();
        $data['history'] = [];
        $this->load->view('system/hrm/ajax/load_empShiftView', $data);
    }

    public function leave_group_change_history()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $convertFormat = convert_date_format_sql();

        $this->datatables->select('t1.id AS id, description, DATE_FORMAT(t1.createdDateTime,\'' . $convertFormat . '\') AS crDate, 
            CASE
                WHEN adjustmentDone = 0 THEN \'Pending\'
                WHEN adjustmentDone = 1 THEN \'Done\'
                WHEN adjustmentDone = 2 THEN \'Initial\'
                WHEN adjustmentDone = 3 THEN \'Skipped \'
            END AS adjStatus, adjustmentDone
            ', false)
            ->from('srp_erp_leavegroupchangehistory AS t1')
            ->join('srp_erp_leavegroup AS t2', 't1.leaveGroupID=t2.leaveGroupID')
            ->add_column('action', '$1', 'leave_group_change_history_action(id,adjustmentDone)')
            ->where('empID', $empID)
            ->where('t1.companyID', $companyID);

        echo $this->datatables->generate();
    }

    public function save_attendanceData()
    {
        $empID = $this->input->get('empID');
        $empConfirmedYN = isEmployeeConfirmed($empID);

        if ($empConfirmedYN == 1) {
            $this->form_validation->set_rules('leaveGroupID', 'Leave group', 'trim|required');

            if ($this->form_validation->run() == FALSE) {
                echo json_encode(array('e', validation_errors()));
            } else {

                $isLeaveGroupChangeConfirmed = $this->input->post('isLeaveGroupChangeConfirmed');

                if ($isLeaveGroupChangeConfirmed == 0) {

                    /*Check posted leave group match with current leave group*/
                    $leaveGroupID = $this->input->post('leaveGroupID');

                    $current_groupID = $this->db->query("SELECT leaveGroupID FROM srp_employeesdetails WHERE EIdNo={$empID} AND leaveGroupID={$leaveGroupID}")->row('leaveGroupID');

                    if (empty($current_groupID)) {
                        /*leave adjustment status for last leave group change of this employee */
                        $adjustmentStatus = $this->db->query("SELECT adjustmentDone FROM srp_erp_leavegroupchangehistory WHERE empID={$empID} ORDER BY id DESC LIMIT 1")->row('adjustmentDone');

                        if ($adjustmentStatus == 0) {
                            die(json_encode(['e', 'Leave adjustment process was not processed for previous leave group change.<br/>
                                            Please process the adjustment and try again.']));
                        }

                        /*Check un approved leave available for this employee */
                        $leavePending = $this->db->query("SELECT COUNT(leaveMasterID) leaveCount FROM srp_erp_leavemaster WHERE empID = {$empID} 
                                            AND (confirmedYN = 0 OR confirmedYN = 1 AND approvedYN = 0)")->row('leaveCount');

                        if ($leavePending > 0) {
                            die(json_encode(['e', 'Please approve pending leave of this employee and try again.']));
                        }

                        die(json_encode(['m', 'Group change confirmation']));
                    }

                    
                }
                echo json_encode($this->Employee_model->save_attendanceData());
            }

        } else {
            $otherData = $this->input->post();
            $isValueSet = 0;

            foreach ($otherData as $key => $val) {
                if (!empty(trim($val))) {
                    $isValueSet = 1;
                    break;
                }
            }

            if ($isValueSet == 0) {
                echo json_encode(['e', 'There is no data to save']);
            } else {
                echo json_encode($this->Employee_model->save_attendanceData());
            }
        }
    }

    public function create_leaveAdjustment_in_leave_group_change_view()
    {
        $companyID = current_companyID();
        $id = $this->input->post('id');

        $this->is_leave_group_change_leave_adjustment_processed($id);


        $historyData = $this->db->query("SELECT ECode, Ename2, t1.* FROM srp_erp_leavegroupchangehistory t1
                                        JOIN srp_employeesdetails empTB ON empTB.EIdNo=t1.empID
                                        WHERE t1.id={$id}")->row_array();

        $newGroupID = $historyData['leaveGroupID'];
        $empID = $historyData['empID'];
        $empName = $historyData['Ename2'];
        $empCode = $historyData['ECode'];

        $oldGrpID = $this->db->query("SELECT leaveGroupID FROM srp_erp_leavegroupchangehistory  WHERE  id < {$id} 
                             AND empID = {$empID} ORDER BY id DESC LIMIT 1")->row('leaveGroupID');

        $oldDes = $this->db->get_where('srp_erp_leavegroup', ['leaveGroupID' => $oldGrpID])->row('description');
        $newDes = $this->db->get_where('srp_erp_leavegroup', ['leaveGroupID' => $newGroupID])->row('description');

        if (empty($oldGrpID)) {
            die(json_encode(['e', 'Old leave group ID not found']));
        }

        $oldGrpDet = $this->db->query("SELECT lvType.leaveTypeID, lvType.description ,gr_det.isCarryForward, gr_det.policyMasterID 
                        FROM srp_erp_leavegroup gr_tb
                        JOIN srp_erp_leavegroupdetails gr_det ON gr_tb.leaveGroupID = gr_det.leaveGroupID
                        JOIN srp_erp_leavetype lvType ON lvType.leaveTypeID = gr_det.leaveTypeID
                        WHERE gr_tb.leaveGroupID = {$oldGrpID} ORDER BY lvType.description ASC")->result_array();

        $newGrpDet = $this->db->query("SELECT lvType.leaveTypeID, lvType.description ,gr_det.isCarryForward, gr_det.policyMasterID, 
                        noOfDays, noOfHours
                        FROM srp_erp_leavegroup gr_tb
                        JOIN srp_erp_leavegroupdetails gr_det ON gr_tb.leaveGroupID = gr_det.leaveGroupID
                        JOIN srp_erp_leavetype lvType ON lvType.leaveTypeID = gr_det.leaveTypeID
                        WHERE gr_tb.leaveGroupID = {$newGroupID} ORDER BY lvType.description ASC")->result_array();

        /*** Get leave balance ***/
        $currentYearFirstDate = date('Y-01-01');
        $currentYearLastDate = date('Y-12-31');
        $str = '';

        foreach ($oldGrpDet as $rowOldGrp) {
            $isCarryForward = $rowOldGrp['isCarryForward'];
            $policyMasterID = $rowOldGrp['policyMasterID'];
            $leaveGroupID = $oldGrpID;
            $lType = $rowOldGrp['leaveTypeID'];
            $desLeave = 'lev_' . $lType;

            if ($policyMasterID == 2) {

                $str .= "sum(if(leaveType='{$lType}',hoursEntitled,0)) - IFNULL( 
                          ( SELECT SUM(if(leaveTypeID={$lType},hours,0)) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.empID = empTB.EIdNo AND approvedYN = 1 
                         ), 0 ) as '{$desLeave}',";
            } else {
                $carryForwardLogic = '';

                if ($policyMasterID == 1) {
                    $carryForwardLogic = ($isCarryForward == 1) ? " " : " AND endDate BETWEEN '{$currentYearFirstDate}' AND '{$currentYearLastDate}'";
                }


                $str .= "sum( IF ( leaveType = {$lType}, daysEntitled, 0 ) ) - 
                                 IFNULL( ( SELECT SUM( IF (leaveTypeID = {$lType}, days, 0) ) FROM srp_erp_leavemaster WHERE 
                                 srp_erp_leavemaster.empID = empTB.EIdNo AND approvedYN = 1  AND leaveGroupID = {$oldGrpID}  {$carryForwardLogic} ), 0 ) AS '{$desLeave}', ";


            }
        }


        $leaveBalance = $this->db->query("SELECT {$str} empID
                     FROM srp_employeesdetails AS empTB
                     INNER JOIN srp_erp_leaveaccrualdetail AS entiDet ON empID = EIdNo
                     INNER JOIN srp_erp_leaveaccrualmaster AS entiMast ON entiDet.leaveaccrualMasterID = entiMast.leaveaccrualMasterID                     
                     AND entiMast.leaveGroupID = {$oldGrpID}
                     INNER JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = entiDet.leaveType
                     JOIN (
                        SELECT gMaster.leaveGroupID, leaveTypeID, policyMasterID, isCarryForward 
                        FROM srp_erp_leavegroup AS gMaster
                        JOIN srp_erp_leavegroupdetails AS gDet ON gMaster.leaveGroupID=gDet.leaveGroupID
                        WHERE companyID = {$companyID}
                     ) AS leaveTypeData ON leaveTypeData.leaveGroupID=entiMast.leaveGroupID  AND leaveTypeData.leaveTypeID = entiDet.leaveType
                     WHERE empTB.EIdNo={$empID} AND confirmedYN=1 AND
                     CASE  
                        WHEN ( leaveTypeData.isCarryForward=0 AND leaveTypeData.policyMasterID=1 ) 
                        THEN DATE_FORMAT( CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01'), '%Y-%m-%d') BETWEEN '{$currentYearFirstDate}' AND '{$currentYearLastDate}'
                        ELSE 1=1
                     END                                         
                     GROUP BY empID #ORDER BY Ename2 ")->row_array();


        $data['id'] = $id;
        $data['newGrpDet'] = $newGrpDet;
        $data['oldGrpDet'] = $oldGrpDet;
        $data['newDes'] = $newDes;
        $data['oldDes'] = $oldDes;
        $data['leaveBalance_arr'] = $leaveBalance;

        $view = $this->load->view('system/hrm/ajax/leave-adjustment-in-leave-group-change', $data, true);

        echo json_encode(['s', '', 'view' => $view]);
    }

    public function leaveAdjustment_in_leave_group_change()
    {
        $companyID = current_companyID();
        $id = $this->input->post('change-id');
        $dateTime = date('Y-m-d H:i:s');

        $this->is_leave_group_change_leave_adjustment_processed($id);


        $historyData = $this->db->query("SELECT CONCAT(ECode, ' - ', Ename2) empNameCode, t1.* 
                                        FROM srp_erp_leavegroupchangehistory t1
                                        JOIN srp_employeesdetails empTB ON empTB.EIdNo=t1.empID
                                        WHERE t1.id={$id}")->row_array();

        $newGroupID = $historyData['leaveGroupID'];
        $empID = $historyData['empID'];
        $empNameCode = $historyData['empNameCode'];

        /*** Start of old leave group adjustment ***/
        $oldGrpID = $this->db->query("SELECT leaveGroupID FROM srp_erp_leavegroupchangehistory  WHERE  id < {$id} 
                             AND empID = {$empID} ORDER BY id DESC LIMIT 1")->row('leaveGroupID');

        $oldGrpDet = $this->db->query("SELECT lvType.leaveTypeID, lvType.description ,gr_det.isCarryForward, gr_det.policyMasterID 
                        FROM srp_erp_leavegroup gr_tb
                        JOIN srp_erp_leavegroupdetails gr_det ON gr_tb.leaveGroupID = gr_det.leaveGroupID
                        JOIN srp_erp_leavetype lvType ON lvType.leaveTypeID = gr_det.leaveTypeID
                        WHERE gr_tb.leaveGroupID = {$oldGrpID} ORDER BY lvType.description ASC")->result_array();


        /*** Get leave balance ***/
        $currentYearFirstDate = date('Y-01-01');
        $currentYearLastDate = date('Y-12-31');
        $str = '';
        foreach ($oldGrpDet as $rowOldGrp) {
            $isCarryForward = $rowOldGrp['isCarryForward'];
            $policyMasterID = $rowOldGrp['policyMasterID'];
            $lType = $rowOldGrp['leaveTypeID'];
            $desLeave = 'lev_' . $lType;

            if ($policyMasterID == 2) {

                $str .= "sum(if(leaveType='{$lType}',hoursEntitled,0)) - IFNULL( 
                          ( SELECT SUM(if(leaveTypeID={$lType},hours,0)) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.empID = empTB.EIdNo AND approvedYN = 1 
                         ), 0 ) as '{$desLeave}',";
            } else {
                $carryForwardLogic = '';

                if ($policyMasterID == 1) {
                    $carryForwardLogic = ($isCarryForward == 1) ? " " : " AND endDate BETWEEN '{$currentYearFirstDate}' AND '{$currentYearLastDate}'";
                }


                $str .= "sum( IF ( leaveType = {$lType}, daysEntitled, 0 ) ) - 
                                 IFNULL( ( SELECT SUM( IF (leaveTypeID = {$lType}, days, 0) ) FROM srp_erp_leavemaster WHERE 
                                 srp_erp_leavemaster.empID = empTB.EIdNo AND leaveGroupID = {$oldGrpID} AND approvedYN = 1  {$carryForwardLogic} ), 0 ) AS '{$desLeave}', ";


            }
        }


        $leaveBalance_arr = $this->db->query("SELECT {$str} empID
                     FROM srp_employeesdetails AS empTB
                     INNER JOIN srp_erp_leaveaccrualdetail AS entiDet ON empID = EIdNo
                     INNER JOIN srp_erp_leaveaccrualmaster AS entiMast ON entiDet.leaveaccrualMasterID = entiMast.leaveaccrualMasterID                     
                     AND entiMast.leaveGroupID = {$oldGrpID}
                     INNER JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = entiDet.leaveType
                     JOIN (
                        SELECT gMaster.leaveGroupID, leaveTypeID, policyMasterID, isCarryForward 
                        FROM srp_erp_leavegroup AS gMaster
                        JOIN srp_erp_leavegroupdetails AS gDet ON gMaster.leaveGroupID=gDet.leaveGroupID
                        WHERE companyID = {$companyID}
                     ) AS leaveTypeData ON leaveTypeData.leaveGroupID=entiMast.leaveGroupID  AND leaveTypeData.leaveTypeID = entiDet.leaveType
                     WHERE empTB.EIdNo={$empID} AND confirmedYN=1 AND
                     CASE  WHEN ( leaveTypeData.isCarryForward=0 AND leaveTypeData.policyMasterID=1 ) 
                        THEN DATE_FORMAT( CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01'), '%Y-%m-%d') BETWEEN '{$currentYearFirstDate}' AND '{$currentYearLastDate}'
                        ELSE 1=1
                     END                                         
                     GROUP BY empID")->row_array();


        $this->load->library('sequence');
        $adjustment_master_data = $data = [
            'companyID' => $companyID,
            'documentID' => 'LAM',
            'year' => date('Y'),
            'month' => date('m'),
            'leaveGroupID' => $oldGrpID,
            'createdUserGroup' => current_user_group(),
            'createDate' => $dateTime,
            'createdpc' => current_pc(),
            'manualYN' => 1,
            'confirmedYN' => 1,
            'confirmedDate' => $dateTime,
            'confirmedby' => current_userID(),
        ];


        $adjustment_arr = [];
        $old_group_policyWise_leave_types = array_group_by($oldGrpDet, 'policyMasterID');

        $this->db->trans_start();

        if (!empty($old_group_policyWise_leave_types)) {
            foreach ($old_group_policyWise_leave_types as $policyKey => $old_group_policyWise_leave_row) {

                $code = $this->sequence->sequence_generator('LAM');
                $description = 'Leave group change adjustment of [ ' . $empNameCode . ' ]';
                $adjustment_master_data['leaveaccrualMasterCode'] = $code;
                $adjustment_master_data['description'] = $description;
                $adjustment_master_data['policyMasterID'] = $policyKey;

                $this->db->insert('srp_erp_leaveaccrualmaster', $adjustment_master_data);
                $masterID = $this->db->insert_id();

                $adjustment_arr[] = [
                    'leaveChangeHistoryID' => $id,
                    'leaveAdjustmentID' => $masterID,
                    'isPrevious' => 1,
                    'companyID' => $companyID,
                    'createdPCID' => current_pc(),
                    'createdUserID' => current_userID(),
                    'createdDateTime' => $dateTime,
                    'createdUserName' => current_user(),
                ];

                $old_adjustment_data_det = [];
                foreach ($old_group_policyWise_leave_row as $key => $det) {
                    $leaveID = $det['leaveTypeID'];
                    $leaveBalanceKey = 'lev_' . $leaveID;

                    $previous_balance = 0;
                    if (is_array($leaveBalance_arr)) {
                        $previous_balance = (array_key_exists($leaveBalanceKey, $leaveBalance_arr)) ? $leaveBalance_arr[$leaveBalanceKey] : 0;
                    }

                    $daysEntitled = 0;
                    $hoursEntitled = 0;
                    if ($policyKey == 2) {
                        /*** Hourly ***/
                        // Have to discuss and implement
                    } else {
                        /*** Annually/ Monthly ***/
                        $daysEntitled = 0 - $previous_balance;
                    }


                    $old_adjustment_data_det[$key]['leaveaccrualMasterID'] = $masterID;
                    $old_adjustment_data_det[$key]['empID'] = $empID;
                    $old_adjustment_data_det[$key]['leaveGroupID'] = $oldGrpID;
                    $old_adjustment_data_det[$key]['leaveType'] = $leaveID;
                    $old_adjustment_data_det[$key]['daysEntitled'] = $daysEntitled;
                    $old_adjustment_data_det[$key]['hoursEntitled'] = $hoursEntitled;
                    $old_adjustment_data_det[$key]['previous_balance'] = $previous_balance;
                    $old_adjustment_data_det[$key]['description'] = $description;
                    $old_adjustment_data_det[$key]['createdUserGroup'] = current_user_group();
                    $old_adjustment_data_det[$key]['createdPCid'] = current_pc();
                }

                $this->db->insert_batch('srp_erp_leaveaccrualdetail', $old_adjustment_data_det);

            }
        }


        /*** Start of new leave group adjustment ***/
        $newGrpDet = $this->db->query("SELECT lvType.leaveTypeID, gr_det.policyMasterID 
                        FROM srp_erp_leavegroup gr_tb
                        JOIN srp_erp_leavegroupdetails gr_det ON gr_tb.leaveGroupID = gr_det.leaveGroupID
                        JOIN srp_erp_leavetype lvType ON lvType.leaveTypeID = gr_det.leaveTypeID
                        WHERE gr_tb.leaveGroupID = {$newGroupID} ORDER BY lvType.description ASC")->result_array();

        $newLeaveType = $this->input->post('newLeaveType');
        $adjustmentVal = $this->input->post('adjustmentVal');

        $new_LeaveType_base_adjustVal = [];
        foreach ($newLeaveType as $key => $lType) {
            $new_LeaveType_base_adjustVal[$lType] = $adjustmentVal[$key];
        }


        $new_group_policyWise_leave_types = array_group_by($newGrpDet, 'policyMasterID');

        if (!empty($new_group_policyWise_leave_types)) {
            $adjustment_master_data['leaveGroupID'] = $newGroupID;
            foreach ($new_group_policyWise_leave_types as $policyKey => $new_group_policyWise_leave_row) {

                $code = $this->sequence->sequence_generator('LAM');
                $description = 'Leave group change adjustment of [ ' . $empNameCode . ' ]';
                $adjustment_master_data['leaveaccrualMasterCode'] = $code;
                $adjustment_master_data['description'] = $description;
                $adjustment_master_data['policyMasterID'] = $policyKey;

                $this->db->insert('srp_erp_leaveaccrualmaster', $adjustment_master_data);
                $masterID = $this->db->insert_id();

                $adjustment_arr[] = [
                    'leaveChangeHistoryID' => $id,
                    'leaveAdjustmentID' => $masterID,
                    'isPrevious' => 0,
                    'companyID' => $companyID,
                    'createdPCID' => current_pc(),
                    'createdUserID' => current_userID(),
                    'createdDateTime' => $dateTime,
                    'createdUserName' => current_user(),
                ];

                $new_adjustment_data_det = [];
                foreach ($new_group_policyWise_leave_row as $key => $det) {
                    $leaveID = $det['leaveTypeID'];
                    $daysEntitled = 0;
                    $hoursEntitled = 0;

                    if ($policyKey == 2) {
                        /*** Hourly ***/
                        $hoursEntitled = (array_key_exists($leaveID, $new_LeaveType_base_adjustVal)) ? $new_LeaveType_base_adjustVal[$leaveID] : 0;
                    } else {
                        /*** Annually/ Monthly ***/
                        $daysEntitled = (array_key_exists($leaveID, $new_LeaveType_base_adjustVal)) ? $new_LeaveType_base_adjustVal[$leaveID] : 0;
                    }


                    $new_adjustment_data_det[$key]['leaveaccrualMasterID'] = $masterID;
                    $new_adjustment_data_det[$key]['empID'] = $empID;
                    $new_adjustment_data_det[$key]['leaveGroupID'] = $newGroupID;
                    $new_adjustment_data_det[$key]['leaveType'] = $leaveID;
                    $new_adjustment_data_det[$key]['daysEntitled'] = $daysEntitled;
                    $new_adjustment_data_det[$key]['hoursEntitled'] = $hoursEntitled;
                    $new_adjustment_data_det[$key]['previous_balance'] = 0;
                    $new_adjustment_data_det[$key]['description'] = $description;
                    $new_adjustment_data_det[$key]['createdUserGroup'] = current_user_group();
                    $new_adjustment_data_det[$key]['createdPCid'] = current_pc();
                }

                $this->db->insert_batch('srp_erp_leaveaccrualdetail', $new_adjustment_data_det);
            }
        }

        /*** Leave group change history adjustment master record insert ***/
        $this->db->insert_batch('srp_erp_leavegroupchangehistoryadjustment', $adjustment_arr);

        $updateData = [
            'adjustmentDone' => 1,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date(),
        ];

        $this->db->where(['id' => $id, 'companyID' => $companyID])->update('srp_erp_leavegroupchangehistory', $updateData);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Leave adjustment process successfully updated.']);
        } else {
            echo json_encode(['e', 'Error in leave adjustment process.']);
        }
    }

    public function view_leaveAdjustment_in_leave_group_change()
    {
        $id = $this->input->post('id');
        $companyID = current_companyID();

        $oldGrpDet = $this->db->query("SELECT leaveTypeID, t4.description, previous_balance, t2.leaveGroupID
                                FROM srp_erp_leavegroupchangehistoryadjustment t1
                                JOIN srp_erp_leaveaccrualmaster t2 ON t1.leaveAdjustmentID = t2.leaveaccrualMasterID
                                JOIN srp_erp_leaveaccrualdetail t3 ON t2.leaveaccrualMasterID = t3.leaveaccrualMasterID
                                JOIN srp_erp_leavetype t4 ON t4.leaveTypeID = t3.leaveType
                                WHERE t1.companyID={$companyID} AND leaveChangeHistoryID = {$id} AND t1.isPrevious = 1 
                                ORDER BY t4.description")->result_array();

        $newGrpDet = $this->db->query("SELECT leaveTypeID, t4.description, daysEntitled, t2.leaveGroupID
                                FROM srp_erp_leavegroupchangehistoryadjustment t1
                                JOIN srp_erp_leaveaccrualmaster t2 ON t1.leaveAdjustmentID = t2.leaveaccrualMasterID
                                JOIN srp_erp_leaveaccrualdetail t3 ON t2.leaveaccrualMasterID = t3.leaveaccrualMasterID
                                JOIN srp_erp_leavetype t4 ON t4.leaveTypeID = t3.leaveType
                                WHERE t1.companyID={$companyID} AND leaveChangeHistoryID = {$id} AND t1.isPrevious = 0 
                                ORDER BY t4.description")->result_array();

        $oldGrpID = $oldGrpDet[0]['leaveGroupID'];
        $newGroupID = $newGrpDet[0]['leaveGroupID'];
        $oldDes = $this->db->get_where('srp_erp_leavegroup', ['leaveGroupID' => $oldGrpID])->row('description');
        $newDes = $this->db->get_where('srp_erp_leavegroup', ['leaveGroupID' => $newGroupID])->row('description');

        $data['newDes'] = $newDes;
        $data['oldDes'] = $oldDes;
        $data['oldGrpDet'] = $oldGrpDet;
        $data['newGrpDet'] = $newGrpDet;

        echo $this->load->view('system/hrm/ajax/leave-adjustment-in-leave-group-change-view', $data, true);
    }

    public function is_leave_group_change_leave_adjustment_processed($id)
    {
        $isProcessed = $this->db->get_where('srp_erp_leavegroupchangehistory', ['id' => $id])->row('adjustmentDone');

        if ($isProcessed == 1) {
            die(json_encode(['e', 'Already leave adjustment processed for this group change.']));
        }

        if ($isProcessed == 2) {
            die(json_encode(['e', 'You can not process leave adjustment for initial leave group change.']));
        }

        if ($isProcessed == 3) {
            die(json_encode(['e', 'Leave adjustment for this leave group change is already skipped.']));
        }
    }

    public function skipLeaveAdjustment()
    {
        $companyID = current_companyID();
        $id = $this->input->post('adjID');

        $this->is_leave_group_change_leave_adjustment_processed($id);

        $updateData = [
            'adjustmentDone' => 3,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date(),
        ];

        $this->db->where(['id' => $id, 'companyID' => $companyID])->update('srp_erp_leavegroupchangehistory', $updateData);

        echo json_encode(['s', 'Adjustment skipped successfully.']);
    }

    public function load_social_incusrance()
    {
        $empID = $this->input->post('empID');
        $data['empID'] = $empID;
        $companyID = current_companyID();

        $data['ssoNo'] = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $empID])->row('ssoNo');

        $data['socialInsurances'] = $this->db->query("SELECT ssoDet.socialInsuranceDetailID, ssoMas.Description, ssoDet.socialInsuranceNumber 
                                      FROM srp_erp_socialinsurancemaster ssoMas 
                                      INNER JOIN srp_erp_socialinsurancedetails ssoDet ON ssoMas.socialInsuranceID = ssoDet.socialInsuranceMasterID 
                                      WHERE ssoDet.empID = '{$empID}' AND ssoDet.companyID = '{$companyID}'")->result_array();

        $data['si'] = $this->db->query("SELECT srp_erp_socialinsurancemaster.socialInsuranceID, srp_erp_socialinsurancemaster.Description, 'sso' AS type
                                      FROM srp_erp_socialinsurancemaster WHERE companyID = '{$companyID}'
                                      UNION 
                                      SELECT payeeMasterID AS socialInsuranceID, srp_erp_payeemaster.description AS description, 'Payee' AS type
                                      FROM srp_erp_payeemaster WHERE srp_erp_payeemaster.companyID ='{$companyID}'")->result_array();

        $this->load->view('system/hrm/ajax/load_socialInsurance', $data);
    }

    function ajax_update_ssoNo()
    {
        $value = $this->input->post('value');
        $empID = $this->input->post('pk');
        $data = ['ssoNo' => $value];

        $this->db->trans_start();

        $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $data);
        $rptVal = ['reportValue' => $value, 'timestamp' => current_date(true)];
        $this->db->where(['reportID' => 4, 'empID' => $empID])->update('srp_erp_sso_reporttemplatedetails', $rptVal);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in update process.']);
        }

    }

    public function fetch_empShifts()
    {
        $empID = $this->input->post('empID');
        $convertFormat = convert_date_format_sql();
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-pencil" onclick="editEmp_shift(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span class="glyphicon glyphicon-trash traceIcon" onclick="deleteEmp_shift(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('autoID, Description, shiftEmp.shiftID AS shiftID,
            DATE_FORMAT(startDate,\'' . $convertFormat . '\') startDate, DATE_FORMAT(endDate,\'' . $convertFormat . '\') endDate ', false)
            ->from('srp_erp_pay_shiftemployees AS shiftEmp')
            ->join('srp_erp_pay_shiftmaster AS shiftMaster', 'shiftMaster.shiftID=shiftEmp.shiftID')
//            ->add_column('status', '$1', 'confirm(isActive)')
            ->add_column('edit', $details)
            ->where('empID', $empID);

        echo $this->datatables->generate();
    }

    public function save_empShift()
    {
        $this->form_validation->set_rules('shiftID', 'Shift ID', 'trim|required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        //$this->form_validation->set_rules('startDate', 'Start Date', 'trim|required|date');
        //$this->form_validation->set_rules('endDate', 'End Date', 'trim|required|date|callback_validateEmpShiftDate');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empShift());
        }
    }

    function validateEmpShiftDate()
    {
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');

        if ($startDate < $endDate) {
            return true;
        } else {
            $this->form_validation->set_message('validateEmpShiftDate', 'End date should be greater than start date');
            return false;
        }
    }

    public function update_empShift()
    {
        $this->form_validation->set_rules('shiftID', 'Shift ID', 'trim|required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('editID', 'Shift ID', 'trim|required');
        //$this->form_validation->set_rules('startDate', 'Start Date', 'trim|required|date');
        //$this->form_validation->set_rules('endDate', 'End Date', 'trim|required|date|callback_validateEmpShiftDate');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_empShift());
        }
    }

    public function delete_empShift()
    {

        $this->form_validation->set_rules('hidden-id', 'Shift ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empShift());
        }
    }
    /*End of Employee shift*/


    /*Start of Employee Floor*/
    public function fetch_floor()
    {
        $this->datatables->select('floorID, floorDescription, latitude, longitude, locationRadius, isActive,
            IFNULL( (SELECT count(floorID) FROM srp_employeesdetails WHERE floorID=t1.floorID), 0 ) AS usageCount')
            ->from('srp_erp_pay_floormaster AS t1')
            ->add_column('status', '$1', 'confirm(isActive)')
            ->add_column('edit', '$1', 'action_floor(floorID, floorDescription, isActive, latitude, longitude, locationRadius, usageCount)')
            ->where('companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveFloor()
    {
        $this->form_validation->set_rules('floor[]', 'Floor', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveFloor());
        }
    }

    public function editFloor()
    {
        $this->form_validation->set_rules('floorDes', 'Floor', 'required');
        $this->form_validation->set_rules('status', 'Status', 'required');
        $this->form_validation->set_rules('hidden-id', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editFloor());
        }
    }

    public function deleteFloor()
    {
        $this->form_validation->set_rules('hidden-id', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteFloor());
        }
    }
    /*End of Employee Floor*/


    /*Start of Employee Bank*/
    public function fetch_empBank()
    {
        $details = '<div align="right" >';
        $details .= '<i rel="tooltip" class="fa fa-sitemap" aria-hidden="true" onclick="branches(this)" title="Branches"></i>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span title="Edit" rel="tooltip" class="glyphicon glyphicon-pencil" onclick="edit_empBank(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash traceIcon" onclick="delete_empBank(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('bankID, bankCode, bankName, bankSwiftCode,
            IFNULL( (SELECT count(bankID) FROM srp_erp_pay_salaryaccounts WHERE bankID=t1.bankID), 0 ) AS usageCount')
            ->from('srp_erp_pay_bankmaster AS t1')
            ->add_column('edit', $details)
            ->where('companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function save_empBank()
    {
        $this->form_validation->set_rules('bankCode', 'Bank Code', 'required|trim');
        $this->form_validation->set_rules('bankName', 'Bank Name', 'required|trim');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empBank());
        }
    }

    public function update_empBank()
    {
        $this->form_validation->set_rules('bankCode', 'Bank Code', 'required|trim');
        $this->form_validation->set_rules('bankName', 'Bank Name', 'required|trim');
        $this->form_validation->set_rules('hiddenID', 'Bank Mater ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_empBank());
        }
    }

    public function delete_empBank()
    {
        $this->form_validation->set_rules('hiddenID', 'Bank master ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empBank());
        }
    }


    public function fetch_empBankBranches()
    {
        $bankID = $this->input->post('bankID');
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-pencil" onclick="edit_empBranchBank(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span class="glyphicon glyphicon-trash traceIcon" onclick="delete_empBranchBank(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('branchID, bankID, branchName, branchCode, country,
            IFNULL( (SELECT count(bankID) FROM srp_erp_pay_salaryaccounts WHERE branchID=t1.branchID), 0 ) AS usageCount')
            ->from('srp_erp_pay_bankbranches AS t1')
            ->add_column('edit', $details)
            ->where('bankID', $bankID)
            ->where('companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function save_empBranchBank()
    {
        $this->form_validation->set_rules('branchCode', 'Branch Code', 'required|trim');
        $this->form_validation->set_rules('branchName', 'Branch Name', 'required|trim');
        $this->form_validation->set_rules('bankID', 'Bank ID', 'required|trim');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empBranchBank());
        }
    }

    public function update_empBranchBank()
    {
        $this->form_validation->set_rules('branchCode', 'Branch Code', 'required|trim');
        $this->form_validation->set_rules('branchName', 'Branch Name', 'required|trim');
        $this->form_validation->set_rules('bankID', 'Bank ID', 'required|trim');
        $this->form_validation->set_rules('hiddenID', 'Branch ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_empBranchBank());
        }
    }

    public function delete_empBranchBank()
    {
        $this->form_validation->set_rules('hiddenID', 'BranchID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empBranchBank());
        }
    }
    /*End of Employee Bank*/


    /*Start of Over time*/
    public function fetch_OTCat()
    {
        $details = '<div align="right" >';
        $details .= '<span title="Edit" rel="tooltip" class="glyphicon glyphicon-pencil" onclick="edit_OTCat(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash traceIcon" onclick="delete_OTCat(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('t1.ID, OTMasterID, description, catDescription, IFNULL( (SELECT count(floorID) FROM srp_employeesdetails WHERE floorID=t1.ID), 0 ) AS usageCount,
            t3.salaryDescription as salaryDescription,t3.salaryCategoryID as salaryCategoryID')
            ->from('srp_erp_pay_overtimecategory AS t1')
            ->join('srp_erp_pay_sys_overtimecategory AS t2', 't2.ID=t1.OTMasterID')
            ->join('srp_erp_pay_salarycategories AS t3', 't3.salaryCategoryID=t1.salaryCategoryID', 'left')
            ->where('t1.companyID', current_companyID())
            ->add_column('status', '$1', 'confirm(isActive)')
            ->add_column('edit', $details);


        echo $this->datatables->generate();
    }

    public function saveOTCat()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');
        $this->form_validation->set_rules('masterCat', 'Mater Category', 'required');
        $this->form_validation->set_rules('salaryCategoryID', 'Salary Category', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveOTCat());
        }
    }

    public function editOTCat()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');
        $this->form_validation->set_rules('masterCat', 'Mater Category', 'required');
        $this->form_validation->set_rules('salaryCategoryID', 'Salary Category', 'required');
        $this->form_validation->set_rules('editID', 'ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editOTCat());
        }
    }

    public function deleteOTCat()
    {
        $this->form_validation->set_rules('hiddenID', 'Category ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteOTCat());
        }
    }
    /*End of Over time*/

    /*Start of Over time Group Master*/
    public function fetch_OTGroupMaster()
    {
        $details = '<div align="right">';
        //$details .= '<i rel="tooltip" class="fa fa-sitemap" aria-hidden="true" onclick="setupDetails(this)" title="Setup"></i>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span title="Edit" rel="tooltip" class="glyphicon glyphicon-pencil" onclick="setupDetails(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash traceIcon" onclick="delete_OTCat(this)" style="color:#d15b47;"></span>';
        $details .= ' &nbsp; | &nbsp; <span title="Employee" rel="tooltip" class="glyphicon glyphicon-user" onclick="load_OTGrpEmployees(this)"></span>';
        $details .= '</div>';

        $this->datatables->select('groupID, description')
            ->from('srp_erp_pay_overtimegroupmaster ')
            ->where('companyID', current_companyID())
            ->add_column('edit', $details);


        echo $this->datatables->generate();
    }

    public function save_OTGroupMaster()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_OTGroupMaster());
        }
    }

    public function edit_OTGroupMaster()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');
        $this->form_validation->set_rules('editID', 'ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_OTGroupMaster());
        }
    }

    public function delete_OTGroupMaster()
    {
        $this->form_validation->set_rules('catID', 'Category ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_OTGroupMaster());
        }
    }

    public function save_OTGroupDet()
    {

        if (!empty($this->input->post('OT_ID'))) {
            //$this->form_validation->set_rules('OT_ID[]', 'OT Category', 'required');
            //$this->form_validation->set_rules('glCode[]', 'GL Code', 'required');
            $this->form_validation->set_rules('formulaOriginal[]', 'Formula', 'callback_validateFormula');
        }

        $this->form_validation->set_rules('groupID', 'Group ID', 'required');
        $this->form_validation->set_rules('description', 'Master Description', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_OTGroupDet());
        }
    }

    public function delete_OTGroupDetail()
    {
        $this->form_validation->set_rules('groupDet_ID', 'Category ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_OTGroupDetail());
        }
    }

    function validateFormula()
    {
        $isAllSet = true;
        $unsetDesc = array();
        $formulaOriginal = $this->input->post('formulaOriginal');
        $OTDescription = $this->input->post('OTDescription');

        foreach ($formulaOriginal as $key => $row) {
            if (empty($row)) {
                $unsetDesc[] = $OTDescription[$key];
                $isAllSet = false;
            }
        }

        if ($isAllSet == false) {
            $descriptions = implode("</br>", $unsetDesc);
            $this->form_validation->set_message('validateFormula', 'Set the formula for </br>' . $descriptions);
            return false;
        } else {
            return true;
        }
    }

    /*End of Over time Group Master*/

    /********************End of employee master**************/

    /***** HR document upload****/

    function hr_document_save()
    {
        $this->form_validation->set_rules('documentName', 'Document name', 'trim|required');
        //$this->form_validation->set_rules('doc_file', 'file', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $documentName = $this->input->post('documentName');

            $existingDataID = $this->db->select('id')->from('srp_erp_hrdocuments')
                ->where(['companyID' => $companyID, 'documentDescription' => $documentName])
                ->get()->row('id');

            if (!empty($existingDataID)) {
                die(json_encode(['e', 'This description is already exist']));
            }


            $fileName = $companyID . $documentName;
            $fileName = str_replace(' ', '', strtolower($fileName)) . '_' . time();
            $file = $_FILES['doc_file'];

            if ($file['error'] == 1) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
            }

            $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
            $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
            $allowed_types = explode('|', $allowed_types);
            if (!in_array($ext, $allowed_types)) {
                die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
            }

            $size = $file['size'];
            $size = number_format($size / 1048576, 2);

            if ($size > 5) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"]));
            }


            $fileName = "documents/hr_documents/$fileName.$ext";
            $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

            if (!$s3Upload) {
                die(json_encode(['e', 'Error in document upload location configuration']));
            }

            /*$config['allowed_types'] = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
            $config['max_size'] = '500000';*/

            $data = array(
                'documentDescription' => $documentName,
                'documentFile' => $fileName,
                'companyID' => $companyID,
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_hrdocuments', $data);


            if ($this->db->affected_rows() > 0) {
                echo json_encode(['s', 'Document successfully uploaded']);
            } else {
                echo json_encode(['e', 'Error in document upload']);
            }
        }
    }

    function edit_hrDocument()
    {
        $this->form_validation->set_rules('documentName', 'Document name', 'trim|required');
        $this->form_validation->set_rules('hidden-id', 'id', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $documentName = $this->input->post('documentName');
            $id = $this->input->post('hidden-id');

            $existingDataID = $this->db->select('id')->from('srp_erp_hrdocuments')
                ->where(['companyID' => $companyID, 'documentDescription' => $documentName])
                ->get()->row('id');

            if (!empty($existingDataID) && $existingDataID != $id) {
                die(json_encode(['e', 'This description is already exist']));
            }


            $updateData = array(
                'documentDescription' => $documentName,
                'modifiedPCID' => current_pc(),
                'modifiedUserID' => current_userID(),
                'modifiedUserName' => current_employee(),
                'modifiedDateTime' => current_date()
            );

            $this->db->trans_start();

            $this->db->where(['id' => $id, 'companyID' => $companyID])->update('srp_erp_hrdocuments', $updateData);


            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in document update']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', 'Document successfully updated']);
            }

        }
    }

    function delete_hrDocument()
    {

        $this->form_validation->set_rules('hidden-id', 'id', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $id = $this->input->post('hidden-id');


            $file = $this->db->get_where('srp_erp_hrdocuments', ['id' => $id, 'companyID' => $companyID])->row('documentFile');
            $this->s3->delete($file);

            $this->db->trans_start();
            $this->db->where(['id' => $id, 'companyID' => $companyID])->delete('srp_erp_hrdocuments');


            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in document delete process']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', 'Document successfully deleted']);
            }

        }
    }

    public function employeeMasterFilter()
    {
        echo json_encode(employeePagination());
        //echo json_encode( load_employee_data() );
        /*$empList = load_employee_data();
        employeeListCreate($empList);*/
        //echo '<pre>'; print_r($empList); echo '</pre>';
    }

    public function getEmployees()
    {
        echo json_encode($this->Employee_model->getEmployees());
    }

    public function getEmployeesDataTable()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $entryDate = $this->input->get('entryDate');
        $segmentID = $this->input->post('segmentID');
        $currencyFilter = $this->input->post('currencyFilter');
        $currencyID = $this->input->post('currencyID');
        $isOT_addition = $this->input->post('isOT_addition');
        $selectStr = '';

        if ($entryDate != 'Not_monthly_add_deductions') {
            $entryDate = input_format_date($entryDate, $date_format_policy);

            $isNonPayroll = $this->input->post('isNonPayroll');
            $salaryDeclarationTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
            $headerDetailTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';
            $payrollMaster = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';
            $selectStr = ', segTB.segmentCode AS segTBCode, IFNULL(accTb.groupID, 0) AS accGroupID ';
        }

        if ($isOT_addition == 1) {
            $selectStr = ', OT_empID, OT_emp.*';
        }

        $this->datatables->select('EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces' . $selectStr);
        $this->datatables->from('srp_employeesdetails AS empTB');
        $this->datatables->join('srp_designation', 'empTB.EmpDesignationId = srp_designation.DesignationID');
        $this->datatables->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID');
        $this->datatables->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID');

        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            $this->datatables->join("(
                                        SELECT empTB.groupID, employeeID FROM srp_erp_payrollgroupemployees AS empTB
                                        JOIN srp_erp_payrollgroupincharge AS inCharge ON inCharge.groupID=empTB.groupID
                                        WHERE empTB.companyID={$companyID} AND inCharge.companyID={$companyID} AND empID={$currentEmp}
                                    ) AS accTb", 'accTb.employeeID=EIdNo');
        } else {
            $this->datatables->join("srp_erp_payrollgroupemployees AS accTb", 'accTb.employeeID=EIdNo', 'left');
        }

        if ($entryDate != 'Not_monthly_add_deductions') {
            $this->datatables->join($salaryDeclarationTB . ' AS salaryDec', 'empTB.EIdNo = salaryDec.employeeNo');
        }

        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        $this->datatables->where('empTB.Erp_companyID', $companyID);
        $this->datatables->where('empTB.isPayrollEmployee', 1);


        if ($entryDate != 'Not_monthly_add_deductions') {
            $payYear = date('Y', strtotime($entryDate));
            $payMonth = date('m', strtotime($entryDate));
            $entryDateLast = date('Y-m-t', strtotime($entryDate));

            if ($isOT_addition == 1) {
                $minDate = date('Y-m-01', strtotime($entryDate));
                $otGroupID = $this->input->post('otGroupID');
                $otGroup_str = (!empty($otGroupID)) ? ' AND grpDet.otGroupID IN (' . $otGroupID . ') ' : '';

                $this->datatables->join("(SELECT empID AS OT_empID, grpDet.*, otGroupDescription FROM srp_erp_ot_groups AS grpMaster
                                          JOIN srp_erp_ot_groupemployees AS grpEmp ON grpMaster.otGroupID = grpEmp.otGroupID
                                          AND grpEmp.companyID={$companyID}
                                          JOIN (
                                          SELECT otGroupID,
                                              MAX(CASE WHEN systemInputID = 1 THEN hourlyRate END) rateInt,
                                              MAX(CASE WHEN systemInputID = 2 THEN hourlyRate END) rateLocalLay,
                                              MAX(CASE WHEN systemInputID = 3 THEN hourlyRate END) rateIntLay,
                                              MAX(CASE WHEN systemInputID = 4 THEN slabMasterID END) slabID
                                          FROM srp_erp_ot_groupdetail WHERE companyID={$companyID} GROUP BY otGroupID
                                          ) AS grpDet ON grpDet.otGroupID = grpMaster.otGroupID
                                          WHERE grpMaster.companyID={$companyID} AND CurrencyID={$currencyID} {$otGroup_str}
                                          AND empID NOT IN (
                                                SELECT empID FROM srp_erp_ot_monthlyadditionsmaster AS addMaster
                                                JOIN srp_erp_ot_monthlyadditiondetail AS addDetail
                                                ON addDetail.monthlyAdditionsMasterID = addMaster.monthlyAdditionsMasterID AND addDetail.companyID={$companyID}
                                                WHERE addMaster.companyID={$companyID} AND dateMA BETWEEN '{$minDate}' AND '{$entryDateLast}'
                                          ) ) AS OT_emp",
                    'OT_emp.OT_empID = empTB.EIdNo');
            }


            $this->datatables->join("(SELECT EIdNo AS empID, dischargedDate,
                                      IF( isDischarged != 1, 0,
                                         CASE
                                            WHEN '{$entryDateLast}' <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                            WHEN '{$entryDateLast}' > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                         END
                                      )AS isDischargedStatus FROM srp_employeesdetails WHERE Erp_companyID={$companyID}) AS dischargedStatusTB",
                'dischargedStatusTB.empID = empTB.EIdNo');
            $this->datatables->where('salaryDec.confirmedYN', 1);
            $this->datatables->where('salaryDec.payDate <=', $entryDateLast);
            $this->datatables->where('isDischargedStatus != 1');

            $this->datatables->where('EIdNo NOT IN (
                        SELECT  empID FROM ' . $payrollMaster . ' AS payMaster
                        JOIN ' . $headerDetailTB . ' AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID=' . $companyID . '
                        WHERE payMaster.companyID = ' . $companyID . ' AND payrollYear=' . $payYear . ' AND payrollMonth=' . $payMonth . '
                  ) ');

            if (!empty($segmentID)) {
                $this->datatables->where('segTB.segmentID IN (' . $segmentID . ')');
            }

            if (!empty($currencyFilter)) {
                $this->datatables->where('currencyID IN (' . $currencyFilter . ')');
            }

            $this->datatables->group_by('salaryDec.employeeNo');
        }


        echo $this->datatables->generate();
    }

    public function getEmployeesDataTable_withLastWorkingDay_validation()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $entryDate = $this->input->get('entryDate');
        $segmentID = $this->input->post('segmentID');
        $isFromSalaryDeclaration = $this->input->post('isFromSalaryDeclaration');
        $isFromSalaryDeclaration = (!empty($isFromSalaryDeclaration)) ? $isFromSalaryDeclaration : 0;
        $currencyFilter = $this->input->post('currencyFilter');
        $currencyID = $this->input->post('currencyID');
        $systemType = $this->input->post('systemType');
        $isOT_addition = $this->input->post('isOT_addition');
        $selectStr = '';

        if ($entryDate != 'Not_monthly_add_deductions') {
            $entryDate = input_format_date($entryDate, $date_format_policy);

            $isNonPayroll = $this->input->post('isNonPayroll');
            $salaryDeclarationTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
            $headerDetailTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';
            $payrollMaster = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';
            $selectStr = ', segTB.segmentCode AS segTBCode, IFNULL(accTb.groupID, 0) AS accGroupID ';
        }

        if ($isOT_addition == 1) {
            $selectStr = ', OT_empID, OT_emp.*';
        }

        $this->datatables->select('EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces' . $selectStr);
        $this->datatables->from('srp_employeesdetails AS empTB');
        $this->datatables->join('srp_designation', 'empTB.EmpDesignationId = srp_designation.DesignationID');
        $this->datatables->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID');
        $this->datatables->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID');

        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            $this->datatables->join("(
                                        SELECT empTB.groupID, employeeID FROM srp_erp_payrollgroupemployees AS empTB
                                        JOIN srp_erp_payrollgroupincharge AS inCharge ON inCharge.groupID=empTB.groupID
                                        WHERE empTB.companyID={$companyID} AND inCharge.companyID={$companyID} AND empID={$currentEmp}
                                    ) AS accTb", 'accTb.employeeID=EIdNo');
        } else {
            $this->datatables->join("srp_erp_payrollgroupemployees AS accTb", 'accTb.employeeID=EIdNo', 'left');
        }

        if ($entryDate != 'Not_monthly_add_deductions' && $isFromSalaryDeclaration == 0) {
            $this->datatables->join($salaryDeclarationTB . ' AS salaryDec', 'empTB.EIdNo = salaryDec.employeeNo');
        }

        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        $this->datatables->where('empTB.Erp_companyID', $companyID);
        $this->datatables->where('empTB.isPayrollEmployee', 1);


        if ($entryDate != 'Not_monthly_add_deductions') {
            $payYear = date('Y', strtotime($entryDate));
            $payMonth = date('m', strtotime($entryDate));
            $entryDateLast = date('Y-m-t', strtotime($entryDate));

            if ($isOT_addition == 1) {
                $minDate = date('Y-m-01', strtotime($entryDate));
                $otGroupID = $this->input->post('otGroupID');
                $otGroup_str = (!empty($otGroupID)) ? ' AND grpDet.otGroupID IN (' . $otGroupID . ') ' : '';

                $this->datatables->join("(SELECT empID AS OT_empID, grpDet.*, otGroupDescription FROM srp_erp_ot_groups AS grpMaster
                                          JOIN srp_erp_ot_groupemployees AS grpEmp ON grpMaster.otGroupID = grpEmp.otGroupID
                                          AND grpEmp.companyID={$companyID}
                                          JOIN (
                                          SELECT otGroupID,
                                              MAX(CASE WHEN systemInputID = 1 THEN hourlyRate END) rateInt,
                                              MAX(CASE WHEN systemInputID = 2 THEN hourlyRate END) rateLocalLay,
                                              MAX(CASE WHEN systemInputID = 3 THEN hourlyRate END) rateIntLay,
                                              MAX(CASE WHEN systemInputID = 4 THEN slabMasterID END) slabID
                                          FROM srp_erp_ot_groupdetail WHERE companyID={$companyID} GROUP BY otGroupID
                                          ) AS grpDet ON grpDet.otGroupID = grpMaster.otGroupID
                                          WHERE grpMaster.companyID={$companyID} AND CurrencyID={$currencyID} {$otGroup_str}
                                          AND empID NOT IN (
                                                SELECT empID FROM srp_erp_ot_monthlyadditionsmaster AS addMaster
                                                JOIN srp_erp_ot_monthlyadditiondetail AS addDetail
                                                ON addDetail.monthlyAdditionsMasterID = addMaster.monthlyAdditionsMasterID AND addDetail.companyID={$companyID}
                                                WHERE addMaster.companyID={$companyID} AND dateMA BETWEEN '{$minDate}' AND '{$entryDateLast}'
                                          ) ) AS OT_emp",
                    'OT_emp.OT_empID = empTB.EIdNo');
            }


            $this->datatables->join("(SELECT EIdNo AS empID, dischargedDate, IF( isDischarged != 1, 0, 
                                      IF('{$entryDateLast}' <= LAST_DAY(lastWorkingDate) AND finalSettlementDoneYN=0, 0, 1)	)AS isDischargedStatus
                                      FROM srp_employeesdetails WHERE Erp_companyID={$companyID}) AS dischargedStatusTB",
                'dischargedStatusTB.empID = empTB.EIdNo');

            if ($isFromSalaryDeclaration == 0) {
                $this->datatables->where('salaryDec.confirmedYN', 1);
                $this->datatables->where('salaryDec.payDate <=', $entryDateLast);
            }

            $this->datatables->where('isDischargedStatus != 1');

            $this->datatables->where('EIdNo NOT IN (
                        SELECT  empID FROM ' . $payrollMaster . ' AS payMaster
                        JOIN ' . $headerDetailTB . ' AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID=' . $companyID . '
                        WHERE payMaster.companyID = ' . $companyID . ' AND payrollYear=' . $payYear . ' AND payrollMonth=' . $payMonth . '
                  ) ');

            if (!empty($segmentID)) {
                $this->datatables->where('segTB.segmentID IN (' . $segmentID . ')');
            }

            if (!empty($currencyFilter)) {
                $this->datatables->where('currencyID IN (' . $currencyFilter . ')');
            }

            $this->datatables->group_by('empTB.EIdNo');
        }

        $systemType = (!empty($systemType)) ? $systemType : 0;
        // if ($systemType != 0) { /*Monthly Addition - Variable Pay*/
        //     $masterID = $this->input->post('masterID');
        //     $entryDateLast = date('Y-m-t', strtotime($entryDate));
        //     $this->datatables->join("(SELECT empID FROM srp_erp_variablepaydeclarationdetails t1 WHERE companyID = {$companyID} 
        //             AND isActive = 1 AND salaryCategoryID = {$systemType} AND effectiveDate <= '{$entryDateLast}' AND NOT EXISTS(  
        //             SELECT empID FROM srp_erp_pay_monthlyadditiondetail d1 WHERE monthlyAdditionsMasterID = {$masterID} 
        //             AND d1.empID = t1.empID  )  ) VPDec",
        //         'VPDec.empID = empTB.EIdNo');
        // }

        echo $this->datatables->generate();
    }


    public function getEmployeesDataTable_withLastWorkingDay_validation_period_base()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $masterID = $this->input->post('masterID');
        $payroll_group = $this->input->post('payroll_group');
        $entryDate = $this->input->get('entryDate');
        $segmentID = $this->input->post('segmentID');
        $isFromSalaryDeclaration = $this->input->post('isFromSalaryDeclaration');
        $isFromSalaryDeclaration = (!empty($isFromSalaryDeclaration)) ? $isFromSalaryDeclaration : 0;
        $currencyFilter = $this->input->post('currencyFilter');
        $systemType = $this->input->post('systemType');

        $entryDate = input_format_date($entryDate, $date_format_policy);

        $isNonPayroll = $this->input->post('isNonPayroll');
        $salaryDeclarationTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
        $headerDetailTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';
        $payrollMaster = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';

        $this->datatables->select('EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces, 
                segTB.segmentCode AS segTBCode, payGrpTb.groupID AS accGroupID');
        $this->datatables->from('srp_employeesdetails AS empTB');
        $this->datatables->join('srp_designation', 'empTB.EmpDesignationId = srp_designation.DesignationID');
        $this->datatables->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID');
        $this->datatables->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID');

        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            $this->datatables->join("(
                                        SELECT empTB.groupID, employeeID FROM srp_erp_payrollgroupemployees AS empTB
                                        JOIN srp_erp_payrollgroupincharge AS inCharge ON inCharge.groupID=empTB.groupID
                                        WHERE empTB.companyID={$companyID} AND inCharge.companyID={$companyID} AND empID={$currentEmp}
                                    ) AS accTb", 'accTb.employeeID=EIdNo');
        } else {
            $this->datatables->join("srp_erp_payrollgroupemployees AS accTb", 'accTb.employeeID=EIdNo', 'left');
        }

        $payYear = date('Y', strtotime($entryDate));
        $payMonth = date('m', strtotime($entryDate));
        $entryDateLast = date('Y-m-t', strtotime($entryDate));

        if ($isFromSalaryDeclaration == 0) {
            /*$this->datatables->join($salaryDeclarationTB . ' AS salaryDec', 'empTB.EIdNo = salaryDec.employeeNo');
            $this->datatables->where('salaryDec.confirmedYN', 1);
            $this->datatables->where('salaryDec.payDate <=', $entryDateLast);*/
        }

        /*** Get employees who are assign to this payroll group ***/
        $this->datatables->join("(SELECT grEmp.employeeID, grEmp.groupID
                          FROM srp_erp_hrperiodgroup AS hrMas
                          JOIN srp_erp_hrperiodassign AS hrAss ON hrMas.hrGroupID = hrAss.hrGroupID
                          JOIN srp_erp_payrollgroupemployees AS grEmp ON grEmp.groupID = hrAss.accessGroupID
                          WHERE hrMas.hrGroupID = {$payroll_group}
                        ) AS payGrpTb", 'payGrpTb.employeeID=EIdNo');

        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        $this->datatables->where('empTB.Erp_companyID', $companyID)->where('empTB.isPayrollEmployee', 1)->where('empTB.empConfirmedYN', 1);


        $this->datatables->join("(SELECT EIdNo AS empID, dischargedDate, IF( isDischarged != 1, 0, 
                                      IF('{$entryDateLast}' <= LAST_DAY(lastWorkingDate) AND finalSettlementDoneYN=0, 0, 1)	)AS isDischargedStatus
                                      FROM srp_employeesdetails WHERE Erp_companyID={$companyID}) AS dischargedStatusTB",
            'dischargedStatusTB.empID = empTB.EIdNo');


        $this->datatables->where('isDischargedStatus != 1');

        /*$this->datatables->where('EIdNo NOT IN (
                        SELECT  empID FROM ' . $payrollMaster . ' AS payMaster
                        JOIN ' . $headerDetailTB . ' AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID=' . $companyID . '
                        WHERE payMaster.companyID = ' . $companyID . ' AND payrollYear=' . $payYear . ' AND payrollMonth=' . $payMonth . '
                  ) ');*/

        if (!empty($segmentID)) {
            $this->datatables->where('segTB.segmentID IN (' . $segmentID . ')');
        }

        if (!empty($currencyFilter)) {
            $this->datatables->where('currencyID IN (' . $currencyFilter . ')');
        }

        $this->datatables->group_by('empTB.EIdNo');

        $systemType = (!empty($systemType)) ? $systemType : 0;
        if ($systemType != 0) { /*Monthly Addition - Variable Pay*/
            $entryDateLast = date('Y-m-t', strtotime($entryDate));
            $this->datatables->join("(SELECT empID FROM srp_erp_variablepaydeclarationdetails t1 WHERE companyID = {$companyID} 
                    AND isActive = 1 AND salaryCategoryID = {$systemType} AND effectiveDate <= '{$entryDateLast}' AND NOT EXISTS(  
                    SELECT empID FROM srp_erp_pay_monthlyadditiondetail d1 WHERE monthlyAdditionsMasterID = {$masterID} 
                    AND d1.empID = t1.empID  )  ) VPDec",
                'VPDec.empID = empTB.EIdNo');
        }

        echo $this->datatables->generate();
    }

    public function getEmployeesDataTable_salaryDeclaration()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $entryDate = $this->input->get('entryDate');
        $segmentID = $this->input->post('segmentID');
        $currencyID = $this->input->post('currencyFilter');
        $isVPDeclaration = $this->input->post('isVPDeclaration');
        $isVPDeclaration = (empty($isVPDeclaration)) ? 0 : $isVPDeclaration;


        $entryDate = input_format_date($entryDate, $date_format_policy);
        $payYear = date('Y', strtotime($entryDate));
        $payMonth = date('m', strtotime($entryDate));
        $entryDateLast = date('Y-m-t', strtotime($entryDate));

        $isNonPayroll = $this->input->post('isNonPayroll');
        $headerDetailTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';
        $payrollMaster = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';
        $selectStr = ', segTB.segmentCode AS segTBCode, IFNULL(accTb.groupID, 0) AS accGroupID ';

        $this->datatables->select('EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces' . $selectStr);
        $this->datatables->from('srp_employeesdetails AS empTB');
        $this->datatables->join('srp_designation', 'empTB.EmpDesignationId = srp_designation.DesignationID');
        $this->datatables->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID');
        $this->datatables->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID');

        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            $this->datatables->join("(
                                        SELECT empTB.groupID, employeeID FROM srp_erp_payrollgroupemployees AS empTB
                                        JOIN srp_erp_payrollgroupincharge AS inCharge ON inCharge.groupID=empTB.groupID
                                        WHERE empTB.companyID={$companyID} AND inCharge.companyID={$companyID} AND empID={$currentEmp}
                                    ) AS accTb", 'accTb.employeeID=EIdNo');
        } else {
            $this->datatables->join("srp_erp_payrollgroupemployees AS accTb", 'accTb.employeeID=EIdNo', 'left');
        }

        $this->datatables->where('empTB.isPayrollEmployee', 1)->where('empTB.empConfirmedYN', 1)->where('isDischarged = 0');
        $this->datatables->where('empTB.EDOJ <=', $entryDate)->where('empTB.Erp_companyID', $companyID)->where('empTB.payCurrencyID', $currencyID);

        if ($isVPDeclaration == 0) { // If not Variable Pay Declaration
            $this->datatables->where('EIdNo NOT IN (
                        SELECT  empID FROM ' . $payrollMaster . ' AS payMaster
                        JOIN ' . $headerDetailTB . ' AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID=' . $companyID . '
                        WHERE payMaster.companyID = ' . $companyID . ' AND payrollYear=' . $payYear . ' AND payrollMonth=' . $payMonth . '
                  ) ');
        }


        if (!empty($segmentID)) {
            $this->datatables->where('segTB.segmentID IN (' . $segmentID . ')');
        }

        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        echo $this->datatables->generate();
    }

    function getDescriptionOfMonthlyAD()
    {
        $dateDesc = $this->input->post('dateDesc');
        $typeMonthly = $this->input->post('typeMonthly');
        $systemType = $this->input->post('systemType');

        $date_format_policy = date_format_policy();
        $dateDesc = input_format_date($dateDesc, $date_format_policy);
        $data = '';
        if (!empty($systemType)) {
            if($systemType == 1){
                $data = ($typeMonthly == 'MA') ? 'Variable Monthly Addition for ' : 'Variable Monthly Deduction for ';
                $data .= ' ';
            }else{
                $data = ($typeMonthly == 'MA') ? 'Monthly Addition for ' : 'Monthly Deduction for ';
                $data = $this->db->get_where('srp_erp_pay_salarycategories', ['salaryCategoryID' => $systemType])->row('salaryDescription');
                $data .= ' ';
            }
           
        }
        $data .= date('M Y', strtotime($dateDesc));
        echo json_encode($data);
    }

    public function loadDetail_table()
    {
        $masterID = $this->input->post('masterID');
        $type = $this->input->post('type_m');
        $isVariable = $this->input->post('isVariable');
        $selected_groups = $this->input->post('groups');
        $selected_emp = $this->input->post('emp_arr');

        $companyID = current_companyID();
        $masterData = $this->Employee_model->edit_monthAddition($type, $masterID);
        $data['masterData'] = $masterData;

        $additionType = 0;
        if ($type == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionsMasterID';
            $additionType = $masterData['typeID'];
        } elseif ($type == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionMasterID';
        }


        $str = '';
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $data['isGroupAccess'] = $isGroupAccess;
        if ($isGroupAccess == 1) {
            $totalEntries = $this->db->query("SELECT COUNT($masterColumn) AS totalEntries
                                     FROM {$tableName} AS detailTB
                                     JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                     LEFT JOIN (
                                          SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                     ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                     LEFT JOIN (
                                        SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                     )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                     WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} ORDER BY ECode ASC")->row('totalEntries');
            $data['totalEntries'] = $totalEntries;
            $currentEmp = current_userID();
            $str = "JOIN (
                        SELECT groupID FROM srp_erp_payrollgroupincharge
                        WHERE companyID={$companyID} AND empID={$currentEmp}
                    ) AS accTb ON accTb.groupID = detailTB.accessGroupID";
        }

        $filter_sel = '';
        if($selected_groups){
            $selected_groups_str = join(',',$selected_groups);
            $filter_sel .= 'AND decType.monthlyDeclarationID IN ('.$selected_groups_str.') ';
        }

        if($selected_emp){
            $selected_emp_str = join(',',$selected_emp);
            $filter_sel .= 'AND empTB.EIdNo IN ('.$selected_emp_str.') ';
        }

        $details_all = $this->db->query("SELECT detailTB.*, EIdNo, ECode, Ename2 AS empName,
                                    IFNULL(declarationID, 0) AS declarationID, IFNULL(GLSecondaryCode, 0) AS GLSecondaryCode
                                    FROM {$tableName} AS detailTB
                                    JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                    {$str}
                                    LEFT JOIN (
                                        SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                    ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                    LEFT JOIN (
                                    SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                    )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                    WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} ORDER BY ECode ASC")->result_array();

        

        $details = $this->db->query("SELECT detailTB.*, EIdNo, ECode, Ename2 AS empName,
                                     IFNULL(declarationID, 0) AS declarationID, IFNULL(GLSecondaryCode, 0) AS GLSecondaryCode
                                     FROM {$tableName} AS detailTB
                                     JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                     {$str}
                                     LEFT JOIN (
                                          SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                     ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                     LEFT JOIN (
                                        SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                     )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                     WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} {$filter_sel} ORDER BY ECode ASC")->result_array();
        
      
        $data['details'] = $details;
        $data['isVariable'] = $isVariable;
        $data_emp_arr = array();

        foreach($details_all as $det){
            $data_emp_arr[$det['empID']] = $det['ECode'].' | '.$det['empName'];
        }

      
        $data['emp_arr'] = $data_emp_arr;
        $data['selected_groups'] = $selected_groups;
        $data['selected_emp'] = $selected_emp;

        if ($additionType == 0) {
            $this->load->view('system/hrm/ajax/monthly-add-deduction-view', $data);
        } else {
            $this->load->view('system/hrm/ajax/monthly-add-deduction-view-variable', $data);
            //$this->load->view('system/hrm/ajax/monthly-variable-pay-view', $data);
        }
    }

    function generate_monthlyAdditionAttandance(){

        echo json_encode($this->Employee_model->generate_monthlyAdditionAttandance());

    }

    public function salaryDeclaration()
    {
        $empID = $this->input->post('empID');
        $empDet = $this->Employee_model->employee_details($empID);
        $data['dPlaces'] = fetch_currency_desimal($empDet['CurrencyCode']);
        $data['salaryDet'] = $this->Employee_model->loadEmpDeclarations($empID);
        $data['salaryDetNon'] = $this->Employee_model->loadEmpDeclarations_nonPayroll($empID);

        $this->load->view('system/hrm/ajax/load_empSalaryDeclarations', $data);
    }

    function get_variable_salary_declaration(){
        echo json_encode($this->Employee_model->get_variable_salary_declaration());
    }

    function generate_monthlyDeduction_Nopay(){
        echo json_encode($this->Employee_model->generate_monthlyDeduction_Nopay());

    }


    public function search()
    {
        $keyword = $this->input->post('keyword');

        echo json_encode($this->Employee_model->search($keyword));
    }

    public function loadEmpDeclarations()
    {
        $empID = $this->input->post('empID');
        $declaration = $this->Employee_model->loadEmpDeclarations($empID);
        echo json_encode($declaration);
    }

    public function deleteSalaryDec()
    {
        $deleteID = $this->input->post('deleteID');
        echo json_encode($this->Employee_model->deleteSalaryDec($deleteID));
    }

    public function saveBankAccount()
    {

        $isNewBank = $this->input->post('isNewBank');
        $isNewBranch = $this->input->post('isNewBranch');

        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('bank_no', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');


        if ($isNewBank == 1) {
            $this->form_validation->set_rules('newBank', 'Bank', 'trim|required');
        } else {
            $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        }

        if ($isNewBranch == 1) {
            $this->form_validation->set_rules('newBranch', 'Bank Branch', 'trim|required');
        } else {
            $this->form_validation->set_rules('branch_id', 'Bank Branch', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $accHolder = $this->input->post('accHolder');
            $bank_id = ($isNewBank == 1) ? $this->input->post('newBank') : $this->input->post('bank_id');
            $br_name = ($isNewBranch == 1) ? $this->input->post('newBranch') : $this->input->post('branch_id');
            $bank_no = $this->input->post('bank_no');
            $salPerc = $this->input->post('salPerc');
            $empID = $this->input->post('save_accountEmpID');

            $data = array(
                'employeeNo' => $empID,
                'bankID' => $bank_id,
                'isActive' => 1,
                'accountNo' => $bank_no,
                'accountHolderName' => $accHolder,
                'branchID' => $br_name,
                'toBankPercentage' => $salPerc,
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => current_date()
            );

            if ($isNewBank == 1) {

                $bankDet = $this->Employee_model->create_bank($bank_id);

                if ($bankDet[0] == 's') {
                    $newBankID = $bankDet[1];
                    $data['bankID'] = $newBankID;
                    $this->create_bankBranchWithSave($data, $newBankID);
                } else {
                    echo json_encode($bankDet);
                }

            } else if ($isNewBranch == 1) {
                $this->create_bankBranchWithSave($data);
            } else {
                echo json_encode($this->Employee_model->saveBankAccount($data));
            }
        }

    }

    public function create_bankBranchWithSave($data, $newBankID = null)
    {
        $newBranch = $this->input->post('newBranch');
        $branchDet = $this->Employee_model->create_bankBranch($data['bankID'], $newBranch);

        if ($branchDet[0] == 's') {
            $data['branchID'] = $branchDet[1];
            if ($newBankID != null) {
                $returnData = $this->Employee_model->saveBankAccount($data);
                $returnData[2] = $newBankID;
                echo json_encode($returnData);
            } else {
                echo json_encode($this->Employee_model->saveBankAccount($data));
            }

        } else {
            echo json_encode($branchDet);
        }
    }

    public function updateBankAccount()
    {

        $isNewBank = $this->input->post('isNewBank');
        $isNewBranch = $this->input->post('isNewBranch');

        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('bank_no', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');
        $this->form_validation->set_rules('update_accountID', 'BAnk Account ID', 'trim|required');


        if ($isNewBank == 1) {
            $this->form_validation->set_rules('newBank', 'Bank', 'trim|required');
        } else {
            $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        }

        if ($isNewBranch == 1) {
            $this->form_validation->set_rules('newBranch', 'Bank Branch', 'trim|required');
        } else {
            $this->form_validation->set_rules('branch_id', 'Bank Branch', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $id = $this->input->post('update_accountID');
            $accHolder = $this->input->post('accHolder');
            $bank_id = ($isNewBank == 1) ? $this->input->post('newBank') : $this->input->post('bank_id');
            $br_name = ($isNewBranch == 1) ? $this->input->post('newBranch') : $this->input->post('branch_id');
            $bank_no = $this->input->post('bank_no');
            $salPerc = $this->input->post('salPerc');
            $accStatus = $this->input->post('accStatus');


            $data = array(
                'bankID' => $bank_id,
                'branchID' => $br_name,
                'accountNo' => $bank_no,
                'accountHolderName' => $accHolder,
                'toBankPercentage' => $salPerc,
                'isActive' => $accStatus,
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $this->common_data['current_userID'],
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            );


            if ($isNewBank == 1) {

                $bankDet = $this->Employee_model->create_bank($bank_id);

                if ($bankDet[0] == 's') {
                    $newBankID = $bankDet[1];
                    $data['bankID'] = $newBankID;
                    $this->create_bankBranchWithUpdate($data, $id, $newBankID);
                } else {
                    echo json_encode($bankDet);
                }

            } else if ($isNewBranch == 1) {
                $this->create_bankBranchWithUpdate($data, $id);
            } else {
                echo json_encode($this->Employee_model->updateBankAccount($data, $id));
            }
        }

    }

    public function create_bankBranchWithUpdate($data, $id, $newBankID = null)
    {
        $newBranch = $this->input->post('newBranch');
        $branchDet = $this->Employee_model->create_bankBranch($data['bankID'], $newBranch);

        if ($branchDet[0] == 's') {
            $data['branchID'] = $branchDet[1];
            if ($newBankID != null) {
                $returnData = $this->Employee_model->updateBankAccount($data, $id);
                $returnData[2] = $newBankID;
                echo json_encode($returnData);
            } else {
                echo json_encode($this->Employee_model->updateBankAccount($data, $id));
            }

        } else {
            echo json_encode($branchDet);
        }
    }

    public function inactiveBankAccount()
    {
        $deleteID = $this->input->post('deleteID');

        $data = array(
            'isActive' => 0,
            'modifiedPCID' => $this->common_data['current_pc'],
            'modifiedUserID' => $this->common_data['current_userID'],
            'modifiedUserName' => $this->common_data['current_user'],
            'modifiedDateTime' => current_date()
        );

        echo json_encode($this->Employee_model->deleteBankAccount($data, $deleteID));
    }

    public function loadEmpBankAccount()
    {
        $empID = $this->input->post('empID');

        $empAccDet = $this->Employee_model->loadEmpBankAccount($empID);

        echo json_encode($empAccDet);
    }

    public function searchInEmpLoan()
    {
        $keyword = $this->input->get('keyword');
        $emp = $this->Employee_model->searchInEmpLoan($keyword);

        if (!empty($emp)) {
            echo json_encode($emp);
        } else {
            $noData[0] = array(
                'DesDescription' => '',
                'EIdNo' => '',
                'Ename1' => '',
                'Ename2' => '',
                'Ename3' => '',
                'ECode' => '',
                'Match' => 'No records',
            );
            echo json_encode($noData);
        }
    }

    public function save_monthAddition()
    {
        $this->form_validation->set_rules('systemType', 'Type', 'trim|required|date');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $unProcessedEmployees = $this->payrollNotProcessedEmployees();

            if ($unProcessedEmployees[0] == 's') {
                echo json_encode($this->Employee_model->save_monthAddition('MA'));
            } else {
                echo json_encode($unProcessedEmployees);
            }
        }
    }

    public function save_monthlyMaster()
    {
        $doc_type = $this->input->post('doc_type');

        if ($doc_type == 'MA') {
            $this->form_validation->set_rules('systemType', 'Type', 'trim|required');
        }
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');
        $this->form_validation->set_rules('p_group', 'Payroll Group', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        echo json_encode($this->Employee_model->save_monthAddition($doc_type));
    }

    function getCountOfSalaryDeclaredEmployees($isNonPayroll, $payDate)
    {
        $companyID = current_companyID();
        $salaryDeclarationTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
        $empCount = $this->db->query("SELECT COUNT(id) countEmp FROM {$salaryDeclarationTB} WHERE companyID={$companyID}
                                      AND payDate <='{$payDate}'")->row('countEmp');
        return $empCount;
    }

    function payrollNotProcessedEmployees()
    {
        $companyID = current_companyID();
        $isNonPayroll = $this->input->post('payrollType');
        $date_format_policy = date_format_policy();
        $payDate = input_format_date($this->input->post('dateDesc'), $date_format_policy);
        $payYear = date('Y', strtotime($payDate));
        $payMonth = date('m', strtotime($payDate));


        $salaryDeclarationTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
        $headerDetailTB = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';
        $payrollMaster = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';

        $isSalaryDeclared = $this->getCountOfSalaryDeclaredEmployees($isNonPayroll, $payDate);
        if ($isSalaryDeclared == 0) {
            return ['e', 'Salary is not declared for any employee on or before this date.'];
        }

        $processedEmp = $this->db->query("SELECT EIdNo, ECode, Ename2 AS empName
                                          FROM srp_employeesdetails AS empTB
                                          JOIN (
                                              SELECT employeeNo FROM {$salaryDeclarationTB} WHERE companyID={$companyID}
                                              AND payDate<='{$payDate}' GROUP BY employeeNo
                                          ) AS declarationTB ON declarationTB.employeeNo=empTB.EIdNo
                                          JOIN (
                                              SELECT EIdNo AS empID, dischargedDate,
                                              IF( isDischarged != 1, 0,
                                                    CASE
                                                       WHEN DATE_FORMAT('{$payDate}', '%Y-%m-01') <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                       WHEN DATE_FORMAT('{$payDate}', '%Y-%m-01') > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                    END
                                              ) AS isDischargedStatus
                                              FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                          ) AS dischargedStatusTB ON dischargedStatusTB.empID = empTB.EIdNo
                                          WHERE empTB.Erp_companyID={$companyID} AND empConfirmedYN=1 AND empTB.isPayrollEmployee = 1 AND isDischargedStatus != 1
                                          AND  EIdNo NOT IN (
                                              SELECT  empID FROM {$payrollMaster} AS payMaster
                                              JOIN {$headerDetailTB} AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID={$companyID}
                                              WHERE payMaster.companyID={$companyID} AND payrollYear={$payYear} AND payrollMonth={$payMonth}
                                          )")->result_array();

        if (count($processedEmp) == 0) {
            return ['e', 'Payroll has been processed for all the employees on this month.'];
        }

        return ['s'];
    }

    public function save_monthDeduction()
    {
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            /*$date_format_policy = date_format_policy();
            $dtDec = $this->input->post('dateDesc');
            $dateDesc = input_format_date($dtDec, $date_format_policy);
            $payrollType = ($this->input->post('payrollType') == 'Y') ? 2 : 1;

            $this->load->helper('template_paySheet_helper');
            $isPayrollProcessed = isPayrollProcessed($dateDesc, $payrollType);

            if ($isPayrollProcessed['status'] == 'N') {
                echo json_encode($this->Employee_model->save_monthAddition('MD'));
            } else {
                $greaterThanDate = date('Y - F', strtotime($isPayrollProcessed['year'] . '-' . $isPayrollProcessed['month'] . '-01'));
                echo json_encode(array('e', 'Monthly addition date should be  <p> greater than [ ' . $greaterThanDate . ' ] '));
            }*/

            $unProcessedEmployees = $this->payrollNotProcessedEmployees();

            if ($unProcessedEmployees[0] == 's') {
                echo json_encode($this->Employee_model->save_monthAddition('MD'));
            } else {
                echo json_encode($unProcessedEmployees);
            }
        }
    }

    public function load_monthlyAdditionMaster_table()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $isPeriodBase = $this->input->post('isPeriodBase');
        $isNonPayroll = $this->input->post('isNonPayroll');
        $filterType = $this->input->post('filterType');
        $isGroupAccess = getPolicyValues('PAC', 'All');

        $str = ($isPeriodBase == 'Y') ? ', prGroup.description AS payGroup' : '';

        $this->datatables->select("monthlyAdditionsMasterID AS masterID,typeID, monthlyAdditionsCode, masTB.description AS des, dateMA,
            confirmedYN, approvedYN, isProcessed, isNonPayroll, IF(masTB.typeID =0, 'Monthly Addition',typeTB.salaryDescription) AS typeDescription {$str}", false)
            ->from('srp_erp_pay_monthlyadditionsmaster masTB')
            ->join('srp_erp_pay_salarycategories typeTB', 'masTB.typeID=typeTB.salaryCategoryID', 'left')
            ->add_column('status', '$1', 'confirm(confirmedYN)')
            ->add_column('action', '$1', 'load_monthly_addition_action(masterID, "A", monthlyAdditionsCode, isNonPayroll, confirmedYN, isProcessed,typeID)')
            ->edit_column('dateMA', '<span >$1 </span>', 'convert_date_format(dateMA)')
            ->where('masTB.companyID', $companyID)
            ->where('isNonPayroll', $isNonPayroll);

        if ($filterType != '') {
            $this->datatables->where('masTB.typeID', $filterType);
        }

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT addID FROM srp_erp_payrollgroupincharge AS inCharge
                                  JOIN (
                                        SELECT monthlyAdditionsMasterID AS addID, accessGroupID
                                        FROM srp_erp_pay_monthlyadditiondetail
                                        WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                        GROUP BY monthlyAdditionsMasterID, accessGroupID
                                  ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                  WHERE companyID={$companyID} AND empID={$currentEmp}
                                  GROUP BY addID
                                  UNION
                                      SELECT t1.monthlyAdditionsMasterID
                                      FROM srp_erp_pay_monthlyadditionsmaster AS t1
                                      LEFT JOIN srp_erp_pay_monthlyadditiondetail AS t2
                                      ON t2.monthlyAdditionsMasterID=t1.monthlyAdditionsMasterID
                                      WHERE t1.companyID={$companyID} AND t2.monthlyAdditionsMasterID IS NULL
                                      GROUP BY t1.monthlyAdditionsMasterID
                                  ) AS accTB", 'srp_erp_pay_monthlyadditionsmaster.monthlyAdditionsMasterID = accTB.addID');

        }

        if ($isPeriodBase == 'Y') {
            $this->datatables->join('srp_erp_hrperiodgroup prGroup', 'masTB.payrollGroup=prGroup.hrGroupID');
        }
        echo $this->datatables->generate();
    }

    public function load_monthlyDeductionMaster_table()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $isPeriodBase = $this->input->post('isPeriodBase');
        $isNonPayroll = $this->input->post('isNonPayroll');
        $isGroupAccess = getPolicyValues('PAC', 'All');

        $str = ($isPeriodBase == 'Y') ? ', prGroup.description AS payGroup' : '';

        $this->datatables->select("monthlyDeductionMasterID AS masterID, monthlyDeductionCode, dedMas.description AS description,
                   dateMD, confirmedYN, isProcessed, isNonPayroll {$str}", false)
            ->from('srp_erp_pay_monthlydeductionmaster AS dedMas')
            ->add_column('status', '$1', 'confirm(confirmedYN)')
            ->add_column('action', '$1', 'monthlyDeclarationsAction(masterID, "D", monthlyDeductionCode, isNonPayroll, confirmedYN, isProcessed)')
            ->edit_column('dateMD', '<span >$1 </span>', 'convert_date_format(dateMD)')
            ->where('dedMas.companyID', current_companyID())
            ->where('isNonPayroll', $isNonPayroll);
        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT deductionID FROM srp_erp_payrollgroupincharge AS inCharge
                                  JOIN (
                                        SELECT monthlyDeductionMasterID AS deductionID, accessGroupID
                                        FROM srp_erp_pay_monthlydeductiondetail
                                        WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                        GROUP BY monthlyDeductionMasterID, accessGroupID
                                  ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                  WHERE companyID={$companyID} AND empID={$currentEmp}
                                  GROUP BY deductionID
                                  UNION
                                      SELECT t1.monthlyDeductionMasterID
                                      FROM srp_erp_pay_monthlydeductionmaster AS t1
                                      LEFT JOIN srp_erp_pay_monthlydeductiondetail AS t2
                                      ON t2.monthlyDeductionMasterID=t1.monthlyDeductionMasterID
                                      WHERE t1.companyID={$companyID} AND t2.monthlyDeductionMasterID IS NULL
                                      GROUP BY t1.monthlyDeductionMasterID
                                  ) AS accTB", 'dedMas.monthlyDeductionMasterID = accTB.deductionID');

        }

        if ($isPeriodBase == 'Y') {
            $this->datatables->join('srp_erp_hrperiodgroup prGroup', 'dedMas.payrollGroup=prGroup.hrGroupID');
        }

        echo $this->datatables->generate();
    }

    public function save_empMonthlyAddition()
    {

        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $date_format_policy = date_format_policy();
            $masterID = $this->input->post('updateID');
            $empArr = $this->input->post('empHiddenID');
            $dtDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
            $payYear = date('Y', strtotime($dateDesc));
            $payMonth = date('m', strtotime($dateDesc));
            $isPayrollProcessed = null;
            $masterData = $this->Employee_model->edit_monthAddition('MA', $masterID);

            /*$this->load->helper('template_paySheet_helper');
            $isPayrollProcessed = isPayrollProcessed($dateDesc, $payrollType);*/

            $isSalaryDeclared = $this->getCountOfSalaryDeclaredEmployees($masterData['isNonPayroll'], $dateDesc);

            if ($isSalaryDeclared == 0) {
                die(json_encode(['e', 'Salary is not declared for any employee on or before this date.']));
            }

            if (!empty($empArr)) {
                $empArr = join(',', $empArr);
                $isPayrollProcessed = isPayrollProcessedForEmpGroup($empArr, $payYear, $payMonth, $masterData['isNonPayroll']);
            }

            if (empty($isPayrollProcessed)) {
                echo json_encode($this->Employee_model->save_empMonthlyAddition('MA'));
            } else {
                $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                $yearMonth = date('Y - M', strtotime($dtDsc));
                echo json_encode(array('e', 'Payroll already processed on selected <br/> month (' . $yearMonth . ') for following employees <br/>' . $employeesStr));
            }
        }
    }

    public function save_empMonthlyDeduction()
    {
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $date_format_policy = date_format_policy();
            $masterID = $this->input->post('updateID');
            $empArr = $this->input->post('empHiddenID');
            $dtDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
            $payYear = date('Y', strtotime($dateDesc));
            $payMonth = date('m', strtotime($dateDesc));

            $masterData = $this->Employee_model->edit_monthAddition('MD', $masterID);
            /*$payrollType = ($masterData['isNonPayroll'] == 'Y') ? 2 : 1;
            $this->load->helper('template_paySheet_helper');
            $isPayrollProcessed = isPayrollProcessed($dateDesc, $payrollType);

            if ($isPayrollProcessed['status'] == 'N') {
                echo json_encode($this->Employee_model->save_empMonthlyAddition('MD'));
            } else {
                $greaterThanDate = date('Y - F', strtotime($isPayrollProcessed['year'] . '-' . $isPayrollProcessed['month'] . '-01'));
                echo json_encode(array('e', 'Monthly deduction date should be  <p> greater than [ ' . $greaterThanDate . ' ] '));
            }*/

            $isSalaryDeclared = $this->getCountOfSalaryDeclaredEmployees($masterData['isNonPayroll'], $dateDesc);

            if ($isSalaryDeclared == 0) {
                die(json_encode(['e', 'Salary is not declared for any employee on or before this date.']));
            }

            if (!empty($empArr)) {
                $empArr = join(',', $empArr);
                $isPayrollProcessed = isPayrollProcessedForEmpGroup($empArr, $payYear, $payMonth, $masterData['isNonPayroll']);
            }

            if (empty($isPayrollProcessed)) {
                echo json_encode($this->Employee_model->save_empMonthlyAddition('MD'));
            } else {
                $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                $yearMonth = date('Y - M', strtotime($dtDsc));
                echo json_encode(array('e', 'Payroll already processed on selected <br/> month (' . $yearMonth . ') for following employees <br/>' . $employeesStr));
            }
        }
    }

    public function save_employeeAsTemp()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        // $this->form_validation->set_rules('monthlyTypes', 'Category', 'trim|required');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $monthlyAD = $this->input->post('type_m'); // MA | MD
        $empHiddenID = $this->input->post('temp_empHiddenID');
        if (count($empHiddenID) > 0) {

            $date_format_policy = date_format_policy();
            $masterID = $this->input->post('updateID');
            $dtDsc = $this->input->post('dateDesc');
            $empArr = $this->input->post('temp_empHiddenID');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
            $payYear = date('Y', strtotime($dateDesc));
            $payMonth = date('m', strtotime($dateDesc));

            $masterData = $this->Employee_model->edit_monthAddition($monthlyAD, $masterID);

            $this->load->helper('template_paySheet_helper');

            $empArr = join(',', $empArr);
            $isPayrollProcessed = isPayrollProcessedForEmpGroup($empArr, $payYear, $payMonth, $masterData['isNonPayroll']);

   
            if (empty($isPayrollProcessed)) {
                if (!empty($this->input->post('empHiddenID'))) {
                    $isProcessSuccess = $this->Employee_model->save_empMonthlyAddition($monthlyAD);
                } else {
                    $isProcessSuccess[0] = 's';
                }

                if ($isProcessSuccess[0] == 's') {
                    echo json_encode($this->Employee_model->save_employeeAsTemp());
                } else {
                    echo json_encode($isProcessSuccess);
                }

            } else {
                $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                echo json_encode(array('e', 'Payroll already processed on selected <br/> month (' . $dtDsc . ') for following employees <br/>' . $employeesStr));
            }

        } else {
            echo json_encode(array('e', 'There are no one selected to proceed'));
        }
    }

    public function monthlyAddDeduction_excelUpload()
    {
        $masterID = $this->input->post('masterID');
        $type_m = $this->input->post('type_m');
        $docDate = $this->input->post('docDate');
        $date_format_policy = date_format_policy();
        $docDate = input_format_date($docDate, $date_format_policy);
        $lastDateOfMonth = date('Y-m-t', strtotime($docDate));;
        $year = date('Y', strtotime($docDate));
        $month = date('m', strtotime($docDate));
        $companyID = current_companyID();
        $i = 0;
        $m = 0;
        $current_date = current_date();


        if (empty($masterID)) {
            die(json_encode(['e', 'Id field is required']));
        }

        if ($type_m == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionsMasterID';
        } elseif ($type_m == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionMasterID';
        }

        if (isset($_FILES['excelUpload_file']['size']) && $_FILES['excelUpload_file']['size'] > 0) {
            $type = explode(".", $_FILES['excelUpload_file']['name']);
            if (strtolower(end($type)) != 'csv') {
                die(json_encode(['e', 'File type is not csv - ', $type]));
            }

            //Get all employees in the company
            $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE Erp_companyID={$companyID}")->result_array();
            $emp_list = array_column($empArr, 'ECode');

            $filename = $_FILES["excelUpload_file"]["tmp_name"];
            $file = fopen($filename, "r");
            $dataExcel = [];
            $unMatchRecords = [];

            while (($getData = fgetcsv($file, 10000, ",")) !== FALSE) {
                if ($i > 0) {
                    $excelEmpCode = trim($getData[0] ?? '');
                    $description = trim($getData[2] ?? '');
                    $rate = trim($getData[3] ?? '');
                    $unit = trim($getData[4] ?? '');
                    $amount = $rate * $unit;
                    $amount = str_replace(',', '', $amount);

                    if (!empty($excelEmpCode) && ($amount > 0)) {

                        $keys = array_keys($emp_list, $excelEmpCode);
                        $thisEmpData = array_map(function ($k) use ($empArr) {
                            return $empArr[$k];
                        }, $keys);

                        if (!empty($thisEmpData[0])) {
                            $dataExcel[$m]['empID'] = $thisEmpData[0]['EIdNo'];
                            $dataExcel[$m][$masterColumn] = $masterID;
                            $dataExcel[$m]['transactionAmount'] = $amount;
                            $dataExcel[$m]['payRate'] = $rate;
                            $dataExcel[$m]['payUnit'] = $unit;
                            $dataExcel[$m]['description'] = $description;
                            $dataExcel[$m]['empCodeName'] = trim($excelEmpCode . ' - ' . trim($getData[1] ?? ''));

                            $m++;
                        } else {
                            $unMatchRecords[] = ' &nbsp;&nbsp;- ' . $excelEmpCode;
                        }
                    }
                }
                $i++;
            }
            fclose($file);

            if (!empty($unMatchRecords)) {
                $msg = '<strong>Following Employee codes does not match with the database.</strong><br/>';
                $msg .= implode('<br/>', $unMatchRecords);
                die(json_encode(['m', $msg]));
            }


            if (!empty($dataExcel)) {
                $alreadyPayrollProcessed = [];
                $dischargedList = [];
                $notMatchRecords = [];
                $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
                $com_currency = $this->common_data['company_data']['company_default_currency'];
                $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
                $groupEmpBy = array_group_by($dataExcel, 'empID');

                $data = [];
                $k = 0;
                $canPull = true;
                foreach ($groupEmpBy as $key => $row) {
                    $empID = $key;

                    $empData = $this->db->query("SELECT EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces,
                                                IF(ISNULL(empID_pay), 'N', 'Y') AS isPayrollProcessed, isDischargedStatus, groupID
                                                FROM srp_employeesdetails AS empTB
                                                JOIN srp_designation ON empTB.EmpDesignationId = srp_designation.DesignationID
                                                JOIN srp_erp_currencymaster AS cur ON cur.currencyID = empTB.payCurrencyID
                                                JOIN srp_erp_pay_salarydeclartion AS salaryDec ON empTB.EIdNo = salaryDec.employeeNo
                                                JOIN (
                                                    SELECT EIdNo AS empID, dischargedDate,
                                                    IF( isDischarged != 1, 0,
                                                         CASE
                                                             WHEN '{$lastDateOfMonth}' <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                             WHEN '{$lastDateOfMonth}' > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                         END
                                                    )AS isDischargedStatus FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                                ) AS dischargedStatusTB ON dischargedStatusTB.empID = empTB.EIdNo
                                                LEFT JOIN (
                                                    SELECT empID AS empID_pay FROM srp_erp_payrollmaster AS payMaster
                                                    JOIN srp_erp_payrollheaderdetails AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID
                                                    WHERE payMaster.companyID = {$companyID} AND payDet.companyID={$companyID} AND payrollYear={$year}
                                                    AND payrollMonth={$month}
                                                ) AS thisPayTB ON thisPayTB.empID_pay = empTB.EIdNo
                                                LEFT JOIN(
                                                  SELECT groupID, employeeID FROM srp_erp_payrollgroupemployees
                                                  WHERE employeeID={$empID} AND companyID={$companyID}
                                                ) AS accTb ON accTb.employeeID = empTB.EIdNo
                                                WHERE empTB.Erp_companyID = '{$companyID}' AND empTB.isPayrollEmployee = 1 AND salaryDec.confirmedYN = 1
                                                AND salaryDec.payDate <= '{$lastDateOfMonth}' AND empTB.EIdNo={$empID}
                                                GROUP BY salaryDec.employeeNo")->row_array();


                    if (!empty($empData)) {

                        if ($empData['isPayrollProcessed'] == 'Y') {
                            /*** If payroll already processed ***/
                            $alreadyPayrollProcessed[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }
                        if ($empData['isDischargedStatus'] == '1') {
                            /*** If employee discharged ***/
                            $dischargedList[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }

                        if ($canPull == true) {
                            $trCurrencyID = $empData['currencyID'];
                            $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                            $com_exchangeRate = $com_exchangeRateData['conversion'];

                            foreach ($row as $keyEmp => $rowEmp) {
                                $data[$k]['empID'] = $empID;
                                $data[$k]['accessGroupID'] = $empData['groupID'];
                                $data[$k][$masterColumn] = $masterID;

                                $trAmount = round($rowEmp['transactionAmount'], $empData['DecimalPlaces']);
                                $localAmount = ($trAmount / $com_exchangeRate);

                                $data[$k]['transactionAmount'] = $trAmount;
                                $data[$k]['transactionCurrencyID'] = $trCurrencyID;
                                $data[$k]['transactionCurrency'] = $empData['CurrencyCode'];
                                $data[$k]['transactionExchangeRate'] = 1;
                                $data[$k]['transactionCurrencyDecimalPlaces'] = $empData['DecimalPlaces'];
                                $data[$k]['payRate'] = $rowEmp['payRate'];
                                $data[$k]['payUnit'] = $rowEmp['payUnit'];
                                $data[$k]['description'] = $rowEmp['description'];

                                $data[$k]['companyLocalCurrencyID'] = $com_currencyID;
                                $data[$k]['companyLocalCurrency'] = $com_currency;
                                $data[$k]['companyLocalExchangeRate'] = $com_exchangeRate;
                                $data[$k]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                                $data[$k]['companyLocalAmount'] = round($localAmount, $com_currDPlace);

                                $data[$k]['companyID'] = $companyID;
                                $data[$k]['companyCode'] = $this->common_data['company_data']['company_code'];
                                $data[$k]['createdPCID'] = $this->common_data['current_pc'];
                                $data[$k]['createdUserID'] = $this->common_data['current_userID'];
                                $data[$k]['createdUserName'] = $this->common_data['current_user'];
                                $data[$k]['createdUserGroup'] = $this->common_data['user_group'];
                                $data[$k]['createdDateTime'] = $current_date;

                                $k++;
                            }
                        }

                    } else {
                        $canPull = false;
                        $notMatchRecords[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'] . ' - ' . $empID;
                    }


                }

                if ($canPull == false) {
                    $msg = '';
                    if (!empty($alreadyPayrollProcessed)) {
                        $msg .= '<strong>Payroll already processed for following employees</strong><br/>';
                        $msg .= implode('<br/>', $alreadyPayrollProcessed);
                    }
                    if (!empty($dischargedList)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        $msg .= '<strong>Following employees already discharged</strong><br/>';
                        $msg .= implode('<br/>', $dischargedList);
                    }
                    if (!empty($notMatchRecords)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        //$msg .= '<strong>Following record are not match with the database</strong><br/>(Please verify the salary declaration)<br/>';
                        $msg .= '<strong>Please verify following records with salary declarations</strong><br/>';
                        $msg .= implode('<br/>', $notMatchRecords);
                    }

                    die(json_encode(['m', $msg]));
                }


                if (!empty($data)) {

                    $this->db->trans_start();
                    $this->db->insert_batch($tableName, $data);
                    $this->db->trans_complete();
                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        die(json_encode(['e', 'Error in process']));
                    } else {
                        $this->db->trans_commit();
                        die(json_encode(['s', 'Successfully uploaded']));
                    }

                }
            } else {
                die(json_encode(['e', 'File is empty']));
            }

        } else {
            echo json_encode(['e', 'Please Select CSV File .']);
        }
    }

    function download_csv()
    {

        $segment = $this->input->post('segment');
        $segmentFilter = '';

        if (!empty($segment)) {
            $segmentFilter = implode(',', $segment);
            $segmentFilter = 'AND segmentID IN (' . $segmentFilter . ')';
        }
        $companyID = current_companyID();
        $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                    AND isPayrollEmployee =1 AND isDischarged=0 AND empConfirmedYN=1 {$segmentFilter}")->result_array();
        $csv_data = [
            [
                0 => 'Code',
                1 => 'Name',
                2 => 'Description',
                3 => 'Rate',
                4 => 'Units'
            ]
        ];

        foreach ($empArr as $key => $row) {
            $csv_data[$key + 1][1] = $row['ECode'];
            $csv_data[$key + 1][2] = $row['Ename2'];
            $csv_data[$key + 1][3] = '';
            $csv_data[$key + 1][4] = '0';
            $csv_data[$key + 1][5] = '0';
        }

        header("Content-Type: text/csv");
        header("Content-Disposition: attachment; filename=file.csv");


        $output = fopen("php://output", "w");
        foreach ($csv_data as $row) {
            fputcsv($output, $row);
        }
        fclose($output);
    }

    function download_csv_old()
    {

        $segment = $this->input->post('segment');
        $segmentFilter = '';

        if (!empty($segment)) {
            $segmentFilter = implode(',', $segment);
            $segmentFilter = 'AND segmentID IN (' . $segmentFilter . ')';
        }
        $companyID = current_companyID();
        $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                    AND isPayrollEmployee =1 AND isDischarged=0 AND empConfirmedYN=1 {$segmentFilter}")->result_array();
        $csv_data = [
            [
                0 => 'ID',
                1 => 'Code',
                2 => 'Name',
                3 => 'Amount',
            ]
        ];

        foreach ($empArr as $key => $row) {
            $csv_data[$key + 1][0] = $row['EIdNo'];
            $csv_data[$key + 1][1] = $row['ECode'];
            $csv_data[$key + 1][2] = $row['Ename2'];
            $csv_data[$key + 1][3] = '0';
        }

        header("Content-Type: text/csv");
        header("Content-Disposition: attachment; filename=file.csv");


        $output = fopen("php://output", "w");
        foreach ($csv_data as $row) {
            fputcsv($output, $row);
        }
        fclose($output);
    }

    public function monthlyAddDeduction_excelUpload_old()
    {
        $masterID = $this->input->post('masterID');
        $type_m = $this->input->post('type_m');
        $docDate = $this->input->post('docDate');
        $date_format_policy = date_format_policy();
        $docDate = input_format_date($docDate, $date_format_policy);
        $lastDateOfMonth = date('Y-m-t', strtotime($docDate));;
        $year = date('Y', strtotime($docDate));
        $month = date('m', strtotime($docDate));
        $companyID = current_companyID();
        $i = 0;
        $m = 0;
        $current_date = current_date();


        if (empty($masterID)) {
            die(json_encode(['e', 'Id field is required']));
        }

        if ($type_m == 'MA') {
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterColumn = 'monthlyAdditionsMasterID';
        } elseif ($type_m == 'MD') {
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterColumn = 'monthlyDeductionMasterID';
        }

        if (isset($_FILES['excelUpload_file']['size']) && $_FILES['excelUpload_file']['size'] > 0) {
            $type = explode(".", $_FILES['excelUpload_file']['name']);
            if (strtolower(end($type)) != 'csv') {
                die(json_encode(['e', 'File type is not csv - ', $type]));
            }

            $filename = $_FILES["excelUpload_file"]["tmp_name"];
            $file = fopen($filename, "r");
            $dataExcel = [];
            while (($getData = fgetcsv($file, 10000, ",")) !== FALSE) {
                if ($i > 0) {
                    $excelEmpID = trim($getData[0] ?? '');
                    $amount = trim($getData[3] ?? '');
                   
                    if (!empty($excelEmpID) && ($amount > 0)) {
                        $dataExcel[$m]['empID'] = $excelEmpID;
                        $dataExcel[$m][$masterColumn] = $masterID;
                        $dataExcel[$m]['transactionAmount'] = $amount;
                        $dataExcel[$m]['empCodeName'] = trim($getData[1] ?? '') . ' | ' . trim($getData[2] ?? '');
                        $m++;
                    }
                }
                $i++;
            }
            fclose($file);

            if (!empty($dataExcel)) {
                $alreadyPayrollProcessed = [];
                $dischargedList = [];
                $notMatchRecords = [];
                $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
                $com_currency = $this->common_data['company_data']['company_default_currency'];
                $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
                $groupEmpBy = array_group_by($dataExcel, 'empID');

                $data = [];
                $k = 0;
                $canPull = true;
                foreach ($groupEmpBy as $key => $row) {
                    $empID = $key;


                    $empData = $this->db->query("SELECT EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces,
                                                IF(ISNULL(empID_pay), 'N', 'Y') AS isPayrollProcessed, isDischargedStatus, groupID
                                                FROM srp_employeesdetails AS empTB
                                                JOIN srp_designation ON empTB.EmpDesignationId = srp_designation.DesignationID
                                                JOIN srp_erp_currencymaster AS cur ON cur.currencyID = empTB.payCurrencyID
                                                JOIN srp_erp_pay_salarydeclartion AS salaryDec ON empTB.EIdNo = salaryDec.employeeNo
                                                JOIN (
                                                    SELECT EIdNo AS empID, dischargedDate,
                                                    IF( isDischarged != 1, 0,
                                                         CASE
                                                             WHEN '{$lastDateOfMonth}' <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                             WHEN '{$lastDateOfMonth}' > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                         END
                                                    )AS isDischargedStatus FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                                ) AS dischargedStatusTB ON dischargedStatusTB.empID = empTB.EIdNo
                                                LEFT JOIN (
                                                    SELECT empID AS empID_pay FROM srp_erp_payrollmaster AS payMaster
                                                    JOIN srp_erp_payrollheaderdetails AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID
                                                    WHERE payMaster.companyID = {$companyID} AND payDet.companyID={$companyID} AND payrollYear={$year}
                                                    AND payrollMonth={$month}
                                                ) AS thisPayTB ON thisPayTB.empID_pay = empTB.EIdNo
                                                LEFT JOIN(
                                                  SELECT groupID, employeeID FROM srp_erp_payrollgroupemployees
                                                  WHERE employeeID={$empID} AND companyID={$companyID}
                                                ) AS accTb ON accTb.employeeID = empTB.EIdNo
                                                WHERE empTB.Erp_companyID = '{$companyID}' AND empTB.isPayrollEmployee = 1 AND salaryDec.confirmedYN = 1
                                                AND salaryDec.payDate <= '{$lastDateOfMonth}' AND empTB.EIdNo={$empID}
                                                GROUP BY salaryDec.employeeNo")->row_array();


                    if (!empty($empData)) {

                        if ($empData['isPayrollProcessed'] == 'Y') {
                            /*** If payroll already processed ***/
                            $alreadyPayrollProcessed[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }
                        if ($empData['isDischargedStatus'] == '1') {
                            /*** If employee discharged ***/
                            $dischargedList[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }

                        if ($canPull == true) {
                            $trCurrencyID = $empData['currencyID'];
                            $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                            $com_exchangeRate = $com_exchangeRateData['conversion'];

                            foreach ($row as $keyEmp => $rowEmp) {
                                $data[$k]['empID'] = $empID;
                                $data[$k]['accessGroupID'] = $empData['groupID'];
                                $data[$k][$masterColumn] = $masterID;

                                $trAmount = round($rowEmp['transactionAmount'], $empData['DecimalPlaces']);
                                $localAmount = ($trAmount / $com_exchangeRate);

                                $data[$k]['transactionAmount'] = $trAmount;
                                $data[$k]['transactionCurrencyID'] = $trCurrencyID;
                                $data[$k]['transactionCurrency'] = $empData['CurrencyCode'];
                                $data[$k]['transactionExchangeRate'] = 1;
                                $data[$k]['transactionCurrencyDecimalPlaces'] = $empData['DecimalPlaces'];


                                $data[$k]['companyLocalCurrencyID'] = $com_currencyID;
                                $data[$k]['companyLocalCurrency'] = $com_currency;
                                $data[$k]['companyLocalExchangeRate'] = $com_exchangeRate;
                                $data[$k]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                                $data[$k]['companyLocalAmount'] = round($localAmount, $com_currDPlace);

                                $data[$k]['companyID'] = $companyID;
                                $data[$k]['companyCode'] = $this->common_data['company_data']['company_code'];
                                $data[$k]['createdPCID'] = $this->common_data['current_pc'];
                                $data[$k]['createdUserID'] = $this->common_data['current_userID'];
                                $data[$k]['createdUserName'] = $this->common_data['current_user'];
                                $data[$k]['createdUserGroup'] = $this->common_data['user_group'];
                                $data[$k]['createdDateTime'] = $current_date;

                                $k++;
                            }
                        }

                    } else {
                        $canPull = false;
                        $notMatchRecords[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'] . ' - ' . $empID;
                    }


                }

                if ($canPull == false) {
                    $msg = '';
                    if (!empty($alreadyPayrollProcessed)) {
                        $msg .= '<strong>Payroll already processed for following employees</strong><br/>';
                        $msg .= implode('<br/>', $alreadyPayrollProcessed);
                    }
                    if (!empty($dischargedList)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        $msg .= '<strong>Following employees already discharged</strong><br/>';
                        $msg .= implode('<br/>', $dischargedList);
                    }
                    if (!empty($notMatchRecords)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        //$msg .= '<strong>Following record are not match with the database</strong><br/>(Please verify the salary declaration)<br/>';
                        $msg .= '<strong>Please verify following records with salary declarations</strong><br/>';
                        $msg .= implode('<br/>', $notMatchRecords);
                    }

                    die(json_encode(['m', $msg]));
                }


                if (!empty($data)) {

                    $this->db->trans_start();
                    $this->db->insert_batch($tableName, $data);
                    $this->db->trans_complete();
                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        die(json_encode(['e', 'Error in process']));
                    } else {
                        $this->db->trans_commit();
                        die(json_encode(['s', 'Successfully uploaded']));
                    }

                }
            } else {
                die(json_encode(['e', 'File is empty']));
            }

        } else {
            echo json_encode(['e', 'Please Select CSV File .']);
        }
    }

    public function edit_monthAddition()
    {
        echo json_encode($this->Employee_model->edit_monthAddition('MA'));
    }

    public function edit_monthDeduction()
    {
        echo json_encode($this->Employee_model->edit_monthAddition('MD'));
    }

    public function delete_monthAddition()
    {
        echo json_encode($this->Employee_model->delete_monthAddition('Addition'));
    }

    public function delete_monthDeduction()
    {
        echo json_encode($this->Employee_model->delete_monthAddition('Deduction'));
    }

    public function load_empMonthAddition()
    {
        /*echo json_encode($this->Employee_model->load_empMonthAddition('MA'));*/
        $monthType = $this->input->get('addDeduction');
        $id = $this->input->get('editID');
        if ($monthType == 'MA') {
            $declarationType = 'A';
            $tableName = 'srp_erp_pay_monthlyadditiondetail';
            $masterID = 'monthlyAdditionsMasterID';
        } elseif ($monthType == 'MD') {
            $declarationType = 'D';
            $tableName = 'srp_erp_pay_monthlydeductiondetail';
            $masterID = 'monthlyDeductionMasterID';
        }

        $con = " IFNULL(Ename2, '') ";

        $this->datatables->select($tableName . '.*, EIdNo, ECode, CONCAT(' . $con . ') AS empName, companyLocalAmount, IFNULL(declarationID, 0) AS declarationID, IFNULL(GLSecondaryCode, 0) AS GLSecondaryCode, companyLocalCurrencyDecimalPlaces, transactionCurrency, transactionAmount, transactionCurrencyDecimalPlaces, description, companyLocalExchangeRate, companyLocalCurrencyDecimalPlaces')
            ->from($tableName)
            ->join('srp_employeesdetails AS empTB', $tableName . '.empID=empTB.EIdNo')
            ->join('srp_erp_pay_monthlydeclarationstypes AS decType', 'decType.monthlyDeclarationID=' . $tableName . '.declarationID', 'left')
            ->join('srp_erp_chartofaccounts AS chartAcc', 'chartAcc.GLAutoID=' . $tableName . '.GLCode', 'left')
            ->add_column('description', '$1', 'des(description)')
            ->add_column('amount', '$1', 'monthlyAmount(transactionAmount, transactionCurrencyDecimalPlaces, EIdNo, companyLocalExchangeRate)')
            ->add_column('localAmount', '$1', 'localAmount(companyLocalAmount, companyLocalCurrencyDecimalPlaces)')
            ->add_column('exRate', '$1', 'exRate(companyLocalExchangeRate)')
            ->add_column('action', '$1', 'action(EIdNo, transactionCurrency,transactionCurrencyDecimalPlaces)')
            ->where($masterID, $id);

        echo $this->datatables->generate();
    }

    public function load_empMonthDeduction()
    {
        echo json_encode($this->Employee_model->load_empMonthAddition('MD'));
    }

    public function referBack_monthAddition()
    {
        echo json_encode($this->Employee_model->referBack_monthAddition());
    }

    public function amountConversion()
    {
        $amount = $this->input->post('amount');
        $empID = $this->input->post('empID');
        $com_currency = $this->common_data['company_data']['company_default_currency'];
        $com_currencyDPlace = $this->common_data['company_data']['company_default_decimal'];
        $empCurrencyCode = get_employee_currency($empID, 'c_code');

        $tr_amount = (!empty($amount)) ? str_replace(',', '', $amount) : 0;
        $localCon = currency_conversion($empCurrencyCode, $com_currency, $tr_amount);
        $localAmount = ($localCon['conversion'] > 0) ? round(($tr_amount / $localCon['conversion']), 3) : round($tr_amount, 3);
        $returnAm = round($localAmount, $com_currencyDPlace);

        echo json_encode(array($returnAm, round($localCon['conversion'], 6)));
    }

    public function bankBranches()
    {
        echo json_encode($this->Employee_model->bankBranches());
    }

    public function monthlyAD_print()
    {
        $type = $this->uri->segment(3);
        $id = $this->uri->segment(4);

        $masterData = $this->Employee_model->edit_monthAddition($type, $id);

        if ($masterData['payrollGroup'] > 0) {
            $masterData['payrollGroupDes'] = $this->db->get_where('srp_erp_hrperiodgroup', ['hrGroupID' => $masterData['payrollGroup']])->row('description');
        }

        $data['masterData'] = $masterData;
        $data['type'] = $type;

        $isVariablePay = 'N';
        if ($type == 'MA') {
            $isVariablePay = ($masterData['typeID'] == 0) ? 'N' : 'Y';
        }

        if ($isVariablePay == 'N') {
            $data['details'] = $this->Employee_model->empMonthAddition_printData($type, $id);
            $html = $this->load->view('system/hrm/print/monthlyAD_print', $data, true);
        } else { /*If variable Pay*/
            $data['details'] = $this->db->query("SELECT ECode, Ename2 AS empName, transactionCurrency, noOfUnits,
                                                transactionAmount, transactionCurrencyDecimalPlaces dPlace,
                                                declarationAmount
                                                FROM srp_erp_pay_monthlyadditiondetail detTB
                                                JOIN srp_employeesdetails empTB ON detTB.empID=empTB.EIdNo
                                                WHERE monthlyAdditionsMasterID = {$id}")->result_array();
            $html = $this->load->view('system/hrm/print/monthlyAD_variable_pay_print', $data, true);
        }

        $this->load->library('pdf');
        $this->pdf->printed($html, 'A4', $data['masterData']['confirmedYN']);
    }

    public function removeAll_emp()
    {
        echo json_encode($this->Employee_model->removeAll_emp());
    }

    public function removeSingle_emp()
    {
        $monthlyAD = $this->input->post('type_m'); // MA | MD
        $masterID = $this->input->post('updateID');
        $updateCode = $this->input->post('updateCode');
        $masterData = $this->Employee_model->edit_monthAddition($monthlyAD, $masterID);

        if ($masterData['isProcessed'] == 1) {
            exit(json_encode(['e', $updateCode . ' is already processed you can not make changes on this.']));
        }

        if ($masterData['confirmedYN'] == 1) {
            exit(json_encode(['e', $updateCode . ' is already confirmed you can not make changes on this.']));
        }

        echo json_encode($this->Employee_model->removeSingle_emp());

    }
    public function saveReason()
    {
        $this->form_validation->set_rules('description[]', 'Reason', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveReason());
        }
    }

    public function fetch_leaveTypes()
    {
        $this->datatables->select('leaveTypeID AS ID , description, attachmentRequired, isAnnualLeave, isPaidLeave, isPlanApplicable,reasonApplicableYN, isSickLeave, isExist, sortOrder,isShortLeave,finalSettlementYN,
               shortLeaveMaxHours, shortLeaveMaxMins, typeConfirmed, isPlanApplicable AS planAppStr,reasonApplicableYN AS reasonAppStr, isSickLeave AS sickLeaveStr',
            false)
            ->from('srp_erp_leavetype')
            ->join(' (SELECT leaveTypeID AS isExist FROM srp_erp_leavegroupdetails  GROUP BY leaveTypeID) AS t1', 't1.isExist=srp_erp_leavetype.leaveTypeID', 'left')
            ->add_column('action', '$1', 'load_leave_master_action(ID, description, isExist, isPaidLeave, isAnnualLeave, attachmentRequired, isPlanApplicable,finalSettlementYN, reasonApplicableYN, isSickLeave,isShortLeave,shortLeaveMaxHours,shortLeaveMaxMins)')
            ->add_column('sortOrderStr', '<div align="center">$1</div>', 'sortOrder')
            ->where('companyID', current_companyID());
        echo $this->datatables->generate();
    }

    public function save_leaveTypes()
    {
        $this->form_validation->set_rules('leaveDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('attachmentRequired', 'Attachment', 'trim|required');
        /*if($this->input->post('isShortLeave')==1){
            $this->form_validation->set_rules('shortLeaveMaxMins', 'Short Leave Hours Minuites', 'trim|required');
            $this->form_validation->set_rules('shortLeaveMaxHours', 'Short Leave Hours Minuites', 'trim|required');
        }*/


        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_leaveTypes());
        }
    }

    public function update_leaveTypes()
    {
        $this->form_validation->set_rules('editID', 'Leave ID', 'trim|required');
        $this->form_validation->set_rules('leaveDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('attachmentRequired', 'Attachment', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_leaveTypes());
        }
    }

    public function save_sickLeaveCategory()
    {
        $this->form_validation->set_rules('leaveEditID', 'Leave ID', 'trim|required');
        $this->form_validation->set_rules('salaryCategoryID', 'Salary category', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $leaveID = $this->input->post('leaveEditID');
        $isNonPayroll = $this->input->post('isNonPayroll');
        $salaryCategoryID = $this->input->post('salaryCategoryID');
//load->view

        $data = array(
            'salaryCategoryID' => $salaryCategoryID,
        );

        $id = $this->db->query("SELECT id FROM srp_erp_sickleavesetup WHERE companyID={$companyID} AND
                                leaveTypeID={$leaveID} AND isNonPayroll='{$isNonPayroll}'")->row('id');

        if (!empty($id)) {

            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedDateTime'] = current_date();
            $data['modifiedUserName'] = current_employee();

            $where = [
                'companyID' => $companyID,
                'id' => $id
            ];

            $this->db->where($where)->update('srp_erp_sickleavesetup', $data);
        } else {

            $data['leaveTypeID'] = $leaveID;
            $data['isNonPayroll'] = $isNonPayroll;
            $data['companyID'] = $companyID;
            $data['companyCode'] = current_companyCode();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_employee();
            $data['createdDateTime'] = current_date();

            $this->db->insert('srp_erp_sickleavesetup', $data);
        }


        echo json_encode(['s', 'Salary category updated successfully.']);
    }

    public function save_sickLeaveSetup()
    {
        $this->form_validation->set_rules('sortOrder', 'Short order', 'trim|required');
        $this->form_validation->set_rules('leaveEditID', 'Leave ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $leaveID = $this->input->post('leaveEditID');
        $sortOrder = $this->input->post('sortOrder');
        $isConfirmed = $this->input->post('isConfirmed');

        if ($sortOrder < 1) {
            die(json_encode(['e', 'Sort order is not valid.']));
        }

        $validateSortOrder = $this->db->query("SELECT leaveTypeID FROM srp_erp_leavetype WHERE companyID={$companyID}
                                               AND sortOrder={$sortOrder} AND isSickLeave=1")->row('leaveTypeID');

        if (!empty($validateSortOrder)) {
            if ($validateSortOrder != $leaveID) {
                die(json_encode(['e', 'Sort order is not valid.']));
            }
        }

        if ($isConfirmed == 1) {
            $isNonSalaryProcess = getPolicyValues('NSP', 'All');
            $result = $this->db->query("SELECT salaryCategoryID, formulaString, isNonPayroll FROM srp_erp_sickleavesetup
                                        WHERE companyID={$companyID} AND leaveTypeID={$leaveID}")->result_array();

            if ($isNonSalaryProcess == 1 && count($result) != 2) {
                die(json_encode(['e', 'Please configure the sick leave setup for both Payroll and Non payroll.<br/>And than confirm the leave']));
            }

            if (!empty($result)) {
                $errMsg = '';
                $type = '';
                foreach ($result as $row) {

                    if ($isNonSalaryProcess == 1) {
                        $type = ($row['isNonPayroll'] == 'N') ? 'for payroll' : 'for non-payroll';
                    }

                    if (trim($row['salaryCategoryID'] ?? '') == '') {
                        $errMsg .= 'Salary category is not set ' . $type . ' <br/>';
                    }

                    if (trim($row['formulaString'] ?? '') == '') {
                        $errMsg .= 'Formula is not set ' . $type . ' <br/>';
                    }
                }

                if ($errMsg != '') {
                    die(json_encode(['e', $errMsg]));
                }
            } else {
                die(json_encode(['e', 'Please configure the sick leave setup.<br/>And confirm the leave']));
            }

        }


        $data['sortOrder'] = $sortOrder;
        $data['typeConfirmed'] = $isConfirmed;
        $data['modifiedPCID'] = current_pc();
        $data['modifiedUserID'] = current_userID();
        $data['modifiedDateTime'] = current_date();
        $data['modifiedUserName'] = current_employee();

        $where = [
            'companyID' => $companyID,
            'leaveTypeID' => $leaveID
        ];

        $this->db->where($where)->update('srp_erp_leavetype', $data);


        echo json_encode(['s', 'Sick leave setup updated successfully.']);
    }

    public function save_sickLeaveFormula()
    {
        $companyID = current_companyID();
        $formulaString = trim($this->input->post('formulaString') ?? '');
        $leaveID = $this->input->post('payGroupID');
        $salaryCategories = $this->input->post('salaryCategoryContainer');
        $salaryCategories = (trim($salaryCategories) == '') ? null : $salaryCategories;

        $postData = explode('|', $leaveID);
        $leaveID = $postData[0];
        $isNonPayroll = $postData[1];

        $data = array(
            'formulaString' => $formulaString,
            'salaryCategories' => $salaryCategories,
        );

        $masterData = $this->db->query("SELECT id, typeConfirmed FROM srp_erp_leavetype AS lType
                                        LEFT JOIN (
                                          SELECT id, leaveTypeID FROM srp_erp_sickleavesetup WHERE leaveTypeID={$leaveID} AND
                                          isNonPayroll='{$isNonPayroll}' AND companyID={$companyID}
                                        ) AS setupTB ON lType.leaveTypeID=setupTB.leaveTypeID
                                        WHERE lType.companyID={$companyID} AND lType.leaveTypeID={$leaveID} ")->row_array();

        if ($masterData['typeConfirmed'] == 1 && $formulaString == '') {
            die(json_encode(['e', 'This leave type is confirmed.<br/>You can not save the formula as blank']));
        }

        if (!empty($masterData['id'])) {

            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedDateTime'] = current_date();
            $data['modifiedUserName'] = current_employee();

            $where = [
                'companyID' => $companyID,
                'leaveTypeID' => $leaveID
            ];

            $this->db->where($where)->update('srp_erp_sickleavesetup', $data);
        } else {

            $data['leaveTypeID'] = $leaveID;
            $data['isNonPayroll'] = $isNonPayroll;
            $data['companyID'] = $companyID;
            $data['companyCode'] = current_companyCode();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_employee();
            $data['createdDateTime'] = current_date();

            $this->db->insert('srp_erp_sickleavesetup', $data);
        }

        echo json_encode(['s', 'Formula updated successfully.']);
    }

    public function delete_leaveTypes()
    {
        $this->form_validation->set_rules('deleteID', 'Leave ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_leaveTypes());
        }
    }

    public function load_empLeaveView()
    {
        $data['empID'] = $this->input->post('empID');
        $data['leaves'] = $this->Employee_model->emp_leaves();

        $this->load->view('system\hrm\load_empLeaveView', $data);
    }

    public function save_empLeaveEntitle()
    {
        $this->form_validation->set_rules('leaveType[]', 'Leave Type', 'trim|required|numeric');
        $this->form_validation->set_rules('leave_days[]', 'Days', 'trim|required|numeric');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empLeaveEntitle());
        }
    }

    public function update_empLeaveEntitle()
    {
        $this->form_validation->set_rules('leaveType_e', 'Leave Type', 'trim|required|numeric');
        $this->form_validation->set_rules('leave_days_e', 'Days', 'trim|required|numeric');
        $this->form_validation->set_rules('editID', 'Edit ID', 'trim|required|numeric');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_empLeaveEntitle());
        }
    }

    public function delete_empLeaveEntitle()
    {
        $this->form_validation->set_rules('deleteID', 'Delete ID', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empLeaveEntitle());
        }
    }

    public function employeeData()
    {
        echo json_encode($this->Employee_model->employeeData());
    }

    public function employeeLeaveSummery()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        /*      $policy = $this->db->query("select isMonthly from `srp_erp_leavegroup` WHERE companyID={$companyID}
       AND leaveGroupID=(SELECT leaveGroupID FROM `srp_employeesdetails` WHERE EidNo = {$empID})")->row_array();*/
        $_POST['policyMasterID'] = $this->input->post('policyMasterID');
        echo json_encode($this->Employee_model->employeeLeaveSummery());
    }

    public function save_employeeLeave()
    {
        $this->form_validation->set_rules('leaveType', 'Leave Type', 'trim|required|numeric');
        $this->form_validation->set_rules('startDate', 'Start Date', 'trim|required|date');
        $this->form_validation->set_rules('endDate', 'End Date', 'trim|required|date');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required|numeric');
        //$this->form_validation->set_rules('comment', 'Comment', 'trim');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $endDate = $this->input->post('endDate');
            $isPayrollProcessed = isPayrollProcessed($endDate);

            if ($isPayrollProcessed['status'] == 'N') {
                echo json_encode($this->Employee_model->save_employeeLeave());
            } else {
                $greaterThanDate = date('Y - F', strtotime($isPayrollProcessed['year'] . '-' . $isPayrollProcessed['month'] . '-01'));
                echo json_encode(array('e', 'Leave date should be  <p> greater than [ ' . $greaterThanDate . ' ] '));
            }
        }
    }

    function get_covering_employee_list()
    {
        $empID = $this->input->post('empID');
        $coveringEmp = $this->input->post('coveringEmp');
        $confirmedYN = $this->input->post('confirmedYN');
        $companyID = current_companyID();
        // var_dump($coveringEmp);
        $html = '<select id="coveringEmpID" name="coveringEmpID[]" class="form-control coveringEmp frm_input"  multiple="multiple">';
        $html .= '<option value="">Select Employee</option>';
    

        if ($confirmedYN == 1) {

            if($coveringEmp){
                $empData = $this->db->query("SELECT EIdNo, ECode, Ename2 
                    FROM srp_employeesdetails 
                    WHERE Erp_companyID = {$companyID} AND EIdNo IN ({$coveringEmp})")->result_array();

                $html = ''; // Initialize the $html variable

                foreach ($empData as $row) {
                    $html .= '<option value="' . $row['EIdNo'] . '" selected>' . $row['ECode'] . ' - ' . $row['Ename2'] . '</option>';
                }
            }
           
        }

        if (!empty($empID) && $confirmedYN != 1) {

            $empList = $this->db->query("SELECT * FROM (
                                        SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails AS empTB
                                        JOIN srp_erp_employeemanagers AS mangerTB ON mangerTB.empID=empTB.EIdNo
                                        WHERE Erp_companyID={$companyID} AND empConfirmedYN=1 AND isDischarged=0
                                        AND isSystemAdmin=0 AND mangerTB.active=1 AND companyID={$companyID}
                                        AND EIdNo != {$empID}
                                        AND managerID = (
                                            SELECT managerID FROM srp_erp_employeemanagers WHERE empID={$empID} AND active=1 AND isprimary=1
                                        )
                                        UNION
                                        SELECT EIdNo, ECode, Ename2 
                                        FROM srp_erp_employeemanagers manTB
                                        JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = manTB.managerID
                                        WHERE empID={$empID} AND active=1
                                        UNION 
                                        SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails AS empTB
                                        WHERE Erp_companyID={$companyID} AND empConfirmedYN=1 AND isDischarged=0
                                        AND isSystemAdmin = 0 
                                        AND EIdNo IN (
                                            SELECT empID FROM srp_erp_employeemanagers WHERE managerID={$empID} AND active=1
                                        ) UNION
                                        SELECT EIdNo, ECode, Ename2 
                                        FROM srp_erp_employee_attendees attendees
                                        JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = attendees.attendeeID
                                        WHERE attendees.empID={$empID}
                                         UNION
                                        SELECT EIdNo, ECode, Ename2 
                                        FROM srp_erp_employee_attendees attendees
                                        JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = attendees.empID
                                        WHERE attendees.attendeeID={$empID}
                                       
                                     ) AS t1 ORDER BY Ename2")->result_array();


            if (!empty($empList)) {
                foreach ($empList as $val) {
                    $selected = in_array($val['EIdNo'], explode(',', $coveringEmp)) ? 'selected' : '';
                    $html .= '<option value="' . $val['EIdNo'] . '" ' . $selected . '>' . $val['ECode'] . ' - ' . $val['Ename2'] . '</option>';
                }
            }


        }

        $html .= '</select>';

        echo $html;
    }

    public function fetch_employee_leave()
    {
        $com = current_companyID();
        $where = "srp_erp_leavemaster.companyID = {$com}";
        $currentEmpID = $this->input->post('currentEmpID');
        $attendee_filter = $this->input->post('attendee_filter');
        $currentEmp = current_userID();
        // if ($currentEmpID != '') {
        //     $where .= " AND empID={$currentEmpID}";
        // }

        $filterDateFrom = $this->input->post('filterDateFrom');
        $filterDateFrom = input_format_date($filterDateFrom, date_format_policy());
        $filterDateTo = $this->input->post('filterDateTo');
        $filterDateTo = input_format_date($filterDateTo, date_format_policy());
        $empFilter = $this->input->post('empFilter');
        $empFilter = implode(',', $empFilter);
        $status = $this->input->post('status');
        $applicationType_filter = $this->input->post('applicationType_filter');
        $leaveType_filter = $this->input->post('leaveType_filter');

        $where .= " AND startDate BETWEEN '{$filterDateFrom}' AND '{$filterDateTo}'";
        $where .= ($applicationType_filter != '') ? " AND srp_erp_leavemaster.applicationType IN ({$applicationType_filter})" : '';
        $where .= ($leaveType_filter != '') ? " AND srp_erp_leavemaster.leaveTypeID IN ({$leaveType_filter})" : '';
        
        if ($status != 'all') {
            switch ($status) {
                case 'draft':
                    $where .= " AND confirmedYN = 0 ";
                    break;

                case 'confirmed':
                    $where .= " AND confirmedYN = 1 AND approvedYN = 0 ";
                    break;

                case 'approved':
                    $where .= " AND approvedYN = 1 AND ( requestForCancelYN = 0 OR requestForCancelYN IS NULL )";
                    break;

                case 'canReq':
                    $where .= " AND requestForCancelYN = 1 AND cancelledYN = 0";
                    break;

                case 'canApp':
                    $where .= " AND cancelledYN = 1 ";
                    break;
            }
        }

        //if ($attendee_filter != 'myLeave') {
            switch ($attendee_filter) {
                case 'myEmployee':
                    $where .= " AND srp_erp_leavemaster.createdUserID = {$currentEmp} ";

                    
                    break;

                case 'all':
                    $where .= " AND srp_erp_leavemaster.createdUserID = {$currentEmp} OR empID={$currentEmp}";
                    break;

                    case 'myLeave':
                        $where .= " AND srp_erp_leavemaster.empID={$currentEmp}";
                        break;

            }
       //}

      // print_r($where);exit;
        $this->datatables->select('leaveMasterID, documentCode, ECode, CONCAT(ECode, \' - \', Ename2) AS empName, confirmedYN, approvedYN, description, 
            requestForCancelYN, IF(ISNULL(requestForCancelYN), approvedYN, IF(requestForCancelYN=1, 5, 6)) AS requestStr, startDate, endDate, 
            IF(applicationType=1, \'Applied Leave\', \'Leave Plan\') AS appDes, cancelledYN
            ', true)
            ->from('srp_erp_leavemaster')
            ->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_leavemaster.empID')
            ->join('srp_erp_leavetype', 'srp_erp_leavetype.leaveTypeID = srp_erp_leavemaster.leaveTypeID')
            ->edit_column('startDate', '$1', "convert_date_format(startDate)")
            ->edit_column('endDate', '$1', 'convert_date_format(endDate)')
            ->add_column('confirm', '$1', 'confirm(confirmedYN)')
            ->add_column('approved', '$1', 'confirm_ap_user(requestStr,confirmedYN,"LA",leaveMasterID,1)')
            ->add_column('action', '$1', 'load_Apply_for_leave_action(leaveMasterID, documentCode, confirmedYN, approvedYN, requestForCancelYN, cancelledYN)')
            ->where($where);

        echo $this->datatables->generate();
    }


    public function fetch_WFH_Details()
    {
        $com = current_companyID();
        $where = "srp_erp_work_from_home.companyID = {$com}";
        $currentEmpID = current_userID();
        if ($currentEmpID != '') {
            $where .= " AND empID={$currentEmpID}";
        }

        $filterDateFrom = $this->input->post('filterDateFrom');
        $filterDateFrom = input_format_date($filterDateFrom, date_format_policy());
        $filterDateTo = $this->input->post('filterDateTo');
        $filterDateTo = input_format_date($filterDateTo, date_format_policy());
        $empFilter = $this->input->post('empFilter');
        $empFilter = implode(',', $empFilter);
        $status = $this->input->post('status');

        $where .= " AND startDate BETWEEN '{$filterDateFrom}' AND '{$filterDateTo}'";
        $where .= ($empFilter != '') ? " AND empID IN ({$empFilter})" : '';

        if ($status != 'all') {
            switch ($status) {
                case 'draft':
                    $where .= " AND confirmedYN = 0 ";
                    break;

                case 'confirmed':
                    $where .= " AND confirmedYN = 1 AND approvedYN = 0 ";
                    break;

                case 'approved':
                    $where .= " AND approvedYN = 1 /*AND ( requestForCancelYN = 0 OR requestForCancelYN IS NULL )*/";
                    break;

                /* case 'canReq':
                     $where .= " AND requestForCancelYN = 1 AND cancelledYN = 0";
                     break;

                case 'canApp':
                    $where .= " AND cancelledYN = 1 ";
                    break;
                */
            }
        }

        $this->datatables->select('wfhID, empID, ECode, CONCAT(ECode, \' - \', Ename2) AS empName,documentCode, documentID, confirmedYN, approvedYN, 
            documentDate, startDate, endDate', true)
            ->from('srp_erp_work_from_home')
            ->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_work_from_home.empID')
            ->edit_column('startDate', '$1', "convert_date_format(startDate)")
            ->edit_column('endDate', '$1', 'convert_date_format(endDate)')
            ->add_column('confirm', '$1', 'confirm(confirmedYN)')
            ->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"WFH",wfhID,1)')
            ->add_column('action', '$1', 'wfh_ApplicationAction(wfhID, documentID, confirmedYN, approvedYN)')
            ->where($where);

        echo $this->datatables->generate();
    }

/* epDetails WFH Application*/
    function wfh_ApplicationEmployee()
    {
        $empID = $this->input->post('empID');
        $com = current_companyID();
        
        if (isset($empID)) {
            $filter = " AND srp_employeesdetails.EIdNo =$empID";
        } else {
            $filter = " AND srp_employeesdetails.isDischarged != 1";
        }

        $qry = "SELECT srp_employeesdetails.EIdNo, srp_employeesdetails.ECode, srp_designation.DesDescription,
              IFNULL(Ename2, '') AS employee,srp_employeesdetails.DateAssumed FROM srp_employeesdetails
              JOIN srp_designation on srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
              WHERE srp_employeesdetails.Erp_companyID=$com  $filter";

        $result = $this->db->query($qry)->result_array();

        echo json_encode($result);
    }

    function load_leave_plan_report(){
        
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $leaveType = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
        $filter =  ($this->uri->segment(5)) ? $this->uri->segment(5) : 0;

        $filter = json_decode(urldecode($filter), true);

       
        $html  = $this->input->post('html');
        
        if($html){
            $masterID = $this->input->post('id');
        }
    
        $companyID = $this->common_data['company_data']['company_id'];   
        $empID = current_userID();

        if($companyID){

            $data['empID'] = $empID;
            $data['leaveType'] = $leaveType;
            $data['filter'] = $filter;
            
            if($html){
                $html = $this->load->view('system/operations/reports/templates/leave_plan_pdf', $data,true);
            }else{
                $data['pdf'] = 1;
                $html = $this->load->view('system/operations/reports/templates/leave_plan_pdf', $data,true);
            }

            if ($this->input->post('html')) {
                echo $html;
            } else {
                $this->load->library('pdf');
                $pdf = $this->pdf->printed($html, 'A4-L');
            }

        }
       
    }


    function save_WFH_employee_applivation(){
        $this->form_validation->set_rules('empID', 'Employee Name ', 'trim|required');
        $this->form_validation->set_rules('WFHStartDate', 'From date ', 'trim|required');
        $this->form_validation->set_rules('WFHEndDate', 'To Date ', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_WFH_employee_applivation());
        }
    }


    public function delete_empWFH()
    {
        echo json_encode($this->Employee_model->delete_empWFH());
    }


    public function fetch_employee_and_WFH_details()
    {
        $wfhID = $this->input->post('wfhID');
        $wfh_Details = $this->Employee_model->wfh_employee_details($wfhID);
        $employee_Details = $this->Employee_model->getemployeedetails_for_WFH($wfh_Details['empID']);

        echo json_encode([
            'wfhDetails' => $wfh_Details,
            'empDet' => $employee_Details,
        ]);
    }

    public function confirmation_WFH_document()
    {
        $result = $this->Employee_model->confirmation_WFH_document();
        if($result){
            if($result[0] == 's'){
                echo json_encode(array('s','WFH Application confirmed successfully'));
            } else {
           //     echo json_encode(array('e','Error in confirmation'));
             echo json_encode($result);
            }
        }
    }


    function fetch_wfh_for_approval()
    {
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $companyID = $this->common_data['company_data']['company_id'];
        $convertFormat = convert_date_format_sql();
        $empID = current_userID();
 
            $this->datatables->select('srp_erp_work_from_home.wfhID as wfhID,srp_erp_work_from_home.companyCode,srp_erp_work_from_home.documentCode as documentCode,srp_erp_work_from_home.documentDate,comments,srp_erp_work_from_home.empID as empID,srp_employeesdetails.Ename2 as Ename2,srp_erp_work_from_home.confirmedYN as confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN,documentApprovedID,approvalLevelID,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate', false);
            $this->datatables->from('srp_erp_work_from_home');
            $this->datatables->join('srp_employeesdetails', 'srp_erp_work_from_home.empID = srp_employeesdetails.EIdNo');
            $this->datatables->join('srp_erp_employeemanagers ', 'srp_erp_work_from_home.empID = srp_erp_employeemanagers.empID');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_work_from_home.wfhID AND srp_erp_documentapproved.approvalLevelID = srp_erp_work_from_home.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_work_from_home.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'WFH');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'WFH');
            $this->datatables->where('srp_erp_documentapproved.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('srp_erp_work_from_home.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', $approvedYN);
            $this->datatables->where("( srp_erp_approvalusers.employeeID = '{$empID}'
                OR (
                    srp_erp_approvalusers.employeeID = -1 
                    AND srp_erp_work_from_home.empID IN (
                        SELECT
                            emp_manager.empID 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID 
                            AND `emp_manager`.`active` = 1 
                            AND `emp_manager`.`companyID` = '{$companyID}' 
                            AND emp_manager.managerID = '{$empID}' 
                            ) 
                            ) 
                    OR (
                        srp_erp_approvalusers.employeeID = -2 
                    AND srp_erp_work_from_home.empID IN (
                        SELECT
                            emp_detail.EIdNo 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                            JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                            AND `emp_dep`.`isactive` = 1 
                            AND `emp_dep`.Erp_companyID = '{$companyID}' 
                            AND srp_dep.hod_id = '{$empID}' 
                            ) 
                    ) 
                    OR (
                        srp_erp_approvalusers.employeeID = -3 
                            AND srp_erp_work_from_home.empID IN (
                        SELECT
                            emp_detail.Eidno 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                            JOIN ( SELECT * FROM srp_erp_employeemanagers ) AS top_manager ON top_manager.empID = emp_manager.managerID 
                        WHERE
                            emp_manager.active = 1 
                            AND `emp_manager`.`companyID` = '{$companyID}' 
                            AND top_manager.managerID = '{$empID}' 
                            ) 
                    ) 
                ) "
            );
            $this->datatables->group_by('srp_erp_work_from_home.wfhID');
            $this->datatables->add_column('documentCode', '$1', 'approval_change_modal(documentCode,wfhID,documentApprovedID,approvalLevelID,approvedYN,WFH,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"WFH",wfhID)');
            $this->datatables->add_column('edit', '$1', 'wfh_action_approval(wfhID,approvalLevelID,approvedYN,documentApprovedID,WFH)');
            echo $this->datatables->generate();
    }


    function save_WFH_request_approval()
    {
        $system_code = trim($this->input->post('wfhID') ?? '');
        $level_id = trim($this->input->post('Level') ?? '');
        $status = trim($this->input->post('po_status') ?? '');
        if($status==1){
            $approvedYN=checkApproved($system_code,'WFH',$level_id);
            if($approvedYN){
                $this->session->set_flashdata('w', 'Document already approved');
                echo json_encode(FALSE);
            }else{
                $this->db->select('wfhID');
                $this->db->where('wfhID', trim($system_code));
                $this->db->where('approvedYN', 2);
                $this->db->from('srp_erp_work_from_home');
                $po_approved = $this->db->get()->row_array();
                if(!empty($po_approved)){
                    $this->session->set_flashdata('w', 'Document already rejected');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('wfhID', 'wfh ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->save_wfh_request_approval());
                    }
                }
            }
        }else if($status==2){
            $this->db->select('wfhID');
            $this->db->where('wfhID', trim($system_code));
            $this->db->where('approvedYN', 2);
            $this->db->where('confirmedYN !=', 1);
            $this->db->from('srp_erp_work_from_home');
            $po_approved = $this->db->get()->row_array();
            if(!empty($po_approved)){
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
            }else{
                $rejectYN=checkApproved($system_code,'WFH',$level_id);
                if(!empty($rejectYN)){
                    $this->session->set_flashdata('w', 'Document already approved');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('wfhID', 'WFH Request ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->save_wfh_request_approval());
                    }
                }
            }
        }

    }


    function load_WFH_request_conformation()
    {
        $wfhID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('wfhId') ?? '');

        $data = array();

        $data['extra'] = $this->Employee_model->fetch_template_data($wfhID); //fetch table data as $data['master'] from srp_erp_work_from_home    &    fetch approval data and approval employee data as $data['approval'] from srp_employeesdetails and srp_erp_documentapproved tables
        $data['approval'] = $this->input->post('approval');
        //echo '<pre>';print_r($data['extra']);exit;

        $printHeaderFooterYN = 1;
        $data['printHeaderFooterYN'] = $printHeaderFooterYN;

        $this->db->select('printHeaderFooterYN');
        $this->db->where('companyID', current_companyID());
        $this->db->where('documentID', 'WFH');
        $this->db->from('srp_erp_documentcodemaster');
        $result = $this->db->get()->row_array();

        $printHeaderFooterYN = $result['printHeaderFooterYN'];
        $data['printHeaderFooterYN'] = $printHeaderFooterYN;
        $data['ALD_policyValue'] = getPolicyValues('ALD', 'All'); /*ALD - Show Approval Levels In Documents*/
        $data['approver_details'] = approved_emp_details('WFH', $wfhID); // from the srp_erp_documentapproved table

        if (!$this->input->post('html')) {
            $data['signature']=$this->Employee_model->fetch_signaturelevel(); // fetch approvalSignatureLevel from srp_erp_documentcodemaster
        } else {
            $data['signature']='';
        }
        $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
        }
        $html = $this->load->view('system/workFromHomeApprove/erp_wfh_request_print', $data, true);
        $data['html'] = $html;
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $printlink =  print_template_pdf('WFH', 'system/workFromHomeApprove/erp_wfh_request_print');
            $html = $this->load->view($printlink, $data, true);
            $printSize = $this->uri->segment(4);
         
            if($printSize == 0 && ($printSize!='')){
            
                $printSizeText='A5-L';
            }else{
                $printSizeText='A4';
            }
            
            $pdf = $this->pdf->printed($html, $printSizeText, $data['extra']['master']['approvedYN'], $printHeaderFooterYN);
        }
    }


    public function refer_back_WFH_confirmation()
    {

        $wfhMasterID = trim($this->input->post('refID') ?? '');
        $wfhDet = $this->Employee_model->wfh_employee_details($wfhMasterID);

        if ($wfhDet['approvedYN'] == 1) {
            die(json_encode(['e', 'This document already approved. You can not refer backed this.']));
        }

        $companyID = current_companyID();

        $data = array(
            'confirmedYN' => 0,
            'confirmedDate' => null,
            'confirmedByEmpID' => null,
            'confirmedByName' => null,
        );

        $this->db->trans_start();

        $this->db->where('wfhID', $wfhMasterID);
        $this->db->where('companyID', $companyID);
        $this->db->update('srp_erp_work_from_home', $data);

        $this->db->where('companyID', $companyID);
        $this->db->where('departmentID', 'WFH');
        $this->db->where('documentSystemCode', $wfhMasterID);
        $this->db->delete('srp_erp_documentapproved');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->Employee_model->leave_notify($wfhMasterID, 'refer-back');
            $this->db->trans_commit();
            echo json_encode(array('s', 'WFH Confirmation Referred Back Successfully.'));
        } else {
            $this->db->trans_rollback();
            echo json_encode(array('e', ' Error in refer back.'));
        }
    }


    public function employeeLeave_details()
    {
        $masterID = $this->input->post('masterID');
        /*   $leave= $this->db->query("select policyMasterID from `srp_erp_leavemaster` WHERE leaveMasterID={$masterID}")->row_array();
           $policyMasterID= $leave['policyMasterID'];*/
        $leaveDet = $this->Employee_model->employeeLeave_details($masterID);
        $empDet = $this->Employee_model->getemployeedetails($leaveDet['empID']);
        $notifyList = $this->Employee_model->get_notify_list('LA', $masterID);
        $notifyListEmpID = (!empty($notifyList)) ? array_column($notifyList, 'empID') : null;

        $entitleDet = $this->Employee_model->employeeLeaveSummery($leaveDet['empID'], $leaveDet['leaveTypeID'], $leaveDet['policyMasterID']);

        echo json_encode([
            'leaveDet' => $leaveDet,
            'empDet' => $empDet,
            'entitleDet' => $entitleDet,
            'notifyList' => $notifyList,
            'notifyListEmpID' => $notifyListEmpID
        ]);
    }

    public function refer_back_empLeave()
    {

        $leaveMasterID = trim($this->input->post('refID') ?? '');
        $leaveDet = $this->Employee_model->employeeLeave_details($leaveMasterID);

        if ($leaveDet['approvedYN'] == 1) {
            die(json_encode(['e', 'This document already approved. You can not refer backed this.']));
        }

        $companyID = current_companyID();

        $data = array(
            'confirmedYN' => 0,
            'confirmedDate' => null,
            'confirmedByEmpID' => null,
            'confirmedByName' => null,
        );

        $this->db->trans_start();

        $this->db->where('leaveMasterID', $leaveMasterID);
        $this->db->where('companyID', $companyID);
        $this->db->update('srp_erp_leavemaster', $data);

        $this->db->where('companyID', $companyID);
        $this->db->where('departmentID', 'LA');
        $this->db->where('documentSystemCode', $leaveMasterID);
        $this->db->delete('srp_erp_documentapproved');


        /*** Delete accrual leave ***/
        $this->db->where('companyID', $companyID);
        $this->db->where('leaveMasterID', $leaveMasterID);
        $this->db->delete('srp_erp_leaveaccrualmaster');

        $this->db->where('leaveMasterID', $leaveMasterID);
        $this->db->delete('srp_erp_leaveaccrualdetail');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->Employee_model->leave_notify($leaveMasterID, 'refer-back');
            $this->db->trans_commit();
            echo json_encode(array('s', ' Referred Back Successfully.'));
        } else {
            $this->db->trans_rollback();
            echo json_encode(array('e', ' Error in refer back.'));
        }
    }

    public function refer_back_empLeave_cancellation()
    {

        $leaveMasterID = trim($this->input->post('refID') ?? '');
        $companyID = current_companyID();
        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID 
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$leaveMasterID} AND companyID={$companyID}")->row_array();

        if ($leave['cancelledYN'] == 1) {
            die(json_encode(['e', 'This document already cancelled. You can not refer backed this.']));
        }

        $level = $leave['currentLevelNo'];
        $empID = $leave['empID'];
        $coveringEmpID = $leave['coveringEmpID'];

        $setupData = getLeaveApprovalSetup();
        $approvalEmp_arr = $setupData['approvalEmp'];
        $approvalLevel = $setupData['approvalLevel'];
        $emp_mail_arr = [];

        if ($level <= $approvalLevel) {

            $managers = $this->db->query("SELECT *, {$coveringEmpID} AS coveringEmp FROM (
                                             SELECT repManager,HOD
                                             FROM srp_employeesdetails AS empTB

                                             LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.EmpID={$empID} 
                                             AND dpt.isPrimary = 1
                                            ) AS HodData ON empTB.EIdNo = HodData.EmpNew

                                             LEFT JOIN (
                                                 SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers
                                                 WHERE active = 1 AND empID={$empID} AND companyID={$companyID}
                                             ) AS repoManagerTB ON empTB.EIdNo = repoManagerTB.empID
                                             WHERE Erp_companyID = '{$companyID}' AND EIdNo={$empID}
                                         ) AS empData
                                         LEFT JOIN (
                                              SELECT managerID AS topManager, empID AS topEmpID
                                              FROM srp_erp_employeemanagers WHERE companyID={$companyID} AND active = 1
                                         ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID")->row_array();

            $approvalSetup = $setupData['approvalSetup'];
            $x = 1;

            while ($x <= $approvalLevel) {
                if ($x > $level) { /* Proceed up to current approval level */
                    break;
                }

                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $x);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';

                if ($approvalType == 3) {
                    $nextApprovalEmp_arr = (array_key_exists($x, $approvalEmp_arr)) ? $approvalEmp_arr[$x] : null;
                    if (!empty($nextApprovalEmp_arr)) {
                        foreach ($nextApprovalEmp_arr as $hrMangers) {
                            if (!in_array($hrMangers['empID'], $emp_mail_arr)) {
                                $emp_mail_arr[] = $hrMangers['empID'];
                            }
                        }
                    }
                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if (!empty($managers[$managerType])) {
                        $nextApprovalEmpID = $managers[$managerType];
                        if (!in_array($nextApprovalEmpID, $emp_mail_arr) && $nextApprovalEmpID != '') {
                            $emp_mail_arr[] = $nextApprovalEmpID;
                        }
                    }

                }

                $x++;

            }
        }

        if (!empty($emp_mail_arr)) {
            $emp_mail_arr = implode(',', $emp_mail_arr);

            $empData = $this->db->query("SELECT EIdNo, Ename2, EEmail FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                            AND EIdNo IN ({$emp_mail_arr})")->result_array();

            foreach ($empData as $eData) {

                $bodyData = 'Leave cancellation ' . $leave['documentCode'] . ' is refer backed.<br/> ';
                $param["empName"] = $eData["Ename2"];
                $param["body"] = $bodyData;

                $mailData = [
                    'approvalEmpID' => $eData["EIdNo"],
                    'documentCode' => $leave['documentCode'],
                    'toEmail' => $eData["EEmail"],
                    'subject' => 'Leave cancellation refer backed',
                    'param' => $param
                ];

                send_approvalEmail($mailData);
            }
        }


        $data = array(
            'requestForCancelYN' => null,
            'cancelRequestedDate' => null,
            'cancelRequestByEmpID' => null,
            'cancelRequestComment' => null,
        );

        $this->db->trans_start();

        $this->db->where('leaveMasterID', $leaveMasterID);
        $this->db->where('companyID', $companyID);
        $this->db->update('srp_erp_leavemaster', $data);

        $this->db->where('companyID', $companyID);
        $this->db->where('departmentID', 'LA');
        $this->db->where('isCancel', 1);
        $this->db->where('documentSystemCode', $leaveMasterID);
        $this->db->delete('srp_erp_documentapproved');


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(array('s', 'Leave Cancellation Referred Back Successfully.'));
        } else {
            $this->db->trans_rollback();
            echo json_encode(array('e', ' Error in leave cancellation refer back.'));
        }
    }

    public function cancel_leave()
    {
        $leaveMasterID = trim($this->input->post('cancelID') ?? '');
        $comments = trim($this->input->post('comments') ?? '');
        $companyID = current_companyID();
        $current_userID = current_userID();
        $leave = $this->db->query("SELECT leaveMaster.*, empTB.Ename2, EEmail, ECode AS empCode, coveringEmpID
                                   FROM srp_erp_leavemaster AS leaveMaster
                                   JOIN srp_employeesdetails AS empTB ON empID=empTB.EIdNo
                                   WHERE leaveMasterID={$leaveMasterID} AND companyID={$companyID}")->row_array();
        $level = 1;

        if ($leave['approvedYN'] != 1) {
            die(json_encode(['e', 'This document not confirmed yet.']));
        }

        if ($leave['cancelledYN'] == 1) {
            die(json_encode(['e', 'This document already canceled.']));
        }

        if ($leave['requestForCancelYN'] == 1) {
            die(json_encode(['e', 'This document already in cancel request.']));
        }

        $this->db->trans_start();


        $empID = $leave['empID'];
        $coveringEmpID = $leave['coveringEmpID'];
        $setupData = getLeaveApprovalSetup();
        $approvalEmp_arr = $setupData['approvalEmp'];
        $approvalLevel = $setupData['approvalLevel'];
        $isManagerAvailableForNxtApproval = 0;
        $nextLevel = null;
        $nextApprovalEmpID = null;
        $data_app = [];


        /**** If the number of approval level is less than current approval than only this process will run ****/
        if ($level <= $approvalLevel) {

            $managers = $this->db->query("SELECT *, {$coveringEmpID} AS coveringEmp FROM (
                                             SELECT repManager,HOD
                                             FROM srp_employeesdetails AS empTB

                                             LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.EmpID={$empID} 
                                             AND dpt.isPrimary = 1
                                            ) AS HodData ON empTB.EIdNo = HodData.EmpNew

                                             LEFT JOIN (
                                                 SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers
                                                 WHERE active = 1 AND empID={$empID} AND companyID={$companyID}
                                             ) AS repoManagerTB ON empTB.EIdNo = repoManagerTB.empID
                                             WHERE Erp_companyID = '{$companyID}' AND EIdNo={$empID}
                                         ) AS empData
                                         LEFT JOIN (
                                              SELECT managerID AS topManager, empID AS topEmpID
                                              FROM srp_erp_employeemanagers WHERE companyID={$companyID} AND active = 1
                                         ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID")->row_array();

            $approvalSetup = $setupData['approvalSetup'];
            $x = $level;


            /**** Validate is there a manager available for next approval level ****/

            $i = 0;

            while ($x <= $approvalLevel) {

                $isCurrentLevelApproval_exist = 0;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $x);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';

                if ($approvalType == 3) {
                    $isCurrentLevelApproval_exist = 1;

                    if ($isManagerAvailableForNxtApproval == 0) {
                        $nextLevel = $x;
                        $nextApprovalEmpID = (array_key_exists($x, $approvalEmp_arr)) ? $approvalEmp_arr[$x] : '';
                        $isManagerAvailableForNxtApproval = 1;
                    }
                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if (!empty($managers[$managerType])) {
                        $isCurrentLevelApproval_exist = 1;

                        if ($isManagerAvailableForNxtApproval == 0) {
                            $nextLevel = $x;
                            $nextApprovalEmpID = $managers[$managerType];
                            $isManagerAvailableForNxtApproval = 1;
                        }
                    }

                }

                if ($isCurrentLevelApproval_exist == 1) {
                    $data_app[$i]['companyID'] = $companyID;
                    $data_app[$i]['companyCode'] = current_companyCode();
                    $data_app[$i]['departmentID'] = 'LA';
                    $data_app[$i]['documentID'] = 'LA';
                    $data_app[$i]['documentSystemCode'] = $leaveMasterID;
                    $data_app[$i]['documentCode'] = $leave['documentCode'];
                    $data_app[$i]['isCancel'] = 1;
                    $data_app[$i]['table_name'] = 'srp_erp_leavemaster';
                    $data_app[$i]['table_unique_field_name'] = 'leaveMasterID';
                    $data_app[$i]['documentDate'] = current_date();
                    $data_app[$i]['approvalLevelID'] = $x;
                    $data_app[$i]['roleID'] = null;
                    $data_app[$i]['approvalGroupID'] = current_user_group();
                    $data_app[$i]['roleLevelOrder'] = null;
                    $data_app[$i]['docConfirmedDate'] = current_date();
                    $data_app[$i]['docConfirmedByEmpID'] = $current_userID;
                    $data_app[$i]['approvedEmpID'] = null;
                    $data_app[$i]['approvedYN'] = 0;
                    $data_app[$i]['approvedDate'] = null;
                    $i++;
                }

                $x++;
            }

        }

        if (!empty($data_app)) {

            $this->db->insert_batch('srp_erp_documentapproved', $data_app);

            $upData = [
                'cancelledYN' => 0,
                'requestForCancelYN' => 1,
                'cancelRequestedDate' => current_date(),
                'cancelRequestComment' => $comments,
                'cancelRequestByEmpID' => current_userID(),
                'currentLevelNo' => $nextLevel,
                'modifiedPCID' => current_pc(),
                'modifiedUserID' => $current_userID,
                'modifiedUserName' => current_employee(),
                'modifiedDateTime' => current_date()
            ];
            $this->db->where('leaveMasterID', $leaveMasterID);
            $update = $this->db->update('srp_erp_leavemaster', $upData);

            if ($update) {
                $leaveBalanceData = $this->Employee_model->employeeLeaveSummery($empID, $leave['leaveTypeID'], $leave['policyMasterID']);
                $balanceLeave = $leaveBalanceData['balance'];
                //$balanceLeave = ($balanceLeave > 0)?  ($balanceLeave - $leave['days']) : 0;

                if (is_array($nextApprovalEmpID)) {
                    /**** If the approval type HR there may be more than one employee for next approval process ****/
                    $nextApprovalEmpID = implode(',', array_column($nextApprovalEmpID, 'empID'));
                }

                $nxtEmpData_arr = $this->db->query("SELECT EIdNo, Ename2, EEmail FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                            AND EIdNo IN ({$nextApprovalEmpID})")->result_array();

                foreach ($nxtEmpData_arr as $nxtEmpData) {

                    $param["empName"] = $nxtEmpData["Ename2"];
                    $param["body"] = 'Leave application cancellation ' . $leave['documentCode'] . ' is pending for your approval.<br/>
                                  <table border="0px">
                                      <tr><td><strong>Name </td><td> : ' . $leave['Ename2'] . ' - ' . $leave['empCode'] . '</td></tr>
                                      <tr><td><strong>Start Date</td><td> : ' . date('Y-m-d', strtotime($leave['startDate'])) . '</td></tr>
                                      <tr><td><strong>End Date</td><td> : ' . date('Y-m-d', strtotime($leave['endDate'])) . '</td></tr>
                                      <tr><td><strong>Leave type </td><td> : ' . $leaveBalanceData['description'] . '</td></tr>
                                      <tr><td><strong>Leave balance </td><td> : ' . $balanceLeave . '</td></tr>
                                  </table>';

                    $mailData = [
                        'approvalEmpID' => $nxtEmpData["EIdNo"],
                        'documentCode' => $leave['documentCode'],
                        'toEmail' => $nxtEmpData["EEmail"],
                        'subject' => 'Leave Cancellation Approval',
                        'param' => $param
                    ];

                    send_approvalEmail($mailData);
                }

                $this->db->trans_commit();
                die(json_encode(['s', 'Leave cancellation approval created successfully.']));


            } else {
                $this->db->trans_rollback();
                $common_failed = $this->lang->line('common_failed');/* 'failed'*/
                die(json_encode(['e', $common_failed]));
            }

        }
    }

    public function delete_empLeave()
    {
        echo json_encode($this->Employee_model->delete_empLeave());
    }

    public function load_emp_leaveDet()
    {
        echo json_encode($this->Employee_model->load_emp_leaveDet());
    }
 
    public function leave_print()
    {
        $companyID = current_companyID();
        $id = $this->uri->segment(3);

        $data['masterData'] = $this->employeeLeave_detailsOnApproval($id, true);
        $coveringEmpID = $data['masterData']['leaveDet']['coveringEmpID'];

        if (!empty($coveringEmpID)) {
            $data['coveringEmp'] = $this->db->query("SELECT CONCAT(ECode, ' -', Ename2) AS coveringEmp FROM srp_employeesdetails WHERE EIdNo IN ({$coveringEmpID})")->result();
        }

        //find leave type
        $leaveTypeID = $leaveType[''] = $data['masterData']['leaveDet']['leaveTypeID'];
        $desArr = $this->db->query("SELECT description FROM srp_erp_leavetype WHERE leaveTypeID={$leaveTypeID} ")->row_array();
        $data['leaveDescription'] = $desArr['description'];

        if (empty($data['masterData'])) {
            show_404();
            die();
        }

        $isApproved = $data['masterData']['leaveDet']['approvedYN'];
        if ($isApproved == 1) {
            $appData = $this->db->query("SELECT approvedEmpID, approvedComments, approvalLevelID, Ename2, approvedDate, isCancel
                                         FROM srp_erp_documentapproved AS appTB
                                         JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=approvedEmpID
                                         WHERE companyID={$companyID} AND documentID='LA' AND documentSystemCode={$id}
                                         ")->result_array();
            $data['appData'] = $appData;
        }

        $requestForCancelYN = ($data['masterData']['leaveDet']['requestForCancelYN'] == 1) ? '1' : '0';

        if ($requestForCancelYN == 1) {
            $cancelData = $this->db->query("SELECT cancelRequestComment, cancelRequestedDate, Ename2, Ecode
                                         FROM srp_erp_leavemaster AS masterTB
                                         JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=masterTB.cancelRequestByEmpID
                                         WHERE companyID={$companyID} AND leaveMasterID={$id}")->row_array();
            $data['cancelData'] = $cancelData;
        }

        $html = $this->load->view('system/hrm/print/leave_print', $data, true);
        $this->load->library('pdf');
        $this->pdf->printed($html, 'A4', $isApproved);
    }

    public function employeeLeave_detailsOnApproval($masterID = null, $asReturn = null)
    {
        $companyID = current_companyID();
        $masterID = ($masterID == null) ? $this->input->post('masterID') : $masterID;
        $leaveDet = $this->Employee_model->employeeLeave_details($masterID);
        $empDet = $this->Employee_model->getemployeedetails($leaveDet['empID']);


        if (!empty($leaveDet)) {
            $_POST['policyMasterID'] = $leaveDet['policyMasterID'];
        }
        $entitleDet = $this->Employee_model->employeeLeaveSummery($leaveDet['empID'], $leaveDet['leaveTypeID']);


        $returnArr = array(
            'leaveDet' => $leaveDet,
            'empDet' => $empDet,
            'entitleDet' => $entitleDet
        );

        if ($asReturn == true) {
            return $returnArr;
        } else {
            echo json_encode($returnArr);
        }
    }

    public function leave_approval_view()
    {
        $masterID = $this->input->post('masterID');
        $leaveDet = $this->Employee_model->employeeLeave_details($masterID);

        if (empty($leaveDet)) {
            die(json_encode(['e', 'Master record not found']));
        }

        $empDet = $this->Employee_model->getemployeedetails($leaveDet['empID']);
        $entitleDet = $this->Employee_model->employeeLeaveSummery($leaveDet['empID'], $leaveDet['leaveTypeID'], $leaveDet['policyMasterID']);

        $data['covering_emp'] = $this->db->select('EIdNo, ECode, Ename2')->where('EIdNo', $leaveDet['coveringEmpID'])->get('srp_employeesdetails')->row_array();
        $data['leaveDet'] = $leaveDet;
        $data['entitleDet'] = $entitleDet;
        $data['empDet'] = $empDet;

        $data['applicationType'] = 1;
        $data['policyMasterID'] = $leaveDet['policyMasterID'];
        $data['leaveGroupID'] = $leaveDet['leaveGroupID'];
        $data['empID'] = $leaveDet['empID'];
        $data['showYN'] = $this->input->post('showYN');
        $data['leaveTypeID'] = $leaveDet['leaveTypeID'];
        $data['balance'] = ($leaveDet['approvedYN'] == 1) ? $leaveDet['leaveAvailable'] : $entitleDet['balance'];


        $html = $this->load->view('system/hrm/leave-approval-view', $data, true);
        echo json_encode(['s', 'view' => $html, 'coveringEmpID' => $leaveDet['coveringEmpID']]);
    }

    /************* Attendance *********/

    public function fetch_attendanceType()
    {

        $this->datatables->select('AttPresentTypeID, PresentTypeDes')
            ->from('srp_attpresenttype AS t1')
            ->join('srp_sys_attpresenttype AS t2', 't1.SysPresentTypeID=t2.PresentTypeID')
            ->add_column('edit', '$1', 'action_attendanceTypes(AttPresentTypeID, PresentTypeDes)')
            ->where('t1.Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function savePresentType()
    {
        $this->form_validation->set_rules('attType[]', 'Attendance Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->savePresentType());
        }
    }

    public function delete_attendanceTypes()
    {
        $this->form_validation->set_rules('hidden-id', 'Attendance ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $hiddenID = $this->input->post('hidden-id');
            echo json_encode($this->Employee_model->delete_attendanceTypes($hiddenID));
        }
    }


    public function fetch_attendance()
    {

        //$con = "IFNULL(Ename1, ''),' ', IFNULL(Ename2, ''),' ',IFNULL(Ename3, ''),' ',IFNULL(Ename4, '')";
        $con = "IFNULL(Ename2, '')";

        $convertFormat = convert_date_format_sql();
        $this->datatables->select('EmpAttMasterID,t1.type as Type,DATE_FORMAT(AttDate,\'' . $convertFormat . '\') AS AttDate , DATE_FORMAT(AttTime, "%h:%i %p") AS AttTime, isAttClosed, ECode AS doneByCode, CONCAT(' . $con . ') AS doneByName', true)
            ->from('srp_empattendancemaster AS t1')
            ->join('srp_employeesdetails AS t2', 't1.DoneBy=t2.EIdNo')
            ->add_column('isClosed', '$1', 'confirm(isAttClosed)')
            ->add_column('action', '$1', 'action_attendanceMaster(EmpAttMasterID, isAttClosed, AttDate, Type,1)')
            ->where('t1.Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function fetch_attendance_self_service()
    {

        //$con = "IFNULL(Ename1, ''),' ', IFNULL(Ename2, ''),' ',IFNULL(Ename3, ''),' ',IFNULL(Ename4, '')";
        $con = "IFNULL(Ename2, '')";

        $convertFormat = convert_date_format_sql();
        $this->datatables->select('EmpAttMasterID,t1.type as Type,DATE_FORMAT(AttDate,\'' . $convertFormat . '\') AS AttDate , DATE_FORMAT(AttTime, "%h:%i %p") AS AttTime,floor.floorDescription as floorDescription, isAttClosed, ECode AS doneByCode, CONCAT(' . $con . ') AS doneByName', true)
            ->from('srp_empattendancemaster AS t1')
            ->join('srp_employeesdetails AS t2', 't1.DoneBy=t2.EIdNo')
            ->join('srp_erp_pay_floormaster as  floor','floor.floorID = t1.floorID','left')
            ->add_column('isClosed', '$1', 'confirm(isAttClosed)')
            ->add_column('action', '$1', 'action_attendanceMaster(EmpAttMasterID, isAttClosed, AttDate, Type,2)')
            ->where('t1.Erp_companyID', current_companyID())
            ->where('t1.DoneBy', current_userID());

        echo $this->datatables->generate();
    }

    public function new_attendance_self_service()
    {
        $this->form_validation->set_rules('attendanceDate', 'Attendance Date', 'trim|required|date');
        // $this->form_validation->set_rules('attendanceTime', 'Attendance time', 'trim|required');
       // $this->form_validation->set_rules('departments[]', 'Departments', 'trim|required');
        $this->form_validation->set_rules('floor', 'Location', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->new_attendance_self_service());
        }
    }

    public function new_attendance()
    {
        $this->form_validation->set_rules('attendanceDate', 'Attendance Date', 'trim|required|date');
        // $this->form_validation->set_rules('attendanceTime', 'Attendance time', 'trim|required');
        // $this->form_validation->set_rules('departments[]', 'Departments', 'trim|required');
        $this->form_validation->set_rules('floor', 'Location', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->new_attendance());
        }
    }

    public function load_attendanceEmployees()
    {
        $attID = $this->input->post('attID');
        $attMasterData = $this->Employee_model->getAttMasterData($attID);

        $data['masterData'] = $attMasterData;
        $data['emp_arr'] = $this->Employee_model->get_attendanceEmployees($attID);
        $this->load->view('system\hrm\ajax\load_empAttendanceDetails', $data);
    }

    public function load_attendanceEmployees_new()
    {
        $attID = $this->input->post('attID');
        $attMasterData = $this->Employee_model->getAttMasterData($attID);

        $data['masterData'] = $attMasterData;
        $data['emp_arr'] = $this->Employee_model->get_attendanceEmployees_new($attID);
        
        $this->load->view('system\hrm\ajax\load_empAttendanceDetails_new', $data);
    }

    public function delete_attendanceMaster()
    {
        $this->form_validation->set_rules('hidden-id', 'Attendance ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $hiddenID = $this->input->post('hidden-id');
            $attMasterData = $this->Employee_model->getAttMasterData_delete($hiddenID);

            if ($attMasterData['isAttClosed'] == 1) {
                echo json_encode(array('e', 'This attendance is already closed. You can not delete this.'));
            } else {
                echo json_encode($this->Employee_model->delete_attendanceMaster());
            }
        }
    }

    public function save_attendanceDetails()
    {
        $this->form_validation->set_rules('attendMasterID', 'Attendance ID', 'trim|required');
        $this->form_validation->set_rules('att-emp[]', 'Employee', 'trim|callback_check_employeeOnAttendance');
        $this->form_validation->set_rules('att-type[]', 'Attendance Type', 'trim|callback_check_presentTypeOnAttendance');
        $this->form_validation->set_rules('att-time[]', 'Attendance time', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_attendanceDetails());
        }
    }

    function check_employeeOnAttendance()
    {
        if (empty($this->input->post('att-emp'))) {
            $this->form_validation->set_message('check_employeeOnAttendance', 'There is no employee to proceed');
            return false;
        } else {
            return true;
        }
    }

    function check_presentTypeOnAttendance()
    {
        if (empty($this->input->post('att-type'))) {
            $this->form_validation->set_message('check_presentTypeOnAttendance', 'Select a present type for every employee');
            return false;
        } else {
            return true;
        }
    }


    /*Start of Shift Master*/
    public function fetch_shiftMaster()
    {
        $this->datatables->select('shiftID, Description')
            ->from('srp_erp_pay_shiftmaster AS t1')
            ->add_column('action', '$1', 'action_workShift(shiftID, Description)')
            ->where('companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveShiftMaster()
    {

        $this->form_validation->set_rules('shiftDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('masterDayID[]', 'Description', 'callback_validateDutyTime');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveShiftMaster());
        }


    }

    function validateDutyTime()
    {
        $onTime_arr = $this->input->post('onTime[]');
        $offTime_arr = $this->input->post('offTime[]');
        $isWeekend_arr = $this->input->post('isWeekend[]');
        $masterDayID_arr = $this->input->post('masterDayID[]');
        $dayDescription_arr = $this->input->post('dayDescription[]');
        $errMsg = null;

        foreach ($masterDayID_arr as $key => $row) {
            if ($isWeekend_arr[$key] == 0) {
                if (trim($onTime_arr[$key]) == '') {
                    $errMsg .= $dayDescription_arr[$key] . ' On time not set </br>';
                }

                if (trim($offTime_arr[$key]) == '') {
                    $errMsg .= $dayDescription_arr[$key] . ' Off time not set </br>';
                }

            }
        }

        if ($errMsg == null) {
            return TRUE;
        } else {
            $this->form_validation->set_message('validateDutyTime', $errMsg);
            return FALSE;
        }

    }

    public function fetch_shiftDetails()
    {
        $this->form_validation->set_rules('shiftID', 'Shift ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->fetch_shiftDetails());
        }
    }


    public function updateShiftMaster()
    {
        $this->form_validation->set_rules('shiftDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('editID', 'Shift ID', 'required');
        $this->form_validation->set_rules('masterDayID[]', 'Description', 'callback_validateDutyTime');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->updateShiftMaster());
        }
    }

    public function deleteShiftMaster()
    {
        $this->form_validation->set_rules('deleteID', 'Shift ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteShiftMaster());
        }
    }


    public function save_ShiftEmp()
    {

        $this->form_validation->set_rules('masterID', 'Shift ID', 'required');
        $this->form_validation->set_rules('employees', 'Employee', 'callback_checkShiftEmployees');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_ShiftEmp());
        }

    }

    function checkShiftEmployees()
    {
        $employees = trim($this->input->post('employees') ?? '');
        $emp_arr = json_decode($employees);

        if (count($emp_arr) > 0) {
            return true;
        } else {
            $this->form_validation->set_message('checkShiftEmployees', 'Please Select at least one employee to proceed.' . count($emp_arr));
            return false;
        }
    }
    /*End of Shift Master*/


    /*Start of Attendance review*/
    function attendancePulling_old()
    {
        $this->form_validation->set_rules('floorID', 'Floor', 'required');
        $this->form_validation->set_rules('upload_fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('upload_toDate', 'To Date', 'required');
        /* $this->form_validation->set_rules('machineMasterID', 'Machine', 'required');*/
        $floorID = $this->input->post('floorID');
        $automatic = true;
        $isManualAttendance = $this->input->post('isManualAttendance');
        if (isset($isManualAttendance)) {
            $automatic = false;
        }


        $companyID = current_companyID();
        $current_userID = current_userID();

        if ($this->form_validation->run() == FALSE) {
            exit(json_encode(['e', validation_errors()]));
        }

        $startdate = $this->input->post('upload_fromDate');
        $enddate = $this->input->post('upload_toDate');

        if ($automatic) {
            $attTempTableQuery = "select * from `srp_erp_pay_empattendancetemptable` WHERE companyID=$companyID AND isUpdated=0 AND attDate between '{$startdate}' AND '{$enddate}' ";
            $attTempData = $this->db->query($attTempTableQuery)->result_array();
            if (empty($attTempData)) {
                echo json_encode(['e', 'No Records Found.']);
                exit;
            }
        }

        $this->db->trans_start();

        /*here*/
        $begin = new DateTime($this->input->post('upload_fromDate'));
        $end = new DateTime($this->input->post('upload_toDate'));

        $end = $end->add(new DateInterval('P1D'));

        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $companyID = current_companyID();
        $frmDate = $this->input->post('upload_fromDate');
        $toDate = $this->input->post('upload_toDate');
        $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];
        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }

        if (!$automatic) {


            if (count($date_arr) != 1) {
                echo json_encode(['e', 'You can only pull data within a date for manual attendance.']);
                exit;
            }
        }

        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
        }

        $sql = "SELECT * FROM ( 
                    SELECT temp.autoID, EIdNo, ECode, Ename1, dateRange.actualDate, temp.empMachineID, temp.attDate, temp.attTime AS attTime, shiftDet.onDutyTime AS onDutyTime,
                    shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend, floorDescription, employee.floorID, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave, 
                    IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday, attDateTime, employee.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay 
                    FROM srp_employeesdetails AS employee 
                    INNER JOIN ( 
                        SELECT actualDate, companyID FROM srp_erp_pay_empattendancedaterangetemp WHERE companyID = {$companyID} AND uniqueID = '{$uniqueKey}' 
                    ) AS dateRange ON dateRange.companyID = Erp_companyID 
                    LEFT JOIN ( 
                        SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                    ) fd ON fd.floorID = employee.floorID 
                    LEFT JOIN ( 
                        SELECT srp_erp_pay_empattendancetemptable.autoID, empMachineID, attDate, attTime, attDateTime FROM srp_erp_pay_empattendancetemptable 
                        WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$frmDate}' AND '{$toDate}' ) AND isUpdated = 0 
                    ) temp ON temp.empMachineID = employee.empMachineID AND actualDate = attDate 
                    LEFT JOIN ( SELECT * FROM srp_erp_pay_shiftemployees WHERE companyID = {$companyID} ) AS empShift ON empShift.empID = employee.EIdNo 
                    LEFT JOIN ( 
                       SELECT * FROM srp_erp_pay_shiftdetails WHERE companyID = {$companyID} 
                    ) AS shiftDet ON shiftDet.shiftID = empShift.shiftID AND shiftDet.weekDayNo = WEEKDAY(dateRange.actualDate) 
                    LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = dateRange.actualDate 
                    LEFT JOIN ( 
                       SELECT leaveMasterID, empID, startDate, endDate FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1 
                    ) AS leaveExist ON leaveExist.empID = employee.EIdNo AND dateRange.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                    WHERE Erp_companyID = {$companyID} AND isSystemAdmin <> 1 AND employee.floorID = $floorID AND employee.isDischarged!=1  
                    GROUP BY actualDate, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC 
                ) AS temp 
                LEFT JOIN (
                   SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview WHERE  companyID={$companyID} GROUP BY	empID,attendanceDate 
                ) review ON  EIdNo=empID AND review.attendanceDate=temp.actualDate 
                WHERE empID IS NULL";

        $temp = $this->db->query($sql)->result_array();
        $tempAttendanceDate = array_column($temp, 'autoID');
        $tempAttendanceArray = array_unique(array_filter($tempAttendanceDate));
        if (!empty($tempAttendanceArray)) {
            foreach ($tempAttendanceArray as $key => $item) {
                $tempattendaceUpdate[$key]['autoID'] = $item;
                $tempattendaceUpdate[$key]['isUpdated'] = 1;
            }

        }
        if (!empty($tempattendaceUpdate)) {
            $this->db->update_batch('`srp_erp_pay_empattendancetemptable` ', $tempattendaceUpdate, 'autoID');
        }


        $data = [];
        if ($temp) {
            $i = 0;
            $employee = '';
            $continue = FALSE;
            foreach ($temp as $row) {
                if ($continue) {
                    /*skip if its set for clockout */
                    $continue = FALSE;
                    $i++;
                    continue;
                }
                $employee = $row['EIdNo'];
                $attendanceDate = $row['actualDate'];
                $onDuty = $row['onDutyTime'];
                $offDuty = $row['offDutyTime'];
                $clockIn = $row['attTime'];
                $nextKey = $i + 1;
                $clockOut = NULL;
                $isAllSet = 0;
                $earlyHours = '';
                $lateHours = '';
                $workingHours = "";
                $totWorkingHours = "";
                $realtime = "";
                $overTimeHours = '';
                $actualWorkingHours_obj = NULL;
                $totWorkingHours_obj = NULL;
                $normaloverTimeHours = 0;
                $weekendOTHours = 0;
                $holidayoverTimeHours = 0;
                $isCheckin = 0;
                $isHalfDay = 1;
                $normalrealtime = 0;
                $weekendrealtime = 0;
                $holidayrealtime = 0;

                /*check next array */
                if (array_key_exists($nextKey, $temp)) {
                    if ($temp[$nextKey]['EIdNo'] == $row['EIdNo'] && $attendanceDate == $temp[$nextKey]['actualDate']) {
                        $clockOut = $temp[$nextKey]['attTime']; /*Set clockout*/
                        $continue = TRUE;
                    }

                }

                /************ Calculate the actual working hours *************/
                if ($onDuty != NULL && $offDuty != NULL && $clockOut != NULL) {
                    $datetime1 = new DateTime($onDuty);
                    $datetime2 = new DateTime($offDuty);
                    $actualWorkingHours_obj = $datetime1->diff($datetime2);
                    $minutes = $actualWorkingHours_obj->format('%i');
                    $hours = $actualWorkingHours_obj->format('%h');
                    $workingHours = ($hours * 60) + $minutes;
                } else {
                    $isAllSet += 1;
                }


                /****** Employee total working hours for this day ******/
                if ($clockIn != NULL && $clockOut != NULL) {

                    if ($offDuty != '' && $offDuty <= $clockOut) {
                        $datetime1 = new DateTime($offDuty);
                    } else {
                        $datetime1 = new DateTime($clockOut);
                    }
                    if ($onDuty != '' && $onDuty >= $clockIn) {
                        $datetime2 = new DateTime($onDuty);
                    } else {
                        $datetime2 = new DateTime($clockIn);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $Hours = $totWorkingHours_obj->format('%h');
                    $minutes = $totWorkingHours_obj->format('%i');
                    $totWorkingHours = ($Hours * 60) + $minutes;

                    if ($workingHours != "" && $totWorkingHours != "") {
                        $realtime = $totWorkingHours / $workingHours;
                        $realtime = round($realtime, 1);
                    }


                } else {
                    $isAllSet += 1;
                }


                if ($isAllSet == 0) {

                    /**** Calculation for late hours ****/
                    $clockIn_datetime = new DateTime($clockIn);
                    $onDuty_datetime = new DateTime($onDuty);
                    if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                        $interval = $clockIn_datetime->diff($onDuty_datetime);

                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $lateHours = $hours * 60 + $minutes;
                    }


                    /**** Calculation for early hours ****/
                    $datetime1 = date('Y-m-d H:i:s', strtotime($clockOut));
                    $datetime2 = date('Y-m-d H:i:s', strtotime($offDuty));
                    if ($datetime1 < $datetime2) {
                        $datetime1 = new DateTime($clockOut);
                        $datetime2 = new DateTime($offDuty);
                        $interval = $datetime2->diff($datetime1);
                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $earlyHours = $hours * 60 + $minutes;

                    }


                    $clockouttime = date('Y-m-d H:i:s', strtotime($clockOut));
                    $offduty = date('Y-m-d H:i:s', strtotime($offDuty));

                    if ($clockouttime > $offduty) {


                        $Fdate = date('Y-m-d');
                        $onDutyForOT = new DateTime($clockOut);
                        if ($onDuty >= $clockIn) {
                            $onDutyForOT = new DateTime($onDuty);
                        } else {
                            $onDutyForOT = new DateTime($clockIn);
                        }
                        //$clockOutForOT = new DateTime($offDuty);
                        $clockOutForOT = new DateTime($clockOut);
                        $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                        $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        $overTime_obj = $actW->diff($totW);
                        $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                        $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                        $overTimeHours = $hours * 60 + $minutes;

                        //print_r($clockOut) ; exit;
                    }


                }


                if ($clockIn == NULL && $clockOut == NULL) {
                    $AttPresentTypeID = 4;
                    /**** Absents *****/
                } else {
                    $clockIn_datetime = date('Y-m-d H:i:s', strtotime($clockIn));
                    $onDuty_datetime = date('Y-m-d H:i:s', strtotime($onDuty));

                    $clockIn_datetime_grace = new DateTime($clockIn);
                    $onDuty_datetime_grace = new DateTime($onDuty);
                 
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                        $AttPresentTypeID = 1;
                    } /**** Presented On time *****/
                    elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                        $AttPresentTypeID = 2;
                    } /**** Presented Later*****/
                    else {
                        $AttPresentTypeID = '';
                    }
                    /***** Let the user decide ****/
                }

                if ($row['isOnLeave'] == 1) {
                    $AttPresentTypeID = 5;
                }
                /**** Employee On Leave *****/


                $normaloverTimeHours = $overTimeHours;
                $normalrealtime = $realtime;
                $isNormalDay = 0;
                $isWeekEndDay = 0;
                $isHoliday = 0;


                if ($row['isWeekend'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = $totWorkingHours;

                    $normalrealtime = 0;
                    $weekendrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 1;


                }

                if ($row['holiday'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = $totWorkingHours;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 0;
                    $isHoliday = 1;
                }

                if ($row['isCheckin'] == 1) {
                    $isCheckin = 1;
                }

                if ($row['isHalfDay'] == 1) {
                    $isHalfDay = 0.5;
                }


                array_push($data, [
                    'empID' => $row['EIdNo'],
                    'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                    'floorID' => $floorID,//$row['floorID'],
                    'attendanceDate' => $attendanceDate,
                    'onDuty' => $onDuty,
                    'offDuty' => $offDuty,
                    'checkIn' => $clockIn,
                    'checkOut' => $clockOut,
                    'presentTypeID' => $AttPresentTypeID,
                    'lateHours' => $lateHours,
                    'earlyHours' => $earlyHours,
                    'OTHours' => $overTimeHours,
                    'weekendOTHours' => $weekendOTHours,
                    'mustCheck' => $isCheckin,
                    'normalTime' => $isHalfDay,
                    'realTime' => $realtime,
                    'NDaysOT' => $normaloverTimeHours,
                    'holidayOTHours' => $holidayoverTimeHours,
                    'normalDay' => $normalrealtime,
                    'weekend' => $weekendrealtime,
                    'holiday' => $holidayrealtime,
                    'companyID' => current_companyID(),
                    'companyCode' => current_companyCode(),
                    'isNormalDay' => $isNormalDay,
                    'isWeekEndDay' => $isWeekEndDay,
                    'isHoliday' => $isHoliday,

                ]);


                $i++;
            }

        }
        //$this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');

        if (!empty($data)) {

            $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);
        } else {
            echo json_encode(['e', 'No records found']);
            exit;
        }

        /* exit;*/
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Failed to Update ']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully uploaded']);
        }
    }

    // SME-2886 
    function attendancePulling_to_del()
    {
        $this->form_validation->set_rules('upload_fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('upload_toDate', 'To Date', 'required');
        $automatic = true;
        $isManualAttendance = $this->input->post('isManualAttendance');
        $isUploadExcel = $this->input->post('isUploadExcel');
        $floor_filter = '';
        //$ = '';
        if (isset($isManualAttendance)) {
            $automatic = false;
        }
        if (isset($isManualAttendance) || isset($isUploadExcel)){
            $this->form_validation->set_rules('floorID', 'Floor', 'required');
            $floorID = $this->input->post('floorID');
            $floor_filter = 'empLoc.floorID = '. $floorID .' AND';
        }


        $companyID = current_companyID();
        $current_userID = current_userID();

        if ($this->form_validation->run() == FALSE) {
            exit(json_encode(['e', validation_errors()]));
        }

        $start_date = $this->input->post('upload_fromDate');
        $end_date = $this->input->post('upload_toDate');

        if ($automatic) {
            $attTempData = $this->db->query("SELECT isUpdated FROM srp_erp_pay_empattendancetemptable WHERE companyID={$companyID} AND isUpdated=0 
                                             AND attDate BETWEEN '{$start_date}' AND '{$end_date}' ")->result_array();
            if (empty($attTempData)) {
                echo json_encode(['e', 'No Records Found.']);
                exit;
            }
        }


        $notApprovedatndnce = $this->db->query("SELECT documentCode FROM srp_erp_leavemaster INNER JOIN ( SELECT EIdNo FROM srp_employeesdetails 
		JOIN srp_erp_empattendancelocation empLoc ON empLoc.empID = srp_employeesdetails.EIdNo	AND empLoc.companyID = $companyID  WHERE Erp_companyID = $companyID  ) emp ON emp.EIdNo = srp_erp_leavemaster.empID WHERE companyID = $companyID AND applicationType = 1 AND approvedYN = 0 AND startDate >= '{$start_date}' AND endDate <= '{$end_date}' ")->result_array();

        /*if(!empty($notApprovedatndnce)){
            echo json_encode(['w', 'Some Leaves ae not approved.',$notApprovedatndnce]);
            exit;
        }*/

        $this->db->trans_start();

        /*here*/
        $begin = new DateTime($this->input->post('upload_fromDate'));
        $end = new DateTime($this->input->post('upload_toDate'));

        $end = $end->add(new DateInterval('P1D'));

        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $companyID = current_companyID();
        $frmDate = $this->input->post('upload_fromDate');
        $toDate = $this->input->post('upload_toDate');
        $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];
        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;

        }

        if (!$automatic) {
            if (count($date_arr) != 1) {
                echo json_encode(['e', 'You can only pull data within a date for manual attendance.']);
                exit;
            }
        }

        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
        }

        $multiple_occ = $this->db->query("SELECT COUNT(autoID), tem.device_id, tem.empMachineID, attDate, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem
                                JOIN ( SELECT EIdNo,empattLoc.floorID as floorID,empattLoc.empMachineID as empMachineID, empattLoc.deviceID as deviceID FROM srp_employeesdetails 
			                    JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo	AND empattLoc.companyID = {$companyID} 
	                            WHERE Erp_companyID = {$companyID}  )empLoc ON empLoc.empMachineID = tem.empMachineID  and empLoc.deviceID = tem.device_id
                                WHERE $floor_filter tem.attDate BETWEEN '{$frmDate}' AND '{$toDate}' AND companyID = {$companyID} 		
                                GROUP BY empLoc.EIdNo, attDate
                                HAVING COUNT(autoID) > 2")->result_array();

       


        $skip_str = "";
        $multiple_occ_chk_arr = [];
        if (!empty($multiple_occ)) {
            $skip_arr = [];
            foreach ($multiple_occ as $occ_row) { /*Get skipping records */
                $_attDate = $occ_row['attDate'];
                $_deviceID = $occ_row['device_id'];
                $_machineID = $occ_row['empMachineID'];
                $_empID = $occ_row['EIdNo'];
                $multiple_occ_chk_arr[] = "{$_attDate}-{$_empID}";

                $occ_arr = $this->db->query("SELECT autoID, tem.empMachineID, attDate, attTime, attDateTime, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem  
                                
                                JOIN (
                                    SELECT
                                        EIdNo,
                                        empattLoc.floorID AS floorID,
                                        empattLoc.empMachineID AS empMachineID,
                                        empattLoc.deviceID AS deviceID 
                                    FROM
                                        srp_employeesdetails
                                        JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                        AND empattLoc.companyID = {$companyID}
                                    WHERE
                                        Erp_companyID = {$companyID} 
                                ) empLoc ON empLoc.empMachineID = tem.empMachineID 	AND empLoc.deviceID = tem.device_id 
	
                                WHERE tem.attDate = '{$_attDate}' 
                                AND empLoc.EIdNo = {$_empID}
                                AND autoID NOT IN (
                                   SELECT * FROM(
                                      SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_asc
                                      JOIN (
                                        SELECT
                                            EIdNo,
                                            empattLoc.deviceID ,
                                            empattLoc.empMachineID
                                        FROM
                                            srp_employeesdetails
                                            JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                            AND empattLoc.companyID = {$companyID} 
                                        WHERE
                                            Erp_companyID = {$companyID} 
                                        ) empLoc_asc ON empLoc_asc.empMachineID = tem_asc.empMachineID 	AND empLoc_asc.deviceID = tem_asc.device_id 
                                      WHERE tem_asc.attDate = '{$_attDate}' AND empLoc_asc.EIdNo = {$_empID}
                                      ORDER BY attDateTime ASC LIMIT 1
                                   ) t2
                                )
                                AND autoID NOT IN (
                                    SELECT * FROM(
                                        SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_dsc
                                        JOIN (
                                            SELECT
                                                EIdNo,
                                                empattLoc.deviceID ,
                                                empattLoc.empMachineID
                                            FROM
                                                srp_employeesdetails
                                                JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                                AND empattLoc.companyID = {$companyID} 
                                            WHERE
                                                Erp_companyID = {$companyID}  
                                        ) empLoc_dsc ON empLoc_dsc.empMachineID = tem_dsc.empMachineID 	AND empLoc_dsc.deviceID = tem_dsc.device_id 
                                        WHERE tem_dsc.attDate = '{$_attDate}' AND  empLoc_dsc.EIdNo = {$_empID} 
                                        ORDER BY attDateTime DESC LIMIT 1 
                                    ) t1
                                )")->result_array();                                

                $skip_arr = array_merge($skip_arr, $occ_arr);
            }

            $skip_arr = array_column($skip_arr, 'autoID');
            $skip_str = implode(',', $skip_arr);
            $skip_str = " AND temp.autoID NOT IN({$skip_str}) ";
        }


        $sql = "SELECT IFNULL(shiftDet.gracePeriod,0) AS gracePeriod,temp.autoID, emp.EIdNo as EIdNo, emp.ECode, emp.Ename2, date_temp.actualDate, empLoc.deviceID, empLoc.empMachineID as empMachineID, temp.attDate, temp.attTime AS attTime, shiftDet.onDutyTime AS onDutyTime,
                shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend,shiftDet.specialOT, floorDescription, fd.floorID,IFNULL(leaveExist.leaveHalf, 0) as leaveHalf, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave,
                IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday, attDateTime, t1.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay, IFNULL(uploadType, 0) uploadType
                FROM srp_employeesdetails AS emp
                JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID} 
                JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                LEFT JOIN (
                        SELECT empData.*, tem.actualDate
                        FROM srp_erp_pay_empattendancedaterangetemp AS tem
                        JOIN (
                            SELECT EIdNo, empLoc.empMachineID AS empMachineID, isCheckin, sh_emp.shiftID, startDate, endDate
                            FROM srp_employeesdetails emp  
                            JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID}
                            LEFT JOIN srp_erp_pay_shiftemployees sh_emp ON sh_emp.empID = emp.EIdNo AND sh_emp.companyID = {$companyID} 		
                            WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0
                        ) empData  
                        WHERE tem.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' AND tem.actualDate BETWEEN startDate AND endDate
                        AND tem.companyID = {$companyID} AND uniqueID = '{$uniqueKey}'
                ) t1 ON t1.EIdNo = emp.EIdNo AND date_temp.actualDate = t1.actualDate
                LEFT JOIN srp_erp_pay_shiftdetails shiftDet ON  shiftDet.shiftID = t1.shiftID AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
                LEFT JOIN ( 
                     SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                ) fd ON fd.floorID = empLoc.floorID 
                LEFT JOIN ( 
                     SELECT autoID, device_id, empMachineID, attDate, attTime, attDateTime, uploadType 
                     FROM srp_erp_pay_empattendancetemptable 
                     WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$frmDate}' AND '{$toDate}' ) AND isUpdated = 0 
                ) temp ON temp.empMachineID = empLoc.empMachineID AND date_temp.actualDate = attDate AND empLoc.deviceID = temp.device_id
                LEFT JOIN ( 
                     SELECT leaveMasterID, empID, startDate, endDate,srp_erp_leavemaster.ishalfDay as leaveHalf FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1
                ) AS leaveExist ON leaveExist.empID = t1.EIdNo AND t1.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = t1.actualDate                 
                WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0 AND empConfirmedYN = 1
                AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' AND date_temp.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' 
                AND NOT EXISTS (
                    SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview AS review 
                    WHERE companyID = {$companyID} AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate
                    GROUP BY empID,attendanceDate
                )  {$skip_str}
                GROUP BY actualDate, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC";


        $temp = $this->db->query($sql)->result_array();

        $tempAttendanceDate = array_column($temp, 'autoID');
        $tempAttendanceArray = array_unique(array_filter($tempAttendanceDate));
        if (!empty($tempAttendanceArray)) {
            foreach ($tempAttendanceArray as $key => $item) {
                $tempattendaceUpdate[$key]['autoID'] = $item;
                $tempattendaceUpdate[$key]['isUpdated'] = 1;
            }

        }

        if (!empty($tempattendaceUpdate)) {
            $this->db->update_batch('`srp_erp_pay_empattendancetemptable` ', $tempattendaceUpdate, 'autoID');
        }

        $data = [];
        if ($temp) {

            $i = 0;
            $employee = '';
            $continue = FALSE;
            foreach ($temp as $row) {
                if ($continue) {
                    /*skip if its set for clockout */
                    $continue = FALSE;
                    $i++;
                    continue;
                }
              
                $employee = $row['EIdNo'];
                $attendanceDate = $row['actualDate'];
                $onDuty = $row['onDutyTime'];
                $graceperiod = $row['gracePeriod'];
               
                $offDuty = $row['offDutyTime'];
                $clockIn = $row['attTime'];
                $nextKey = $i + 1;
                $clockOut = NULL;
                $isAllSet = 0;
                $earlyHours = '';
                $lateHours = '';
                $workingHours = "";
                $totWorkingHours = "";
                $realtime = "";
                $overTimeHours = '';
                $actualWorkingHours_obj = NULL;
                $totWorkingHours_obj = NULL;
                $normaloverTimeHours = 0;
                $weekendOTHours = 0;
                $holidayoverTimeHours = 0;
                $specialOThours = 0;
                $isCheckin = 0;
                $isHalfDay = 1;
                $normalrealtime = 0;
                $weekendrealtime = 0;
                $holidayrealtime = 0;
                $floorID = $row['floorID'];
                $clockoutFloorID = $row['floorID'];

                /*check next array */
                if (array_key_exists($nextKey, $temp)) {
                    if ($temp[$nextKey]['EIdNo'] == $row['EIdNo'] && $attendanceDate == $temp[$nextKey]['actualDate']) {
                        $clockOut = $temp[$nextKey]['attTime']; /*Set clockout*/
                        $clockoutFloorID = $temp[$nextKey]['floorID'];/*Set clockout floorID*/
                        $continue = TRUE;
                    }

                }

                /************ Calculate the actual working hours *************/
                if ($onDuty != NULL && $offDuty != NULL && $clockOut != NULL) {
                    $datetime1 = new DateTime($onDuty);
                    $datetime2 = new DateTime($offDuty);
                    $actualWorkingHours_obj = $datetime1->diff($datetime2);
                    $minutes = $actualWorkingHours_obj->format('%i');
                    $hours = $actualWorkingHours_obj->format('%h');
                    $workingHours = ($hours * 60) + $minutes;
                } else {
                    $isAllSet += 1;
                }


                /****** Employee total working hours for this day ******/
                if ($clockIn != NULL && $clockOut != NULL) {

                    if ($offDuty != '' && $offDuty <= $clockOut) {
                        $datetime1 = new DateTime($offDuty);
                    } else {
                        $datetime1 = new DateTime($clockOut);
                    }
                    if ($onDuty != '' && $onDuty >= $clockIn) {
                        $datetime2 = new DateTime($onDuty);
                    } else {
                        $datetime2 = new DateTime($clockIn);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $Hours = $totWorkingHours_obj->format('%h');
                    $minutes = $totWorkingHours_obj->format('%i');
                    $totWorkingHours = ($Hours * 60) + $minutes;

                    if ($workingHours != "" && $totWorkingHours != "") {
                        $realtime = $totWorkingHours / $workingHours;
                        $realtime = round($realtime, 1);
                    }


                } else {
                    $isAllSet += 1;
                }
   
                if ($isAllSet == 0) {

                    /**** Calculation for late hours ****/
                    $clockIn_datetime = new DateTime($clockIn);
                    
                    $onDuty_datetime = new DateTime($onDuty);
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                        $interval = $clockIn_datetime->diff($onDuty_datetime);

                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $lateHours = $hours * 60 + $minutes;
                    }


                    /**** Calculation for early hours ****/
                    $datetime1 = date('Y-m-d H:i:s', strtotime($clockOut));
                    $datetime2 = date('Y-m-d H:i:s', strtotime($offDuty));
                    if ($datetime1 < $datetime2) {
                        $datetime1 = new DateTime($clockOut);
                        $datetime2 = new DateTime($offDuty);
                        $interval = $datetime2->diff($datetime1);
                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $earlyHours = $hours * 60 + $minutes;

                    }


                    $clockouttime = date('Y-m-d H:i:s', strtotime($clockOut));
                    $offduty = date('Y-m-d H:i:s', strtotime($offDuty));

                    if ($clockouttime > $offduty) {


                        $Fdate = date('Y-m-d');
                        $onDutyForOT = new DateTime($clockOut);
                        if ($onDuty >= $clockIn) {
                            $onDutyForOT = new DateTime($onDuty);
                        } else {
                            $onDutyForOT = new DateTime($clockIn);
                        }
                        //$clockOutForOT = new DateTime($offDuty);

                        $clockOutForOT = new DateTime($clockOut);
                        $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                        $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));


                        if ($totW->format('h:i') > $actW->format('h:i')) {
                            $overTime_obj = $actW->diff($totW);
                            $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                            $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                            $overTimeHours = $hours * 60 + $minutes;
                        } else {
                            $overTimeHours = 0;
                        }

                    }

                }


                if ($clockIn == NULL && $clockOut == NULL) {
                    $AttPresentTypeID = 4;
                    /**** Absents *****/
                } else {
                    $clockIn_datetime = date('Y-m-d H:i', strtotime($clockIn));
                    $onDuty_datetime = date('Y-m-d H:i', strtotime($onDuty));
                    
                    $clockIn_datetime_grace = new DateTime($clockIn);
                    $onDuty_datetime_grace = new DateTime($onDuty);
                 
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                        $AttPresentTypeID = 1;
                    } /**** Presented On time *****/
                    elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                        $AttPresentTypeID = 2;
                    } /**** Presented Later*****/
                    else {
                        $AttPresentTypeID = '';
                    }
                    /***** Let the user decide ****/
                }

                if ($row['isOnLeave'] == 1) {
                    $AttPresentTypeID = 5;
                }
                /**** Employee On Leave *****/


                $normaloverTimeHours = $overTimeHours;
                $normalrealtime = $realtime;
                $isNormalDay = 0;
                $isWeekEndDay = 0;
                $isHoliday = 0;


                if ($row['isWeekend'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = $totWorkingHours;

                    $normalrealtime = 0;
                    $weekendrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 1;


                }

                if ($row['holiday'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = $totWorkingHours;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 0;
                    $isHoliday = 1;
                }

                if ($row['isCheckin'] == 1) {
                    $isCheckin = 1;
                }

                if ($row['isHalfDay'] == 1) {
                    $isHalfDay = 0.5;
                }

                if ($row['leaveHalf'] == 1) {
                    $AttPresentTypeID = 7;
                }

                if ($clockIn == '00:00:00') {
                    $clockIn = null;
                }

                if($row['isSpecialOT'] == 1){
                    $temp_normalOThours = $normaloverTimeHours;
                    if($temp_normalOThours > $row['specialOT']){
                        $normaloverTimeHours = $row['specialOT'];
                        $specialOThours = $temp_normalOThours - $row['specialOT'];
                    }
                }

                /*Check multiple occurrence entry*/
                //$mul_key = "{$attendanceDate}-" . $row['deviceID'] . '-' . $row['empMachineID'];
                $mul_key = "{$attendanceDate}-" . $row['EIdNo'];
                
                $po[] = $mul_key;
                $isMultipleOcc = (array_search($mul_key, $multiple_occ_chk_arr) !== false) ? 1 : 0;
                array_push($data, [
                    'empID' => $row['EIdNo'],
                    'deviceID' => $row['deviceID'],
                    'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                    'floorID' => $row['floorID'],//$floorID,
                    'clockoutFloorID' =>$clockoutFloorID,
                    'attendanceDate' => $attendanceDate,
                    'onDuty' => $onDuty,
                    'gracePeriod' => $graceperiod,
                    'offDuty' => $offDuty,
                    'checkIn' => $clockIn,
                    'checkOut' => $clockOut,
                    'presentTypeID' => $AttPresentTypeID,
                    'lateHours' => $lateHours,
                    'earlyHours' => $earlyHours,
                    'OTHours' => $overTimeHours,
                    'weekendOTHours' => $weekendOTHours,
                    'mustCheck' => $isCheckin,
                    'normalTime' => $isHalfDay,
                    'realTime' => $realtime,
                    'NDaysOT' => $normaloverTimeHours,
                    'holidayOTHours' => $holidayoverTimeHours,
                    'normalDay' => $normalrealtime,
                    'weekend' => $weekendrealtime,
                    'holiday' => $holidayrealtime,
                    'companyID' => current_companyID(),
                    'companyCode' => current_companyCode(),
                    'isNormalDay' => $isNormalDay,
                    'isWeekEndDay' => $isWeekEndDay,
                    'isHoliday' => $isHoliday,
                    'uploadType' => $row['uploadType'],
                    'isMultipleOcc' => $isMultipleOcc,
                    'isSpecialOT' => $row['isSpecialOT'],
                    'specialOThours' => $specialOThours
                ]);


                $i++;
            }

        }
        //echo('<pre>');print_r($data);echo('</pre>');exit;
        $this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');
        
        if (!empty($data)) {
            //echo '<pre>'; print_r($data); echo '</pre>';        die();
            $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);
        } else {
            echo json_encode(['e', 'No records found']);
            exit;
        }

        /* exit;*/
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Failed to Update ']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully uploaded']);
        }


    }

    function attendancePulling()
    {
        //$this->form_validation->set_rules('floorID', 'Floor', 'required');
        $this->form_validation->set_rules('upload_fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('upload_toDate', 'To Date', 'required');
        /* $this->form_validation->set_rules('machineMasterID', 'Machine', 'required');*/
        //$floorID = $this->input->post('floorID');
        $automatic = true;
        $isManualAttendance = $this->input->post('isManualAttendance');
        $isUploadExcel = $this->input->post('isUploadExcel');
        $floor_filter = '';
        //$ = '';
        if (isset($isManualAttendance)) {
            $automatic = false;
        }
        if (isset($isManualAttendance) || isset($isUploadExcel)){
            $this->form_validation->set_rules('floorID', 'Floor', 'required');
            $floorID = $this->input->post('floorID');
            $floor_filter = 'empLoc.floorID = '. $floorID .' AND';
        }

        $companyID = current_companyID();
        $current_userID = current_userID();

        if ($this->form_validation->run() == FALSE) {
            exit(json_encode(['e', validation_errors()]));
        }

        $start_date = $this->input->post('upload_fromDate');
        $end_date = $this->input->post('upload_fromDate');

        if ($automatic) {
            $attTempData = $this->db->query("SELECT isUpdated FROM srp_erp_pay_empattendancetemptable 
                                            WHERE companyID={$companyID} AND isUpdated = 0 
                                             AND attDate BETWEEN '{$start_date}' AND '{$end_date}' ")->result_array();
            if (empty($attTempData)) {
                echo json_encode(['e', 'No Records Founds.']);
                exit;
            }
        }


        $notApprovedatndnce = $this->db->query("SELECT documentCode FROM srp_erp_leavemaster INNER JOIN ( SELECT EIdNo FROM srp_employeesdetails 
                JOIN srp_erp_empattendancelocation empLoc ON empLoc.empID = srp_employeesdetails.EIdNo	
                AND empLoc.companyID = $companyID  WHERE Erp_companyID = $companyID  ) emp ON emp.EIdNo = srp_erp_leavemaster.empID 
                WHERE companyID = $companyID AND applicationType = 1 AND approvedYN = 0 
                AND startDate >= '{$start_date}' AND endDate <= '{$end_date}' ")->result_array();

        $this->db->trans_start();

        /*here*/
        $begin = new DateTime($this->input->post('upload_fromDate'));
        $end = new DateTime($this->input->post('upload_fromDate'));

        $end = $end->add(new DateInterval('P1D'));

        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $companyID = current_companyID();
        $frmDate = $this->input->post('upload_fromDate');
        $toDate = $this->input->post('upload_fromDate');
        $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];

        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }

        if (!$automatic) {
            if (count($date_arr) != 1) {
                echo json_encode(['e', 'You can only pull data within a date for manual attendance.']);
                exit;
            }
        }

        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
        }

        $multiple_occ = $this->db->query("SELECT COUNT(autoID), tem.device_id, tem.empMachineID, attDate, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem
                                JOIN ( SELECT EIdNo,empattLoc.floorID as floorID,empattLoc.empMachineID as empMachineID, empattLoc.deviceID as deviceID 
                                FROM srp_employeesdetails 
			                    JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo AND empattLoc.companyID = {$companyID} 
	                            WHERE Erp_companyID = {$companyID}  )empLoc ON empLoc.empMachineID = tem.empMachineID  
                                AND empLoc.deviceID = tem.device_id
                                WHERE $floor_filter tem.attDate BETWEEN '{$frmDate}' AND '{$toDate}' AND companyID = {$companyID} 		
                                GROUP BY empLoc.EIdNo, attDate
                                HAVING COUNT(autoID) > 2")->result_array();

        $skip_str = "";
        $multiple_occ_chk_arr = [];

        if (!empty($multiple_occ)) {
            $skip_arr = [];
            foreach ($multiple_occ as $occ_row) { /*Get skipping records */
                $_attDate = $occ_row['attDate'];
                $_deviceID = $occ_row['device_id'];
                $_machineID = $occ_row['empMachineID'];
                $_empID = $occ_row['EIdNo'];
                //$multiple_occ_chk_arr[] = "{$_attDate}-{$_deviceID}-{$_machineID}";
                $multiple_occ_chk_arr[] = "{$_attDate}-{$_empID}";

                $occ_arr = $this->db->query("SELECT autoID, tem.empMachineID, attDate, attTime, attDateTime, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem  
                                
                                JOIN (
                                    SELECT
                                        EIdNo,
                                        empattLoc.floorID AS floorID,
                                        empattLoc.empMachineID AS empMachineID,
                                        empattLoc.deviceID AS deviceID 
                                    FROM
                                        srp_employeesdetails
                                        JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                        AND empattLoc.companyID = {$companyID}
                                    WHERE
                                        Erp_companyID = {$companyID} 
                                ) empLoc ON empLoc.empMachineID = tem.empMachineID 	AND empLoc.deviceID = tem.device_id 
	
                                WHERE tem.attDate = '{$_attDate}' 
                                AND empLoc.EIdNo = {$_empID}
                                AND autoID NOT IN (
                                   SELECT * FROM(
                                      SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_asc
                                      JOIN (
                                        SELECT
                                            EIdNo,
                                            empattLoc.deviceID ,
                                            empattLoc.empMachineID
                                        FROM
                                            srp_employeesdetails
                                            JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                            AND empattLoc.companyID = {$companyID} 
                                        WHERE
                                            Erp_companyID = {$companyID} 
                                        ) empLoc_asc ON empLoc_asc.empMachineID = tem_asc.empMachineID 	AND empLoc_asc.deviceID = tem_asc.device_id 
                                      WHERE tem_asc.attDate = '{$_attDate}' AND empLoc_asc.EIdNo = {$_empID}
                                      ORDER BY attDateTime ASC LIMIT 1
                                   ) t2
                                )
                                AND autoID NOT IN (
                                    SELECT * FROM(
                                        SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_dsc
                                        JOIN (
                                            SELECT
                                                EIdNo,
                                                empattLoc.deviceID ,
                                                empattLoc.empMachineID
                                            FROM
                                                srp_employeesdetails
                                                JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                                AND empattLoc.companyID = {$companyID} 
                                            WHERE
                                                Erp_companyID = {$companyID}  
                                        ) empLoc_dsc ON empLoc_dsc.empMachineID = tem_dsc.empMachineID 	AND empLoc_dsc.deviceID = tem_dsc.device_id 
                                        WHERE tem_dsc.attDate = '{$_attDate}' AND  empLoc_dsc.EIdNo = {$_empID} 
                                        ORDER BY attDateTime DESC LIMIT 1 
                                    ) t1
                                )")->result_array();                                

                $skip_arr = array_merge($skip_arr, $occ_arr);
            }
        }

        $emp_manual = '';
        if (isset($isManualAttendance)){
            //AND attDate IS NOT NULL
            $emp_manual = ' AND (isMobileCheckIn != 1 AND (emp.isCheckin IS NULL OR emp.isCheckin != 1)) ';
        }else{
            $emp_manual = ' AND (isMobileCheckIn = 1 OR emp.isCheckin = 1) ';
        }
       

        $sql = "SELECT IFNULL(shiftDet.gracePeriod,0) AS gracePeriod,temp.autoID, emp.EIdNo as EIdNo, emp.ECode, emp.Ename2, date_temp.actualDate, empLoc.deviceID, empLoc.empMachineID as empMachineID, temp.attDate, temp.attTime AS attTime,temp.attType, shiftDet.onDutyTime AS onDutyTime,
                shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend,shiftDet.specialOT,shiftDet.isNextDay,shiftDet.shiftID, floorDescription, fd.floorID,IFNULL(leaveExist.leaveHalf, 0) as leaveHalf, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS leaveMasterID,
                IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday,shiftMaster.isSpecialOT, attDateTime, t1.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay, IFNULL(uploadType, 0) uploadType,IFNULL(temp.manualShiftID,shiftMaster.shiftID) as manualShiftID
                FROM srp_employeesdetails AS emp
                JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID} 
                JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                LEFT JOIN (
                        SELECT empData.*, tem.actualDate
                        FROM srp_erp_pay_empattendancedaterangetemp AS tem
                        JOIN (
                            SELECT EIdNo, empLoc.empMachineID AS empMachineID, isCheckin, sh_emp.shiftID, startDate, endDate
                            FROM srp_employeesdetails emp  
                            JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID}
                            LEFT JOIN srp_erp_pay_shiftemployees sh_emp ON sh_emp.empID = emp.EIdNo AND sh_emp.companyID = {$companyID} 		
                            WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0
                        ) empData  
                        WHERE tem.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' AND tem.actualDate BETWEEN startDate AND endDate
                        AND tem.companyID = {$companyID} AND uniqueID = '{$uniqueKey}'
                ) t1 ON t1.EIdNo = emp.EIdNo AND date_temp.actualDate = t1.actualDate
                LEFT JOIN srp_erp_pay_shiftdetails shiftDet ON  shiftDet.shiftID = t1.shiftID AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
                LEFT JOIN srp_erp_pay_shiftmaster shiftMaster ON  shiftMaster.shiftID = t1.shiftID  
                LEFT JOIN ( 
                     SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                ) fd ON fd.floorID = empLoc.floorID 
                LEFT JOIN ( 
                     SELECT autoID, device_id, empMachineID, attDate, attTime, attDateTime, uploadType,attType,manualShiftID
                     FROM srp_erp_pay_empattendancetemptable 
                     WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$frmDate}' AND '{$toDate}' ) AND isUpdated = 0 
                ) temp ON temp.empMachineID = empLoc.empMachineID AND date_temp.actualDate = attDate AND empLoc.deviceID = temp.device_id
                LEFT JOIN ( 
                     SELECT leaveMasterID, empID, startDate, endDate,srp_erp_leavemaster.ishalfDay as leaveHalf FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1 AND cancelledYN != 1
                ) AS leaveExist ON leaveExist.empID = t1.EIdNo AND t1.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = t1.actualDate                 
                WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0 AND empConfirmedYN = 1 {$emp_manual}
                AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' AND date_temp.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' 
                AND NOT EXISTS (
                    SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview AS review 
                    WHERE companyID = {$companyID} AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate AND review.confirmedYN = 1
                    GROUP BY empID,attendanceDate
                ) 
                GROUP BY actualDate, attType, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC";
        
        $temp = $this->db->query($sql)->result_array();

        $tempAttendanceDate = array_column($temp, 'autoID');
        $tempAttendanceArray = array_unique(array_filter($tempAttendanceDate));
        if (!empty($tempAttendanceArray)) {
            foreach ($tempAttendanceArray as $key => $item) {
                $tempattendaceUpdate[$key]['autoID'] = $item;
                $tempattendaceUpdate[$key]['isUpdated'] = 1;
            }

        }

        if (!empty($tempattendaceUpdate)) {
           $this->db->update_batch('`srp_erp_pay_empattendancetemptable` ', $tempattendaceUpdate, 'autoID');
        }

        $data = [];
        if ($temp) {
            
            $i = 0;
            $employee = '';
            $continue = FALSE;
            $emp_checkin_out = array();

            foreach ($temp as $row) {

                $emp_checkin_out[$row['EIdNo']]['nextDay'] = $row['isNextDay'];
                $emp_checkin_out[$row['EIdNo']]['checkindate'] =  $row['attDate'];
                $emp_checkin_out[$row['EIdNo']]['onDutyTime'] =  $row['onDutyTime'];
                $emp_checkin_out[$row['EIdNo']]['offDutyTime'] =  $row['offDutyTime'];
                $emp_checkin_out[$row['EIdNo']]['checkoutdate'] = $row['attDate'];
                $emp_checkin_out[$row['EIdNo']]['empMachineID'] = $row['empMachineID'];

                if($row['isNextDay'] == 1){
                    $emp_checkin_out[$row['EIdNo']]['checkoutdate'] = date('Y-m-d',strtotime('+1 days',strtotime($row['attDate'])));
                }
                
                if(!isset($emp_checkin_out[$row['EIdNo']]['checkin'])){
                    $emp_checkin_out[$row['EIdNo']]['checkin'] = NULL;
                }

                if(!isset($emp_checkin_out[$row['EIdNo']]['checkout'])){
                    $emp_checkin_out[$row['EIdNo']]['checkout'] = NULL;
                }
               
                if($row['attType'] == 'I'){
                    if($emp_checkin_out[$row['EIdNo']]['checkin'] == NULL){
                        $emp_checkin_out[$row['EIdNo']]['checkin'] =  $row['attTime'];
                    }else{
                        $emp_checkin_out[$row['EIdNo']]['checkout'] =  $row['attTime'];
                    }
                }else if($row['attType'] == 'O'){
                    $emp_checkin_out[$row['EIdNo']]['checkout'] =  $row['attTime'];
                    
                }else{
                    $emp_checkin_out[$row['EIdNo']]['checkout'] = isset($emp_checkin_out[$row['EIdNo']]['checkout']) ? $emp_checkin_out[$row['EIdNo']]['checkout'] : NULL;
                    $emp_checkin_out[$row['EIdNo']]['checkin'] = isset($emp_checkin_out[$row['EIdNo']]['checkin']) ? $emp_checkin_out[$row['EIdNo']]['checkin'] : NULL;

                }

            }

            foreach($emp_checkin_out as $key => $emp_checkin){
                $nextDay = $emp_checkin['nextDay'];
                $checkinDate = $emp_checkin['checkindate'];
                $ondutyTime = $emp_checkin['onDutyTime'];
                $checkinTime = $emp_checkin['checkin'];
                $empMachineID = $emp_checkin['empMachineID'];

                $grace_period = 3;
                $checkinNextDay = date('Y-m-d',strtotime('+1 days',strtotime($emp_checkin['checkindate'])));
                $time_duty_end = date('Y-m-d H:i:s',strtotime('-3 Hours',strtotime($checkinNextDay.' '.$ondutyTime)));
                $time_duty_start = date('Y-m-d H:i:s',strtotime($checkinDate.' '.$ondutyTime));

                $checkin_date_time = date('Y-m-d H:i:s',strtotime($checkinDate.' '.$checkinTime));

                if($nextDay == 1){

                    //get records from next day
                    $attendance_records =  $this->db->query("
                        SELECT *
                        FROM srp_erp_pay_empattendancetemptable as temp
                        WHERE companyID = '$companyID' AND attDateTime BETWEEN '{$time_duty_start}' AND '{$time_duty_end}' AND empMachineID = '{$empMachineID}'
                    ")->result_array();

                    foreach($attendance_records as $attendance){
                        $check_out_time = date('Y-m-d H:i:s',strtotime($attendance['attDate'].' '.$attendance['attTime']));
                        if($check_out_time > $checkin_date_time){
                            $emp_checkin_out[$key]['checkout'] = $attendance['attTime'];
                            $emp_checkin_out[$key]['checkoutdate'] = $attendance['attDate'];
                        }

                    }

                }


            }


            $emp_added_arr = array();
        
            foreach ($temp as $row) {

                if (in_array($row['EIdNo'] , $emp_added_arr) ) {
                    continue;
                }

                //check employee view exists
                $emp_view_rec = get_employee_view_record($row['EIdNo'],$row['actualDate']);


                $shiftID = $row['shiftID'];
                $onDuty = $row['onDutyTime'];
                $offDuty = $row['offDutyTime'];

                if($row['manualShiftID'] > 0){

                    $shift_details = $this->db->query("
                        SELECT * 
                        FROM srp_erp_pay_shiftmaster as master
                        LEFT JOIN srp_erp_pay_shiftdetails as details ON master.shiftID = details.shiftID
                        WHERE master.shiftID = '{$row['manualShiftID']}' AND details.weekDayNo = WEEKDAY('".$row['actualDate']."')
                     ")->row_array();

                     $shiftID = $shift_details['shiftID'];
                     $onDuty = $shift_details['onDutyTime'];
                     $offDuty = $shift_details['offDutyTime'];
        
                }


                $emp_added_arr[] = $row['EIdNo'];
                $ex_checkin = null;
                $ex_checkout = null;
                $ex_checkin_date = null;
                $ex_checkout_date = null;
              
                $employee = $row['EIdNo'];
                $attendanceDate = $row['actualDate'];
            
                $graceperiod = $row['gracePeriod'];

                $ondutyDateTime = $row['attDate'].' '.$row['onDutyTime'];
                $attendanceDay = $row['attDate'];
                $attendanceNextDay = date('Y-m-d',strtotime('+1 days',strtotime($row['attDate'])));
                $offdutyDayTime = $row['attDate'].' '.$row['offDutyTime'];
                // $clockinDayTime = 
                // $clockOutDayTime = 

                if($row['isNextDay'] == 1){
                    $offdutyDayTime = $attendanceNextDay.' '.$row['offDutyTime'];
                }


             
                
                if($emp_view_rec){
                    $ex_checkin = $emp_view_rec['checkIn'];
                    $ex_checkin_date = $emp_view_rec['checkInDate'];
                    $ex_checkout = $emp_view_rec['checkOut'];
                    $ex_checkout_date = $emp_view_rec['checkOutDate'];
                }


                $clockIn = ($ex_checkin) ? $ex_checkin : $emp_checkin_out[$row['EIdNo']]['checkin'];
                $clockOut = ($emp_checkin_out[$row['EIdNo']]['checkout']) ? $emp_checkin_out[$row['EIdNo']]['checkout'] : $ex_checkout;

                $clockInDate = ($ex_checkin_date) ? $ex_checkin_date :  $emp_checkin_out[$row['EIdNo']]['checkindate'];
                $clockOutDate = ($ex_checkout_date) ? $ex_checkout_date :  $emp_checkin_out[$row['EIdNo']]['checkoutdate'];

                $clockInDateTime = $clockInDate.' '.$clockIn;
                $clockOutDateTime = $clockOutDate.' '.$clockOut;
                $isShiftNextDay = ($row['isNextDay']) ? $row['isNextDay'] : 0;
                
                $nextKey = $i + 1;
               
                $isAllSet = 0;
                $earlyHours = '';
                $lateHours = '';
                $workingHours = "";
                $totWorkingHours = "";
                $realtime = "";
                $overTimeHours = '';
                $actualWorkingHours_obj = NULL;
                $totWorkingHours_obj = NULL;
                $normaloverTimeHours = 0;
                $weekendOTHours = 0;
                $holidayoverTimeHours = 0;
                $specialOThours = 0;
                $isCheckin = 0;
                $isHalfDay = 1;
                $normalrealtime = 0;
                $weekendrealtime = 0;
                $holidayrealtime = 0;
                $floorID = $row['floorID'];
                $clockoutFloorID = $row['floorID'];
               

                /*check next array */
                if (array_key_exists($nextKey, $temp)) {
                    if ($temp[$nextKey]['EIdNo'] == $row['EIdNo'] && $attendanceDate == $temp[$nextKey]['actualDate']) {
                        //$clockOut = $temp[$nextKey]['attTime']; /*Set clockout*/
                        $clockoutFloorID = $temp[$nextKey]['floorID'];/*Set clockout floorID*/
                       // $continue = TRUE;
                    }

                }

                /************ Calculate the actual working hours *************/
                if ($onDuty != NULL && $offDuty != NULL && $clockOut != NULL) {
                    // $datetime1 = new DateTime($onDuty);
                    // $datetime2 = new DateTime($offDuty);
                    $datetime1 = new DateTime($ondutyDateTime);
                    $datetime2 = new DateTime($offdutyDayTime);
                    $actualWorkingHours_obj = $datetime1->diff($datetime2);
                    $minutes = $actualWorkingHours_obj->format('%i');
                    $hours = $actualWorkingHours_obj->format('%h');
                    $workingHours = ($hours * 60) + $minutes;
                } else {
                    $isAllSet += 1;
                }

                /****** Employee total working hours for this day ******/
                if ($clockIn != NULL && $clockOut != NULL) {

                    if ($offDuty != '' && $offdutyDayTime <= $clockOutDateTime) {
                        $datetime1 = new DateTime($offdutyDayTime);
                    } else {
                        $datetime1 = new DateTime($clockOutDateTime);
                    }
                    if ($onDuty != '' && $ondutyDateTime >= $clockInDateTime) {
                        $datetime2 = new DateTime($ondutyDateTime);
                    } else {
                        $datetime2 = new DateTime($clockInDateTime);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $Hours = $totWorkingHours_obj->format('%h');
                    $minutes = $totWorkingHours_obj->format('%i');
                    $totWorkingHours = ($Hours * 60) + $minutes;

                    if ($workingHours != "" && $totWorkingHours != "") {
                        $realtime = $totWorkingHours / $workingHours;
                        $realtime = round($realtime, 1);
                    }


                } else {
                    $isAllSet += 1;
                }

           
   
                if ($isAllSet == 0) {

                    /**** Calculation for late hours ****/
                    $clockIn_datetime = new DateTime($clockInDateTime);
                    
                    $onDuty_datetime = new DateTime($ondutyDateTime);
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                        $interval = $clockIn_datetime->diff($onDuty_datetime);

                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $lateHours = $hours * 60 + $minutes;
                    }


                    /**** Calculation for early hours ****/
                    $datetime1 = $clockOutDateTime;//date('Y-m-d H:i:s', strtotime($clockOut));
                    $datetime2 = $offdutyDayTime;//date('Y-m-d H:i:s', strtotime($offDuty));
                    if ($datetime1 < $datetime2) {
                        $datetime1 = new DateTime($clockOutDateTime);
                        $datetime2 = new DateTime($offdutyDayTime);
                        $interval = $datetime2->diff($datetime1);
                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $earlyHours = $hours * 60 + $minutes;

                    }


                    $clockouttime = $clockOutDateTime;//date('Y-m-d H:i:s', strtotime($clockOut));
                    $offduty = $offdutyDayTime;//date('Y-m-d H:i:s', strtotime($offDuty));

                    if ($clockouttime > $offduty) {


                        $Fdate = date('Y-m-d');
                        $onDutyForOT = new DateTime($clockOutDateTime);

                        if ($ondutyDateTime >= $clockInDateTime) {
                            $onDutyForOT = new DateTime($ondutyDateTime);
                        } else {
                            $onDutyForOT = new DateTime($clockInDateTime);
                        }
                        //$clockOutForOT = new DateTime($offDuty);

                        $clockOutForOT = new DateTime($clockOutDateTime);
                        $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                        // $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        // $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        $totW = new DateTime($workingHours_obj->format('' . $clockOutDate . ' %h:%i:%s'));
                        $actW = new DateTime($actualWorkingHours_obj->format('' . $clockInDate . ' %h:%i:%s'));

                        $worktime = $totW->format('' . $clockOutDate . ' H:i:s');

                        $actualtime = $actW->format('' . $clockInDate . ' H:i:s');

                        if ($worktime <= $actualtime) {
                            $overTimeHours = 0;
                        } else {
                            $overTime_obj = $actW->diff($totW);
                            $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                            $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                            $overTimeHours = $hours * 60 + $minutes;

                        }
                      

                    }

                }
           

                if ($clockIn == NULL && $clockOut == NULL) {
                    $AttPresentTypeID = 4;
                    /**** Absents *****/
                } else {
                    $clockIn_datetime = $clockInDateTime;//date('Y-m-d H:i', strtotime($clockIn));
                    $onDuty_datetime = $ondutyDateTime;//date('Y-m-d H:i', strtotime($onDuty));
                    
                    $clockIn_datetime_grace = new DateTime($clockInDateTime);
                    $onDuty_datetime_grace = new DateTime($ondutyDateTime);
                 
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                        $AttPresentTypeID = 1;
                    } /**** Presented On time *****/
                    elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                        $AttPresentTypeID = 2;
                    } /**** Presented Later*****/
                    else {
                        $AttPresentTypeID = '';
                    }
                    /***** Let the user decide ****/
                }

                if ($row['isOnLeave'] == 1) {
                    $AttPresentTypeID = 5;
                }
                /**** Employee On Leave *****/


                $normaloverTimeHours = $overTimeHours;
                $normalrealtime = $realtime;
                $isNormalDay = 0;
                $isWeekEndDay = 0;
                $isHoliday = 0;


                if ($row['isWeekend'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = $totWorkingHours;

                    $normalrealtime = 0;
                    $weekendrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 1;


                }

                if ($row['holiday'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = $totWorkingHours;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 0;
                    $isHoliday = 1;
                }

                if ($row['isCheckin'] == 1) {
                    $isCheckin = 1;
                }

                if ($row['isHalfDay'] == 1) {
                    $isHalfDay = 0.5;
                }

                if ($row['leaveHalf'] == 1) {
                    $AttPresentTypeID = 7;
                }

                if ($clockIn == '00:00:00') {
                    $clockIn = null;
                }

                if($row['isSpecialOT'] == 1){
                    $temp_normalOThours = $normaloverTimeHours;
                    if($temp_normalOThours > ($row['specialOT'] * 60)){
                        $normaloverTimeHours = ($row['specialOT'] * 60);
                        $specialOThours = $temp_normalOThours - ($row['specialOT'] * 60);
                    }else{
                        $specialOThours = 0;
                    }
                }

                /*Check multiple occurrence entry*/
                //$mul_key = "{$attendanceDate}-" . $row['deviceID'] . '-' . $row['empMachineID'];
                $mul_key = "{$attendanceDate}-" . $row['EIdNo'];
                
                $po[] = $mul_key;
                $isMultipleOcc = (array_search($mul_key, $multiple_occ_chk_arr) !== false) ? 1 : 0;

                if($emp_view_rec){

                    $record_data =  array(
                        'empID' => $row['EIdNo'],
                        'deviceID' => $row['deviceID'],
                        'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                        'floorID' => $row['floorID'],//$floorID,
                        'clockoutFloorID' =>$clockoutFloorID,
                        'attendanceDate' => $attendanceDate,
                        'onDuty' => $onDuty,
                        'gracePeriod' => $graceperiod,
                        'offDuty' => $offDuty,
                        'checkIn' => $clockIn,
                        'checkOut' => $clockOut,
                        'isShiftNextDay' => $isShiftNextDay,
                        'checkInDate' => $clockInDate,
                        'checkOutDate' => $clockOutDate,
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'isNormalDay' => $isNormalDay,
                        'isWeekEndDay' => $isWeekEndDay,
                        'isHoliday' => $isHoliday,
                        'uploadType' => $row['uploadType'],
                        'isMultipleOcc' => $isMultipleOcc,
                        'isSpecialOT' => $row['isSpecialOT'],
                        'specialOThours' => $specialOThours,
                        'shiftID' => $shiftID,
                        'leaveMasterId' => $row['leaveMasterID'],
                    );
                    
                    $res = $this->db->where('empID',$employee)
                        ->where('attendanceDate',$attendanceDate)
                        ->where('companyID',current_companyID())
                        ->update('srp_erp_pay_empattendancereview', $record_data);

                  
                }else{

                    array_push($data, [
                        'empID' => $row['EIdNo'],
                        'deviceID' => $row['deviceID'],
                        'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                        'floorID' => $row['floorID'],//$floorID,
                        'clockoutFloorID' =>$clockoutFloorID,
                        'attendanceDate' => $attendanceDate,
                        'onDuty' => $onDuty,
                        'gracePeriod' => $graceperiod,
                        'offDuty' => $offDuty,
                        'checkIn' => $clockIn,
                        'checkInDate' => $clockInDate,
                        'checkOutDate' => $clockOutDate,
                        'checkOut' => $clockOut,
                        'isShiftNextDay' => $isShiftNextDay,
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'isNormalDay' => $isNormalDay,
                        'isWeekEndDay' => $isWeekEndDay,
                        'isHoliday' => $isHoliday,
                        'uploadType' => $row['uploadType'],
                        'isMultipleOcc' => $isMultipleOcc,
                        'isSpecialOT' => $row['isSpecialOT'],
                        'specialOThours' => $specialOThours,
                        'shiftID' => $shiftID,
                        'leaveMasterId' => $row['leaveMasterID'],
                    ]);

                }

                $i++;
            }

        }

        $this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');
        
        if (!empty($data)) {
            $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);
        } 

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Failed to Update ']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully uploaded']);
        }


    }


    function attendancePulling_without_sot()
    {
        $this->form_validation->set_rules('upload_fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('upload_toDate', 'To Date', 'required');
        $automatic = true;
        $isManualAttendance = $this->input->post('isManualAttendance');
        $isUploadExcel = $this->input->post('isUploadExcel');
        $floor_filter = '';
        //$ = '';
        if (isset($isManualAttendance)) {
            $automatic = false;
        }
        if (isset($isManualAttendance) || isset($isUploadExcel)){
            $this->form_validation->set_rules('floorID', 'Floor', 'required');
            $floorID = $this->input->post('floorID');
            $floor_filter = 'empLoc.floorID = '. $floorID .' AND';
        }


        $companyID = current_companyID();
        $current_userID = current_userID();

        if ($this->form_validation->run() == FALSE) {
            exit(json_encode(['e', validation_errors()]));
        }

        $start_date = $this->input->post('upload_fromDate');
        $end_date = $this->input->post('upload_toDate');

        if ($automatic) {
            $attTempData = $this->db->query("SELECT isUpdated FROM srp_erp_pay_empattendancetemptable 
                                            WHERE companyID={$companyID} AND isUpdated = 0 
                                             AND attDate BETWEEN '{$start_date}' AND '{$end_date}' ")->result_array();
            if (empty($attTempData)) {
                echo json_encode(['e', 'No Records Founds.']);
                exit;
            }
        }


        $notApprovedatndnce = $this->db->query("SELECT documentCode FROM srp_erp_leavemaster INNER JOIN ( SELECT EIdNo FROM srp_employeesdetails 
            JOIN srp_erp_empattendancelocation empLoc ON empLoc.empID = srp_employeesdetails.EIdNo	
            AND empLoc.companyID = $companyID  WHERE Erp_companyID = $companyID  ) emp ON emp.EIdNo = srp_erp_leavemaster.empID 
            WHERE companyID = $companyID AND applicationType = 1 AND approvedYN = 0 
            AND startDate >= '{$start_date}' AND endDate <= '{$end_date}' ")->result_array();

        $this->db->trans_start();

        /*here*/
        $begin = new DateTime($this->input->post('upload_fromDate'));
        $end = new DateTime($this->input->post('upload_toDate'));

        $end = $end->add(new DateInterval('P1D'));

        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $companyID = current_companyID();
        $frmDate = $this->input->post('upload_fromDate');
        $toDate = $this->input->post('upload_toDate');
        $uniqueKey = current_userID() . '' . current_companyID() . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];

        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }

        if (!$automatic) {
            if (count($date_arr) != 1) {
                echo json_encode(['e', 'You can only pull data within a date for manual attendance.']);
                exit;
            }
        }

        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
        }

        $multiple_occ = $this->db->query("SELECT COUNT(autoID), tem.device_id, tem.empMachineID, attDate, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem
                                JOIN ( SELECT EIdNo,empattLoc.floorID as floorID,empattLoc.empMachineID as empMachineID, empattLoc.deviceID as deviceID 
                                FROM srp_employeesdetails 
			                    JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo AND empattLoc.companyID = {$companyID} 
	                            WHERE Erp_companyID = {$companyID}  )empLoc ON empLoc.empMachineID = tem.empMachineID  
                                AND empLoc.deviceID = tem.device_id
                                WHERE $floor_filter tem.attDate BETWEEN '{$frmDate}' AND '{$toDate}' AND companyID = {$companyID} 		
                                GROUP BY empLoc.EIdNo, attDate
                                HAVING COUNT(autoID) > 2")->result_array();

        $skip_str = "";
        $multiple_occ_chk_arr = [];

        if (!empty($multiple_occ)) {
            $skip_arr = [];
            foreach ($multiple_occ as $occ_row) { /*Get skipping records */
                $_attDate = $occ_row['attDate'];
                $_deviceID = $occ_row['device_id'];
                $_machineID = $occ_row['empMachineID'];
                $_empID = $occ_row['EIdNo'];
                $multiple_occ_chk_arr[] = "{$_attDate}-{$_empID}";

                $occ_arr = $this->db->query("SELECT autoID, tem.empMachineID, attDate, attTime, attDateTime, empLoc.EIdNo
                                FROM srp_erp_pay_empattendancetemptable AS tem  
                                
                                JOIN (
                                    SELECT
                                        EIdNo,
                                        empattLoc.floorID AS floorID,
                                        empattLoc.empMachineID AS empMachineID,
                                        empattLoc.deviceID AS deviceID 
                                    FROM
                                        srp_employeesdetails
                                        JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                        AND empattLoc.companyID = {$companyID}
                                    WHERE
                                        Erp_companyID = {$companyID} 
                                ) empLoc ON empLoc.empMachineID = tem.empMachineID 	AND empLoc.deviceID = tem.device_id 
	
                                WHERE tem.attDate = '{$_attDate}' 
                                AND empLoc.EIdNo = {$_empID}
                                AND autoID NOT IN (
                                   SELECT * FROM(
                                      SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_asc
                                      JOIN (
                                        SELECT
                                            EIdNo,
                                            empattLoc.deviceID ,
                                            empattLoc.empMachineID
                                        FROM
                                            srp_employeesdetails
                                            JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                            AND empattLoc.companyID = {$companyID} 
                                        WHERE
                                            Erp_companyID = {$companyID} 
                                        ) empLoc_asc ON empLoc_asc.empMachineID = tem_asc.empMachineID 	AND empLoc_asc.deviceID = tem_asc.device_id 
                                      WHERE tem_asc.attDate = '{$_attDate}' AND empLoc_asc.EIdNo = {$_empID}
                                      ORDER BY attDateTime ASC LIMIT 1
                                   ) t2
                                )
                                AND autoID NOT IN (
                                    SELECT * FROM(
                                        SELECT autoID FROM srp_erp_pay_empattendancetemptable AS tem_dsc
                                        JOIN (
                                            SELECT
                                                EIdNo,
                                                empattLoc.deviceID ,
                                                empattLoc.empMachineID
                                            FROM
                                                srp_employeesdetails
                                                JOIN srp_erp_empattendancelocation empattLoc ON empattLoc.empID = srp_employeesdetails.EIdNo 
                                                AND empattLoc.companyID = {$companyID} 
                                            WHERE
                                                Erp_companyID = {$companyID}  
                                        ) empLoc_dsc ON empLoc_dsc.empMachineID = tem_dsc.empMachineID 	AND empLoc_dsc.deviceID = tem_dsc.device_id 
                                        WHERE tem_dsc.attDate = '{$_attDate}' AND  empLoc_dsc.EIdNo = {$_empID} 
                                        ORDER BY attDateTime DESC LIMIT 1 
                                    ) t1
                                )")->result_array();                                

                $skip_arr = array_merge($skip_arr, $occ_arr);
            }

            $skip_arr = array_column($skip_arr, 'autoID');
            $skip_str = implode(',', $skip_arr);
            $skip_str = " AND temp.autoID NOT IN({$skip_str}) ";
        }


        $sql = "SELECT IFNULL(shiftDet.gracePeriod,0) AS gracePeriod,temp.autoID, emp.EIdNo as EIdNo, emp.ECode, emp.Ename2, date_temp.actualDate, empLoc.deviceID, empLoc.empMachineID as empMachineID, temp.attDate, temp.attTime AS attTime,temp.attType, shiftDet.onDutyTime AS onDutyTime,
                shiftDet.offDutyTime AS offDutyTime, shiftDet.isWeekend,shiftDet.specialOT, floorDescription, fd.floorID,IFNULL(leaveExist.leaveHalf, 0) as leaveHalf, IF( IFNULL(leaveMasterID, 0), 1, 0 ) AS isOnLeave,
                IF (IFNULL(holiday_flag, 0), 1, 0) AS holiday,shiftMaster.isSpecialOT, attDateTime, t1.isCheckin, IF (IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay, IFNULL(uploadType, 0) uploadType
                FROM srp_employeesdetails AS emp
                JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID} 
                JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                LEFT JOIN (
                        SELECT empData.*, tem.actualDate
                        FROM srp_erp_pay_empattendancedaterangetemp AS tem
                        JOIN (
                            SELECT EIdNo, empLoc.empMachineID AS empMachineID, isCheckin, sh_emp.shiftID, startDate, endDate
                            FROM srp_employeesdetails emp  
                            JOIN srp_erp_empattendancelocation AS empLoc ON emp.EIdNo = empLoc.empID AND empLoc.companyID = {$companyID}
                            LEFT JOIN srp_erp_pay_shiftemployees sh_emp ON sh_emp.empID = emp.EIdNo AND sh_emp.companyID = {$companyID} 		
                            WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0
                        ) empData  
                        WHERE tem.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' AND tem.actualDate BETWEEN startDate AND endDate
                        AND tem.companyID = {$companyID} AND uniqueID = '{$uniqueKey}'
                ) t1 ON t1.EIdNo = emp.EIdNo AND date_temp.actualDate = t1.actualDate
                LEFT JOIN srp_erp_pay_shiftdetails shiftDet ON  shiftDet.shiftID = t1.shiftID AND shiftDet.weekDayNo = WEEKDAY(t1.actualDate) 
                LEFT JOIN srp_erp_pay_shiftmaster shiftMaster ON  shiftMaster.shiftID = t1.shiftID  
                LEFT JOIN ( 
                     SELECT floorID, floorDescription FROM srp_erp_pay_floormaster WHERE companyID = {$companyID} 
                ) fd ON fd.floorID = empLoc.floorID 
                LEFT JOIN ( 
                     SELECT autoID, device_id, empMachineID, attDate, attTime, attDateTime, uploadType,attType 
                     FROM srp_erp_pay_empattendancetemptable 
                     WHERE companyID = {$companyID} AND ( attDate BETWEEN '{$frmDate}' AND '{$toDate}' ) AND isUpdated = 0 
                ) temp ON temp.empMachineID = empLoc.empMachineID AND date_temp.actualDate = attDate AND empLoc.deviceID = temp.device_id
                LEFT JOIN ( 
                     SELECT leaveMasterID, empID, startDate, endDate,srp_erp_leavemaster.ishalfDay as leaveHalf FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1
                ) AS leaveExist ON leaveExist.empID = t1.EIdNo AND t1.actualDate BETWEEN leaveExist.startDate AND leaveExist.endDate 
                LEFT JOIN ( SELECT * FROM srp_erp_calender WHERE companyID = {$companyID} ) AS calenders ON fulldate = t1.actualDate                 
                WHERE $floor_filter Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND  isDischarged = 0 AND empConfirmedYN = 1
                AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' AND date_temp.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' 
                AND NOT EXISTS (
                    SELECT empID,attendanceDate FROM srp_erp_pay_empattendancereview AS review 
                    WHERE companyID = {$companyID} AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate AND review.confirmedYN = 1
                    GROUP BY empID,attendanceDate
                ) {$skip_str}
                GROUP BY actualDate, attDateTime, EIdNo ORDER BY EIdNo, actualDate, temp.autoID ASC";


        $temp = $this->db->query($sql)->result_array();
        
        // print_r($this->db->last_query()); exit;
     
    
        //echo '<pre>'.$this->db->last_query().'</pre>'; die(); echo '<pre>'; print_r($temp); echo '</pre>'; die();
        $tempAttendanceDate = array_column($temp, 'autoID');
        $tempAttendanceArray = array_unique(array_filter($tempAttendanceDate));
        if (!empty($tempAttendanceArray)) {
            foreach ($tempAttendanceArray as $key => $item) {
                $tempattendaceUpdate[$key]['autoID'] = $item;
                $tempattendaceUpdate[$key]['isUpdated'] = 1;
            }

        }

        if (!empty($tempattendaceUpdate)) {
            $this->db->update_batch('`srp_erp_pay_empattendancetemptable` ', $tempattendaceUpdate, 'autoID');
        }

        $data = [];
        if ($temp) {
            /*    echo '<pre>'; print_r($temp);
            exit;  */
            $i = 0;
            $employee = '';
            $continue = FALSE;
            $emp_checkin_out = array();

            foreach ($temp as $row) {
                if($row['attType'] == 'I'){
                    $emp_checkin_out[$row['EIdNo']]['checkin'] =  $row['attTime'];
                }else if($row['attType'] == 'O'){
                    $emp_checkin_out[$row['EIdNo']]['checkout'] =  $row['attTime'];
                }else{
                    $emp_checkin_out[$row['EIdNo']]['checkout'] = isset($emp_checkin_out[$row['EIdNo']]['checkout']) ? $emp_checkin_out[$row['EIdNo']]['checkout'] : 0;
                    $emp_checkin_out[$row['EIdNo']]['checkin'] = isset($emp_checkin_out[$row['EIdNo']]['checkin']) ? $emp_checkin_out[$row['EIdNo']]['checkin'] : 0;
                }
            }

           
       
            $emp_added_arr = array();
            foreach ($temp as $row) {
               
                if (in_array($row['EIdNo'] , $emp_added_arr) ) {
                    continue;
                }

                //check employee view exists
                $emp_view_rec = get_employee_view_record($row['EIdNo'],$row['actualDate']);

                $emp_added_arr[] = $row['EIdNo'];
                $ex_checkin = null;
                $ex_checkout = null;
              
                $employee = $row['EIdNo'];
                $attendanceDate = $row['actualDate'];
                $onDuty = $row['onDutyTime'];
                $graceperiod = $row['gracePeriod'];
               
                $offDuty = $row['offDutyTime'];
                
                if($emp_view_rec){
                    $ex_checkin = $emp_view_rec['checkIn'];
                    $ex_checkout = $emp_view_rec['checkOut'];
                }

                $clockIn = ($ex_checkin) ? $ex_checkin : $emp_checkin_out[$row['EIdNo']]['checkin'];
                $clockOut = ($emp_checkin_out[$row['EIdNo']]['checkout']) ? $emp_checkin_out[$row['EIdNo']]['checkout'] : $ex_checkout;

           

                $nextKey = $i + 1;
               
                $isAllSet = 0;
                $earlyHours = '';
                $lateHours = '';
                $workingHours = "";
                $totWorkingHours = "";
                $realtime = "";
                $overTimeHours = '';
                $actualWorkingHours_obj = NULL;
                $totWorkingHours_obj = NULL;
                $normaloverTimeHours = 0;
                $weekendOTHours = 0;
                $holidayoverTimeHours = 0;
                $specialOThours = 0;
                $isCheckin = 0;
                $isHalfDay = 1;
                $normalrealtime = 0;
                $weekendrealtime = 0;
                $holidayrealtime = 0;
                $floorID = $row['floorID'];
                $clockoutFloorID = $row['floorID'];

                /*check next array */
                if (array_key_exists($nextKey, $temp)) {
                    if ($temp[$nextKey]['EIdNo'] == $row['EIdNo'] && $attendanceDate == $temp[$nextKey]['actualDate']) {
                        //$clockOut = $temp[$nextKey]['attTime']; /*Set clockout*/
                        $clockoutFloorID = $temp[$nextKey]['floorID'];/*Set clockout floorID*/
                       // $continue = TRUE;
                    }

                }

                /************ Calculate the actual working hours *************/
                if ($onDuty != NULL && $offDuty != NULL && $clockOut != NULL) {
                    $datetime1 = new DateTime($onDuty);
                    $datetime2 = new DateTime($offDuty);
                    $actualWorkingHours_obj = $datetime1->diff($datetime2);
                    $minutes = $actualWorkingHours_obj->format('%i');
                    $hours = $actualWorkingHours_obj->format('%h');
                    $workingHours = ($hours * 60) + $minutes;
                } else {
                    $isAllSet += 1;
                }


                /****** Employee total working hours for this day ******/
                if ($clockIn != NULL && $clockOut != NULL) {

                    if ($offDuty != '' && $offDuty <= $clockOut) {
                        $datetime1 = new DateTime($offDuty);
                    } else {
                        $datetime1 = new DateTime($clockOut);
                    }
                    if ($onDuty != '' && $onDuty >= $clockIn) {
                        $datetime2 = new DateTime($onDuty);
                    } else {
                        $datetime2 = new DateTime($clockIn);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $Hours = $totWorkingHours_obj->format('%h');
                    $minutes = $totWorkingHours_obj->format('%i');
                    $totWorkingHours = ($Hours * 60) + $minutes;

                    if ($workingHours != "" && $totWorkingHours != "") {
                        $realtime = $totWorkingHours / $workingHours;
                        $realtime = round($realtime, 1);
                    }


                } else {
                    $isAllSet += 1;
                }
   
                if ($isAllSet == 0) {

                    /**** Calculation for late hours ****/
                    $clockIn_datetime = new DateTime($clockIn);
                    
                    $onDuty_datetime = new DateTime($onDuty);
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                        $interval = $clockIn_datetime->diff($onDuty_datetime);

                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $lateHours = $hours * 60 + $minutes;
                    }


                    /**** Calculation for early hours ****/
                    $datetime1 = date('Y-m-d H:i:s', strtotime($clockOut));
                    $datetime2 = date('Y-m-d H:i:s', strtotime($offDuty));
                    if ($datetime1 < $datetime2) {
                        $datetime1 = new DateTime($clockOut);
                        $datetime2 = new DateTime($offDuty);
                        $interval = $datetime2->diff($datetime1);
                        $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                        $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                        $earlyHours = $hours * 60 + $minutes;

                    }


                    $clockouttime = date('Y-m-d H:i:s', strtotime($clockOut));
                    $offduty = date('Y-m-d H:i:s', strtotime($offDuty));

                    if ($clockouttime > $offduty) {


                        $Fdate = date('Y-m-d');
                        $onDutyForOT = new DateTime($clockOut);
                        if ($onDuty >= $clockIn) {
                            $onDutyForOT = new DateTime($onDuty);
                        } else {
                            $onDutyForOT = new DateTime($clockIn);
                        }
                        //$clockOutForOT = new DateTime($offDuty);

                        $clockOutForOT = new DateTime($clockOut);
                        $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                        $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                        $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));


                        if ($totW->format('h:i') > $actW->format('h:i')) {
                            $overTime_obj = $actW->diff($totW);
                            $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                            $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                            $overTimeHours = $hours * 60 + $minutes;
                        } else {
                            $overTimeHours = 0;
                        }

                    }

                }


                if ($clockIn == NULL && $clockOut == NULL) {
                    $AttPresentTypeID = 4;
                    /**** Absents *****/
                } else {
                    $clockIn_datetime = date('Y-m-d H:i', strtotime($clockIn));
                    $onDuty_datetime = date('Y-m-d H:i', strtotime($onDuty));
                    
                    $clockIn_datetime_grace = new DateTime($clockIn);
                    $onDuty_datetime_grace = new DateTime($onDuty);
                 
                    $minutesToAdd = $graceperiod;
                    $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                    if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                        $AttPresentTypeID = 1;
                    } /**** Presented On time *****/
                    elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                        $AttPresentTypeID = 2;
                    } /**** Presented Later*****/
                    else {
                        $AttPresentTypeID = '';
                    }
                    /***** Let the user decide ****/
                }

                if ($row['isOnLeave'] == 1) {
                    $AttPresentTypeID = 5;
                }
                /**** Employee On Leave *****/


                $normaloverTimeHours = $overTimeHours;
                $normalrealtime = $realtime;
                $isNormalDay = 0;
                $isWeekEndDay = 0;
                $isHoliday = 0;


                if ($row['isWeekend'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = $totWorkingHours;

                    $normalrealtime = 0;
                    $weekendrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 1;


                }

                if ($row['holiday'] == 1) {
                    /**/
                    if ($clockIn != NULL || $clockOut != NULL) {
                        $AttPresentTypeID = 1;
                    }
                    $overTimeHours = $totWorkingHours;
                    /**/
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = $totWorkingHours;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = $realtime;
                    $isNormalDay = 0;
                    $isWeekEndDay = 0;
                    $isHoliday = 1;
                }

                if ($row['isCheckin'] == 1) {
                    $isCheckin = 1;
                }

                if ($row['isHalfDay'] == 1) {
                    $isHalfDay = 0.5;
                }

                if ($row['leaveHalf'] == 1) {
                    $AttPresentTypeID = 7;
                }

                if ($clockIn == '00:00:00') {
                    $clockIn = null;
                }

                if($row['isSpecialOT'] == 1){
                    $temp_normalOThours = $normaloverTimeHours;
                    if($temp_normalOThours > $row['specialOT']){
                        $normaloverTimeHours = $row['specialOT'];
                        $specialOThours = $temp_normalOThours - $row['specialOT'];
                    }
                }

                /*Check multiple occurrence entry*/
                //$mul_key = "{$attendanceDate}-" . $row['deviceID'] . '-' . $row['empMachineID'];
                $mul_key = "{$attendanceDate}-" . $row['EIdNo'];
                
                $po[] = $mul_key;
                $isMultipleOcc = 0; //(array_search($mul_key, $multiple_occ_chk_arr) !== false) ? 1 : 0;

                if($emp_view_rec){

                    $record_data =  array(
                        'empID' => $row['EIdNo'],
                        'deviceID' => $row['deviceID'],
                        'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                        'floorID' => $row['floorID'],//$floorID,
                        'clockoutFloorID' =>$clockoutFloorID,
                        'attendanceDate' => $attendanceDate,
                        'onDuty' => $onDuty,
                        'gracePeriod' => $graceperiod,
                        'offDuty' => $offDuty,
                        'checkIn' => $clockIn,
                        'checkOut' => $clockOut,
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'isNormalDay' => $isNormalDay,
                        'isWeekEndDay' => $isWeekEndDay,
                        'isHoliday' => $isHoliday,
                        'uploadType' => $row['uploadType'],
                        'isMultipleOcc' => $isMultipleOcc,
                        'isSpecialOT' => $row['isSpecialOT'],
                        'specialOThours' => $specialOThours
                    );
                    
                    $res = $this->db->where('empID',$employee)
                        ->where('attendanceDate',$attendanceDate)
                        ->where('companyID',current_companyID())
                        ->update('srp_erp_pay_empattendancereview', $record_data);

                    // echo('<pre>');print_r($res);echo('</pre>');exit;
                    // exit;
                }else{

                    array_push($data, [
                        'empID' => $row['EIdNo'],
                        'deviceID' => $row['deviceID'],
                        'machineID' => ($row['empMachineID'] != '' ? $row['empMachineID'] : 0),
                        'floorID' => $row['floorID'],//$floorID,
                        'clockoutFloorID' =>$clockoutFloorID,
                        'attendanceDate' => $attendanceDate,
                        'onDuty' => $onDuty,
                        'gracePeriod' => $graceperiod,
                        'offDuty' => $offDuty,
                        'checkIn' => $clockIn,
                        'checkOut' => $clockOut,
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'companyID' => current_companyID(),
                        'companyCode' => current_companyCode(),
                        'isNormalDay' => $isNormalDay,
                        'isWeekEndDay' => $isWeekEndDay,
                        'isHoliday' => $isHoliday,
                        'uploadType' => $row['uploadType'],
                        'isMultipleOcc' => $isMultipleOcc,
                        'isSpecialOT' => $row['isSpecialOT'],
                        'specialOThours' => $specialOThours
                    ]);

                }

                $i++;
            }

        }
        // echo('<pre>');print_r($data);echo('</pre>');exit;
        $this->db->where('uniqueID', $uniqueKey)->delete('srp_erp_pay_empattendancedaterangetemp');
        
        if (!empty($data)) {
            //echo '<pre>'; print_r($data); echo '</pre>';        die();
            $this->db->insert_batch('srp_erp_pay_empattendancereview', $data);
        } 


        /* exit;*/
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Failed to Update ']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully uploaded']);
        }


    }


    function load_empAttDataView()
    {
        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');
        //$this->form_validation->set_rules('floorID[]', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $begin = new DateTime($this->input->post('fromDate'));
            $end = new DateTime($this->input->post('toDate'));
            $enddiff = $end->add(new DateInterval('P1D'));

            $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $enddiff);

            $date_arr = array();
            foreach ($dateRange as $key => $date) {
                $date_arr[$date->format("Y-m-d")] = $date->format("Y-m-d");
            }

            $data['tempAttData'] = $this->Employee_model->get_attendanceData2();


            echo json_encode(
                array(
                    '0' => 's',
                    'tBody' => $this->load->view('system/hrm/ajax/load_empAttendanceReviewTBody', $data, true),
                    'rowCount' => count($data['tempAttData']),
                    'date_arr' => $date_arr,
                    'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
                    'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees($this->input->post('fromDate'), $this->input->post('toDate'))
                )
            );
        }
    }

    function load_empAttDataViewManual()
    {
        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');
        //$this->form_validation->set_rules('floorID[]', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $begin = new DateTime($this->input->post('fromDate'));
            $end = new DateTime($this->input->post('toDate'));
            $attendance_master = $this->input->post('attendance_master');
            $enddiff = $end->add(new DateInterval('P1D'));

            $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $enddiff);

            $date_arr = array();
            foreach ($dateRange as $key => $date) {
                $date_arr[$date->format("Y-m-d")] = $date->format("Y-m-d");
            }

            $data['tempAttData'] = $this->Employee_model->get_attendanceDataManual();
            $data['attendance_master'] = $attendance_master;


            //system/hrm/ajax/load_empAttendanceReviewTBody
            // system/hrm/ajax/load_empAttendanceManualReviewTBody
            $data['manual_attendance'] = 1;

            echo json_encode(
                array(
                    '0' => 's',
                    'tBody' => $this->load->view('system/hrm/ajax/load_empAttendanceReviewTBody', $data, true),
                    'rowCount' => count($data['tempAttData']),
                    'date_arr' => $date_arr,
                    'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
                    'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees($this->input->post('fromDate'), $this->input->post('toDate'))
                )
            );
        }
    }

    function load_empAttDataViewSimple()
    {
        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');
        //$this->form_validation->set_rules('floorID[]', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $begin = new DateTime($this->input->post('fromDate'));
            $end = new DateTime($this->input->post('toDate'));
            $enddiff = $end->add(new DateInterval('P1D'));

            $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $enddiff);

            $date_arr = array();
            foreach ($dateRange as $key => $date) {
                $date_arr[$date->format("Y-m-d")] = $date->format("Y-m-d");
            }

            $data['tempAttData'] = $this->Employee_model->get_attendanceData2();


            echo json_encode(
                array(
                    '0' => 's',
                    'tBody' => $this->load->view('system/hrm/ajax/load_empAttendanceReviewTBody2', $data, true),
                    'rowCount' => count($data['tempAttData']),
                    'date_arr' => $date_arr,
                    'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
                    'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees($this->input->post('fromDate'), $this->input->post('toDate'))
                )
            );
        }
    }

    function load_empAttDataView_oman_oil()
    {
        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $begin = new DateTime($this->input->post('fromDate'));
        $end = new DateTime($this->input->post('toDate'));
        $end_diff = $end->add(new DateInterval('P1D'));

        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end_diff);

        $date_arr = array();
        foreach ($dateRange as $key => $date) {
            $date_arr[$date->format("Y-m-d")] = $date->format("Y-m-d");
        }

        $records = $this->Employee_model->load_attendance_det();
        $data['tempAttData'] = $records['att'];
        $data['on_leave'] = $records['on_leave'];

        echo json_encode([
            '0' => 's',
            'tBody' => $this->load->view('system/hrm/ajax/attendance-view-oman-oil', $data, true),
            'rowCount' => count($data['tempAttData']),
            'date_arr' => $date_arr,
            'on_leave' => $records['on_leave']
            //'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
            //'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees($begin, $end)
        ]);
    }

    function confirm_attendanceRec()
    {
        $this->form_validation->set_rules('logID[]', 'Log ID', 'required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $logID = $this->input->post('logID');
        $logID_list = join(',', $logID);

        $status = $this->db->query("SELECT logID, CONCAT_WS(' - ', empSecondaryCode, Ename2, attendanceDate) AS empName                             
                                        FROM srp_erp_attendance_oman_oil AS atten_tb
                                        JOIN srp_employeesdetails AS emp_tb ON emp_tb.empMachineID = atten_tb.empMachineID 
                                        WHERE atten_tb.companyID = {$companyID} AND logID IN ({$logID_list}) AND confirmedYN = 1")->result_array();

        if (!empty($status)) {
            $status = join(' <br/> - ', array_column($status, 'empName'));
            $status = 'Following records already confirmed.<br/> - ' . $status;
            die(json_encode(['e', $status]));
        }


        $dateTime = current_date();
        $data = [
            'confirmedYN' => 1, 'confirmedByEmpID' => current_userID(), 'confirmedDate' => $dateTime,
            'modifiedUserID' => current_userID(), 'modifiedPCID' => current_pc(),
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where_in('logID', $logID)->update('srp_erp_attendance_oman_oil', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() !== false) {
            echo json_encode(['s', 'Confirmed successfully']);
        } else {
            echo json_encode(['e', 'Error in confirmation process.']);
        }
    }

    function fetch_attendance_summary()
    {
        $companyID = current_companyID();

        $this->datatables->select("id, DATE_FORMAT(attendancePeriod, '%Y - %M') AS attendancePeriod", false)
            ->from('srp_erp_attendance_summary_master_oi')
            ->where('companyID', $companyID)
            ->add_column('conf_status', '$1', 'confirm(0)')
            ->add_column('edit', '$1', 'attendance_summary_action(id,0)');

        echo $this->datatables->generate();
    }

    function create_attendance_summary()
    {
        $this->form_validation->set_rules('att_period', 'period', 'required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $period = $this->input->post('att_period');
        $start_date = date('Y-m-d', strtotime("{$period}-01"));
        $end_date = date('Y-m-t', strtotime($start_date));
        $noOfDays = date('t', strtotime($start_date));

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $master_data = [
            'attendancePeriod' => $start_date, 'companyID' => $companyID, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_attendance_summary_master_oi', $master_data);
        $master_id = $this->db->insert_id();

        $this->db->query("INSERT INTO srp_erp_attendance_summary_det_oi ( masterID, empID, totalHours,
                        otHours, adjustOtHours, companyID, createdPCID, createdUserID, createdDateTime, `timestamp`)  
                        SELECT {$master_id}, EIdNo, SUM(totalDuration) AS totDuration, 
                        #IF( (SUM(totalDuration) / 60) > 192, (SUM(totalDuration) - (192*60)), 0) AS otHours,
                        #IF( (SUM(totalDuration) / 60) > 192, (SUM(totalDuration) - (192*60)), 0) AS adjOt,
                        IF( 
                             ((SUM(totalDuration) /60)-6.533 * {$noOfDays} -  IFNULL(leaveDays,0)) > 0, 
                             ((SUM(totalDuration) /60)-6.533 * {$noOfDays} -  IFNULL(leaveDays,0)) , 0
                        ) AS otHours,
                        IF( 
                             ((SUM(totalDuration) /60)-6.533 * {$noOfDays} -  IFNULL(leaveDays,0)) > 0, 
                             ((SUM(totalDuration) /60)-6.533 * {$noOfDays} -  IFNULL(leaveDays,0)) , 0
                        ) AS adjOt,                                            
                        {$companyID}, '{$pc}', {$userID}, '{$dateTime}', '{$dateTime}'
                        FROM srp_erp_attendance_oman_oil AS att_tb
                        JOIN srp_employeesdetails AS t2 ON att_tb.empMachineID = t2.empMachineID
                        LEFT JOIN (
                            SELECT empMachineID AS attEmpID, COUNT(logID) leaveDays 
                            FROM srp_erp_attendance_oman_oil WHERE attendanceDate BETWEEN '{$start_date}' AND '{$end_date}' 
                            AND statusCode = 'A' GROUP BY empMachineID
                        ) AS leaveTb ON leaveTb.attEmpID = att_tb.empMachineID
                        WHERE attendanceDate BETWEEN '{$start_date}' AND '{$end_date}'  
                        GROUP BY att_tb.empMachineID");

        $this->db->trans_complete();

        if ($this->db->trans_status() !== false) {
            echo json_encode(['s', 'Attendance summary successfully created.', 'id' => $master_id]);
        } else {
            echo json_encode(['e', 'Error in attendance summary creation process']);
        }
    }

    function load_attendance_approval_view()
    {
        $id = $this->input->post('id');
        $companyID = current_companyID();

        $master_data = $this->db->get_where('srp_erp_attendance_summary_master_oi', ['id' => $id])->row_array();
        $start_date = $master_data['attendancePeriod'];
        $end_date = date('Y-m-t', strtotime($master_data['attendancePeriod']));

        $records = $this->db->query("SELECT empTB.*, DATE_FORMAT(attendanceDate, '%d') AS att_day, totalDuration, att_tb.locationID
                                        FROM srp_erp_attendance_oman_oil AS att_tb
                                        JOIN (
                                            SELECT empID, empTB.empMachineID, totalHours, otHours, adjustOtHours, approvedYN,
                                            CONCAT_WS(' - ', empSecondaryCode, Ename2) AS empName, detID
                                            FROM srp_erp_attendance_summary_det_oi AS det
                                            JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = det.empID
                                            WHERE det.masterID = {$id}
                                        ) AS empTB ON empTB.empMachineID = att_tb.empMachineID
                                        WHERE attendanceDate BETWEEN '{$start_date}' AND '{$end_date}' AND companyID = {$companyID}
                                        #limit 10")->result_array();

        $data['master_data'] = $master_data;
        $data['records'] = $records;
        $begin = new DateTime($start_date);
        $end = new DateTime($end_date);
        $end = $end->add(new DateInterval('P1D'));
        $data['dateRange'] = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $view = $this->load->view('system/hrm/attendance_approval_view', $data, true);

        echo json_encode(['s', 'view' => $view]);

    }

    function delete_attendance_review()
    {
        $id = $this->input->post('id');

        $this->db->trans_start();

        $this->db->delete('srp_erp_attendance_summary_det_oi', ['masterID' => $id]);
        $this->db->delete('srp_erp_attendance_summary_master_oi', ['id' => $id]);

        $this->db->trans_complete();

        if ($this->db->trans_status() !== false) {
            echo json_encode(['s', 'Attendance summary successfully deleted.']);
        } else {
            echo json_encode(['e', 'Error in attendance summary delete process']);
        }
    }

    function adjust_otHours()
    {
        $companyID = current_companyID();
        $detID = $this->input->post('detID');
        $minutes = $this->input->post('minutes');
        $hours = $this->input->post('hours');

        $minutes += ($hours * 60);

        $data = $this->db->query("SELECT CONCAT_WS(' - ', empSecondaryCode, Ename2) AS empName, 0 AS approvedYN
                                  FROM srp_erp_attendance_summary_det_oi AS atten_tb
                                  JOIN srp_employeesdetails AS emp_tb ON emp_tb.EIdNo = atten_tb.empID
                                  WHERE detID={$detID} AND companyID={$companyID}")->row_array();

        if ($data['approvedYN'] == 1) {
            $msg = "This record ({$data['empName']}) is already approved.<br/>You can not make changes on this.";
            die(json_encode(['error' => 1, 'message' => $msg]));
        }

        $update = $this->db->update('srp_erp_attendance_summary_det_oi', ['adjustOtHours' => $minutes], ['detID' => $detID]);
        if ($update) {
            echo json_encode(['s', 'Updated Successfully']);
        } else {
            echo json_encode(['e', 'Failed', 'data' => $data]);
        }
    }

    function approve_attendanceRec()
    {
        $this->form_validation->set_rules('detID[]', 'Detail ID', 'required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $detID = $this->input->post('detID');
        $detID_list = join(',', $detID);

        $status = $this->db->query("SELECT detID, CONCAT_WS(' - ', empSecondaryCode, Ename2) AS empName                             
                                        FROM srp_erp_attendance_summary_det_oi AS atten_tb
                                        JOIN srp_employeesdetails AS emp_tb ON emp_tb.EIdNo = atten_tb.empID
                                        WHERE atten_tb.companyID = {$companyID} AND detID IN ({$detID_list}) AND approvedYN = 1")->result_array();

        if (!empty($status)) {
            $status = join(' <br/> - ', array_column($status, 'empName'));
            $status = 'Following records already approved.<br/> - ' . $status;
            die(json_encode(['e', $status]));
        }


        $dateTime = current_date();
        $data = [
            'approvedYN' => 1, 'approvedByEmpID' => current_userID(), 'approvedDate' => $dateTime,
            'modifiedUserID' => current_userID(), 'modifiedPCID' => current_pc(),
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where_in('detID', $detID)->update('srp_erp_attendance_summary_det_oi', $data);


        $det_arr = $this->db->query("SELECT empID, adjustOtHours, attendancePeriod 
                                    FROM srp_erp_attendance_summary_det_oi AS det_tb
                                    JOIN srp_erp_attendance_summary_master_oi AS mas_tb ON mas_tb.id = det_tb.masterID
                                    WHERE detID IN ({$detID_list}) #AND adjustOtHours > 0 ")->result_array();

        $salaryCategoryID = $this->db->select('salaryCategoryID')->where('OTMasterID', 1)
            ->where('companyID', $companyID)->from('srp_erp_pay_overtimecategory')
            ->get()->row('salaryCategoryID');

        $attendancePeriod = $det_arr[0]['attendancePeriod'];
        $int_data = [];
        foreach ($det_arr as $row) {
            $empID = $row['empID'];
            $otHours = $row['adjustOtHours'];
            $ot_amount = 0;
            $per_hour = $this->get_attendance_ot_amount($empID, 1);

            if (!empty($per_hour) && $per_hour['transactionAmount'] > 0) {
                $ot_amount = ($per_hour['transactionAmount'] / 60) * $otHours;
            }

            $int_data[] = [
                'empID' => $empID, 'attendanceDate' => $attendancePeriod, 'NDaysOT' => $otHours, 'paymentOT' => $ot_amount,
                'salaryCategoryID' => $salaryCategoryID, 'companyID' => $companyID, 'companyCode' => $companyCode,
                'confirmedYN' => 1, 'approvedYN' => 1, 'approvedBy' => current_userID(), 'approvedDate' => $dateTime,
            ];
        }

        if (!empty($int_data)) {
            $this->db->insert_batch('srp_erp_pay_empattendancereview', $int_data);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() !== false) {
            echo json_encode(['s', 'Approved successfully']);
        } else {
            echo json_encode(['e', 'Error in approval process.']);
        }
    }

    function save_attendanceReviewData()
    {
        //echo ' < pre>';print_r($_POST); echo ' </pre > '; die();
        echo json_encode($this->Employee_model->save_attendanceReviewData());
    }

    function getData()
    {

        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            echo json_encode(
                array(
                    '0' => 's',
                    'tempAttData' => $this->Employee_model->get_attendanceData(),
                    'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
                    'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees()
                )
            );
        }
    }

    function load_empAttData()
    {
        $data['attData'] = array(
            '0' => 's',
            'tempAttData' => $this->Employee_model->get_attendanceData(),
            'unAssignedShifts' => $this->Employee_model->getShift_notAssignedEmployees(),
            'unAssignedMachineID' => $this->Employee_model->getMachineID_notAssignedEmployees(),
        );

        $this->load->view('system/hrm/ajax/load_empAttemdanceReview', $data);
    }

    /*End of Attendance review*/

    function fetch_employees_typeAhead()
    {
        $result = $this->Employee_model->fetch_employees_typeAhead();
        echo json_encode($result);
    }

    function save_social_insurance()
    {
        $this->form_validation->set_rules('socialInsuranceMasterID', 'Social Insurance', 'required');
        $this->form_validation->set_rules('socialInsuranceNumber', 'Social Insurance No', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $result = $this->Employee_model->save_social_insurance();
            echo json_encode($result);
        }
    }


    function fetch_socialInsurance()
    {
        $empId = trim($this->input->post('empID') ?? '');

        $base_url = site_url('Employee/update_si');

        $this->datatables->select('if(t2.Description is NULL,t3.Description,t2.Description) as Description,t1.socialInsuranceDetailID AS socialInsuranceDetailID, t1.socialInsuranceNumber AS socialInsuranceNumber,t2.employeeContribution as employeecontribution,t2.employerContribution as employercontribution', false)
            ->from('srp_erp_socialinsurancedetails t1')
            ->join('srp_erp_socialinsurancemaster AS t2', 't1.socialInsuranceMasterID = t2.socialInsuranceID', 'left')
            ->join('srp_erp_payeemaster AS t3', 't1.payeeID = t3.payeeMasterID', 'left')
            ->where('t1.empID', $empId)
            ->where('t1.companyID', current_companyID())
            ->add_column('socialNumber', '<a class="socialNumber" id="socialNumber_$2" data-type="text" data-pk="$2"  data-url ="' . $base_url . '" data-title="Social Number">$1</a> ', 'socialInsuranceNumber,socialInsuranceDetailID')
            ->add_column('contribution', '$1', 'load_employee_contribution(employeecontribution,employercontribution)')
            ->add_column('delete', ' <span class="pull-right"><a onclick="delete_si(\'$1\')" class="atagdsabl"><span class="glyphicon glyphicon-trash" style="color:#d15b47;" ></span></a></span> ', 'socialInsuranceDetailID');
        echo $this->datatables->generate();
    }

    function delete_si()
    {
        $this->form_validation->set_rules('socialInsuranceDetailID', 'Social Insurance', 'required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $result = $this->Employee_model->delete_si();
            echo json_encode($result);
        }
    }

    function update_si()
    {
        $this->form_validation->set_rules('pk', 'Document Id is Missing', 'required');
        $this->form_validation->set_rules('value', 'Socail Number is required . ', 'required');
        $this->form_validation->set_rules('empId', 'Employee Id is Missing', 'required');


        if ($this->form_validation->run() == FALSE) {
            return $this->output
                ->set_content_type('application/html')
                ->set_status_header(400)
                ->set_output(validation_errors());
        } else {
            $result = $this->Employee_model->update_si();
            echo $result;
        }
    }

    /*Nationality*/
    public function fetch_nationality()
    {
        $this->datatables->select('NId,Nationality, IFNULL((SELECT COUNT(EIdNo) FROM srp_employeesdetails WHERE NId = t1.NId GROUP BY Nid), 0 ) AS usageCount')
            ->from('srp_nationality AS t1')
            ->add_column('edit', '$1', 'action_nationality(NId, Nationality, usageCount)')
            ->where('Erp_companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveNationality()
    {
        $this->form_validation->set_rules('description[]', 'Nationality', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveNationality());
        }
    }

    public function editNationality()
    {
        $this->form_validation->set_rules('nationalityDes', 'Nationality', 'required');
        $this->form_validation->set_rules('hidden-id', 'Nationality ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editNationality());
        }
    }

    public function deleteNationality()
    {
        $this->form_validation->set_rules('hidden-id', 'Nationality ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteNationality());
        }
    }

    /*Social Insurance*/
    function fetch_social_insurance()
    {
        $companyID = current_companyID();
        $this->datatables->select("socialInsuranceID,Description, IFNULL((SELECT COUNT(socialInsuranceDetailID) FROM srp_erp_socialinsurancedetails WHERE socialInsuranceMasterID=t1.socialInsuranceID AND companyID='{$companyID}' GROUP BY socialInsuranceMasterID), 0) AS usageCount,employeeContribution AS employeeContribution,employerContribution AS employerContribution,sortCode,GLtbl1.GLSecondaryCode AS expenceGlCode,GLtbl2.GLSecondaryCode AS liablityGlCOde,expenseGlAutoID AS expenseGlAutoID,liabilityGlAutoID AS liabilityGlAutoID,isSlabApplicable AS isSlabApplicable,SlabID AS SlabID")
            ->from('srp_erp_socialinsurancemaster AS t1')
            ->join('srp_erp_chartofaccounts GLtbl1', 't1.expenseGlAutoID = GLtbl1.GLAutoID', 'left')
            ->join('srp_erp_chartofaccounts GLtbl2', 't1.liabilityGlAutoID = GLtbl2.GLAutoID', 'left')
            ->add_column('edit', '$1', 'action_social_insurance(socialInsuranceID, Description, employeeContribution, employerContribution, sortCode, usageCount, expenseGlAutoID, liabilityGlAutoID, isSlabApplicable, SlabID)')
            ->edit_column('employeeContribution', '$1%', 'employeeContribution')
            ->edit_column('employerContribution', '$1%', 'employerContribution')
            ->where('t1.companyID', $companyID);

        echo $this->datatables->generate();
    }

    function saveSocialInsurance()
    {
        $this->form_validation->set_rules('sortCode[]', 'Sort Code', 'trim|required');
        $this->form_validation->set_rules('description[]', 'Description', 'trim|required');
        $this->form_validation->set_rules('employee[]', 'Employee Contribution', 'trim|required');
        $this->form_validation->set_rules('employer[]', 'Employer Contribution', 'trim|required');
        $this->form_validation->set_rules('liabilityGlAutoID[]', 'Liability GL Code', 'trim|required');

        $employees = $this->input->post('employee');
        $employers = $this->input->post('employer');
        $expenseGlAutoID = $this->input->post('expenseGlAutoID');
        $isSlabApplicable = $this->input->post('isSlabHidden');
        $slabID = $this->input->post('ifSlab');

        $validateExpenseGL = false;
        $expenseGLBlank = false;
        $validateSlabID = false;

        foreach ($employers as $key => $employer) {
            if ($employer > 0 AND $expenseGlAutoID[$key] == '') {
                $validateExpenseGL = true;
            }

            if ($employees[$key] > 0 AND $expenseGlAutoID[$key] !== '') {
                $expenseGLBlank = true;
            }

            if ($isSlabApplicable[$key] == 1) {
                if ($slabID[$key] == '') {
                    $validateSlabID = true;
                }
            }
        }


        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            if ($validateExpenseGL) {
                die(json_encode(['e', 'The Expense GL Code field is required for employer contribution']));
            }


            if ($expenseGLBlank) {
                die(json_encode(['e', 'You can not select expense GL code for employee contribution']));
            }

            if ($validateSlabID == true) {
                die(json_encode(['e', 'If slab is applicable slab ID can not be blank.']));
            }

            echo json_encode($this->Employee_model->saveSocialInsurance());
        }
    }

    function editSocialInsurance()
    {
        $this->form_validation->set_rules('siSortCode', 'Social Insurance Sort Code', 'required');
        $this->form_validation->set_rules('siDes', 'Social Insurance Description', 'required');

        $this->form_validation->set_rules('si_liabilityGlAutoID', 'Liability GL Code', 'required');
        $this->form_validation->set_rules('hidden-id', 'Social Insurance ID', 'required');
        $this->form_validation->set_rules('siEmployee', 'Employee Contribution', 'required');
        $this->form_validation->set_rules('siEmployer', 'Employer Contribution', 'required');

        $employer = (int)trim($this->input->post('siEmployer') ?? '');

        if ($employer > 0) {
            $this->form_validation->set_rules('si_expenseGlAutoID', 'Expense GL Code', 'required');
        }


        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $employee = (int)trim($this->input->post('siEmployee') ?? '');
            $expenseGlAutoID = (int)trim($this->input->post('si_expenseGlAutoID') ?? '');

            if ($expenseGlAutoID != '' && $employee > 0) {
                die(json_encode(['e', 'You can not select expense GL code for employee contribution']));
            }

            $isSlabApplicable = trim($this->input->post('siIsSlab') ?? '');
            if ($isSlabApplicable == true) {
                $slabID = trim($this->input->post('siSlab') ?? '');
                if (empty($slabID)) {
                    die(json_encode(['e', 'If slab is applicable slab can not be blank.']));
                }

            }

            echo json_encode($this->Employee_model->editSocialInsurance());
        }
    }

    function deleteSocialInsurance()
    {
        $this->form_validation->set_rules('hidden-id', 'Social Insurance ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteSocialInsurance());
        }
    }

    function get_usermanagement()
    {
        $empID = $this->input->post('empID');
        $filter = '';
        if ($empID != 'All') {
            $filter = "AND EidNo ='{$empID}'";
        }
        $companyID = current_companyID();

        $data = $this->db->query("SELECT * FROM `srp_employeesdetails` WHERE `Erp_companyID` = '{$companyID}' $filter")->result_array();

        echo json_encode($data);
    }

    function updateEmployeeDetails()
    {
        $arr = array();
        $arr2 = array();
        $empArr = $this->input->post('empID');
        $password = $this->input->post('password');
        $isActive = $this->input->post('isActive');
        $companyID = current_companyID();
        $data = $this->db->query("SELECT * FROM `srp_employeesdetails` WHERE `Erp_companyID` = '{$companyID}'")->result_array();

        for ($x = 0; $x <= count($data) - 1; $x++) {
            if ($empArr) {
                for ($i = 0; $i <= count($empArr) - 1; $i++) {
                    if ($data[$x]['EIdNo'] == $empArr[$i]) {
                        if ($password[$i] != "***********") {
                            $psw = md5($password[$i]);
                        } else {
                            $psw = $data[$x]['Password'];
                        }
                        array_push($arr, array('EIdNo' => $data[$x]['EIdNo'], 'Password' => $psw, 'isActive' => $isActive[$i]));
                        array_push($arr2, array('Username' => $data[$x]['UserName'], 'Password' => $psw));
                    }


                }
            }
        }

        if (!empty($arr)) {
            $this->db->update_batch('srp_employeesdetails', $arr, 'EIdNo');
            $db = $this->load->database('db2', true);
            $db->update_batch('user', $arr2, 'Username');
            $this->session->set_flashdata('s', 'Successfully updated');
            echo json_encode(false);
        } else {
            $this->session->set_flashdata('e', 'No changes found');
            echo json_encode(false);
        }
        exit;

    }

    function fetch_declaration_variable_employees_master(){

        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();

        $str = ($this->uri->segment(3) == 'period_base') ? ' ,hrMas.description AS grpDes' : '';

        $this->datatables->select("salarydeclarationMasterID,decMas.Description AS Description,documentSystemCode,transactionCurrency,confirmedYN,approvedYN,
        decMas.createdUserID AS docCreatedUserID,documentDate AS newDocumentDate,transactionCurrency,documentID,declaration_template {$str}", true);
        $this->datatables->from('srp_erp_variable_salarydeclarationmaster AS decMas');
        $this->datatables->where('decMas.companyID', $companyID);

        if ($this->uri->segment(3) == 'period_base') {
            $this->datatables->join('srp_erp_hrperiodgroup AS hrMas', 'hrMas.hrGroupID=decMas.payrollGroup');
        }

        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"SD",salarydeclarationMasterID)');
        $this->datatables->add_column('edit', '$1', 'common_td_action_variable(salarydeclarationMasterID, confirmedYN, approvedYN, docCreatedUserID, documentSystemCode,declaration_template)');
        $this->datatables->edit_column('newDocumentDate', '<span >$1 </span>', 'convert_date_format(newDocumentDate)');

        echo $this->datatables->generate();
    }

    function fetch_declaration_employees_master()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();

        $str = ($this->uri->segment(3) == 'period_base') ? ' ,hrMas.description AS grpDes' : '';

        $this->datatables->select("salarydeclarationMasterID,decMas.Description AS Description,documentSystemCode,transactionCurrency,confirmedYN,approvedYN,
        decMas.createdUserID AS docCreatedUserID,documentDate AS newDocumentDate,transactionCurrency,documentID,declaration_template {$str}", true);
        $this->datatables->from('srp_erp_salarydeclarationmaster AS decMas');
        $this->datatables->where('decMas.companyID', $companyID);

        if ($this->uri->segment(3) == 'period_base') {
            $this->datatables->join('srp_erp_hrperiodgroup AS hrMas', 'hrMas.hrGroupID=decMas.payrollGroup');
        }

        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"SD",salarydeclarationMasterID)');
        $this->datatables->add_column('edit', '$1', 'load_salary_declaration_action(salarydeclarationMasterID, confirmedYN, approvedYN, docCreatedUserID, documentSystemCode,declaration_template)');
        $this->datatables->edit_column('newDocumentDate', '<span >$1 </span>', 'convert_date_format(newDocumentDate)');

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT decID FROM srp_erp_payrollgroupincharge AS inCharge
                                      JOIN (
                                            SELECT declarationMasterID AS decID, accessGroupID
                                            FROM srp_erp_salarydeclarationdetails
                                            WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                            GROUP BY declarationMasterID, accessGroupID
                                      ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                      WHERE companyID={$companyID} AND empID={$currentEmp}
                                      GROUP BY decID
                                      UNION
                                          SELECT salarydeclarationMasterID
                                          FROM srp_erp_salarydeclarationmaster AS t1
                                          LEFT JOIN srp_erp_salarydeclarationdetails AS t2
                                          ON t2.declarationMasterID=t1.salarydeclarationMasterID
                                          WHERE t1.companyID={$companyID} AND declarationMasterID IS NULL
                                          GROUP BY t1.salarydeclarationMasterID
                                      ) AS accTB", 'decMas.salarydeclarationMasterID = accTB.decID');

        }
        echo $this->datatables->generate();
    }

    function save_employee_declaration_master()
    {
        $this->form_validation->set_rules('MasterCurrency', 'Currency', 'trim|required');
        $this->form_validation->set_rules('salary_description', 'Description', 'trim|required');
        $this->form_validation->set_rules('documentDate', 'Document date', 'trim|required|date');
        $this->form_validation->set_rules('declaration_template', 'Template', 'trim|required');

        if ($this->uri->segment(3) == 'period_base') {
            $this->form_validation->set_rules('p_group', 'Payroll Group', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->save_employee_declaration_master());
        }
    }

    /*Load salary declaration detail after adding master */
    function Load_Salary_Declaration_Master()
    {
        $id = $this->input->post('id');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $result = $this->Employee_model->get_salaryVariableDeclarationMaster($id);
        }else{
            $result = $this->Employee_model->get_salaryDeclarationMaster($id);
        }
        

        $data['balancePayment'] = $this->db->query("SELECT * FROM `srp_erp_pay_balancepayment` WHERE sdMasterID={$id}")->result_array();
        if (!empty($result)) {
            $data['output'] = $result;
            echo $this->load->view('system/hrm/employee_salary_declaration_detail', $data, true);

        } else {
            return false;
        }
    }

    function getSalarySubType()
    {
        $masterCat = trim($this->input->post('masterCategory') ?? '');
        $isPayrollCategory = trim($this->input->post('isPayrollCategoryYN') ?? '');
        $isFromMA = trim($this->input->post('isFromMA-D') ?? '');
        $companyID = current_companyID();

        if ($isFromMA == 'Y') {
            $Categories = $this->db->query("SELECT * FROM srp_erp_pay_salarycategories WHERE isPayrollCategory={$isPayrollCategory}
                                            AND companyID ={$companyID}")->result_array();
        } else {
            $Categories = $this->db->query("SELECT * FROM srp_erp_pay_salarycategories WHERE salaryCategoryType='{$masterCat}'
                                            AND isPayrollCategory ={$isPayrollCategory} AND companyID ={$companyID}")->result_array();
        }


        $Categories_arr = [];
        if (isset($Categories)) {
            foreach ($Categories as $row) {
                $Categories_arr[trim($row['salaryCategoryID'] ?? '')] = trim($row['salaryDescription'] ?? '');
            }
        }
        $option = '<option value=""> Select Fixed Allowance </option>';
        foreach ($Categories_arr as $key => $Categoriy) {
            $option .= "<option value='{$key}'>{$Categoriy}</option>";
        }
        //echo $this->db->last_query().'</p>';
        echo $option;
    }

    function save_salary_declaration_detail()
    {

        $cat = $this->input->post('cat');
        $effDate = $this->input->post('effectiveDate');
        $masterID = trim($this->input->post('declarationMasterID') ?? '');

        $result = $this->Employee_model->get_salaryDeclarationMaster($masterID);
        $isPayrollCategory = $result['isPayrollCategory'];
        $this->load->helper('template_paySheet_helper');
        $errorCount = 0;
        $errMsg = '';

        if ($errorCount == 0) {
            echo json_encode($this->Employee_model->save_all_salary_declaration());
        } else {
            echo json_encode(array('e', $errMsg));
        }


    }

    function getEmployeesDeclaration($currency)
    {
        $companyID = current_companyID();
        $employees = $this->db->query("SELECT EIdNo, ECode, Ename2, EDOJ FROM srp_employeesdetails WHERE Erp_companyID={$companyID} AND payCurrencyID={$currency}
                                       AND isPayrollEmployee=1 AND empConfirmedYN=1 AND isDischarged=0")->result_array();
        return $employees;
    }

    function ConfirmSalaryDeclaration()
    {
        echo json_encode($this->Employee_model->ConfirmSalaryDeclaration());
    }

    function VariableConfirmSalaryDeclaration(){
        echo json_encode($this->Employee_model->VariableConfirmSalaryDeclaration());
    }

    function fetch_salary_declaration_approval()
    {
        /*
        * rejected = 1
        * not rejected = 0
        * */
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $companyID = $this->common_data['company_data']['company_id'];
        $currentuserid = current_userID();
        $convertFormat = convert_date_format_sql();

        if ($approvedYN == 0) {
            $this->datatables->select('salarydeclarationMasterID AS masterID, srp_erp_salarydeclarationmaster.companyCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN, documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_salarydeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_salarydeclarationmaster.documentSystemCode AS docCode', false);
            $this->datatables->from('srp_erp_salarydeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_salarydeclarationmaster.salarydeclarationMasterID AND srp_erp_documentapproved.approvalLevelID = srp_erp_salarydeclarationmaster.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_salarydeclarationmaster.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SD');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'SD');
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_salarydeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "SD", masterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("SD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('salarydeclarationMasterID AS masterID, srp_erp_salarydeclarationmaster.companyCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN, documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_salarydeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_salarydeclarationmaster.documentSystemCode AS docCode', false);
            $this->datatables->from('srp_erp_salarydeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_salarydeclarationmaster.salarydeclarationMasterID');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SD');
            $this->datatables->where('srp_erp_salarydeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedEmpID', $currentuserid);
            $this->datatables->group_by('srp_erp_salarydeclarationmaster.salarydeclarationMasterID');
            $this->datatables->group_by('srp_erp_documentapproved.approvalLevelID');
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "SD", masterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("SD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        }

    }

    function fetch_variable_salary_declaration_approval()
    {
        /*
        * rejected = 1
        * not rejected = 0
        * */
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $companyID = $this->common_data['company_data']['company_id'];
        $currentuserid = current_userID();
        $convertFormat = convert_date_format_sql();

        if ($approvedYN == 0) {
            $this->datatables->select('salarydeclarationMasterID AS masterID, srp_erp_variable_salarydeclarationmaster.companyCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN, documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_variable_salarydeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_variable_salarydeclarationmaster.documentSystemCode AS docCode', false);
            $this->datatables->from('srp_erp_variable_salarydeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_variable_salarydeclarationmaster.salarydeclarationMasterID AND srp_erp_documentapproved.approvalLevelID = srp_erp_variable_salarydeclarationmaster.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_variable_salarydeclarationmaster.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SVD');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'SVD');
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_variable_salarydeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "SVD", masterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("SVD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('salarydeclarationMasterID AS masterID, srp_erp_variable_salarydeclarationmaster.companyCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN, documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_variable_salarydeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_variable_salarydeclarationmaster.documentSystemCode AS docCode', false);
            $this->datatables->from('srp_erp_variable_salarydeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_variable_salarydeclarationmaster.salarydeclarationMasterID');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SVD');
            $this->datatables->where('srp_erp_variable_salarydeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedEmpID', $currentuserid);
            $this->datatables->group_by('srp_erp_variable_salarydeclarationmaster.salarydeclarationMasterID');
            $this->datatables->group_by('srp_erp_documentapproved.approvalLevelID');
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "SVD", masterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("SVD", masterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        }

    }

    function load_salary_approval_confirmation()
    {

        $data['imgPath'] = ($this->uri->segment(3)) ? mPDFImage : htmlImage;
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('declarationMasterID') ?? '');
        $isVariable = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;

        if($isVariable){
            $data['extra'] = $this->Employee_model->get_salaryVariableDeclarationMaster($masterID);
        }else{
            $data['extra'] = $this->Employee_model->get_salaryDeclarationMaster($masterID);
            $data['balancePayment'] = $this->db->query("SELECT * FROM `srp_erp_pay_balancepayment` WHERE sdMasterID={$masterID}")->result_array();
        }
        
        $html = $this->load->view('system/hrm/salary_declaration_print', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['approvedYN']);
        }
    }

    function load_salary_approval_confirmation_view()
    {
        $data['imgPath'] = ($this->uri->segment(3)) ? mPDFImage : htmlImage;
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('declarationMasterID') ?? '');
        $isVariable = ($this->uri->segment(6)) ? $this->uri->segment(6) : 0;
 
        if($isVariable == 1){
            $data['extra'] = $this->Employee_model->get_salaryVariableDeclarationMaster($masterID);
            $data['balancePayment'] = array(); // balance payment not calculated
            $html = $this->load->view('system/hrm/salary_declaration_print', $data, true);
        }else{
            $data['extra'] = $this->Employee_model->get_salaryDeclarationMaster($masterID);
            $data['balancePayment'] = $this->db->query("SELECT * FROM `srp_erp_pay_balancepayment` WHERE sdMasterID={$masterID}")->result_array();
            $html = $this->load->view('system/hrm/salary_declaration_print_new', $data, true);
        }

        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', $data['extra']['approvedYN']);
        }
    }

    function load_salary_approval_confirmation_view_variable()
    {
        $data['imgPath'] = ($this->uri->segment(3)) ? mPDFImage : htmlImage;
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('declarationMasterID') ?? '');
        $isVariable = ($this->uri->segment(4)) ? $this->uri->segment(3) : trim($this->input->post('isVariable') ?? '');

        $data['extra'] = $this->Employee_model->get_salaryVariableDeclarationMaster($masterID);
        $data['isVariable'] = $isVariable;

        $data['balancePayment'] = $this->db->query("SELECT * FROM `srp_erp_pay_balancepayment` WHERE sdMasterID={$masterID}")->result_array();

        $html = $this->load->view('system/hrm/variable_salary_declaration_print', $data, true); 
        //$html = $this->load->view('system/hrm/salary_declaration_print', $data, true);

        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', $data['extra']['approvedYN']);
        }
    }


    function save_salary_declaration_approval()
    {
        $this->form_validation->set_rules('approval_status', 'Salary Declaration Status', 'trim|required');
        if ($this->input->post('approval_status') == 2) {
            $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
        }
        $this->form_validation->set_rules('salaryOrderID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->save_salary_declaration_approval());
        }
    }

    function getDeclarationmasterCurrency_edit()
    {
        echo json_encode($this->Employee_model->getDeclarationmasterCurrency_edit());
    }

    function delete_salary_declaration()
    {
        $masterID = $this->input->post('masterID');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
        
        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        echo json_encode($this->Employee_model->delete_salary_declaration());
    }

    function save_pay_slabs_master()
    {
        $this->form_validation->set_rules('documentDate', 'Document Date', 'trim|required');
        $this->form_validation->set_rules('MasterCurrency', 'Currency', 'trim|required');
        $this->form_validation->set_rules('description', 'Description', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_pay_slabs_master());
        }
    }

    function fetch_pay_slab_master()
    {
        $convertFormat = convert_date_format_sql();
        $this->datatables->select("slabsMasterID,Description,documentSystemCode,transactionCurrency,DATE_FORMAT(documentDate,'  $convertFormat ') AS newDocumentDate");
        $this->datatables->from('srp_erp_slabsmaster');
        $this->datatables->where('companyID', $this->common_data['company_data']['company_id']);
        $this->datatables->add_column('edit', '$1', 'load_salary_slab_action(slabsMasterID)');
        echo $this->datatables->generate();
    }

    /*Load salary declaration detail after adding master */
    function Load_pay_slab_master_detail()
    {
        $id = $this->input->post('id');
        $result = $this->Employee_model->get_paySlabMaster($id);
        if (!empty($result)) {
            $data['output'] = $result;
            echo $this->load->view('system/hrm/pay_slab_detail', $data, true);
        } else {
            return false;
        }
    }


    function save_pay_slabs_detail()
    {
        $companyID = current_companyID();
        $amtStart = trim($this->input->post('start_amount') ?? '');
        $amtEnd = trim($this->input->post('end_amount') ?? '');
        $masterID = trim($this->input->post('slabMasterID') ?? '');

        $errorCount = 0;
        $errMsg = '';

        $slabDetail = $this->db->query("SELECT slabsDetailID,companyID,rangeStartAmount,rangeEndAmount FROM `srp_erp_slabsdetail` WHERE `companyID` = '{$companyID}' AND slabsMasterID = '{$masterID}' order by slabsDetailID desc")->row_array();

        $this->form_validation->set_rules('start_amount', 'Start Range Amount', 'trim|required');
        $this->form_validation->set_rules('end_amount', 'End Range Amount', 'trim|required');
        $this->form_validation->set_rules('percentage', 'Percentage', 'trim|required');
        $this->form_validation->set_rules('threshold_amount', 'Threshold Amount', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            if ($amtStart >= $amtEnd) {
                $errorCount++;
                $errMsg = 'End Range Amount should be greater than Start Range Amount';
            }
            if (!empty($slabDetail)) {
                if ($slabDetail['rangeEndAmount'] >= $amtStart) {
                    $errorCount++;
                    $errMsg = 'Start Range Amount should be greater than last End Range Amount';
                }
            }
            if ($errorCount == 0) {
                echo json_encode($this->Employee_model->save_pay_slabs_detail());
            } else {
                echo json_encode(array('e', $errMsg));
            }
        }
    }

    function delete_payee_slab_detail()
    {
        echo json_encode($this->Employee_model->delete_payee_slab_detail());
    }

    function delete_salary_declaration_master()
    {
        $masterID = $this->input->post('masterID');
        $isVariable = trim($this->input->post('isVariable') ?? '');

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
        

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        echo json_encode($this->Employee_model->delete_salary_declaration_master());
    }

    function updatePayGroupDetails()
    {
        $this->form_validation->set_rules('salaryCategory[]', 'Please select atleast one', 'required');
        $this->form_validation->set_rules('payGroupId', 'ID is missing', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->updatePayGroupDetails());
        }
    }

    function getSalaryCategories()
    {
        $companyID = current_companyID();
        $socialInsuranceID = $this->input->post('socialInsuranceID');

        $payGroupDetails = $this->db->query("SELECT
srp_erp_paygroupdetails.salaryCategoryID,
srp_erp_paygroupdetails.salaryCategoryID,
srp_erp_paygroupmaster.description,
srp_erp_paygroupmaster.socialInsuranceID,
srp_erp_pay_salarycategories.salaryDescription
FROM
srp_erp_paygroupdetails
INNER JOIN srp_erp_paygroupmaster ON srp_erp_paygroupdetails.groupID = srp_erp_paygroupmaster.payGroupID
INNER JOIN srp_erp_pay_salarycategories ON srp_erp_paygroupdetails.salaryCategoryID = srp_erp_pay_salarycategories.salaryCategoryID
WHERE srp_erp_paygroupdetails.companyID = '{
                    $companyID}' AND socialInsuranceID='{
                    $socialInsuranceID}' ")->result_array();

        $retrun = '';
        foreach ($payGroupDetails as $payGroupDetail) {
            $retrun .= '<a class="btn btn-sm btn-default"
                                                   onclick="appendFormula(\'' . $payGroupDetail['salaryDescription'] . '\',\'' . $payGroupDetail['salaryCategoryID'] . '\',\'' . $payGroupDetail['salaryCategoryID'] . '\')"
                                                   href="#"><strong> ' . $payGroupDetail['salaryDescription'] . ' </strong></a > ';
        }

        echo $retrun;
    }

    public function leave_group_master()
    {
        $this->datatables->select('leaveGroupID, description, companyID, policyDescription, isDefault ', false)
            ->from('srp_erp_leavegroup')
            ->join('srp_erp_leavepolicymaster', ' isMonthly=policyMasterID', 'left')
            ->add_column('action', '$1', 'leaveAction(leaveGroupID, ID, description)')
            ->where('companyID', current_companyID());
        echo $this->datatables->generate();
    }

    public function save_leaveGroup()
    {
        $this->form_validation->set_rules('description', 'description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $this->Employee_model->save_leaveGroup();
        }

    }

    public function LeavegroupDetails()
    {
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();
        $data['isAnnual'] = $this->db->query("SELECT isAnnualLeave 
                                        FROM srp_erp_leavetype 
                                        JOIN (SELECT leaveTypeID AS isExist FROM srp_erp_leavegroupdetails WHERE leaveGroupID={$masterID} GROUP BY leaveTypeID) AS t1 
                                        ON t1.isExist = srp_erp_leavetype.leaveTypeID WHERE companyID={$companyID}")->row('isAnnualLeave');//->isAnnualLeave; 
    
        $data['master'] = $this->db->query("select isMonthly from `srp_erp_leavegroup` WHERE leaveGroupID={$masterID} ")->row_array();
        $data['details'] = $this->db->query("SELECT CONCAT(FLOOR(noOfHourscompleted/60),'h ',MOD(noOfHourscompleted,60),'m') as noOfHourscompleted,CONCAT(FLOOR(noOfHours/60),'h ',MOD(noOfHours,60),'m') as noOfHours,isAllowminus, isCalenderDays ,noOfDaysCompleted,isRotationLeave,leaveGroupDetailID, srp_erp_leavegroup.leaveGroupID, noOfDays,srp_erp_leavetype.description,srp_erp_leavetype.leaveTypeID,policyDescription,isCarryForward,maxCarryForward,maxConsecetiveDays,accrualAfterMonth,provisionAfterMonth FROM srp_erp_leavegroup INNER JOIN     srp_erp_leavegroupdetails on srp_erp_leavegroup.leaveGroupID=srp_erp_leavegroupdetails.leaveGroupID LEFT JOIN `srp_erp_leavetype` on srp_erp_leavetype.leaveTypeID=srp_erp_leavegroupdetails.leaveTypeID LEFT JOIN `srp_erp_leavepolicymaster` on srp_erp_leavegroupdetails.policyMasterID=srp_erp_leavepolicymaster.policyMasterID WHERE srp_erp_leavegroup.leaveGroupID = {$masterID}")->result_array();
        $html = $this->load->view('system/hrm/leave_group_details_table', $data, true);
        echo $html;
    }

    public function save_maxEncash_and_eligible(){

        $leaveGroupDetailID = $this->input->post('leaveGroupDetailID');
        $max_encashment = $this->input->post('max_encashment');
        $eligibleforencashment = $this->input->post('eligibleforencashment');

        $data = array(
            'max_encashment' => $max_encashment,
            'eligibleforencashment' => $eligibleforencashment
        );

            $this->db->where("leaveGroupDetailID", $leaveGroupDetailID);
            $this->db->update('srp_erp_leavegroupdetails', $data);

            $this->session->set_flashdata('s', 'added Successfully.');
            return true;

    }


    public function getleaveGroupheader()
    {
        $masterID = $this->input->post('masterID');
        $master = $this->db->query("select * from srp_erp_leavegroup WHERE leaveGroupID=$masterID ")->row_array();
        echo json_encode($master);

    }

    public function save_leaveGroupdetail()
    {

        $this->form_validation->set_rules('leavepolicyID', 'ID is missing', 'required');
        $this->form_validation->set_rules('leaveTypeID', 'Leave Type', 'required');
        $policyID = $this->input->post('leavepolicyID');
        $isCarryForward = $this->input->post('isCarryForward');
        $maxCarryForward = $this->input->post('maxCarryForward');
        $isRotationLeave = $this->input->post('isRotationLeave');

        $maxConsecetiveDays = $this->input->post('maxConsecetiveDays');
        $accrualAfterMonth = $this->input->post('accrualAfterMonth');
        $provisionAfterMonth = $this->input->post('provisionAfterMonth');


        $this->form_validation->set_rules('noOfDays', 'noOfDays', 'required');

        if ($policyID == 1) {

            if ($maxCarryForward == 1 || $maxCarryForward == 3) {
                $this->form_validation->set_rules('carryForwardLimit', 'Carry Forward Limit', 'required|greater_than[0]');
            }
        }


        if($isRotationLeave){
            $this->form_validation->set_rules('rotationWorkingDays', 'Number of Working Days', 'required');
        }

        $this->form_validation->set_rules('masterID', 'ID is missing', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $leaveTypeID = $this->input->post('leaveTypeID');
            $noOfDays = $this->input->post('noOfDays');
            $masterID = $this->input->post('masterID');
            $isAllowminus = $this->input->post('isAllowminus');
            $isCalenderDays = $this->input->post('isCalenderDays');
            $carryForwardLimit = $this->input->post('carryForwardLimit');

            $row = $this->db->query("select * from srp_erp_leavegroupdetails WHERe leaveGroupID={$masterID} AND leaveTypeID={$leaveTypeID}")->row_array();
            if (!empty($row)) {
                $this->session->set_flashdata('e', 'Record you inserted already exist');
                echo json_encode(array('error' => 1));
                exit;
            }


            $data['isAllowminus'] = $isAllowminus;
            $data['leaveTypeID'] = $leaveTypeID;
            $data['leaveGroupID'] = $masterID;
            $data['policyMasterID'] = $policyID;

            $data['maxConsecetiveDays'] = $maxConsecetiveDays;
            $data['accrualAfterMonth'] = $accrualAfterMonth;
            $data['provisionAfterMonth'] = $provisionAfterMonth;

            $data['noOfDays'] = $noOfDays;
            $data['isCalenderDays'] = $isCalenderDays;

            if ($isCarryForward == 1) {
                if ($maxCarryForward == 1) {
                    $data['maxCarryForward'] = $carryForwardLimit;
                }
                $data['isCarryForward'] = $isCarryForward;
            }

            $data['isRotationLeave'] = $isRotationLeave;
            if($isRotationLeave){
                $data['noOfDaysCompleted'] = $this->input->post('rotationWorkingDays');
            }

            $insert = $this->db->insert('srp_erp_leavegroupdetails', $data);
            if ($insert) {
                $this->session->set_flashdata('s', 'Successfully Inserted . ');
                echo json_encode(array('error' => 0));
                exit;
            } else {
                $this->session->set_flashdata('e', 'Failed . ');
                echo json_encode(array('error' => 1));
                exit;
            }
        }

    }

    function updateValues()
    {
        $leaveGroupDetailID = trim($this->input->post('leaveGroupDetailID') ?? '');
        $fieldName = $this->input->post('fieldName');
        $value = $this->input->post('value');

        $data = array();
        if($fieldName == 'maxConsecetiveDays'){
            $data['maxConsecetiveDays'] = $value;
        }elseif($fieldName == 'provisionAfterMonth'){
            $data['provisionAfterMonth'] = $value;
        }else{
            $data['accrualAfterMonth'] = $value;
        }
        $data['modifiedPCID'] = current_pc();
        $data['modifiedUserID'] = current_userID();
        $data['modifiedDateTime'] = current_date();

        $this->db->where('leaveGroupDetailID', $leaveGroupDetailID);
        $this->db->update('srp_erp_leavegroupdetails', $data);

        if ($this->db->affected_rows() > 0) {
            echo json_encode(array('s', 'Records updated successfully'));
        } else {
            echo json_encode(array('e', 'Error in updating record'));
        }
    }

    function referback_salary_declaration()
    {
        $masterID = $this->input->post('masterID');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $masterDetail = $this->Employee_model->get_salaryVariableDeclarationMaster($masterID);
        }else{
            $masterDetail = $this->Employee_model->get_salaryDeclarationMaster($masterID);
        }
        

        if ($masterDetail['approvedYN'] == 1) {
            echo json_encode(array('e', 'This document is already approved.<p>You can not refer back this.'));
        } else {
            $this->load->library('approvals');
            if($isVariable){
                $status = $this->approvals->approve_delete($masterID, 'SVD');
            }
            else{
                $status = $this->approvals->approve_delete($masterID, 'SD');
            }
           
            if ($status == 1) {
                echo json_encode(array('s', $masterDetail['documentSystemCode'] . ' Referred Back Successfully.'));
            } else {
                echo json_encode(array('e', $masterDetail['documentSystemCode'] . ' Error in refer back.'));
            }
        }
    }

    public function get_hrPeriodMonth()
    {
        $hrPeriodID = $this->input->post('hrPeriodID');

        //echo form_dropdown('hrPeriodMonth', hrPeriodMonth_drop($hrPeriodID), '', 'class="form-control select2" id="hrPeriodMonth""');
        echo form_dropdown('hrPeriodMonth', ' ', '', 'class="form-control select2" id="hrPeriodMonth""');
    }


    public function save_leaveAccrual()
    {
        $this->Employee_model->save_leaveAccrual();
    }


    function Load_slab_start_amount()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');

        $slabDetail = $this->db->query("SELECT slabsDetailID,companyID,rangeStartAmount,rangeEndAmount FROM srp_erp_slabsdetail
                                        WHERE companyID = '{$companyID}' AND slabsMasterID = '{$masterID}'
                                        ORDER BY slabsDetailID DESC")->row_array();
        echo json_encode($slabDetail);
    }

    function saveFormula()
    {
        $this->form_validation->set_rules('formulaOriginal', 'Formula', 'trim|required');
        $this->form_validation->set_rules('formulaText', 'Formula', 'trim|required');
        $this->form_validation->set_rules('payGroupID', 'ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveFormula());
        }
    }

    function saveFormula_new()
    {
        $this->form_validation->set_rules('payGroupID', 'ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveFormula_new());
        }
    }

    function formulaDecode()
    {
        $payGroupID = $this->input->post('payGroupID');
        $decodeType = $this->uri->segment(3);
        $companyID = current_companyID();

        $formulaDecodeData = ['decodedList' => ''];

        if ($decodeType == 'isSalaryComparison') {
            $formula = $this->db->select('formulaStr')->from('srp_erp_salarycomparisonformula')
                ->where('masterID', $payGroupID)->where('companyID', $companyID)->get()->row('formulaStr');

        } else if ($decodeType == 'isSSO_slab') {
            $formula = $this->db->select('formulaString')->from('srp_erp_ssoslabdetails')
                ->where('ssoSlabDetailID', $payGroupID)->where('companyID', $companyID)->get()->row('formulaString');
        } else if ($decodeType == 'is_noPaySetup') {
            $formula = $this->db->select('formulaString')->from('srp_erp_nopayformula')
                ->where('id', $payGroupID)->where('companyID', $companyID)->get()->row('formulaString');
        } else if ($decodeType == 'is_sickLeaveSetup') {
            $postData = explode('|', $payGroupID);
            $leaveID = $postData[0];
            $isNonPayroll = $postData[1];
            $formula = $this->db->select('formulaString')->from('srp_erp_sickleavesetup')
                ->where('leaveTypeID', $leaveID)->where('isNonPayroll', $isNonPayroll)->where('companyID', $companyID)->get()->row('formulaString');
        } else if ($decodeType == 'GRATUITY' || $decodeType == 'GRATUITY-SLAB') {
            $where = ['companyID' => $companyID, 'autoID' => $payGroupID, 'masterType' => $decodeType];
            $formula = $this->db->select('formulaString')->from('srp_erp_pay_gratuityformula')
                ->where($where)->get()->row('formulaString');
        } else {
            $formula = $this->db->select('formulaString')->from('srp_erp_paygroupformula')
                ->where('payGroupID', $payGroupID)->where('companyID', $companyID)->get()->row('formulaString');
        }


        if (!empty($formula) && $formula != null) {
            $formulaDecodeData['decodedList'] = formulaDecode($formula);
        }

        echo json_encode($formulaDecodeData);
    }

    /*Pay group*/

    function fetch_paygroupmaster()
    {
        $this->datatables->select('t1.description AS description,t1.payGroupID AS payGroupID,t1.isGroupTotal AS isGroupTotal', false)
            ->from('srp_erp_paygroupmaster t1')
            ->where('t1.companyID', current_companyID())
            ->where('t1.isGroupTotal', 1)
            ->add_column('actions', '$1', 'action_payGroup(payGroupID,description,isGroupTotal)');
        echo $this->datatables->generate();
    }

    function savePayGroup()
    {
        $this->form_validation->set_rules('description[]', 'Description', 'required');
        $isGroupTotal = $this->input->post('isGroupTotal');

        if (!is_null($isGroupTotal)) {
//            $this->form_validation->set_rules('expenseGlAutoID[]', 'Expense Gl Code', 'required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->savePayGroup());
        }
    }

    function updatePayGroup()
    {
        $this->form_validation->set_rules('pgDes', 'Description', 'required');
        $this->form_validation->set_rules('hidden-id', 'ID', 'required');

        $pgIsGroupTotal = $this->input->post('pgIsGroupTotal');

        if (is_null($pgIsGroupTotal)) {
//            $this->form_validation->set_rules('pgexpenseGlAutoID', 'Expense GL Code', 'required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->updatePayGroup());
        }
    }

    function getSalaryCategoriesByGroupId()
    {
        $companyID = current_companyID();
        $payGroupId = $this->input->post('payGroupId');

        $payGroupDetails = $this->db->query("SELECT
srp_erp_paygroupdetails . salaryCategoryID,
srp_erp_paygroupdetails . salaryCategoryID,
srp_erp_paygroupmaster . description,
srp_erp_paygroupmaster . socialInsuranceID,
srp_erp_pay_salarycategories . salaryDescription
FROM
srp_erp_paygroupdetails
INNER JOIN srp_erp_paygroupmaster ON srp_erp_paygroupdetails . groupID = srp_erp_paygroupmaster . payGroupID
INNER JOIN srp_erp_pay_salarycategories ON srp_erp_paygroupdetails . salaryCategoryID = srp_erp_pay_salarycategories . salaryCategoryID
WHERE srp_erp_paygroupdetails . companyID = '{$companyID}' AND payGroupID = '{$payGroupId}' ")->result_array();

        $retrun = '';
        foreach ($payGroupDetails as $payGroupDetail) {
            $retrun .= '<a class="btn btn - sm btn -default"
                                                   onclick="appendFormula(\'' . $payGroupDetail['salaryDescription'] . '\',\'' . $payGroupDetail['salaryCategoryID'] . '\',\'' . $payGroupDetail['salaryCategoryID'] . '\',1)"
                                                   href="#"><strong>' . $payGroupDetail['salaryDescription'] . '</strong></a>';
        }

//        echo $this->db->last_query();
        echo $retrun;
    }

    function Load_GLCode_for_fixed_allowance()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');

        $slabDetail = $this->db->query("SELECT salaryCategoryID,companyID,GLCode FROM `srp_erp_pay_salarycategories` WHERE `companyID` = '{$companyID}' AND salaryCategoryID = '{$masterID}'")->row_array();
        echo json_encode($slabDetail);
    }


    function deletePayGroup()
    {
        $this->form_validation->set_rules('hidden-id', 'Page Group ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deletePayGroup());
        }
    }

    public function leaveaccrualMaster()
    {
        $this->datatables->select('leaveaccrualMasterID,leaveaccrualMasterCode,srp_erp_leaveaccrualmaster.description,concat(year,\' - \',MONTHNAME(STR_TO_DATE(month, \'%m\'))) as month,srp_erp_leavegroup.Description as leaveGroup, confirmedYN', false)
            ->from('srp_erp_leaveaccrualmaster')
            ->join('srp_erp_leavegroup', 'srp_erp_leaveaccrualmaster.leaveGroupID = srp_erp_leavegroup.leaveGroupID', 'left')
            ->add_column('edit', '$1', 'accrualAction(leaveaccrualMasterID, confirmedYN)')
            ->where('manualYN', 0)
            ->where('srp_erp_leaveaccrualmaster.policyMasterID', 3)
            ->where('srp_erp_leaveaccrualmaster.companyID', current_companyID());
        echo $this->datatables->generate();
    }

    public function LeaveAccrualdetails()
    {
        $masterID = $this->input->post('masterID');

        $header = $this->db->query("SELECT leaveType,srp_erp_leavetype.description FROM `srp_erp_leaveaccrualdetail` 
                    LEFT JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType 
                    WHERE leaveaccrualMasterID = {$masterID} group by leaveType order by description asc")->result_array();
        $data['details'] = false;
        $select = '';
        if (!empty($header)) {
            foreach ($header as $val) {
                $string = str_replace(' ', '', $val['description']);
                $select .= "sum(if(leaveType='{$val['leaveType']}',daysEntitled,0)) as '{$string}',";
            }
            $qry = "SELECT $select CONCAT(ECode,' - ',Ename2) as Ename2,empID,srp_erp_leaveaccrualdetail.description,daysEntitled,srp_erp_leavetype.description as leavetype,srp_erp_leavetype.leaveTypeID FROM `srp_erp_leaveaccrualdetail` LEFT JOIN `srp_employeesdetails` on EidNo=empID LEFT JOIN `srp_erp_leavetype`  on srp_erp_leavetype.leaveTypeID=srp_erp_leaveaccrualdetail.leaveType WHERE leaveaccrualMasterID = {$masterID} group by empID order by Ename2 ";
            $data['details'] = $this->db->query($qry)->result_array();
            //echo $this->db->last_query();


        }

        $data['confirmedYN'] = $this->db->query("select confirmedYN from srp_erp_leaveaccrualmaster WHERE leaveaccrualMasterID=$masterID ")->row_array();

        $data['header'] = $header;
        $html = $this->load->view('system/hrm/leave_accrual_detail_table', $data, true);
        echo $html;
    }

    public function getAccrualHeader()
    {
        $masterID = $this->input->post('masterID');
        $data = $this->db->query("select * from srp_erp_leaveaccrualmaster where leaveaccrualMasterID={$masterID} ")->row_array();
        echo json_encode($data);
    }

    public function leaveCalenderEvent()
    {
        $start = $this->input->get('start');
        $end = $this->input->get('end');
        $event_array = array();
        $event_array2 = array();
        $companyID = current_companyID();


        $sql2 = "SELECT *, DATE_ADD(endDate, INTERVAL 1 DAY) endDate2 FROM srp_erp_calenderevent WHERE startDate >='{$start}' AND endDate <='{$end}' AND companyID={$companyID} ";
        $sql = "SELECT fulldate FROM srp_erp_calender WHERE weekend_flag=1 AND fulldate BETWEEN '{$start}' AND '{$end}' AND companyID={$companyID}";
        $result = $this->db->query($sql)->result_array();
        $result2 = $this->db->query($sql2)->result_array();

        foreach ($result as $record) {
            $event_array[] = array(
                'id' => 'Leave',
                'start' => $record['fulldate'],
                'end' => $record['fulldate'],
                'rendering' => 'background',
                'backgroundColor' => '#009933'

            );
        }
        foreach ($result2 as $record2) {
            if ($record2['type'] == 1) {
                $datetime = new DateTime($record2['startDate'], new DateTimeZone('America/Chicago'));
                $datetime_string = $datetime->format('c');
                $enddatetime = new DateTime($record2['endDate'], new DateTimeZone('America/Chicago'));
                $enddatetime_string = $enddatetime->format('c');
                $record2['startDate'] = $datetime_string;
                $date = strtotime("-1 day", strtotime($record2['endDate']));
                $record2['endDate'] = $enddatetime_string;
                $event_array2[] = array(
                    'id' => $record2['eventID'],
                    'title' => $record2['title'],
                    'start' => $record2['startDate'],
                    'end' => $record2['endDate2'],
                    'color' => '#AB47BC'
                );
            } else {


                $start = strtotime($record2['startDate']);
                $startDate = date('Y-m-d', $start);
                $end = strtotime($record2['endDate2']);
                $endDate = date('Y-m-d', $end);

                $event_array2[] = array(
                    'id' => $record2['eventID'],
                    'title' => $record2['title'],
                    'start' => $startDate,
                    'end' => $endDate,
                    'color' => '#ff8a80',
                    'allDay' => true


                );
            }

        }

        $arr = array_merge($event_array2, $event_array);

        /* print_r($arr);*/

        echo json_encode($arr);
    }

    public function leaveCalender_insert()
    {

        $postedWithAccrual = $this->input->post('postedWithAccrual');
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');
        $companyID = current_companyID();
        $type = $this->input->post('type');  // type =1 event , type =2 holiday


        /***************************************************************************************************************
         * If $postedWithAccrual != 'Y' than
         * - check whether there is/are leave date falling on selected date range
         * - if there are leave can founded in this date range than return data to leave accrual confirmation
         *
         * If $postedWithAccrual == 'Y' it means this function came with leave accruals confirmation
         ***************************************************************************************************************/


        if ($type == 2) {

            if ($postedWithAccrual != 'Y') {
                $startDate_app = date('Y-m-d', strtotime($startDate));
                $endDate_app = date('Y-m-d', strtotime($endDate . ' -1 day'));

                /**** Get if there are leave application in this date with isCalenderDays = 0 ***/
                $holiday = $this->db->query("SELECT eventID, title, DATE(startDate) AS sDate, DATE(endDate) AS eDate
                                             FROM srp_erp_calenderevent WHERE companyID={$companyID} AND `type` = 2
                                             AND (
                                                  ( '{$startDate_app}' BETWEEN DATE(startDate) AND DATE(endDate) )
                                                  OR ( '{$endDate_app}' BETWEEN DATE(startDate) AND DATE(endDate) )
                                                  OR ( DATE(startDate) BETWEEN '{$startDate_app}' AND '{$endDate_app}' )
                                                  OR ( DATE(endDate) BETWEEN '{$startDate_app}' AND '{$endDate_app}' )
                                              )")->result_array();

                if (!empty($holiday)) {
                    $msg = '';
                    foreach ($holiday as $rowH) {
                        $msg .= $rowH['title'] . ' => ' . $rowH['sDate'] . ' &nbsp;-&nbsp; ' . $rowH['eDate'] . ' <br/>';
                    }
                    die(json_encode(['e', 'Following holidays is/are already declared in this date range<br/>' . $msg]));
                }


                /**** Get if there are leave application in this date with isCalenderDays = 0 ***/
                $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, lType.description, empTB.ECode, Ename2, startDate, endDate
                                      FROM srp_erp_leavemaster AS lMaster
                                      JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID=lMaster.leaveTypeID AND lType.companyID={$companyID}
                                      JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=lMaster.empID AND Erp_companyID={$companyID}
                                      WHERE lMaster.companyID={$companyID} AND applicationType = 1 AND lMaster.confirmedYN=1 AND isCalenderDays=0
                                      AND (
                                          ( ( '{$startDate_app}' BETWEEN startDate AND endDate ) OR ( '{$endDate_app}' BETWEEN startDate AND endDate ) )
                                            OR
                                          ( ( startDate BETWEEN '{$startDate_app}' AND '{$endDate_app}' ) OR ( endDate BETWEEN '{$startDate_app}' AND '{$endDate_app}' ) )
                                      )")->result_array();


                if (!empty($leaveApp)) {
                    $endDate_period = date('Y-m-d', strtotime($endDate));
                    $period1 = new DatePeriod(
                        new DateTime($startDate_app),
                        new DateInterval('P1D'),
                        new DateTime($endDate_period)
                    );


                    /**** Get already declared as holiday/weekend ****/
                    $isLeaveDeclared = $this->db->query("SELECT fulldate FROM srp_erp_calender WHERE companyID={$companyID}
                                                     AND fulldate BETWEEN '{$startDate_app}' AND '{$endDate_app}' AND
                                                     (holiday_flag=1 OR weekend_flag=1)")->result_array();

                    $leaveDeclaredDate = [];
                    if (!empty($isLeaveDeclared)) {
                        $leaveDeclaredDate = array_column($isLeaveDeclared, 'fulldate');
                    }

                    $period = [];
                    foreach ($period1 as $date) {
                        $periodDate = $date->format("Y-m-d");
                        if (!empty($leaveDeclaredDate)) {
                            /*** Only add undeclared holiday/weekend dates to period array***/
                            if ((!in_array($periodDate, $leaveDeclaredDate))) {
                                $period[] = $periodDate;
                            }
                        } else {
                            $period[] = $periodDate;
                        }
                    }


                    $table = '<strong>Holiday Date Range</strong> &nbsp;: ' . $startDate_app . ' &nbsp;-&nbsp; ' . $endDate_app;
                    $table .= '<table class="' . table_class() . '" id="accrual-data-table">
                            <thead>
                            <tr style="white-space: nowrap">
                                <th>#</th>
                                <th>Employee</th>
                                <th>Document Code </th>
                                <th>Leave Date</th>
                                <th>Leave Type</th>
                                <th>Accrual Date</th>
                                <th><input type="checkbox" id="checkAllLeave" onclick="checkAllLeave(this)"/></th>
                            </tr>
                            </thead>
                            <tbody>';

                    foreach ($leaveApp as $key => $app) {

                        $row_str = date('Y-m-d', strtotime($app['startDate']));
                        $row_end = date('Y-m-d', strtotime($app['endDate']));

                        $period_int = new DatePeriod(
                            new DateTime($row_str),
                            new DateInterval('P1D'),
                            new DateTime(date('Y-m-d', strtotime($row_end . ' +1 day')))
                        );


                        foreach ($period_int as $date) {
                            $periodDate = $date->format("Y-m-d");
                            /*** dates that are fall on applied leaves with in selected holiday range ***/
                            if ((in_array($periodDate, $period))) {
                                $checkVal = $app['leaveMasterID'] . '|' . $periodDate;
                                $table .= '<tr>';
                                $table .= '<td>' . ($key + 1) . '</td>';
                                $table .= '<td>' . $app['ECode'] . '-' . $app['Ename2'] . '</td>';
                                $table .= '<td>' . $app['documentCode'] . '</td>';
                                $table .= '<td>' . $row_str . ' &nbsp;-&nbsp; ' . $row_end . '</td>';
                                $table .= '<td>' . $app['description'] . '</td>';
                                $table .= '<td>' . $periodDate . '</td>';
                                $table .= '<td align="center">
                                             <input type="checkbox" class="leaveAccruals" value="' . $checkVal . '" onclick="unCheckLeave()"/>
                                           </td>';
                                $table .= '</tr>';
                            }
                        }
                    }

                    $table .= '</tbody></table>';

                    /**** Return data to accrual confirmation ****/
                    die(json_encode(['c', $table]));
                }

            } else {

                $accID_list_post = $this->input->post('accID_list');

                if (!empty($accID_list_post)) {

                    $accID_list = '';
                    $accID_arr = [];
                    foreach ($accID_list_post as $keyList => $list) {
                        $list_arr = explode('|', $list);
                        $listID = $list_arr[0];
                        $listDate = $list_arr[1];

                        $sep = ($keyList > 0) ? ',' : '';
                        $accID_list .= $sep . $listID;

                        /**** Implementing a array based on the leave master id ($listID), To collect their relative accrual dates  ****/
                        $accID_arr[$listID][] = $listDate;

                    }


                    /**** Get the data of selected leave application ***/
                    $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, empID, lMaster.leaveTypeID, lType.description, empTB.leaveGroupID,
                                              policyMasterID, approvedYN, startDate, ishalfDay, lMaster.isCalenderDays,lMaster.days
                                              FROM srp_erp_leavemaster AS lMaster
                                              JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID=lMaster.leaveTypeID AND lType.companyID={$companyID}
                                              JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=lMaster.empID AND Erp_companyID={$companyID}
                                              WHERE lMaster.companyID={$companyID} AND applicationType = 1 AND lMaster.leaveMasterID IN ({$accID_list})
                                              AND lMaster.confirmedYN=1 AND isCalenderDays=0")->result_array();


                    if (!empty($leaveApp)) {

                        $this->db->trans_start();
                        $calendarReturn = $this->leaveAccrual_onCalenderUpdate();
                        $calendarHolidayID = $calendarReturn[2];


                        foreach ($leaveApp as $app) {

                            $accDet = [];
                            $leaveMasterID = $app['leaveMasterID'];
                            $daysEntitle = ($app['ishalfDay'] == 1) ? '0.5' : count($accID_arr[$leaveMasterID]);
                            $period = $app['startDate'];
                            $approvedYN = $app['approvedYN'];
                            $d = explode('-', $period);
                            $description = 'Leave Accrual for holidays ';
                            $comment = $description . ' - ' . $app['documentCode'];
                            $leaveGroupID = $app['leaveGroupID'];
                            $policyMasterID = $app['policyMasterID'];
                            $this->load->library('sequence');
                            $code = $this->sequence->sequence_generator('LAM');

                            $leave_policy = getPolicyValues('LTAK', 'All');

                            if($leave_policy != 1){

                                $accMaster = array(
                                    'companyID' => current_companyID(),
                                    'leaveaccrualMasterCode' => $code,
                                    'documentID' => 'LAM',
                                    'leaveMasterID' => $leaveMasterID,
                                    'calendarHolidayID' => $calendarHolidayID,
                                    'description' => $comment,
                                    'year' => $d[0],
                                    'month' => $d[1],
                                    'leaveGroupID' => $leaveGroupID,
                                    'policyMasterID' => $policyMasterID,
                                    'createdUserGroup' => current_user_group(),
                                    'createDate' => current_date(),
                                    'createdpc' => current_pc(),
                                );
    
                                if ($approvedYN == 1) {
                                    $accMaster['confirmedYN'] = 1;
                                    $accMaster['confirmedby'] = current_userID();
                                    $accMaster['confirmedDate'] = current_date();
                                }
    
    
                                $this->db->insert('srp_erp_leaveaccrualmaster', $accMaster);
    
    
                                $accDet['leaveaccrualMasterID'] = $this->db->insert_id();
                                $accDet['empID'] = $app['empID'];
                                $accDet['comment'] = '';
                                $accDet['leaveGroupID'] = $leaveGroupID;
                                $accDet['leaveType'] = $app['leaveTypeID'];
                                $accDet['daysEntitled'] = $daysEntitle;
                                $accDet['comment'] = $comment;
                                $accDet['description'] = $description;
                                $accDet['calendarHolidayID'] = $calendarHolidayID;
                                $accDet['leaveMasterID'] = $leaveMasterID;
                                $accDet['createDate'] = current_date();
                                $accDet['createdUserGroup'] = current_user_group();
                                $accDet['createdPCid'] = current_pc();
    
                                $this->db->insert('srp_erp_leaveaccrualdetail', $accDet);

                            } else {
                                //update for leavemaster
                                $data = array();

                                if($app['isCalenderDays'] != 1){
                                    $days = $app['days'] - 1;

                                    $data['days'] = $days;
                                    $data['adjustedLeaveDays'] = 1;

                                    $res = $this->db->where('leaveMasterID',$leaveMasterID)->update('srp_erp_leavemaster',$data);
                                }

                            }
                            
                        }

                        $this->db->trans_complete();

                        if ($this->db->trans_status() == true) {
                            $this->db->trans_commit();
                            die(json_encode(['s', 'Calender successfully updated']));

                        } else {
                            $this->db->trans_rollback();
                            die(json_encode(['e', 'Error in process.']));
                        }
                    }
                }

            }
        }
        $this->db->trans_start();
        $returnData = $this->leaveAccrual_onCalenderUpdate();
        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode($returnData);

        } else {
            echo json_encode(['e', 'Error in process.']);
            $this->db->trans_rollback();
        }
    }

    function leaveAccrual_onCalenderUpdate()
    {
        $title = $this->input->post('title');
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');
        $companyID = current_companyID();
        $type = $this->input->post('type');  // type =1 event , type =2 holiday
        $endDate = date('Y-m-d H:i:s', strtotime($endDate . ' - 1 day'));

        if ($type == 2) {
            $startDate = date('Y-m-d', strtotime($startDate));
            $endDate = date('Y-m-d', strtotime($endDate));
        }

        $calender_data = [
            'title' => $title,
            'startDate' => $startDate,
            'endDate' => $endDate,
            'url' => '',
            'allDay' => '',
            'companyID' => $companyID,
            'type' => $type
        ];

        $this->db->insert('srp_erp_calenderevent', $calender_data);
        $calendarHolidayID = $this->db->insert_id();


        if ($type != 1) {
            $col = 'holiday_flag';

            $this->db->where("fulldate BETWEEN DATE('$startDate') AND DATE('$endDate') ");
            $this->db->where("companyID", $companyID);
            $this->db->update('srp_erp_calender', array($col => 1));
        }

        return ['s', 'Calender successfully updated', $calendarHolidayID];
    }

    public function delete_event()
    {
        $id = $this->input->post('id');
        $companyID = current_companyID();

        $this->db->trans_start();
        $result = $this->db->query("SELECT startDate,endDate,type FROM srp_erp_calenderevent WHERE eventID={$id} AND companyID={$companyID}")->row_array();
        $leave_policy = getPolicyValues('LTAK', 'All');

        if ($result['type'] == 2 && $leave_policy != 1) {

            $r_startDate = $result['startDate'];
            $r_endDate = $result['endDate'];

            /**** Get if there are leave application in this date with isCalenderDays = 0 ***/
            $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, lType.description, empTB.ECode, Ename2, startDate, endDate
                                      FROM srp_erp_leavemaster AS lMaster
                                      JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID=lMaster.leaveTypeID AND lType.companyID={$companyID}
                                      JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=lMaster.empID AND Erp_companyID={$companyID}
                                      WHERE lMaster.companyID={$companyID} AND applicationType = 1 AND lMaster.confirmedYN=1 AND isCalenderDays=0
                                      AND (
                                          ( ( '{$r_startDate}' BETWEEN startDate AND endDate ) OR ( '{$r_endDate}' BETWEEN startDate AND endDate ) )
                                            OR
                                          ( ( startDate BETWEEN '{$r_startDate}' AND '{$r_endDate}' ) OR ( endDate BETWEEN '{$r_startDate}' AND '{$r_endDate}' ) )
                                      )")->result_array();
            
          


            if (!empty($leaveApp)) {

              
                $leaveID_arr = array_column($leaveApp, 'leaveMasterID');
                $leaveMasterID_list = implode(',', $leaveID_arr);


                $accrualData = $this->db->query("SELECT leaveMasterID, calendarHolidayID, confirmedYN FROM srp_erp_leaveaccrualmaster
                                                 WHERE companyID={$companyID} AND leaveMasterID IN($leaveMasterID_list)")->result_array();

                $accrualLeaveID_arr = array_column($accrualData, 'leaveMasterID');

                $holidayDateRange = new DatePeriod(
                    new DateTime($r_startDate),
                    new DateInterval('P1D'),
                    new DateTime(date('Y-m-d', strtotime($r_endDate . ' +1 day')))
                );


                $holidayPeriod = [];
                foreach ($holidayDateRange as $date) {
                    $periodDate = $date->format("Y-m-d");
                    $holidayPeriod[] = $periodDate;
                }

                $isPendingAccrual = false;
                $table = '<form id="holidayAccrual_form" > <input type="hidden" name="holidayID" value="' . $id . '" />';
                $table .= '<strong>Holiday Date Range</strong> &nbsp;: ' . date('Y-m-d', strtotime($r_startDate));
                $table .= '&nbsp;<strong>-</strong>&nbsp; ' . date('Y-m-d', strtotime($r_endDate));
                $table .= '<table class="' . table_class() . '" id="accrual-data-table">
                            <thead>
                            <tr style="white-space: nowrap">
                                <th>#</th>
                                <th>Employee</th>
                                <th>Document Code </th>
                                <th>Leave Date</th>
                                <th>Leave Type</th>
                                <th>Accrual Date</th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>';

           
           
                $n = 1;
                foreach ($leaveApp as $key => $leaveData) {
                    $lID = $leaveData['leaveMasterID'];
                    if (!in_array($lID, $accrualLeaveID_arr)) {

                        $leave_startDate = date('Y-m-d', strtotime($leaveData['startDate']));
                        $leave_endDate = date('Y-m-d', strtotime($leaveData['endDate']));
                        $leavePeriod = new DatePeriod(
                            new DateTime($leave_startDate),
                            new DateInterval('P1D'),
                            new DateTime(date('Y-m-d', strtotime($leave_endDate . ' +1 day')))
                        );
                        
        

                        foreach ($leavePeriod as $date) {
                            $leaveDate = $date->format("Y-m-d");

                            if (in_array($leaveDate, $holidayPeriod)) {
                                $isPendingAccrual = true;
                                $checkVal = $leaveData['leaveMasterID'] . '|' . $leaveDate;
                                $table .= '<tr>';
                                $table .= '<td>' . $n . '</td>';
                                $table .= '<td>' . $leaveData['ECode'] . '-' . $leaveData['Ename2'] . '</td>';
                                $table .= '<td>' . $leaveData['documentCode'] . '</td>';
                                $table .= '<td>' . $leave_startDate . ' &nbsp;-&nbsp; ' . $leave_endDate . '</td>';
                                $table .= '<td>' . $leaveData['description'] . '</td>';
                                $table .= '<td>' . $leaveDate . '</td>';
                                $table .= '<td align="center">
                                             <input type="checkbox" name="accID_list[]" class="leaveAccruals" value="' . $checkVal . '" onclick="unCheckLeave()"/>
                                           </td>';
                                $table .= '</tr>';

                                $n++;
                            }
                        }
                    }

                }

                $table .= '</tbody></table></form>';

              
                /**** Return data to accrual confirmation ****/
                if ($isPendingAccrual == true) {
                    die(json_encode(['c', $table]));
                }
            }


            $valid = $this->db->query("SELECT startDate,endDate,type FROM  srp_erp_calenderevent
                                       WHERE (DATE(startDate) BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}') OR DATE(endDate)
                                       BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}'))
                                       AND companyID={$companyID} AND type=2 AND eventID !={$id}")->result_array();


            if (empty($valid)) {
                /* $endDatee = strtotime($r_endDate);
                 $endDatee = date('Y-m-d', strtotime('-1 day', $endDatee));*/
                $this->db->where("companyID", $companyID);
                $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
                $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
            } else {

                foreach ($valid as $dateValue) {
                    $dates = $this->getDatesFromRange($dateValue['startDate'], $dateValue['endDate']);
                    foreach ($dates as $val) {
                        $detail[] = $val;
                    }
                }
                array_unique($detail);

                if (!empty($detail)) {
                    $dateFilter = "'" . implode("', '", $detail) . "'";
                    $this->db->where("companyID", $companyID);
                    $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
                    $this->db->where("fulldate NOT IN ($dateFilter) ");
                    $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
                }
            }

            /*** Delete leave accruals of this calender event/leave ***/
            $this->db->delete('srp_erp_leaveaccrualmaster', ['calendarHolidayID' => $id, 'companyID' => $companyID]);
            $this->db->delete('srp_erp_leaveaccrualdetail', ['calendarHolidayID' => $id]);

        } else {

            $r_startDate = $result['startDate'];
            $r_endDate = $result['endDate'];

            /**** Get if there are leave application in this date with isCalenderDays = 0 ***/
            $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, lType.description, empTB.ECode, Ename2, startDate, endDate, lMaster.isCalenderDays, lMaster.adjustedLeaveDays,lMaster.days
                                      FROM srp_erp_leavemaster AS lMaster
                                      JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID=lMaster.leaveTypeID AND lType.companyID={$companyID}
                                      JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=lMaster.empID AND Erp_companyID={$companyID}
                                      WHERE lMaster.companyID={$companyID} AND applicationType = 1 AND lMaster.confirmedYN=1 AND isCalenderDays=0
                                      AND (
                                          ( ( '{$r_startDate}' BETWEEN startDate AND endDate ) OR ( '{$r_endDate}' BETWEEN startDate AND endDate ) )
                                            OR
                                          ( ( startDate BETWEEN '{$r_startDate}' AND '{$r_endDate}' ) OR ( endDate BETWEEN '{$r_startDate}' AND '{$r_endDate}' ) )
                                      )")->result_array();

            
            foreach ($leaveApp as $app) {

                $leaveMasterID = $app['leaveMasterID'];

                //update for leavemaster
                $data = array();

                if($app['isCalenderDays'] != 1 && $app['adjustedLeaveDays'] == 1 ){
                    
                    $days = $app['days'] + 1;
                    $data['days'] = $days;
                    $data['adjustedLeaveDays'] = 0;

                    $res = $this->db->where('leaveMasterID',$leaveMasterID)->update('srp_erp_leavemaster',$data);
                }

            }

            
            $valid = $this->db->query("SELECT startDate,endDate,type FROM  srp_erp_calenderevent
                                       WHERE (DATE(startDate) BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}') OR DATE(endDate)
                                       BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}'))
                                       AND companyID={$companyID} AND type=2 AND eventID !={$id}")->result_array();


            if (empty($valid)) {
                /* $endDatee = strtotime($r_endDate);
                 $endDatee = date('Y-m-d', strtotime('-1 day', $endDatee));*/
                $this->db->where("companyID", $companyID);
                $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
                $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
            } else {

                foreach ($valid as $dateValue) {
                    $dates = $this->getDatesFromRange($dateValue['startDate'], $dateValue['endDate']);
                    foreach ($dates as $val) {
                        $detail[] = $val;
                    }
                }
                array_unique($detail);

                if (!empty($detail)) {
                    $dateFilter = "'" . implode("', '", $detail) . "'";
                    $this->db->where("companyID", $companyID);
                    $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
                    $this->db->where("fulldate NOT IN ($dateFilter) ");
                    $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
                }
            }


        }


        $this->db->delete('srp_erp_calenderevent', array('eventID' => $id));

        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function delete_eventWithAccrual()
    {
        $id = $this->input->post('holidayID');
        $accID_list_post = $this->input->post('accID_list');
        $companyID = current_companyID();

        $this->db->trans_start();
        $result = $this->db->query("SELECT startDate,endDate,type FROM srp_erp_calenderevent WHERE eventID={$id} AND companyID={$companyID}")->row_array();

        $r_startDate = $result['startDate'];
        $r_endDate = $result['endDate'];

        /*** Delete leave accruals of this calender event/leave that are added on this holiday create***/
        $this->db->delete('srp_erp_leaveaccrualmaster', ['calendarHolidayID' => $id, 'companyID' => $companyID]);
        $this->db->delete('srp_erp_leaveaccrualdetail', ['calendarHolidayID' => $id]);


        if (!empty($accID_list_post)) {

            $accID_list = '';
            $accID_arr = [];
            foreach ($accID_list_post as $keyList => $list) {
                $list_arr = explode('|', $list);
                $listID = $list_arr[0];
                $listDate = $list_arr[1];

                $sep = ($keyList > 0) ? ',' : '';
                $accID_list .= $sep . $listID;

                /**** Implementing a array based on the leave master id ($listID), To collect their relative accrual dates  ****/
                $accID_arr[$listID][] = $listDate;

            }
            //echo '<pre>'; print_r($accID_arr); echo '</pre>';

            /**** Get the data of selected leave application ***/
            $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, empID, lMaster.leaveTypeID, lType.description, empTB.leaveGroupID,
                                          policyMasterID, approvedYN, startDate, ishalfDay
                                          FROM srp_erp_leavemaster AS lMaster
                                          JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID=lMaster.leaveTypeID AND lType.companyID={$companyID}
                                          JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=lMaster.empID AND Erp_companyID={$companyID}
                                          WHERE lMaster.companyID={$companyID} AND applicationType = 1 AND lMaster.leaveMasterID IN ({$accID_list})
                                          AND lMaster.confirmedYN=1")->result_array();
            //echo '<pre>'; print_r($leaveApp); echo '</pre>';        die();
            if (!empty($leaveApp)) {

                $this->db->trans_start();
                $calendarHolidayID = null;

                foreach ($leaveApp as $app) {

                    $accDet = [];
                    $leaveMasterID = $app['leaveMasterID'];
                    $daysEntitle = ($app['ishalfDay'] == 1) ? '0.5' : count($accID_arr[$leaveMasterID]);
                    $period = $app['startDate'];
                    $approvedYN = $app['approvedYN'];
                    $d = explode('-', $period);
                    $description = 'Leave Accrual for holiday delete ';
                    $comment = $description . ' - ' . $app['documentCode'];
                    $leaveGroupID = $app['leaveGroupID'];
                    $policyMasterID = $app['policyMasterID'];
                    $this->load->library('sequence');
                    $code = $this->sequence->sequence_generator('LAM');


                    $accMaster = [
                        'companyID' => current_companyID(),
                        'leaveaccrualMasterCode' => $code,
                        'documentID' => 'LAM',
                        'leaveMasterID' => $leaveMasterID,
                        'calendarHolidayID' => $calendarHolidayID,
                        'description' => $comment,
                        'year' => $d[0],
                        'month' => $d[1],
                        'leaveGroupID' => $leaveGroupID,
                        'policyMasterID' => $policyMasterID,
                        'createdUserGroup' => current_user_group(),
                        'createDate' => current_date(),
                        'createdpc' => current_pc(),
                    ];

                    if ($approvedYN == 1) {
                        $accMaster['confirmedYN'] = 1;
                        $accMaster['confirmedby'] = current_userID();
                        $accMaster['confirmedDate'] = current_date();
                    }


                    $this->db->insert('srp_erp_leaveaccrualmaster', $accMaster);


                    $accDet['leaveaccrualMasterID'] = $this->db->insert_id();
                    $accDet['empID'] = $app['empID'];
                    $accDet['comment'] = '';
                    $accDet['leaveGroupID'] = $leaveGroupID;
                    $accDet['leaveType'] = $app['leaveTypeID'];
                    $accDet['daysEntitled'] = ($daysEntitle * -1);
                    $accDet['comment'] = $comment;
                    $accDet['description'] = $description;
                    $accDet['calendarHolidayID'] = $calendarHolidayID;
                    $accDet['leaveMasterID'] = $leaveMasterID;
                    $accDet['createDate'] = current_date();
                    $accDet['createdUserGroup'] = current_user_group();
                    $accDet['createdPCid'] = current_pc();

                    $this->db->insert('srp_erp_leaveaccrualdetail', $accDet);

                }

            }
        }


        $valid = $this->db->query("SELECT startDate,endDate,type FROM  srp_erp_calenderevent
                                   WHERE (DATE(startDate) BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}') OR DATE(endDate)
                                   BETWEEN DATE('{$r_startDate}') AND DATE('{$r_endDate}'))
                                   AND companyID={$companyID} AND type=2 AND eventID !={$id}")->result_array();


        if (empty($valid)) {
            $this->db->where("companyID", $companyID);
            $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
            $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
        } else {

            foreach ($valid as $dateValue) {
                $dates = $this->getDatesFromRange($dateValue['startDate'], $dateValue['endDate']);
                foreach ($dates as $val) {
                    $detail[] = $val;
                }
            }
            array_unique($detail);

            if (!empty($detail)) {
                $dateFilter = "'" . implode("', '", $detail) . "'";
                $this->db->where("companyID", $companyID);
                $this->db->where("fulldate BETWEEN date('{$r_startDate}') AND date('{$r_endDate}') ");
                $this->db->where("fulldate NOT IN ($dateFilter) ");
                $this->db->update('srp_erp_calender', array('holiday_flag' => 0));
            }
        }


        $this->db->delete('srp_erp_calenderevent', array('eventID' => $id));

        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }
    }

    public function searchLeaveemployee()
    {
        $keyword = $this->input->get('keyword');
        $emp = $this->Employee_model->searchleaveEmployee($keyword);


        if (!empty($emp)) {
            echo json_encode($emp);
        } else {
            $noData[0] = array(
                'DesDescription' => '',
                'EIdNo' => '',
                'Ename1' => '',
                'Ename2' => '',
                'Ename3' => '',
                'ECode' => '',
                'Match' => 'No records',
            );
            echo json_encode($noData);
        }
    }


    function loadLeaveDropDown()
    {
        $empID = $this->input->post('empID');

        $leaveTypes = $this->db->query("SELECT srp_erp_leavetype.* FROM `srp_employeesdetails` LEFT JOIN `srp_erp_leavegroupdetails` ON `srp_employeesdetails`.`leaveGroupID` = `srp_erp_leavegroupdetails`.`leaveGroupID` LEFT JOIN `srp_erp_leavetype` on srp_erp_leavegroupdetails.leaveTypeID=srp_erp_leavetype.leaveTypeID WHERE EidNo = '{$empID}'")->result_array();

        $html = "<select name='leaveType' class='form-control frm_input' id='leaveType'>";
        $html .= "<option value=''>Select a Type</option>";
        if ($leaveTypes) {
            foreach ($leaveTypes as $leave) {
                $html .= '<option value="' . $leave['leaveTypeID'] . '" data-value="' . $leave['isPaidLeave'] . '">' . $leave['description'] . '</option>';
            }
        }
        $html .= '</select>';

        echo $html;

    }

    function save_leave_adjustment()
    {
        $this->Employee_model->save_leaveAdjustment();
    }

    public function leaveAdjustmentMaster()
    {
        $this->datatables->select('leaveaccrualMasterID,leaveaccrualMasterCode,srp_erp_leaveaccrualmaster.description as description  ,concat(year,\' - \',MONTHNAME(STR_TO_DATE(month, \'%m\'))) as month,srp_erp_leavegroup.Description as leaveGroup,confirmedYN', false)
            ->from('srp_erp_leaveaccrualmaster')
            ->join('srp_erp_leavegroup', 'srp_erp_leaveaccrualmaster.leaveGroupID = srp_erp_leavegroup.leaveGroupID', 'left')
            ->add_column('edit', '$1', 'leaveAdjustmentAction(leaveaccrualMasterID,confirmedYN)')
            ->add_column('confirmedYN', '$1', 'confirm(confirmedYN)')
            ->where('manualYN', 1)
            ->where('srp_erp_leaveaccrualmaster.companyID', current_companyID());
        echo $this->datatables->generate();
    }

    function leaveAdjustmentDetail()
    {
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();

        $header = $this->db->query("SELECT accMaster.leaveGroupID,leaveType, lType.description, leaveTypeData.policyMasterID, isCarryForward                           
                            FROM srp_erp_leaveaccrualmaster AS accMaster
                            LEFT JOIN srp_erp_leaveaccrualdetail AS accDet ON accMaster.leaveaccrualMasterID = accDet.leaveaccrualMasterID 
                            LEFT JOIN srp_erp_leavetype AS lType ON lType.leaveTypeID = accDet.leaveType 
                            LEFT JOIN(
                                SELECT gMaster.leaveGroupID, leaveTypeID, policyMasterID, isCarryForward 
                                FROM srp_erp_leavegroup AS gMaster
                                JOIN srp_erp_leavegroupdetails AS gDet ON gMaster.leaveGroupID=gDet.leaveGroupID
                                WHERE companyID = {$companyID}
                            ) AS leaveTypeData ON leaveTypeData.leaveGroupID=accMaster.leaveGroupID 
                            AND leaveTypeData.leaveTypeID = accDet.leaveType
                            WHERE accMaster.leaveaccrualMasterID = {$masterID}    
                            AND ( accDet.cancelledLeaveMasterID = 0 OR accDet.cancelledLeaveMasterID IS NULL ) 
                            GROUP BY leaveType ORDER BY lType.description ASC")->result_array();

        $data['details'] = FALSE;
        $select = '';
        $select2 = '';

        $detailCount = $this->db->get_where('srp_erp_leaveaccrualdetail', ['leaveaccrualMasterID' => $masterID])->num_rows();

        if ($detailCount > 0) {
            $currentYearFirstDate = date('Y-01-01');
            $currentYearLastDate = date('Y-12-31');

            $monthStart = date('Y-m-01');
            $monthEnd = date('Y-m-t');

            foreach ($header as $val) {
                $isCarryForward = $val['isCarryForward'];
                $policyMasterID = $val['policyMasterID'];
                $leaveGroupID = $val['leaveGroupID'];
                $string = str_replace(' ', '', $val['description']);
                $lType = $val['leaveType'];

                if ($policyMasterID == 2) { //Hourly
                    $select .= "sum(if(leaveType='{$lType}',hoursEntitled,0)) as '{$string}',";
                    $select2 .= "sum(if(leaveType='{$lType}',hoursEntitled,0)) - IFNULL( ( SELECT SUM(if(leaveTypeID='{$lType}',hours,0)) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.empID = empTB.EIdNo AND approvedYN = 1 ), 0 ) as '{$string}',";
                } else {
                    $carryForwardLogic = '';
                    $monthlyFirstDate = date('Y-m-01', strtotime($currentYearFirstDate));
                    $yearFirstDate = date('Y-01-01', strtotime($currentYearFirstDate));
                    $asOfDate = date_format(date_create(current_date()),"Y-m-d");
                    
                    if ($policyMasterID == 1) { // Annually
                        $carryForwardLogic =  " AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearFirstDate}'
                                                AND '{$asOfDate}',endDate BETWEEN '{$monthlyFirstDate}' AND '{$asOfDate}'), endDate <= '{$asOfDate}') ";
                    } else { // Monthly
                        $carryForwardLogic =" AND IF( isCarryForward=0  AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),
                        IF( leavGroupDet.policyMasterID=1, endDate BETWEEN '{$yearFirstDate}' AND '{$asOfDate}',endDate BETWEEN '{$monthlyFirstDate}' AND '{$asOfDate}'),
                          endDate <= '{$asOfDate}') ";
                          
            
                    }

                    $select .= "sum(if(leaveType='{$lType}',daysEntitled,0)) as '{$string}',";
                    $select2 .= "sum( IF ( leaveType = '{$lType}', daysEntitled, 0 ) ) - 
                                 IFNULL( ( SELECT SUM( IF (srp_erp_leavemaster.leaveTypeID = '{$lType}', days, 0) ) FROM srp_erp_leavemaster
                                 JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
					                AND leavGroupDet.leaveTypeID = {$lType}
                                 WHERE 
	                             srp_erp_leavemaster.empID = empTB.EIdNo AND approvedYN = 1 AND ( cancelledYN = 0 OR cancelledYN IS NULL )  {$carryForwardLogic} ), 0 ) AS '{$string}', ";

                }

            }


            $qry = "SELECT $select CONCAT(ECode, ' - ', Ename2) AS Ename2, accDet.description, daysEntitled, empID,
                    leaveaccrualDetailID, accMaster.confirmedYN, accDet.leaveType, accDet.`comment`, accMaster.policyMasterID
                    FROM srp_employeesdetails empTB 
                    INNER JOIN srp_erp_leaveaccrualdetail accDet ON empID = EIdNo AND accDet.leaveaccrualMasterID={$masterID}
                    INNER JOIN srp_erp_leaveaccrualmaster accMaster ON accDet.leaveaccrualMasterID = accMaster.leaveaccrualMasterID 
                    AND accMaster.policyMasterID IN ($policyMasterID) 
                    INNER JOIN srp_erp_leavetype ON srp_erp_leavetype.leaveTypeID = accDet.leaveType 
                    WHERE accDet.leaveaccrualMasterID={$masterID}
                    AND ( accDet.cancelledLeaveMasterID = 0 OR accDet.cancelledLeaveMasterID IS NULL ) 
                    GROUP BY empID ORDER BY Ename2";

            $qry2 = "SELECT {$select2} CONCAT(ECode, ' - ', Ename2) AS Ename2, entiDet.description, daysEntitled, srp_erp_leavetype.description AS leavetype, 
                     srp_erp_leavetype.leaveTypeID, empID, confirmedYN, entiMast.policyMasterID, leaveaccrualDetailID
                     FROM srp_employeesdetails AS empTB
                     INNER JOIN srp_erp_leaveaccrualdetail AS entiDet on empID= EIdNo
                     INNER JOIN srp_erp_leaveaccrualmaster AS entiMast ON entiDet.leaveaccrualMasterID = entiMast.leaveaccrualMasterID                     
                     #AND entiMast.policyMasterID = {$policyMasterID} 
                     INNER JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = entiDet.leaveType
                     JOIN (
                        SELECT gMaster.leaveGroupID, leaveTypeID, policyMasterID, isCarryForward 
                        FROM srp_erp_leavegroup AS gMaster
                        JOIN srp_erp_leavegroupdetails AS gDet ON gMaster.leaveGroupID=gDet.leaveGroupID
                        WHERE companyID = {$companyID}
                     ) AS leaveTypeData ON leaveTypeData.leaveGroupID=entiMast.leaveGroupID  AND leaveTypeData.leaveTypeID = entiDet.leaveType
                     WHERE #empTB.leaveGroupID = {$leaveGroupID} AND 
                     confirmedYN=1  AND 
                      ( entiDet.cancelledLeaveMasterID = 0 OR entiDet.cancelledLeaveMasterID IS NULL )  AND
                     CASE  WHEN ( leaveTypeData.isCarryForward=0 AND leaveTypeData.policyMasterID=1 ) 
                        THEN DATE_FORMAT( CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01'), '%Y-%m-%d') BETWEEN '{$currentYearFirstDate}' AND '{$currentYearLastDate}'
                         WHEN ( leaveTypeData.isCarryForward=0 AND leaveTypeData.policyMasterID=3 ) 
                        THEN DATE_FORMAT( CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01'), '%Y-%m-%d') BETWEEN '{$monthStart}' AND '{$monthEnd}'
                        ELSE 1=1
                     END                                         
                     GROUP BY empID ORDER BY Ename2 ";

            $data['details'] = $this->db->query($qry)->result_array();
            $data['leaveHistory'] = $this->db->query($qry2)->result_array();
          /*   echo '<pre>'.$this->db->last_query().'</pre>'; */

        }

        $data['header'] = $header;
        $html = $this->load->view('system/hrm/leave_adjustment_detail_table', $data, TRUE);
        echo $html;
    }

    function leaveAdjustmentDetail_old()
    {
        $masterID = $this->input->post('masterID');


        $header = $this->db->query("SELECT srp_erp_leaveaccrualmaster.policyMasterID,srp_erp_leaveaccrualmaster.leaveGroupID,leaveType, srp_erp_leavetype.description FROM `srp_erp_leaveaccrualmaster` LEFT JOIN `srp_erp_leaveaccrualdetail` ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID = srp_erp_leaveaccrualdetail.leaveaccrualMasterID LEFT JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType WHERE srp_erp_leaveaccrualmaster.leaveaccrualMasterID = $masterID GROUP BY leaveType ORDER BY srp_erp_leavetype.description ASC")->result_array();

        $data['details'] = FALSE;
        $select = '';
        $select2 = '';
        if (!empty($header)) {
            foreach ($header as $val) {
                $policyMasterID = $val['policyMasterID'];
                $leaveGroupID = $val['leaveGroupID'];
                $string = str_replace(' ', '', $val['description']);
                if ($val['policyMasterID'] == 2) {
                    $select .= "sum(if(leaveType='{$val['leaveType']}',hoursEntitled,0)) as '{$string}',";
                    $select2 .= "sum(if(leaveType='{$val['leaveType']}',hoursEntitled,0)) - IFNULL( ( SELECT SUM(if(leaveTypeID='{$val['leaveType']}',hours,0)) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.empID = srp_employeesdetails.EIdNo AND approvedYN = 1 ), 0 ) as '{$string}',";
                } else {
                    $select .= "sum(if(leaveType='{$val['leaveType']}',daysEntitled,0)) as '{$string}',";
                    $select2 .= "sum(if(leaveType='{$val['leaveType']}',daysEntitled,0)) - IFNULL( ( SELECT SUM(if(leaveTypeID='{$val['leaveType']}',days,0)) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.empID = srp_employeesdetails.EIdNo AND approvedYN = 1 ), 0 ) as '{$string}',";
                }

            }


            $qry = "SELECT $select CONCAT(ECode, ' - ', Ename2) AS Ename2, srp_erp_leaveaccrualdetail.description, daysEntitled, srp_erp_leavetype.description AS leavetype,
                    srp_erp_leavetype.leaveTypeID, empID, confirmedYN, srp_erp_leavegroupdetails.policyMasterID,leaveaccrualDetailID,srp_erp_leaveaccrualmaster.confirmedYN,
                    srp_erp_leaveaccrualdetail.comment FROM srp_employeesdetails INNER JOIN (select * from `srp_erp_leavegroupdetails` WHERE leaveGroupID={$leaveGroupID} AND 
                    policyMasterID = {$policyMasterID}) srp_erp_leavegroupdetails ON srp_employeesdetails.leaveGroupID = srp_employeesdetails.leaveGroupID 
                    INNER JOIN srp_erp_leaveaccrualdetail ON empID = EIdNo AND srp_erp_leaveaccrualdetail.leaveType = srp_erp_leavegroupdetails.leaveTypeID 
                    INNER JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                    AND srp_erp_leaveaccrualmaster.policyMasterID IN ($policyMasterID) 
                    INNER JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType 
                    WHERE srp_erp_leaveaccrualdetail.leaveaccrualMasterID = $masterID AND srp_employeesdetails.leaveGroupID = {$leaveGroupID} GROUP BY empID ORDER BY Ename2";

            $qry2 = "SELECT $select2 CONCAT(ECode, ' - ', Ename2) AS Ename2, srp_erp_leaveaccrualdetail.description, daysEntitled, srp_erp_leavetype.description AS leavetype, 
                     srp_erp_leavetype.leaveTypeID, empID, confirmedYN, srp_erp_leaveaccrualmaster.policyMasterID, leaveaccrualDetailID, srp_erp_leaveaccrualmaster.confirmedYN 
                     FROM srp_employeesdetails INNER JOIN srp_erp_leaveaccrualdetail on empID= EIdNo 
                     INNER JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                     AND srp_erp_leaveaccrualmaster.policyMasterID ={$policyMasterID} 
                     INNER JOIN `srp_erp_leavetype` ON srp_erp_leavetype.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType 
                     WHERE srp_employeesdetails.leaveGroupID = {$leaveGroupID} AND confirmedYN=1 GROUP BY empID ORDER BY Ename2";

            $data['details'] = $this->db->query($qry)->result_array();
            // var_dump( $data['details']);
            $data['leaveHistory'] = $this->db->query($qry2)->result_array();
            //echo $this->db->last_query();
            //var_dump( $data['leaveHistory']);

        }

        $data['header'] = $header;
        $html = $this->load->view('system/hrm/leave_adjustment_detail_table', $data, TRUE);
        echo $html;
    }

    function update_leave_adjustment()
    {
        $masterID = $this->input->post('masterID');
        $days = $this->input->post('days');
        $leaveTypeID = $this->input->post('leaveTypeID');
        $empID = $this->input->post('empID');
        $policyMasterID = $this->input->post('policyMasterID');

        if ($policyMasterID == 2) {
            $data = array('hoursEntitled' => $days);
        } else {
            $data = array('daysEntitled' => $days);
        }

        $update = $this->db->update('srp_erp_leaveaccrualdetail', $data, array('leaveaccrualMasterID' => $masterID, 'leaveType' => $leaveTypeID, 'empID' => $empID));
        echo json_encode(array('error' => 0, 'Successfully saved'));

    }

    function delete_adjustmentDetail()
    {
        $masterID = $this->input->post('masterID');
        $empID = $this->input->post('empID');
        $this->db->delete('srp_erp_leaveaccrualdetail', array('leaveaccrualMasterID' => $masterID, 'empID' => $empID));
        echo json_encode(array('error' => 0, 'Successfully Deleted'));
    }

    function confirm_leaveadjustment()
    {
        $masterID = $this->input->post('masterID');

        $detail = $this->db->query("select * from srp_erp_leaveaccrualdetail WHERE leaveaccrualMasterID={$masterID} ")->row_array();
        if (!empty($detail)) {
            $this->db->select('leaveaccrualMasterCode');
            $this->db->where('leaveaccrualMasterID', $masterID);
            $this->db->from('srp_erp_leaveaccrualmaster');
            $mas_dt = $this->db->get()->row_array();
            $validate_code = validate_code_duplication($mas_dt['leaveaccrualMasterCode'], 'leaveaccrualMasterCode', $masterID,'leaveaccrualMasterID', 'srp_erp_leaveaccrualmaster');
            if(!empty($validate_code)) {
                echo json_encode(array('error' => 1, 'message' => 'The document Code Already Exist.(' . $validate_code . ')'));
            }

            $data = array('confirmedYN' => 1, 'confirmedby' => $this->common_data['current_userID'], 'confirmedDate' => current_date());
            $update = $this->db->update('srp_erp_leaveaccrualmaster', $data, array('leaveaccrualMasterID' => $masterID));
            echo json_encode(array('error' => 0, 'message' => 'Successfully Confirmed'));
        } else {
            echo json_encode(array('error' => 1, 'message' => 'Detail records not found. '));
        }
    }

    function delete_leaveAdjustment()
    {
        $masterID = $this->input->post('masterID');
        $this->db->delete('srp_erp_leaveaccrualdetail', array('leaveaccrualMasterID' => $masterID));
        $this->db->delete('srp_erp_leaveaccrualmaster', array('leaveaccrualMasterID' => $masterID));
        echo json_encode(array('error' => 0, 'Successfully Deleted'));
    }

    function savePayeeMaster()
    {

        $this->form_validation->set_rules('sortCode[]', 'Sort Code', 'required');
        $this->form_validation->set_rules('description[]', 'Description', 'required');
        $this->form_validation->set_rules('description[]', 'Description', 'required');
        $this->form_validation->set_rules('ifSlab[]', 'Slab', 'required');
        $this->form_validation->set_rules('payrollType[]', 'Payroll Type', 'required');

        $this->form_validation->set_rules('liabilityGlAutoID[]', 'Liability GL Code', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_payeeMaster());
        }
    }

    function fetch_payeeMaster()
    {
        $companyID = current_companyID();
        $this->datatables->select("  payeeMasterID, Description, sortCode, GLtbl2.systemAccountCode AS liablityGlCOde, liabilityGlAutoID AS liabilityGlAutoID,
              SlabID AS SlabID, isNonPayroll, IF(isNonPayroll='Y', 2 , 1) AS payrollYN")
            ->from('srp_erp_payeemaster AS t1')
            ->join('srp_erp_chartofaccounts GLtbl2', 't1.liabilityGlAutoID=GLtbl2.GLAutoID', 'left')
            ->add_column('isPayrollYN', '$1', 'isPayrollCategoryStr(payrollYN)')
            ->add_column('edit', '$1', 'action_payee(payeeMasterID,Description,sortCode,liabilityGlAutoID,SlabID,isNonPayroll)')
            ->where('t1.companyID', $companyID);

        echo $this->datatables->generate();
    }

    function editPayeeMaster()
    {
        $this->form_validation->set_rules('siSortCode', 'Social Insurance Sort Code', 'required');
        $this->form_validation->set_rules('siDes', 'Social Insurance Description', 'required');
        $this->form_validation->set_rules('si_liabilityGlAutoID', 'Liability GL Code', 'required');
        $this->form_validation->set_rules('siSlab', 'Slab', 'required');
        $this->form_validation->set_rules('hidden-id', 'Social Insurance ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editPayeeMaster());
        }
    }

    function deletePayeeMaster()
    {
        $this->form_validation->set_rules('hidden-id', 'Payee Master ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deletePayeeMaster());
        }
    }


    function getFormula()
    {
        $payGroupID = $this->input->post('payGroupID');
        $operand_arr = array('+', '*', '/', '-', '(', ')');
        $formulaText = '';
        $lastInputType = '';
        $salary_categories_arr = salary_categories(array('A', 'D'));

        $formulaDetails = $this->db->select('formula,formulaString,salaryCategories')->from('srp_erp_paygroupformula')->where('payGroupID', $payGroupID)->get()->row_array();
        $formula = $formulaDetails['formulaString'];
        $salaryCategories = $formulaDetails['salaryCategories'];

        if (!empty($formula) && $formula != null) {

            $formula_arr = explode('|', $formula); // break the formula

            foreach ($formula_arr as $formula_row) {

                if (trim($formula_row) != '') {
                    if (in_array($formula_row, $operand_arr)) { //validate is a operand
                        $formulaText .= $formula_row;
                        $lastInputType = 2;
                    } else {
                        $isNotCat = strpos($formula_row, '_'); // check is a amount

                        /********************************************************************************************
                         * If a amount remove '_' symbol and append in the formula
                         * else definitely its a salary category so get the description for the salaryCategoryID
                         ********************************************************************************************/
                        if ($isNotCat !== false) {
                            $numArr = explode('_', $formula_row);
                            $formulaText .= $numArr[1];
                            $formulaText .= (is_numeric($numArr[1])) ? $numArr[1] : $numArr[0];
                            $lastInputType = 0;
                        } else {

                            $keys = array_keys(array_column($salary_categories_arr, 'salaryCategoryID'), $formula_row);
                            $new_array = array_map(function ($k) use ($salary_categories_arr) {
                                return $salary_categories_arr[$k];
                            }, $keys);

                            $formulaText .= (!empty($new_array[0])) ? $new_array[0]['salaryDescription'] : ' &nbsp;&nbsp; ';
                            $lastInputType = 1;
                        }

                    }
                }

            }
        }
        echo json_encode(array('formulaText' => $formulaDetails['formula'], 'lastInputType' => $lastInputType, 'formula' => $formula, 'salaryCategories' => $salaryCategories));
    }


    /*function insert_default_dashboard_for_all_employee(){
        echo json_encode($this->Employee_model->insert_default_dashboard_for_all_employee());
    }*/

    public function load_empAccountsView()
    {
        $id = $this->input->post('empID');
        $data['empID'] = $this->input->post('empID');
        $data['empDetail'] = $this->db->query("select ECode,Ename2 from srp_employeesdetails where EIdNo={$id} ")->row_array();
        $data['accountDetails'] = $this->Employee_model->loadEmpBankAccount($id);
        $data['loan'] = $this->Employee_model->loadLoan($id);
        $data['accountDetails_nonPayroll'] = $this->Employee_model->loadEmpNonBankAccount($id);
        $this->load->view('system/hrm/ajax/load_empAccountsView', $data);
    }

    function update_att_ex()
    {

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $value = $this->input->post('value');
        $name = $this->input->post('name');
        $edit = false;

        $employee = $this->db->query("SELECT empID, OTHours, approvedYN FROM srp_erp_pay_empattendancereview WHERE ID={$masterID}")->row_array();

        if ($employee['approvedYN'] == 1) {
            die(json_encode(['error' => 1, 'message' => 'This record is already approved.<br/>You can not make changes on this.']));
        }

        switch ($name) {
            case "checkIn":
            case "checkOut":
                $policy_val = getPolicyValues('DAT', 'All'); //Disable attendance Clock in / Clock out Time
                if ($policy_val == 1) {
                    die(json_encode(['error' => 1, 'message' => "You can not change 'Clock In / Clock Out' time.<br/>Please check the 'Attendance Clock in / Clock out Time' policy."]));
                }

                $value = ($value != '' ? date("H:i", strtotime($value)) : null);
                $edit = true;
                break;

            case "checkInDate":
                $edit = true;
                break;
            case "checkOutDate":
                $edit = true;
                break;
            case "lateHours":
            case "earlyHours":
                $t = explode('_', $value);
                $hour = $t[0];
                $minutes = $t[1];
                $minutes = ($minutes == '' ? 0 : $minutes);
                if ($hour != '') {
                    $hour = $hour * 60;
                } else {
                    $hour = 0;
                }

                $value = $hour + $minutes;

                $edit = false;
                break;
            case "OTHours":
            case "weekendOTHours":
            case "holidayOTHours":
            case "NDaysOT":
                $t = explode('_', $value);
                $hour = $t[0];
                $minutes = $t[1];
                $minutes = ($minutes == '' ? 0 : $minutes);
                if ($hour != '') {
                    $hour = $hour * 60;
                } else {
                    $hour = 0;
                }

                $value = $hour + $minutes;
                if ($value > $employee['OTHours']) {
                    $employee['OTHours'];
                    $max_ot = gmdate("H", $employee['OTHours'] * 60) . ':' . gmdate("i", $employee['OTHours'] * 60);
                    die(json_encode(['error' => 1, 'message' => 'You can not adjust the OT time greater than calculate OT time : <b>' . $max_ot]));
                }

                $edit = false;
                $update = true; //$this->db->update('srp_erp_pay_empattendancereview', array('OTHours' => $value, 'weekendOTHours' => 0, 'holidayOTHours' => 0, 'NDaysOT' => 0), array('ID' => $masterID));
                if ($name == 'NDaysOT') {
                    $otMasterID = 1;
                }
                if ($name == 'weekendOTHours') {
                    $otMasterID = 2;
                }
                if ($name == 'holidayOTHours') {
                    $otMasterID = 3;
                }

                $this->db->select('salaryCategoryID');
                $this->db->where('OTMasterID', $otMasterID);
                $this->db->where('companyID', current_companyID());
                $this->db->from('srp_erp_pay_overtimecategory');
                $salaryCategoryID = $this->db->get()->row_array();

                $otamount = $this->get_attendance_ot_amount($employee['empID'], $otMasterID);

               
        
                if ($update) {
                    if (!empty($otamount) && $otamount['transactionAmount'] > 0) {
                        $minuteOtAmount = ($otamount['transactionAmount'] / 60) * $value;

                    } else {
                        $minuteOtAmount = 0;
                    }

                    $minuteOtAmount = number_format((float)$minuteOtAmount,$otamount['transactionCurrencyDecimalPlaces'],'.','');

                    $this->db->update('srp_erp_pay_empattendancereview', array('salaryCategoryID' => $salaryCategoryID['salaryCategoryID']), array('ID' => $masterID));
                    $update = $this->db->update('srp_erp_pay_empattendancereview', array('paymentOT' => $minuteOtAmount), array('ID' => $masterID));
                }
                break;

            case "normalDay":
            case "weekend":
            case "holiday":
                $update = $this->db->update('srp_erp_pay_empattendancereview', array('realTime' => $value, 'weekend' => 0, 'normalDay' => 0, 'holiday' => 0), array('ID' => $masterID));

                $value = $value;
                $edit = false;
                break;

            default:
                $value = $value;
                $edit = false;

        }
        $update = $this->db->update('srp_erp_pay_empattendancereview', array($name => $value), array('ID' => $masterID));
        if ($update) {
            if ($edit) {
                /*change in pulling date remove calender dauwekk ondition*/
                $qry = "SELECT srp_erp_pay_empattendancereview.*, shiftDet.isWeekend,shiftDet.specialOT as configSpecialOT,shiftMaster.isSpecialOT as configisSpecialOT, IF(IFNULL(srp_erp_pay_empattendancereview.leaveMasterID, 0), 1, 0) AS isOnLeave, IF(IFNULL(holiday_flag, 0), 1, 0) AS holiday, mustCheck AS isCheckin, IF(IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay FROM srp_erp_pay_empattendancereview LEFT JOIN (SELECT * FROM srp_erp_pay_shiftemployees WHERE companyID = {$companyID}) AS empShift ON empShift.empID = srp_erp_pay_empattendancereview.empID LEFT JOIN (SELECT * FROM srp_erp_pay_shiftdetails WHERE companyID = {$companyID}) AS shiftDet ON shiftDet.shiftID = empShift.shiftID AND shiftDet.weekDayNo = WEEKDAY(srp_erp_pay_empattendancereview.attendanceDate) LEFT JOIN srp_erp_pay_shiftmaster as shiftMaster ON shiftDet.shiftID = shiftMaster.shiftID LEFT JOIN (SELECT * FROM srp_erp_calender WHERE companyID = {$companyID}) AS calenders ON  fulldate = srp_erp_pay_empattendancereview.attendanceDate LEFT JOIN (SELECT leaveMasterID, empID, startDate, endDate FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1) AS leaveExist ON leaveExist.empID = srp_erp_pay_empattendancereview.empID AND srp_erp_pay_empattendancereview.attendanceDate BETWEEN leaveExist.startDate AND leaveExist.endDate WHERE ID = {$masterID} AND srp_erp_pay_empattendancereview.companyID = {$companyID}";

                $detail = $this->db->query($qry)->row_array();
                $detail_result =  $this->db->query($qry)->result_array();

                //update variable attendance details
                $_POST['alter'] = 1;
                $res = $this->update_emp_varibale_empattendanceView($detail_result);

                if ($detail) {
                    $isAllSet = 0;
                    $workingHours = "";
                    $totWorkingHours = '';
                    $actualWorkingHours_obj = null;
                    $totWorkingHours_obj = null;
                    $realtime = null;
                    $AttPresentTypeID = '';
                    $lateHours = "";
                    $earlyHours = "";
                    $overTimeHours = 0;
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = 0;
                    $isCheckin = 0;
                    $isHalfDay = 1;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = 0;

                    // print_r($detail); exit;


                    /************ Calculate the actual working hours *************/
                    if ($detail['onDuty'] != null && $detail['offDuty'] != null && $detail['checkOut'] != null) {
                        $datetime1 = new DateTime($detail['onDuty']);
                        $datetime2 = new DateTime($detail['offDuty']);
                        $actualWorkingHours_obj = $datetime1->diff($datetime2);
                        $minutes = $actualWorkingHours_obj->format('%i');
                        $hours = $actualWorkingHours_obj->format('%h');
                        $workingHours = ($hours * 60) + $minutes;
                    } else {
                        $isAllSet += 1;
                    }


                    /****** Employee total working hours for this day ******/
                    if ($detail['checkIn'] != null && $detail['checkOut'] != null) {

                        if ($detail['offDuty'] != '' && $detail['offDuty'] <= $detail['checkOut']) {
                            $datetime1 = new DateTime($detail['offDuty']);
                        } else {
                            $datetime1 = new DateTime($detail['checkOutDate'].' '.$detail['checkOut']);
                        }


                        if ($detail['onDuty'] != '' && $detail['onDuty'] >= $detail['checkIn']) {
                            $datetime2 = new DateTime($detail['onDuty']);
                        } else {
                            $datetime2 = new DateTime($detail['checkInDate'].' '.$detail['checkIn']);
                        }

                       

                        $totWorkingHours_obj = $datetime1->diff($datetime2);
                        $days = $totWorkingHours_obj->format('%d');
                        $Hours = $totWorkingHours_obj->format('%h');
                        $minutes = $totWorkingHours_obj->format('%i');
                        $Hours = ($days*24) + $Hours;
                        $totWorkingHours =  ($Hours * 60) + $minutes;

                        if ($workingHours != "" && $totWorkingHours != "") {
                            $realtime = $totWorkingHours / $workingHours;
                            $realtime = round($realtime, 1);
                        }
                        
                        // print_r($totWorkingHours); exit;

                    } else {
                        $isAllSet += 1;
                    }


                    if ($isAllSet == 0) {

                        /**** Calculation for late hours ****/
                        $clockIn_datetime = new DateTime($detail['checkIn']);
                        $onDuty_datetime = new DateTime($detail['onDuty']);
                     
                        
                        $minutesToAdd = $detail['gracePeriod'];
                        $onDuty_datetime->modify("+{$minutesToAdd} minutes");

                    

                        if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                            $interval = $clockIn_datetime->diff($onDuty_datetime);

                            $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                            $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                            $lateHours = $hours * 60 + $minutes;
                        }


                        /**** Calculation for early hours ****/
                        $datetime1 = date('Y-m-d H:i:s', strtotime($detail['checkOut']));
                        $datetime2 = date('Y-m-d H:i:s', strtotime($detail['offDuty']));
                        if ($datetime1 < $datetime2) {
                            $datetime1 = new DateTime($detail['checkOut']);
                            $datetime2 = new DateTime($detail['offDuty']);
                            $interval = $datetime2->diff($datetime1);
                            $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                            $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                            $earlyHours = $hours * 60 + $minutes;

                        }

                        $clockouttime = date('Y-m-d H:i:s', strtotime($detail['checkOut']));
                        $offduty = date('Y-m-d H:i:s', strtotime($detail['offDuty']));

                        if ($clockouttime > $offduty) {

                            $Fdate = date('Y-m-d');
                            if ($detail['onDuty'] >= $detail['checkIn']) {
                                $onDutyForOT = new DateTime($detail['onDuty']);
                            } else {
                                $onDutyForOT = new DateTime($detail['checkIn']);
                            }

                            $clockOutForOT = new DateTime($detail['checkOut']);
                            $workingHours_obj = $onDutyForOT->diff($clockOutForOT);
                            $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                            $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));

                            $worktime = $totW->format('' . $Fdate . ' H:i:s');

                            $actualtime = $actW->format('' . $Fdate . ' H:i:s');

                            if ($worktime <= $actualtime) {
                                $overTimeHours = 0;
                            } else {
                                $overTime_obj = $actW->diff($totW);
                                $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                                $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                                $overTimeHours = $hours * 60 + $minutes;
                            }


                        }


                        /*     if ($actualWorkingHours_obj->format('%h %i') < $totWorkingHours_obj->format('%h %i')) {

                                 $onDutyForOT = new DateTime($detail['onDuty']);
                                 $clockOutForOT = new DateTime($detail['checkOut']);
                                 $workingHours_obj = $onDutyForOT->diff($clockOutForOT);

                                 $Fdate = date('Y-m-d');

                                 $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                                 $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                                 $overTime_obj = $actW->diff($totW);
                                 $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                                 $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                                 $overTimeHours = $hours * 60 + $minutes;


                             }*/
                    }


                    if ($detail['checkIn'] == null && $detail['checkOut'] == null) {
                        $AttPresentTypeID = 4;
                        /**** Absents *****/
                    } else {
                        $clockIn_datetime = date('Y-m-d H:i:s', strtotime($detail['checkIn']));
                        $onDuty_datetime = date('Y-m-d H:i:s', strtotime($detail['onDuty']));
                       
                        
                        
                        $clockIn_datetime_grace = new DateTime($detail['checkIn']);
                        $onDuty_datetime_grace = new DateTime($detail['onDuty']);
                     
                        $minutesToAdd = $detail['gracePeriod'];
                        $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                        if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                            $AttPresentTypeID = 1;
                        } /**** Presented On time *****/
                        elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                            $AttPresentTypeID = 2;
                        } /**** Presented Later*****/
                        else {
                            $AttPresentTypeID = '';
                        }
                        /***** Let the user decide ****/
                    }

                    if ($detail['isOnLeave'] == 1) {
                        $AttPresentTypeID = 5;
                    }
                    /**** Employee On Leave *****/


                    $normaloverTimeHours = $overTimeHours;
                    $normalrealtime = $realtime;


                    if ($detail['isWeekend'] == 1) {
                        /**/
                        if ($detail['checkIn'] != null || $detail['checkOut'] != null) {
                            $AttPresentTypeID = 1;
                        }
                        $overTimeHours = $totWorkingHours;
                        /**/
                        $normaloverTimeHours = 0;
                        $weekendOTHours = $totWorkingHours;

                        $normalrealtime = 0;
                        $weekendrealtime = $realtime;

                    }
                    $attendhours = 0;
                    if ($detail['holiday'] == 1) {
                        /*2018-11-07*/
                        if ($detail['checkIn'] != null && $detail['checkOut'] != null) {
                            $datetime1 = new DateTime($detail['checkIn']);
                            $datetime2 = new DateTime($detail['checkOut']);
                            $attendhours_obj = $datetime1->diff($datetime2);
                            $Hours = $attendhours_obj->format('%h');
                            $minutes = $attendhours_obj->format('%i');
                            $attendhours = ($Hours * 60) + $minutes;

                        }
                        if ($detail['checkIn'] != null || $detail['checkOut'] != null) {
                            $AttPresentTypeID = 1;
                        }
                        $overTimeHours = $attendhours;
                        /**/
                        $normaloverTimeHours = 0;
                        $weekendOTHours = 0;
                        $holidayoverTimeHours = $attendhours;
                        $normalrealtime = 0;
                        $weekendrealtime = 0;
                        $holidayrealtime = $realtime;
                    }

                    if ($detail['isCheckin'] == 1) {
                        $isCheckin = 1;
                    }

                    if ($detail['isHalfDay'] == 1) {
                        $isHalfDay = 0.5;
                    }

                    $specialOThours = 0;

                 
                    if($detail['configisSpecialOT'] == 1){
                        $setup_specialOThours = $detail['configSpecialOT']*60;
                        //normaloverTimeHours
                        if($normaloverTimeHours > 1){
                            $specialOThours = $normaloverTimeHours - $setup_specialOThours;
                            $normaloverTimeHours = $setup_specialOThours;
                        }

                    }

                    $details = array(
                        'checkIn' => $detail['checkIn'],
                        'checkOut' => $detail['checkOut'],
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'specialOThours' => $specialOThours,

                    );

                }


                $this->db->update('srp_erp_pay_empattendancereview', $details, array('ID' => $masterID));


                /**/

            }

            $result = $this->db->query("select * from srp_erp_pay_empattendancereview where ID={$masterID}")->row_array();

            $lateHoursarr = array('h' => gmdate("H", $result['lateHours'] * 60), 'm' => gmdate("i", $result['lateHours'] * 60));
            $earlyHoursarr = array('h' => gmdate("H", $result['earlyHours'] * 60), 'm' => gmdate("i", $result['earlyHours'] * 60));
            $OTHoursarr = array('h' => gmdate("H", $result['OTHours'] * 60), 'm' => gmdate("i", $result['OTHours'] * 60));
            $weekendOTHoursarr = array('h' => gmdate("H", $result['weekendOTHours'] * 60), 'm' => gmdate("i", $result['weekendOTHours'] * 60));
            $holidayOTHoursarr = array('h' => gmdate("H", $result['holidayOTHours'] * 60), 'm' => gmdate("i", $result['holidayOTHours'] * 60));
            $NDaysOTsarr = array('h' => gmdate("H", $result['NDaysOT'] * 60), 'm' => gmdate("i", $result['NDaysOT'] * 60));

            $totWorkingHours = 0;
            $attendhours = '';
            $isAllSet = 0;

            if ($result['checkIn'] != null && $result['checkOut'] != null && $result['offDuty'] != null) {

                if ($result['offDuty'] <= $result['checkOut']) {
                    $datetime1 = new DateTime($result['offDuty']);
                } else {
                    $datetime1 = new DateTime($result['checkOutDate'].' '.$result['checkOut']);
                }
                if ($result['onDuty'] >= $result['checkIn']) {
                    $datetime2 = new DateTime($result['onDuty']);
                } else {
                    $datetime2 = new DateTime($result['checkInDate'].' '.$result['checkIn']);
                }
           
                $totWorkingHours_obj = $datetime1->diff($datetime2);
                $days =  $totWorkingHours_obj->format('%d');
                $hours = $totWorkingHours_obj->format('%h');
                if($days > 0){
                    $hours = ($days*24) + $hours;
                }
                $totWorkingHours = $hours. " h &nbsp;&nbsp;" . $totWorkingHours_obj->format('%i') . " m";
            }

            if ($result['checkIn'] != null && $result['checkOut'] != null) {
                $datetime1 = new DateTime($result['checkInDate'].' '.$result['checkIn']);
                $datetime2 = new DateTime($result['checkOutDate'].' '.$result['checkOut']);
                $attendhours_obj = $datetime1->diff($datetime2);
                $days =  $attendhours_obj->format('%d');
                $hours = $attendhours_obj->format('%h');
                if($days > 0){
                    $hours = ($days*24) + $hours;
                }
                $attendhours = $hours. " h &nbsp;&nbsp;" . $attendhours_obj->format('%i') . " m";
            }

            $data = array('realTime' => $result['realTime'],
                'presentTypeID' => $result['presentTypeID'],
                'weekend' => $result['weekend'],
                'holiday' => $result['holiday'],
                'normalDay' => $result['normalDay'],
                'h_lateHours' => gmdate("H", $result['lateHours'] * 60),
                'm_lateHours' => gmdate("i", $result['lateHours'] * 60),
                'h_earlyHours' => gmdate("H", $result['earlyHours'] * 60),
                'm_earlyHours' => gmdate("i", $result['earlyHours'] * 60),
                'h_OTHours' => gmdate("H", $result['OTHours'] * 60),
                'm_OTHours' => gmdate("i", $result['OTHours'] * 60),
                'h_weekendOTHours' => gmdate("H", $result['weekendOTHours'] * 60),
                'm_weekendOTHours' => gmdate("i", $result['weekendOTHours'] * 60),
                'h_holidayOTHours' => gmdate("H", $result['holidayOTHours'] * 60),
                'm_holidayOTHours' => gmdate("i", $result['holidayOTHours'] * 60),
                'h_NDaysOT' => gmdate("H", $result['NDaysOT'] * 60),
                'm_NDaysOT' => gmdate("i", $result['NDaysOT'] * 60),
                'h_specialNDaysOT' => gmdate("H", $result['specialOThours'] * 60),
                'm_specialNDaysOT' => gmdate("i", $result['specialOThours'] * 60),
                'totWorkingHours' => $totWorkingHours,
                'attendhours' => $attendhours,
                'paymentOT' => round($result['paymentOT'], 2)
            );


            echo json_encode(array('error' => 0, 'message' => 'Updated Successfully', 'data' => $data));

        } else {
            echo json_encode(array('error' => 1, 'message' => 'Failed'));
        }
    }


    function update_attendance()
    {

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $value = $this->input->post('value');
        $name = $this->input->post('name');
        $edit = false;

        $employee = $this->db->query("SELECT empID, OTHours, approvedYN FROM srp_erp_pay_empattendancereview WHERE ID={$masterID}")->row_array();

        if ($employee['approvedYN'] == 1) {
            die(json_encode(['error' => 1, 'message' => 'This record is already approved.<br/>You can not make changes on this.']));
        }

        switch ($name) {
            case "checkIn":
            case "checkOut":
                $policy_val = getPolicyValues('DAT', 'All'); //Disable attendance Clock in / Clock out Time
                if ($policy_val == 1) {
                    die(json_encode(['error' => 1, 'message' => "You can not change 'Clock In / Clock Out' time.<br/>Please check the 'Attendance Clock in / Clock out Time' policy."]));
                }

                $value = ($value != '' ? date("H:i", strtotime($value)) : null);
                $edit = true;
                break;

            case "checkInDate":
                $edit = true;
                break;
            case "checkOutDate":
                $edit = true;
                break;
            case "lateHours":
            case "earlyHours":
                $t = explode('_', $value);
                $hour = $t[0];
                $minutes = $t[1];
                $minutes = ($minutes == '' ? 0 : $minutes);
                if ($hour != '') {
                    $hour = $hour * 60;
                } else {
                    $hour = 0;
                }

                $value = $hour + $minutes;

                $edit = false;
                break;
            case "OTHours":
            case "weekendOTHours":
            case "holidayOTHours":
            case "NDaysOT":
                $t = explode('_', $value);
                $hour = $t[0];
                $minutes = $t[1];
                $minutes = ($minutes == '' ? 0 : $minutes);
                if ($hour != '') {
                    $hour = $hour * 60;
                } else {
                    $hour = 0;
                }

                $value = $hour + $minutes;
                if ($value > $employee['OTHours']) {
                    $employee['OTHours'];
                    $max_ot = gmdate("H", $employee['OTHours'] * 60) . ':' . gmdate("i", $employee['OTHours'] * 60);
                    die(json_encode(['error' => 1, 'message' => 'You can not adjust the OT time greater than calculate OT time : <b>' . $max_ot]));
                }

                $edit = false;
                $update = true; //$this->db->update('srp_erp_pay_empattendancereview', array('OTHours' => $value, 'weekendOTHours' => 0, 'holidayOTHours' => 0, 'NDaysOT' => 0), array('ID' => $masterID));
                if ($name == 'NDaysOT') {
                    $otMasterID = 1;
                }
                if ($name == 'weekendOTHours') {
                    $otMasterID = 2;
                }
                if ($name == 'holidayOTHours') {
                    $otMasterID = 3;
                }

                $this->db->select('salaryCategoryID');
                $this->db->where('OTMasterID', $otMasterID);
                $this->db->where('companyID', current_companyID());
                $this->db->from('srp_erp_pay_overtimecategory');
                $salaryCategoryID = $this->db->get()->row_array();

                $otamount = $this->get_attendance_ot_amount($employee['empID'], $otMasterID);

               
        
                if ($update) {
                    if (!empty($otamount) && $otamount['transactionAmount'] > 0) {
                        $minuteOtAmount = ($otamount['transactionAmount'] / 60) * $value;

                    } else {
                        $minuteOtAmount = 0;
                    }

                    $minuteOtAmount = number_format((float)$minuteOtAmount,$otamount['transactionCurrencyDecimalPlaces'],'.','');

                    $this->db->update('srp_erp_pay_empattendancereview', array('salaryCategoryID' => $salaryCategoryID['salaryCategoryID']), array('ID' => $masterID));
                    $update = $this->db->update('srp_erp_pay_empattendancereview', array('paymentOT' => $minuteOtAmount), array('ID' => $masterID));
                }
                break;

            case "normalDay":
            case "weekend":
            case "holiday":
                $update = $this->db->update('srp_erp_pay_empattendancereview', array('realTime' => $value, 'weekend' => 0, 'normalDay' => 0, 'holiday' => 0), array('ID' => $masterID));

                $value = $value;
                $edit = false;
                break;

            default:
                $value = $value;
                $edit = false;
        }

        $update = $this->db->update('srp_erp_pay_empattendancereview', array($name => $value), array('ID' => $masterID));

        if ($update) {
            if ($edit) {
                /*change in pulling date remove calender dauwekk ondition*/
                $qry = "SELECT srp_erp_pay_empattendancereview.*, shiftDet.isWeekend,shiftDet.specialOT as configSpecialOT,shiftMaster.isSpecialOT as configisSpecialOT, IF(IFNULL(srp_erp_pay_empattendancereview.leaveMasterID, 0), 1, 0) AS isOnLeave, IF(IFNULL(holiday_flag, 0), 1, 0) AS holiday, mustCheck AS isCheckin, IF(IFNULL(isHalfDay, 0), 1, 0) AS isHalfDay FROM srp_erp_pay_empattendancereview LEFT JOIN (SELECT * FROM srp_erp_pay_shiftemployees WHERE companyID = {$companyID}) AS empShift ON empShift.empID = srp_erp_pay_empattendancereview.empID LEFT JOIN (SELECT * FROM srp_erp_pay_shiftdetails WHERE companyID = {$companyID}) AS shiftDet ON shiftDet.shiftID = empShift.shiftID AND shiftDet.weekDayNo = WEEKDAY(srp_erp_pay_empattendancereview.attendanceDate) LEFT JOIN srp_erp_pay_shiftmaster as shiftMaster ON shiftDet.shiftID = shiftMaster.shiftID LEFT JOIN (SELECT * FROM srp_erp_calender WHERE companyID = {$companyID}) AS calenders ON  fulldate = srp_erp_pay_empattendancereview.attendanceDate LEFT JOIN (SELECT leaveMasterID, empID, startDate, endDate FROM srp_erp_leavemaster WHERE companyID = {$companyID} AND approvedYN = 1) AS leaveExist ON leaveExist.empID = srp_erp_pay_empattendancereview.empID AND srp_erp_pay_empattendancereview.attendanceDate BETWEEN leaveExist.startDate AND leaveExist.endDate WHERE ID = {$masterID} AND srp_erp_pay_empattendancereview.companyID = {$companyID}";
                $detail = $this->db->query($qry)->row_array();

                $detail_result =  $this->db->query($qry)->result_array();

                //update variable attendance details
                $_POST['alter'] = 1;
                $res = $this->update_emp_varibale_empattendanceView($detail_result);

                if ($detail) {
                    $isAllSet = 0;
                    $workingHours = "";
                    $totWorkingHours = '';
                    $actualWorkingHours_obj = null;
                    $totWorkingHours_obj = null;
                    $realtime = null;
                    $AttPresentTypeID = '';
                    $lateHours = "";
                    $earlyHours = "";
                    $overTimeHours = 0;
                    $normaloverTimeHours = 0;
                    $weekendOTHours = 0;
                    $holidayoverTimeHours = 0;
                    $isCheckin = 0;
                    $isHalfDay = 1;
                    $normalrealtime = 0;
                    $weekendrealtime = 0;
                    $holidayrealtime = 0;

                    // print_r($detail); exit;
                    $attendanceDate = $detail['attendanceDate'];
                    $attendanceNextDay = $detail['attendanceDate'];
                    
                    if($detail['isShiftNextDay']){
                        $attendanceNextDay = date('Y-m-d',strtotime('+1 days',strtotime($attendanceDate)));
                    }

                 


                    /************ Calculate the actual working hours *************/
                    if ($detail['onDuty'] != null && $detail['offDuty'] != null && $detail['checkOut'] != null) {
                        $datetime1 = new DateTime($detail['attendanceDate'].' '.$detail['onDuty']);
                        $datetime2 = new DateTime($detail['checkOutDate'].' '.$detail['offDuty']);
                        $actualWorkingHours_obj = $datetime1->diff($datetime2);
                        $minutes = $actualWorkingHours_obj->format('%i');
                        $hours = $actualWorkingHours_obj->format('%h');
                        $workingHours = ($hours * 60) + $minutes;
                    } else {
                        $isAllSet += 1;
                    }

               
        
                    $workingOffDuty = $attendanceNextDay.' '.$detail['offDuty'];
                    $workingOnDuty = $attendanceDate.' '.$detail['onDuty'];
                    $checkOutDateTime = $detail['checkOutDate'].' '.$detail['checkOut'];
                    $checkInDateTime = $detail['checkInDate'].' '.$detail['checkIn'];

                    /****** Employee total working hours for this day ******/
                    if ($detail['checkIn'] != null && $detail['checkOut'] != null) {

                        if ($detail['offDuty'] != '' && $workingOffDuty <= $checkOutDateTime) {
                            $datetime1 = new DateTime($workingOffDuty);
                        } else {
                            
                            $datetime1 = new DateTime($checkOutDateTime);
                        }
                        // $datetime1 = new DateTime($attendanceNextDay.' '.$detail['offDuty']);
                        // $datetime2 = new DateTime($attendanceDate.' '.$detail['onDuty']);
                        if ($detail['onDuty'] != '' && $workingOnDuty >= $checkInDateTime ) {
                            $datetime2 = new DateTime($workingOnDuty);
                        } else {
                            $datetime2 = new DateTime($checkInDateTime);
                        }

                       

                        $totWorkingHours_obj = $datetime1->diff($datetime2);
                        $days = $totWorkingHours_obj->format('%d');
                        $Hours = $totWorkingHours_obj->format('%h');
                        $minutes = $totWorkingHours_obj->format('%i');
                        $Hours = ($days*24) + $Hours;
                        $totWorkingHours =  ($Hours * 60) + $minutes;

                        if ($workingHours != "" && $totWorkingHours != "") {
                            $realtime = $totWorkingHours / $workingHours;
                            $realtime = round($realtime, 1);
                        }
                        
                      

                    } else {
                        $isAllSet += 1;
                    }


                    if ($isAllSet == 0) {

                        /**** Calculation for late hours ****/
                        $clockIn_datetime = new DateTime($detail['checkIn']);
                        $onDuty_datetime = new DateTime($detail['onDuty']);
                     
                        
                        $minutesToAdd = $detail['gracePeriod'];
                        $onDuty_datetime->modify("+{$minutesToAdd} minutes");

                    

                        if ($clockIn_datetime->format('H:i:s') > $onDuty_datetime->format('H:i:s')) {
                            $interval = $clockIn_datetime->diff($onDuty_datetime);

                            $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                            $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                            $lateHours = $hours * 60 + $minutes;
                        }


                        /**** Calculation for early hours ****/
                        $datetime1 = date('Y-m-d H:i:s', strtotime($detail['checkOutDate'].' '.$detail['checkOut']));
                        $datetime2 = date('Y-m-d H:i:s', strtotime($attendanceNextDay.' '.$detail['offDuty']));

                        if ($datetime1 < $datetime2) {
                            $datetime1 = new DateTime($detail['checkOutDate'].' '.$detail['checkOut']);
                            $datetime2 = new DateTime($attendanceNextDay.' '.$detail['offDuty']);
                            $interval = $datetime2->diff($datetime1);
                            $hours = ($interval->format('%h') != 0) ? $interval->format('%h') : 0;
                            $minutes = ($interval->format('%i') != 0) ? $interval->format('%i') : 0;
                            $earlyHours = $hours * 60 + $minutes;

                        }

                        $clockouttime = date('Y-m-d H:i:s', strtotime($detail['checkOutDate'].' '.$detail['checkOut']));
                        $offduty = date('Y-m-d H:i:s', strtotime($attendanceNextDay.' '.$detail['offDuty']));

                    

                        if ($clockouttime > $offduty) {
        
                            $Fdate = date('Y-m-d');
                            if ($detail['onDuty'] >= $detail['checkIn']) {
                                $onDutyForOT = new DateTime($detail['attendanceDate'].' '.$detail['onDuty']);
                            } else {
                                $onDutyForOT = new DateTime($detail['checkInDate'].' '.$detail['checkIn']);
                            }
                            $clockOutForOT = new DateTime($detail['checkOutDate'].' '.$detail['checkOut']);
                            $workingHours_obj = $onDutyForOT->diff($clockOutForOT);      
                           
                            $totW = new DateTime($workingHours_obj->format('' . $detail['checkOutDate'] . ' %h:%i:%s'));
                            $actW = new DateTime($actualWorkingHours_obj->format('' . $detail['attendanceDate'] . ' %h:%i:%s'));

                            $worktime = $totW->format('' . $detail['checkOutDate']  . ' H:i:s');

                            $actualtime = $actW->format('' . $detail['attendanceDate'] . ' H:i:s');

                            

                            if ($worktime <= $actualtime) {
                                $overTimeHours = 0;
                            } else {
                                $overTime_obj = $actW->diff($totW);

                                $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                                $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                                $overTimeHours = $hours * 60 + $minutes;
                            }


                        }

                        // print_r($overTimeHours); exit;
                 


                        /*     if ($actualWorkingHours_obj->format('%h %i') < $totWorkingHours_obj->format('%h %i')) {

                                 $onDutyForOT = new DateTime($detail['onDuty']);
                                 $clockOutForOT = new DateTime($detail['checkOut']);
                                 $workingHours_obj = $onDutyForOT->diff($clockOutForOT);

                                 $Fdate = date('Y-m-d');

                                 $totW = new DateTime($workingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                                 $actW = new DateTime($actualWorkingHours_obj->format('' . $Fdate . ' %h:%i:%s'));
                                 $overTime_obj = $actW->diff($totW);
                                 $hours = ($overTime_obj->format('%h') != 0) ? $overTime_obj->format('%h') : 0;
                                 $minutes = ($overTime_obj->format('%i') != 0) ? $overTime_obj->format('%i') : 0;
                                 $overTimeHours = $hours * 60 + $minutes;


                             }*/
                    }


                    if ($detail['checkIn'] == null && $detail['checkOut'] == null) {
                        $AttPresentTypeID = 4;
                        /**** Absents *****/
                    } else {
                        $clockIn_datetime = date('Y-m-d H:i:s', strtotime($detail['checkIn']));
                        $onDuty_datetime = date('Y-m-d H:i:s', strtotime($detail['onDuty']));
                       
                        $clockIn_datetime_grace = new DateTime($detail['checkIn']);
                        $onDuty_datetime_grace = new DateTime($detail['onDuty']);
                     
                        $minutesToAdd = $detail['gracePeriod'];
                        $onDuty_datetime_grace->modify("+{$minutesToAdd} minutes");

                        if ($clockIn_datetime_grace <= $onDuty_datetime_grace) {
                            $AttPresentTypeID = 1;
                        } /**** Presented On time *****/
                        elseif ($clockIn_datetime_grace > $onDuty_datetime_grace) {
                            $AttPresentTypeID = 2;
                        } /**** Presented Later*****/
                        else {
                            $AttPresentTypeID = '';
                        }
                        /***** Let the user decide ****/
                    }

                    if ($detail['isOnLeave'] == 1) {
                        $AttPresentTypeID = 5;
                    }
                    /**** Employee On Leave *****/


                    $normaloverTimeHours = $overTimeHours;
                    $normalrealtime = $realtime;


                    if ($detail['isWeekend'] == 1) {
                        /**/
                        if ($detail['checkIn'] != null || $detail['checkOut'] != null) {
                            $AttPresentTypeID = 1;
                        }
                        $overTimeHours = $totWorkingHours;
                        /**/
                        $normaloverTimeHours = 0;
                        $weekendOTHours = $totWorkingHours;

                        $normalrealtime = 0;
                        $weekendrealtime = $realtime;

                    }


                    $attendhours = 0;
                    if ($detail['holiday'] == 1) {
                        /*2018-11-07*/
                        if ($detail['checkIn'] != null && $detail['checkOut'] != null) {
                            $datetime1 = new DateTime($detail['checkInDate'].' '.$detail['checkIn']);
                            $datetime2 = new DateTime($detail['checkOutDate'].' '.$detail['checkOut']);
                            $attendhours_obj = $datetime1->diff($datetime2);
                            $Hours = $attendhours_obj->format('%h');
                            $minutes = $attendhours_obj->format('%i');
                            $attendhours = ($Hours * 60) + $minutes;

                        }
                        if ($detail['checkIn'] != null || $detail['checkOut'] != null) {
                            $AttPresentTypeID = 1;
                        }
                        $overTimeHours = $attendhours;
                        /**/
                        $normaloverTimeHours = 0;
                        $weekendOTHours = 0;
                        $holidayoverTimeHours = $attendhours;
                        $normalrealtime = 0;
                        $weekendrealtime = 0;
                        $holidayrealtime = $realtime;
                    }

                    if ($detail['isCheckin'] == 1) {
                        $isCheckin = 1;
                    }

                    if ($detail['isHalfDay'] == 1) {
                        $isHalfDay = 0.5;
                    }

                    $specialOThours = 0;

                    if($detail['configisSpecialOT'] == 1){
                        $setup_specialOThours = $detail['configSpecialOT'] * 60;
                        //normaloverTimeHours
                        if($normaloverTimeHours > ($detail['configSpecialOT'] * 60)){
                            $specialOThours = $normaloverTimeHours - $setup_specialOThours;
                            $normaloverTimeHours = $setup_specialOThours;
                        }else{
                            $specialOThours = 0;
                        }

                    }

               
                    $details = array(
                        'checkIn' => $detail['checkIn'],
                        'checkOut' => $detail['checkOut'],
                        'presentTypeID' => $AttPresentTypeID,
                        'lateHours' => $lateHours,
                        'earlyHours' => $earlyHours,
                        'OTHours' => $overTimeHours,
                        'weekendOTHours' => $weekendOTHours,
                        'mustCheck' => $isCheckin,
                        'normalTime' => $isHalfDay,
                        'realTime' => $realtime,
                        'NDaysOT' => $normaloverTimeHours,
                        'holidayOTHours' => $holidayoverTimeHours,
                        'normalDay' => $normalrealtime,
                        'weekend' => $weekendrealtime,
                        'holiday' => $holidayrealtime,
                        'specialOThours' => $specialOThours
                       
                    );

                }


                $this->db->update('srp_erp_pay_empattendancereview', $details, array('ID' => $masterID));


                /**/

            }

            $result = $this->db->query("select srp_erp_pay_empattendancereview.*,DATE_FORMAT(srp_erp_pay_empattendancereview.onDuty, '%h:%i %p') as onDuty,DATE_FORMAT(srp_erp_pay_empattendancereview.offDuty, '%h:%i %p') as offDuty from srp_erp_pay_empattendancereview where ID={$masterID}")->row_array();

            $lateHoursarr = array('h' => gmdate("H", $result['lateHours'] * 60), 'm' => gmdate("i", $result['lateHours'] * 60));
            $earlyHoursarr = array('h' => gmdate("H", $result['earlyHours'] * 60), 'm' => gmdate("i", $result['earlyHours'] * 60));
            $OTHoursarr = array('h' => gmdate("H", $result['OTHours'] * 60), 'm' => gmdate("i", $result['OTHours'] * 60));
            $weekendOTHoursarr = array('h' => gmdate("H", $result['weekendOTHours'] * 60), 'm' => gmdate("i", $result['weekendOTHours'] * 60));
            $holidayOTHoursarr = array('h' => gmdate("H", $result['holidayOTHours'] * 60), 'm' => gmdate("i", $result['holidayOTHours'] * 60));
            $NDaysOTsarr = array('h' => gmdate("H", $result['NDaysOT'] * 60), 'm' => gmdate("i", $result['NDaysOT'] * 60));

            $totWorkingHours = 0;
            $attendhours = '';
            $isAllSet = 0;

       

            if ($result['checkIn'] != null && $result['checkOut'] != null && $result['offDuty'] != null) {

                if ($result['offDuty'] <= $result['checkOut']) {
                    $datetime1 = new DateTime($result['checkOutDate'].' '.$result['offDuty']);
                } else {
                    $datetime1 = new DateTime($result['checkOutDate'].' '.$result['checkOut']);
                }
                if ($result['onDuty'] >= $result['checkIn']) {
                    $datetime2 = new DateTime($result['checkInDate'].' '.$result['onDuty']);
                } else {
                    $datetime2 = new DateTime($result['checkInDate'].' '.$result['checkIn']);
                }
           
                $totWorkingHours_obj = $datetime1->diff($datetime2);
                $days =  $totWorkingHours_obj->format('%d');
                $hours = $totWorkingHours_obj->format('%h');
             
                if($days > 0){
                    $hours = ($days*24) + $hours;
                }
          
                $totWorkingHours = $hours. " h &nbsp;&nbsp;" . $totWorkingHours_obj->format('%i') . " m";
            }

            if ($result['checkIn'] != null && $result['checkOut'] != null) {
                $datetime1 = new DateTime($result['checkInDate'].' '.$result['checkIn']);
                $datetime2 = new DateTime($result['checkOutDate'].' '.$result['checkOut']);
                $attendhours_obj = $datetime1->diff($datetime2);
                $days =  $attendhours_obj->format('%d');
                $hours = $attendhours_obj->format('%h');
                if($days > 0){
                    $hours = ($days*24) + $hours;
                }
                $attendhours = $hours. " h &nbsp;&nbsp;" . $attendhours_obj->format('%i') . " m";
            }

            $data = array('realTime' => $result['realTime'],
                'presentTypeID' => $result['presentTypeID'],
                'weekend' => $result['weekend'],
                'holiday' => $result['holiday'],
                'normalDay' => $result['normalDay'],
                'h_lateHours' => gmdate("H", $result['lateHours'] * 60),
                'm_lateHours' => gmdate("i", $result['lateHours'] * 60),
                'h_earlyHours' => gmdate("H", $result['earlyHours'] * 60),
                'm_earlyHours' => gmdate("i", $result['earlyHours'] * 60),
                'h_OTHours' => gmdate("H", $result['OTHours'] * 60),
                'm_OTHours' => gmdate("i", $result['OTHours'] * 60),
                'h_weekendOTHours' => gmdate("H", $result['weekendOTHours'] * 60),
                'm_weekendOTHours' => gmdate("i", $result['weekendOTHours'] * 60),
                'h_holidayOTHours' => gmdate("H", $result['holidayOTHours'] * 60),
                'm_holidayOTHours' => gmdate("i", $result['holidayOTHours'] * 60),
                'h_NDaysOT' => gmdate("H", $result['NDaysOT'] * 60),
                'm_NDaysOT' => gmdate("i", $result['NDaysOT'] * 60),
                'h_specialNDaysOT' => gmdate("H", $result['specialOThours'] * 60),
                'm_specialNDaysOT' => gmdate("i", $result['specialOThours'] * 60),
                'totWorkingHours' => $totWorkingHours,
                'attendhours' => $attendhours,
                'paymentOT' => round($result['paymentOT'], 2),
                'onDuty' => $result['onDuty'],
                'offDuty' => $result['offDuty']
            );


            echo json_encode(array('error' => 0, 'message' => 'Updated Successfully', 'data' => $data));

        } else {
            echo json_encode(array('error' => 1, 'message' => 'Failed'));
        }
    }

    function update_totalDuration()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $minutes = $this->input->post('minutes');
        $hours = $this->input->post('hours');


        $minutes += ($hours * 60);

        $data = $this->db->query("SELECT CONCAT_WS(' - ', empSecondaryCode, Ename2, attendanceDate) AS empName, 0 AS approvedYN
                                  FROM srp_erp_attendance_oman_oil AS atten_tb
                                  JOIN srp_employeesdetails AS emp_tb ON emp_tb.empMachineID = atten_tb.empMachineID
                                  WHERE logID={$masterID} AND companyID={$companyID}")->row_array();

        if ($hours > 18) {
            $msg = "Total hour can not be greater than 18h ({$data['empName']})";
            die(json_encode(['error' => 1, 'message' => $msg]));
        }

        if ($data['approvedYN'] == 1) {
            $msg = "This record ({$data['empName']}) is already approved.<br/>You can not make changes on this.";
            die(json_encode(['error' => 1, 'message' => $msg]));
        }

        $update = $this->db->update('srp_erp_attendance_oman_oil', ['totalDuration' => $minutes], ['logID' => $masterID]);
        if ($update) {
            echo json_encode(['error' => 0, 'message' => 'Updated Successfully']);
        } else {
            echo json_encode(['error' => 1, 'message' => 'Failed', 'data' => $data]);
        }
    }

    function get_attendance_ot_amount($empID, $OTMasterID)
    {

        $companyID = current_companyID();
        $detail_arr = $this->db->query("SELECT overTimeGroup, srp_erp_pay_overtimegroupdetails.*, srp_erp_pay_overtimecategory.* FROM `srp_employeesdetails` INNER JOIN `srp_erp_pay_overtimegroupdetails` ON groupID = overTimeGroup INNER JOIN `srp_erp_pay_overtimecategory` ON overTimeID = ID WHERE EidNo = '{$empID}'")->result_array();
        $as = array();

        if ($detail_arr) {
            foreach ($detail_arr as $key => $row) {

                if ($row['OTMasterID'] == $OTMasterID) {
                    $classTitle = explode(' ', $row['description']);
                    $formulaText = '';
                    $formula = trim($row['formula'] ?? '');
                    $lastInputType = '';
                    $formulaBuilder = $this->formulaBuilder_to_sql_OT($formula);
                    $formulaDecodeOT = $formulaBuilder['formulaDecode'];
                    $select_str2 = $formulaBuilder['select_str2'];
                    $whereInClause = $formulaBuilder['whereInClause'];

                    $as = $this->db->query("
                                   SELECT  calculationTB.employeeNo, 'G',
                                   (({$formulaDecodeOT } ) )AS transactionAmount, transactionCurrencyID, transactionCurrency, transactionER,
                                   transactionCurrencyDecimalPlaces,
                                   round( ((" . $formulaDecodeOT . " ) / companyLocalER) , companyLocalCurrencyDecimalPlaces  )AS localAmount,
                                   companyLocalCurrencyID , companyLocalCurrency, companyLocalER, companyLocalCurrencyDecimalPlaces,
                                   round( ((" . $formulaDecodeOT . " ) / companyReportingER)   , companyReportingCurrencyDecimalPlaces  )AS reportingAmount,
                                   companyReportingCurrencyID, companyReportingCurrency, companyReportingER, companyReportingCurrencyDecimalPlaces,                               
                                   seg.segmentID, seg.segmentCode
                                   FROM (
                                        SELECT employeeNo, " . $select_str2 . " ,
                                        transactionCurrencyID, transactionCurrency, transactionER, transactionCurrencyDecimalPlaces,
                                        companyLocalCurrencyID , companyLocalCurrency, companyLocalER, companyLocalCurrencyDecimalPlaces,
                                        companyReportingCurrencyID, companyReportingCurrency, companyReportingER, companyReportingCurrencyDecimalPlaces
                                        FROM srp_erp_pay_salarydeclartion AS salDec
                                        JOIN srp_erp_pay_salarycategories AS salCat ON salCat.salaryCategoryID = salDec.salaryCategoryID AND salCat.companyID ={$companyID}
                                        WHERE salDec.companyID = {$companyID}  AND employeeNo={$empID} 
                                        AND salDec.salaryCategoryID  IN (" . $whereInClause . ") GROUP BY employeeNo, salDec.salaryCategoryID
                                   ) calculationTB
                                   JOIN srp_employeesdetails AS emp ON emp.EIdNo = calculationTB.employeeNo AND emp.Erp_companyID = {$companyID}
                                   JOIN srp_erp_segment seg ON seg.segmentID = emp.segmentID AND seg.companyID = {$companyID}
                                   GROUP BY employeeNo")->row_array();

                }

            }
        }

        return $as;
    }

    function formulaBuilder_to_sql_OT($formula)
    {

        $salary_categories_arr = salary_categories(array('A', 'D'));
        $formulaText = '';
        $salaryCatID = array();
        $formulaDecode_arr = array();
        $operand_arr = operand_arr();

        $formula_arr = explode('|', $formula); // break the formula

        $n = 0;
        foreach ($formula_arr as $formula_row) {

            if (trim($formula_row) != '') {
                if (in_array($formula_row, $operand_arr)) { //validate is a operand
                    $formulaText .= $formula_row;
                    $formulaDecode_arr[] = $formula_row;
                } else {

                    $elementType = $formula_row[0];

                    if ($elementType == '_') {
                        /*** Number ***/
                        $numArr = explode('_', $formula_row);
                        $formulaText .= (is_numeric($numArr[1])) ? $numArr[1] : $numArr[0];
                        $formulaDecode_arr[] = (is_numeric($numArr[1])) ? $numArr[1] : $numArr[0];

                    } else if ($elementType == '#') {
                        /*** Salary category ***/
                        $catArr = explode('#', $formula_row);
                        $salaryCatID[$n]['ID'] = $catArr[1];

                        $keys = array_keys(array_column($salary_categories_arr, 'salaryCategoryID'), $catArr[1]);
                        $new_array = array_map(function ($k) use ($salary_categories_arr) {
                            return $salary_categories_arr[$k];
                        }, $keys);

                        $salaryDescription = (!empty($new_array[0])) ? trim($new_array[0]['salaryDescription']) : '';

                        $formulaText .= $salaryDescription;

                        $salaryDescription_arr = explode(' ', $salaryDescription);
                        $salaryDescription_arr = preg_replace("/[^a-zA-Z 0-9]+/", "", $salaryDescription_arr);
                        $salaryCatID[$n]['cat'] = implode('_', $salaryDescription_arr) . '_' . $n;
                        $formulaDecode_arr[] = 'SUM(' . $salaryCatID[$n]['cat'] . ')';

                        $n++;

                    }
                }
            }

        }

        $formulaDecode = implode(' ', $formulaDecode_arr);

        $select_str2 = '';
        $whereInClause = '';
        $separator = '';

        foreach ($salaryCatID as $key1 => $row) {
            $select_str2 .= $separator . 'IF(salDec.salaryCategoryID=' . $row['ID'] . ', SUM(transactionAmount) , 0 ) AS ' . $row['cat'] . '';
            $whereInClause .= $separator . ' ' . $row['ID'];
            $separator = ',';
        }

        return array(
            'formulaDecode' => $formulaDecode,
            'select_str2' => $select_str2,
            'whereInClause' => $whereInClause,
        );

    }

    function delete_attendance()
    {
        $masterID = $this->input->post('masterID');

        $delete = $this->db->delete('srp_erp_pay_empattendancereview', array('ID' => $masterID));

        if ($delete) {
            echo json_encode(array('error' => 0, 'message' => 'Updated Successfully'));
        } else {
            echo json_encode(array('error' => 1, 'message' => 'Failed.'));
        }

    }

    function delete_attendance_oman_oil()
    {
        $masterID = $this->input->post('masterID');
        $dateTime = current_date();
        $data = [
            'isDeleted' => 1, 'modifiedUserID' => current_userID(), 'modifiedPCID' => current_pc(),
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $delete = $this->db->where(['logID' => $masterID])->update('srp_erp_attendance_oman_oil', $data);

        if ($delete) {
            echo json_encode(['error' => 0, 'message' => 'Deleted Successfully']);
        } else {
            echo json_encode(['error' => 1, 'message' => 'Error in delete process.']);
        }

    }


    function load_declaration_drilldown_table()
    {

        echo json_encode($this->Employee_model->load_declaration_drilldown_table());

    }

    function attendance_confirmation()
    {
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $type = $this->input->post('type');
        $attendance_master = $this->input->post('attendance_master');

        $companyID = current_companyID();
        $otarray = array();
        

        if($attendance_master){
            $qry = "SELECT ID,empID, NDaysOT, weekendOTHours, holidayOTHours, overTimeGroup, 
               (CASE WHEN NDaysOT > 0  THEN 1 WHEN weekendOTHours > 0  THEN 2 WHEN holidayOTHours > 0 THEN 3 ELSE 0 END) AS OtmasterID 
               FROM srp_erp_pay_empattendancereview AS rView 
               LEFT JOIN srp_employeesdetails ON EIdNo = rView.empID 
               WHERE confirmedYN = 0 AND companyID = {$companyID} AND empAttMasterID = '{$attendance_master}'  
               AND (NDaysOT > 0 OR weekendOTHours > 0 OR holidayOTHours > 0) AND overTimeGroup > 0";
        }else{
            $qry = "SELECT ID,empID, NDaysOT, weekendOTHours, holidayOTHours, overTimeGroup, 
               (CASE WHEN NDaysOT > 0  THEN 1 WHEN weekendOTHours > 0  THEN 2 WHEN holidayOTHours > 0 THEN 3 ELSE 0 END) AS OtmasterID 
               FROM srp_erp_pay_empattendancereview AS rView 
               LEFT JOIN srp_employeesdetails ON EIdNo = rView.empID 
               WHERE confirmedYN = 0 AND companyID = {$companyID} AND (attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}')  
               AND (NDaysOT > 0 OR weekendOTHours > 0 OR holidayOTHours > 0) AND overTimeGroup > 0";
        }
        

        $ot = $this->db->query($qry)->result_array();

        if ($ot) {
            foreach ($ot as $employee) {
                $otamount = $this->get_attendance_ot_amount($employee['empID'], $employee['OtmasterID']);

                if ($employee['OtmasterID'] == 1) {
                    $value = $employee['NDaysOT'];
                }
                if ($employee['OtmasterID'] == 2) {
                    $value = $employee['weekendOTHours'];
                }

                if ($employee['OtmasterID'] == 3) {
                    $value = $employee['holidayOTHours'];
                }
                if (!empty($otamount) && $otamount['transactionAmount'] > 0) {
                    $minuteOtAmount = ($otamount['transactionAmount'] / 60) * $value;

                } else {
                    $minuteOtAmount = 0;
                }

                $this->db->select('salaryCategoryID');
                $this->db->where('OTMasterID', $employee['OtmasterID']);
                $this->db->where('companyID', current_companyID());
                $this->db->from('srp_erp_pay_overtimecategory');
                $salaryCategoryID = $this->db->get()->row_array();


                array_push($otarray, array('paymentOT' => $minuteOtAmount, 'ID' => $employee['ID'], 'salaryCategoryID' => $salaryCategoryID['salaryCategoryID']));
            }
        }

        $validation = $this->db->query("SELECT COUNT(empID) AS count,Ename2 FROM srp_erp_pay_empattendancereview AS rView 
                            LEFT JOIN srp_employeesdetails on EIdNo=empID 
                            WHERE confirmedYN=0 AND companyID={$companyID} AND (attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}') 
                            GROUP BY EmpID, attendanceDate HAVING count > 1")->result_array();

        if($type != 'manual'){
            if (!empty($validation)) {
                $last_names = array_column($validation, 'Ename2');
                $error = join(" , ", $last_names);
                echo json_encode(array('error' => 1, 'message' => 'Duplicate attendance found for ' . $error));
                exit;
            }
        }

        if($attendance_master){
            $qry = "SELECT ID,empID,att_rv.contractAutoID,att_rv.jobID,att_rv.contractReference,att_rv.jobReference
                    FROM srp_erp_pay_empattendancereview AS att_rv
                    JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo 
                    LEFT JOIN srp_erp_pay_floormaster ON srp_erp_pay_floormaster.floorID = att_rv.floorID 
                    WHERE att_rv.empAttMasterID = '{$attendance_master}' AND att_rv.companyID = {$companyID}  AND approvedYN=0 
                    AND confirmedYN = 0 ";
            
        }else{
            $qry = "SELECT ID,empID,att_rv.contractAutoID,att_rv.jobID,att_rv.contractReference,att_rv.jobReference
                    FROM srp_erp_pay_empattendancereview AS att_rv
                    JOIN srp_employeesdetails ON att_rv.empID = srp_employeesdetails.EIdNo 
                    LEFT JOIN srp_erp_pay_floormaster ON srp_erp_pay_floormaster.floorID = att_rv.floorID 
                    WHERE attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' AND att_rv.companyID = {$companyID}  AND approvedYN=0 
                    AND confirmedYN = 0 ";
        }
        
        $detail_records = $this->db->query($qry)->result_array();
        //update pay attendance view
        //get_attandance_variable_table
      

        if (empty($detail_records)) {
            echo json_encode(array('error' => 1, 'message' => 'There are no records to confirm!'));
            exit;
        }

        $this->db->trans_start();
        $this->load->library('approvals');

        $autoApproval = get_document_auto_approval('ATT');
        
        $approvals_status = null;

        //update variable confirmation
        $res = $this->update_emp_varibale_empattendanceView($detail_records);

        if($autoApproval == 0){
        
            $data = array(
                'confirmedYN' => '1',
                'confirmedDate' => date('Y-m-d'),
                'confirmedBy' => $this->common_data['current_userID'],
                //'confirmedByName' => $this->common_data['current_user'],
                'approvedYN' => '1',
                'approvedDate' => date('Y-m-d'),
                'approvedBy' => $this->common_data['current_userID'],
                //'approvedbyEmpName' => $this->common_data['current_user'],
            );

            $this->db->where("(attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}') ");
            $this->db->where("confirmedYN", 0);
            $this->db->where("companyID", $companyID);
            //$this->db->where_in("floorID", $floorID);
            $update = $this->db->update("srp_erp_pay_empattendancereview", $data);
            if ($update) {
                $data_app = array();
                foreach($detail_records as $key => $record){
                    $data_app[$key]['companyID'] = $this->common_data['company_data']['company_id'];
                    $data_app[$key]['empattendancereviewID'] = $record['ID'];
                    $data_app[$key]['approvalLevelID'] = 1;
                    $data_app[$key]['approvalGroupID'] = $this->common_data['user_group'];
                    $data_app[$key]['docConfirmedDate'] = $this->common_data['current_date'];
                    $data_app[$key]['docConfirmedByEmpID'] = $this->common_data['current_userID'];
                    $data_app[$key]['approvedEmpID'] = $this->common_data['current_userID'];
                    $data_app[$key]['approvedYN'] = 1;
                    $data_app[$key]['approvedDate'] = $this->common_data['current_date'];
                    $data_app[$key]['approvedPC'] = $this->common_data['current_pc'];
                    $data_app[$key]['job_id'] = $record['jobID'];
                    $data_app[$key]['contractAutoID'] = $record['contractAutoID'];
          
                }

                $this->db->insert_batch('srp_erp_attendanceapproval', $data_app);
                
            }
           

        }elseif($autoApproval == 1){
            $maxlevel = $this->maxlevel('ATT');

            if (!empty($maxlevel["levelNo"])) {
                foreach($detail_records as $key => $record){
                    $data_app = array();
                    for ($i = 1; $i <= $maxlevel["levelNo"]; $i++) {
                        $data_app[$i]['companyID'] = $this->common_data['company_data']['company_id'];
                        $data_app[$i]['empattendancereviewID'] = $record['ID'];
                        $data_app[$i]['approvalLevelID'] = $i;
                        $data_app[$i]['approvalGroupID'] = $this->common_data['user_group'];
                        $data_app[$i]['docConfirmedDate'] = $this->common_data['current_date'];
                        $data_app[$i]['docConfirmedByEmpID'] = $this->common_data['current_userID'];
                        $data_app[$i]['approvedEmpID'] = null;
                        $data_app[$i]['approvedYN'] = 0;
                        $data_app[$i]['approvedDate'] = null;
                        $data_app[$i]['job_id'] = $record['jobID'];
                        $data_app[$i]['contractAutoID'] = $record['contractAutoID'];
                    }
                    $this->db->insert_batch('srp_erp_attendanceapproval', $data_app);
                }
                $data = array(
                    'confirmedYN' => 1,
                    'confirmedBy' => $this->common_data['current_userID'],
                    'confirmedDate' => date('Y-m-d'),
                    //'confirmedByName' => $this->common_data['current_user'],
                );

                if($attendance_master){
                    $this->db->where("empAttMasterID",$attendance_master);
                }else{
                    $this->db->where("(attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}') ");
                }
                
                $this->db->where("confirmedYN", 0);
                $this->db->where("companyID", $companyID);
                //$this->db->where_in("floorID", $floorID);
                $update = $this->db->update("srp_erp_pay_empattendancereview", $data);
            }
        }else{
            echo json_encode(array('error' => 1, 'message' => 'Approval levels are not set for this document'));
            exit;
        }

        if ($update) {
            if (!empty($otarray)) {
                $this->db->update_batch('srp_erp_pay_empattendancereview', $otarray, 'ID');
            }
            //echo json_encode(array('error' => 0, 'message' => 'Successfully confirmed '));
        } else {
            //echo json_encode(array('error' => 1, 'message' => 'Failed'));
        }


        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(array('error' => 1, 'message' => 'Failed'));
        } else {
            $this->db->trans_commit();

            if($attendance_master){
                $this->db->where('EmpAttMasterID',$attendance_master)->update('srp_empattendancemaster',array('isAttClosed' => 1));
            }

            echo json_encode(array('error' => 0, 'message' => 'Successfully confirmed '));
        }
    }

    function attendanceMachineTable()
    {

        $asofDate = $this->input->post('asofDate');
        $filterDepartment = $this->input->post('filterDepartment');
        $companyID = current_companyID();
        $where = "srp_erp_pay_empattendancereview.companyID =$companyID AND confirmedYN=1 ";
        if ($asofDate != '') {
            $where .= " AND attendanceDate <='{$asofDate}'";
        }
        if ($filterDepartment != '') {
            $where .= " AND srp_erp_pay_empattendancereview.floorID={$filterDepartment}";
        }


        $select = "t.floorDescription AS floorDescription, t.attendanceDate AS attendanceDate, t.floorID AS floorID, t.confirmedYN AS confirmedYN, CASE WHEN t.total = t.approved THEN 1 WHEN t.total = t.NotApproved THEN 0 ELSE 2 END AS approvedYN";

        $from = " (SELECT floorDescription, attendanceDate, srp_erp_pay_empattendancereview.floorID AS floorID, confirmedYN,COUNT(ID) AS total, COUNT(CASE WHEN approvedYN = 1 THEN 1 ELSE NULL END) AS approved, COUNT(CASE WHEN approvedYN = 0 THEN 1 ELSE NULL END) AS NotApproved FROM srp_erp_pay_empattendancereview LEFT JOIN srp_erp_pay_floormaster ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID WHERE $where GROUP BY attendanceDate , srp_erp_pay_empattendancereview.floorID) t";

        $this->datatables->select($select, false)
            ->from($from)
            /*->join('srp_erp_pay_floormaster', 'srp_erp_pay_floormaster.floorID=srp_erp_pay_empattendancereview.floorID', 'left')*/
            ->add_column('edit', '<a onclick="edit_attendance(\'$1\',$2)"><span title="View" rel="tooltip" class="fa fa-fw fa-eye"></span>', 'attendanceDate,floorID')
            ->add_column('confirm', '$1', 'confirm(confirmedYN)')
            ->add_column('approvedYN', '$1', 'confirm(approvedYN)');


        /* $this->datatables->select("floorDescription, attendanceDate,srp_erp_pay_empattendancereview.floorID as floorID,confirmedYN,approvedYN", false)->from('srp_erp_pay_empattendancereview')->join('srp_erp_pay_floormaster', 'srp_erp_pay_floormaster.floorID=srp_erp_pay_empattendancereview.floorID', 'left')->add_column('edit', '<a onclick="edit_attendance(\'$1\',$2)"><span class="fa fa-fw fa-eye"></span>', 'attendanceDate,floorID')->add_column('confirm', '$1', 'confirm(confirmedYN)')->add_column('approvedYN', '$1', 'confirm(approvedYN)')->where($where)->group_by('attendanceDate,srp_erp_pay_empattendancereview.floorID');*/

        echo $this->datatables->generate();
    }

    function attendanceMachineTableApproval()
    {
        $date_from = $this->input->post('date_from');
        $date_to = $this->input->post('date_to');
        $group_by = $this->input->post('group_by');
        $approvedYN = $this->input->post('approvedYN');
        $filter_location = $this->input->post('filter_location');
        $emp_arr = $this->input->post('emp_arr');
        $managerID = current_userID();
        $companyID = current_companyID();

        $hrAdmin = $this->db->query("SELECT EIdNo FROM srp_employeesdetails WHERE isHRAdmin=1 AND EIdNo={$managerID}")->row_array();
        $isDepartmentHead = $this->db->query("SELECT * FROM srp_departmentmaster WHERE hod_id={$managerID} AND Erp_companyID = {$companyID}")->row_array();

        
        $where = "srp_erp_pay_empattendancereview.companyID =$companyID AND confirmedYN=1  ";
        $where .= ($filter_location != "" ? " AND srp_erp_pay_empattendancereview.floorID={$filter_location}" : "");

        // if (empty($hrAdmin)) {
        //     $where .= " AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 AND managerID={$managerID}";
        // }
        if($isDepartmentHead){
            $where .= " AND srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerID ." or (srp_erp_approvalusers.employeeID = -2  "; 
        }else{
            $where .= " AND srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerID ." or (srp_erp_approvalusers.employeeID = -1  "; 
        }

        if($isDepartmentHead){
            $department = $isDepartmentHead['DepartmentMasterID'];
            $where .= " and srp_erp_pay_empattendancereview.empID in (SELECT empdepartments.EmpID FROM srp_empdepartments empdepartments
                WHERE empdepartments.Erp_companyID=".$companyID." AND empdepartments.DepartmentMasterID = ".$department." AND empdepartments.isPrimary = '1')";
        }
       
        if (empty($hrAdmin) && empty($isDepartmentHead)) {
            $where .= " and srp_erp_pay_empattendancereview.empID in (SELECT empmanagers.empID FROM srp_employeesdetails empdetail
            JOIN srp_erp_employeemanagers empmanagers on empdetail.EIdNo=empmanagers.empID and empmanagers.active=1
            WHERE empmanagers.companyID=".$companyID." AND empmanagers.managerID=".$managerID.")";
        }

        $where_emp = '';
        if($emp_arr){
            $where_emp = " AND srp_erp_pay_empattendancereview.empID IN ($emp_arr)";
        }

        $where .= " ))  ";

        $where .= ($date_from != "" ? " AND attendanceDate >='{$date_from}'" : "");
        $where .= ($date_to != "" ? " AND attendanceDate <='{$date_to}'" : "");
        $where .= ($approvedYN == 0) ? " AND srp_erp_attendanceapproval.approvedYN !=1" : " AND srp_erp_attendanceapproval.approvedYN = 1 ";
        $where .= " AND (srp_erp_attendanceapproval.manualAttendance IS NULL OR srp_erp_attendanceapproval.manualAttendance = 0)";
        $where .= $where_emp;

        $edit = ($group_by == 1) ? "attendanceDate,floorID,attDate" : (($group_by == 2) ? "attendanceDate,floorID,attDate" : "empID,floorID,location");
        $date_column = ($group_by == 1) ? "attendanceDate" : "GROUP_CONCAT(attendanceDate ORDER BY attendanceDate ASC SEPARATOR ' | ') AS attendanceDate";
        $groupBy_str = ($group_by == 1) ? "floorID, attendanceDate" : "floorID";


        $this->datatables->select("attendanceDate, approvedYN, floorID, confirmedYN, empID, clockinFloorDescription, clockoutFloorDescription", false);

        $this->datatables->from("(SELECT {$date_column},approvedYN, floorID, confirmedYN, empID, clockinFloorDescription, clockoutFloorDescription FROM
            (SELECT CASE WHEN t.total = t.approved THEN 1 WHEN t.total = t.NotApproved THEN 0 ELSE 2 END AS approvedYN, t.floorID as floorID , t.confirmedYN,
            empID, clockinFloorDescription, clockoutFloorDescription, attendanceDate 
            FROM (SELECT srp_erp_pay_empattendancereview.floorID, confirmedYN, EIdNo AS empID, 	`floorin`.`floorDescription` AS `clockinFloorDescription`,
            floorout.floorDescription AS clockoutFloorDescription, attendanceDate, COUNT(ID) AS total, 
            COUNT(CASE WHEN srp_erp_pay_empattendancereview.approvedYN = 1 THEN 1 ELSE NULL END) AS approved, COUNT(CASE WHEN srp_erp_pay_empattendancereview.approvedYN = 0 THEN 1 ELSE NULL END) AS NotApproved 
            FROM srp_erp_pay_empattendancereview 
            LEFT JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo = srp_erp_pay_empattendancereview.empID 
            LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = srp_erp_pay_empattendancereview.floorID
            LEFT JOIN srp_erp_pay_floormaster floorout ON floorout.floorID = srp_erp_pay_empattendancereview.clockoutFloorID  
            JOIN srp_erp_attendanceapproval ON srp_erp_attendanceapproval.empattendancereviewID=srp_erp_pay_empattendancereview.ID AND srp_erp_attendanceapproval.approvalLevelID=srp_erp_pay_empattendancereview.currentLevelNo
            JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_pay_empattendancereview.currentLevelNo 
            WHERE $where GROUP BY attendanceDate,srp_erp_pay_empattendancereview.floorID) t ) a
            GROUP BY {$groupBy_str} 
            ) t1"
        );

        $this->datatables->add_column('confirm', '$1', 'confirm(confirmedYN)')->add_column('approved', '$1', 'confirm(approvedYN)')
            ->add_column('edit', '<a onclick="edit_attendance(\'$1\',$2,\'$3\')"><span title="View" rel="tooltip" class="fa fa-check"></span>', $edit);

        echo $this->datatables->generate();
    }

    function attendanceMachineTableApprovalManual()
    {
        $date_from = $this->input->post('date_from');
        $date_to = $this->input->post('date_to');
        $group_by = $this->input->post('group_by');
        $approvedYN = $this->input->post('approvedYN');
        $filter_location = $this->input->post('filter_location');
        $managerID = current_userID();

        $hrAdmin = $this->db->query("SELECT EIdNo FROM srp_employeesdetails WHERE isHRAdmin=1 AND EIdNo={$managerID}")->row_array();

        $companyID = current_companyID();
        $where = "srp_erp_pay_empattendancereview.companyID =$companyID AND confirmedYN=1  ";
        $where .= ($filter_location != "" ? " AND srp_erp_pay_empattendancereview.floorID={$filter_location}" : "");

        // if (empty($hrAdmin)) {
        //     $where .= " AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 AND managerID={$managerID}";
        // }
        $where .= " AND srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerID ." or (srp_erp_approvalusers.employeeID = -1  "; 
        if (empty($hrAdmin)) {
            $where .= " and srp_erp_pay_empattendancereview.empID in (SELECT empmanagers.empID FROM srp_employeesdetails empdetail
            JOIN srp_erp_employeemanagers empmanagers on empdetail.EIdNo=empmanagers.empID and empmanagers.active=1
            WHERE empmanagers.companyID=".$companyID." AND empmanagers.managerID=".$managerID.")";
        }
        $where .= " ))  ";

        $where .= ($date_from != "" ? " AND attendanceDate >='{$date_from}'" : "");
        $where .= ($date_to != "" ? " AND attendanceDate <='{$date_to}'" : "");
        $where .= ($approvedYN == 0) ? " AND srp_erp_attendanceapproval.approvedYN !=1" : " AND srp_erp_attendanceapproval.approvedYN = 1 ";
        $where .= " AND srp_erp_attendanceapproval.manualAttendance = 1 ";

        $edit = ($group_by == 1) ? "attendanceDate,floorID,attDate" : "empID,floorID,location";
        $date_column = ($group_by == 1) ? "attendanceDate" : "GROUP_CONCAT(attendanceDate ORDER BY attendanceDate ASC SEPARATOR ' | ') AS attendanceDate";
        $groupBy_str = ($group_by == 1) ? "floorID, attendanceDate" : "floorID";


        $this->datatables->select("attendanceDate, approvedYN, floorID, confirmedYN, empID, clockinFloorDescription, clockoutFloorDescription", false);

        $this->datatables->from("(SELECT {$date_column},approvedYN, floorID, confirmedYN, empID, clockinFloorDescription, clockoutFloorDescription FROM
            (SELECT CASE WHEN t.total = t.approved THEN 1 WHEN t.total = t.NotApproved THEN 0 ELSE 2 END AS approvedYN, t.floorID as floorID , t.confirmedYN,
            empID, clockinFloorDescription, clockoutFloorDescription, attendanceDate 
            FROM (SELECT srp_erp_pay_empattendancereview.floorID, confirmedYN, EIdNo AS empID, 	`floorin`.`floorDescription` AS `clockinFloorDescription`,
            floorout.floorDescription AS clockoutFloorDescription, attendanceDate, COUNT(ID) AS total, 
            COUNT(CASE WHEN srp_erp_pay_empattendancereview.approvedYN = 1 THEN 1 ELSE NULL END) AS approved, COUNT(CASE WHEN srp_erp_pay_empattendancereview.approvedYN = 0 THEN 1 ELSE NULL END) AS NotApproved 
            FROM srp_erp_pay_empattendancereview 
            LEFT JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo = srp_erp_pay_empattendancereview.empID 
            LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = srp_erp_pay_empattendancereview.floorID
            LEFT JOIN srp_erp_pay_floormaster floorout ON floorout.floorID = srp_erp_pay_empattendancereview.clockoutFloorID  
            JOIN srp_erp_attendanceapproval ON srp_erp_attendanceapproval.empattendancereviewID=srp_erp_pay_empattendancereview.ID AND srp_erp_attendanceapproval.approvalLevelID=srp_erp_pay_empattendancereview.currentLevelNo
            JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_pay_empattendancereview.currentLevelNo 
            WHERE $where GROUP BY attendanceDate,srp_erp_pay_empattendancereview.floorID) t ) a
            GROUP BY {$groupBy_str} 
            ) t1"
        );


        $this->datatables->add_column('confirm', '$1', 'confirm(confirmedYN)')->add_column('approved', '$1', 'confirm(approvedYN)')
            ->add_column('edit', '<a onclick="edit_attendance(\'$1\',$2,\'$3\')"><span title="View" rel="tooltip" class="fa fa-check"></span>', $edit);

        echo $this->datatables->generate();
    }

    function machineattendanceView()
    {
        $hideedit = false;
        $hideedit = $this->input->post('hideedit');
        $floorID = $this->input->post('floorID');

        $companyID = current_companyID();

        $attendanceDate = $this->input->post('attendanceDate');
        $approvedYN = $this->input->post('approvedYN');

        $companyID = current_companyID();
        $qry = "SELECT isWeekEndDay,approvedComment,approvedYN,empID,ECode,Ename1, Ename2,empMachineID, floorin.floorDescription AS clockinFloorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, 
                presentTypeID,   DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, 
                lateHours, earlyHours, OTHours,normalDay,mustCheck,normalTime, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours,realTime,
                flootout.floorDescription AS  clockoutFloorDescription 
                FROM srp_erp_pay_empattendancereview 
                LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                LEFT JOIN `srp_erp_pay_floormaster` floorin ON floorin.floorID = srp_erp_pay_empattendancereview.floorID 
                LEFT JOIN srp_erp_pay_floormaster flootout ON flootout.floorID = srp_erp_pay_empattendancereview.clockoutFloorID
 
                WHERE attendanceDate  = '{$attendanceDate}' AND srp_erp_pay_empattendancereview.companyID = {$companyID} AND srp_erp_pay_empattendancereview.floorID = {$floorID} AND confirmedYN=1";
        $data['tempAttData'] = $this->db->query($qry)->result_array();
        $data['hideedit'] = $hideedit;
        echo $this->load->view('system/hrm/ajax/attendanceListView', $data, true);
    }

    function AttendanceApprovalList()
    {
        $hideedit = false;
        $hideedit = $this->input->post('hideedit');

        $companyID = current_companyID();

        $attendanceDate = $this->input->post('attendanceDate');
        $approvedYN = $this->input->post('approvedYN');
        $managerId = current_userID();
        $datefrom = $this->input->post('datefrom');
        $dateto = $this->input->post('dateto');
        $companyID = current_companyID();
        $floorID = $this->input->post('floorID');
        $type = $this->input->post('type');
        $emp_arr = $selected_emp_arr = $this->input->post('emp_arr');
        $emp_str = null;

        if(is_array($emp_arr) && count($emp_arr) > 0 ){
            $emp_str = join(',',$emp_arr);
        }
       
        $where = "";
        $where .= ($approvedYN != '' ? " AND approvedYN = {$approvedYN}" : "");
        $where .= ($datefrom != '' ? " AND attendanceDate >='{$datefrom}'" : "");
        $where .= ($dateto != '' ? " AND attendanceDate <='{$dateto}'" : "");

        
        $hrAdmin = $this->db->query("SELECT * FROM srp_employeesdetails WHERE isHRAdmin=1 AND EIdNo={$managerId}")->row_array();
        
        $isDepartmentHead = $this->db->query("SELECT * FROM srp_departmentmaster WHERE hod_id={$managerId} AND Erp_companyID = {$companyID}")->row_array();

        $where1 = "";   

        if($isDepartmentHead){
            $where1 = " srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerId." or (srp_erp_approvalusers.employeeID = -2  "; 
        }else{
            $where1 = " srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerId." or (srp_erp_approvalusers.employeeID = -1  "; 
        }

        if($isDepartmentHead){
            $department = $isDepartmentHead['DepartmentMasterID'];
            $where1 .= " and srp_erp_pay_empattendancereview.empID in (SELECT empdepartments.EmpID FROM srp_empdepartments empdepartments
                WHERE empdepartments.Erp_companyID=".$companyID." AND empdepartments.DepartmentMasterID = ".$department." AND empdepartments.isPrimary = '1')";
        }
        
        if (empty($hrAdmin) && empty($isDepartmentHead)) {
            $where1 .= " and srp_erp_pay_empattendancereview.empID in (SELECT empmanagers.empID FROM srp_employeesdetails empdetail
                JOIN srp_erp_employeemanagers empmanagers on empdetail.EIdNo=empmanagers.empID and empmanagers.active=1
                WHERE empmanagers.companyID=".$companyID." AND empmanagers.managerID=".$managerId.")";
        }


        $whereEmp = '';
        if($emp_str){
            $whereEmp = " AND srp_erp_pay_empattendancereview.empID IN ($emp_str)";
        }

       

        $where1 .= " )) AND ";

    
        
        if($type == 'Manual'){

            $where1 .= " srp_erp_pay_empattendancereview.empAttMasterID IS NOT NULL AND ";

        }else{

            $where1 .= " ";

            //srp_erp_pay_empattendancereview.empAttMasterID IS NULL

        }

        if(strpos($attendanceDate,"|")){
            $date_r_arr = explode('|',$attendanceDate);
            $lastKey = key(array_slice($date_r_arr, -1, 1, true));
            $date_filter = ($this->input->post('col') == 'location') ? '' : "attendanceDate BETWEEN '{$date_r_arr[0]}' AND '{$date_r_arr[$lastKey]}' AND ";
        }else{
            $date_filter = ($this->input->post('col') == 'location') ? '' : "attendanceDate = '{$attendanceDate}' AND ";
        }

        
        $date_between = '';
        if ($this->input->post('col') == 'location') {
            $date_between = ($datefrom != '' ? " AND attendanceDate >='{$datefrom}'" : "");
            $date_between .= ($dateto != '' ? " AND attendanceDate <='{$dateto}'" : "");
        }

        $qry = "SELECT IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',1) ,0) as graceperiodhrs,IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',-1),0) as gracemins,ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount,isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,srp_erp_attendanceapproval.approvedYN as approvedYN, 
                srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, `floorin`.`floorDescription` AS `clockinFloorDescription`, srp_erp_pay_empattendancereview.ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, 
                DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, 
                earlyHours, OTHours, mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime ,attendanceApprovedID,approvalLevelID as level,
                floorout.floorDescription AS clockoutFloorDescription,srp_erp_jobsmaster.job_code,srp_erp_jobsmaster.job_name,srp_erp_contractmaster.contractCode
                FROM srp_erp_pay_empattendancereview 
                LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = srp_erp_pay_empattendancereview.floorID
                LEFT JOIN srp_erp_pay_floormaster floorout ON floorout.floorID = srp_erp_pay_empattendancereview.clockoutFloorID  
                JOIN srp_erp_attendanceapproval ON srp_erp_attendanceapproval.empattendancereviewID=srp_erp_pay_empattendancereview.ID AND srp_erp_attendanceapproval.approvalLevelID=srp_erp_pay_empattendancereview.currentLevelNo
                JOIN srp_erp_approvalusers ON  srp_erp_approvalusers.levelNo = srp_erp_pay_empattendancereview.currentLevelNo
                LEFT JOIN srp_erp_contractmaster ON srp_erp_attendanceapproval.contractAutoID = srp_erp_contractmaster.contractAutoID
                LEFT JOIN srp_erp_jobsmaster ON srp_erp_attendanceapproval.job_id = srp_erp_jobsmaster.id
                WHERE {$date_filter}  {$where1} srp_erp_pay_empattendancereview.companyID = {$companyID} AND srp_erp_pay_empattendancereview.confirmedYN = 1 
                AND srp_erp_pay_empattendancereview.floorID=$floorID {$date_between} {$whereEmp}";


        if ($this->input->post('col') == 'employee') {
            $qry2 = "SELECT IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',1) ,0) as graceperiodhrs,IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',-1),0) as gracemins,ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount, isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, 
                     srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, 
                     presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty,
                     lateHours, earlyHours, OTHours,  mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime ,srp_erp_pay_empattendancereview.currentLevelNo as level
                     FROM srp_erp_pay_empattendancereview
                     LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                     LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID 
                     INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo 
                     WHERE  srp_erp_pay_empattendancereview.companyID = {$companyID} $where AND confirmedYN = 1 AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 
                     AND managerID={$managerId}";
            $qry = $qry2;
        }  

        //echo '<pre>'.$this->db->last_query().'</pre>';
        $records = $this->db->query($qry)->result_array();

        if($emp_str){
            $qry = $qry.$whereEmp;
            $data['tempAttData'] = $this->db->query($qry)->result_array();
        }else{
            $data['tempAttData'] = $this->db->query($qry)->result_array();
        }

        $selected_emp_list = array();
        foreach($records as $record){

            $selected_emp_list[$record['empID']] = $record['ECode'].' | '.$record['Ename1'];

        }

        $data['hideedit'] = $hideedit;
        $data['attendanceDate'] = $attendanceDate;
        $data['approvedYN'] = $approvedYN;
        $data['datefrom'] = $datefrom;
        $data['dateto'] = $dateto;
        $data['floorID'] = $floorID;
        $data['emp_arr'] = $selected_emp_list;
        $data['selected_emp_arr'] = $selected_emp_arr;

        echo $this->load->view('system/hrm/ajax/attendaceApprovalList', $data, true);
    }

    function AttendanceApprovalListSimple()
    {
        $hideedit = false;
        $hideedit = $this->input->post('hideedit');

        $companyID = current_companyID();

        $attendanceDate = $this->input->post('attendanceDate');
        $approvedYN = $this->input->post('approvedYN');
        $managerId = current_userID();
        $datefrom = $this->input->post('datefrom');
        $dateto = $this->input->post('dateto');
        $companyID = current_companyID();
        $floorID = $this->input->post('floorID');


        $where = "";
        $where .= ($approvedYN != '' ? " AND approvedYN ={$approvedYN}" : "");
        $where .= ($datefrom != '' ? " AND attendanceDate >='{$datefrom}'" : "");
        $where .= ($dateto != '' ? " AND attendanceDate <='{$dateto}'" : "");

        
        
        $hrAdmin = $this->db->query("SELECT * FROM srp_employeesdetails WHERE isHRAdmin=1 AND EIdNo={$managerId}")->row_array();
        
        $where1 = "";
        $where1 = " srp_erp_attendanceapproval.companyID=".$companyID." AND srp_erp_approvalusers.documentID = 'ATT' AND srp_erp_approvalusers.companyID = ".$companyID." AND (srp_erp_approvalusers.employeeID = ".$managerId." or (srp_erp_approvalusers.employeeID = -1  "; 
        if (empty($hrAdmin)) {
            $where1 .= " and srp_erp_pay_empattendancereview.empID in (SELECT empmanagers.empID FROM srp_employeesdetails empdetail
            JOIN srp_erp_employeemanagers empmanagers on empdetail.EIdNo=empmanagers.empID and empmanagers.active=1
            WHERE empmanagers.companyID=".$companyID." AND empmanagers.managerID=".$managerId.")";
        }
        $where1 .= " )) AND ";

        $date_filter = ($this->input->post('col') == 'location') ? '' : "attendanceDate = '{$attendanceDate}' AND ";
        $date_between = '';
        if ($this->input->post('col') == 'location') {
            $date_between = ($datefrom != '' ? " AND attendanceDate >='{$datefrom}'" : "");
            $date_between .= ($dateto != '' ? " AND attendanceDate <='{$dateto}'" : "");
        }


        /* if (empty($hrAdmin)) {
            $qry = "SELECT  IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',1) ,0) as graceperiodhrs,IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',-1),0) as gracemins,ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount,isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, 
                    srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, 
                    DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, 
                    earlyHours, OTHours, mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime ,srp_erp_pay_empattendancereview.currentLevelNo as level
                    FROM srp_erp_pay_empattendancereview 
                    LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                    LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID 
                    INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo 
                    WHERE {$date_filter} srp_erp_pay_empattendancereview.companyID = {$companyID} AND confirmedYN = 1 AND srp_erp_employeemanagers.level=0 
                    AND srp_erp_employeemanagers.active=1 AND managerID={$managerId} AND srp_erp_pay_empattendancereview.floorID=$floorID {$date_between}";

        } else { */
            
            $qry = "SELECT IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',1) ,0) as graceperiodhrs,IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',-1),0) as gracemins,ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount,isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,srp_erp_attendanceapproval.approvedYN as approvedYN, 
                    srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, `floorin`.`floorDescription` AS `clockinFloorDescription`, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, 
                    DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, 
                    earlyHours, OTHours, mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime ,attendanceApprovedID,approvalLevelID as level,
                    floorout.floorDescription AS clockoutFloorDescription
                    FROM srp_erp_pay_empattendancereview 
                    LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                    LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = srp_erp_pay_empattendancereview.floorID
                    LEFT JOIN srp_erp_pay_floormaster floorout ON floorout.floorID = srp_erp_pay_empattendancereview.clockoutFloorID  
                    JOIN srp_erp_attendanceapproval ON srp_erp_attendanceapproval.empattendancereviewID=srp_erp_pay_empattendancereview.ID AND srp_erp_attendanceapproval.approvalLevelID=srp_erp_pay_empattendancereview.currentLevelNo
                    JOIN srp_erp_approvalusers ON  srp_erp_approvalusers.levelNo = srp_erp_pay_empattendancereview.currentLevelNo
                    WHERE {$date_filter}  {$where1} srp_erp_pay_empattendancereview.companyID = {$companyID} AND confirmedYN = 1 
                    AND srp_erp_pay_empattendancereview.floorID=$floorID {$date_between}";
       // }


        if ($this->input->post('col') == 'employee') {
            $qry2 = "SELECT IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',1) ,0) as graceperiodhrs,IFNULL(SUBSTRING_INDEX( CONCAT(FLOOR(srp_erp_pay_empattendancereview.gracePeriod/60),':',LPAD(MOD(srp_erp_pay_empattendancereview.gracePeriod,60),2,'0')),':',-1),0) as gracemins,ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount, isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, 
                     srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, 
                     presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty,
                     lateHours, earlyHours, OTHours,  mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime ,srp_erp_pay_empattendancereview.currentLevelNo as level
                     FROM srp_erp_pay_empattendancereview
                     LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo 
                     LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID 
                     INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo 
                     WHERE  srp_erp_pay_empattendancereview.companyID = {$companyID} $where AND confirmedYN = 1 AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 
                     AND managerID={$managerId}";
            $qry = $qry2;
        }

        $data['tempAttData'] = $this->db->query($qry)->result_array(); //echo '<pre>'.$this->db->last_query().'</pre>';
        $data['hideedit'] = $hideedit;
        $data['attendanceDate'] = $attendanceDate;
        $data['approvedYN'] = $approvedYN;
        $data['datefrom'] = $datefrom;
        $data['dateto'] = $dateto;
        $data['floorID'] = $floorID;
        echo $this->load->view('system/hrm/ajax/attendanceApprovalListSimple', $data, true);
    }

    function approveattendlist()
    {
        $maxlevel = $this->maxlevel('ATT');
        $maxlevelNo = $maxlevel['levelNo'];
        $level = $this->input->post('level');
        $attendanceApprovedID = $this->input->post('attendanceApprovedID');
        $hiddenID = $this->input->post('hiddenID');
        $ID = $this->input->post('ID');
        $masterID = $this->input->post('masterID');
        $approveType = $this->input->post('approveType');
        $job_ref = $this->input->post('job_ref');

        $presentTypeID = $this->input->post('presentTypeID');
        $comments = $this->input->post('approvedComment');
        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('attendanceDate');
        $empName = $this->input->post('empName');
        $leave = $this->input->post('leave');
        $companyID = current_companyID();
        $new_array = array();
        $leave_array = array();
        $getArr = array();
        $x = 0;

        //$dataUpdate=array();
        //$lastLevelNotApproved = [];
        $approvals_status = array();
        $failedRecords = [];

        $this->db->trans_start();

        if (empty($ID)) {
            echo json_encode(array('error' => 'e', 'message' => 'No Records to confirm '));
            exit;
        }

        if (!empty($hiddenID)) {
            foreach ($hiddenID as $key => $val) {

                if($job_ref[$key]){
                    if ($presentTypeID[$key] == 6){
                        echo json_encode(array('error' => 'e', 'message' => 'You can not assign no pay for field employee ' . $empName[$key]));
                        exit;
                    }
                }
       
                if ($val == 1) {

                    if($level[$key] > 1){ 
                        $previousLevel = $level[$key] - 1;
                        $isLast_where = array('empattendancereviewID' => $masterID[$key], 'approvalLevelID' => $previousLevel);
                        $this->db->select('approvedYN');
                        $this->db->from('srp_erp_attendanceapproval');
                        $this->db->where($isLast_where);
                        $isLastLevelApproved = $this->db->get()->row_array();

                        if ($isLastLevelApproved['approvedYN'] == 1) {
                            $approvals_status[$key]= $this->approveAttendance($masterID[$key], $level[$key], 1, $comments[$key], $presentTypeID[$key],$attendanceApprovedID[$key]);
                            if($approvals_status[$key] == 'e' ){
                                $failedRecords[] = ' &nbsp;&nbsp;- ' . $empName[$key];
                            }
                        } else {
                            $failedRecords[] = ' &nbsp;&nbsp;- ' . $empName[$key];

                        }
                    }else{
            
                        $approvals_status[$key] = $this->approveAttendance($masterID[$key], $level[$key], 1, $comments[$key], $presentTypeID[$key],$attendanceApprovedID[$key]);
                        if($approvals_status[$key] == 'e'){
                            $failedRecords[] = ' &nbsp;&nbsp;- ' . $empName[$key];
                        }
                    }


                    if($approvals_status[$key] == '1' ){
                        //$updatedIDs[$key] = $masterID[$key];
                        if ($leave[$key] != 0) {
                            //Get last leave no
                            $lastCodeArray = $this->db->query("SELECT serialNo FROM srp_erp_leavemaster WHERE companyID={$companyID}
                                                ORDER BY leaveMasterID DESC LIMIT 1")->row_array();
                            $lastCodeNo = $lastCodeArray['serialNo'];
                            $lastCodeNo = ($lastCodeNo == null) ? 1 : $lastCodeArray['serialNo'] + 1;
    
                            $this->load->library('sequence');
                            $dCode = $this->sequence->sequence_generator('LA', $lastCodeNo);
    
                            $leave_array[$key]['empID'] = $empID[$key];
                            $leave_array[$key]['leaveTypeID'] = $leave[$key];
                            $leave_array[$key]['startDate'] = $attendanceDate[$key];
                            $leave_array[$key]['endDate'] = $attendanceDate[$key];;
                            $leave_array[$key]['days'] = 1;
                            $leave_array[$key]['documentCode'] = $dCode;
                            $leave_array[$key]['serialNo'] = $lastCodeNo;
                            $leave_array[$key]['entryDate'] = date('Y-m-d');
                            $leave_array[$key]['comments'] = 'From Attendance';
                            $leave_array[$key]['confirmedYN'] = 1;
                            $leave_array[$key]['confirmedByEmpID'] = current_userID();
                            $leave_array[$key]['confirmedByName'] = current_user();
                            $leave_array[$key]['confirmedDate'] = date('Y-m-d');
                            $leave_array[$key]['approvedYN'] = 1;
                            $leave_array[$key]['approvedDate'] = date('Y-m-d');;
                            $leave_array[$key]['approvedbyEmpID'] = current_userID();
                            $leave_array[$key]['approvedbyEmpName'] = current_user();
                            $leave_array[$key]['companyID'] = $companyID;
                            $leave_array[$key]['companyCode'] = current_companyCode();
                            $leave_array[$key]['createdUserGroup'] = current_user_group();
                            $leave_array[$key]['createdPCID'] = current_pc();
                            $leave_array[$key]['createdUserID'] = current_userID();
                            $leave_array[$key]['createdDateTime'] = current_date(true);
                            $leave_array[$key]['createdUserName'] = current_user();
                            $leave_array[$key]['timestamp'] = current_date(true);
                            $leave_array[$key]['isAttendance'] = 1;
                        }


                        //update unapproved leave for no pay calculations
                        $data_attendance = array();
                        $data_attendance['approvedYN'] = 1;
                        $data_attendance['approvedBy'] = current_userID();
                        $data_attendance['approvedDate'] = current_date(true);

                        $this->db->where('empViewID',$masterID[$key])->where('companyID',$companyID)->update('srp_erp_pay_unapproved_attendance',$data_attendance);
    
                    }
                
                    if (in_array($presentTypeID[$key], array(1))) {   /*1	= Ontitme, */
                        $getArr[$x] = $empID[$key];

                        $x++;
                    }
                }
            }
        }

        if (!empty($getArr)) {

            /*Hourly Accrual*/
            $commaList = implode(', ', $getArr);

            $qry = "SELECT EIdNo, leaveTypeID, srp_erp_leavegroup.leaveGroupID, noOfHours, attendanceDate, workHours, noOfHourscompleted 
            FROM `srp_employeesdetails` 
            INNER JOIN `srp_erp_leavegroup` ON srp_employeesdetails.leaveGroupID = srp_erp_leavegroup.leaveGroupID 
            AND companyID = {$companyID} AND isMonthly = 2 
            INNER JOIN `srp_erp_leavegroupdetails` ON srp_erp_leavegroup.leaveGroupID = srp_erp_leavegroupdetails.leaveGroupID 
            INNER JOIN (SELECT empID, attendanceDate, checkIn, checkOut,  (HOUR(`checkOut`) * 60 + MINUTE(`checkOut`)) - (HOUR(`checkIn`) * 60 + MINUTE(`checkIn`)) AS workHours 
            FROM `srp_erp_pay_empattendancereview` 
            WHERE attendanceDate = '{$attendanceDate[0]}' AND companyID = {$companyID}) att ON att.empID = EIdNo WHERE Erp_companyID = {$companyID} 
            AND EIdNo IN($commaList) 
            HAVING workHours >= noOfHourscompleted ";

            $hourlyaccrual = $this->db->query($qry)->result_array();

        }
        //$update = false;
        //if (!empty($new_array) ) {
        //if ($approvals_status == 1) {,
            //$approval = $this->db->update_batch('srp_erp_attendanceapproval', $data, 'attendanceApprovedID');
            // if($approval){
            //$update = $this->db->update_batch('srp_erp_pay_empattendancereview', $new_array, 'ID');
            // }
            if (!empty($hourlyaccrual)) {
                $currYear = date('Y');
                $accualmaster = $this->db->query("SELECT * FROM `srp_erp_leaveaccrualmaster` WHERE year = {$currYear} AND isHourly =1")->row_array();

                if (empty($accualmaster)) {
                    /*if accrual master not created*/
                    $this->load->library('sequence');
                    $code = $this->sequence->sequence_generator('LAM');
                    $data['companyID'] = $companyID;
                    $data['leaveaccrualMasterCode'] = $code;
                    $data['documentID'] = 'LAM';
                    $data['description'] = 'Hourly Accrual for -' . $currYear;
                    $data['year'] = $currYear;
                    $data['manualYN'] = 0;
                    $data['createdUserGroup'] = current_user_group();
                    $data['createDate'] = date('Y-m-d H:i:s');
                    $data['createdpc'] = current_pc();
                    $data['confirmedYN'] = 1;
                    $data['confirmedby'] = $this->common_data['current_userID'];
                    $data['confirmedDate'] = current_date();
                    $data['isHourly'] = 1;

                    $this->db->insert('srp_erp_leaveaccrualmaster', $data);
                    $last_id = $this->db->insert_id();
                } else {
                    $last_id = $accualmaster['leaveaccrualMasterID'];
                }
                $y = 0;
                foreach ($hourlyaccrual as $houracc) {


                    $detail[$y]['leaveaccrualMasterID'] = $last_id;
                    $detail[$y]['empID'] = $houracc['EIdNo'];
                    $detail[$y]['leaveGroupID'] = $houracc['leaveGroupID'];
                    $detail[$y]['leaveType'] = $houracc['leaveTypeID'];
                    $detail[$y]['hoursEntitled'] = $houracc['noOfHours'];
                    $detail[$y]['description'] = 'Hourly Accrual ' . $houracc['attendanceDate'];
                    $detail[$y]['createDate'] = $houracc['attendanceDate'];
                    $detail[$y]['createdUserGroup'] = current_user_group();
                    $detail[$y]['createdPCid'] = current_pc();
                    $detail[$y]['initalDate'] = $houracc['attendanceDate'];
                    $detail[$y]['manualYN'] = 0;
                    $y++;

                }
                $this->db->insert_batch('srp_erp_leaveaccrualdetail', $detail);

            }

        //}
        //if ($update) {
            if (!empty($leave_array)) {
                $this->db->insert_batch('srp_erp_leavemaster', $leave_array);
            }

            //echo json_encode(array('error' => 's', 'message' => 'Successfully approved', 'updatedIDs' => array_column($new_array, 'ID')));
        //} //else {
        //echo json_encode(array('error' => 'e', 'message' => 'Failed'));
        //}

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(array('error' => 'e', 'message' => 'Failed'));
        } else {
            $this->db->trans_commit();
            $msg = "Successfully approved'";
            $msg1 ="";
            if (!empty($failedRecords) ) {
                $msg1 = '<strong>Following Attendance are not approved.</strong><br/>';
                $msg1 .= implode('<br/>', $failedRecords);
                echo json_encode(array('error' => 's', 'message' => $msg,'message1' =>$msg1 ));

            }else{
                echo json_encode(array('error' => 's', 'message' => $msg ));

            }

        }
    }

    function approveAttendance($system_code, $level_id, $status, $comments,$presentTypeID,$attendanceApprovedID)
    {
        $companyID =  $this->common_data['company_data']['company_id'];
        $maxlevel = $this->maxlevel('ATT');
        $maxlevelNo = $maxlevel['levelNo'];

       $this->db->trans_start();


        $data = array(
            'approvedYN' => $status,
            'approvedEmpID' => current_userID(),
            'approvedComments' => $comments,
            'approvedDate' => $this->common_data['current_date'],
            'approvedPC' => $this->common_data['current_pc']
        );
        $this->db->where('empattendancereviewID', $system_code);
        $this->db->where('approvalLevelID', $level_id);
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->update('srp_erp_attendanceapproval', $data);

        $this->db->select('approvedYN');
        $this->db->from('srp_erp_attendanceapproval');
        $this->db->where('empattendancereviewID', $system_code);
        $this->db->where('companyID', $companyID);
        $this->db->order_by('approvalLevelID', 'DESC');
        $this->db->limit(1);
        $data= $this->db->get()->row_array();
      

       
        if ($data['approvedYN'] == 1) {
            
            $dataUpdate = array(
                'approvedYN' => '1',
                'approvedComment' => $comments,
                'presentTypeID' => $presentTypeID,
                'approvedDate' => $this->common_data['current_date'],
                'approvedBy' => $this->common_data['current_userID'],
            );

            $this->db->where('ID', $system_code);
            $this->db->update('srp_erp_pay_empattendancereview', $dataUpdate);

            // // // //update approve variable payments
            $data_variable = array();
            $data_variable['approvedYN'] = 1;
            $this->db->where('empattendancereviewID',$system_code)->update('srp_erp_pay_variable_empattendancereview',$data_variable);


            //update manufacturing job
            $this->db->where('ID', $system_code);
            $review = $this->db->from('srp_erp_pay_empattendancereview')->get()->row_array();


            $flowserve = getPolicyValues('MANFL', 'All');
            //FlowServe
            if($flowserve == 'FlowServe' || $flowserve == 'Micoda' || $flowserve == 'SOP' || $flowserve == 'GCC'){
                if($review){

                    $empID = $review['empID'];

                    $this->db->where('attendanceDate',$review['attendanceDate']);
                    $this->db->where('empID',$review['empID']);
                    $job_labour = $this->db->from('srp_erp_empmfqjobattendance')->get()->result_array();

    
                    foreach($job_labour as $key => $labour){
    
                        $minutes = ($labour['worked_minute']/60) * 100;
                       //$hour = round(  $minutes,2);
    
                        $hour = $labour['worked_hour'].'.'.round($minutes,0);
    
                        //update labour and mfq and overhead
                        $this->update_mfq_overhead_details($labour,$hour,$empID);
           
                    }
    
                }
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return 'e';
            } else {
                $this->db->trans_commit();
                return 1;
            }
        } else {
            /*update current level in master record*/
            $dataUpdate = array(
                'currentLevelNo' => $level_id + 1,
            );
            
            $this->db->where('ID', $system_code);
            $this->db->update('srp_erp_pay_empattendancereview', $dataUpdate);

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return 'e';
            } else {
                $this->db->trans_commit();
                return 2;
            }
        }

    }

    function update_mfq_overhead_details($labour,$hour,$empID){

        $workProcessID = $labour['jobID'];
        $labourTaskID = $labour['labourTaskID'];
        $companyID =  $this->common_data['company_data']['company_id'];

        $mfq_job_details = $this->db->where('workProcessID',$workProcessID)->from('srp_erp_mfq_job')->get()->row_array();

   
        if($mfq_job_details){

            $job_card_details =  $this->db->where('workProcessID',$workProcessID)->from('srp_erp_mfq_jobcardmaster')->get()->row_array();

            //update labour task
            $ex_labor_task = $this->db->where('workProcessID',$workProcessID)->where('labourTask',$labourTaskID)->from('srp_erp_mfq_jc_labourtask')->get()->row_array();
            
            $data = array();
            $data['usageHours'] = $ex_labor_task['usageHours'] + $hour;

            $response_labour = $this->add_usage_record($mfq_job_details,$job_card_details,$hour,$ex_labor_task['jcLabourTaskID'],$empID);

            $data['totalValue'] = ($response_labour['burdenRate'] * $hour) + $ex_labor_task['totalValue'];
            $data['hourlyRate'] = round($data['totalValue'] / $data['usageHours'],3);

            $this->db->where('workProcessID',$workProcessID)->where('labourTask',$labourTaskID)->update('srp_erp_mfq_jc_labourtask',$data);


            //calculating total overhead hours
            $calculated = null;

            if($calculated){

                $actual_labour_hours = $this->db->select('SUM(usageHours) as usageHours')->where('workProcessID',$workProcessID)->where('companyID',$companyID)->from('srp_erp_mfq_jc_labourtask')->get()->row('usageHours');

                $total_estimated_labour = $this->db->select('SUM(totalHours) as totalHours')->where('workProcessID',$workProcessID)->where('companyID',$companyID)->from('srp_erp_mfq_jc_labourtask')->get()->row('totalHours');
    
                //pull overheads according to the job
                $job_overheads =  $this->db->where('workProcessID',$workProcessID)->where('companyID',$companyID)->from('srp_erp_mfq_jc_overhead')->get()->result_array();
    
                foreach($job_overheads as $overheads){
    
                    $overhead_value = $overheads['hourlyRate'] *  $overheads['totalHours'];
    
                    $calcualtion_result =($overhead_value /  $total_estimated_labour) *  $actual_labour_hours;
    
                    $total_overhead = round($calcualtion_result,3);
    
                    $data = array();
                    $data['totalValue'] = $total_overhead;
    
                    $this->db->where('jcOverHeadID',$overheads['jcOverHeadID'])->update('srp_erp_mfq_jc_overhead',$data);
    
                }

            } else {

                $job_overheads =  $this->db->where('workProcessID',$workProcessID)->where('companyID',$companyID)->from('srp_erp_mfq_jc_overhead')->get()->result_array();

                foreach($job_overheads as $overheads){

                    $data = array();

                    $data['usageHours'] = $hour + $overheads['usageHours'];
                    $data['totalValue'] = $overheads['hourlyRate'] * $data['usageHours'];
                    $data['transactionAmount'] = $data['totalValue'] / $overheads['transactionExchangeRate'];
                    $data['companyLocalAmount'] = $data['totalValue'] / $overheads['companyLocalExchangeRate'];
                    $data['companyReportingAmount'] = $data['totalValue'] / $overheads['companyReportingExchangeRate'];

                    $this->db->where('jcOverHeadID',$overheads['jcOverHeadID'])->update('srp_erp_mfq_jc_overhead',$data);

                }

            }
           

            return True;

        }

    }

    function add_usage_record($mfq_job_details,$job_card_details,$hour,$detailID = null,$empID = null){

        $data = array();

        //check burden rate
        $burdenRate = 0;

        if($empID)
        {
            $burdenRate = $this->db->where('EIdNo',$empID)->from('srp_employeesdetails')->get()->row('burdenRate');
        }

        return array('burdenRate' => $burdenRate);


    }

    function attendancegetLeave()
    {
        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('attendanceDate');
        $companyID = current_companyID();

        $q = "SELECT isAllowminus,srp_erp_leavetype.leaveTypeID,srp_erp_leavetype.description FROM srp_employeesdetails LEFT JOIN `srp_erp_leavegroupdetails` ON srp_employeesdetails.leaveGroupID = srp_erp_leavegroupdetails.leaveGroupID INNER JOIN `srp_erp_leavetype`  on srp_erp_leavetype.leaveTypeID=srp_erp_leavegroupdetails.leaveTypeID WHERE EIdNo = {$empID} AND Erp_companyID={$companyID}";
        $drop = $this->db->query($q)->result_array();
        $select = "<select onchange='getleavebalance(this.value)' id='leaveTypeID' name='leaveTypeID' class='select2'>";
        if ($drop) {
            foreach ($drop as $value) {

                $select .= "<option data-isAllowminus='" . $value['isAllowminus'] . "' value='" . $value['leaveTypeID'] . "'>" . $value['description'] . "</option>";


            }
            $select .= "</select>";

            echo json_encode(array('error' => 0, 'message' => $select));
        } else {
            echo json_encode(array('error' => 1, 'message' => 'Leave group not assigned for this employee'));
        }

    }

    function greaterOrEqualZero()
    {

        $empMachineID = $this->input->post('empMachineID');

        if ($empMachineID > 0) {
            return true;
        } else {
            $this->form_validation->set_message('greaterOrEqualZero', 'Machine Id is not valid.');
            return false;
        }

    }

    /*Employee Type*/
    public function fetch_employee_types()
    {
        $this->datatables->select('EmpContractTypeID, Description, employeeType, period, typeID, is_open_contract, probation_period, 
            IFNULL((SELECT COUNT(EmployeeConType) FROM srp_employeesdetails WHERE EmployeeConType = t1.EmpContractTypeID GROUP BY EmpContractTypeID), 0 ) AS usageCount,
            IF(typeID=2, IF(is_open_contract=1, \'Yes\', \'No\'), \'\') AS isOpen, IF( typeID <> 4, probation_period, \'\' ) AS proPeriod')
            ->from('srp_empcontracttypes AS t1')
            ->join('srp_erp_systememployeetype AS t2', 't1.typeID=t2.employeeTypeID')
            ->add_column('periodStr', '<span class="pull-right">$1</span>', 'period')
            ->add_column('isOpen', '<div style="text-align: center">$1</div>', 'isOpen')
            ->add_column('probationStr', '<span class="pull-right">$1</span>', 'proPeriod')
            ->add_column('edit', '$1', 'action_employee_type(EmpContractTypeID, usageCount)')
            ->where('Erp_CompanyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function saveEmployeeType()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');
        $this->form_validation->set_rules('conType', 'Employee Type', 'required');
        $conType = $this->input->post('conType');
        $is_open_contract = $this->input->post('is_open_contract');

        if (($conType == 2 && $is_open_contract == 0) or $conType == 3) { //Contract, Probation
            $this->form_validation->set_rules('probation_period', 'Probation Period', 'required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveEmployeeType());
        }
    }

    public function deleteEmployeeTypeMaster()
    {
        $this->form_validation->set_rules('hidden-id', 'Employee Detail ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteEmployeeTypeMaster());
        }
    }

    public function editEmployeeTypeMaster()
    {
        $this->form_validation->set_rules('description', 'Description', 'required');
        $this->form_validation->set_rules('hidden-id', 'Employee Type ID', 'required');
        $conType = $this->input->post('typeID_hidden');
        $is_open_contract = $this->input->post('is_open_contract');

        if (($conType == 2 && $is_open_contract == 0) or $conType == 3) { //Contract, Probation
            $this->form_validation->set_rules('probation_period', 'Probation Period', 'required');
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->editEmployeeTypeMaster());
        }
    }

    function leaveTypebyleaveGroup()
    {
        $leavegroupID = $this->input->post('leavegroupID');

        $leaveTypes = $this->db->query("SELECT srp_erp_leavetype.leaveTypeID,srp_erp_leavetype.description FROM srp_erp_leavegroupdetails LEFT JOIN srp_erp_leavetype on srp_erp_leavetype.leaveTypeID=srp_erp_leavegroupdetails.leaveTypeID WHERE leaveGroupID = {$leavegroupID}")->result_array();

        $html = "<select name='leaveType' class='form-control frm_input' id='leaveType'>";
        $html .= "<option value=''>Select a Type</option>";
        if ($leaveTypes) {
            foreach ($leaveTypes as $leave) {
                $html .= '<option value="' . $leave['leaveTypeID'] . '">' . $leave['description'] . '</option>';
            }
        }
        $html .= '</select>';

        echo $html;

    }

    function delete_leaveGroup()
    {
        $id = $this->input->post('leaveGroupID');
        $companyID = current_companyID();
        $this->db->delete('srp_erp_leavegroup', array('companyID' => $companyID, 'leaveGroupID' => $id));
        $this->db->delete('srp_erp_leavegroupdetails', array('leaveGroupID' => $id));
        echo json_encode(TRUE);
    }

    function deleteLeavedeltails()
    {
        $id = $this->input->post('leaveGroupDetailID');
        $companyID = current_companyID();

        $this->db->delete('srp_erp_leavegroupdetails', array('leaveGroupDetailID' => $id));
        echo json_encode(TRUE);
    }

    public function discharge_update()
    {
        $this->form_validation->set_rules('updateID', 'Employee Detail ID', 'required');
        $this->form_validation->set_rules('isDischarged', 'Is Discharged', 'required');
        $this->form_validation->set_rules('dischargedDate', 'Discharged Date', 'required');
        $this->form_validation->set_rules('lastWorkingDate', 'Last Working Date', 'required');

        $updateID = $this->input->post('updateID');
        $isDischarged = $this->db->query("SELECT isDischarged FROM srp_employeesdetails WHERE EIdNo = '$updateID'")->row('isDischarged');
        if ($isDischarged) {
            exit(json_encode(array('e', "<p>Employee is Discharged. You cannot edit.</p>")));
        }

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->discharge_update());
        }
    }

    public function save_leave_annualAccrual()
    {
        $this->Employee_model->save_leave_annualAccrual();
    }

    public function update_leave_annualAccrual()
    {
        $description = $this->input->post('description');
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();

        $leaveData = $this->db->query("SELECT confirmedYN, leaveMasterID FROM srp_erp_leaveaccrualmaster
                                       WHERE leaveaccrualMasterID={$masterID} AND companyID={$companyID}")->row_array();

        if ($leaveData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        if (!empty($leaveData['leaveMasterID'])) {
            die(json_encode(['e', 'This document is generated from holiday calendar,<br/>You can not update this document.']));
        }

        $updateData = [
            'leaveaccrualMasterID' => $masterID,
            'companyID' => $companyID
        ];

        $this->db->trans_start();

        $this->db->where($updateData)->update('srp_erp_leaveaccrualmaster', ['description' => $description]);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Updated successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function delete_accrual()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('id');

        $leaveData = $this->db->query("SELECT confirmedYN, leaveMasterID FROM srp_erp_leaveaccrualmaster
                                       WHERE leaveaccrualMasterID={$masterID} AND companyID={$companyID}")->row_array();

        if ($leaveData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed.']));
        }

        if (!empty($leaveData['leaveMasterID'])) {
            die(json_encode(['e', 'This document is generated from holiday calendar,<br/>You can not delete this document.']));
        }

        $where = [
            'leaveaccrualMasterID' => $masterID,
            'companyID' => $companyID
        ];

        $this->db->trans_start();

        $this->db->where($where)->delete('srp_erp_leaveaccrualmaster');
        $this->db->where(['leaveaccrualMasterID' => $masterID])->delete('srp_erp_leaveaccrualdetail');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }

    }

    public function leaveannualaccrualMaster()
    {
        $this->datatables->select("leaveaccrualMasterID,leaveaccrualMasterCode,srp_erp_leaveaccrualmaster.description,concat(year,' - ',MONTHNAME(STR_TO_DATE(month, '%m'))) as month,srp_erp_leavegroup.Description as leaveGroup, confirmedYN", false)
            ->from("srp_erp_leaveaccrualmaster")
            ->join("srp_erp_leavegroup", "srp_erp_leaveaccrualmaster.leaveGroupID = srp_erp_leavegroup.leaveGroupID", "left")
            ->where("manualYN", 0)
            ->where("srp_erp_leaveaccrualmaster.policyMasterID", 1)
            ->where("srp_erp_leaveaccrualmaster.companyID", current_companyID())
            ->add_column("edit", "$1", "AnnualaccrualAction(leaveaccrualMasterID, confirmedYN)");
        echo $this->datatables->generate();


    }

    function generateCalender()
    {

        $companyID = current_companyID();
        $year = $this->input->post('year');
        $existYear = $this->db->query("select GROUP_CONCAT(year) as year,MAX(year)+1 as nextyear,MIN(year) as minYear from (SELECT year FROM `srp_erp_calender` WHERE `companyID` = $companyID GROUP BY year )t")->row_array();

        if (!empty($existYear) && $existYear['nextyear'] != '') {
            $prevYear = $year - 1;
            if ($existYear['nextyear'] != $year) {
                exit(json_encode(array('error' => 1, 'message' => "You can only able to create calender for  " . $existYear['nextyear'] . " ")));
            }

        }
        $nextyear = $year + 1;
        $startDay = $year . '-01-01';
        $endDay = $nextyear . '-01-01';

        $Sunday = $Monday = $Tuesday = $Wednesday = $Thursday = $Friday = $Saturday = 0;
        $daysWeek = array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
        foreach ($daysWeek as $day) {
            ${"$day"} = ($this->input->post($day) != '' ? $this->input->post($day) : 0);
        }

        // Do not touch variable defined dynamically - shahmee
        $this->db->query("call generateCalender('{$startDay}','{$endDay}',{$companyID},$Sunday,$Monday,$Tuesday,$Wednesday,$Thursday,$Friday,$Saturday)");

        exit(json_encode(array('error' => 0, 'message' => "Successfully calender created for - {$year} ")));

    }

    function refresh_policy()
    {
        $masterID = $this->input->post('masterID');
        $result = $this->db->query("select isMonthly from `srp_erp_leavegroup` WHERE leaveGroupID={$masterID} ")->row_array();
        echo form_dropdown('leaveTypeID', leavemaster_dropdown($result['isMonthly']), '', 'class="form-control select2" id="leaveTypeID" required');

    }

    function getDatesFromRange($start, $end, $format = 'Y-m-d')
    {
        $array = array();
        $interval = new DateInterval('P1D');

        $realEnd = new DateTime($end);
        $realEnd->add($interval);

        $period = new DatePeriod(new DateTime($start), $interval, $realEnd);

        foreach ($period as $date) {
            $array[] = $date->format($format);
        }

        return $array;
    }

    function employee_leave_page()
    {
        $empID = $this->input->post('empID');
        $policyMasterID = $this->input->post('policyMasterID');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $applicationType = $this->input->post('applicationType');
        $leaveMaster = $this->input->post('leaveMaster');

        if($leaveMaster){
            $leaveDetais = $this->db->where('leaveMasterID',$leaveMaster)->from('srp_erp_leavemaster')->get()->row_array();
            if($leaveDetais){
                $leaveGroupID = $leaveDetais['leaveGroupID'];
            }
        }

        if(empty($policyMasterID)){
            $policyMasterID = 1;
        }


        $data['applicationType'] = $applicationType;
        $data['policyMasterID'] = $policyMasterID;
        $data['leaveGroupID'] = $leaveGroupID;
        $data['empID'] = $empID;
        $data['showYN'] = $this->input->post('showYN');
        $data['leaveTypeID'] = $this->input->post('leaveTypeID');
        $lvtypid = $this->input->post('leaveTypeID');
        $result = '';
        if (!empty($lvtypid)) {
            $result = $this->db->query("select isShortLeave from `srp_erp_leavetype` WHERE leaveTypeID={$lvtypid} ")->row_array();
        }

        $isShortLeave = 0;
        if (!empty($result)) {
            if ($result['isShortLeave'] == 1) {
                $isShortLeave = 1;
            } else {
                $isShortLeave = 0;
            }
        }

        $data['shortLV'] = $isShortLeave;

        if ($policyMasterID == 2) {
            echo $this->load->view('system/hrm/ajax/employee_leave_page_hour_form', $data, true);
        } else {
            echo $this->load->view('system/hrm/ajax/employee_leave_page_form', $data, true);
        }


    }

    function leaveEmployeeCalculation()
    {
        $policyMasterID = $this->input->post('policyMasterID');
        $companyID = current_companyID();
        $leaveTypeID = $this->input->post('leaveTypeID');
        $halfDay = $this->input->post('halfDay');
        $shortLV = $this->input->post('shortLV');
        $startDate = $this->input->post('startDate');
        $endDate = $this->input->post('endDate');
        $isAllowminus = $this->input->post('isAllowminus');
        $isCalenderDays = $this->input->post('isCalenderDays');
        $isCalenderDays = ($isCalenderDays == '' ? 0 : (int)$isCalenderDays);
        $entitleSpan = (int)$this->input->post('entitleSpan');
        $empName = $this->input->post('empName');
        $entitleSpan = ($entitleSpan == '' ? 0 : $entitleSpan);
        /*date diff*/
        $leaveGroupID = null;
        $maxConsecetiveDays = null;


        $employee_rec = $this->db->where('EIdNo',$empName)->from('srp_employeesdetails')->get()->row_array();

        if($employee_rec){

            $leaveGroupID = $employee_rec['leaveGroupID'];

            $leaveGroup_detail = $this->db->where('leaveGroupID',$leaveGroupID)->where('leaveTypeID',$leaveTypeID)->from('srp_erp_leavegroupdetails')->get()->row_array();

            $maxConsecetiveDays = (int)$leaveGroup_detail['maxConsecetiveDays'];

        }

        if ($policyMasterID != 2) {

            $date1 = new DateTime("$startDate");
            $date2 = new DateTime("$endDate");
            $diff = $date2->diff($date1)->format("%a");
            $dateDiff = (int)$diff + 1;
            $dateDiff2 = $diff + 1;
            $calenderDays['workingDays'] = 0;
            $datetime1 = date('Y-m-d', strtotime($startDate));
            $datetime2 = date('Y-m-d', strtotime($endDate));
            if ($datetime1 > $datetime2) {
                echo json_encode(array('error' => 1, 'message' => 'Please check start and end date.'));
                exit;
            }

            if ($isCalenderDays != 1) {
                $sd = explode('-', $startDate);
                $sYear = $sd[0];
                $sMonth = $sd[1];

                $ed = explode('-', $endDate);
                $eYear = $ed[0];
                $eMonth = $ed[1];

                $calendervalidate = $this->db->query("SELECT sum(IF(monthnumber = {$sMonth} && year={$sYear}, 1, 0)) as startDate ,  sum(IF(monthnumber = {$eMonth} && year={$eYear}, 1, 0)) as endDate FROM `srp_erp_calender` WHERE monthnumber AND year AND companyID={$companyID}")->row_array();


                if ($calendervalidate['startDate'] == 0 || $calendervalidate['endDate'] == 0) {
                    echo json_encode(array('error' => 1, 'message' => 'Calender not configured for selected date.'));
                    exit;
                }

                $calenderDays = $this->db->query("SELECT SUM(IF(DATE(fulldate) IS NOT NULL, 1, 0)) AS nonworkingDays, 
                                        SUM(IF(DATE(fulldate) IS NOT NULL, 1, 0)) - SUM(IF(weekend_flag = 1 || holiday_flag = 1, 1, 0)) AS workingDays 
                                        FROM srp_erp_calender WHERE DATE(fulldate) BETWEEN DATE('{$startDate}') AND DATE('{$endDate}') AND companyID = {$companyID}")->row_array();

                if ($calenderDays['workingDays'] != null) {
                    /*    $calenderDays['workingDays']=  ($calenderDays['workingDays'] == null ? 0:$calenderDays['workingDays']);*/
                    /* if ($calenderDays['workingDays'] == null) {
                         echo json_encode(array('error' => 1, 'message' => 'Calender is not set for this company'));
                         exit;
                     }
                     }*/
                    $dateDiff = (int)$calenderDays['workingDays'];
                }
            }

            if ($halfDay == 1) {//|| $shortLV==1
                $dateDiff = $dateDiff2 = $calenderDays['workingDays'] = 0.5; /*half day*/
            }

            $leaveBlance = $entitleSpan - $dateDiff;
            if ($isAllowminus != 1) {
                if ($leaveBlance < 0) {
                    echo json_encode(array('error' => 3, 'message' => 'The maximum leave accumulation is  ' . "$entitleSpan" . ' days'));
                    exit;
                }
            }
       
            if($maxConsecetiveDays && ($dateDiff > $maxConsecetiveDays)){
                echo json_encode(array('error' => 3, 'message' => 'The maximum consecutive leave entitled is  ' . "$maxConsecetiveDays" . ' days, for this leave type'));
                exit;
            }

            echo json_encode(array('error' => 0, 'appliedLeave' => $dateDiff2, 'leaveBlance' => $leaveBlance, 'calenderYN' => $isCalenderDays, 'workingDays' => $calenderDays['workingDays']));
            exit;
        } else {
            $datetime1 = date('Y-m-d H:i:s', strtotime($startDate));
            $datetime2 = date('Y-m-d H:i:s', strtotime($endDate));
            if ($datetime1 < $datetime2) {
                $dteStart = new DateTime($startDate);
                $dteEnd = new DateTime($endDate);

                $dteDiff = $dteStart->diff($dteEnd);
                $hour = $dteDiff->format("%H");
                $minutes = $dteDiff->format('%I');
                $day = $dteDiff->format('%d');
                $totalMinutes = ($day * 1440) + ($hour * 60) + $minutes;
            } else {
                echo json_encode(array('error' => 1, 'message' => 'Please check the start date and end date'));
                exit;
            }
            $balance = $entitleSpan - $totalMinutes;

            if ($isAllowminus != 1) {
                if ($balance < 0) {

                    $hours = floor($entitleSpan / 60);
                    $min = $entitleSpan - ($hours * 60);

                    $entitle = $hours . "h:" . $min . "m";
                    echo json_encode(array('error' => 3, 'message' => 'The maximum leave accumulation is  ' . "$entitle" . ' '));
                    exit;
                }
            }

         
            if($maxConsecetiveDays && ($totalMinutes > ($maxConsecetiveDays*60))){
                echo json_encode(array('error' => 3, 'message' => 'The maximum leave accumulation is  ' . "$maxConsecetiveDays" . ' days, for this leave type'));
                exit;
            }


            echo json_encode(array('error' => 0, 'appliedLeave' => $totalMinutes, 'leaveBlance' => $balance));

        }


    }


    public function save_employeesLeave()
    {
        $leaveGroupID = $this->input->post('leaveGroupID');
        $this->form_validation->set_rules('empName', 'Employee ID', 'trim|required|numeric');
        $this->form_validation->set_rules('leaveTypeID', 'Leave Type', 'trim|required|numeric');
        $this->form_validation->set_rules('startDate', 'Start Date', 'trim|required');
        $this->form_validation->set_rules('endDate', 'End Date', 'trim|required');
        // $this->form_validation->set_rules('entitleSpan', 'Leave Entitled', 'trim|required|numeric');
        /* $this->form_validation->set_rules('appliedLeave', 'Leave Applied', 'trim|required|numeric');
         $this->form_validation->set_rules('leaveBlance', 'Leave Balance', 'trim|required|numeric');*/

        $leaveTypeID = $this->input->post('leaveTypeID');
        $companyID = current_companyID();
        $Language = getPolicyValues('LNG', 'All');

        $leaveDetails = $this->db->query("SELECT * FROM srp_erp_leavetype WHERE leaveTypeID={$leaveTypeID} AND companyID = {$companyID}")->row_array();

        if($Language == 'NOV'){
            if($leaveDetails['isAnnualLeave'] == 1 ){
                $this->form_validation->set_rules('annualComment', 'Contact Details Comment', 'trim|required');
            }
    
            if($leaveDetails['reasonApplicableYN'] == 1){
                $this->form_validation->set_rules('leaveReasonText', 'Reason Comment', 'trim|required');
            }
        }
       
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $empID = $this->input->post('empName');
            $leaveTypeID = $this->input->post('leaveTypeID');
            $applicationType = $this->input->post('applicationType');
            $canApplyMultiple = getPolicyValues('LP', 'All');

            /*leave adjustment status for last leave group change of this employee */
            $adjustmentStatus = $this->db->query("SELECT adjustmentDone FROM srp_erp_leavegroupchangehistory WHERE empID={$empID} ORDER BY id DESC LIMIT 1")->row('adjustmentDone');
            if ($adjustmentStatus == 0) {
                die(json_encode(['e', 'Leave adjustment process was not processed for previous leave group change.<br/>
                                       Please process the leave adjustment and try again.']));
            }

            if ($applicationType == 1 AND $canApplyMultiple == 0) {
                $leaveExist = $this->db->query("select * from srp_erp_leavemaster WHERE (approvedYN is null OR approvedYN=0)
                                                AND empID={$empID} AND applicationType=1 AND leaveTypeID={$leaveTypeID}")->row_array();
                if (!empty($leaveExist)) {
                    die(json_encode(array('e', 'Employee has pending leave application in process.')));
                }
            }

            if ($applicationType == 2) {
                $isPlanApplicable = $this->db->query("SELECT isPlanApplicable FROM srp_erp_leavetype
                                                  WHERE leaveTypeID={$leaveTypeID}")->row('isPlanApplicable');

                if ($isPlanApplicable != 1) {
                    die(json_encode(array('e', 'This leave type is not applicable for leave plan')));
                }
            }

            if ($this->input->post('appliedLeave') >= 0 && $this->input->post('appliedLeave') != '') {
                /* echo json_encode($this->Employee_model->update_employeesLeave());*/
            } else {
                die(json_encode(array('e', 'Please check the start date and end date')));
            }

            /***Validate is there is a leave falling in this date range ***/
            $companyID = current_companyID();
            $startDate = $this->input->post('startDate');
            $endDate = $this->input->post('endDate');
            $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, IF(applicationType=1, 'leave application', 'leave plan') AS appType
                                          FROM srp_erp_leavemaster
                                          WHERE companyID={$companyID} AND empID={$empID} AND (cancelledYN = 0 OR cancelledYN is null)
                                          AND (
                                              ( ( '{$startDate}' BETWEEN startDate AND endDate ) OR ( '{$endDate}' BETWEEN startDate AND endDate ) )
                                              OR
                                              ( ( startDate BETWEEN '{$startDate}' AND '{$endDate}' ) OR ( endDate BETWEEN '{$startDate}' AND '{$endDate}' ) )
                                          )")->row_array();

            if (!empty($leaveApp)) {
                die(json_encode(array('e', 'There is a ' . $leaveApp['appType'] . ' [' . $leaveApp['documentCode'] . '] already exist in this date range ')));
            }

            //Validate this employee assigned for a leave covering on this leave date
            $coveringValidated = $this->input->post('coveringValidated');
            $leaveCovering = $this->db->query("SELECT lm.leaveMasterID, lm.documentCode, 
                                               IF(lm.applicationType=1, 'leave application', 'leave plan') AS appType, lce.coveringID AS coveringEmpID
                                               FROM srp_erp_leavemaster lm
                                               JOIN srp_erp_leave_covering_employee lce ON lm.leaveMasterID = lce.leaveapplicationID
                                               WHERE  lm.companyID = {$companyID} 
                                               AND lce.coveringID = {$empID} 
                                               AND (lm.cancelledYN = 0 OR lm.cancelledYN IS NULL)
                                               AND (
                                                        ( '{$startDate}' BETWEEN lm.startDate AND lm.endDate ) OR 
                                                        ( '{$endDate}' BETWEEN lm.startDate AND lm.endDate ) OR
                                                        ( lm.startDate BETWEEN '{$startDate}' AND '{$endDate}' ) OR 
                                                        ( lm.endDate BETWEEN '{$startDate}' AND '{$endDate}' )
                                                )")->row_array();

            if (!empty($leaveCovering) && $coveringValidated == 0) {
                $msg = 'You have assigned as covering employee for leave application [' . $leaveCovering['documentCode'] . ']';
                $resData = [
                    'covering' => '1',
                    'requestType' => 'save',
                    'isConfirmed' => $this->input->post('isConfirmed')
                ];
                die(json_encode(array('w', $msg, $resData)));
            }

            $coveringEmpID = $this->input->post('coveringEmpID[]');
            if ($this->input->post('isConfirmed') == 1) {
                //Check covering employee is in approval setup

                $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

                if($leaveApprovalWithGroup==1){
                    $isCovering_with_policy = $this->db->query("SELECT approvalType FROM srp_erp_leaveapprovalsetup WHERE companyID={$companyID} AND leaveGroupID ={$leaveGroupID} AND approvalType=4")->row_array();

                    if($isCovering_with_policy){
                        $leave_master = $this->db->query("SELECT * FROM srp_erp_leavemaster WHERE companyID={$companyID} AND leaveGroupID ={$leaveGroupID}")->row_array();

                        if($leave_master){

                            if(count($coveringEmpID)>0){

                            }else{
                                die(json_encode(array('e', 'Covering employee is required')));
                            }
                        }
                        
                    }
                }else{
                    $isCovering_with_policy = $this->db->query("SELECT approvalType FROM srp_erp_leaveapprovalsetup WHERE companyID={$companyID} AND approvalType=4")->row_array();

                    if($isCovering_with_policy){
                        $leave_master = $this->db->query("SELECT * FROM srp_erp_leavemaster WHERE companyID={$companyID}")->row_array();

                        if($leave_master){

                            if(count($coveringEmpID)>0){

                            }else{
                                die(json_encode(array('e', 'Covering employee is required')));
                            }
                        }
                        
                    }
                }
            }

            $coveringAvailabilityValidated = $this->input->post('coveringAvailabilityValidated');

            //Validate covering employee leave get clash with this leave date
            if (!empty($coveringEmpID) && $coveringAvailabilityValidated == 0) {
                // Convert the array to a comma-separated string
                $empIDs = implode(',', $coveringEmpID);
            
                $leaveCoveringAvailability = $this->db->query("SELECT leaveMasterID, documentCode, IF(applicationType=1, 'leave application', 'leave plan') AS appType
                              FROM srp_erp_leavemaster
                              WHERE companyID={$companyID} AND empID IN ({$empIDs}) AND (cancelledYN=0 OR cancelledYN IS NULL )
                              AND (
                                  ( ( '{$startDate}' BETWEEN startDate AND endDate ) OR ( '{$endDate}' BETWEEN startDate AND endDate ) )
                                    OR
                                  ( ( startDate BETWEEN '{$startDate}' AND '{$endDate}' ) OR ( endDate BETWEEN '{$startDate}' AND '{$endDate}' ) )
                              )")->row_array();
            

                if (!empty($leaveCoveringAvailability)) {
                    $msg = 'Covering employee not available in this date range.<br/>' . $leaveCoveringAvailability['appType'] . ' [' . $leaveCoveringAvailability['documentCode'] . '] ';
                    $resData = [
                        'covering' => '2',
                        'requestType' => 'save',
                        'isConfirmed' => $this->input->post('isConfirmed')
                    ];
                    die(json_encode(array('w', $msg, $resData)));
                }
            }


            // if approval level set HoD then check primary department is configured befor confirmation


            $isApproveLevelInHOD= $this->db->query("SELECT srp_erp_leaveapprovalsetup.* FROM srp_erp_leaveapprovalsetup 
                                    JOIN srp_erp_leavesetupsystemapprovaltypes AS empTB ON empTB.id = srp_erp_leaveapprovalsetup.approvalType 
                                    WHERE companyID={$companyID} AND empTB.desCode='HOD'")->result_array();


            $isPrimaryDepartment= $this->db->query("SELECT * FROM srp_empdepartments WHERE EmpID={$empID} AND Erp_companyID={$companyID} AND isPrimary=1")->row_array();

            if(count($isApproveLevelInHOD)>0 && empty($isPrimaryDepartment)){
                die(json_encode(array('e', 'Primary department is not configured.you cant confirm this leave.')));
            }

            /* $endDate = $this->input->post('endDate');
             $isPayrollProcessed = isPayrollProcessed($endDate);*/
            echo json_encode($this->Employee_model->save_employeesLeave());
            exit;
            /*     if ($isPayrollProcessed['status'] == 'N') {


                 } else {
                     $greaterThanDate = date('Y - F', strtotime($isPayrollProcessed['year'] . '-' . $isPayrollProcessed['month'] . '-01'));
                     echo json_encode(array('e', 'Leave date should be  <p> greater than [ ' . $greaterThanDate . ' ] '));
                 }
                 exit;*/
        }
    }


    public function update_employeesLeave()
    {
        $leaveGroupID = $this->input->post('leaveGroupID');
        $this->form_validation->set_rules('leaveMasterID', 'leave Master ID', 'trim|required|numeric');
        $this->form_validation->set_rules('leaveTypeID', 'Leave Type', 'trim|required|numeric');
        $this->form_validation->set_rules('startDate', 'Start Date', 'trim|required|date');
        $this->form_validation->set_rules('endDate', 'End Date', 'trim|required|date');
        $this->form_validation->set_rules('empName', 'Employee ID', 'trim|required|numeric');
        /* $this->form_validation->set_rules('appliedLeave', 'Leave Applied', 'trim|required|numeric');
         $this->form_validation->set_rules('leaveBlance', 'Balance', 'trim|required|numeric');*/

        $leaveTypeID = $this->input->post('leaveTypeID');
        $companyID = current_companyID();
        $annualLeave =  getPolicyValues('ALCD', 'All');

        $leaveDetails = $this->db->query("SELECT * FROM srp_erp_leavetype WHERE leaveTypeID={$leaveTypeID} AND companyID = {$companyID}")->row_array();

        if($annualLeave == 1){
            if($leaveDetails['isAnnualLeave'] == 1){
                $this->form_validation->set_rules('annualComment', 'Contact Details Comment', 'trim|required');
            }
    
            if($leaveDetails['reasonApplicableYN'] == 1){
                $this->form_validation->set_rules('leaveReasonText', 'Reason Comment', 'trim|required');
            }
    
        }
     
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $empID = $this->input->post('empName');
            $leaveMasterID = $this->input->post('leaveMasterID');

            /*leave adjustment status for last leave group change of this employee */
            $adjustmentStatus = $this->db->query("SELECT adjustmentDone FROM srp_erp_leavegroupchangehistory WHERE empID={$empID} ORDER BY id DESC LIMIT 1")->row('adjustmentDone');
            if ($adjustmentStatus == 0) {
                die(json_encode(['e', 'Leave adjustment process was not processed for previous leave group change.<br/>
                                       Please process the leave adjustment and try again.']));
            }

            $leaveDet = $this->Employee_model->employeeLeave_details($leaveMasterID);


            if ($leaveDet['approvedYN'] == 1) {
                die(json_encode(['e', 'This document already approved. You can not make changes on this.']));
            }

            if ($leaveDet['confirmedYN'] == 1) {
                die(json_encode(['e', 'This document already confirmed. You can not make changes on this.']));
            }

            $leaveTypeID = $this->input->post('leaveTypeID');
            $applicationType = $this->input->post('applicationType');
            $canApplyMultiple = getPolicyValues('LP', 'All');

            if ($applicationType == 1 AND $canApplyMultiple == 0) {
                $leaveExist = $this->db->query("select leaveMasterID from srp_erp_leavemaster WHERE (approvedYN is null OR approvedYN=0)
                                                AND empID={$empID} AND applicationType=1 AND leaveTypeID={$leaveTypeID}")->row('leaveMasterID');
                if (!empty($leaveExist) && $leaveExist != $leaveMasterID) {
                    echo json_encode(array('e', 'Employee has pending leave application in process.'));
                    exit;
                }
            }

            if ($applicationType == 2) {
                $isPlanApplicable = $this->db->query("SELECT isPlanApplicable FROM srp_erp_leavetype
                                                  WHERE leaveTypeID={$leaveTypeID}")->row('isPlanApplicable');

                if ($isPlanApplicable != 1) {
                    die(json_encode(array('e', 'This leave type is not applicable for leave plan')));
                }
            }

            /***Validate is there is a leave falling in this date range ***/

            $startDate = $this->input->post('startDate');
            $endDate = $this->input->post('endDate');
            $leaveApp = $this->db->query("SELECT leaveMasterID, documentCode, IF(applicationType=1, 'leave application', 'leave plan') AS appType
                                          FROM srp_erp_leavemaster
                                          WHERE companyID={$companyID} AND empID={$empID} AND (cancelledYN=0 OR cancelledYN IS NULL )
                                          AND (
                                              ( ( '{$startDate}' BETWEEN startDate AND endDate ) OR ( '{$endDate}' BETWEEN startDate AND endDate ) )
                                                OR
                                              ( ( startDate BETWEEN '{$startDate}' AND '{$endDate}' ) OR ( endDate BETWEEN '{$startDate}' AND '{$endDate}' ) )
                                          )")->row_array();

            if (!empty($leaveApp) && $leaveApp['leaveMasterID'] != $leaveMasterID) {
                die(json_encode(array('e', 'There is a ' . $leaveApp['appType'] . ' [' . $leaveApp['documentCode'] . '] already exist in this date range ')));
            }

            //Validate this employee assigned for a leave covering on this leave date
            $coveringValidated = $this->input->post('coveringValidated');
            $leaveCovering = $this->db->query("SELECT lm.leaveMasterID,lc.coveringID AS coveringEmpID,lm.documentCode,
                                               IF(lm.applicationType = 1, 'leave application', 'leave plan') AS appType
                                               FROM srp_erp_leavemaster lm
                                               LEFT JOIN srp_erp_leave_covering_employee lc ON lm.leaveMasterID = lc.leaveapplicationID
                                               WHERE lm.companyID = {$companyID} 
                                               AND lc.coveringID = {$empID} 
                                               AND (lm.cancelledYN = 0 OR lm.cancelledYN IS NULL)
                                               AND  (
                                                    ( 
                                                    ('{$startDate}' BETWEEN lm.startDate AND lm.endDate) 
                                                OR 
                                                    ('{$endDate}' BETWEEN lm.startDate AND lm.endDate)
                                                    )
                                                OR
                                                    ( 
                                                    (lm.startDate BETWEEN '{$startDate}' AND '{$endDate}') 
                                                OR 
                                                    (lm.endDate BETWEEN '{$startDate}' AND '{$endDate}')
                                                    )
                                                )")->row_array();
            // print_r($this->db->last_query()); exit;

            if (!empty($leaveCovering) && $coveringValidated == 0) {
                $msg = 'You have assigned as covering employee for leave application [' . $leaveCovering['documentCode'] . ']';
                $resData = [
                    'covering' => '1',
                    'requestType' => 'update',
                    'isConfirmed' => $this->input->post('isConfirmed')
                ];
                die(json_encode(array('w', $msg, $resData)));
            }


            $coveringEmpID = $this->input->post('coveringEmpID');

            if ($this->input->post('isConfirmed') == 1) {
                //Check covering employee is in approval setup
                $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

                if($leaveApprovalWithGroup==1){
                    $isCovering_with_policy = $this->db->query("SELECT approvalType FROM srp_erp_leaveapprovalsetup WHERE companyID={$companyID} AND leaveGroupID ={$leaveGroupID} AND approvalType=4")->row_array();

                    if($isCovering_with_policy){
                        $leave_master = $this->db->query("SELECT * FROM srp_erp_leavemaster WHERE companyID={$companyID} AND leaveGroupID ={$leaveGroupID}")->row_array();

                        if($leave_master){

                            if(count($coveringEmpID)>0){

                            }else{
                                die(json_encode(array('e', 'Covering employee is required')));
                            }
                        }
                        
                    }
                }else{
                    $isCovering_with_policy = $this->db->query("SELECT approvalType FROM srp_erp_leaveapprovalsetup WHERE companyID={$companyID} AND approvalType=4")->row_array();

                    if($isCovering_with_policy){
                        $leave_master = $this->db->query("SELECT * FROM srp_erp_leavemaster WHERE companyID={$companyID}")->row_array();

                        if($leave_master){

                            if(count($coveringEmpID)>0){

                            }else{
                                die(json_encode(array('e', 'Covering employee is required')));
                            }
                        }
                        
                    }
                }

            }


            $coveringAvailabilityValidated = $this->input->post('coveringAvailabilityValidated');

            // Validate covering employee leave get clash with this leave date
            if (!empty($coveringEmpID) && $coveringAvailabilityValidated == 0) {
                // Ensure $coveringEmpID is a valid string value
                $coveringEmpID = $this->db->escape($coveringEmpID); // Escape to prevent SQL injection
            
                // Convert $coveringEmpID to a string (remove array elements if any)
                $coveringEmpID = is_array($coveringEmpID) ? reset($coveringEmpID) : $coveringEmpID;
            
                $leaveCoveringAvailability = $this->db->query("SELECT leaveMasterID, documentCode, IF(applicationType=1, 'leave application', 'leave plan') AS appType
                                                  FROM srp_erp_leavemaster
                                                  WHERE companyID={$companyID} AND empID={$coveringEmpID} AND (cancelledYN=0 OR cancelledYN IS NULL )
                                                  AND (
                                                      ( ( '{$startDate}' BETWEEN startDate AND endDate ) OR ( '{$endDate}' BETWEEN startDate AND endDate ) )
                                                        OR
                                                      ( ( startDate BETWEEN '{$startDate}' AND '{$endDate}' ) OR ( endDate BETWEEN '{$startDate}' AND '{$endDate}' ) )
                                                  )")->row_array();
            
    
                if (!empty($leaveCoveringAvailability)) {
                    $msg = 'Covering employee not available in this date range.<br/>' . $leaveCoveringAvailability['appType'] . ' [' . $leaveCoveringAvailability['documentCode'] . '] ';
                    $resData = [
                        'covering' => '2',
                        'requestType' => 'update',
                        'isConfirmed' => $this->input->post('isConfirmed')
                    ];
                    die(json_encode(array('w', $msg, $resData)));
                }
            }

            $isApproveLevelInHOD= $this->db->query("SELECT srp_erp_leaveapprovalsetup.* FROM srp_erp_leaveapprovalsetup 
                                    JOIN srp_erp_leavesetupsystemapprovaltypes AS empTB ON empTB.id = srp_erp_leaveapprovalsetup.approvalType 
                                    WHERE companyID={$companyID} AND empTB.desCode='HOD'")->result_array();


            $isPrimaryDepartment= $this->db->query("SELECT * FROM srp_empdepartments WHERE EmpID={$empID} AND Erp_companyID={$companyID} AND isPrimary=1")->row_array();

            if(count($isApproveLevelInHOD)>0 && empty($isPrimaryDepartment)){
                die(json_encode(array('e', 'Primary department is not configured.you cant confirm this leave.')));
            }

            // update leave group id
            $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

            if($leaveApprovalWithGroup == 1){

                $leaveApproval = $this->db->query("SELECT empTB.leaveGroupID
                    FROM srp_employeesdetails AS empTB
                    INNER JOIN srp_erp_leaveapprovalsetup as setup ON empTB.leaveGroupID = setup.leaveGroupID
                    WHERE EIdNo ={$empID} AND companyID={$companyID}")->row_array();

                if(empty($leaveApproval)){
                    die(json_encode(array('e', 'Leave Group based approval not been set.')));
                }
            }


            if ($this->input->post('appliedLeave') >= 0 && $this->input->post('appliedLeave') != '') {
                echo json_encode($this->Employee_model->update_employeesLeave());
            } else {
                echo json_encode(array('e', 'Please check the start date and end date'));
            }

        }
    }


    function getEmployeesDataTableShift()
    {
        $companyID = current_companyID();
        $is_manager = $this->input->post('is_manager');

        $emp_id = current_userID();

        $con = "IFNULL(Ename2, '')";
        $str_lastOCGrade = '(SELECT ocGrade FROM srp_erp_sso_epfreportdetails WHERE empID = EIdNo AND companyID=' . $companyID . ' ORDER BY id DESC LIMIT 1)';
        $emp_str = '';

        if($is_manager){
            $emp_list = $this->db->query("
                    SELECT
                    manger_tb.empID
                FROM
                    srp_erp_employeemanagers AS manger_tb 
                WHERE
                    active = 1 
                    AND managerID = '{$emp_id}' 
                    AND companyID = '{$companyID}'
            ")->result_array();

            $emp_arr = array();
            foreach($emp_list as $emp){
                $emp_arr[] = $emp['empID'];
            }
            // $emp_str = join(',',$emp_arr);
        }


        $this->datatables->select('EIdNo, ECode, CONCAT(' . $con . ') AS empName, DesDescription,
                                    IF(' . $str_lastOCGrade . ' IS NULL, \'\', ' . $str_lastOCGrade . ') AS last_ocGrade');
        $this->datatables->from('srp_employeesdetails');
        $this->datatables->join('srp_designation', 'srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID');
        if($is_manager){
            $this->datatables->where_in("srp_employeesdetails.EIdNo",$emp_arr);
        }
        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        $this->datatables->where('srp_employeesdetails.Erp_companyID', $companyID);
        $this->datatables->where('srp_employeesdetails.isPayrollEmployee', 1);
        $this->datatables->where('srp_employeesdetails.isDischarged', 0);

        echo $this->datatables->generate();
    }

    function add_employees_to_shift()
    {
        $this->form_validation->set_rules('startDate', 'Start Date', 'trim|required');
        $this->form_validation->set_rules('endDate', 'End Date', 'trim|required');
        // shieftIDhn
        $this->form_validation->set_rules('empHiddenID[]', 'Employee', 'trim|required');
        
        $shift_select = $this->input->post('shift_select');
        
        if($shift_select == 1){
            $this->form_validation->set_rules('shieftIDhn', 'Shift', 'trim|required');
        }
     
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->add_employees_to_shift());
        }
        
    }

    function export_excel()
    {

        $this->load->library('excel');
        //set cell A1 content with some text
        // $this->excel->getActiveSheet()->setCellValueByColumnAndRow('A1',1,'test');
        $this->excel->setActiveSheetIndex(0);
        //name the worksheet
        $this->excel->getActiveSheet()->setTitle('Users list');
        // load database
        $this->load->database();
        // load model
        // get all users in array formate
        $data = $this->fetch_employees_for_excel();
        $header = $data['header'];
        $employees = $data['employees'];
        // Header
        $this->excel->getActiveSheet()->fromArray([current_companyName()], null, 'A1');

        $this->excel->getActiveSheet()->getStyle('A1')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray(['Employee list'], null, 'A2');
        $this->excel->getActiveSheet()->getStyle('A2')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray($header, null, 'A4');
        // Data
        $this->excel->getActiveSheet()->fromArray($employees, null, 'A5');
        //set aligment to center for that merged cell (A1 to D1)
        ob_clean();
        ob_start(); # added
        $filename = 'Employee Details.xls'; //save our workbook as this file name
        header('Content-Type: application/vnd.ms-excel;charset=utf-16'); //mime type
        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name
        header('Cache-Control: max-age=0'); //no cache
        ob_clean(); # remove this
        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function fetch_employees_for_excel()
    {
        $columns = $this->input->post('columns');
        $employee_filter = '';
        $segment_filter = '';
        $employee = $this->input->post('employeeCode');
        $segment = $this->input->post('segment');
        $isDischarged = $this->input->post('isDischarged');
        if (!empty($employee)) {
            //$employee = array($this->input->post('employeeCode'));
            $whereIN = "( " . join(" , ", $employee) . " )";
            $employee_filter = " AND EIdNo IN " . $whereIN;
        }
        if (!empty($segment)) {
            $whereIN = "( " . join("' , '", $segment) . " )";
            $segment_filter = " AND t1.segmentID IN " . $whereIN;
        }

        switch ($isDischarged) {
            case 'N':
                $discharged_filter = ' AND isDischarged != 1';
                break;

            case 'Y':
                $discharged_filter = ' AND isDischarged = 1';
                break;

            default:
                $discharged_filter = '';
        }

        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $where = "isSystemAdmin !=1 AND t1.Erp_companyID = " . $companyID . $employee_filter . $segment_filter . $discharged_filter . "";

        $selectStr = "";
        $excelHeader = array();
        foreach ($columns AS $key => $row) {
            $row_arr = explode('|', $row);
            $rowColumn = $row_arr[0];
            array_push($excelHeader, $row_arr[1]);

            switch ($rowColumn) {
                case 'EDOJ':
                    $selectStr .= ', DATE_FORMAT(EDOJ,\'' . $convertFormat . '\') AS doj';
                    break;
                case 'EDOB':
                    $selectStr .= ', DATE_FORMAT(EDOB,\'' . $convertFormat . '\') AS dob';
                    break;
                case 'contractStartDate':
                    $selectStr .= ', DATE_FORMAT(contractStartDate,\'' . $convertFormat . '\') AS contractStart';
                    break;
                case 'contractEndDate':
                    $selectStr .= ', DATE_FORMAT(contractEndDate,\'' . $convertFormat . '\') AS contractEnd';
                    break;
                case 'empConfirmedYN':
                    $selectStr .= ', IF(empConfirmedYN=1,\'Yes\',\'No\') AS  empConfirmedYNStatus';
                    break;
                case 'Gender':
                    $selectStr .= ', IF(Gender=1,\'Male\', \'Female\') AS genderStr';
                    break;
                case 'isDischarged':
                    $selectStr .= ', IF(isDischarged=1, \'Discharged\', \'Active\') AS empStatus';
                    break;
                case 'empMaritialStatus':
                    $selectStr .= ', maritialStatus.description AS empMaritialStatus';
                    break;

                case 'segment':
                    $selectStr .= ', srp_erp_segment.description AS segment';
                    break;

                default :
                    $selectStr .= ',' . $rowColumn;
            }
        }


        $this->db->select($selectStr)
            ->from('srp_employeesdetails AS t1')
            ->join('srp_designation', 'DesignationID=t1.EmpDesignationId', 'LEFT')
            ->join('srp_titlemaster', 'TitleID=EmpTitleId')
            ->join('srp_erp_segment', 'srp_erp_segment.segmentID=t1.segmentID', 'LEFT')
            ->join('srp_countrymaster', 'srp_countrymaster.countryID=t1.EpAddress4', 'LEFT')
            ->join('srp_nationality', 'srp_nationality.NId=t1.Nid', 'LEFT')
            ->join('srp_erp_bloodgrouptype', 'srp_erp_bloodgrouptype.BloodTypeID=t1.BloodGroup', 'LEFT')
            ->join('srp_erp_maritialstatus AS maritialStatus', 'maritialStatus.maritialstatusID=t1.MaritialStatus', 'LEFT')
            ->join('srp_erp_systememployeetype AS employeeType', 'employeeType.employeeTypeID=t1.EmployeeConType', 'LEFT')
            ->join('(SELECT empID, EmpSecondaryCode AS managerCode FROM  srp_erp_employeemanagers
                    JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo=srp_erp_employeemanagers.managerID
                    WHERE companyID=' . $companyID . ' AND active=1) AS repotingManagerTB', 'repotingManagerTB.empID=t1.EIdNo', 'LEFT')
            ->join('(SELECT empID, socialInsuranceNumber FROM srp_erp_socialinsurancedetails WHERE companyID=' . $companyID . ' GROUP BY empID)
                     AS ssoTB', 'ssoTB.empID=t1.EIdNo', 'LEFT')
            ->where($where);
        $rows = $this->db->get()->result_array();

        return ['header' => $excelHeader, 'employees' => $rows];

    }

    function load_nonPayrollEmployees()
    {
        $companyID = current_companyID();
        $result = $this->db->query("SELECT EIdNo, Ename2 as empName, ECode, salaryAcc.*
                                    FROM srp_employeesdetails AS empTB
                                    LEFT JOIN (
                                        SELECT id AS accountID, employeeNo, salaryAcc.bankID, salaryAcc.branchID, accountNo,
                                        accountHolderName, toBankPercentage, isActive, bankName, branchName
                                        FROM srp_erp_non_pay_salaryaccounts AS salaryAcc
                                        JOIN srp_erp_pay_bankmaster AS bankTB ON bankTB.bankID = salaryAcc.bankID AND bankTB.companyID={$companyID}
                                        JOIN srp_erp_pay_bankbranches AS branchesTB ON branchesTB.branchID = salaryAcc.branchID AND branchesTB.companyID={$companyID}
                                        WHERE salaryAcc.companyID={$companyID}
                                    ) AS salaryAcc ON salaryAcc.employeeNo = empTB.EIdNo
                                    WHERE Erp_companyID={$companyID} ORDER BY EIdNo DESC")->result_array();
        $data['accountData'] = $result; //array();

        $this->load->view('system/hrm/ajax/load_empNonPayrollBanksView', $data);
    }

    function save_nonPayBankAccount()
    {
        $this->form_validation->set_rules('empID', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountNo', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        $this->form_validation->set_rules('branch_id', 'Branch', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $empID = $this->input->post('empID');
            $accHolder = $this->input->post('accHolder');
            $accountNo = $this->input->post('accountNo');
            $bank_id = $this->input->post('bank_id');
            $br_name = $this->input->post('branch_id');
            $salPerc = $this->input->post('salPerc');


            $data = array(
                'employeeNo' => $empID,
                'bankID' => $bank_id,
                'isActive' => 1,
                'accountNo' => $accountNo,
                'accountHolderName' => $accHolder,
                'branchID' => $br_name,
                'toBankPercentage' => $salPerc,
                'companyID' => current_companyID(),
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdUserGroup' => current_user_group(),
                'createdDateTime' => current_date()
            );

            $this->db->trans_start();

            $this->db->insert('srp_erp_non_pay_salaryaccounts', $data);

            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Record inserted successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            }

        }
    }

    function update_nonPayBankAccount()
    {
        $this->form_validation->set_rules('empID', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountID', 'Update ID', 'trim|required');
        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountNo', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        $this->form_validation->set_rules('branch_id', 'Branch', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $empID = $this->input->post('empID');
            $accountID = $this->input->post('accountID');
            $accHolder = $this->input->post('accHolder');
            $accountNo = $this->input->post('accountNo');
            $bank_id = $this->input->post('bank_id');
            $br_name = $this->input->post('branch_id');
            $salPerc = $this->input->post('salPerc');
            $accStatus = $this->input->post('accStatus');


            $data = array(
                'bankID' => $bank_id,
                'isActive' => $accStatus,
                'accountNo' => $accountNo,
                'accountHolderName' => $accHolder,
                'branchID' => $br_name,
                'toBankPercentage' => $salPerc,
                'companyID' => current_companyID(),
                'companyCode' => current_companyCode(),
                'createdPCID' => current_pc(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdUserGroup' => current_user_group(),
                'createdDateTime' => current_date()
            );

            $this->db->trans_start();

            $this->db->where(array(
                'employeeNo' => $empID,
                'id' => $accountID
            ))->update('srp_erp_non_pay_salaryaccounts', $data);

            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Record updated successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in update process']);
            }

        }
    }

    function delete_nonPayBankAccount()
    {
        $this->form_validation->set_rules('empID', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountID', 'Update ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $empID = $this->input->post('empID');
            $accountID = $this->input->post('accountID');
            $this->db->trans_start();

            $this->db->where(array(
                'employeeNo' => $empID,
                'id' => $accountID
            ))->delete('srp_erp_non_pay_salaryaccounts');

            $this->db->trans_complete();

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Record deleted successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in delete process']);
            }

        }
    }

    function getNopay_amount()
    {
        $empID = $this->input->post('empID');
        $attendanceDate = $this->input->post('attendanceDate');
        $presentType = $this->input->post('presentType');

        /**/
        $companyID = current_companyID();

        if ($presentType == 6) {


            $detail = array();
            $detail_arr = $this->db->query("SELECT *, masterTB.id AS masterID
                                 FROM srp_erp_nopaysystemtable AS masterTB
                                 INNER JOIN srp_erp_nopayformula AS fromulaTB ON fromulaTB.nopaySystemID =masterTB.id AND companyID={$companyID} ")->result_array();
            if ($detail_arr) {
                foreach ($detail_arr as $key => $row) {

                    $isNonPayroll = $row['isNonPayroll'];
                    $table = ($isNonPayroll != 'Y') ? 'srp_erp_pay_salarydeclartion' : 'srp_erp_non_pay_salarydeclartion';
                    $classTitle = explode(' ', $row['description']);
                    $formulaText = '';
                    $formula = trim($row['formulaString'] ?? '');
                    $lastInputType = '';
                    $formulaBuilder = $this->formulaBuilder_to_sql_OT($formula);
                    $formulaDecodeOT = $formulaBuilder['formulaDecode'];
                    $select_str2 = $formulaBuilder['select_str2'];
                    $whereInClause = $formulaBuilder['whereInClause'];

                    $as = $this->db->query("SELECT calculationTB.employeeNo, '$isNonPayroll' AS type, (({$formulaDecodeOT } ) )AS transactionAmount, transactionCurrencyID, transactionCurrency, transactionER, transactionCurrencyDecimalPlaces, round( ((" . $formulaDecodeOT . " ) / companyLocalER) , companyLocalCurrencyDecimalPlaces  )AS localAmount, companyLocalCurrencyID , companyLocalCurrency, companyLocalER, companyLocalCurrencyDecimalPlaces, round( ((" . $formulaDecodeOT . " ) / companyReportingER)   , companyReportingCurrencyDecimalPlaces  )AS reportingAmount, companyReportingCurrencyID, companyReportingCurrency, companyReportingER, companyReportingCurrencyDecimalPlaces, seg.segmentID, seg.segmentCode FROM ( SELECT employeeNo, " . $select_str2 . " , transactionCurrencyID, transactionCurrency, transactionER, transactionCurrencyDecimalPlaces, companyLocalCurrencyID , companyLocalCurrency, companyLocalER, companyLocalCurrencyDecimalPlaces, companyReportingCurrencyID, companyReportingCurrency, companyReportingER, companyReportingCurrencyDecimalPlaces FROM {$table} AS salDec JOIN srp_erp_pay_salarycategories AS salCat ON salCat.salaryCategoryID = salDec.salaryCategoryID AND salCat.companyID ={$companyID} WHERE salDec.companyID = {$companyID}  AND employeeNo={$empID} AND salDec.salaryCategoryID  IN (" . $whereInClause . ") GROUP BY employeeNo, salDec.salaryCategoryID ) calculationTB JOIN srp_employeesdetails AS emp ON emp.EIdNo = calculationTB.employeeNo AND emp.Erp_companyID = {$companyID} JOIN srp_erp_segment seg ON seg.segmentID = emp.segmentID AND seg.companyID = {$companyID} GROUP BY employeeNo")->row_array();

                    /*$detail[$key]['type']= $as['type'];
                    $detail[$key]['transactionAmount']= $as['transactionAmount'];*/

                    if ($row['isNonPayroll'] == 'N') {
                        $detail['noPayAmount'] = ($as['transactionAmount'] != '' ? $as['transactionAmount'] : 0);
                    }
                    if ($row['isNonPayroll'] == 'Y') {
                        $detail['noPaynonPayrollAmount'] = ($as['transactionAmount'] != '' ? $as['transactionAmount'] : 0);
                    }

                }
                if (!empty($detail)) {
                    $this->db->where('empID', $empID);
                    $this->db->where('attendanceDate', $attendanceDate);
                    $this->db->update('srp_erp_pay_empattendancereview', $detail);

                    echo json_encode(array('s', $detail));
                    exit;
                } else {
                    echo json_encode(array('e', 'message' => 'Successfully updated'));
                    exit;
                }

            }
        } else {
            $detail = array('noPayAmount' => 0, 'noPaynonPayrollAmount' => 0);
            $this->db->where('empID', $empID);
            $this->db->where('attendanceDate', $attendanceDate);
            $this->db->update('srp_erp_pay_empattendancereview', $detail);
            echo json_encode(array('s', $detail));
            exit;
        }
    }


    function save_noPayFormula()
    {
        $this->form_validation->set_rules('payGroupID', 'Formula Master ID', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $formulaMasterID = $this->input->post('payGroupID');
            $formulaString = $this->input->post('formulaString');
            $salaryCategories = $this->input->post('salaryCategoryContainer');
            $salaryCategories = (trim($salaryCategories) == '') ? null : $salaryCategories;
            $ssoCategories = $this->input->post('SSOContainer');
            $ssoCategories = (trim($ssoCategories) == '') ? null : $ssoCategories;
            $payGroupCategories = $this->input->post('payGroupContainer');
            $payGroupCategories = (trim($payGroupCategories) == '') ? null : $payGroupCategories;

            $data = array(
                'formulaString' => $formulaString,
                'salaryCategories' => $salaryCategories,
                'ssoCategories' => $ssoCategories,
                'payGroupCategories' => $payGroupCategories,
                'modifiedPCID' => current_pc(),
                'modifiedUserID' => current_userID(),
                'modifiedUserName' => current_employee(),
                'modifiedDateTime' => current_date()
            );

            $this->db->trans_start();

            $this->db->where('companyID', current_companyID());
            $this->db->where('id', $formulaMasterID);
            $this->db->update('srp_erp_nopayformula', $data);


            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Formula saved successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            }
        }
    }

    public function fetch_employees_template1()
    {
        $con = "IFNULL(Ename2, '')";

        $companyid = $this->common_data['company_data']['company_id'];
        $where = "t1.Erp_companyID = " . $companyid . "";
        $this->datatables->select('t1.EIdNo,t1.ECode,srp_titlemaster.TitleDescription as title,t1.EmpShortCode,t1.Ename3,t1.Ename2,t1.Ename1,t1.NIC,t1.EDOB,srp_erp_gender.name as gender,srp_nationality.Nationality,srp_erp_bloodgrouptype.BloodDescription,srp_erp_maritialstatus.description as MaritialStatus,DesDescription,srp_erp_employeemanagers.managerID,t1.EDOJ,srp_erp_systememployeetype.employeeType,t1.EpTelephone,t1.EcMobile,srp_countrymaster.CountryDes,t1.EEmail,srp_erp_segment.description as segment,t2.Ename2 as managerName,t1.EIdNo AS empHID', false)
            ->from('srp_employeesdetails AS t1')
            ->join('srp_designation', 'DesignationID=t1.EmpDesignationId', 'LEFT')
            ->join('srp_titlemaster', 'TitleID=t1.EmpTitleId', 'LEFT')
            ->join('srp_erp_gender', 'genderID=t1.Gender', 'LEFT')
            ->join('srp_nationality', 'srp_nationality.NId=t1.Nid', 'LEFT')
            ->join('srp_erp_bloodgrouptype', 'BloodTypeID=t1.BloodGroup', 'LEFT')
            ->join('srp_erp_maritialstatus', 'maritialstatusID=t1.MaritialStatus', 'LEFT')
            ->join('srp_erp_employeemanagers', 'empID=t1.EIdNo', 'LEFT')
            ->join('srp_erp_systememployeetype', 'employeeTypeID=t1.EmployeeConType', 'LEFT')
            ->join('srp_countrymaster', 'countryID=t1.EpAddress4', 'LEFT')
            ->join('srp_employeesdetails t2', 'srp_erp_employeemanagers.empID=t2.EIdNo', 'LEFT')
            ->join('srp_erp_segment', 'srp_erp_segment.segmentID=t1.segmentID', 'LEFT')
            ->add_column('action', '$1', 'empMaster_action(empHID, empName)')
            ->where($where);
        echo $this->datatables->generate();
    }

    function loadEmployees()
    {
        $companyID = current_companyID();
        $segmentArr = $this->input->post('segmentID');
        $segmentIN = "";

        if (!empty($segmentArr)) {
            $segmentIN = 'AND segmentID IN (' . join(",", $segmentArr) . ' )';
        }

        $result = $this->db->query("SELECT EIdNo,Ename2 FROM srp_employeesdetails
                                    WHERE Erp_companyID={$companyID} {$segmentIN}")->result_array();
        $data['employees'] = $result;

        echo $this->load->view('system/hrm/ajax/employee_dropdown', $data, true);

    }

    /**
     *
     */
    function employeesByLeavepolicy()
    {
        $policyType = $this->input->post('policyType');
        $companyID = current_companyID();
        $employees_arr = array();
        if ($policyType != '') {
            $policyCondition = ($policyType == 2) ? "policyMasterID=$policyType" : "policyMasterID IN (1,3)";
            $employees = $this->db->query("SELECT EIdNo, Ename2, ECode FROM `srp_employeesdetails` 
                          INNER JOIN `srp_erp_leavegroupdetails`  ON `srp_erp_leavegroupdetails`.leaveGroupID = srp_employeesdetails.leaveGroupID AND {$policyCondition}
                          WHERE Erp_companyID = {$companyID} AND isDischarged != 1 AND empConfirmedYN=1 AND isSystemAdmin!=1 GROUP BY EIdNo")->result_array();
        }
        if (isset($employees)) {
            foreach ($employees as $row) {

                $employees_arr[trim($row['EIdNo'] ?? '')] = trim($row['ECode'] ?? '') . ' | ' . trim($row['Ename2'] ?? '');
            }
        }
        echo form_dropdown('empID[]', $employees_arr, '', 'id="empID" multiple="multiple" class="form-control mid-width wrapItems "');

    }


    /** Common function for payroll and non payroll employee bank account save | update | delete **/
    function save_empBankAccounts()
    {

        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountNo', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');
        $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        $this->form_validation->set_rules('branch_id', 'Bank Branch', 'trim|required');
        $this->form_validation->set_rules('payrollType[]', 'Payroll Type', 'trim|required');
        $this->form_validation->set_rules('ibanNumber', 'IBAN Number', 'trim|required');
        $this->form_validation->set_rules('swiftcode', 'Swift Code', 'trim|required');


        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $payrollType = $this->input->post('payrollType');
            $accHolder = $this->input->post('accHolder');
            $bank_id = $this->input->post('bank_id');
            $br_name = $this->input->post('branch_id');
            $accountNo = $this->input->post('accountNo');
            $salPerc = $this->input->post('salPerc');
            $empID = $this->input->post('empID');
            $ibanNumber = $this->input->post('ibanNumber');
            $swiftcode = $this->input->post('swiftcode');

            $data = array(
                'ibancode'=>$ibanNumber,
                'swiftcode'=>$swiftcode,
                'employeeNo' => $empID,
                'bankID' => $bank_id,
                'isActive' => 1,
                'accountNo' => $accountNo,
                'accountHolderName' => $accHolder,
                'branchID' => $br_name,
                'toBankPercentage' => $salPerc,
                'companyID' => $this->common_data['company_data']['company_id'],
                'companyCode' => $this->common_data['company_data']['company_code'],
                'createdPCID' => $this->common_data['current_pc'],
                'createdUserID' => $this->common_data['current_userID'],
                'createdUserName' => $this->common_data['current_user'],
                'createdUserGroup' => $this->common_data['user_group'],
                'createdDateTime' => current_date()
            );

            $this->db->trans_start();

            foreach ($payrollType as $payrollTypeRow) {
                $table = ($payrollTypeRow == 1) ? 'srp_erp_pay_salaryaccounts' : 'srp_erp_non_pay_salaryaccounts';
                $this->db->insert($table, $data);
            }

            $this->db->trans_complete();

            if ($this->db->trans_status() > 0) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Salary Account Saved']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            }

        }
    }

    function update_empBankAccounts()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('accHolder', 'Account Holder Name', 'trim|required');
        $this->form_validation->set_rules('accountNo', 'Bank Account Number', 'trim|required');
        $this->form_validation->set_rules('salPerc', 'Salary Transfer %', 'trim|required');
        $this->form_validation->set_rules('bank_id', 'Bank', 'trim|required');
        $this->form_validation->set_rules('branch_id', 'Bank Branch', 'trim|required');
        $this->form_validation->set_rules('accountID', 'Update ID', 'trim|required');
        $this->form_validation->set_rules('payrollType-in-update', 'Payroll Type', 'trim|required');
        $this->form_validation->set_rules('ibanNumber', 'IBAN Number', 'trim|required');
        $this->form_validation->set_rules('swiftcode', 'Swift Code', 'trim|required');

        $this->load->helpers('configuration_helper');
        $dataChange=getPolicyValues('APEMP', 'All');
        $companyID = current_companyID();

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $accountID = $this->input->post('accountID');
            $payrollType = $this->input->post('payrollType-in-update');
            $accHolder = $this->input->post('accHolder');
            $bank_id = $this->input->post('bank_id');
            $br_name = $this->input->post('branch_id');
            $accountNo = $this->input->post('accountNo');
            $salPerc = $this->input->post('salPerc');
            $empID = $this->input->post('empID');
            $accStatus = $this->input->post('accStatus');
            $ibanNumber = $this->input->post('ibanNumber');
            $swiftcode = $this->input->post('swiftcode');

            $data = array(
                'ibancode'=>$ibanNumber,
                'employeeNo' => $empID,
                'bankID' => $bank_id,
                'swiftcode'=>$swiftcode,
                'accountNo' => $accountNo,
                'accountHolderName' => $accHolder,
                'branchID' => $br_name,
                'toBankPercentage' => $salPerc,
                'isActive' => $accStatus,
            );

            $detail = array(
                'modifiedPCID' => $this->common_data['current_pc'],
                'modifiedUserID' => $this->common_data['current_userID'],
                'modifiedUserName' => $this->common_data['current_user'],
                'modifiedDateTime' => current_date()
            );

            $this->db->trans_start();

            if($dataChange==0){
                $table = ($payrollType == 1) ? 'srp_erp_pay_salaryaccounts' : 'srp_erp_non_pay_salaryaccounts';
                $this->db->where('companyID', current_companyID())->where('id', $accountID)->update($table, $data);
                $this->db->where('companyID', current_companyID())->where('id', $accountID)->update($table, $detail);
            }
            else{
                $table = ($payrollType == 1) ? 'srp_erp_pay_salaryaccounts' : 'srp_erp_non_pay_salaryaccounts';
                foreach ($data as $columnName => $columnVal) {
                    $change = array(
                        'empID' => $empID,
                        'relatedColumnID' => $accountID,
                        'realtedColumnName'=> 'id',
                        'columnName' => $columnName,
                        'columnVal' => $columnVal,
                        'approvedYN' => 0,
                        'companyID' => $companyID,
                        'timestamp' => current_date(),
                        'tableName' => $table
                    );
                    $this->db->insert('srp_erp_employeedatachanges',$change);
                }
            }
            $this->db->trans_complete();

            if ($this->db->trans_status() > 0) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Bank account updated']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in bank account update process']);
            }

        }
    }

    function delete_empBankAccounts()
    {
        $this->form_validation->set_rules('accountID', 'Update ID', 'trim|required');
        $this->form_validation->set_rules('payrollType', 'Payroll Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $payrollType = $this->input->post('payrollType');
            $accountID = $this->input->post('accountID');

            $table = ($payrollType == 1) ? 'srp_erp_pay_salaryaccounts' : 'srp_erp_non_pay_salaryaccounts';
            $this->db->where('companyID', current_companyID())
                ->where('id', $accountID)
                ->delete($table);

            if ($this->db->affected_rows() > 0) {
                echo json_encode(['s', 'Bank account deleted']);
            } else {
                echo json_encode(['e', 'Error in bank account delete process']);
            }

        }
    }

    function moduledetail()
    {

        echo $this->load->view('system/erp_appsdetails', '', true);

    }

    function moduleView()
    {
        $data['extra'] = '';
        $data['title'] = 'List of Module';
        $data['main_content'] = 'system/erp_apps';
        $this->load->view('include/templateModule', $data);
    }

    function modulesdetails()
    {
        $data['extra'] = $this->uri->segment('2');
        $data['title'] = 'List of Module';
        $data['main_content'] = 'system/erp_appsdetails';
        $this->load->view('include/templateModule', $data);
    }

    function unloackUser()
    {
        echo json_encode($this->Employee_model->unloackUser());
    }

    function requestQuote()
    {

        $this->form_validation->set_rules('requestName', 'Your Name', 'trim|required');
        $this->form_validation->set_rules('phoneNumber', 'Phone Number', 'trim|required|numeric');
        $this->form_validation->set_rules('companyName', 'Company Name', 'trim|required');
        $this->form_validation->set_rules('country', 'country ', 'trim|required');
        $this->form_validation->set_rules('emailID', 'emailID', 'trim|required|valid_email');
        $this->form_validation->set_rules('aboutUs', 'about Us', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {

            $erpSystemDescription = $this->input->post('erpSystemDescription');
            $requestName = $this->input->post('requestName');
            $companyName = $this->input->post('companyName');
            $emailID = $this->input->post('emailID');
            $phoneNumber = $this->input->post('phoneNumber');
            $aboutUsDescription = $this->input->post('aboutUsDescription');

            $x = 0;
            $params[$x]["companyID"] = current_companyID();
            $params[$x]["documentID"] = '';
            $params[$x]["documentSystemCode"] = '';
            $params[$x]["documentCode"] = '';
            $params[$x]["emailSubject"] = 'Requested Quote';
            $params[$x]["empEmail"] = 'info@xlouderp.com';
            $params[$x]["empID"] = current_userID();
            $params[$x]["empName"] = $requestName;
            $params[$x]["emailBody"] = "<p>Dear Admin,<br /><br /></p> <p>Requested Addon : <strong>{$erpSystemDescription}</strong></p> <p>Requested User : <strong>{$requestName}</strong></p> <p>Company : <strong>{$companyName}</strong></p> <p>Country : <strong>as</strong></p> <p>Email : <strong>{$emailID}</strong></p> <p>Phone Number :<strong> {$phoneNumber}</strong></p> <p>Heard from : <strong>{$aboutUsDescription}</strong></p> <p>&nbsp;</p> ";

            if (!empty($params)) {
                $this->email_manual->set_email_detail($params);

                echo json_encode(['s', 'Successfully Requested']);
            }
        }
    }

    function get_empSalaryInCategory()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $catID = $this->input->post('catID');
        $payrollType = $this->input->post('payrollType');
        $effectiveDate = $this->input->post('effectiveDate');
        $declarationTb = ($payrollType == 1) ? 'srp_erp_pay_salarydeclartion' : 'srp_erp_non_pay_salarydeclartion';
        $date_format_policy = date_format_policy();
        $effectiveDate = input_format_date($effectiveDate, $date_format_policy);


        /*$totalEntitle = $this->db->query("SELECT IF( ISNULL(SUM(amount)), round(0,transactionCurrencyDecimalPlaces) , FORMAT(SUM(amount), transactionCurrencyDecimalPlaces))
                                           AS totalEntitle FROM srp_erp_pay_salarydeclartion
                                          WHERE effectiveDate <= '{$effectiveDate}' AND employeeNo={$empID} AND salaryCategoryID={$catID} AND
                                          companyID={$companyID}")->row('totalEntitle');*/

        $totalEntitle = $this->db->query("SELECT IF( ISNULL(SUM(amount)), round(0,transactionCurrencyDecimalPlaces) , FORMAT(SUM(amount), transactionCurrencyDecimalPlaces))
                                           AS totalEntitle FROM {$declarationTb}
                                          WHERE  employeeNo={$empID} AND salaryCategoryID={$catID} AND
                                          companyID={$companyID}")->row('totalEntitle');
        echo json_encode($totalEntitle);
    }

    public function save_machineMapping()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');
        if ($this->input->post('dbYN') == 1) {
            $this->form_validation->set_rules('dbhost', 'DB Host', 'trim|required');
            $this->form_validation->set_rules('dbname', 'DB Name', 'trim|required');
            $this->form_validation->set_rules('dbpassword', 'DB Password', 'trim|required');
            $this->form_validation->set_rules('dbuser', 'DB User', 'trim|required');
            $this->form_validation->set_rules('dbtableName', 'DB Table Name', 'trim|required');
        }
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_machineMapping());
        }
    }

    public function fetch_machineType()
    {
        $this->datatables->select('machineMasterID AS ID , description', false)
            ->from('srp_erp_machinemaster')
            ->add_column('action', ' <a onclick="edit_machinMapping($1)"><span title="Edit" rel="tooltip" class="glyphicon glyphicon-pencil"></span></a>&nbsp;&nbsp; | &nbsp;&nbsp;<a onclick="delete_machinMapping($1)"><span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash" style="color:#d15b47;"></span></a>', 'ID, description');
        echo $this->datatables->generate();
    }


    function delete_machine_master()
    {
        $machineMasterID = $this->input->post('machineMasterID');
        $this->db->where('machineMasterID', $machineMasterID)->delete('srp_erp_machinemaster');

        if ($this->db->affected_rows() > 0) {
            $this->db->where('machineMasterID', $machineMasterID)->delete('srp_erp_machinedetail');
            echo json_encode(['s', 'Machine type deleted']);
        } else {
            echo json_encode(['e', 'Error in machine type delete process']);
        }

    }

    public function fetch_machinedetail()
    {
        $machineMasterID = $this->input->post('machineMasterID');
        $this->datatables->select('machineDetailID as ID,machineMasterID,sortOrder,columnName as description,srp_erp_machinedetail.machineTypeID as  machineTypeID', false)
            ->from('srp_erp_machinedetail')
            ->join('srp_erp_machinetype', 'srp_erp_machinedetail.machineTypeID =srp_erp_machinetype.machineTypeID', 'LEFT')
            ->where('machineMasterID', $machineMasterID)
            ->add_column('action', '<a onclick="delete_machinMappingdetail($1)"><span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash" style="color:#d15b47;"></span></a>', 'ID, description')
            ->add_column('sortOrderdesc', '$1', 'edit_machine_type(sortOrder,machineMasterID,ID)')
            ->add_column('columnMapping', '$1', 'edit_machine_mapping(machineTypeID,machineMasterID,ID)');
        echo $this->datatables->generate();
    }

    public function save_machineMapping_detail()
    {
        $this->form_validation->set_rules('columnName', 'Column Name', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->save_machineMapping_detail());
        }
    }

    public function update_machineMapping_detail()
    {
        $this->form_validation->set_rules('value', 'Value', 'trim|required');
        $this->form_validation->set_rules('masterID', 'masterID', 'trim|required');
        $this->form_validation->set_rules('detailID', 'detailID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->update_machineMapping_detail());
        }
    }

    public function delete_machine_detail()
    {
        $machineDetailID = $this->input->post('machineDetailID');
        $this->db->where('machineDetailID', $machineDetailID)->delete('srp_erp_machinedetail');

        if ($this->db->affected_rows() > 0) {
            echo json_encode(['s', 'Machine detail deleted']);
        } else {
            echo json_encode(['e', 'Error in machine type delete process']);
        }
    }

    public function update_machineMappingcolumn_detail()
    {
        $this->form_validation->set_rules('masterID', 'masterID', 'trim|required');
        $this->form_validation->set_rules('detailID', 'detailID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->update_machineMappingcolumn_detail());
        }
    }

    public function fetch_employeeEnvoy()
    {
        $employee_filter = '';
        $segment_filter = '';
        $employee = $this->input->post('employeeCode');
        $segment = $this->input->post('segment');
        $isDischarged = $this->input->post('isDischarged');
        if (!empty($employee) && $employee != 'null') {
            $employee = array($this->input->post('employeeCode'));
            $whereIN = "( " . join("' , '", $employee) . " )";
            $employee_filter = " AND EIdNo IN " . $whereIN;
        }

        if (!empty($segment) && $segment != 'null') {
            $segment = array($this->input->post('segment'));
            $whereIN = "( " . join("' , '", $segment) . " )";
            $segment_filter = " AND t1.segmentID IN " . $whereIN;
        }
//echo '$segment_filter: '.$segment_filter;

        switch ($isDischarged) {
            case 'N':
                $discharged_filter = ' AND isDischarged != 1';
                break;

            case 'Y':
                $discharged_filter = ' AND isDischarged = 1';
                break;

            default:
                $discharged_filter = '';
        }

        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $where = "t1.Erp_companyID = " . $companyID . $employee_filter . $segment_filter . $discharged_filter . "";

        $this->datatables->select('EIdNo,EmpSecondaryCode,EmpSecondaryCode AS empShtrCode,ECode,Ename1,Ename2,Ename3,Ename4,initial,EmpShortCode,EpAddress1,EpAddress2,
                EpAddress3,EpTelephone,EcPOBox,EcMobile,TitleDescription,srp_erp_segment.description as segment,CountryDes,BloodDescription,
                DesDescription,NIC,maritialStatus.description AS empMaritialStatus,managerCode,DATE_FORMAT(EDOB,\'' . $convertFormat . '\') AS dob,EmpImage,
                DATE_FORMAT(EDOJ,\'' . $convertFormat . '\') AS doj,employeeType,IF(empConfirmedYN=1,\'Yes\',\'No\') AS  empConfirmedYNStatus,
                IF(Gender=1,\'Male\', \'Female\') AS genderStr, IF(isDischarged=1, \'Discharged\', \'Active\') AS empStatus, socialInsuranceNumber,
                DATE_FORMAT(contractStartDate,\'' . $convertFormat . '\') AS contractStart, DATE_FORMAT(contractEndDate,\'' . $convertFormat . '\')
                AS contractEnd
                ', false)
            ->from('srp_employeesdetails AS t1')
            ->join('srp_designation', 'DesignationID=t1.EmpDesignationId', 'LEFT')
            ->join('srp_titlemaster', 'TitleID=EmpTitleId')
            ->join('srp_erp_segment', 'srp_erp_segment.segmentID=t1.segmentID', 'LEFT')
            ->join('srp_countrymaster', 'srp_countrymaster.countryID=t1.EpAddress4', 'LEFT')
            ->join('srp_nationality', 'srp_nationality.NId=t1.Nid', 'LEFT')
            ->join('srp_erp_bloodgrouptype', 'srp_erp_bloodgrouptype.BloodTypeID=t1.BloodGroup', 'LEFT')
            ->join('srp_erp_maritialstatus AS maritialStatus', 'maritialStatus.maritialstatusID=t1.MaritialStatus', 'LEFT')
            ->join('srp_erp_systememployeetype AS employeeType', 'employeeType.employeeTypeID=t1.EmployeeConType', 'LEFT')
            ->join('(SELECT empID, EmpSecondaryCode AS managerCode FROM  srp_erp_employeemanagers
                    JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo=srp_erp_employeemanagers.managerID
                    WHERE companyID=' . $companyID . ' AND active=1) AS repotingManagerTB', 'repotingManagerTB.empID=t1.EIdNo', 'LEFT')
            ->join('(SELECT empID, socialInsuranceNumber FROM srp_erp_socialinsurancedetails WHERE companyID=' . $companyID . ' GROUP BY empID)
                     AS ssoTB', 'ssoTB.empID=t1.EIdNo', 'LEFT')
            ->add_column('EmpImage', '$1', 'get_item_emp_image(EmpImage)')
            //->add_column('img', '<center><img class="" src="$1" style="width:30px;height: 20px;" ></center>', 'empImage(EmpImage)')
            ///->add_column('secondaryCodeStr', '<center>$1</center>', 'empMaster_action(EIdNo,empShtrCode,1)')           
            ->add_column('secondaryCodeStr', '$1', 'empShtrCode')
            ->add_column('EmpShortCodeStr', '$1', 'empMaster_action(EIdNo,EmpShortCode,1)')
            ->add_column('confirmedStr', '<center>$1</center>', 'empConfirmedYNStatus')
           
            ->add_column('action', '$1', 'empMaster_action(EIdNo, empName)')
            ->where('isSystemAdmin !=', 1)
            ->where($where);
        echo $this->datatables->generate();
    }
    

    function fetch_empSalaryDeclaration()
    {
        $empId = trim($this->input->post('empId') ?? '');
        $isNonPayroll = trim($this->input->post('isNonPayroll') ?? '');
        $decTable = ($isNonPayroll == 'Y') ? 'srp_erp_non_pay_salarydeclartion' : 'srp_erp_pay_salarydeclartion';
        $convertFormat = convert_date_format_sql();
        $this->datatables->select('id, salaryDescription, FORMAT(amount,declartionTB.transactionCurrencyDecimalPlaces) AS amountTr, narration,
                                   DATE_FORMAT(effectiveDate,\'' . $convertFormat . '\') AS effectiveDate,
                                   DATE_FORMAT(payDate,\'' . $convertFormat . '\') AS payDate, documentSystemCode', false)
            ->from($decTable . ' declartionTB')
            ->join('srp_erp_pay_salarycategories AS catTB', 'catTB.salaryCategoryID = declartionTB.salaryCategoryID')
            ->join('srp_erp_salarydeclarationmaster AS decMaster', 'decMaster.salarydeclarationMasterID=declartionTB.sdMasterID')
            ->add_column('amountTrAlign', '<div align="right"> $1</div>', 'amountTr')
            ->add_column('effectiveDateStr', '<div align="center"> $1</div>', 'effectiveDate')
            ->add_column('payDateStr', '<div align="center"> $1</div>', 'payDate')
            ->where('employeeNo', $empId)
            ->where('declartionTB.companyID', current_companyID());
        echo $this->datatables->generate();
    }


    function attendance_export_excel()
    {
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Attendance list');
        $this->load->database();

        $attendanceDate = $this->input->post('attendanceDate');
        $approvedYN = $this->input->post('approvedYN');
        $managerId = current_userID();
        $datefrom = $this->input->post('datefrom');
        $dateto = $this->input->post('dateto');
        $companyID = current_companyID();
        $floorID = $this->input->post('floorID');

        $where = "";
        $where .= ($approvedYN != '' ? " AND approvedYN ={$approvedYN}" : "");
        $where .= ($datefrom != '' ? " AND attendanceDate >='{$datefrom}'" : "");
        $where .= ($dateto != '' ? " AND attendanceDate <='{$dateto}'" : "");
        $managerID = current_userID();

        $hrAdmin = $this->db->query("Select * from srp_employeesdetails where isHRAdmin=1 AND EIdNo={$managerID}")->row_array();
        if (empty($hrAdmin)) {
            $qry = "SELECT ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount,isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours, mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime FROM srp_erp_pay_empattendancereview LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo WHERE attendanceDate = '{$attendanceDate}' AND srp_erp_pay_empattendancereview.companyID = {$companyID} AND confirmedYN = 1 AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 AND managerID={$managerId} AND srp_erp_pay_empattendancereview.floorID=$floorID";
        } else {
            /*hradmin*/
            $qry = "SELECT ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount,isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours, mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime FROM srp_erp_pay_empattendancereview LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo WHERE attendanceDate = '{$attendanceDate}' AND srp_erp_pay_empattendancereview.companyID = {$companyID} AND confirmedYN = 1 AND srp_erp_pay_empattendancereview.floorID=$floorID";
        }

        $qry2 = "SELECT ROUND(noPayAmount, 2) as noPayAmount,ROUND(noPaynonPayrollAmount, 2) as noPaynonPayrollAmount, isWeekEndDay,ROUND(paymentOT, 2) as paymentOT,approvedComment,approvedYN, srp_erp_pay_empattendancereview.empID, ECode, Ename1, Ename2, empMachineID, floorDescription, ID, machineID, srp_erp_pay_empattendancereview.floorID, attendanceDate, presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours,  mustCheck, normalTime,normalDay, weekend, holiday, NDaysOT, weekendOTHours, holidayOTHours, realTime FROM srp_erp_pay_empattendancereview LEFT JOIN `srp_employeesdetails` ON srp_erp_pay_empattendancereview.empID = srp_employeesdetails.EIdNo LEFT JOIN `srp_erp_pay_floormaster` ON srp_erp_pay_floormaster.floorID = srp_erp_pay_empattendancereview.floorID INNER JOIN `srp_erp_employeemanagers` on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo WHERE  srp_erp_pay_empattendancereview.companyID = {$companyID} $where AND confirmedYN = 1 AND srp_erp_employeemanagers.level=0 AND srp_erp_employeemanagers.active=1 AND managerID={$managerId}";

        if ($this->input->post('col') == 'employee') {
            $qry = $qry2;
        }

        $tempAttData = $this->db->query($qry)->result_array();
        if (!empty($tempAttData)) {

            foreach ($tempAttData as $key => $val) {
                $totWorkingHours = '';
                $attendhours = '';
                $isAllSet = 0;
                if ($val['checkIn'] != null && $val['checkOut'] != null && $val['offDuty'] != null) {
                    $datetime1 = new DateTime($val['offDuty']);

                    if ($val['onDuty'] >= $val['checkIn']) {
                        $datetime2 = new DateTime($val['onDuty']);
                    } else {
                        $datetime2 = new DateTime($val['checkIn']);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $totWorkingHours = $totWorkingHours_obj->format('%h') . " h &nbsp;&nbsp;" . $totWorkingHours_obj->format('%i') . " m";
                }
                if ($val['checkIn'] != null && $val['checkOut'] != null) {
                    $datetime1 = new DateTime($val['checkIn']);
                    $datetime2 = new DateTime($val['checkOut']);
                    $attendhours_obj = $datetime1->diff($datetime2);
                    $attendhours = $attendhours_obj->format('%h') . " h &nbsp;&nbsp;" . $attendhours_obj->format('%i') . " m";
                }
                $data[$key]['approvedYN'] = ($val['approvedYN'] == 1 ? 'Yes' : 'No');
                $data[$key]['Comment'] = $val['approvedComment'];
                $data[$key]['EMPCode'] = $val['ECode'];
                $data[$key]['EmpName'] = $val['Ename2'];
                $data[$key]['Date'] = $val['attendanceDate'];
                $data[$key]['Department'] = $val['floorDescription'];
                $data[$key]['OnDutyTime'] = ($val['onDuty'] == null) ? '-not set-' : $val['onDuty'];

                $data[$key]['OffDutyTime'] = ($val['offDuty'] == null) ? '-not set-' : $val['offDuty'];
                $data[$key]['ClockIn'] = $val['checkIn'];
                $data[$key]['ClockOut'] = $val['checkOut'];
                $data[$key]['NormalTime'] = $val['normalTime'];
                $data[$key]['RealTime'] = $val['realTime'];
                $data[$key]['Present'] = $val['presentTypeID'];
                $data[$key]['Late'] = gmdate("H:i", $val['lateHours'] * 60);
                $data[$key]['Early'] = gmdate("H:i", $val['earlyHours'] * 60);
                $data[$key]['OTTime'] = gmdate("H:i", $val['OTHours'] * 60);
                $data[$key]['WorkTime'] = $totWorkingHours;
                $data[$key]['NDay'] = $val['normalDay'];
                $data[$key]['WeekEnd'] = $val['weekend'];
                $data[$key]['Holiday'] = $val['holiday'];
                $data[$key]['ATT_Time'] = $attendhours;
                $data[$key]['NDaysOT'] = gmdate("H:i", $val['NDaysOT'] * 60);
                $data[$key]['WeekendOT'] = gmdate("H:i", $val['weekendOTHours'] * 60);
                $data[$key]['HolidayOT'] = gmdate("H:i", $val['holidayOTHours'] * 60);
                $data[$key]['OT Amount'] = $val['paymentOT'];
                $data[$key]['NoPayAmount'] = $val['noPayAmount'];
                $data[$key]['NoPaynonPayrollAmount'] = $val['noPaynonPayrollAmount'];

            }
        }

        /**/

        // Header
        $this->excel->getActiveSheet()->fromArray(array('ApprovedYN', 'Comment', 'EMP Code', 'Emp Name', 'Date', 'Department', 'On Duty Time', 'Off Duty Time', 'Clock In', 'Clock Out', 'Normal Time', 'Real Time', 'Present', 'Late', 'Early', 'OT Time', 'Work Time', 'NDay', 'Week End', 'Holiday', 'ATT_Time', 'NDays OT', 'Weekend OT', 'Holiday OT', 'OT Amount', 'No Pay Amount', 'No Pay non Payroll Amount'), NULL, 'A1');
        // Data
        $this->excel->getActiveSheet()->fromArray($data, null, 'A2');
        //set aligment to center for that merged cell (A1 to D1)
        $filename = 'Attendance Details - ' . $attendanceDate . ' .xls'; //save our workbook as this file name
        header('Content-Type: application/vnd.ms-excel;charset=utf-16'); //mime type
        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name
        header('Cache-Control: max-age=0'); //no cache
        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    /*Fixed salary declaration added*/
    function fetch_fixed_element_salaryDeclaration()
    {
        $convertFormat = convert_date_format_sql();
        $this->datatables->select("fedeclarationMasterID,Description,documentSystemCode,transactionCurrency,documentDate AS newDocumentDate,transactionCurrency,Description,confirmedYN,approvedYN,createdUserID");
        $this->datatables->from('srp_erp_ot_fixedelementdeclarationmaster');
        $this->datatables->where('companyID', $this->common_data['company_data']['company_id']);
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"FED",fedeclarationMasterID)');
        $this->datatables->add_column('edit', '$1', 'load_fixedElementDeclaration_action(fedeclarationMasterID, confirmedYN, approvedYN, createdUserID)');
        $this->datatables->edit_column('newDocumentDate', '<span >$1 </span>', 'convert_date_format(newDocumentDate)');
        echo $this->datatables->generate();
    }

    /*Fixed salary declaration added*/
    function save_fixed_element_salaryDeclaration()
    {
        $this->form_validation->set_rules('MasterCurrency', 'Currency', 'trim|required');
        $this->form_validation->set_rules('salary_description', 'Description', 'trim|required');
        $this->form_validation->set_rules('documentDate', 'Document date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_fixed_element_salaryDeclaration());
        }
    }


    /*Fixed salary declaration added*/
    function fetch_fixedElementDeclaration_Master()
    {
        $id = $this->input->post('id');
        $result = $this->Employee_model->fetch_FixedElementDeclarationMaster($id);
        if (!empty($result)) {
            $data['output'] = $result;
            echo $this->load->view('system/hrm/OverTimeManagementSalamAir/fixed_element_Declaration_detail', $data, true);
        } else {
            return false;
        }
    }

    function get_empFixedElementTotal()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $catID = $this->input->post('catID');
        $effectiveDate = $this->input->post('effectiveDate');

        $date_format_policy = date_format_policy();
        $effectiveDate = input_format_date($effectiveDate, $date_format_policy);

        $totalEntitle = $this->db->query("SELECT IF( ISNULL(SUM(amount)), round(0,transactionCurrencyDecimalPlaces) , FORMAT(SUM(amount), transactionCurrencyDecimalPlaces))
                                       AS totalEntitle FROM srp_erp_ot_pay_fixedelementdeclration
                                      WHERE  employeeNo={$empID} AND fixedElementID={$catID} AND
                                      companyID={$companyID}")->row('totalEntitle');
        echo json_encode($totalEntitle);
    }

    function save_fixed_element_declaration_detail()
    {
        echo json_encode($this->Employee_model->save_fixed_element_declaration());
    }

    function load_fixedElement_declaration_drilldown_table()
    {
        echo json_encode($this->Employee_model->load_fixedElement_declaration_drilldown_table());
    }

    function load_fixed_elementDeclaration_approval_confirmation()
    {
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('feDeclarationMasterID') ?? '');
        $data['extra'] = $this->Employee_model->fetch_FixedElementDeclarationMaster($masterID);
        $html = $this->load->view('system/hrm/OverTimeManagementSalamAir/fixed_elementDeclaration_print', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['master']['approvedYN']);
        }
    }

    function ConfirmFixedElementDeclaration()
    {
        echo json_encode($this->Employee_model->ConfirmFixedElementDeclaration());
    }

    function delete_fixed_element_declaration_master()
    {
        echo json_encode($this->Employee_model->delete_fixed_element_declaration_master());
    }

    function referback_fixed_element_declaration()
    {
        $masterID = $this->input->post('masterID');
        $masterDetail = $this->Employee_model->fetch_FixedElementDeclarationMaster($masterID);

        if ($masterDetail['approvedYN'] == 1) {
            echo json_encode(array('e', 'This document is already approved.<p>You can not refer back this.'));
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($masterID, 'FED');
            if ($status == 1) {
                echo json_encode(array('s', $masterDetail['documentSystemCode'] . ' Referred Back Successfully.'));
            } else {
                echo json_encode(array('e', $masterDetail['documentSystemCode'] . ' Error in refer back.'));
            }
        }
    }

    /** Over-time management for Salam-Air **/
    function save_OT_monthAddition()
    {
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');
        $this->form_validation->set_rules('monthDescription', 'Description', 'trim|required');
        $this->form_validation->set_rules('currencyID', 'Currency', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $unProcessedEmployees = $this->payrollNotProcessedEmployees();

            if ($unProcessedEmployees[0] == 's') {
                echo json_encode($this->Employee_model->save_OT_monthAddition());
            } else {
                echo json_encode($unProcessedEmployees);
            }
        }
    }


    function load_monthlyOTAdditionMaster()
    {
        $convertFormat = convert_date_format_sql();

        $this->datatables->select('monthlyAdditionsMasterID AS masterID, monthlyAdditionsCode, description, dateMA,
                            confirmedYN, isProcessed', false)
            ->from('srp_erp_ot_monthlyadditionsmaster')
            ->add_column('status', '$1', 'confirm(confirmedYN)')
            ->add_column('action', '$1', 'OT_monthlyAction(masterID, confirmedYN, isProcessed, monthlyAdditionsCode)')
            ->edit_column('dateMA', '<span >$1 </span>', 'convert_date_format(dateMA)')
            ->where('companyID', current_companyID());
        echo $this->datatables->generate();
    }

    function edit_OT_monthAddition()
    {
        echo json_encode($this->Employee_model->edit_OT_monthAddition());
    }

    function save_OT_employeeAsTemp()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $empHiddenID = $this->input->post('temp_empHiddenID');
            if (count($empHiddenID) > 0) {

                $companyID = current_companyID();
                $date_format_policy = date_format_policy();
                $dtDsc = $this->input->post('dateDesc');
                $empArr = $this->input->post('selectedEmployees');
                $dateDesc = input_format_date($dtDsc, $date_format_policy);
                $payYear = date('Y', strtotime($dateDesc));
                $payMonth = date('m', strtotime($dateDesc));
                $minDate = date('Y-m-01', strtotime($dateDesc));
                $entryDateLast = date('Y-m-t', strtotime($dateDesc));

                $masterData = $this->Employee_model->edit_OT_monthAddition();

                if ($masterData['isProcessed'] == 1) {
                    echo json_encode(['e', 'This document is already processed']);
                }

                if ($masterData['confirmedYN'] == 1) {
                    echo json_encode(['e', 'This document is already confirmed']);
                }


                /*** Check employee already pulled in a OT addition on selected month **/
                $isAlreadyPulled = $this->db->query("SELECT CONCAT(ECode,' - ', Ename2) AS empData
                                                     FROM srp_erp_ot_monthlyadditionsmaster AS addMaster
                                                     JOIN srp_erp_ot_monthlyadditiondetail AS addDetail
                                                     ON addDetail.monthlyAdditionsMasterID = addMaster.monthlyAdditionsMasterID
                                                     AND addDetail.companyID={$companyID}
                                                     JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = empID AND Erp_companyID={$companyID}
                                                     WHERE addMaster.companyID={$companyID} AND dateMA BETWEEN '{$minDate}'
                                                     AND '{$entryDateLast}' AND empID IN ({$empArr})")->result_array();

                if (!empty($isAlreadyPulled)) {
                    $employeesStr = implode('<br/>', array_column($isAlreadyPulled, 'empData'));

                    echo json_encode(array('e', 'Following employees are already added for <br/>monthly OT addition on selected Month <br/>' . $employeesStr));
                    exit;
                }

                $isPayrollProcessed = isPayrollProcessedForEmpGroup($empArr, $payYear, $payMonth, 'N');


                if (empty($isPayrollProcessed)) {
                    if (!empty($this->input->post('empHiddenID'))) {
                        $isProcessSuccess = $this->Employee_model->save_empMonthlyAdditionOT();
                    } else {
                        $isProcessSuccess[0] = 's';
                    }

                    if ($isProcessSuccess[0] == 's') {
                        echo json_encode($this->Employee_model->save_OT_employeeAsTemp());
                    } else {
                        echo json_encode($isProcessSuccess);
                    }

                } else {
                    $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                    echo json_encode(array('e', 'Payroll already processed on selected <br/> month (' . $dtDsc . ') for following employees <br/>' . $employeesStr));
                }

            } else {
                echo json_encode(array('e', 'There are no one selected to proceed'));
            }
        }

    }

    function fetch_fixed_element_declaration_approval()
    {
        /*
        * rejected = 1
        * not rejected = 0
        * */
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $companyID = $this->common_data['company_data']['company_id'];
        $currentuser = current_userID();
        $convertFormat = convert_date_format_sql();
        if ($approvedYN == 0) {
            $this->datatables->select('fedeclarationMasterID,srp_erp_ot_fixedelementdeclarationmaster.companyCode,srp_erp_ot_fixedelementdeclarationmaster.documentSystemCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved . approvedYN as approvedYN,documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_ot_fixedelementdeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_ot_fixedelementdeclarationmaster.documentSystemCode AS docCodeSalaryDeclaration', false);
            $this->datatables->from('srp_erp_ot_fixedelementdeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_ot_fixedelementdeclarationmaster.fedeclarationMasterID AND srp_erp_documentapproved.approvalLevelID = srp_erp_ot_fixedelementdeclarationmaster.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_ot_fixedelementdeclarationmaster.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'FED');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'FED');
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_ot_fixedelementdeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('documentSystemCode_str', '<a onclick=\'fetchPage("system/hrm/OverTimeManagementSalamAir/fixed_element_declaration_new","$2","HRMS")\'> $1 </a>', 'docCodeSalaryDeclaration, fedeclarationMasterID');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "FED", fedeclarationMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_fixed_element_declaration_action_approval(fedeclarationMasterID, approvalLevelID, approvedYN, documentApprovedID)');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('fedeclarationMasterID,srp_erp_ot_fixedelementdeclarationmaster.companyCode,srp_erp_ot_fixedelementdeclarationmaster.documentSystemCode,Description,transactionCurrency,confirmedYN,srp_erp_documentapproved . approvedYN as approvedYN,documentApprovedID,approvalLevelID,DATE_FORMAT(srp_erp_ot_fixedelementdeclarationmaster.documentDate,\'' . $convertFormat . '\') AS newDocumentDate, srp_erp_ot_fixedelementdeclarationmaster.documentSystemCode AS docCodeSalaryDeclaration', false);
            $this->datatables->from('srp_erp_ot_fixedelementdeclarationmaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_ot_fixedelementdeclarationmaster.fedeclarationMasterID');

            $this->datatables->where('srp_erp_documentapproved.documentID', 'FED');
            $this->datatables->where('srp_erp_ot_fixedelementdeclarationmaster.companyID', $companyID);
            $this->datatables->where('srp_erp_documentapproved.approvedEmpID', $currentuser);
            $this->datatables->group_by('srp_erp_ot_fixedelementdeclarationmaster.fedeclarationMasterID');
            $this->datatables->group_by('srp_erp_documentapproved.approvalLevelID');


            $this->datatables->add_column('purchaseOrderCode', '$1', 'approval_change_modal(purchaseOrderCode, purchaseOrderID, documentApprovedID, approvalLevelID, approvedYN, PO,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('documentSystemCode_str', '<a onclick=\'fetchPage("system/hrm/OverTimeManagementSalamAir/fixed_element_declaration_new","$2","HRMS")\'> $1 </a>', 'docCodeSalaryDeclaration, fedeclarationMasterID');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "FED", fedeclarationMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_fixed_element_declaration_action_approval(fedeclarationMasterID, approvalLevelID, approvedYN, documentApprovedID)');
            echo $this->datatables->generate();
        }

    }

    function save_fixed_element_declaration_approval()
    {
        $this->form_validation->set_rules('approval_status', 'Status', 'trim|required');
        if ($this->input->post('approval_status') == 2) {
            $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
        }
        $this->form_validation->set_rules('salaryOrderID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(['e', validation_errors()]);
        } else {
            echo json_encode($this->Employee_model->save_fixed_element_declaration_approval());
        }
    }

    public function save_empMonthlyAdditionOT()
    {
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $date_format_policy = date_format_policy();
            $updateCode = $this->input->post('updateCode');
            $empArr = $this->input->post('empHiddenID');
            $dtDsc = $this->input->post('dateDesc');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
            $payYear = date('Y', strtotime($dateDesc));
            $payMonth = date('m', strtotime($dateDesc));

            $masterData = $this->Employee_model->edit_OT_monthAddition();
            if ($masterData['isProcessed'] == 1) {
                exit(json_encode(['e', $updateCode . ' is already processed you can not make changes on this.']));
            }

            if ($masterData['confirmedYN'] == 1) {
                exit(json_encode(['e', $updateCode . ' is already confirmed you can not make changes on this.']));
            }

            $empArr = join(',', $empArr);
            $isPayrollProcessed = isPayrollProcessedForEmpGroup($empArr, $payYear, $payMonth, 'N');

            if (empty($isPayrollProcessed)) {
                echo json_encode($this->Employee_model->save_empMonthlyAdditionOT());
            } else {
                $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                $yearMonth = date('Y - M', strtotime($dtDsc));
                echo json_encode(array('e', 'Payroll already processed on selected <br/> month (' . $yearMonth . ') for following employees <br/>' . $employeesStr));
            }
        }
    }


    function loadOTDetail_table()
    {
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();
        $data['masterData'] = $this->Employee_model->edit_OT_monthAddition($masterID);


        $details = $this->db->query("SELECT detailTB.*, EIdNo, ECode, Ename2 AS empName
                                 FROM srp_erp_ot_monthlyadditiondetail AS detailTB
                                 JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                 WHERE monthlyAdditionsMasterID = {$masterID} AND detailTB.companyID = {$companyID} ORDER BY ECode ASC")->result_array();
        $data['details'] = $details;
        $this->load->view('system/hrm/OverTimeManagementSalamAir/monthly-add-table-view', $data);

    }

    function removeAllEmp_OT()
    {
        echo json_encode($this->Employee_model->removeAllEmp_OT());
    }

    function remove_emp_OT()
    {
        echo json_encode($this->Employee_model->remove_emp_OT());
    }

    function delete_fixedElement_declaration_detail()
    {
        echo json_encode($this->Employee_model->delete_fixedElement_declaration_detail());
    }

    function calculateOTBlockHours()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $dPlaces = $this->input->post('dPlaces');
        $h = $this->input->post('hours');
        $m = $this->input->post('minutes');
        $calHours = $totHours = ($h + ($m / 60));
        $totAmount = 0;

        //SELECT IF(startHour=0, 1, startHour) AS startHour, EndHour, slabDet.hourlyRate, otSlabsMasterID
        $slabDet = $this->db->query("SELECT startHour, EndHour, slabDet.hourlyRate, otSlabsMasterID
                                     FROM srp_erp_ot_groupemployees AS empTB
                                     JOIN srp_erp_ot_groupdetail AS grpDet ON grpDet.otGroupID = empTB.otGroupID  AND systemInputID=4
                                     JOIN srp_erp_ot_slabdetail AS slabDet ON slabDet.otSlabsMasterID = grpDet.slabMasterID
                                     AND slabDet.companyID={$companyID}
                                     WHERE empTB.companyID={$companyID} AND empID={$empID} ORDER BY startHour")->result_array();


        if (!empty($slabDet)) {
            foreach ($slabDet as $key => $row) {
                $starH = $row['startHour'];
                $endH = $row['EndHour'];
                $rate = $row['hourlyRate'];

                if ($totHours >= $starH) {
                    //$slabRangeInHours = ($endH - $starH) + 1;
                    $slabRangeInHours = ($endH - $starH);

                    if ($calHours > $slabRangeInHours) {
                        $slabHours = $slabRangeInHours;
                    } else {
                        $slabHours = $calHours;
                    }

                    $totAmount += $slabHours * $rate;
                    $calHours -= $slabHours;
                }

            }
            echo json_encode(['s', number_format($totAmount, $dPlaces, '.', ''), $row['otSlabsMasterID']]);
            //echo json_encode(['s', $totAmount,  $row['otSlabsMasterID']]);
        } else {
            echo json_encode(['e', 'There is not a valid slab detail for this employee']);
        }

    }

    function delete_OT_monthAddition()
    {
        $delID = $this->input->post('delID');

        $isConfirmed = $this->Employee_model->edit_OT_monthAddition($delID);
        $deleteArray = ['monthlyAdditionsMasterID' => $delID, 'companyID' => current_companyID()];

        if ($isConfirmed['isProcessed'] == 1) {
            echo json_encode(['e', 'This document is already processed, You can not delete this.']);
        } else if ($isConfirmed['confirmedYN'] == 1) {
            echo json_encode(['e', 'This document is already confirmed, You can not delete this.']);
        } else {
            $this->db->trans_start();
            $this->db->delete('srp_erp_ot_monthlyadditionsmaster', $deleteArray);
            $this->db->delete('srp_erp_ot_monthlyadditiondetail', $deleteArray);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Deleted successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Failed to delete record']);
            }
        }

    }

    function referBack_OT_monthAddition()
    {
        $referID = $this->input->post('referID');

        $isConfirmed = $this->Employee_model->edit_OT_monthAddition($referID);
        $where = ['monthlyAdditionsMasterID' => $referID, 'companyID' => current_companyID()];

        if ($isConfirmed['isProcessed'] == 1) {
            echo json_encode(['e', 'This document is already processed, You can not refer back this.']);
        } else {
            $this->db->trans_start();
            $data_master['confirmedYN'] = 2;
            $data_master['confirmedByEmpID'] = '';
            $data_master['confirmedByName'] = '';
            $data_master['confirmedDate'] = '';
            $this->db->where($where)->update('srp_erp_ot_monthlyadditionsmaster', $data_master);

            $this->db->trans_complete();
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', 'Refer backed successfully']);
            } else {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Failed to delete record']);
            }
        }
    }

    function update_userName()
    {

        $this->form_validation->set_rules('UserName', 'Username', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_userName());
        }
    }

    function fetch_family_details()
    {
        $empID = $this->input->post('empID');
        $fm_data = $this->Employee_model->fetch_family_details($empID, 1);
        if (!empty($fm_data)) {
            foreach ($fm_data as $key => $row) {
                $imgPath = $row['image'];
                if (!empty($imgPath)) {
                    $imgPath = $this->s3->createPresignedRequest($imgPath, '1 hour');
                }
                $fm_data[$key]['image'] = $imgPath;
            }
        }
        $data['empArray'] = $fm_data;
        $this->load->view('system/hrm/ajax/ajax-employee_profile_load_info', $data);
    }

    function saveFamilyDetails()
    {
        $this->form_validation->set_rules('employeeID', 'ID', 'trim|required');
        $this->form_validation->set_rules('name', 'Name', 'trim|required');
        $this->form_validation->set_rules('nationality', 'Nationality', 'required|numeric');
        $this->form_validation->set_rules('relationshipType', 'Relationship', 'required|numeric');
        $this->form_validation->set_rules('DOB', 'Date of Birth', 'trim|required');
        $this->form_validation->set_rules('gender', 'Gender', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            $error_message = validation_errors();
            echo json_encode(array('error' => 1, 'message' => $error_message));
        } else {
            echo $this->Employee_model->insert_familyDetails();
        }
    }

    function ajax_update_familydetails()
    {
        $result = $this->Employee_model->xeditable_update('srp_erp_family_details', 'empfamilydetailsID');
        if ($result) {
            echo json_encode(array('error' => 0, 'message' => 'updated'));
        } else {
            echo json_encode(array('error' => 1, 'message' => 'updated Fail'));
        }
    }

    function delete_familydetail()
    {
        echo json_encode($this->Employee_model->delete_familydetail());
    }

    function familyimage_upload()
    {
        $fileName = $this->input->post('empfamilydetailsID') . '_FD_' . time();
        $file = $_FILES['document_file'];
        $ext = pathinfo($file['name'], PATHINFO_EXTENSION);

        if ($file['error'] == 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
        }

        $allowed_types = 'gif|png|jpg|jpeg';
        $allowed_types = explode('|', $allowed_types);
        if (!in_array($ext, $allowed_types)) {
            die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
        }

        $size = $file['size'];
        $size = number_format($size / 1048576, 2);

        if ($size > 1) {
            die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 1MB )"]));
        }

        $fileName = "images/family_images/$fileName.$ext";
        $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

        if (!$s3Upload) {
            die(json_encode(['e', 'Employee image upload failed ']));
        }

        $upData = ['image' => $fileName];
        $result = $this->db->where('empfamilydetailsID', $this->input->post('empfamilydetailsID'))->update('srp_erp_family_details', $upData);

        if ($result) {
            echo json_encode(array('s', 'Image uploaded successfully'));
        }
    }

    function familyimage_upload_old()
    {

        $fileName = $this->input->post('empfamilydetailsID') . '_FD_' . time();
        $config['upload_path'] = realpath(APPPATH . '../images/family_images');
        $config['allowed_types'] = 'gif|jpg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|txt|rtf|msg';
        $config['max_size'] = '200000';
        $config['file_name'] = $fileName;

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        if (!$this->upload->do_upload("document_file")) {
            echo json_encode(array('e', 'Upload failed ' . $this->upload->display_errors()));
        } else {
            $data1 = $this->upload->data();
            $fileName = $this->input->post('empfamilydetailsID') . '_FD_' . time() . $data1["file_ext"];

            $upData = array(
                'image' => $fileName,
            );
            $result = $this->db->where('empfamilydetailsID', $this->input->post('empfamilydetailsID'))->update('srp_erp_family_details', $upData);

            if ($result) {
                echo json_encode(array('s', 'Image uploaded successfully'));
            }
        }
    }


    function fetch_family_attachment_details()
    {
        $path = base_url('images/family_attachment/');
        $companyid = $this->common_data['company_data']['company_id'];
        $empFamilyDetailsID = $this->input->post('empFamilyDetailsID');
        $where = "companyID = " . $companyid . " And empFamilyDetailsID = " . $empFamilyDetailsID;
        $this->datatables->select("attachmentID,documentID,empID,empFamilyDetailsID,attachmentDescription,myFileName,concat('$path',myFileName) as myFileName2", false);
        $this->datatables->from('srp_erp_familydetailsattachments');
        $this->datatables->where($where);
        $this->datatables->add_column('document', '$1', 'getDocumentfamilyAttachment(documentID)');
        $this->datatables->add_column('edit', '<a onclick="delete_family_attachment($1,$2)"><span title="Delete" rel="tooltip" class="glyphicon glyphicon-trash" style="color:#d15b47;"></span></a>', 'attachmentID,empFamilyDetailsID');
        //$this->datatables->add_column('desc', '$1', 'generate_encrypt_link(myFileName, attachmentDescription)');
        $this->datatables->add_column('desc', '$1', 'generate_s3_link(myFileName, attachmentDescription)');
        echo $this->datatables->generate();
    }


    function familyattachment_uplode()
    {

        $this->form_validation->set_rules('attachmentDescription', 'Description', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            $error_message = validation_errors();
            echo json_encode(array('e', $error_message));
        } else {
            $fileName = $this->input->post('empfamilydetailsAttachID') . '_FDA_' . time();

            $file = $_FILES['document_file'];

            if ($file['error'] == 1) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. (maximum 5MB)."]));
            }

            $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
            $allowed_types = 'gif|jpg|jpeg|png|doc|docx|ppt|pptx|ppsx|pdf|xls|xlsx|xlsxm|rtf|msg|txt|7zip|zip|rar';
            $allowed_types = explode('|', $allowed_types);
            if (!in_array($ext, $allowed_types)) {
                die(json_encode(['e', "The file type you are attempting to upload is not allowed. ( .{$ext} )"]));
            }

            $size = $file['size'];
            $size = number_format($size / 1048576, 2);

            if ($size > 5) {
                die(json_encode(['e', "The file you are attempting to upload is larger than the permitted size. ( Maximum 5MB )"]));
            }

            $fileName = "family_attachment/$fileName.$ext";
            $s3Upload = $this->s3->upload($file['tmp_name'], $fileName);

            if (!$s3Upload) {
                die(json_encode(['e', 'Error in document upload location configuration']));
            }

            $data = array(
                "documentID" => $this->input->post('documentID'),
                "empID" => $this->input->post('empIDFamilyAttach'),
                "empFamilyDetailsID" => $this->input->post('empfamilydetailsAttachID'),
                "attachmentDescription" => $this->input->post('attachmentDescription'),
                "companyID" => current_companyID(),
                "myFileName" => $fileName
            );

            $result = $this->db->insert('srp_erp_familydetailsattachments', $data);

            if ($result) {
                echo json_encode(array('s', 'File uploaded successfully'));
            }
        }
    }

    function delete_family_attachment()
    {
        echo json_encode($this->Employee_model->delete_family_attachment());
    }

    public function fetch_leave_conformation()
    {
        $companyID = $this->common_data['company_data']['company_id'];
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $empID = current_userID();

        $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');
        if($leaveApprovalWithGroup==1){
            $query_leave_group_policy='AND LM.leaveGroupID = LAS.leaveGroupID';
        }else{
            $query_leave_group_policy='';
        }
        
        if ($approvedYN == 1) {  
            $this->datatables->select("leaveMasterID,lMaster.documentCode AS documentCode,CONCAT(ECode, ' - ', Ename2) AS empName, confirmedYN,
                appTB.approvedYN AS approvedYN, confirmedByEmpID, lMaster.empID, approvalLevelID AS currentLevelNo, startDate, endDate");
            $this->datatables->from('srp_erp_leavemaster AS lMaster');    
            $this->datatables->join('srp_erp_documentapproved AS appTB ', 'lMaster.leaveMasterID = appTB.documentSystemCode');
            $this->datatables->join('srp_employeesdetails ', 'srp_employeesdetails.EIdNo = lMaster.empID'); 
            $this->datatables->where('lMaster.companyID', $companyID);  
            $this->datatables->where('lMaster.approvedYN', $approvedYN);
            $this->datatables->where('appTB.approvedEmpID', current_userID());
            $this->datatables->where('appTB.documentID', 'LA');
            $this->datatables->where('appTB.approvalLevelID', 1);
            $this->datatables->where('appTB.isCancel !=1');
            $this->datatables->where('(lMaster.requestForCancelYN = 0 OR lMaster.requestForCancelYN IS NULL )');
            $this->datatables->edit_column('startDate', '<center>$1</center>', 'convert_date_format(startDate)');
            $this->datatables->edit_column('endDate', '<center>$1</center>', 'convert_date_format(endDate)');
            $this->datatables->add_column('levelNo', '<center>Level $1</center>', 'currentLevelNo');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LA",leaveMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_LA_approval_action(leaveMasterID,confirmedYN,approvedYN,confirmedByEmpID,currentLevelNo)');
            echo $this->datatables->generate();
        } else {

            $setupData = getLeaveApprovalSetup();
            $approvalLevel = $setupData['approvalLevel'];
            $approvalSetup = $setupData['approvalSetup'];
            $approvalEmp_arr = $setupData['approvalEmp'];
            $query1='';
            $query2='';
            
            $x = 0;
            $str = 'CASE';
            while ($x < $approvalLevel) {
                $level = $x + 1;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);
                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';              
                if ($approvalType == 3) {
                    /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                    $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/
                    $query1='';
                    $query2='';
                    $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                    $hrManagerID = array_column($hrManagerID, 'empID');

                    if (!empty($hrManagerID)) {
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ';
                        foreach ($hrManagerID as $key => $hrManagerRow) {
                            $str .= ($key > 0) ? ' OR' : '';
                            $str .= ' ( \'' . $empID . '\' = ' . $hrManagerRow . ')';
                        }
                        $str .= ' , 1, 0 ) ';
                    }
    
                }else if($approvalType == 4){
                    
                    if (!empty($setupData['covering'])) {
                        $query1='JOIN srp_erp_leave_covering_employee AS cov ON cov.leaveapplicationID = lMaster.leaveMasterID';
                        $query2='AND cov.coveringID =' . $empID;
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ';
                        foreach ($setupData['covering'] as $key => $coveringRow) {

                           // $c = (array_key_exists($coveringRow['currentLevelNo'], $setupData['covering'])) ? $approvalEmp_arr[$level] : [];
                        //    if($coveringRow['currentLevelNo']==$level){
                            $str .= ($key > 0) ? ' OR' : '';
                            $str .= ' ( \'' . $empID . '\' = ' . $coveringRow['coveringID'] . ')';
                          // }
                        }
                        $str .= ', 1, 0 ) ' ;
                    }
                } else {
                    $query1='';
                    $query2='';
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if($managerType){
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ' . $managerType . ' = ' . $empID . ', 1, 0 ) ';
                    }
                    
                }
                $x++;
            }
            $str .= 'END AS isInApproval';

            $this->datatables->select("leaveMasterID, documentCode, CONCAT(ECode, ' - ', empName) AS empName, approvedYN, empID, 
                            currentLevelNo, repManager, startDate, endDate");
                             

                            $companyID = current_companyID();
                            $userID = current_userID();
                            
                            $this->datatables->from("(SELECT * FROM (
                                        SELECT
                                            LM.leaveMasterID,
                                            'LA' AS DocumentID,
                                            LM.documentCode,
                                            LM.comments AS Narration,
                                            CONCAT(empTB.ECode, ' - ', empTB.Ename1) AS suppliercustomer,
                                            empTB.ECode,
                                            empTB.Ename1 AS empName,
                                            empTB.EIdNo as empID,
                                            \"\" AS currency,
                                            \"\" AS Amount,
                                            LM.currentLevelNo AS LEVEL,
                                            LM.companyID AS companyID,
                                            \"\" AS decimalplaces,
                                            LM.confirmedByName,
                                            DATE_FORMAT(LM.confirmedDate, '%b %D %Y') AS date,
                                            \"\" AS documentApprovedID,
                                            \"\" AS payrollYear,
                                            LM.endDate AS endDate,
                                            LM.startDate AS startDate,
                                            \"\" AS segmentcodedes,
                                            \"\" AS repManager,
                                            LM.approvedYN,
                                            LM.currentLevelNo
                                        FROM
                                            `srp_erp_leavemaster` AS `LM`
                                            JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = LM.empID
                                            JOIN srp_erp_leaveapprovalsetup AS LAS ON LM.currentLevelNo = LAS.approvalLevel AND  LAS.companyID='{$companyID}' 
                                            {$query_leave_group_policy}
                                        WHERE
                                            `LM`.`approvedYN` = '0' 
                                            AND `LM`.`confirmedYN` = '1' 
                                            AND `LM`.`companyID` = '{$companyID}' 
                                            AND (
                                                (LAS.approvalType = 1 AND LM.empID IN (
                                                    SELECT emp_manager.empID 
                                                    FROM srp_employeesdetails AS emp_detail
                                                    JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID 
                                                    WHERE emp_manager.active = 1 
                                                    AND emp_manager.companyID = '{$companyID}' 
                                                    AND emp_manager.managerID = '{$userID}'
                                                ))
                                                OR
                                                (LAS.approvalType = 2 AND LM.empID IN (
                                                    SELECT emp_detail.EIdNo 
                                                    FROM srp_employeesdetails AS emp_detail
                                                    JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                                                    JOIN srp_erp_employeemanagers AS top_manager ON top_manager.empID = emp_manager.managerID
                                                    AND emp_manager.active=1 AND top_manager.active=1 
                                                    WHERE emp_manager.active = 1 
                                                    AND emp_manager.companyID = '{$companyID}' 
                                                    AND top_manager.managerID = '{$userID}'
                                                ))
                                                OR
                                                (LAS.approvalType = 3 AND {$userID} IN (
                                                    SELECT emp_detail.EIdNo 
                                                    FROM srp_employeesdetails AS emp_detail
                                                    JOIN srp_erp_leaveapprovalsetuphremployees AS hremployee ON emp_detail.EIdNo = hremployee.empID 
                                                    WHERE hremployee.companyID = '{$companyID}' AND hremployee.empID = '{$userID}'
                                                ))
                                                OR
                                                (LAS.approvalType = 4 AND {$userID} IN (
                                                    SELECT
                                                        emp_detail.EIdNo 
                                                    FROM
                                                        srp_employeesdetails AS emp_detail
                                                        JOIN srp_erp_leave_covering_employee AS coveringemployee ON emp_detail.EIdNo = coveringemployee.coveringID 
                                                    WHERE
                                                        emp_detail.Erp_companyID = '{$companyID}' 
                                                        AND coveringemployee.leaveapplicationID IN (
                                                            SELECT
                                                                LM.leaveMasterID AS DocumentAutoID 
                                                            FROM
                                                                `srp_erp_leavemaster` AS `LM`
                                                                JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = LM.empID
                                                                JOIN srp_erp_leaveapprovalsetup AS LAS ON LM.currentLevelNo = LAS.approvalLevel  AND LAS.companyID='{$companyID}'
                                                                {$query_leave_group_policy} 
                                                            WHERE
                                                                `LM`.`approvedYN` = '0' 
                                                                AND `LM`.`companyID` = '{$companyID}' 
                                                        ) 
                                                ))
                                                OR
                                                (LAS.approvalType = 5 AND LM.empID IN (
                                                    SELECT emp_detail.EIdNo 
                                                    FROM srp_employeesdetails AS emp_detail
                                                    JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                                                    JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                                                    WHERE emp_dep.isactive = 1 
                                                    AND emp_dep.Erp_companyID = '{$companyID}' 
                                                    AND srp_dep.hod_id = '{$userID}'
                                                ))
                                            )
                                            
                                        ) as t
                            ) AS t1");
                  
                //echo $this->db->last_query();exit;
            // $this->datatables->where('t1.isInApproval', 1);
            $this->datatables->edit_column('startDate', '<center>$1</center>', 'convert_date_format(startDate)');
            $this->datatables->edit_column('endDate', '<center>$1</center>', 'convert_date_format(endDate)');
            $this->datatables->add_column('levelNo', '<center>Level $1</center>', 'currentLevelNo');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LA",leaveMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_LA_approval_action(leaveMasterID,confirmedYN,approvedYN,confirmedByEmpID, currentLevelNo)');
            echo $this->datatables->generate();
        }
    }

    public function fetch_leave_cancellation_approval()
    {
        $companyID = $this->common_data['company_data']['company_id'];
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $empID = current_userID();
        
        if ($approvedYN == 1) {
            $this->datatables->select("leaveMasterID,lMaster.documentCode AS documentCode,ECode,CONCAT(ECode, ' - ', Ename2) AS empName,confirmedYN,
                    appTB.approvedYN AS approvedYN, confirmedByEmpID,lMaster.empID, approvalLevelID AS currentLevelNo, startDate, endDate");
            $this->datatables->from('srp_erp_leavemaster AS lMaster');
            $this->datatables->join('srp_erp_documentapproved AS appTB ', 'lMaster.leaveMasterID = appTB.documentSystemCode');
            $this->datatables->join('srp_employeesdetails ', 'srp_employeesdetails.EIdNo = lMaster.empID');
            $this->datatables->where('lMaster.companyID', $companyID);  
            $this->datatables->where('lMaster.approvedYN', $approvedYN);
            $this->datatables->where('appTB.approvedEmpID', current_userID());
            $this->datatables->where('appTB.documentID', 'LA');
            $this->datatables->where('lMaster.cancelledYN', '1');
            $this->datatables->where('appTB.isCancel', '1');
            $this->datatables->edit_column('startDate', '<center>$1</center>', 'convert_date_format(startDate)');
            $this->datatables->edit_column('endDate', '<center>$1</center>', 'convert_date_format(endDate)');
            $this->datatables->add_column('levelNo', '<center>Level $1</center>', 'currentLevelNo');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LA",leaveMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_LA_approval_action(leaveMasterID,confirmedYN,approvedYN,confirmedByEmpID,currentLevelNo)');
            echo $this->datatables->generate();
        } else {

            $setupData = getLeaveApprovalSetup();
            $approvalLevel = $setupData['approvalLevel'];
            $approvalSetup = $setupData['approvalSetup'];
            $approvalEmp_arr = $setupData['approvalEmp'];

            $x = 0;
            $str = 'CASE';
            while ($x < $approvalLevel) {
                $level = $x + 1;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                if ($approvalType == 3) {
                    /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                    $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                    $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                    $hrManagerID = array_column($hrManagerID, 'empID');

                    if (!empty($hrManagerID)) {
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ';
                        foreach ($hrManagerID as $key => $hrManagerRow) {
                            $str .= ($key > 0) ? ' OR' : '';
                            $str .= ' ( \'' . $empID . '\' = ' . $hrManagerRow . ')';
                        }
                        $str .= ' , 1, 0 ) ';
                    }
                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    if($managerType){
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ' . $managerType . ' = ' . $empID . ', 1, 0 ) ';
                    }
                   
                }


                $x++;
            }
            $str .= 'END AS isInApproval';


            $this->datatables->select("leaveMasterID, documentCode, ECode, CONCAT(ECode, ' - ', Ename2) AS empName, 0 AS approvedYN, HOD, empID, 
                    currentLevelNo, repManager, startDate, endDate");
            $this->datatables->from("( SELECT *, {$str} FROM (
                                            SELECT leaveMasterID, documentCode, ECode, Ename2, approvedYN, lMaster.empID, currentLevelNo,
                                            repManager, coveringEmpID AS coveringEmp, startDate, endDate
                                            FROM srp_erp_leavemaster AS lMaster
                                            JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
                                            LEFT JOIN (
                                                SELECT empID, managerID AS repManager
                                                FROM srp_erp_employeemanagers WHERE active = 1
                                            ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID
                                            WHERE lMaster.companyID = {$companyID}  AND lMaster.confirmedYN = 1 AND
                                            lMaster.approvedYN = '1' AND lMaster.cancelledYN = '0' AND requestForCancelYN = 1
                                        ) AS leaveData
                                        LEFT JOIN (
                                            SELECT managerID AS topManager, empID AS topEmpID
                                            FROM srp_erp_employeemanagers WHERE active = 1
                                        ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID

                                        LEFT JOIN (
                                            SELECT hod_id AS HOD,EmpID AS EmpNew
                
                                            FROM srp_empdepartments  AS dpt
                                            JOIN srp_departmentmaster AS departmentmaster  ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                            WHERE dpt.isPrimary = 1
                                            ) AS HodData ON leaveData.empID = HodData.EmpNew
                                       ) AS t1");
            $this->datatables->where('t1.isInApproval', 1);
            $this->datatables->add_column('startDate', '<center>$1</center>', 'convert_date_format(startDate)');
            $this->datatables->add_column('endDate', '<center>$1</center>', 'convert_date_format(endDate)');
            $this->datatables->add_column('levelNo', '<center>Level $1</center>', 'currentLevelNo');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LA",leaveMasterID)');
            $this->datatables->add_column('edit', '$1', 'load_LA_approval_action(leaveMasterID,confirmedYN,approvedYN,confirmedByEmpID, currentLevelNo,1)');
            echo $this->datatables->generate();
        }
    }

    public function leaveApproval()
    {
        $this->form_validation->set_rules('status', 'Leave Application Status', 'trim|required');
        if ($this->input->post('status') == 2) {
            $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
        }
        $this->form_validation->set_rules('hiddenLeaveID', 'Leave Application ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            if ($this->input->post('isFromCancelYN') == 1) {
                die(json_encode($this->Employee_model->leave_cancellation_approval()));
            }
            echo json_encode($this->Employee_model->save_leaveApproval());
        }
    }

    /** SSO slab master**/
    public function save_ssoSlabMaster()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $description = trim($this->input->post('description') ?? '');

            $isExist = $this->db->query("SELECT description FROM srp_erp_ssoslabmaster WHERE companyID={$companyID}
                                         AND description='{$description}'")->row('description');

            if (empty($isExist)) {
                $data = array(
                    'description' => $description,
                    'companyID' => $companyID,
                    'createdPCID' => current_pc(),
                    'createdUserGroup' => current_user_group(),
                    'createdUserID' => current_userID(),
                    'createdUserName' => current_employee(),
                    'createdDateTime' => current_date()
                );

                $this->db->insert('srp_erp_ssoslabmaster', $data);
                if ($this->db->affected_rows() > 0) {
                    $insertID = $this->db->insert_id();
                    echo json_encode(['s', 'Slab master successfully created', $insertID]);
                } else {
                    echo json_encode(['e', 'Error in slab master create process']);
                }
            } else {
                echo json_encode(['e', 'This description is already exist.']);
            }
        }
    }

    function fetch_sso_slab_master()
    {
        $this->datatables->select("ssoSlabMasterID,Description");
        $this->datatables->from('srp_erp_ssoslabmaster');
        $this->datatables->where('companyID', current_companyID());
        $this->datatables->add_column('edit', '$1', 'sso_slab_action(ssoSlabMasterID,Description)');
        echo $this->datatables->generate();
    }

    function save_sso_slabs_detail()
    {
        $this->form_validation->set_rules('start_amount', 'Start amount', 'trim|required');
        $this->form_validation->set_rules('end_amount', 'End amount', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $masterID = $this->input->post('masterID');
            $start_amount = str_replace(',', '', $this->input->post('start_amount'));
            $end_amount = $this->input->post('end_amount');

            if ($start_amount >= $end_amount) {
                die(json_encode(['e', 'End range amount should be greater than start range amount.<br/>Please refresh the page and try again.']));
            }

            $lastRange = $this->db->query("SELECT * FROM srp_erp_ssoslabdetails WHERE companyID={$companyID}
                                         AND ssoSlabMasterID={$masterID} ORDER BY endRangeAmount DESC LIMIT 1")->row_array();

            if (!empty($lastRange)) {
                $endRangeAmount = $lastRange['endRangeAmount'];

                if ($start_amount != ($endRangeAmount + 1)) {
                    die(json_encode(['e', 'Start range amount should be greater than last inserted end range.
                                            <br/>Please refresh the page and try again.']));
                }
            }

            $data = array(
                'ssoSlabMasterID' => $masterID,
                'startRangeAmount' => $start_amount,
                'endRangeAmount' => $end_amount,
                'companyID' => $companyID,
                'createdPCID' => current_pc(),
                'createdUserGroup' => current_user_group(),
                'createdUserID' => current_userID(),
                'createdUserName' => current_employee(),
                'createdDateTime' => current_date()
            );

            $this->db->insert('srp_erp_ssoslabdetails', $data);
            if ($this->db->affected_rows() > 0) {
                echo json_encode(['s', 'Slab detail inserted successfully.']);
            } else {
                echo json_encode(['e', 'Error in slab detail insert process']);
            }
        }
    }

    function delete_ssoSlabDetail()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('detailID', 'Slab Detail ID', 'trim|required');
        $this->form_validation->set_rules('strRange', 'Start Range Amount', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $companyID = current_companyID();
            $masterID = $this->input->post('masterID');
            $detailID = $this->input->post('detailID');
            $strRange = $this->input->post('strRange');

            $where = [
                'companyID' => $companyID,
                'ssoSlabMasterID' => $masterID,
            ];

            $this->db->select("MAX(startRangeAmount) AS lastStartRange");
            $this->db->from("srp_erp_ssoslabdetails");
            $this->db->where($where);
            $lastStartRange = $this->db->get()->row('lastStartRange');

            if ($lastStartRange != $strRange) {
                die(json_encode(['e', 'First delete slab ranges greater than this slab range.']));
            }

            $where['ssoSlabDetailID'] = $detailID;

            $this->db->where($where)->delete('srp_erp_ssoslabdetails');

            if ($this->db->affected_rows() > 0) {
                echo json_encode(['s', 'Slab detailed deleted successfully.']);
            } else {
                echo json_encode(['e', 'Error in slab detail delete process']);
            }
        }
    }

    function save_ssoSlabsFormula()
    {
        $detailID = $this->input->post('payGroupID');
        $formulaStr = $this->input->post('formulaString');
        $salaryCategories = $this->input->post('salaryCategoryContainer');
        $salaryCategories = (trim($salaryCategories) == '') ? null : $salaryCategories;
        $ssoCategories = $this->input->post('SSOContainer');
        $ssoCategories = (trim($ssoCategories) == '') ? null : $ssoCategories;
        $payGroupCategories = $this->input->post('payGroupContainer');
        $payGroupCategories = (trim($payGroupCategories) == '') ? null : $payGroupCategories;
        $companyID = current_companyID();

        if ($payGroupCategories != null) {
            /*************************************************************************************************
             * Is the formula contain pay group check, than the pay group is only contains salary categories
             *************************************************************************************************/
            $payGroupData = $this->db->query("SELECT masterTB.description FROM srp_erp_paygroupmaster AS masterTB
                                              JOIN srp_erp_paygroupformula AS formula ON formula.payGroupID=masterTB.payGroupID
                                              WHERE masterTB.companyID = '{$companyID}' AND formula.payGroupID IN ({$payGroupCategories})
                                              AND (ssoCategories IS NOT NULL OR payGroupCategories IS NOT NULL )")->result_array();

            if (!empty($payGroupData)) {
                $description = implode('<br/>-', array_column($payGroupData, 'description'));
                die(json_encode(['e', 'Following pay group/groups should only contain salary categories<br/>-' . $description]));
            }
        }

        $where = [
            'companyID' => $companyID,
            'ssoSlabDetailID' => $detailID,
        ];

        $data = [
            'formulaString' => $formulaStr,
            'salaryCategories' => $salaryCategories,
            'ssoCategories' => $ssoCategories,
            'payGroupCategories' => $payGroupCategories,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        ];

        $this->db->trans_start();
        $this->db->where($where)->update('srp_erp_ssoslabdetails', $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Record inserted successfully']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process']);
        }

    }

    function ajax_update_ssoSlabDescription()
    {
        $companyID = current_companyID();
        $masterID = $this->input->get('masterID');
        $description = trim($this->input->post('value') ?? '');

        if ($description == '') {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Description is required.');
        }

        $where = [
            'companyID' => $companyID,
            'ssoSlabMasterID' => $masterID,
        ];

        $isExist = $this->db->query("SELECT ssoSlabMasterID FROM srp_erp_ssoslabmaster WHERE companyID={$companyID}
                                         AND description='{$description}'")->row('ssoSlabMasterID');


        if (!empty($isExist) && $isExist != $masterID) {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('This description is already exist.');
        }

        $data = [
            'description' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        ];

        $this->db->trans_start();
        $this->db->where($where)->update('srp_erp_ssoslabmaster', $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Description updated successfully']);
        } else {
            $this->db->trans_rollback();
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Error in description Update process');
        }
    }

    function save_salary_category()
    {
        $this->form_validation->set_rules('nopaySystemID', 'Description ', 'trim|required');
        $this->form_validation->set_rules('salaryCategoryID', 'Salary Category', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_salary_category());
        }
    }

    function edit_salary_category()
    {
        $this->form_validation->set_rules('noPaySystemIDHidden', 'Description ', 'trim|required');
        $this->form_validation->set_rules('salaryCategoryID', 'Salary Category', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_salary_category());
        }
    }

    function add_my_attendees()
    {
        $this->form_validation->set_rules('attendees[]', 'Attendees ', 'trim|required');
        $this->form_validation->set_rules('empID', 'employee ', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->add_my_attendees());
        }
    }

    function load_my_attendees()
    {
       
        $convertFormat = convert_date_format_sql();
        $empID = trim($this->input->post('empID') ?? '');
       
        $companyID = $this->common_data['company_data']['company_id'];
        $currentuserid = current_userID();

        $sSearch = $this->input->post('sSearch');
        $searches = '';
        if ($sSearch) {
            $searche = str_replace("\\", "\\\\", $sSearch);
            $searches = " AND (( srp_employeesdetails.ECode Like '%$searche%')  OR (srp_employeesdetails.Ename1 Like '%$sSearch%'))";
        }
        $where = "srp_erp_employee_attendees.empID = " . $empID . $searches ."";
        $this->datatables->select('srp_erp_employee_attendees.id as autoID,srp_employeesdetails.ECode,srp_employeesdetails.Ename1,srp_employeesdetails.UserName,srp_employeesdetails.EIdNo', false);
        $this->datatables->from('srp_erp_employee_attendees');
        $this->datatables->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_employee_attendees.attendeeID');
        //$this->datatables->where('srp_erp_employee_attendees.empID',$empID);
        $this->datatables->where($where);
        $this->datatables->add_column('edit', '$1', 'delete_assign_attendees(autoID)');
        echo $this->datatables->generate();
    }

    function delete_assign_attenddes()
    {
        echo json_encode($this->Employee_model->delete_assign_attenddes());
    }

    function loadLeaveTypeDropDown()
    {

        $empID = $this->input->post('empID');
        $leaveMasterID = $this->input->post('leaveMasterID');
        $confirmedYN = trim($this->input->post('confirmedYN') ?? '');

        if ($empID != '') {
            $companyID = current_companyID();
            $output = $this->db->query("SELECT policyMasterID, lType.leaveTypeID, lType.description, leaveGroupDetailID, isSickLeave,
                                        groupDet.leaveGroupID, noOfDays, isAllowminus, isCalenderDays, noOfHours, noOfHourscompleted
                                        FROM srp_employeesdetails AS empTB
                                        LEFT JOIN srp_erp_leavegroupdetails AS groupDet ON empTB.leaveGroupID=groupDet.leaveGroupID
                                        LEFT JOIN  srp_erp_leavetype AS lType ON groupDet.leaveTypeID=lType.leaveTypeID
                                        WHERE EIdNo='{$empID}' AND empTB.Erp_companyID='{$companyID}'
                                        AND lType.companyID='{$companyID}' AND typeConfirmed=1 ORDER BY sortOrder")->result_array();
        }
        $html = '<select name="leaveTypeID" class="form-control frm_input" onchange="getemplate(this); isAnnual(this)" id="leaveTypeID">';
        $html .= '<option value=""></option>';
        if (!empty($output)) {
            $isBasedOnSortOrder = getPolicyValues('SL', 'All');
            $isSickLeavePulled = 0;
            $leaveTypeIDPost = '';

            $leaveDetais = $this->db->where('leaveMasterID',$leaveMasterID)->from('srp_erp_leavemaster')->get()->row_array();
            if($leaveDetais){
                $leaveTypeIDPost = $leaveDetais['leaveTypeID'];
            }

            foreach ($output as $value) {
                $policyMasterID = $value['policyMasterID'];
                $leaveTypeID = $value['leaveTypeID'];
                $isSickLeave = $value['isSickLeave'];
                $leaveGroupID = $value['leaveGroupID'];
                $isValid = 'Y';

                /************************************************************************************************
                 * If document confirmed then no need to validate sick leave short order
                 ************************************************************************************************/
                if ($confirmedYN != 1) {
                    /*** Validate is sick leave based on sort order***/
                    if ($isBasedOnSortOrder == 1 && $isSickLeave == 1) {
                        if ($isSickLeave == 1 && $isSickLeavePulled == 0) {
                            $leaveData = $this->Employee_model->employeeLeaveSummery($empID, $leaveTypeID, $policyMasterID);
                            if ($leaveData['balance'] == 0) {
                                $isValid = 'N';
                            } else {
                                $isSickLeavePulled = 1;
                            }
                        } else {
                            $isValid = 'N';
                        }
                    }
                }

                $selected = '';
                if($leaveTypeID == $leaveTypeIDPost){
                    $selected = ' selected';
                }

                if ($isValid == 'Y') {
                    $html .= '<option data-policyMasterID="' . $policyMasterID . '" data-leaveTypeID="' . $leaveTypeID . '" data-leaveGroupID="' . $leaveGroupID . '"';
                    $html .= ' data-isAllowminus="' . $value['isAllowminus'] . '" data-isCalenderDays="' . $value['isCalenderDays'] . '"';
                    $html .= ' data-isAllowminus="' . $value['isAllowminus'] . '" data-isCalenderDays="' . $value['isCalenderDays'] . '"';
                    $html .= ' value="' . $value['leaveTypeID'] . '" '.$selected .'>' . $value['description'] . '</option>';
                }
            }

        }
        $html .= '</select>';

        echo $html;


    }

    function save_company_active()
    {
        echo json_encode($this->Employee_model->save_company_active());
    }

    function get_noPaySalaryCategories()
    {
        $type = $this->input->post('payType');
        $selectedID = $this->input->post('selectedID');
        $data = system_salary_cat_drop_nopay($type);

        $response = '<option value="">Select Description</option>';

        if (!empty($data)) {
            foreach ($data as $row) {
                $selected = ($row['salaryCategoryID'] == $selectedID) ? 'selected' : '';
                $response .= '<option value="' . $row['salaryCategoryID'] . '"  ' . $selected . '>' . $row['salaryDescription'] . '</option>';
            }
        }

        echo $response;
    }

    function save_user_change_password()
    {
        echo json_encode($this->Employee_model->save_user_change_password());
    }

    function save_user_change_super_admin()
    {
        echo json_encode($this->Employee_model->save_user_change_super_admin());
    }

    function update_leave_adjustmentcomment()
    {
        $masterID = $this->input->post('masterID');
        $value = $this->input->post('value');
        $empID = $this->input->post('empID');
        $this->db->update('srp_erp_leaveaccrualdetail', array('comment' => $value), array('empID' => $empID, 'leaveaccrualMasterID' => $masterID));
        echo json_encode(array('s', 'success'));
    }

    function leave_adjustment_employees_drop()
    {
        $companyID = current_companyID();
        $leaveGroupID = $this->input->post('leaveGroupID');
        $masterID = $this->input->post('masterID');
        $policyMasterID = $this->input->post('policyMasterID');
        $segmentID = $this->input->post('segmentID');
        $employee = array();
        if ($segmentID != '') {
            $commaList = implode(', ', $segmentID);


            $employee = $this->db->query("SELECT srp_employeesdetails.* FROM srp_employeesdetails 
                          LEFT JOIN (SELECT * FROM srp_erp_leaveaccrualdetail WHERE leaveaccrualMasterID = {$masterID} 
                          AND leaveGroupID = $leaveGroupID GROUP BY empID)  t on t.empID=srp_employeesdetails.EIdNo 
                          INNER JOIN srp_erp_leavegroupdetails on srp_erp_leavegroupdetails.leaveGroupID=$leaveGroupID 
                          AND srp_erp_leavegroupdetails.policyMasterID=$policyMasterID 
                          WHERE Erp_companyID = {$companyID} AND srp_employeesdetails.isDischarged = 0 AND isSystemAdmin=0 
                          AND srp_employeesdetails.leaveGroupID = $leaveGroupID AND leaveaccrualDetailID is NULL 
                          AND srp_employeesdetails.segmentID IN ($commaList) AND empConfirmedYN=1 GROUP BY EIdNo")->result_array();
        }

        $html = "<select name='empID[]' class='form-control frm_input empID ' multiple id='empID'>";

        if ($employee) {
            foreach ($employee as $emp) {
                $html .= '<option value="' . $emp['EIdNo'] . '" >' . $emp['ECode'] . ' | ' . $emp['Ename2'] . '</option>';
            }
        }
        $html .= '</select>';

        echo $html;

    }

    function save_leave_adjustmentDetail()
    {
        $empID = $this->input->post('empID');
        if (empty($empID)) {
            $this->session->set_flashdata('e', 'Please select a employee.');
            echo json_encode(array('error' => 'e', 'message' => 'Please select a employee'));
            exit;
        }
        $masterID = $this->input->post('masterID');
        $leaveGroupID = $this->input->post('leaveGroupID');
        $policyMasterID = $this->input->post('policyMasterID');
        $companyID = current_companyID();
        $commaList = implode(', ', $empID);
        $q2 = "SELECT DateAssumed, CONCAT(EIdNo, '-', srp_erp_leavetype.leaveTypeID) AS leaveTypeKey, EIdNo, srp_employeesdetails.leaveGroupID, srp_erp_leavegroupdetails.*, policyID FROM `srp_employeesdetails` INNER JOIN `srp_erp_leavegroupdetails` ON srp_erp_leavegroupdetails.leaveGroupID = srp_employeesdetails.leaveGroupID  AND policyMasterID IN($policyMasterID) INNER JOIN `srp_erp_leavetype` ON srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leavetype.leaveTypeID WHERE srp_employeesdetails.isDischarged=0 AND Erp_companyID = {$companyID} AND srp_employeesdetails.EIdNo IN($commaList) AND srp_employeesdetails.leaveGroupID = {$leaveGroupID}  GROUP BY EIdNo , leaveTypeID";


        $result = $this->db->query($q2)->result_array();

        /*  $updateArr      = array();*/
        /*   $insert_Arr     = array();*/
        $detail = array();
        if ($result) {
            foreach ($result as $val) {
                $daysEntitled = 0;
                $hoursEntitled = 0;
                $datas = array('leaveaccrualMasterID' => $masterID, 'empID' => $val['EIdNo'], 'leaveGroupID' => $leaveGroupID, 'leaveType' => $val['leaveTypeID'], 'daysEntitled' => $daysEntitled, 'hoursEntitled' => $hoursEntitled, 'description' => 'Leave Adjustment ' . date('Y/m'), 'createDate' => date('Y-m-d H:i:s'), 'createdUserGroup' => current_user_group(), 'createdPCid' => current_pc());

                /*  array_push($insert_Arr, array('leaveTypeID'     => $val['leaveTypeID'], 'empID' => $val['EIdNo'], 'days' => $daysEntitled, 'hourly'          => $hoursEntitled, 'companyID' => current_companyID(), 'companyCode'     => current_companyCode(), 'createdUserGroup' => '', 'createdPCID'     => $this->common_data['current_pc'], 'createdUserID'   => $this->common_data['current_userID'], 'createdDateTime' => current_date(), 'createdUserName' => $this->common_data['current_user'],));*/
                array_push($detail, $datas);
            }

            $this->db->insert_batch('srp_erp_leaveaccrualdetail', $detail);
        }
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            $this->session->set_flashdata('e', 'Failed.');
            echo json_encode(array('error' => 'e', 'message' => 'Failed'));
            exit;
        } else {
            $this->db->trans_commit();
            $this->session->set_flashdata('s', 'Leave Accrual inserted successfully.');
            echo json_encode(array('error' => 's', 'leaveGroupID' => $masterID));
            exit;
        }
    }

    function loadLeaveBalance()
    {
        $data['empID'] = current_userID();
        $leavGroup = $this->db->query("SELECT leaveGroupID FROM `srp_employeesdetails` WHERE EIdNo =  {$data['empID']}")->row_array();
        $data['leavGroupID'] = $leavGroup['leaveGroupID'];
        if ($leavGroup['leaveGroupID'] == '') {
            $data['leaveType'] = array();
        } else {
            $data['leaveType'] = $this->db->query("SELECT srp_erp_leavegroupdetails.leaveTypeID,policyMasterID,description FROM `srp_erp_leavegroupdetails` LEFT JOIN `srp_erp_leavetype` ON srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leavetype.leaveTypeID WHERE leaveGroupID = {$data['leavGroupID']}  ORDER BY srp_erp_leavetype.description asc")->result_array();
        }
        //echo '<pre>'; print_r($data['leaveType']); echo '</pre>';
        //$this->load->view('system/hrm/ajax/ajax_leave_balance.php', $data);
        $this->load->view('system/hrm/ajax/ajax_leave_balance_new.php', $data);
    }

    function loadLeaveBalanceHistory()
    {

        $data['leaveTypeID'] = $this->input->post('leaveTypeID');
        $data['isFromEmployeeMaster'] = $this->input->post('isFromEmployeeMaster');
        $data['empID'] = $this->input->post('empID');
        $data['taken'] = $this->input->post('taken');

        $this->load->view('system/hrm/ajax/ajax_leave_history.php', $data);
    }

    function loadleaveblanceHistory_details()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $fromdate = $this->input->post('fromdate');
        $todate = $this->input->post('todate');
        $leaveTypeID = $this->input->post('leaveTypeID');
        $isFromEmployeeMaster = $this->input->post('isFromEmployeeMaster');
        $date_format_policy = date_format_policy();
        $from_date_filter = input_format_date($fromdate, $date_format_policy);
        $to_date_filter = input_format_date($todate, $date_format_policy);
        $userID = ($isFromEmployeeMaster == 'Y') ? $this->input->post('empID') : current_userID();
        $yearStart = (($from_date_filter) ? $from_date_filter : date('Y-01-01'));
        $yearEnd = (($to_date_filter) ? $to_date_filter : date('Y-12-31'));
        $dt = new DateTime($yearStart);
        $minusOneYearDT = $dt->sub(new DateInterval('P1Y'));
        $prvyear = $minusOneYearDT->format('Y');
        $monthStart = date('Y-m-01');
        $monthEnd = date('Y-m-t');
        $carryForwardLogic = "IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3), 
                                  IF( leavGroupDet.policyMasterID=1,  YEAR(accrualDate) = $prvyear,
                                  accrualDate BETWEEN '{$monthStart}' AND '{$monthEnd}'), accrualDate < '{$yearStart}') ";

        $carryForwardLogic2 = "AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),
                                   IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearStart}' AND '{$yearEnd}',
                                   endDate BETWEEN '{$monthStart}' AND '{$monthEnd}'),   endDate BETWEEN '{$yearStart}' AND '{$yearEnd}') ";

        $carryForwardLogicLeave =  " AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearStart}'
                                AND '{$yearEnd}',endDate BETWEEN '{$monthStart}' AND '{$monthEnd}'), endDate <= '{$yearEnd}') ";
        
        $data['taken'] = $this->db->query("SELECT SUM(days) as leavetaken FROM srp_erp_leavemaster 
                             JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                             AND leavGroupDet.leaveTypeID = '{$leaveTypeID}'
                             WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveTypeID}' AND
                             (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                             srp_erp_leavemaster.empID = $userID AND approvedYN = 1 {$carryForwardLogic2}")->row('leavetaken');

        $data['taken_leaves'] = $this->db->query("SELECT documentCode,DATE_FORMAT(startDate, '%d-%b-%y') as startDate,DATE_FORMAT(endDate, '%d-%b-%y') as endDate,days FROM srp_erp_leavemaster 
                             JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                             AND leavGroupDet.leaveTypeID = '{$leaveTypeID}'
                             WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveTypeID}' AND
                             (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                             srp_erp_leavemaster.empID = $userID AND approvedYN = 1 {$carryForwardLogic2}")->result_array();

        $leavegroupdetail = $this->db->query("SELECT isCarryForward, maxCarryForward FROM `srp_employeesdetails` LEFT JOIN srp_erp_leavegroupdetails leavegrpdetail 
                                              ON leavegrpdetail.leaveGroupID = srp_employeesdetails.leaveGroupID WHERE Erp_companyID = $companyID AND leaveTypeID = $leaveTypeID AND EIdNo = $userID")->row_array();


        $data['taken_lastyear_leave'] = $this->db->query("SELECT SUM(days) as taken_lastyear FROM srp_erp_leavemaster 
                             JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                             AND leavGroupDet.leaveTypeID = '{$leaveTypeID}'
                             WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveTypeID}'
                             {$carryForwardLogicLeave}
                              AND
                             (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                             srp_erp_leavemaster.empID = $userID AND approvedYN = 1 AND endDate < '{$yearStart}'")->row('taken_lastyear');


        $data['leave'] = $this->db->query("SELECT levMas.documentCode, DATE_FORMAT(levMas.startDate,'{$convertFormat}') AS startDate,  approvedbyEmpName, 
                                DATE_FORMAT(approvedDate,'{$convertFormat} %H:%i:%s') AS  approvedDate, comments, days AS leavedays,
                                DATE_FORMAT(levMas.endDate,'{$convertFormat}') AS endDate,
                                CASE 
                                    WHEN leavGroupDet.policyMasterID=2 THEN 'hour' 
                                    WHEN leavGroupDet.policyMasterID=1 THEN 'Annually' 
                                    WHEN leavGroupDet.policyMasterID=3 THEN 'Monthly' 
                                END as policy
                                FROM srp_erp_leavemaster AS levMas
                                JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = levMas.leaveGroupID 
                                AND leavGroupDet.leaveTypeID = '{$leaveTypeID}'
                                WHERE levMas.leaveTypeID = '{$leaveTypeID}' AND
                                (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                                levMas.empID = {$userID} AND approvedYN = 1 AND 
                                IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),IF( leavGroupDet.policyMasterID=1,  
                                endDate BETWEEN '{$yearStart}' AND '{$yearEnd}',endDate BETWEEN '{$monthStart}' AND '{$monthEnd}'), endDate <= '{$yearEnd}')")->result_array();

        $data['accrued'] = $this->db->query("SELECT leaveaccrualMasterCode, DATE_FORMAT(accMaster.createDate,'{$convertFormat}') AS createDate, accMaster.description, daysEntitled AS entitle 
                                            FROM srp_erp_leaveaccrualdetail AS detailTB
                                            JOIN (
                                                SELECT leaveaccrualMasterID, confirmedYN, leaveaccrualMasterCode, description,
                                                CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate, createDate
                                                FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}                                                        
                                            ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID                                                   
                                            JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                            AND leavGroupDet.leaveTypeID = {$leaveTypeID}
                                            WHERE IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3), 
                                            IF( leavGroupDet.policyMasterID=1,  DATE_FORMAT(accrualDate, '%Y-01-01') BETWEEN '{$yearStart}' AND '{$yearEnd}',
                                            accrualDate BETWEEN '{$monthStart}' AND '{$monthEnd}'), accrualDate BETWEEN '{$yearStart}' AND '{$yearEnd}')  AND detailTB.leaveType = '{$leaveTypeID}' 
                                            AND leavGroupDet.policyMasterID IN (1,3)
                                            AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = {$userID} ")->result_array();

        if ($leavegroupdetail['isCarryForward'] == 0) {
            $data['openingbalance'] = 0;
            $data['openingbalance_detail'] = '';
            $data['taken_lastyear_leave'] = 0;
        } else {
            $data['openingbalance'] = $this->db->query("SELECT SUM(daysEntitled) AS openingbalance 
                                            FROM srp_erp_leaveaccrualdetail AS detailTB
                                            JOIN (
                                                SELECT leaveaccrualMasterID, confirmedYN, leaveaccrualMasterCode, description,
                                                CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate, createDate
                                                FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}                                                        
                                            ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID                                                   
                                            JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                            AND leavGroupDet.leaveTypeID = {$leaveTypeID}
                                            WHERE  
                                             $carryForwardLogic
                                             AND detailTB.leaveType = '{$leaveTypeID}' 
                                            AND leavGroupDet.policyMasterID IN (1,3)
                                            AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = {$userID} ")->row_array();


            $data['openingbalance_detail'] = $this->db->query("SELECT * FROM (SELECT CONCAT(accMaster.leaveaccrualMasterCode,' ',accMaster.description )as openingBalance,daysEntitled
                                            FROM srp_erp_leaveaccrualdetail AS detailTB
                                            JOIN (
                                                SELECT leaveaccrualMasterID, confirmedYN, leaveaccrualMasterCode, description,
                                                CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate, createDate
                                                FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}                                                        
                                            ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID                                                   
                                            JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                            AND leavGroupDet.leaveTypeID = {$leaveTypeID}
                                            WHERE  
                                             $carryForwardLogic
                                             AND detailTB.leaveType = '{$leaveTypeID}' 
                                            AND leavGroupDet.policyMasterID IN (1,3)
                                            AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = {$userID}
                                            UNION ALL 
                                            SELECT documentCode as openingBalance,days*-1 as daysEntitled  FROM srp_erp_leavemaster 
                             JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                             AND leavGroupDet.leaveTypeID = '{$leaveTypeID}'
                             WHERE srp_erp_leavemaster.leaveTypeID = '{$leaveTypeID}' 
                             {$carryForwardLogicLeave}
                             AND (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                             srp_erp_leavemaster.empID = $userID AND approvedYN = 1 )leaveopening ORDER BY daysEntitled Desc")->result_array();
        }
        $data['entitiledduringthisperiod'] = array_sum(array_column($data['accrued'], 'entitle'));


        //echo '<pre>'.$this->db->last_query().'</pre>';
        $data['isFromEmployeeMaster'] = $isFromEmployeeMaster;
        $this->load->view('system/hrm/ajax/ajax_leave_history_detail.php', $data);
    }

    function leaveApplicationEmployee()
    {
        $empID = $this->input->post('empID');
        $com = current_companyID();


        if (isset($empID)) {
            $filter = " AND srp_employeesdetails.EIdNo =$empID";
        } else {
            $filter = " AND srp_employeesdetails.isDischarged != 1";

        }

        $qry = "SELECT empManager.empID as EIdNo, empManager.ECode, srp_employeesdetails.EmpSecondaryCode, DesDescription,
              IFNULL(empManager.Ename2, '') AS employee, srp_employeesdetails.leaveGroupID,srp_employeesdetails.DateAssumed,
              IFNULL(DepartmentDes, '') as department, concat(manager.ECode,' | ',manager.Ename2) as manager
              FROM srp_employeesdetails
              INNER JOIN srp_designation on srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
              INNER JOIN srp_erp_leavegroup on srp_employeesdetails.leaveGroupID=srp_erp_leavegroup.leaveGroupID
              LEFT JOIN `srp_erp_segment`  on srp_erp_segment.segmentID=srp_employeesdetails.segmentID
              LEFT JOIN 
                (   SELECT emp1.empID,emp1.managerID,emp2.Ename2,emp1.employeeManagersID,emp2.ECode
                    FROM `srp_erp_employeemanagers` as emp1
                    LEFT JOIN srp_employeesdetails as emp2 ON emp1.empID = emp2.EIdNo
                    WHERE emp1.active = 1
                    GROUP BY emp1.empID 
                ) as empManager	ON EIdNo = empManager.empID OR EIdNo = empManager.managerID 
              LEFT JOIN srp_employeesdetails manager on managerID=manager.EIdNo
              LEFT JOIN  (
                     SELECT EmpID AS empID_Dep, DepartmentDes 
                     FROM srp_departmentmaster AS departTB
                     JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
                     WHERE departTB.Erp_companyID=$com AND empDep.Erp_companyID=$com AND empDep.isActive=1 AND empDep.isPrimary = 1 
                     GROUP BY EmpID 
              ) AS departTB ON departTB.empID_Dep=srp_employeesdetails.EIdNo
              WHERE srp_employeesdetails.Erp_companyID=$com  $filter GROUP BY empManager.ECode";

        $result = $this->db->query($qry)->result_array();

        echo json_encode($result);
    }

    function leaveApplicationEmployee_self(){
        $companyID = current_companyID();

        $empID = current_userID(); 

        ///my attendees
        $qry1 = "SELECT attendee.attendeeID as EIdNo, srp_employeesdetails.ECode, srp_employeesdetails.EmpSecondaryCode, DesDescription,
        IFNULL(srp_employeesdetails.Ename2, '') AS employee, srp_employeesdetails.leaveGroupID,srp_employeesdetails.DateAssumed,
        IFNULL(DepartmentDes, '') as department, concat(empManager.ECode,' | ',empManager.Ename2) as manager
        FROM srp_erp_employee_attendees AS attendee
        JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo = attendee.attendeeID
        INNER JOIN srp_designation on srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
        INNER JOIN srp_erp_leavegroup on srp_employeesdetails.leaveGroupID=srp_erp_leavegroup.leaveGroupID
        LEFT JOIN `srp_erp_segment`  on srp_erp_segment.segmentID=srp_employeesdetails.segmentID
        LEFT JOIN 
            (   SELECT emp1.empID,emp1.managerID,emp2.Ename2,emp1.employeeManagersID,emp2.ECode
                FROM `srp_erp_employeemanagers` as emp1
                LEFT JOIN srp_employeesdetails as emp2 ON emp1.empID = emp2.EIdNo
                WHERE emp1.active = 1 AND emp1.isPrimary = 1
                GROUP BY emp1.empID 
            ) as empManager	ON attendee.attendeeID = empManager.empID
        LEFT JOIN srp_employeesdetails manager on managerID=manager.EIdNo
        LEFT JOIN  (
                SELECT EmpID AS empID_Dep, DepartmentDes 
                FROM srp_departmentmaster AS departTB
                JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
                WHERE departTB.Erp_companyID=$companyID AND empDep.Erp_companyID=$companyID AND empDep.isActive=1 AND empDep.isPrimary = 1 
                GROUP BY EmpID 
        ) AS departTB ON departTB.empID_Dep=srp_employeesdetails.EIdNo
        WHERE srp_employeesdetails.Erp_companyID=$companyID AND  attendee.companyID={$companyID} AND attendee.empID={$empID} GROUP BY empManager.ECode";

        $result = $this->db->query($qry1)->result_array();

        $qry3 = "SELECT empManager.empID as EIdNo, empManager.ECode, srp_employeesdetails.EmpSecondaryCode, DesDescription,
        IFNULL(empManager.Ename2, '') AS employee, srp_employeesdetails.leaveGroupID,srp_employeesdetails.DateAssumed,
        IFNULL(DepartmentDes, '') as department, concat(manager.ECode,' | ',manager.Ename2) as manager
        FROM srp_employeesdetails
        INNER JOIN srp_designation on srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
        INNER JOIN srp_erp_leavegroup on srp_employeesdetails.leaveGroupID=srp_erp_leavegroup.leaveGroupID
        LEFT JOIN `srp_erp_segment`  on srp_erp_segment.segmentID=srp_employeesdetails.segmentID
        LEFT JOIN 
        (   SELECT emp1.empID,emp1.managerID,emp2.Ename2,emp1.employeeManagersID,emp2.ECode,emp2.Erp_companyID
            FROM `srp_erp_employeemanagers` as emp1
            LEFT JOIN srp_employeesdetails as emp2 ON emp1.empID = emp2.EIdNo
            WHERE emp1.active = 1
            GROUP BY emp1.empID 
        ) as empManager	ON EIdNo = empManager.empID OR EIdNo = empManager.managerID 
        LEFT JOIN srp_employeesdetails manager on managerID=manager.EIdNo
        LEFT JOIN  (
            SELECT EmpID AS empID_Dep, DepartmentDes 
            FROM srp_departmentmaster AS departTB
            JOIN srp_empdepartments AS empDep ON empDep.DepartmentMasterID = departTB.DepartmentMasterID
            WHERE departTB.Erp_companyID=$companyID AND empDep.Erp_companyID=$companyID AND empDep.isActive=1 AND empDep.isPrimary = 1 
            GROUP BY EmpID 
        ) AS departTB ON departTB.empID_Dep=srp_employeesdetails.EIdNo
        WHERE empManager.Erp_companyID=$companyID  AND srp_employeesdetails.EIdNo={$empID} GROUP BY empManager.ECode";
        $current_user = $this->db->query($qry3)->result_array();
        $attendeeArr = array_merge($result,$current_user);
        echo json_encode($attendeeArr);
    }

    function confrim_leave_accrual()
    {
        $masterID = $this->input->post('masterID');
        $cmpID = current_companyID();
        $x = 1;
        $lastID = 0;
        $levaccM = $this->db->query("SELECT
	*
FROM
	srp_erp_leaveaccrualmaster
WHERE
	leaveaccrualMasterID = {$masterID}")->row_array();

        $empidLevid = $this->db->query("SELECT
	empID,leaveType
FROM
	srp_erp_leaveaccrualdetail
WHERE
	leaveaccrualMasterID = {$masterID}
GROUP BY empID,leaveType")->result_array();
        $emid = array();
        foreach ($empidLevid as $val) {
            $empID = $val['empID'];
            $leaveType = $val['leaveType'];
            $res = $this->db->query("SELECT
	documentCode,ECode
FROM
	srp_erp_leavemaster
	LEFT JOIN srp_employeesdetails on srp_erp_leavemaster.empID = srp_employeesdetails.EIdNo
	LEFT JOIN srp_erp_leavegroupdetails on srp_erp_leavegroupdetails.leaveGroupID = srp_employeesdetails.leaveGroupID AND srp_erp_leavegroupdetails.leaveTypeID=$leaveType
WHERE
	empID ={$empID}
AND srp_erp_leavegroupdetails.maxCarryForward=1
AND srp_erp_leavemaster.leaveTypeID ={$leaveType}
AND srp_erp_leavemaster.approvedYN !=1

")->row_array();
            if (!empty($res)) {
                $dat = array('ECode' => $res['ECode'], 'documentCode' => $res['documentCode']);
                array_push($emid, $dat);
            }
        }
        if (empty($emid)) {
            $carryfwd = $this->db->query("SELECT
	empID,
	leaveType,
	initalDate,
	srp_erp_leavegroupdetails.maxCarryForward
FROM
	srp_erp_leaveaccrualdetail
LEFT JOIN srp_erp_leavegroupdetails ON srp_erp_leaveaccrualdetail.leaveGroupID = srp_erp_leavegroupdetails.leaveGroupID
AND srp_erp_leaveaccrualdetail.leaveType = srp_erp_leavegroupdetails.leaveTypeID
WHERE
	leaveaccrualMasterID = {$masterID}

AND srp_erp_leavegroupdetails.isCarryForward=1
AND srp_erp_leavegroupdetails.maxCarryForward IS NOT NULL

GROUP BY
	srp_erp_leaveaccrualdetail.leaveType")->result_array();

            if (!empty($carryfwd)) {
                if ($levaccM['policyMasterID'] == 1) {
                    foreach ($carryfwd as $value) {
                        $initalDate = $value['initalDate'];
                        $startDate = $value['initalDate'] . '-01-01';
                        $lvtypeid = $value['leaveType'];
                        $carryfwds = $this->db->query("SELECT
	srp_erp_leaveaccrualdetail.empID,
	srp_erp_leaveaccrualdetail.initalDate,
	srp_erp_leaveaccrualdetail.nextDate,
	srp_erp_leaveaccrualdetail.policyMasterID,
	leaveType,
	IFNULL(SUM(daysEntitled), 0) AS previousEntitlDays,
	IFNULL(taken.previousTaken, 0) AS previousTaken,
	IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) AS balance,
srp_erp_leavegroupdetails.maxCarryForward,
srp_erp_leaveaccrualdetail.leaveGroupID as lvgrpid,

IF (
	IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) > srp_erp_leavegroupdetails.maxCarryForward,
	(IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) - srp_erp_leavegroupdetails.maxCarryForward)*-1,
	0

) AS adjestment
FROM
	srp_erp_leaveaccrualdetail
LEFT JOIN srp_erp_leaveaccrualmaster ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID = srp_erp_leaveaccrualdetail.leaveaccrualMasterID
LEFT JOIN srp_erp_leavegroupdetails ON srp_erp_leaveaccrualdetail.leaveGroupID = srp_erp_leavegroupdetails.leaveGroupID
AND srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType
LEFT JOIN (
	SELECT
		empID,
		leaveTypeID,
		SUM(days) AS previousTaken
	FROM
		srp_erp_leavemaster
	WHERE
		startDate < '$startDate'
	GROUP BY
		leaveTypeID,
		empID
) taken ON taken.empID = srp_erp_leaveaccrualdetail.empID
AND taken.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType
WHERE
	initalDate < '$initalDate'
	AND srp_erp_leaveaccrualmaster.companyID = $cmpID
	AND srp_erp_leaveaccrualmaster.leaveGroupID = {$levaccM['leaveGroupID']}
	AND srp_erp_leaveaccrualmaster.policyMasterID = 1
	AND srp_erp_leavegroupdetails.leaveTypeID = $lvtypeid
GROUP BY
	leaveType,
	srp_erp_leaveaccrualdetail.empID
	HAVING adjestment != 0")->result_array();
                        if (!empty($carryfwds)) {
                            if ($x == 1) {
                                $this->load->library('sequence');
                                $code = $this->sequence->sequence_generator('LAM');
                                $dataAM = array(
                                    'companyID' => current_companyID(),
                                    'leaveaccrualMasterCode' => $code,
                                    'documentID' => 'LAM',
                                    'description' => 'Leave accrual adjestment for ' . $levaccM['leaveaccrualMasterCode'],
                                    'year' => $levaccM['year'],
                                    'manualYN' => $levaccM['manualYN'],
                                    'month' => $levaccM['month'],
                                    'leaveGroupID' => $levaccM['leaveGroupID'],
                                    'policyMasterID' => $levaccM['policyMasterID'],
                                    'confirmedYN' => 1,
                                    'confirmedby' => current_userID(),
                                    'confirmedDate' => current_date(),
                                    'createdUserGroup' => $this->common_data['user_group'],
                                    'createdpc' => $this->common_data['current_pc'],
                                    'createDate' => current_date(),
                                );
                                $resultM = $this->db->insert('srp_erp_leaveaccrualmaster', $dataAM);
                                $lastID = $this->db->insert_id();
                                $x++;
                            }
                            foreach ($carryfwds as $val) {
                                $dataAD = array(
                                    'leaveaccrualMasterID' => $lastID,
                                    'empID' => $val['empID'],
                                    'leaveGroupID' => $val['lvgrpid'],
                                    'leaveType' => $val['leaveType'],
                                    'daysEntitled' => $val['adjestment'],
                                    'hoursEntitled' => 0,
                                    'maxCarryForwardDays' => $val['maxCarryForward'],
                                    'description' => 'Leave accrual adjestment for ' . $levaccM['leaveaccrualMasterCode'],
                                    'createDate' => date('Y-m-d H:i:s'),
                                    'createdUserGroup' => current_user_group(),
                                    'createdPCid' => current_pc(),
                                    'initalDate' => $val['initalDate'],
                                    'nextDate' => $val['nextDate'],
                                    'policyMasterID' => $val['policyMasterID'],
                                );
                                $resultAD = $this->db->insert('srp_erp_leaveaccrualdetail', $dataAD);
                            }
                        }
                    }
                } elseif ($levaccM['policyMasterID'] == 3) {
                    foreach ($carryfwd as $value) {
                        $mnth = $levaccM['month'];
                        if ($levaccM['month'] > 9) {
                            $mnth = $levaccM['month'];
                        } else {
                            $mnth = '0' . $levaccM['month'];
                        }
                        $startDate = $levaccM['year'] . '-' . $mnth . '-01';
                        $lvtypeid = $value['leaveType'];
                        $carryfwds = $this->db->query("SELECT
	srp_erp_leaveaccrualdetail.empID,
	srp_erp_leaveaccrualdetail.initalDate,
	srp_erp_leaveaccrualdetail.nextDate,
	srp_erp_leaveaccrualdetail.policyMasterID,
	leaveType,
	IFNULL(SUM(daysEntitled), 0) AS previousEntitlDays,
	IFNULL(taken.previousTaken, 0) AS previousTaken,
	IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) AS balance,
	srp_erp_leavegroupdetails.maxCarryForward,
	srp_erp_leaveaccrualdetail.leaveGroupID AS lvgrpid,

IF (
	IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) > srp_erp_leavegroupdetails.maxCarryForward,
	(
		IFNULL(SUM(daysEntitled), 0) - IFNULL(taken.previousTaken, 0) - srp_erp_leavegroupdetails.maxCarryForward
	) *- 1,
	0
) AS adjestment
FROM
	srp_erp_leaveaccrualmaster
LEFT JOIN srp_erp_leaveaccrualdetail ON srp_erp_leaveaccrualmaster.leaveaccrualMasterID = srp_erp_leaveaccrualdetail.leaveaccrualMasterID
LEFT JOIN srp_erp_leavegroupdetails ON srp_erp_leaveaccrualdetail.leaveGroupID = srp_erp_leavegroupdetails.leaveGroupID
AND srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType
LEFT JOIN (
	SELECT
		empID,
		leaveTypeID,
		SUM(days) AS previousTaken
	FROM
		srp_erp_leavemaster
	WHERE
		startDate < '$startDate'
	GROUP BY
		leaveTypeID,
		empID
) taken ON taken.empID = srp_erp_leaveaccrualdetail.empID
AND taken.leaveTypeID = srp_erp_leaveaccrualdetail.leaveType
WHERE
	srp_erp_leaveaccrualmaster.companyID = $cmpID
	AND DATE_FORMAT( CONCAT( `YEAR`, '-', `MONTH`, '-01' ), '%Y-%m-%d' ) < '$startDate' 
	AND srp_erp_leaveaccrualmaster.leaveGroupID = {$levaccM['leaveGroupID']}
	AND srp_erp_leaveaccrualmaster.policyMasterID = 3
	AND srp_erp_leavegroupdetails.leaveTypeID = $lvtypeid
GROUP BY
	srp_erp_leaveaccrualdetail.leaveType,
	srp_erp_leaveaccrualdetail.empID
	HAVING adjestment != 0")->result_array();
                        if (!empty($carryfwds)) {
                            if ($x == 1) {
                                $this->load->library('sequence');
                                $code = $this->sequence->sequence_generator('LAM');
                                $dataAM = array(
                                    'companyID' => current_companyID(),
                                    'leaveaccrualMasterCode' => $code,
                                    'documentID' => 'LAM',
                                    'description' => 'Leave accrual adjestment for ' . $levaccM['leaveaccrualMasterCode'],
                                    'year' => $levaccM['year'],
                                    'manualYN' => $levaccM['manualYN'],
                                    'month' => $levaccM['month'],
                                    'leaveGroupID' => $levaccM['leaveGroupID'],
                                    'policyMasterID' => $levaccM['policyMasterID'],
                                    'confirmedYN' => 1,
                                    'confirmedby' => current_userID(),
                                    'confirmedDate' => current_date(),
                                    'createdUserGroup' => $this->common_data['user_group'],
                                    'createdpc' => $this->common_data['current_pc'],
                                    'createDate' => current_date(),
                                );
                                $resultM = $this->db->insert('srp_erp_leaveaccrualmaster', $dataAM);
                                $lastID = $this->db->insert_id();
                                $x++;
                            }
                            foreach ($carryfwds as $val) {
                                $dataAD = array(
                                    'leaveaccrualMasterID' => $lastID,
                                    'empID' => $val['empID'],
                                    'leaveGroupID' => $val['lvgrpid'],
                                    'leaveType' => $val['leaveType'],
                                    'daysEntitled' => $val['adjestment'],
                                    'hoursEntitled' => 0,
                                    'maxCarryForwardDays' => $val['maxCarryForward'],
                                    'description' => 'Leave accrual adjestment for ' . $levaccM['leaveaccrualMasterCode'],
                                    'createDate' => date('Y-m-d H:i:s'),
                                    'createdUserGroup' => current_user_group(),
                                    'createdPCid' => current_pc(),
                                    'initalDate' => $val['initalDate'],
                                    'nextDate' => $val['nextDate'],
                                    'policyMasterID' => $val['policyMasterID'],
                                );
                                $resultAD = $this->db->insert('srp_erp_leaveaccrualdetail', $dataAD);
                            }
                        }
                    }
                }

                $data['confirmedYN'] = 1;
                $data['confirmedby'] = current_userID();
                $data['confirmedDate'] = current_date();
                $update = $this->db->update('srp_erp_leaveaccrualmaster', $data, array('leaveaccrualMasterID' => $masterID));
                echo json_encode(array('s', 'Successfully confirmed', 's'));
            } else {
                $data['confirmedYN'] = 1;
                $data['confirmedby'] = current_userID();
                $data['confirmedDate'] = current_date();
                $update = $this->db->update('srp_erp_leaveaccrualmaster', $data, array('leaveaccrualMasterID' => $masterID));
                echo json_encode(array('s', 'Successfully confirmed', 's'));
            }
        } else {
            echo json_encode(array('w', 'Approve following leave applications', $emid));
        }
    }

    function deleteEmpAssignedShift()
    {
        $this->form_validation->set_rules('autoID', 'Auto ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteEmpAssignedShift());
        }
    }

    
    function setup_leaveApproval()
    {
        $companyID = current_companyID();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdUserName = current_employee();
        $createdDateTime = current_date();
        $leaveApprovalWithGroup = getPolicyValues('LAG', 'All');

        $appLevel = $this->input->post('appLevel');
        $appType = $this->input->post('appType');
        $leaveGroupID = $this->input->post('leaveGroupID');


        $dataArr = [];
        foreach ($appLevel as $key => $row) {
            
            $thisAppType = $appType[$key];
            $thisEmp = $this->input->post('empID_' . $row);


            // if (empty($thisAppType)) {
            //     die(
            //     json_encode(['e', 'Please select a approval type for level ' . $row])
            //     );
            // }

            if ($thisAppType == 3 && empty($thisEmp)) {
                /*** If approval type is HR manager than employee can not be blank ***/
                die(
                json_encode(['e', 'Please select a employee for for level ' . $row])
                );
            }


            $dataArr[$key]['approvalLevel'] = $row;
            $dataArr[$key]['approvalType'] = $thisAppType;
            $dataArr[$key]['leaveGroupID'] = $leaveGroupID;
            $dataArr[$key]['companyID'] = $companyID;
            $dataArr[$key]['createdPCID'] = $createdPCID;
            $dataArr[$key]['createdUserGroup'] = $createdUserGroup;
            $dataArr[$key]['createdUserID'] = $createdUserID;
            $dataArr[$key]['createdUserName'] = $createdUserName;
            $dataArr[$key]['createdDateTime'] = $createdDateTime;
        }

        $this->db->trans_start();

        if($leaveApprovalWithGroup == 1){
            $this->db->where('companyID', $companyID)->where('leaveGroupID',$leaveGroupID)->delete('srp_erp_leaveapprovalsetup');
            $this->db->where('companyID', $companyID)->where('leaveGroupID',$leaveGroupID)->delete('srp_erp_leaveapprovalsetuphremployees');
        }else{
            $this->db->where('companyID', $companyID)->delete('srp_erp_leaveapprovalsetup');
            $this->db->where('companyID', $companyID)->delete('srp_erp_leaveapprovalsetuphremployees');
        }
      

        foreach ($dataArr as $rowD) {
            $this->db->insert('srp_erp_leaveapprovalsetup', $rowD);

            if ($rowD['approvalType'] == 3) {
                $id = $this->db->insert_id();
                $level = $rowD['approvalLevel'];
                $empArr = $this->input->post('empID_' . $level);
                $dataHr = [];
                foreach ($empArr as $key => $empID) {
                    $dataHr[$key]['approvalSetupID'] = $id;
                    $dataHr[$key]['empID'] = $empID;
                    $dataHr[$key]['companyID'] = $companyID;
                    $dataHr[$key]['createdPCID'] = $createdPCID;
                    $dataHr[$key]['leaveGroupID'] = $leaveGroupID;
                    $dataHr[$key]['createdUserGroup'] = $createdUserGroup;
                    $dataHr[$key]['createdUserID'] = $createdUserID;
                    $dataHr[$key]['createdUserName'] = $createdUserName;
                    $dataHr[$key]['createdDateTime'] = $createdDateTime;
                }

                $this->db->insert_batch('srp_erp_leaveapprovalsetuphremployees', $dataHr);

            }

        }

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in leave approval setup']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'leave approval setup successfully updated']);
        }
    }

    function save_leave_approval_levels()
    {
        $this->form_validation->set_rules('level', 'Level', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $level = $this->input->post('level');

        $this->db->where('companyID', current_companyID());
        $this->db->where('documentID', 'LA');
        $this->db->update('srp_erp_documentcodemaster', ['approvalLevel' => $level]);

        echo json_encode(['s', 'Level updated successfully']);
    }

    function saveGrade()
    {
        $this->form_validation->set_rules('gradeDescription', 'Grade', 'required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('error' => 1, 'message' => validation_errors()));
        } else {
            echo json_encode($this->Employee_model->saveGrade());
        }
    }

    function fetch_grade()
    {
        $str = '<div class="pull-right"><a onclick="editGrade($1,this)" data-description="$2" title="Edit" rel="tooltip"><i class="fa fa-pencil"></i></a>';
        $str .= '&nbsp; | &nbsp;<a onclick="salarySetup($1, \'$2\')" title="setup" rel="tooltip"><i class="fa fa-cogs"></i></a>&nbsp; | &nbsp;';
        $str .= '<a onclick="deleteGrade($1)" title="Delete" rel="tooltip" ><i class="fa fa-trash delete-icon"></i></a></div> ';

        $this->datatables->select('gradeID,gradeDescription', false)
            ->from('srp_erp_employeegrade');
        $this->datatables->where('companyID', current_companyID());
        $this->datatables->add_column('edit', $str, 'gradeID,gradeDescription');
        echo $this->datatables->generate();
    }


    function deleteGrade()
    {
        echo json_encode($this->Employee_model->deleteGrade());
    }

    function employeeHistory()
    {
        $empID = $this->input->post('id');
        $historyCode = $this->input->post('code');


        if ($historyCode == 'LA') {
            $data['empID'] = $empID;
            $leaveGroup = $this->db->query("SELECT leaveGroupID FROM srp_employeesdetails WHERE EIdNo =  {$data['empID']}")->row_array();
            $data['leavGroupID'] = $leaveGroup['leaveGroupID'];
            if ($leaveGroup['leaveGroupID'] == '') {
                $data['leaveType'] = array();
            } else {
                $data['leaveType'] = $this->db->query("SELECT srp_erp_leavegroupdetails.leaveTypeID,policyMasterID,description
                                                   FROM srp_erp_leavegroupdetails
                                                   LEFT JOIN srp_erp_leavetype ON srp_erp_leavegroupdetails.leaveTypeID = srp_erp_leavetype.leaveTypeID
                                                   WHERE leaveGroupID = {$data['leavGroupID']}  ORDER BY srp_erp_leavetype.description ASC")->result_array();
            }
            //$this->load->view('system/hrm/ajax/ajax_leave_balance.php', $data);
            $this->load->view('system/hrm/ajax/ajax_leave_balance_new.php', $data);
        }
    }

    function employee_leave_balance_report()
    {

        $this->form_validation->set_rules('asOfDate', 'As of Date', 'trim|required|validate_date');
        $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            $this->session->set_flashdata('e', validation_errors());
            echo '';
        } else {
            $isPDF = $this->uri->segment(3);
            $data['isPDF'] = $isPDF;
            $companyID = current_companyID();
            $leaveType = $this->input->post('leaveType');
            $groupType = $this->input->post('groupType');
            $empID = $this->input->post('empID');
            $policyType = $this->input->post('policyType');
            $data['policyType'] = $policyType;

            $date_format_policy = date_format_policy();
            $asOfDate = $this->input->post('asOfDate');
            $datefilter = '';
            $monthfilter = '';

            $current_date = current_format_date();
            $data['asOfDate'] = $current_date;
            if ($asOfDate != '') {
                $asOfDate = input_format_date($asOfDate, $date_format_policy);
                $date = explode('-', $asOfDate);
                $year = $date[0];
                $month = $date[1];
                $datefilter = " AND endDate <= '$asOfDate'";
                $monthfilter = " AND year <= '{$year}' AND month <= '{$month}'";

                $data['asOfDate'] = $this->input->post('asOfDate');
            }
            $current = $this->input->post('current');

            $data['groupType'] = $groupType;


            switch ($groupType) {
                case 1:
                    $filter = '';
                    if (!empty($empID)) {
                        $str = "'" . implode("','", $empID) . "'";

                        $filter .= " AND EidNo IN($str)";
                    }

                    if ($leaveType != '') {

                        $sql = "SELECT EidNo,ECode, Ename2, t1.leaveTypeID, t2.description, 
                                IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail 
                                  LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                                  WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0
                                ) AS  entitled, 
                                IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = {$leaveType} AND srp_erp_leavemaster.empID = EidNo 
                                  AND approvedYN = 1 $datefilter), 0
                                ) AS leaveTaken, 
                                IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON 
                                  srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID 
                                  WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0
                                ) AS accrued, isPaidLeave, 
                                (IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` 
                                  ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter 
                                  AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) - IFNULL((SELECT SUM(days) 
                                  FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = {$leaveType} AND srp_erp_leavemaster.empID = EidNo 
                                  AND approvedYN = 1 $datefilter), 0
                                ) AS days 
                                FROM `srp_employeesdetails` 
                                LEFT JOIN `srp_erp_leavegroupdetails` AS t1 ON t1.leaveGroupID = srp_employeesdetails.leaveGroupID
                                LEFT JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID
                                WHERE Erp_companyID={$companyID} $filter GROUP BY  EIdNo";
                        $data['error'] = '';
                        $data['balancedata'] = $this->db->query($sql)->result_array();
                    }

                    if ($leaveType == '') {
                        $data['balancedata'] = false;
                        $data['error'] = 'Please select Leave Type';
                    }
                    if (empty($data['balancedata'])) {
                        $data['balancedata'] = false;
                    }


                    $data['leaveType'] = '';
                    if ($leaveType != '') {
                        $leaveDisc = $this->db->query("select description from srp_erp_leavetype where leaveTypeID=$leaveType")->row_array();
                        $data['leaveType'] = $leaveDisc['description'];
                    }
                    break;
                case 2:

                    if (!empty($empID)) {
                        $str = "'" . implode("','", $empID) . "'";
                        $filterLeaveType = '';
                        
                        if ($leaveType && isset($leaveType[0]) && $leaveType[0] > 0) {
                            $leaveType = join(',',$leaveType);
                            $filterLeaveType = "AND leaveTypeID IN ($leaveType)";
                        }


                        $qry = "SELECT leaveTypeID, description FROM srp_erp_leavetype WHERE companyID={$companyID} $filterLeaveType ";
                        $leaveqry = $this->db->query($qry)->result_array();
                        //echo '<pre>'; print_r($leaveqry); echo '</pre>';        die();

                        if (!empty($leaveqry)) {
                            $select = 'EIdNo,ECode,Ename2';

                            $yearFirstDate = date('Y-01-01', strtotime($asOfDate));
                            $carryForwardLogic = "IF( isCarryForward=0 AND leavGroupDet.policyMasterID=1, accrualDate BETWEEN '{$yearFirstDate}' AND '{$asOfDate}', accrualDate <= '{$asOfDate}') ";
                            $carryForwardLogic2 = "AND IF( isCarryForward=0 AND leavGroupDet.policyMasterID=1, endDate BETWEEN '{$yearFirstDate}' AND '{$asOfDate}', endDate <= '{$asOfDate}') ";

                            if ($policyType == 1) {
                                $monthlyFirstDate = date('Y-m-01', strtotime($asOfDate));
                                $yearFirstDate = date('Y-01-01', strtotime($asOfDate));
                                //$monthlyFirstDate = date('Y-01-01', strtotime($asOfDate));
                                $carryForwardLogic = "IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3), IF( leavGroupDet.policyMasterID=1,  DATE_FORMAT(accrualDate, '%Y-01-01') BETWEEN '{$yearFirstDate}' AND '{$asOfDate}',accrualDate BETWEEN '{$monthlyFirstDate}' AND '{$asOfDate}'), accrualDate <= '{$asOfDate}') ";
                                $carryForwardLogic2 = "AND IF( isCarryForward=0 AND (leavGroupDet.policyMasterID=1 OR leavGroupDet.policyMasterID=3),IF( leavGroupDet.policyMasterID=1,  endDate BETWEEN '{$yearFirstDate}' AND '{$asOfDate}',endDate BETWEEN '{$monthlyFirstDate}' AND '{$asOfDate}'), endDate <= '{$asOfDate}') ";
                            }

                            foreach ($leaveqry as $type) {

                                $desc = trim($type['leaveTypeID'] ?? '');
                                $balance = '`' . $desc . 'balance`';
                                $entitle = '`' . $desc . 'entitle`';
                                $taken = '`' . $desc . 'taken`';
                                $typeID = $type['leaveTypeID'];
                                if ($policyType == 2) {

                                    $select .= ",round(
                                                (   IFNULL(
                                                    ( SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                                                      JOIN (
                                                         SELECT leaveaccrualMasterID, confirmedYN,
                                                         CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                                                         FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                                                      ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID
                                                      JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                                      AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                      WHERE {$carryForwardLogic} AND leavGroupDet.policyMasterID={$policyType} AND detailTB.leaveType='{$typeID}'
                                                      AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL)
                                                      AND detailTB.empID = EidNo
                                                    ), 0 ) ) -
                                                    IFNULL(
                                                    (SELECT SUM(hours) FROM srp_erp_leavemaster 
                                                     JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                                                     AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                     WHERE srp_erp_leavemaster.leaveTypeID='{$typeID}' AND leavGroupDet.policyMasterID={$policyType} AND 
                                                     srp_erp_leavemaster.empID = EidNo AND (cancelledYN = 0 OR cancelledYN IS NULL) AND
                                                     approvedYN = 1 {$carryForwardLogic2}), 0
                                                ) , 2) AS $balance ,
                                                round(
                                                (IFNULL(
                                                    (SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                                                     JOIN (
                                                        SELECT leaveaccrualMasterID, confirmedYN,
                                                        CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                                                        FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                                                     ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID
                                                     JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                                     AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                     WHERE {$carryForwardLogic} AND leavGroupDet.policyMasterID={$policyType} AND detailTB.leaveType='{$typeID}'
                                                     AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND
                                                     detailTB.empID = EidNo), 0)
                                                ) , 2) AS $entitle,
                                                round(
                                                IFNULL(
                                                  (SELECT SUM(hours) FROM srp_erp_leavemaster 
                                                   JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                                                   AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                   WHERE srp_erp_leavemaster.leaveTypeID='{$typeID}' AND leavGroupDet.policyMasterID={$policyType}
                                                   AND empID = EidNo AND approvedYN = 1 AND (cancelledYN = 0 OR cancelledYN IS NULL) {$carryForwardLogic2}), 0
                                                ) , 2) AS $taken ";

                                } else {

                                    $select .= ", round(
                                                ( IFNULL(
                                                  (SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                                                   JOIN (
                                                        SELECT leaveaccrualMasterID, confirmedYN,
                                                        CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                                                        FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                                                   ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID
                                                   JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                                   AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                   WHERE {$carryForwardLogic} AND detailTB.leaveType = '{$typeID}' AND leavGroupDet.policyMasterID IN (1,3)
                                                   AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = EidNo
                                                   ), 0
                                                  ) -
                                                  IFNULL(
                                                    (SELECT SUM(days) FROM srp_erp_leavemaster 
                                                     JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                                                     AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                     WHERE srp_erp_leavemaster.leaveTypeID = '{$typeID}' AND
                                                     (cancelledYN = 0 OR cancelledYN IS NULL) AND leavGroupDet.policyMasterID IN (1,3) AND
                                                     srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 {$carryForwardLogic2}
                                                    ), 0
                                                  )
                                                ) , 2) AS $balance ,
                                                round(
                                                (IFNULL(
                                                  (SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail AS detailTB
                                                   JOIN (
                                                        SELECT leaveaccrualMasterID, confirmedYN,
                                                        CONCAT(`year`,'-',LPAD(`month`,2,'00'),'-01') AS accrualDate
                                                        FROM srp_erp_leaveaccrualmaster WHERE confirmedYN = 1 AND companyID={$companyID}
                                                   ) AS accMaster ON detailTB.leaveaccrualMasterID = accMaster.leaveaccrualMasterID                                                   
                                                   JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = detailTB.leaveGroupID 
                                                   AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                   WHERE {$carryForwardLogic} AND detailTB.leaveType = '{$typeID}' AND leavGroupDet.policyMasterID IN (1,3)
                                                   AND (detailTB.cancelledLeaveMasterID = 0 OR detailTB.cancelledLeaveMasterID IS NULL) AND detailTB.empID = EidNo), 0
                                                   )
                                                ) , 2) AS $entitle,
                                                round(
                                                IFNULL(
                                                   ( SELECT SUM(days) FROM srp_erp_leavemaster 
                                                     JOIN srp_erp_leavegroupdetails AS leavGroupDet ON leavGroupDet.leaveGroupID = srp_erp_leavemaster.leaveGroupID 
                                                     AND leavGroupDet.leaveTypeID = '{$typeID}'
                                                     WHERE srp_erp_leavemaster.leaveTypeID='{$typeID}' AND leavGroupDet.policyMasterID IN (1,3) AND
                                                     srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 AND (cancelledYN = 0 OR cancelledYN IS NULL)
                                                     {$carryForwardLogic2} ), 0
                                                ) , 2) AS $taken ";
                                }

                            }

                            $qselect = rtrim($select, ',');

                            $data['details'] = $this->db->query("SELECT $qselect FROM srp_employeesdetails WHERE EIdNo IN($str)
                                                                 AND Erp_companyID='{$companyID}'")->result_array();

                            /*echo '<pre>'.$this->db->last_query().'</pre>'; //die();*/
                            $data['leaveqry'] = $leaveqry;

                        } else {
                            $data['details'] = false;
                            $data['leaveqry'] = false;
                            $data['error'] = 'No records found';
                        }
                    } else {
                        $data['details'] = false;
                        $data['leaveqry'] = false;
                        $data['error'] = 'Please Select a Employee';

                    }
                    break;
            }


            $html = $this->load->view('system/hrm/ajax/load-employee-leave-balance-report', $data, true);

            if ($isPDF == 'pdf') {
                $this->load->library('pdf');
                $pdf = $this->pdf->printed($html, 'A4');
            } else {
                echo $html;
            }
        }
    }

    function employee_leave_balance_report_pdf()
    {
        $leaveType = $this->input->post('leaveType');
        $groupType = $this->input->post('groupType');
        $empID = $this->input->post('empID');
        $policyType = $this->input->post('policyType');
        $data['policyType'] = $policyType;

        $date_format_policy = date_format_policy();
        $asOfDate = $this->input->post('asOfDate');
        $datefilter = '';
        $monthfilter = '';

        $current_date = current_format_date();
        $data['asOfDate'] = $current_date;
        if ($asOfDate != '') {
            $asOfDate = input_format_date($asOfDate, $date_format_policy);
            $date = explode('-', $asOfDate);
            $year = $date[0];
            $month = $date[1];
            $datefilter = " AND endDate <= '$asOfDate'";
            $monthfilter = " AND year <= '{$year}' AND month <= '{$month}'";

            $data['asOfDate'] = $this->input->post('asOfDate');
        }
        $current = $this->input->post('current');
        $companyID = current_companyID();

        $data['groupType'] = $groupType;

        /*   if($leaveType !=''){*/

        switch ($groupType) {
            case 1:
                $filter = '';
                if (!empty($empID)) {
                    $str = "'" . implode("','", $empID) . "'";

                    $filter .= " AND EidNo IN($str)";
                }

                if ($leaveType != '') {

                    $sql = "SELECT EidNo,ECode, Ename2, t1.leaveTypeID, t2.description, IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0) AS  entitled, IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = {$leaveType} AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS leaveTaken, IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0) AS accrued, isPaidLeave, (IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = {$leaveType} AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) - IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = {$leaveType} AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS days FROM `srp_employeesdetails` LEFT JOIN `srp_erp_leavegroupdetails` AS t1 ON t1.leaveGroupID = srp_employeesdetails.leaveGroupID LEFT JOIN srp_erp_leavetype AS t2 ON t1.leaveTypeID = t2.leaveTypeID  WHERE Erp_companyID={$companyID} $filter GROUP BY  EIdNo";
                    $data['error'] = '';
                    $data['balancedata'] = $this->db->query($sql)->result_array();
                }

                if ($leaveType == '') {
                    $data['balancedata'] = false;
                    $data['error'] = 'Please select Leave Type';
                }
                if (empty($data['balancedata'])) {
                    $data['balancedata'] = false;
                }


                $data['leaveType'] = '';
                if ($leaveType != '') {
                    $leaveDisc = $this->db->query("select description from srp_erp_leavetype where leaveTypeID=$leaveType")->row_array();
                    $data['leaveType'] = $leaveDisc['description'];
                }
                break;
            case 2:

                if (!empty($empID)) {
                    $str = "'" . implode("','", $empID) . "'";
                    $filterLeaveType = '';
                    if ($leaveType != '') {
                        $filterLeaveType = "AND leaveTypeID={$leaveType} ";
                    }
                    $companyID = current_companyID();
                    $qry = "SELECT * FROM srp_erp_leavetype WHERE companyID={$companyID} $filterLeaveType  ";
                    $leaveqry = $this->db->query($qry)->result_array();

                    if (!empty($leaveqry)) {
                        $select = '';

                        foreach ($leaveqry as $type) {

                            $desc = str_replace(' ', '', $type['description']);
                            $balance = $desc . 'balance';
                            $entitle = $desc . 'entitle';
                            $taken = $desc . 'taken';

                            if ($policyType == 2) {

                                $select .= "EIdNo,ECode,Ename2, (IFNULL((SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = " . $type['leaveTypeID'] . " AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) - IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = " . $type['leaveTypeID'] . " AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS $balance ,(IFNULL((SELECT SUM(hoursEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = " . $type['leaveTypeID'] . " AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) AS $entitle,IFNULL((SELECT SUM(hours) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = " . $type['leaveTypeID'] . " AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS $taken,";

                            } else {

                                $select .= "EIdNo,ECode,Ename2, (IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = " . $type['leaveTypeID'] . " AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) - IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = " . $type['leaveTypeID'] . " AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS $balance ,(IFNULL((SELECT SUM(daysEntitled) FROM srp_erp_leaveaccrualdetail LEFT JOIN `srp_erp_leaveaccrualmaster` ON srp_erp_leaveaccrualdetail.leaveaccrualMasterID = srp_erp_leaveaccrualmaster.leaveaccrualMasterID WHERE confirmedYN = 1 $monthfilter AND srp_erp_leaveaccrualdetail.leaveType = " . $type['leaveTypeID'] . " AND srp_erp_leaveaccrualdetail.empID = EidNo), 0)) AS $entitle,IFNULL((SELECT SUM(days) FROM srp_erp_leavemaster WHERE srp_erp_leavemaster.leaveTypeID = " . $type['leaveTypeID'] . " AND srp_erp_leavemaster.empID = EidNo AND approvedYN = 1 $datefilter), 0) AS $taken,";

                            }

                        }
                        $select;
                        $qselect = rtrim($select, ',');

                        $data['details'] = $this->db->query("select $qselect from srp_employeesdetails WHERE EIdNo IN($str)")->result_array();
                        $data['leaveqry'] = $leaveqry;

                    } else {
                        $data['details'] = false;
                        $data['leaveqry'] = false;
                        $data['error'] = 'No records found';
                    }
                } else {
                    $data['details'] = false;
                    $data['leaveqry'] = false;
                    $data['error'] = 'Please Select a Employee';

                }

                break;
        }

        $html = $this->load->view('system/hrm/ajax/load-employee-leave-balance-report-pdf', $data, true);
        $this->load->library('pdf');
        $pdf = $this->pdf->printed($html, 'A4');


    }

    function save_access_right_master()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $companyID = current_companyID();
            $description = trim($this->input->post('description') ?? '');

            $isExist = $this->db->query("SELECT groupName FROM srp_erp_payrollgroups WHERE companyID={$companyID}
                                         AND groupName='{$description}'")->row('groupName');

            if (empty($isExist)) {
                $data = array(
                    'groupName' => $description,
                    'companyID' => $companyID,
                    'createdPCID' => current_pc(),
                    'createdUserGroup' => current_user_group(),
                    'createdUserID' => current_userID(),
                    'createdUserName' => current_employee(),
                    'createdDateTime' => current_date()
                );

                $this->db->insert('srp_erp_payrollgroups', $data);
                if ($this->db->affected_rows() > 0) {
                    $insertID = $this->db->insert_id();
                    echo json_encode(['s', 'Group master successfully created', $insertID, $description]);
                } else {
                    echo json_encode(['e', 'Error in group master create process']);
                }
            } else {
                echo json_encode(['e', 'This description is already exist.']);
            }
        }
    }

    function fetch_payroll_group_master()
    {
        $this->datatables->select("groupID,groupName");
        $this->datatables->from('srp_erp_payrollgroups');
        $this->datatables->where('companyID', current_companyID());
        $this->datatables->add_column('edit', '$1', 'payroll_group_master_action(groupID,groupName)');
        echo $this->datatables->generate();
    }

    function delete_groupSetup()
    {
        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();

        $salaryDec = $this->db->query("SELECT documentSystemCode AS dCode FROM srp_erp_salarydeclarationmaster AS t1
                                     JOIN srp_erp_salarydeclarationdetails AS t2 ON salarydeclarationMasterID=declarationMasterID
                                     WHERE t1.companyID={$companyID} AND t2.companyID={$companyID} AND accessGroupID={$masterID}
                                     GROUP BY declarationMasterID")->result_array();

        $monthlyA = $this->db->query("SELECT monthlyAdditionsCode AS dCode FROM srp_erp_pay_monthlyadditionsmaster AS t1
                                     JOIN srp_erp_pay_monthlyadditiondetail AS t2 ON t1.monthlyAdditionsMasterID=t2.monthlyAdditionsMasterID
                                     WHERE t1.companyID={$companyID} AND t2.companyID={$companyID} AND accessGroupID={$masterID}
                                     GROUP BY t1.monthlyAdditionsMasterID")->result_array();

        $monthlyD = $this->db->query("SELECT monthlyDeductionCode AS dCode FROM srp_erp_pay_monthlydeductionmaster AS t1
                                     JOIN srp_erp_pay_monthlydeductiondetail AS t2 ON t1.monthlyDeductionMasterID=t2.monthlyDeductionMasterID
                                     WHERE t1.companyID={$companyID} AND t2.companyID={$companyID} AND accessGroupID={$masterID}
                                     GROUP BY t1.monthlyDeductionMasterID")->result_array();

        $payroll = $this->db->query("SELECT documentCode AS dCode FROM srp_erp_payrollmaster AS t1
                                     JOIN srp_erp_payrollheaderdetails AS t2 ON t1.payrollMasterID=t2.payrollMasterID
                                     WHERE t1.companyID={$companyID} AND t2.companyID={$companyID} AND accessGroupID={$masterID}
                                     GROUP BY t1.payrollMasterID")->result_array();

        $nPayroll = $this->db->query("SELECT documentCode AS dCode FROM srp_erp_non_payrollmaster AS t1
                                     JOIN srp_erp_non_payrollheaderdetails AS t2 ON t1.payrollMasterID=t2.payrollMasterID
                                     WHERE t1.companyID={$companyID} AND t2.companyID={$companyID} AND accessGroupID={$masterID}
                                     GROUP BY t1.payrollMasterID")->result_array();

        $count = count($salaryDec) + count($monthlyA) + count($monthlyD) + count($payroll) + count($nPayroll);

        if ($count > 0) {
            $str = '';
            if (!empty($salaryDec)) {
                $str = '<span class="symbolSty"> Salary declarations</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($salaryDec, 'dCode'));
            }
            if (!empty($monthlyA)) {
                $str .= ($str != '') ? '<br/>' : '';
                $str .= '<span class="symbolSty"> Monthly additions</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($monthlyA, 'dCode'));
            }
            if (!empty($monthlyD)) {
                $str .= ($str != '') ? '<br/>' : '';
                $str .= '<span class="symbolSty"> Monthly deductions</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($monthlyD, 'dCode'));
            }
            if (!empty($payroll)) {
                $str .= ($str != '') ? '<br/>' : '';
                $str .= '<span class="symbolSty"> Payrolls</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($payroll, 'dCode'));
            }
            if (!empty($nPayroll)) {
                $str .= ($str != '') ? '<br/>' : '';
                $str .= '<span class="symbolSty"> Non payrolls</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($nPayroll, 'dCode'));
            }

            $str = '<h4 style="font-weight: 600;">This group has been assigned to access following documents</h4><hr>' . $str;

            die(json_encode(['w', $str]));
        }

        $this->db->trans_start();

        $where = ['companyID' => $companyID, 'groupID' => $masterID];

        $this->db->where($where)->delete('srp_erp_payrollgroups');
        $this->db->where($where)->delete('srp_erp_payrollgroupemployees');
        $this->db->where($where)->delete('srp_erp_payrollgroupincharge');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Group deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function ajax_update_groupMaster()
    {
        $companyID = current_companyID();
        $masterID = $this->input->get('masterID');
        $description = trim($this->input->post('value') ?? '');

        if ($description == '') {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Description is required.');
        }

        $where = [
            'companyID' => $companyID,
            'groupID' => $masterID,
        ];

        $isExist = $this->db->query("SELECT groupID FROM srp_erp_payrollgroups WHERE companyID={$companyID}
                                     AND groupName='{$description}'")->row('groupID');


        if (!empty($isExist) && $isExist != $masterID) {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('This description is already exist.');
        }

        $data = [
            'groupName' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(),
            'modifiedDateTime' => current_date()
        ];

        $this->db->trans_start();
        $this->db->where($where)->update('srp_erp_payrollgroups', $data);
        $this->db->trans_complete();

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Description updated successfully']);
        } else {
            $this->db->trans_rollback();
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Error in description Update process');
        }
    }

    public function get_employees_for_access_rights()
    {
        $companyID = current_companyID();
        $groupID = $this->input->post('groupID');
        $empType = $this->input->post('empType');
        $segmentID = $this->input->post('segmentID');
        $designationFilter = $this->input->post('designationFilter');


        $this->datatables->select('EIdNo, ECode, Ename2 AS empName, desigTB.DesDescription AS designationStr, segTB.segmentCode AS segTBCode');
        $this->datatables->from('srp_employeesdetails AS empTB');
        $this->datatables->join('srp_designation', 'empTB.EmpDesignationId = srp_designation.DesignationID');
        $this->datatables->join('srp_erp_currencymaster AS cur', 'cur.currencyID = empTB.payCurrencyID');
        $this->datatables->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID');
        $this->datatables->join('srp_designation AS desigTB', 'desigTB.DesignationID = empTB.EmpDesignationId');
        $this->datatables->add_column('addBtn', '$1', 'addBtn()');
        $this->datatables->where('empTB.Erp_companyID', $companyID);
        $this->datatables->where('empTB.isPayrollEmployee', 1);
        $this->datatables->where('isDischarged != 1');

        if ($empType == 'employee') {
            $this->datatables->join("(SELECT employeeID FROM srp_erp_payrollgroupemployees WHERE companyID={$companyID}) AS grpEmp",
                'grpEmp.employeeID = EIdNo', 'left');
            $this->datatables->where('grpEmp.employeeID IS NULL');
        }

        if ($empType == 'in-charge') {
            $this->datatables->where("empTB.EIdNo NOT IN(
                                        SELECT empID FROM srp_erp_payrollgroupincharge
                                        WHERE companyID={$companyID} AND groupID ={$groupID}
                                     )");
        }

        if (!empty($segmentID)) {
            $this->datatables->where('segTB.segmentID IN (' . $segmentID . ')');
        }

        if (!empty($designationFilter)) {
            $this->datatables->where('desigTB.DesignationID IN (' . $designationFilter . ')');
        }

        echo $this->datatables->generate();
    }

    function pull_employee_group()
    {
        $this->form_validation->set_rules('empList[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $masterID = trim($this->input->post('masterID') ?? '');
            $empList = $this->input->post('empList');
            $companyID = current_companyID();

            $pcID = current_pc();
            $userID = current_userID();
            $userName = current_employee();
            $userGroup = current_user_group();
            $current_date = current_date();
            $data = [];

            foreach ($empList as $key => $row) {
                $data[$key]['employeeID'] = $row;
                $data[$key]['groupID'] = $masterID;
                $data[$key]['companyID'] = $companyID;
                $data[$key]['createdPCID'] = $pcID;
                $data[$key]['createdUserID'] = $userID;
                $data[$key]['createdUserName'] = $userName;
                $data[$key]['createdUserGroup'] = $userGroup;
                $data[$key]['createdDateTime'] = $current_date;
            }

            $this->db->trans_start();
            $this->db->insert_batch('srp_erp_payrollgroupemployees', $data);
            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', 'Employee successfully added']);
            }
        }
    }

    function pull_in_charge_group()
    {
        $this->form_validation->set_rules('empList[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {

            $masterID = trim($this->input->post('masterID') ?? '');
            $empList = $this->input->post('empList');
            $companyID = current_companyID();

            $pcID = current_pc();
            $userID = current_userID();
            $userName = current_employee();
            $userGroup = current_user_group();
            $current_date = current_date();
            $data = [];

            foreach ($empList as $key => $row) {
                $data[$key]['empID'] = $row;
                $data[$key]['groupID'] = $masterID;
                $data[$key]['companyID'] = $companyID;
                $data[$key]['createdPCID'] = $pcID;
                $data[$key]['createdUserID'] = $userID;
                $data[$key]['createdUserName'] = $userName;
                $data[$key]['createdUserGroup'] = $userGroup;
                $data[$key]['createdDateTime'] = $current_date;
            }

            $this->db->trans_start();
            $this->db->insert_batch('srp_erp_payrollgroupincharge', $data);
            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', 'In-charges successfully added']);
            }


            /*} else {
                echo json_encode(['e', 'This description is already exist.']);
            }*/
        }
    }

    function load_group_employee()
    {
        $groupID = $this->input->post('groupID');
        $str = '<span class="glyphicon glyphicon-trash" onclick="removeEmployee($1, \'employees\')" style="color:#d15b47;"></span>';

        $this->datatables->select("EIdNo, CONCAT(EmpSecondaryCode, ' - ', Ename2) AS empName, segTB.segmentCode AS segTBCode, DesDescription")
            ->from('srp_erp_payrollgroupemployees AS gEmp')
            ->join('srp_employeesdetails AS empTB', 'empTB.EIdNo=gEmp.employeeID')
            ->join('srp_erp_segment AS segTB', 'segTB.segmentID = empTB.segmentID')
            ->join('srp_designation AS desigTB', 'desigTB.DesignationID = empTB.EmpDesignationId')
            ->where('gEmp.companyID', current_companyID())
            ->where('empTB.Erp_companyID', current_companyID())
            ->where('groupID', $groupID)
            ->add_column('edit', '<div align="center">' . $str . '</div>', 'EIdNo');
        echo $this->datatables->generate();
    }

    function load_in_charge_employee()
    {
        $groupID = $this->input->post('groupID');
        $str = '<span class="glyphicon glyphicon-trash" onclick="removeEmployee($1, \'in-charge\')" style="color:#d15b47;"></span>';

        $this->datatables->select("EIdNo, CONCAT(EmpSecondaryCode, ' - ', Ename2) AS empName, DesDescription, '' AS CurrencyCode ")
            ->from('srp_erp_payrollgroupincharge AS gEmp')
            ->join('srp_employeesdetails AS empTB', 'empTB.EIdNo=gEmp.empID')
            ->join('srp_designation AS desigTB', 'desigTB.DesignationID = empTB.EmpDesignationId')
            ->where('gEmp.companyID', current_companyID())
            ->where('empTB.Erp_companyID', current_companyID())
            ->where('groupID', $groupID)
            ->add_column('edit', '<div align="center">' . $str . '</div>', 'EIdNo');
        echo $this->datatables->generate();
    }

    function assign_in_charges()
    {
        $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('groups[]', 'Groups ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $groups = $this->input->post('groups');
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $empList = implode(',', $empID);
        $pcID = current_pc();
        $userID = current_userID();
        $userName = current_employee();
        $userGroup = current_user_group();
        $current_date = current_date();

        $existingEmp = [];
        $insert_data = [];
        $i = 0;
        foreach ($groups as $grp) {
            $data = $this->db->query("SELECT groupMaster.groupID, groupName, inChargeTB.empID, CONCAT(ECode,' - ',Ename2) AS empName
                                FROM srp_erp_payrollgroups AS groupMaster
                                JOIN srp_erp_payrollgroupincharge AS inChargeTB ON groupMaster.groupID = inChargeTB.groupID
                                JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=inChargeTB.empID
                                WHERE groupMaster.companyID = '{$companyID}' AND groupMaster.companyID = '{$companyID}'
                                AND empTB.Erp_companyID = '{$companyID}' AND groupMaster.groupID={$grp}
                                AND empID IN ({$empList})")->result_array();

            if (!empty($data)) {
                $existingEmp[$grp] = $data;
            }

            if (empty($existingEmp)) {
                foreach ($empID as $emp_row) {
                    $insert_data[$i]['empID'] = $emp_row;
                    $insert_data[$i]['groupID'] = $grp;
                    $insert_data[$i]['companyID'] = $companyID;
                    $insert_data[$i]['createdPCID'] = $pcID;
                    $insert_data[$i]['createdUserID'] = $userID;
                    $insert_data[$i]['createdUserName'] = $userName;
                    $insert_data[$i]['createdUserGroup'] = $userGroup;
                    $insert_data[$i]['createdDateTime'] = $current_date;
                    $i++;
                }
            }
        }

        if (!empty($existingEmp)) {

            $str = '';
            foreach ($existingEmp as $key => $ex_employee) {
                $groupName = $ex_employee[0]['groupName'];
                $str .= ($str != '') ? '<br/>' : '';
                $str .= '<span class="symbolSty"> ' . $groupName . '</span><br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ';
                $str .= implode('<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- ', array_column($ex_employee, 'empName'));

            }

            $str = '<h4 style="font-weight: 600;">Following employees already exist in following groups</h4><hr>' . $str;
            die(json_encode(['w', $str]));
        }

        //echo '<pre>'; print_r($insert_data); echo '</pre>';        die();

        $this->db->trans_start();
        $this->db->insert_batch('srp_erp_payrollgroupincharge', $insert_data);
        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error process']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'In-charges successfully added']);
        }
    }

    function removeSingle_emp_payrollGroup()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('removeType', 'Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $masterID = trim($this->input->post('masterID') ?? '');
            $empID = $this->input->post('empID');
            $removeType = $this->input->post('removeType');
            $companyID = current_companyID();

            $this->db->trans_start();

            $where = [
                'companyID' => $companyID,
                'groupID' => $masterID
            ];

            $empColumn = ($removeType == 'employees') ? 'employeeID' : 'empID';
            $tableName = ($removeType == 'employees') ? 'srp_erp_payrollgroupemployees' : 'srp_erp_payrollgroupincharge';
            $msg = ($removeType == 'employees') ? 'Employee' : 'In-charge';
            $where[$empColumn] = $empID;

            $this->db->where($where)->delete($tableName);

            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', $msg . ' deleted successfully']);
            }
        }
    }

    function remove_all_emp_payrollGroup()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('removeType', 'Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            $masterID = trim($this->input->post('masterID') ?? '');
            $removeType = $this->input->post('removeType');
            $companyID = current_companyID();

            $this->db->trans_start();

            $where = [
                'companyID' => $companyID,
                'groupID' => $masterID
            ];

            $tableName = ($removeType == 'employees') ? 'srp_erp_payrollgroupemployees' : 'srp_erp_payrollgroupincharge';
            $msg = ($removeType == 'employees') ? 'Employee' : 'In-charge';

            $this->db->where($where)->delete($tableName);


            $this->db->trans_complete();

            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                echo json_encode(['e', 'Error in process']);
            } else {
                $this->db->trans_commit();
                echo json_encode(['s', $msg . ' deleted successfully']);
            }
        }
    }

    function employee_list_by_segment()
    {
        $status = $this->input->post('status');
        $empArr = employee_list_by_segment(null, $status, 0);

        $dropID = $this->input->post('dropID');
        $dropID = (!empty($dropID)) ? $dropID : 'empID';

        $html = '<select name="empID[]" id="' . $dropID . '" class="form-control" multiple="multiple"  required>';

        if ($empArr) {
            foreach ($empArr as $empID) {
                $html .= '<option value="' . $empID['EIdNo'] . '">' . $empID['ECode'] . '|' . $empID['Ename2'] . '</option>';
            }
        }
        $html .= '</select>';

        echo json_encode(['s', $html]);

    }

    function employee_details_report()
    {
        $outPut = $this->uri->segment(3);
        $this->form_validation->set_rules('empID[]', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('columns[]', 'Columns', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $columns2 = $columns = $this->input->post('columns');
        $empID = $this->input->post('empID');
        $isDischarged = $this->input->post('isDischarged');
        $bank_str = '';


        if (in_array('EDOB', $columns2)) {
            $key = array_search('EDOB', $columns2);
            $columns2[$key] = 'DATE_FORMAT(EDOB,\'' . $convertFormat . '\') AS EDOB';
        }
        if (in_array('EDOJ', $columns2)) {
            $key = array_search('EDOJ', $columns2);
            $columns2[$key] = 'DATE_FORMAT(EDOJ,\'' . $convertFormat . '\') AS EDOJ';
        }
        if (in_array('DateAssumed', $columns2)) {
            $key = array_search('DateAssumed', $columns2);
            $columns2[$key] = 'DATE_FORMAT(DateAssumed,\'' . $convertFormat . '\') AS DateAssumed';
        }
        if (in_array('dischargedDate', $columns2)) {
            $key = array_search('dischargedDate', $columns2);
            $columns2[$key] = 'DATE_FORMAT(dischargedDate,\'' . $convertFormat . '\') AS dischargedDate';
        }
        if (in_array('isDischarged', $columns2)) {
            $key = array_search('isDischarged', $columns2);
            $columns2[$key] = 'IF(isDischarged=1,\'Discharged\',\'Active\') AS isDischarged';
        }
        if (in_array('EPassportExpiryDate', $columns2)) {
            $key = array_search('EPassportExpiryDate', $columns2);
            $columns2[$key] = 'DATE_FORMAT(EPassportExpiryDate,\'' . $convertFormat . '\') AS EPassportExpiryDate';
        }
        if (in_array('EVisaExpiryDate', $columns2)) {
            $key = array_search('EVisaExpiryDate', $columns2);
            $columns2[$key] = 'DATE_FORMAT(EVisaExpiryDate,\'' . $convertFormat . '\') AS EVisaExpiryDate';
        }
        if (in_array('licenceExpireDate', $columns2)) {
            $key = array_search('licenceExpireDate', $columns2);
            $columns2[$key] = 'DATE_FORMAT(licenceExpireDate,\'' . $convertFormat . '\') AS licenceExpireDate';
        }
        if (in_array('bankDet', $columns2)) {
            $key = array_search('bankDet', $columns2);
            $columns2[$key] = 'bnkTB.emp_bnkDet AS bankDet';

            $bank_str = "LEFT JOIN (
                             SELECT employeeNo, GROUP_CONCAT(bnkDet  SEPARATOR ' , ') AS  emp_bnkDet FROM (
                                SELECT acc.employeeNo, CONCAT_WS( ' | ', bankName, bnk.bankSwiftCode, #branchName, 
                                acc.accountNo, accountHolderName,
                                CONCAT(toBankPercentage,'%')) AS bnkDet
                                FROM srp_erp_pay_salaryaccounts acc #ON acc.employeeNo = empTb.EIdNo
                                JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID AND bnk.companyID = {$companyID}
                                JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID AND brn.companyID = {$companyID}                                        
                             ) AS t1 
                             GROUP BY employeeNo
                         ) AS bnkTB ON bnkTB.employeeNo = empTB.EIdNo";
        }
        //echo '<pre>'; print_r($columns2); echo '</pre>'; die();

        $empIDList = implode(',', $empID);
        $select = implode(', ', $columns2);
        $where = ($isDischarged == '') ? '' : ' AND isDischarged=' . $isDischarged;


        $detail = $this->db->query("SELECT $select
                                    FROM srp_employeesdetails AS empTB
                                    LEFT JOIN (
                                        SELECT empID, Ename2 AS reportManger FROM srp_erp_employeemanagers
                                        JOIN srp_employeesdetails ON managerID=EIdNo
                                        WHERE active=1 AND isPrimary = 1 AND companyID={$companyID}
                                    ) AS mangerTB ON mangerTB.empID = EIdNo
                                    LEFT JOIN (
                                        SELECT segmentID, description AS segmentStr FROM srp_erp_segment WHERE companyID={$companyID}
                                    ) AS segmentTB ON segmentTB.segmentID=empTB.segmentID
                                    LEFT JOIN (
                                        SELECT DesignationID, DesDescription AS designationStr FROM srp_designation WHERE Erp_companyID={$companyID}
                                    ) AS designationTB ON designationTB.DesignationID=empTB.EmpDesignationId
                                    LEFT JOIN (
                                        SELECT NId, Nationality AS nationalityStr FROM srp_nationality WHERE Erp_companyID={$companyID}
                                    ) AS nationalityTB ON nationalityTB.NId=empTB.Nid
                                    LEFT JOIN (
                                        SELECT RId, Religion AS religionStr FROM srp_religion WHERE Erp_companyID={$companyID}
                                    ) AS religionTB ON religionTB.RId=empTB.Rid
                                    LEFT JOIN (
                                        SELECT EmpContractTypeID, Description AS empTypeStr FROM srp_empcontracttypes WHERE Erp_companyID={$companyID}
                                    ) AS contractType ON contractType.EmpContractTypeID=empTB.EmployeeConType
                                    LEFT JOIN (
                                        SELECT gradeID, gradeDescription AS gradeStr FROM srp_erp_employeegrade WHERE companyID={$companyID}
                                    ) AS employeeGradeTB ON employeeGradeTB.gradeID=empTB.gradeID
                                    LEFT JOIN (
                                        SELECT EmpID, DepartmentDes AS departmentStr FROM srp_departmentmaster AS t1
                                        JOIN srp_empdepartments AS t2 ON t1.DepartmentMasterID=t2.DepartmentMasterID AND t2.isActive = 1
                                        WHERE t1.Erp_companyID={$companyID} AND t2.Erp_companyID={$companyID} GROUP BY EmpID
                                    ) AS departmentsTB ON departmentsTB.EmpID=empTB.EIdNo
                                    LEFT JOIN (
                                        SELECT maritialstatusID, description AS maritialStr FROM srp_erp_maritialstatus
                                    ) AS maritialStatusTB ON maritialStatusTB.maritialstatusID=empTB.MaritialStatus
                                    LEFT JOIN (
                                        SELECT genderID, `name` AS genderStr FROM srp_erp_gender
                                    ) AS genderTB ON genderTB.genderID=empTB.Gender
                                    LEFT JOIN (
                                        SELECT floorID, floorDescription FROM srp_erp_pay_floormaster
                                    ) AS floorTB ON floorTB.floorID=empTB.floorID
                                    LEFT JOIN (
                                        SELECT sponsorID, sponsorName FROM srp_erp_sponsormaster
                                    ) AS sponsorTB ON sponsorTB.sponsorID=empTB.sponsorID
                                    LEFT JOIN (
                                        SELECT personToContactName, personToContactName_O, personToContactMobile,
                                        personToContactTelephone, personToContactAddress, personToContactAddress_O,
                                        rel.relationship AS em_relationshipDes, county.CountryDes AS em_country, empID
                                        FROM srp_erp_employeepersontocontactdetails em
                                        LEFT JOIN srp_erp_family_relationship rel ON rel.relationshipID=em.relationshipType
                                        LEFT JOIN srp_countrymaster county ON county.countryID = em.country
                                        WHERE em.companyID = {$companyID} AND em.isDefault = 1
                                    ) AS em ON em.empID = empTB.EIdNo
                                    LEFT JOIN(
                                        SELECT PersonID, sub_types.description licenceType, documentNo AS licenceNo,
                                        expireDate AS licenceExpireDate
                                        FROM srp_documentdescriptionmaster mas
                                        JOIN srp_documentdescriptionsetup AS setup ON mas.DocDesID=setup.DocDesID
                                        JOIN srp_documentdescriptionforms forms ON forms.DocDesID=mas.DocDesID
                                        AND PersonType = 'E' AND forms.isActive = 1 AND forms.isDeleted = 0
                                        JOIN srp_erp_system_document_sub_types sub_types ON sub_types.sub_id=forms.subDocumentType
                                        AND sub_types.companyID={$companyID} AND system_type_id = 6   
                                        WHERE mas.Erp_companyID = {$companyID} AND mas.isDeleted = 0
                                    ) AS licenTB ON licenTB.PersonID = empTB.EIdNo
                                    LEFT JOIN (
                                        SELECT travelFrequencyID, frequencyDescription AS freqDesc FROM srp_erp_travelfrequency WHERE companyID={$companyID}
                                    ) AS freqTB ON freqTB.travelFrequencyID=empTB.travelFrequencyID
                                    LEFT JOIN (
                                        SELECT id, description AS commissionDesc FROM srp_erp_pay_commissionscheme WHERE companyID={$companyID}
                                    ) AS comSchemeTB ON comSchemeTB.id=empTB.commissionSchemeID
                                    {$bank_str}
                                    WHERE Erp_companyID={$companyID} AND EIdNo IN ({$empIDList}) {$where} ORDER BY empTB.EmpSecondaryCode")->result_array();

        $columnList = "'" . implode("','", $columns) . "'";
        $columnTitle = $this->db->query("SELECT columnTitle FROM srp_erp_employeedetailreport WHERE
                                         columnName IN ({$columnList}) ORDER BY id")->result_array();
        $data['columnTitle'] = $columnTitle;
        $data['detail'] = $detail;
        $data['columns'] = $columns;
        $data['isForPrint'] = $outPut;

        if ($outPut == 'Excel') {
            $this->employee_details_excel($columnTitle, $detail, $columns);
        }
        if ($outPut == 'Print') {
            $data['isForPrint'] = 'Y';
            $html = $this->load->view('system/hrm/ajax/employee-details-report', $data, true);
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4-L', 1);
        } else {
            echo json_encode(['s', $this->load->view('system/hrm/ajax/employee-details-report', $data, true)]);
        }
    }

    function employee_details_excel($columnTitle, $detail, $columns)
    {
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Employee Details Report');

        $ex_data = [];
        $fileName = 'Employee Details.xls';
        $ex_data[0] = [$this->common_data['company_data']['company_name']];
        $ex_data[1] = ['Employee Details'];

        $ex_data[2] = [''];
        $ex_data[3][0] = '#';
        foreach ($columnTitle as $key => $title) {
            $ex_data[3][$key + 1] = $title['columnTitle'];
        }

        $n = 4;
        $i = 1;
        foreach ($detail as $row) {
            $ex_data[$n][0] = $i;
            foreach ($columns as $key => $column_row) {
                $ex_data[$n][$key + 1] = $row[$column_row];
            }
            $n++;
            $i++;
        }

        $this->excel->getActiveSheet()->fromArray($ex_data, null, 'A1');
        $this->excel->getActiveSheet()->getStyle('A1:I2')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1:I2')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->mergeCells('A1:M1');
        $this->excel->getActiveSheet()->mergeCells('A2:M2');
        $this->excel->getActiveSheet()->getStyle('A4:AM4')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A4:AM4')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->getStyle('A4:AM4')->getFill()->setFillType(Fill::FILL_SOLID)->getStartColor()->setRGB('cee2f3');

        /*ob_clean();
        ob_start();*/
        header('Content-Type: application/vnd.ms-excel;charset=utf-16');
        header('Content-Disposition: attachment;filename="' . $fileName . '"');
        header('Cache-Control: max-age=0');

        /*ob_clean();*/
        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function mail_to()
    {
        $param["empName"] = 'Hasitha';
        $param["body"] = 'Leave application   is approved';
        //karangoda82@gmail.com
        $mailData = [
            'approvalEmpID' => '10',
            'documentCode' => 'Q1001',
            'toEmail' => 'hasitha@test.com',
            'subject' => 'Image test',
            'param' => $param,
        ];

        send_approvalEmail($mailData);
        echo 'ok';
    }

    function attendaceVerifyRecords()
    {
        $inputData = $this->input->post();
        $fromDate = $inputData['fromDate'];
        $toDate = $inputData['toDate'];
        $where = '';
        if(true === isset($inputData['attendance_master']))
        {
            $where = " AND empAttMasterID = " . $inputData['attendance_master'];
        }
        $sql = " SELECT count(*) as totalCount FROM srp_erp_pay_empattendancereview WHERE presentTypeID = 4 AND attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' $where";
        $data = $this->db->query($sql)->row_array();
        echo json_encode(['s', $data['totalCount']]);
    }

    public function deleteall_attendanceMaster()
    {
       // $this->form_validation->set_rules('floorID[]', 'Floor', 'required');
        $this->form_validation->set_rules('fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('toDate', 'To Date', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->deleteall_attendanceMaster());
        }
    }


    function getlvpolicy_and_group()
    {
        $empID = $this->input->post('empID');
        $leaveTypeID = $this->input->post('leaveTypeID');
        $sql = "select leaveGroupID from srp_employeesdetails where EIdNo=$empID ";
        $data['leaveGroupID'] = $this->db->query($sql)->row_array();
        $lvgrpid = $data['leaveGroupID']['leaveGroupID'];
        $sql = "select policyMasterID from srp_erp_leavegroupdetails where leaveGroupID=$lvgrpid AND leaveTypeID=$leaveTypeID  ";
        $data['policyMasterID'] = $this->db->query($sql)->row_array();

        echo json_encode($data);
    }


    function attandance_master_excelUpload()
    {
        $floorID = $this->input->post('floorID');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $date_format = $this->input->post('date_format');
        $companyID = current_companyID();

        //make the upload for single day
        $toDate = $fromDate;
        

        $review = $this->db->query("SELECT floorID FROM srp_erp_pay_empattendancereview WHERE floorID=$floorID AND attendanceDate BETWEEN '$fromDate' AND '$toDate' ")->result_array();
        if (!empty($review)) {
            die(json_encode(['e', 'Records already exist for this date please delete records and re upload']));
        }

        if (isset($_FILES['excelUpload_file']['size']) && $_FILES['excelUpload_file']['size'] > 0) {
            $type = explode(".", $_FILES['excelUpload_file']['name']);
            if (strtolower(end($type)) != 'csv') {
                die(json_encode(['e', 'File type is not csv - ', $type]));
            }
            $i = 0;
            $x = 0;
            $n = 0;
            $filename = $_FILES["excelUpload_file"]["tmp_name"];
            $file = fopen($filename, "r");
            $filed = fopen($filename, "r");
            $dataExcel = [];
            $dataExcel2 = [];


            while (($getDataD = fgetcsv($filed, 10000, ",")) !== FALSE) {
         
                if ($x > 0) {
                    $att_date = attendance_date_format_convert($date_format, $getDataD[3]);
                    $this->db->delete('srp_erp_pay_empattendancetemptable', array('empMachineID' => $getDataD[0], 'attDate' => $att_date));
                }
         
                $x++;
            }

            while (($getData = fgetcsv($file, 10000, ",")) !== FALSE) {
        
                if ($i > 0) {
                 
                    $att_date_checkin = attendance_date_format_convert($date_format, $getData[3]);
                    $att_date_checkout = attendance_date_format_convert($date_format, $getData[4]);

                    if (!empty($getData[3])) {
                
                        $checkinout = array('checkIn'=> $getData[5], 'checkOut' => $getData[6]);
                        $shitID = null;
                        //check manual shift id
                        if(!empty($getData[7])){
                            $shiftDetails = $this->db->where('Description',$getData[7])->where('companyID',$companyID)->from('srp_erp_pay_shiftmaster')->get()->row_array();

                            if($shiftDetails){
                                $shiftID = $shiftDetails['shiftID'];
                            }
                        }
                        
                        foreach($checkinout as $key => $val){
                            $dataExcel[$i]['machineAutoID'] = $getData[1];
                            $dataExcel[$i]['device_id'] = $getData[0];
                            $dataExcel[$i]['empMachineID'] = $getData[1];
                            if($key == 'checkIn'){
                                $dataExcel[$i]['attDate'] = $att_date_checkin;
                                $att_date = $att_date_checkin;
                            }else{
                                $dataExcel[$i]['attDate'] = $att_date_checkout;
                                $att_date = $att_date_checkout;
                            }
            
                            $dataExcel[$i]['attTime'] = date('H:i:s',strtotime($val));
                            $dataExcel[$i]['attType'] = ($key == 'checkIn') ? 'I' : 'O';
                            $date_added =  $att_date . ' ' . date('H:i:s',strtotime($val));
                            $dataExcel[$i]['attDateTime'] = date('Y-m-d H:i:s',strtotime($date_added));
                            $dataExcel[$i]['latitude'] = 0;
                            $dataExcel[$i]['longitude'] = 0;
                            $dataExcel[$i]['isUpdated'] = 0;
                            $dataExcel[$i]['uploadType'] = 1;
                            $dataExcel[$i]['companyID'] = current_companyID();
                            $dataExcel[$i]['createdUserID'] = current_userID();
                            $dataExcel[$i]['timestamp'] =  current_date();
                            $dataExcel[$i]['manualShiftID'] =  $shiftID;

                            $i++;
                        }
                       
                    }

                }
                $i++;
            }
            fclose($file);


            if (!empty($dataExcel)) {
                $result = $this->db->insert_batch('srp_erp_pay_empattendancetemptable', $dataExcel);
                if ($result) {
                    echo json_encode(['s', 'Successfully Updated']);
                } else {
                    echo json_encode(['e', 'Upload Failed']);
                }
            } else {
                echo json_encode(['e', 'No records in the uploaded file']);
            }
        } else {
            echo json_encode(['e', 'No Files Attached']);
        }
    }

    function downloadExcel()
    {

        $this->form_validation->set_rules('floorID', 'Floor', 'required');
        $this->form_validation->set_rules('upload_fromDate', 'From Date', 'required');
        $this->form_validation->set_rules('upload_toDate', 'To Date', 'required');


        if ($this->form_validation->run() == FALSE) {
            exit(json_encode(['e', validation_errors()]));
        }

        $floorID = $this->input->post('floorID');

        // updated for one day retreval
        $frmDate = $this->input->post('upload_fromDate');
        $toDate = $this->input->post('upload_fromDate');
        $companyID = current_companyID();


        $begin = new DateTime($frmDate);
        $end = new DateTime($toDate);
        $end = $end->add(new DateInterval('P1D'));
        $dateRange = new DatePeriod($begin, new DateInterval('P1D'), $end);

        $uniqueKey = current_userID() . '' . $companyID . '' . rand(2, 500) . '' . date('YmdHis');
        $date_arr = [];
        foreach ($dateRange as $key => $date) {
            $date_arr[$key]['actualDate'] = $date->format("Y-m-d");
            $date_arr[$key]['uniqueID'] = $uniqueKey;
            $date_arr[$key]['companyID'] = $companyID;
        }

        if (!empty($date_arr)) {
            $this->db->insert_batch('srp_erp_pay_empattendancedaterangetemp', $date_arr);
        }

        $emp_arr = $this->db->query("SELECT emp.EIdNo,empLoc.floorID AS floorID, empLoc.deviceID as deviceID, empLoc.empMachineID as empMachineID , emp.Ename2, date_temp.actualDate,  
                    IF( isDischarged = 0, 'Y', IF( dischargedDate >= date_temp.actualDate, 'Y', 'N') ) dis_st,shiftmaster.Description as shiftDescription
                    FROM srp_employeesdetails AS emp
                    JOIN srp_erp_empattendancelocation AS empLoc ON empLoc.empID = emp.EIdNo AND companyID = {$companyID}
                    JOIN srp_erp_pay_shiftemployees AS shiftemployee ON empLoc.empID = shiftemployee.empID AND shiftemployee.companyID = {$companyID}
                    JOIN srp_erp_pay_shiftmaster AS shiftmaster ON shiftemployee.shiftID = shiftmaster.shiftID AND shiftmaster.companyID = {$companyID}
                    JOIN srp_erp_pay_empattendancedaterangetemp AS date_temp ON emp.DateAssumed <= date_temp.actualDate
                    JOIN srp_erp_pay_floormaster AS fd ON fd.floorID = empLoc.floorID  
                    WHERE Erp_companyID = {$companyID} AND isSystemAdmin = 0 AND empLoc.floorID = {$floorID}
                    AND empConfirmedYN = 1 AND date_temp.companyID = {$companyID} AND date_temp.uniqueID = '{$uniqueKey}' 
                    AND date_temp.actualDate BETWEEN '{$frmDate}' AND '{$toDate}' 
                    -- AND NOT EXISTS (
                    --     SELECT review.empID FROM srp_erp_pay_empattendancereview AS review WHERE review.companyID = {$companyID} 
                    --     AND review.empID = emp.EIdNo AND review.attendanceDate = date_temp.actualDate
                    --     GROUP BY review.empID,attendanceDate
                    -- )  
                    GROUP BY actualDate, EIdNo 
                    HAVING dis_st = 'Y'
                    ORDER BY actualDate, emp.ECode ASC ")->result_array();
        
        
        // print_r($emp_arr); exit;

        // exit;

        $this->db->delete('srp_erp_pay_empattendancedaterangetemp', ['uniqueID' => $uniqueKey, 'companyID' => $companyID]);

        $csv_data = [
            [
                0 => 'Device ID',
                1 => 'Emp MachineID',
                2 => 'Emp Name',
                3 => 'Clock In Date',
                4 => 'Clock out Date',
                5 => 'Clock In Time',
                6 => 'Clock Out Time',
                7 => 'Shift'
            ]
        ];

        if (!empty($emp_arr)) {
            foreach ($emp_arr as $row) {
                $csv_data[] = [
                    $row['deviceID'], $row['empMachineID'], $row['Ename2'], $row['actualDate'],null,null,null,$row['shiftDescription']
                ];
            }
        }

        header("Content-Type: text/csv");
        header("Content-Disposition: attachment; filename=Attendance.csv");


        $output = fopen("php://output", "w");
        foreach ($csv_data as $row) {
            fputcsv($output, $row);
        }
        fclose($output);
    }

    /*Load salary declaration detail after adding master */
    function load_SalaryDeclarationMaster()
    {
        $id = $this->input->post('id');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $result = $this->Employee_model->get_salaryVariableDeclarationMaster($id);
        }else{
            $result = $this->Employee_model->get_salaryDeclarationMaster($id);
        }
       

        $balancePayment = $this->db->query("SELECT declarationDetailID, balanceAmount FROM `srp_erp_pay_balancepayment` WHERE sdMasterID={$id}")->result_array();
        if (!empty($balancePayment)) {
            $balancePayment = array_group_by($balancePayment, 'declarationDetailID');
        }

        $data['balancePayment'] = $balancePayment;

        if (!empty($result)) {
            if ($result['payrollGroup'] > 0) {
                $result['payrollGroupStr'] = $this->db->get_where('srp_erp_hrperiodgroup', ['hrGroupID' => $result['payrollGroup']])->row('description');
            }

            $data['output'] = $result;

            if($isVariable){
                echo $this->load->view('system/hrm/ajax/variable_salary_declaration_multiple_insertion_ajax_details', $data, true);
            }else{
                echo $this->load->view('system/hrm/ajax/salary_declaration_multiple_insertion_ajax_details', $data, true);
            }
            

        } else {
            return false;
        }
    }

    function save_salaryDeclarationMultipleEmployee()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required|numeric');
        $this->form_validation->set_rules('category[]', 'Salary Category', 'trim|required');
        $this->form_validation->set_rules('temp_empHiddenID[]', 'Employee', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $empList = $empArr = $this->input->post('temp_empHiddenID');
        $categoryList_arr = $catArr = $this->input->post('category');
        $effectiveDate = $this->input->post('bulk_effectiveDate');
        $payDate = $this->input->post('payDate');
        $isVariable = $this->input->post('isVariable');
        $narration = '';

        $empList = implode(',', $empList);
       
        $date_format_policy = date_format_policy();
        $effectiveDate = input_format_date($effectiveDate, $date_format_policy);
        $payDate = input_format_date($payDate, $date_format_policy);
        $amount = 0;
        $monthlyDeclarationList = array();

        if($isVariable){

            $categoryList = array();

            foreach($categoryList_arr as $cat){
                $temp = explode('|',$cat);
                $categoryList[] = $temp[1];
                $monthlyDeclarationList[] = $temp[0];
            }
        }else{
            $categoryList = $catArr = $this->input->post('category');
        }

        $catArr = $categoryList;
        $categoryList = implode(',', $categoryList);
       

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }

        
        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $payYear = date('Y', strtotime($payDate));
        $payMonth = date('m', strtotime($payDate));
        $isPayrollCategory = ($masterData['isPayrollCategory'] == 1) ? 'N' : 'Y';

        if ($masterData['isInitialDeclaration'] != 1 && $isVariable != 1) {
            if ($payDate < $effectiveDate) {
                die(json_encode(['m', 'Pay date can not be less than effective date']));
            }

            $isPayrollProcessed = isPayrollProcessedForEmpGroup($empList, $payYear, $payMonth, $isPayrollCategory);
            if (!empty($isPayrollProcessed)) {
                $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
                die(json_encode(['m', 'Payroll already processed on selected month (' . $payDate . ') for following employees <br/>' . $employeesStr]));
            }
        }

        $currencyID = $masterData['transactionCurrencyID'];

        if($isVariable){

            $details = $this->db->query(" SELECT EIdNo AS empID, ECode, Ename2, payCurrencyID, catID, amount,
                    gr.groupID, monthlyDeclarationType, EDOJ
                FROM srp_employeesdetails empTB 
                LEFT JOIN (
                    SELECT employeeNo, cat.salaryCategoryID catID, SUM(amount) AS amount, monthlyDeclarationType
                    FROM srp_erp_pay_monthlydeclarationstypes cat 
                    JOIN srp_erp_pay_variable_salarydeclartion decl ON cat.monthlyDeclarationID = decl.monthlyDeclarationID 
                    AND decl.salaryCategoryID IN ({$categoryList})
                    WHERE employeeNo IN ({$empList}) GROUP BY employeeNo, cat.salaryCategoryID
                ) sal ON sal.employeeNo = empTB.EIdNo
                LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                WHERE Erp_companyID = {$companyID} AND payCurrencyID = {$currencyID} AND isDischarged = 0 
                AND EIdNo IN ({$empList})")->result_array();
           
        }else{

            $details = $this->db->query("SELECT EIdNo AS empID, ECode, Ename2, payCurrencyID, catID, amount,
                         gr.groupID, salaryCategoryType, EDOJ
                        FROM srp_employeesdetails empTB 
                        LEFT JOIN (
                            SELECT employeeNo, cat.salaryCategoryID catID, SUM(amount) AS amount, salaryCategoryType
                            FROM srp_erp_pay_salarycategories cat 
                            JOIN srp_erp_pay_salarydeclartion decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                            AND decl.salaryCategoryID IN ({$categoryList})
                            WHERE employeeNo IN ({$empList}) GROUP BY employeeNo, cat.salaryCategoryID
                        ) sal ON sal.employeeNo = empTB.EIdNo
                        LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                        WHERE Erp_companyID = {$companyID} AND payCurrencyID = {$currencyID} AND isDischarged = 0 
                        AND EIdNo IN ({$empList})")->result_array();

        }

        if (empty($details)) {
            die(json_encode(['e', 'Employee details not found']));
        }


        $companyCode = current_companyCode();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserName = current_employee();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();


        $trCurrID = $masterData['transactionCurrencyID'];
        $trCurrCode = $masterData['transactionCurrency'];
        $trCurrEr = 1;
        $trDPlace = $masterData['transactionCurrencyDecimalPlaces'];

        $loCurrID = $masterData['companyLocalCurrencyID'];
        $loCurrCode = $masterData['companyLocalCurrency'];
        $loCurrEr = $masterData['companyLocalER'];
        $loDPlace = $masterData['companyLocalCurrencyDecimalPlaces'];

        $rptCurrID = $masterData['companyReportingCurrencyID'];
        $rptCurrCode = $masterData['companyReportingCurrency'];
        $rptCurrEr = $masterData['companyReportingER'];
        $rptDPlace = $masterData['companyReportingCurrencyDecimalPlaces'];

        $details = array_group_by($details, 'empID');
        $salaryCatTypes = $this->db->query("SELECT salaryCategoryID, salaryCategoryType FROM srp_erp_pay_salarycategories WHERE salaryCategoryID IN ($categoryList)")->result_array();
        $salaryCatTypes = array_group_by($salaryCatTypes, 'salaryCategoryID');

        $intData = [];
        $existing_str = '';
        $payrollProcessed = '';
        $effectiveDateLessThanDOJ = '';

        foreach ($empArr as $empID) {
            $thisEmpDet = $details[$empID];
            $groupID = $thisEmpDet[0]['groupID'];
            $dateOfJoin = $thisEmpDet[0]['EDOJ'];
            $effectiveDate = ($masterData['isInitialDeclaration'] == 1) ? $dateOfJoin : $effectiveDate;
            $payDate = ($masterData['isInitialDeclaration'] == 1) ? $dateOfJoin : $payDate;
            $empName = $thisEmpDet[0]['ECode'] . ' - ' . $thisEmpDet[0]['Ename2'];

            if ($masterData['isInitialDeclaration'] == 1 && $isVariable != 1) { /*If salary declaration is initial entry, checking the last payroll process status of each employee*/
                $lastPayrollProcessed = lastPayrollProcessedForEmp($empID, $isPayrollCategory);

                $payDateFirst = date('Y-m-01', strtotime($payDate));
                if ($lastPayrollProcessed >= $payDateFirst) {
                    $payrollProcessed .= "<br/> &nbsp; - $empName => " . date('Y-F', strtotime($lastPayrollProcessed));
                }
            }

            if ($masterData['isInitialDeclaration'] != 1) { /*If salary declaration is not initial entry, checking the effective date and date of join*/
                if ($dateOfJoin > $effectiveDate) {
                    $effectiveDateLessThanDOJ .= "<br/> &nbsp; - $empName => " . date('d-m-Y', strtotime($dateOfJoin));
                }
            }

            $isExisting = $this->db->query("SELECT cat.salaryDescription FROM srp_erp_salarydeclarationdetails det
                            JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = det.salaryCategoryID
                            WHERE employeeNo = {$empID} AND det.declarationMasterID = {$masterID}
                            AND det.salaryCategoryID IN ({$categoryList})")->result_array();

            if (!empty($isExisting)) {
                $isExisting = array_column($isExisting, 'salaryDescription');
                $isExisting = '<br/> &nbsp; - &nbsp; ' . implode('<br/> &nbsp; - &nbsp; ', $isExisting);
                $existing_str .= '<br/><b>' . $empName . '</b>' . $isExisting;
            }

            if (empty($existing_str) && empty($payrollProcessed) && empty($effectiveDateLessThanDOJ)) {
                foreach ($catArr as $key => $catID) {
                    $currentData = array_column($thisEmpDet, 'catID');
                    $catKey = array_search($catID, $currentData);
                    $currAmount = ($catKey !== false) ? $thisEmpDet[$catKey]['amount'] : 0;
                    $catType = $salaryCatTypes[$catID][0]['salaryCategoryType'];
                    $monthlyDeclaraiotnVal = isset($monthlyDeclarationList[$key]) ? $monthlyDeclarationList[$key] : 0;
                
                    if($isVariable){
                       
                        $currentAmount_details = fetch_variable_declaration_emp($empID,$monthlyDeclaraiotnVal);
                        if($currentAmount_details){
                            $currAmount = $currentAmount_details['transactionAmount'] + $currentAmount_details['currentAmount'];
                        }
                       
                    }
                   

                    $intData[] = [
                        'declarationMasterID' => $masterID, 'employeeNo' => $empID, 'accessGroupID' => $groupID,
                        'salaryCategoryType' => $catType, 'salaryCategoryID' => $catID,
                        'amount' => $amount,
                        'effectiveDate' => $effectiveDate, 'payDate' => $payDate, 'narration' => $narration, 'currentAmount' => $currAmount,

                        'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurrCode,
                        'transactionER' => $trCurrEr, 'transactionCurrencyDecimalPlaces' => $trDPlace,

                        'companyLocalCurrencyID' => $loCurrID, 'companyLocalCurrency' => $loCurrCode,
                        'companyLocalER' => $loCurrEr, 'companyLocalCurrencyDecimalPlaces' => $loDPlace,

                        'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurrCode,
                        'companyReportingER' => $rptCurrEr, 'companyReportingCurrencyDecimalPlaces' => $rptDPlace,

                        'transactionAmount' => $amount, 'companyLocalAmount' => $amount, 'companyReportingAmount' => $amount,

                        'companyID' => $companyID, 'companyCode' => $companyCode, 'createdPCID' => $createdPCID, 'createdUserID' => $createdUserID,
                        'createdUserName' => $createdUserName, 'createdUserGroup' => $createdUserGroup, 'createdDateTime' => $createdDateTime,
                        'timestamp' => $createdDateTime,
                    ];

                    

                    if($isVariable){
                        $arr = array_keys($intData);
                        $key = end($arr);
                       
                        $intData[$key]['monthlyDeclarationID'] =  $monthlyDeclaraiotnVal;
                    }
                    
                }
            }

        }

        if (!empty($effectiveDateLessThanDOJ)) {
            $msg = '<b>Effective date should be greater than employee date of join </b> ' . $effectiveDateLessThanDOJ;
            die(json_encode(['m', $msg]));
        }

        if (!empty($payrollProcessed)) {
            $msg = '<b>Pay date should be greater than last payroll processed period </b> ' . $payrollProcessed;
            die(json_encode(['m', $msg]));
        }

        if (!empty($existing_str)) {
            $msg = 'Following salary categories already added for these employees' . $existing_str;
            die(json_encode(['m', $msg]));
        }

        $this->db->trans_start();

        if($isVariable){
            $this->db->insert_batch('srp_erp_variable_salarydeclarationdetails', $intData);
        }else{
            $this->db->insert_batch('srp_erp_salarydeclarationdetails', $intData);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Emplyees` added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function salaryDeclaration_inline_update()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('detID', 'Detail ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $detID = $this->input->post('detID');
        $empID = $this->input->post('empID');
        $percentage = $this->input->post('percentage');
        $isVariable = $this->input->post('isVariable');
        $amount = $this->input->post('incrementAmount');
        $percentage = (empty($percentage)) ? 0 : $percentage;

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
        
        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $where = ['employeeNo' => $empID, 'declarationDetailID' => $detID, 'declarationMasterID' => $masterID];

        if($isVariable){
            $detailData = $this->db->get_where('srp_erp_variable_salarydeclarationdetails', $where)->row_array();
        }else{
            $detailData = $this->db->get_where('srp_erp_salarydeclarationdetails', $where)->row_array();
        }
        

        if (empty($detailData)) {
            die(json_encode(['e', 'Document detail is not found']));
        }

        $dateTime = current_date();
        $catVal = $detailData['salaryCategoryID'];
        $effDate = $detailData['effectiveDate'];
        $payDate = $detailData['payDate'];
        $dPlace = $masterData['transactionCurrencyDecimalPlaces'];
        $loc_ER = $masterData['companyLocalER'];
        $rpt_ER = $masterData['companyReportingER'];
        $amount = round($amount, $dPlace);
        $loc_amount = ($amount / $loc_ER);
        $rpt_amount = ($amount / $rpt_ER);

        $updateData = [
            'transactionAmount' => $amount, 'amount' => $amount, 'percentage' => $percentage, 'companyLocalAmount' => $loc_amount,
            'companyReportingAmount' => $rpt_amount, 'modifiedPCID' => current_pc(), 'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(), 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        if($isVariable){
            $this->db->where($where)->update('srp_erp_variable_salarydeclarationdetails', $updateData);
            $balanceAmount = $this->calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $amount, $dateTime, $dPlace);
        }else{
            $this->db->where($where)->update('srp_erp_salarydeclarationdetails', $updateData);
            $balanceAmount = $this->calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $amount, $dateTime, $dPlace);
        }
        

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.', 'balanceAmount' => $balanceAmount]);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function salaryDeclaration_inline_date_update()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('detID', 'Detail ID', 'trim|required');
        $this->form_validation->set_rules('dateOf', 'Date Type', 'trim|required');
        $this->form_validation->set_rules('selectedDate', 'Selected Date', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $detID = $this->input->post('detID');
        $selectedDate = $this->input->post('selectedDate');
        $dateOf = $this->input->post('dateOf');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){    
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();

            $where = ['declarationDetailID' => $detID, 'declarationMasterID' => $masterID];
            $detailData = $this->db->get_where('srp_erp_variable_salarydeclarationdetails', $where)->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();

            $where = ['declarationDetailID' => $detID, 'declarationMasterID' => $masterID];
            $detailData = $this->db->get_where('srp_erp_salarydeclarationdetails', $where)->row_array();
        }

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

      

        if (empty($detailData)) {
            die(json_encode(['e', 'Document detail is not found']));
        }

        $dateTime = current_date();
        $empID = $detailData['employeeNo'];
        $amount = $detailData['transactionAmount'];
        $dPlace = $masterData['transactionCurrencyDecimalPlaces'];
        $catVal = $detailData['salaryCategoryID'];
        $dateColumn = ($dateOf == 'eff') ? 'effectiveDate' : 'payDate';
        $date_format_policy = date_format_policy();
        $selectedDate = input_format_date($selectedDate, $date_format_policy);
        $effDate = $detailData['effectiveDate'];
        $effDate = ($dateOf == 'eff') ? $selectedDate : $effDate;
        $payDate = $detailData['payDate'];
        $payDate = ($dateOf == 'eff') ? $payDate : $selectedDate;
        $empJoinDate = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $empID])->row('EDOJ');
        $old_balanceVal = $this->db->get_where('srp_erp_pay_balancepayment', ['declarationDetailID' => $detID])->row('balanceAmount');
        $old_balanceVal = round($old_balanceVal, $dPlace);
        if ($dateOf == 'eff') {
            $oldVal = convert_date_format($detailData['effectiveDate']);
            if ($effDate < $empJoinDate) {
                $disDate = convert_date_format($empJoinDate);
                die(json_encode(['e', 'Effective date should be greater than employee <br/>join date [ ' . $disDate . ' ]', 'oldVal' => $oldVal, 'old_balanceVal' => $old_balanceVal]));
            }

            if ($payDate < $effDate) {
                $disDate = convert_date_format($payDate);
                die(json_encode(['e', 'Effective date should be less than Pay date [ ' . $disDate . ' ]', 'oldVal' => $oldVal, 'old_balanceVal' => $old_balanceVal]));
            }
        } else {
            $oldVal = convert_date_format($detailData['payDate']);

            if ($payDate < $empJoinDate) {
                $disDate = convert_date_format($empJoinDate);
                die(json_encode(['e', 'Pay date should be greater than employee <br/>join date [ ' . $disDate . ' ]', 'oldVal' => $oldVal, 'old_balanceVal' => $old_balanceVal]));
            }

            if ($payDate < $effDate) {
                $disDate = convert_date_format($effDate);
                die(json_encode(['e', 'Pay date should be greater than effective date [ ' . $disDate . ' ]', 'oldVal' => $oldVal, 'old_balanceVal' => $old_balanceVal]));
            }

            $isPayrollCategory = ($masterData['isPayrollCategory'] == 1) ? 'N' : 'Y';
            $lastPayrollProcessed = lastPayrollProcessedForEmp($empID, $isPayrollCategory);

            $payDateFirst = date('Y-m-01', strtotime($payDate));
            if ($lastPayrollProcessed >= $payDateFirst) {
                die(json_encode(['e', 'Payroll processed up to [ ' . date('Y-F', strtotime($lastPayrollProcessed)) . ' ].<br/>Pay date should be greater than last payroll processed period.']));
            }
        }

        $updateData = [
            $dateColumn => $selectedDate, 'modifiedPCID' => current_pc(), 'modifiedUserID' => current_userID(),
            'modifiedUserName' => current_employee(), 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        if($isVariable){
            $this->db->where($where)->update('srp_erp_variable_salarydeclarationdetails', $updateData);
            $balanceAmount = $this->calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $amount, $dateTime, $dPlace);
        }else{
            $this->db->where($where)->update('srp_erp_salarydeclarationdetails', $updateData);
            $balanceAmount = $this->calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $amount, $dateTime, $dPlace);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.', 'balanceAmount' => $balanceAmount]);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $tr_amount, $dateTime, $dPlace)
    {
        $where = ['declarationDetailID' => $detID, 'empID' => $empID];
        $this->db->delete('srp_erp_pay_balancepayment', $where);

        /*** effective date and pay date should not be same month for balance calculation ***/
        if (date('Y-m-01', strtotime($effDate)) == date('Y-m-01', strtotime($payDate))) {
            return number_format(0, $dPlace, '.', '');
        }
        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;


        $totalWorkingDays = getPolicyValues('SCD', 'All');
        $totalWorkingDays = (empty($totalWorkingDays)) ? 'totalWorkingDays' : $totalWorkingDays;
        $totalWorkingDays = (trim($totalWorkingDays) == 'LAST_DAY(effectiveDate)') ? 'totalWorkingDays' : $totalWorkingDays;

        $effDay = date('d', strtotime($effDate));
        if ($effDay == 1) {
            $balanceAmount = round($tr_amount, $dPlace);
        } else {
            /************************************************************************
             * salaryProportionDays == 1 means
             * formula will be (Salary / no of day in month) * worked days
             ***********************************************************************/
            if ($salaryProportionDays == 1) {
                $totalDaysInEffectiveMonth = date('t', strtotime($effDate));
                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                $balanceAmount = ($tr_amount / $totalDaysInEffectiveMonth) * $balanceDate;
                $balanceAmount = round($balanceAmount, $dPlace);
            } else {
                $totalDaysInEffectiveMonth = ($totalWorkingDays == 'totalWorkingDays') ? date('t', strtotime($effDate)) : $totalWorkingDays;
                $balanceDate = ($totalDaysInEffectiveMonth + 1) - $effDay;
                $balanceAmount = round((($tr_amount * 12) / $salaryProportionDays) * $balanceDate, $dPlace);
            }
        }

        /*** end of calculation for effective month balance ***/


        /*** start of calculation for except effective month balance ***/
        $effDate1 = date('Y-m-01', strtotime($effDate));
        $payDate1 = date('Y-m-01', strtotime(date('Y-m-01', strtotime($payDate)) . ' -1 month'));


        $j = 0;
        while ($effDate1 < $payDate1) {
            $effDate1 = date('Y-m-d', strtotime($effDate1 . ' +1 month'));
            $balanceAmount += $tr_amount;

            if ($j > 1500) {
                break;
            }
            $j++;
        }

        /*** end of calculation for except effective month balance ***/

        $detail['empID'] = $empID;
        $detail['sdMasterID'] = $masterID;
        $detail['declarationDetailID'] = $detID;
        $detail['fromDate'] = $effDate;
        $detail['balanceAmount'] = round($balanceAmount, $dPlace);
        $detail['dueDate'] = $payDate;
        $detail['salaryCatID'] = $catVal;
        $detail['companyID'] = current_companyID();
        $detail['createdUserGroup'] = current_user_group();
        $detail['createdPCID'] = current_pc();
        $detail['createdUserID'] = current_userID();
        $detail['createdDateTime'] = $dateTime;
        $detail['createdUserName'] = current_user();

        $this->db->insert('srp_erp_pay_balancepayment', $detail);

        return number_format($balanceAmount, $dPlace, '.', '');
    }

    function delete_salary_declaration_all_details()
    {
        $masterID = $this->input->post('masterID');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
       

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $this->db->trans_start();

        if($isVariable){
            $this->db->delete('srp_erp_variable_salarydeclarationdetails', ['declarationMasterID' => $masterID]);
           // $this->db->delete('srp_erp_pay_balancepayment', ['sdMasterID' => $masterID]);
           // $this->db->delete('srp_erp_pay_balancessopayment', ['sdMasterID' => $masterID]);
        }else{
            $this->db->delete('srp_erp_salarydeclarationdetails', ['declarationMasterID' => $masterID]);
            $this->db->delete('srp_erp_pay_balancepayment', ['sdMasterID' => $masterID]);
            $this->db->delete('srp_erp_pay_balancessopayment', ['sdMasterID' => $masterID]);
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function delete_salary_declaration_single_employee()
    {

        $masterID = $this->input->post('masterID');
        $isVariable = $this->input->post('isVariable');

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
        

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $empID = trim($this->input->post('empID') ?? '');
        $companyID = current_companyID();

        $this->db->trans_start();

        if($isVariable){
            $this->db->delete('srp_erp_variable_salarydeclarationdetails', ['employeeNo' => $empID, 'declarationMasterID' => $masterID, 'companyID' => $companyID]);
        }else{
            $this->db->delete('srp_erp_salarydeclarationdetails', ['employeeNo' => $empID, 'declarationMasterID' => $masterID, 'companyID' => $companyID]);
            $this->db->delete('srp_erp_pay_balancepayment', ['empID' => $empID, 'sdMasterID' => $masterID, 'companyID' => $companyID]);
            $this->db->delete('srp_erp_pay_balancessopayment', ['empID' => $empID, 'sdMasterID' => $masterID, 'companyID' => $companyID]);
        }
       

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully deleted.']);
        }
    }

    function salaryDeclaration_apply_percentage()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('detList', 'Update ID', 'trim|required');
        $this->form_validation->set_rules('percent', 'Percentage', 'trim|required');


        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $detList = $this->input->post('detList');
        $percent = $this->input->post('percent');
        $isVariable = $this->input->post('isVariable');
        $detArr = explode(',', $detList);

        if($isVariable){
            $masterData = $this->db->get_where('srp_erp_variable_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }else{
            $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        }
       

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }


        $details = $this->db->select('employeeNo, declarationDetailID, currentAmount, salaryCategoryID, effectiveDate, payDate')
            ->from('srp_erp_salarydeclarationdetails')->where(['declarationMasterID' => $masterID])
            ->where_in('declarationDetailID', $detArr)->get()->result_array();

        if (empty($details)) {
            die(json_encode(['e', 'Document detail is not found']));
        }

        $dPlace = $masterData['transactionCurrencyDecimalPlaces'];
        $loc_ER = $masterData['companyLocalER'];
        $rpt_ER = $masterData['companyReportingER'];
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userName = current_user();
        $updateData = [];

        $this->db->trans_start();

        foreach ($details as $detailData) {

            $empID = $detailData['employeeNo'];
            $detID = $detailData['declarationDetailID'];
            $curAmount = $detailData['currentAmount'];
            $catVal = $detailData['salaryCategoryID'];
            $effDate = $detailData['effectiveDate'];
            $payDate = $detailData['payDate'];

            $amount = round(($curAmount * ($percent / 100)), $dPlace);
            $loc_amount = $amount / $loc_ER;
            $rpt_amount = $amount / $rpt_ER;

            $updateData[] = [
                'declarationDetailID' => $detID, 'transactionAmount' => $amount, 'amount' => $amount, 'percentage' => $percent,
                'companyLocalAmount' => $loc_amount, 'companyReportingAmount' => $rpt_amount, 'modifiedUserID' => $userID,
                'modifiedPCID' => $pc, 'modifiedUserName' => $userName, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
            ];

            $this->calculateBalancePayment($empID, $masterID, $detID, $catVal, $effDate, $payDate, $amount, $dateTime, $dPlace);
        }

        if($isVariable){
            $this->db->update_batch('srp_erp_variable_salarydeclarationdetails', $updateData, 'declarationDetailID');
        }else{
            $this->db->update_batch('srp_erp_salarydeclarationdetails', $updateData, 'declarationDetailID');
        }
        

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function fetch_finalSettlementMasters()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();

        $this->datatables->select("masterID,documentCode,CurrencyCode trCurrency,confirmedYN,approvedYN, ECode, fm.confirmedByEmpID cnEmpID,
            Ename2, fm.createdDateTime AS docDate,narration, fm.createdUserID AS createdUserID, paymentVoucherID");
        $this->datatables->from('srp_erp_pay_finalsettlementmaster fm');
        $this->datatables->join('srp_employeesdetails empTB', 'empTB.EIdNo=fm.empID');
        $this->datatables->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID=fm.trCurrencyID');
        $this->datatables->where('companyID', $companyID);
        $this->datatables->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2');
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"FS",masterID)');
        $this->datatables->add_column('edit', '$1', 'final_settlement_action(masterID, confirmedYN, approvedYN, createdUserID, cnEmpID, documentCode, paymentVoucherID)');
        $this->datatables->edit_column('docDate', '<span >$1 </span>', 'convert_date_format(docDate)');

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT decID FROM srp_erp_payrollgroupincharge AS inCharge
                                      JOIN (
                                            SELECT declarationMasterID AS decID, accessGroupID
                                            FROM srp_erp_salarydeclarationdetails
                                            WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                            GROUP BY declarationMasterID, accessGroupID
                                      ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                      WHERE companyID={$companyID} AND empID={$currentEmp}
                                      GROUP BY decID
                                      UNION
                                          SELECT masterID
                                          FROM srp_erp_pay_finalsettlementmaster AS t1
                                          LEFT JOIN srp_erp_salarydeclarationdetails AS t2
                                          ON t2.declarationMasterID=t1.masterID
                                          WHERE t1.companyID={$companyID} AND declarationMasterID IS NULL
                                          GROUP BY t1.masterID
                                      ) AS accTB", 'fm.masterID = accTB.decID');

        }
        echo $this->datatables->generate();
    }

    function final_settlement_salary_process_view()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $empID = $masterData['empID'];
        $dateAssume = $masterData['dateOfJoin'];
        $last_workingDate = $masterData['lastWorkingDay'];
        $companyID = current_companyID();

        $periods = date('Y-m-01', strtotime($dateAssume));
        $last_workingDate_first = date('Y-m-01', strtotime($last_workingDate));
        $processedPayroll = $this->db->query("SELECT DATE_FORMAT( CONCAT(payrollYear,'-',payrollMonth,'-01') , '%Y-%m-%d') payrollDate
                                              FROM srp_erp_payrollheaderdetails head 
                                              JOIN srp_erp_payrollmaster mas ON mas.payrollMasterID = head.payrollMasterID
                                              WHERE EmpID = {$empID} ORDER BY payrollDate")->result_array();
        $processedPayroll = array_column($processedPayroll, 'payrollDate');


        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;
        $totalWorkedDays = getPolicyValues('SCD', 'All');
        $totalWorkedDays = ($totalWorkedDays == 'LAST_DAY(effectiveDate)') ? ' DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ' : "( 30 - DATE_FORMAT(effectiveDate, '%d') )+1";

        $pendingData = [];
        while ($periods <= $last_workingDate_first) {
            if (!in_array($periods, $processedPayroll)) {
                $nextMonth = date('Y-m-01', strtotime($periods . " +1 month"));


                /*Salary effective date based proposition*/
                if ($salaryProportionDays == 1) {
                    $proposition = "( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )";
                } else {
                    $proposition = "( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays}) )";
                }

                $propositionStr = "DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$periods}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                   round( {$proposition},transactionCurrencyDecimalPlaces ), transactionAmount";


                if ($periods == $last_workingDate_first) { /*Proposition with discharge month*/
                    if (date('d', strtotime($last_workingDate)) != date('t', strtotime($last_workingDate))) { /*If discharge date not month end*/
                        $proposition = ($salaryProportionDays == 1) ? " (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) " : " ((transactionAmount * 12) / {$salaryProportionDays}) ";
                        $last_workingDay = date('d', strtotime($last_workingDate));
                        $propositionStr = "DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$periods}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                       round( ({$proposition} * ( DATEDIFF( '{$last_workingDate}', effectiveDate )+1 )),transactionCurrencyDecimalPlaces ), 
                                       round( ({$proposition} * $last_workingDay),transactionCurrencyDecimalPlaces ) ";
                    }
                }

                $declaration = $this->db->query("SELECT salaryCategoryID detID, salaryCategoryType, 'FA' fromType, salaryDescription itemDes, 
                                     SUM(trAmount) amount, SUM(fullAmount) fullAmount
                                     FROM (
                                         SELECT cat.salaryCategoryID, salaryCategoryType, cat.GLCode, salaryDescription, transactionAmount AS fullAmount,
                                         IF ( {$propositionStr} ) AS trAmount, transactionCurrencyDecimalPlaces AS dPlace                     
                                         FROM srp_erp_pay_salarydeclartion AS declaration
                                         JOIN srp_employeesdetails AS empTB ON declaration.employeeNo = empTB.EIdNo
                                         JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = declaration.salaryCategoryID                      
                                         WHERE EIdNo = {$empID} AND declaration.companyID = {$companyID}  AND payDate < '{$nextMonth}'
                                         AND effectiveDate <= '{$last_workingDate}'
                                     ) t1 
                                     WHERE NOT EXISTS (
                                        SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet
                                        WHERE moreDet.fsMasterID = {$masterID} AND period = '{$periods}' 
                                        AND entryType = 'FA' AND moreDet.salaryCatID = t1.salaryCategoryID
                                     ) GROUP BY salaryCategoryID ")->result_array();

                if (!empty($declaration)) {
                    //echo '<pre>'.$this->db->last_query().'</pre>';
                    //die( $periods .' '. $last_workingDate_first  );
                    $pendingData[$periods] = $declaration;
                }

                $monthEnd = date('Y-m-t', strtotime($periods));

                /*Monthly Addition*/
                $monthlyAdd = $this->db->query("SELECT monthlyAdditionDetailID detID, monthlyAdditionsCode AS docCode,  
                                    transactionAmount AS amount, dTy.monthlyDeclaration AS itemDes, 'MA' fromType
                                    FROM srp_erp_pay_monthlyadditionsmaster mas
                                    JOIN srp_erp_pay_monthlyadditiondetail det ON det.monthlyAdditionsMasterID = mas.monthlyAdditionsMasterID
                                    JOIN srp_erp_pay_monthlydeclarationstypes dTy ON dTy.monthlyDeclarationID = det.declarationID
                                    WHERE det.empID = {$empID} AND confirmedYN = 1 AND isNonPayroll = 'N'
                                    AND dateMA BETWEEN '$periods' AND '{$monthEnd}' AND NOT EXISTS (
                                        SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails entTB
                                        WHERE entTB.fsMasterID = {$masterID} AND period = '{$periods}' 
                                        AND entryType = 'MA' AND entTB.otherDetailID = det.monthlyAdditionDetailID
                                    )")->result_array();
                if (!empty($monthlyAdd)) {
                    $pendingData[$periods] = (array_key_exists($periods, $pendingData)) ? array_merge($pendingData[$periods], $monthlyAdd) : $monthlyAdd;
                }

                /*Monthly Deduction*/
                $monthlyDed = $this->db->query("SELECT monthlyDeductionDetailID detID, monthlyDeductionCode AS docCode,
                                        (transactionAmount * -1) AS amount, dTy.monthlyDeclaration AS itemDes, 'MD' fromType
                                        FROM srp_erp_pay_monthlydeductionmaster mas
                                        JOIN srp_erp_pay_monthlydeductiondetail det ON det.monthlyDeductionMasterID = mas.monthlyDeductionMasterID
                                        JOIN srp_erp_pay_monthlydeclarationstypes dTy ON dTy.monthlyDeclarationID = det.declarationID
                                        WHERE det.empID = {$empID} AND confirmedYN = 1 AND isNonPayroll = 'N'
                                        AND dateMD BETWEEN '$periods' AND '{$monthEnd}' AND NOT EXISTS (
                                            SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails entTB
                                            WHERE entTB.fsMasterID = {$masterID} AND entTB.period = '{$periods}' 
                                            AND entryType = 'MD' AND entTB.otherDetailID = det.monthlyDeductionDetailID
                                        )")->result_array();
                if (!empty($monthlyDed)) {
                    $pendingData[$periods] = (array_key_exists($periods, $pendingData)) ? array_merge($pendingData[$periods], $monthlyDed) : $monthlyDed;
                }

                /*NO - Pay*/
                $noPay = $this->db->query("SELECT attTB.ID detID, 'NP' fromType, catTB.salaryDescription AS itemDes, (noPayAmount * -1) AS amount, otCode
                                        FROM srp_erp_pay_empattendancereview AS attTB
                                        JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = attTB.salaryCategoryID AND catTB.companyID = {$companyID} 
                                        JOIN srp_erp_generalotmaster AS otMas ON otMas.generalOTMasterID = attTB.generalOTID AND otMas.companyID = {$companyID}
                                        WHERE attTB.companyID={$companyID} AND attTB.empID = {$empID} AND noPayAmount <> 0 
                                        AND attendanceDate BETWEEN '{$periods}' AND '{$monthEnd}' AND NOT EXISTS (
                                            SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                            AND period = '{$periods}' AND entryType = 'NP' AND moreDet.otherDetailID = attTB.ID
                                        )")->result_array();
                if (!empty($noPay)) {
                    $pendingData[$periods] = (array_key_exists($periods, $pendingData)) ? array_merge($pendingData[$periods], $noPay) : $noPay;
                }

                /*Over Time*/
                $overTime = $this->db->query("SELECT attTB.ID detID, 'OT' fromType, catTB.salaryDescription AS itemDes, paymentOT AS amount, otCode
                                        FROM srp_erp_pay_empattendancereview AS attTB
                                        JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = attTB.salaryCategoryID AND catTB.companyID = {$companyID} 
                                        JOIN srp_erp_generalotmaster AS otMas ON otMas.generalOTMasterID = attTB.generalOTID AND otMas.companyID = {$companyID}
                                        WHERE attTB.companyID={$companyID} AND attTB.empID = {$empID} AND paymentOT <> 0 
                                        AND attendanceDate BETWEEN '{$periods}' AND '{$monthEnd}' AND NOT EXISTS (
                                            SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                            AND period = '{$periods}' AND entryType = 'OT' AND moreDet.otherDetailID = attTB.ID
                                        )")->result_array();
                if (!empty($overTime)) {
                    $pendingData[$periods] = (array_key_exists($periods, $pendingData)) ? array_merge($pendingData[$periods], $overTime) : $overTime;
                }
            }

            $periods = date('Y-m-01', strtotime($periods . " +1 month"));
        }

        if (empty($pendingData)) {
            die(json_encode(['e', 'No records found']));
        }

        //echo '<pre>'; print_r($pendingData); echo '</pre>';        die();

        $data['lastWorkingDate'] = $last_workingDate;
        $data['dPlace'] = $masterData['trDPlace'];
        $data['unProcessPayrollMonths'] = $pendingData;

        $view = $this->load->view('system/hrm/ajax/final-settlement-salary-view', $data, true);
        echo json_encode(['s', 'view' => $view]);
    }

    function final_settlement_loan_view()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $empID = $masterData['empID'];
        $companyID = current_companyID();

        $loanDetails = $this->db->query("SELECT mas.ID, sch.loanCode, cat.description, amount, 
                                         SUM(amountPerInstallment) totPending 
                                         FROM srp_erp_pay_emploan_schedule sch
                                         JOIN srp_erp_pay_emploan mas ON mas.ID = sch.loanID
                                         JOIN srp_erp_pay_loan_category cat ON cat.loanID = mas.loanCatID
                                         WHERE mas.empID = {$empID} AND approvedYN = 1 AND mas.companyID= {$companyID}
                                         AND isSetteled = 0 AND skipedInstallmentID = 0 AND NOT EXISTS (
                                         SELECT loanMasterID FROM srp_erp_pay_finalsettlementmoredetails
                                         WHERE companyID = {$companyID} AND loanMasterID = mas.ID AND entryType = 'LO' )
                                         GROUP BY mas.ID")->result_array();
        if (empty($loanDetails)) {
            die(json_encode(['e', 'No records found']));
        }

        $data['dPlace'] = $masterData['trDPlace'];
        $data['loanDetails'] = $loanDetails;

        $view = $this->load->view('system/hrm/ajax/final-settlement-loan-view', $data, true);
        echo json_encode(['s', 'view' => $view]);
    }

    function final_settlement_other_add_deduction_form()
    {
        $masterID = $this->input->post('masterID');
        $type = $this->input->post('type');

        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $dropDownData = declaration_drop($type, 1);

        $dropDown = '<select name="groupDropID" id="groupDropID" class="trInputs select2" >';
        $dropDown .= '<option value="">Select Grouping Type</option>';
        if (!empty($dropDownData)) {
            foreach ($dropDownData as $keyDrop => $rowDrop) {
                $dropDown .= '<option value="' . $rowDrop['monthlyDeclarationID'] . '" data-gl="' . $rowDrop['GLAutoID'] . '">';
                $dropDown .= $rowDrop['monthlyDeclaration'] . ' | ' . $rowDrop['GLSecondaryCode'] . '</option>';
            }
        }
        $dropDown .= '</select>';

        echo json_encode(['s', 'view' => $dropDown]);
    }

    function final_settlement_leave_types()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $empID = $masterData['empID'];
        $companyID = current_companyID();

        $leave_arr = $this->db->query("SELECT lv_type.leaveTypeID, lv_type.description
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID}")->result_array();

        if (empty($leave_arr)) {
            die(json_encode(['e', 'Leave types not found.<br/>Please check the leave group assign to the employee is contain leave types']));
        }

        $drop_arr = [];
        $drop_arr[''] = 'Select a leave type';
        foreach ($leave_arr as $row) {
            $drop_arr[$row['leaveTypeID']] = $row['description'];
        }
        $dropDown = form_dropdown('leaveID', $drop_arr, '', 'class="form-control select-box" id="leaveID"');

        echo json_encode(['s', 'view' => $dropDown]);
    }

    function save_final_settlement_items()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('entry_type', 'Entry type', 'trim|required');
        $entry_type = $this->input->post('entry_type');

        if (in_array($entry_type, [2, 6])) {
            $this->form_validation->set_rules('groupDropID', 'Grouping Type', 'trim|required');
        }

        if ($entry_type == 12) {
            $this->form_validation->set_rules('adjustment_type', 'Adjustment type', 'trim|required');
        }

        if ($entry_type == 14) {
            $this->form_validation->set_rules('leaveID', 'Annual Leave', 'trim|required');
            $this->form_validation->set_rules('calculate_based_on[]', 'Basic / Gross', 'trim|required');
            $this->form_validation->set_rules('no_of_working_days', 'No Of Working Days', 'trim|required|callback_validate_no_of_working_days');
        }

        if (in_array($entry_type, [2, 3, 6, 9, 10, 11, 12])) {
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required');
        }


        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        /*Check the item type can add multiple times*/
        $itemData = $this->db->get_where('srp_erp_pay_finalsettlementitems', ['typeID' => $entry_type])->row_array();
        if ($itemData['allowMultiple'] == 0) {
            $isAllReadyAdded = $this->db->get_where('srp_erp_pay_finalsettlementdetail', ['itemID' => $entry_type, 'fsMasterID' => $masterID])->row('fsDetID');
            if (!empty($isAllReadyAdded)) {
                $itemDes = $itemData['description'];
                die(json_encode(['e', "<b>{$itemDes}</b> is already added for this document.<br/>You can add only one <b>{$itemDes}</b> entry under a document."]));
            }
        }

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $narration = $this->input->post('narration');
        $amount = $this->input->post('amount');
        $empID = $masterData['empID'];
        $last_workingDate = $masterData['lastWorkingDay'];
        $dPlace = $masterData['trDPlace'];
        $amount = round($amount, $dPlace);
        $companyID = current_companyID();
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();
        $itemGL = 0;

        /*Check is this entry type need a GL configuration in Final settlement GL configuration*/
        $isGLConfigRequired = $this->db->query("SELECT isGLAssignable, GLID FROM srp_erp_pay_finalsettlementitems itm
                                        LEFT JOIN srp_erp_pay_finalsettlement_gl_config con ON con.typeID = itm.typeID
                                        WHERE itm.typeID = {$entry_type}")->row_array();

        if ($isGLConfigRequired['isGLAssignable'] == 1) {
            if (empty($isGLConfigRequired['GLID'])) {
                die(json_encode(['e', "Please configure the GL for this entry under Final Settlement GL configuration and try agin."]));
            } else {
                $itemGL = $isGLConfigRequired['GLID'];
            }
        }

        $insert_data = [
            'fsMasterID' => $masterID, 'itemID' => $entry_type, 'narration' => $narration, 'amount' => $amount,
            'GLAutoID' => $itemGL, 'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        switch ($entry_type) {
            case 1: /*Salary*/
                $this->final_settlement_insert_salary($masterID, $empID, $last_workingDate);
                break;

            case 2: /*Other Additions*/
            case 6: /*Other Deductions*/
                $groupDropID = $this->input->post('groupDropID');
                $grWhere = ['monthlyDeclarationID' => $groupDropID, 'companyID' => $companyID];
                $itemGL = $this->db->get_where('srp_erp_pay_monthlydeclarationstypes', $grWhere)->row('expenseGLCode');
                $insert_data['linkedDetailID'] = $groupDropID;
                $insert_data['GLAutoID'] = $itemGL;

                $this->db->insert('srp_erp_pay_finalsettlementdetail', $insert_data);
                break;

            case 4: /*Gratuity*/
                $this->final_settlement_gratuity_calculation($masterID, $masterData);
                break;

            case 7:  /*Social Insurance(PASI)*/
                $this->final_settlement_SSO_calculation($masterID, $masterData);
                break;

            case 8: /*Loan Recovery*/
                $this->final_settlement_insert_loan($masterID, $empID);
                break;

            case 3:  /*Over Time*/
            case 5:  /*Notice Period*/
            case 9:  /*No Pay*/
            case 10: /*Notice Period - Penalty*/
                $this->db->insert('srp_erp_pay_finalsettlementdetail', $insert_data);
                break;
            case 11: /*Gratuity Adjustment*/
                $gratuityID = $this->db->query("SELECT gratuityID FROM srp_employeesdetails WHERE EIdNo={$empID}")->row('gratuityID');
                if (empty($gratuityID)) {
                    die(json_encode(['e', 'Gratuity not assigned for this employee.']));
                }

                $itemGL = $this->db->get_where('srp_erp_pay_gratuitymaster', ['gratuityID' => $gratuityID])->row('provisionGL');
                $insert_data['GLAutoID'] = $itemGL;
                $this->db->insert('srp_erp_pay_finalsettlementdetail', $insert_data);
                break;
            case 12: /*Adjustment*/
                $this->final_settlement_adjustment($masterID, $masterData);
                break;
            case 13: /*PAYE*/
                $this->final_settlement_PAYE($masterID, $masterData);
                break;
            case 14: /*Leave Payment*/
                $this->final_settlement_insert_leave_payment($masterID, $masterData, $itemGL);
                break;
            case 15: /*Leave Payment*/
                $this->final_settlement_provision_salary($masterID, $masterData, $itemGL);
                break;
            case 16: /*Open Leave*/
                $this->final_settlement_insert_open_leave($masterID, $masterData, $itemGL);
                break;
            default:
                die(json_encode(['e', 'Entry type is invalid.']));
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $type = (in_array($entry_type, [1, 2, 3, 4, 5, 11, 14,15])) ? 'A' : 'D';
            $view = ($type == 'A') ? $this->addition_view($masterID, $dPlace, 0) : $this->deduction_view($masterID, $dPlace, 0);
            $netAmount = $this->get_final_settlement_net_amount($masterID);

            echo json_encode(['s', 'Record added successfully.', 'type' => $type, 'view' => $view, 'netAmount' => $netAmount]);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function validate_no_of_working_days()
    {
        $no_of_working_days = $this->input->post('no_of_working_days');
        if ($no_of_working_days > 31 || $no_of_working_days < 1) {
            $this->form_validation->set_message('validate_no_of_working_days', 'No Of Working Days In The Month should be <br/>between 1 to 31');
            return false;
        } else {
            return true;
        }
    }

    function final_settlement_insert_salary($masterID, $empID, $last_workingDate)
    {
        $salary = $this->input->post('salary');
        $MA = $this->input->post('MA');
        $MD = $this->input->post('MD');
        $NP = $this->input->post('NP');
        $OT = $this->input->post('OT');
        $companyID = current_companyID();

        if (empty($salary) && empty($MA) && empty($MD) && empty($NP) && empty($OT)) {
            die(json_encode(['e', 'Please select at least one item to proceed']));
        }

        $narration = $this->input->post('narration');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 1, 'amount' => 0, 'narration' => $narration,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];


        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        $period_arr = [];
        if (!empty($salary)) {
            foreach ($salary as $item) {
                $period_arr[] = explode('|', $item);
            }
        }

        if (!empty($MA)) {
            foreach ($MA as $item) {
                $period_arr[] = explode('|', $item);
            }
        }

        if (!empty($MD)) {
            foreach ($MD as $item) {
                $period_arr[] = explode('|', $item);
            }
        }

        if (!empty($OT)) {
            foreach ($OT as $item) {
                $period_arr[] = explode('|', $item);
            }
        }

        if (!empty($NP)) {
            foreach ($NP as $item) {
                $period_arr[] = explode('|', $item);
            }
        }

        /*Group by period(0) and type(2)*/
        $period_arr = array_group_by($period_arr, 0, 2);

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;
        $totalWorkedDays = getPolicyValues('SCD', 'All');
        $totalWorkedDays = ($totalWorkedDays == 'LAST_DAY(effectiveDate)') ? ' DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ' : "( 30 - DATE_FORMAT(effectiveDate, '%d') )+1";
        $last_workingDate_first = date('Y-m-01', strtotime($last_workingDate));

        $payingSal = [];
        $tot_amount = 0;
        foreach ($period_arr as $period => $row) { /*Get the salary by period and salary category of user selection*/
            $monthEnd = date('Y-m-t', strtotime($period));

            if (array_key_exists('FA', $row)) { /*Fixed Allowance*/
                $nextMonth = date('Y-m-01', strtotime($period . " +1 month"));
                $salCatID = array_column($row['FA'], 1);
                $salCatID = implode(',', $salCatID);

                /*Salary effective date based proposition*/
                if ($salaryProportionDays == 1) {
                    $proposition = "( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )";
                } else {
                    $proposition = "( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays}) )";
                }

                $propositionStr = "DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$period}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                   round( {$proposition},transactionCurrencyDecimalPlaces ), transactionAmount";


                if ($period == $last_workingDate_first) { /*Proposition with discharge month*/
                    if (date('d', strtotime($last_workingDate)) != date('t', strtotime($last_workingDate))) { /*If discharge date not month end*/

                        $proposition = ($salaryProportionDays == 1) ? " (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) " : " ((transactionAmount * 12) / {$salaryProportionDays}) ";
                        $last_workingDay = date('d', strtotime($last_workingDate));
                        $propositionStr = "DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$period}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                            round( ({$proposition} * ( DATEDIFF( '{$last_workingDate}', effectiveDate )+1 )),transactionCurrencyDecimalPlaces ), 
                            round( ({$proposition} * $last_workingDay),transactionCurrencyDecimalPlaces ) ";
                    }
                }

                $declaration = $this->db->query("SELECT catID, GLCode, trAmount AS amount, '{$period}' AS period, declarationID
                                 FROM (
                                     SELECT cat.salaryCategoryID AS catID, cat.GLCode, declaration.id AS declarationID,
                                     IF ({$propositionStr}) AS trAmount, transactionCurrencyDecimalPlaces AS dPlace                     
                                     FROM srp_erp_pay_salarydeclartion AS declaration
                                     JOIN srp_employeesdetails AS empTB ON declaration.employeeNo = empTB.EIdNo
                                     JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = declaration.salaryCategoryID                      
                                     WHERE EIdNo = {$empID} AND declaration.companyID = {$companyID}  AND payDate < '{$nextMonth}'
                                     AND declaration.salaryCategoryID  IN ({$salCatID}) AND effectiveDate <= '{$last_workingDate}'
                                 ) t1 
                                 WHERE NOT EXISTS (
                                    SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                    AND period = '{$period}' AND entryType = 'FA' AND moreDet.salaryCatID = t1.catID
                                 ) ")->result_array();

                if (!empty($declaration)) {
                    $noOfDays = ($period == $last_workingDate_first) ? date('d', strtotime($last_workingDate)) : date('t', strtotime($period));
                    foreach ($declaration as $dec) {
                        $tot_amount += $dec['amount'];
                        $payingSal[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'FA', 'period' => $period,
                            'salaryCatID' => $dec['catID'], 'otherDetailID' => $dec['declarationID'], 'noOfDays' => $noOfDays,
                            'amount' => $dec['amount'], 'GLAutoID' => $dec['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }
                }
            }

            if (array_key_exists('MA', $row)) { /* Monthly Addition */
                $MA_detID = array_column($row['MA'], 1);
                $MA_detID = implode(',', $MA_detID);

                $monthlyAdd = $this->db->query("SELECT monthlyAdditionDetailID detID, transactionAmount AS amount, GLCode, dTy.salaryCategoryID,
                                mas.monthlyAdditionsMasterID
                                FROM srp_erp_pay_monthlyadditionsmaster mas
                                JOIN srp_erp_pay_monthlyadditiondetail det ON det.monthlyAdditionsMasterID = mas.monthlyAdditionsMasterID
                                JOIN srp_erp_pay_monthlydeclarationstypes dTy ON dTy.monthlyDeclarationID = det.declarationID
                                WHERE det.empID = {$empID} AND confirmedYN = 1 AND monthlyAdditionDetailID IN ({$MA_detID}) 
                                AND isNonPayroll = 'N' AND dateMA BETWEEN '$period' AND '{$monthEnd}' AND NOT EXISTS (
                                    SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                    AND period = '{$period}' AND entryType = 'MA' AND moreDet.otherDetailID = det.monthlyAdditionDetailID
                                )  ")->result_array();

                if (!empty($monthlyAdd)) {
                    $MA_master_arr = [];
                    foreach ($monthlyAdd as $MA_row) {
                        if (!in_array($MA_row['monthlyAdditionsMasterID'], $MA_master_arr)) {
                            $MA_master_arr[] = $MA_row['monthlyAdditionsMasterID'];
                        }

                        $tot_amount += $MA_row['amount'];
                        $payingSal[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'MA', 'period' => $period,
                            'salaryCatID' => $MA_row['salaryCategoryID'], 'otherDetailID' => $MA_row['detID'], 'noOfDays' => null, 'amount' => $MA_row['amount'],
                            'GLAutoID' => $MA_row['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }

                    /*Update as processed to avoid refer back Monthly Additions Master*/
                    $upData = ['isProcessed' => 1, 'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime];
                    $this->db->where_in('monthlyAdditionsMasterID', $MA_master_arr)->where('isProcessed', 0)->update('srp_erp_pay_monthlyadditionsmaster', $upData);
                }
            }

            if (array_key_exists('MD', $row)) { /* Monthly Deduction */
                $MD_detID = array_column($row['MD'], 1);
                $MD_detID = implode(',', $MD_detID);

                $monthlyDed = $this->db->query("SELECT monthlyDeductionDetailID detID, (transactionAmount * -1) AS amount, GLCode, dTy.salaryCategoryID,
                                mas.monthlyDeductionMasterID
                                FROM srp_erp_pay_monthlydeductionmaster mas
                                JOIN srp_erp_pay_monthlydeductiondetail det ON det.monthlyDeductionMasterID = mas.monthlyDeductionMasterID
                                JOIN srp_erp_pay_monthlydeclarationstypes dTy ON dTy.monthlyDeclarationID = det.declarationID
                                WHERE det.empID = {$empID} AND confirmedYN = 1 AND monthlyDeductionDetailID IN ({$MD_detID})  
                                AND isNonPayroll = 'N' AND dateMD BETWEEN '$period' AND '{$monthEnd}' AND NOT EXISTS (
                                    SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                    AND period = '{$period}' AND entryType = 'MD' AND moreDet.otherDetailID = det.monthlyDeductionDetailID
                                )")->result_array();

                if (!empty($monthlyDed)) {
                    $MD_master_arr = [];
                    foreach ($monthlyDed as $MD_row) {
                        if (!in_array($MD_row['monthlyDeductionMasterID'], $MD_master_arr)) {
                            $MD_master_arr[] = $MD_row['monthlyDeductionMasterID'];
                        }
                        $tot_amount += $MD_row['amount'];
                        $payingSal[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'MD', 'period' => $period,
                            'salaryCatID' => $MD_row['salaryCategoryID'], 'otherDetailID' => $MD_row['detID'], 'noOfDays' => null, 'amount' => $MD_row['amount'],
                            'GLAutoID' => $MD_row['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }

                    /*Update as processed to avoid refer back Monthly Deduction Master*/
                    $upData = ['isProcessed' => 1, 'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime];
                    $this->db->where_in('monthlyDeductionMasterID', $MD_master_arr)->where('isProcessed', 0)->update('srp_erp_pay_monthlydeductionmaster', $upData);
                }
            }

            if (array_key_exists('OT', $row)) { /* Over Time */
                $OT_detID = array_column($row['OT'], 1);
                $OT_detID = implode(',', $OT_detID);

                $OT_ded = $this->db->query("SELECT attTB.ID detID, paymentOT AS amount, GLCode, attTB.salaryCategoryID FROM srp_erp_pay_empattendancereview AS attTB
                                JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = attTB.salaryCategoryID AND catTB.companyID = {$companyID}                                 
                                WHERE attTB.companyID={$companyID} AND attTB.empID = {$empID} AND attTB.ID IN ({$OT_detID}) AND attendanceDate BETWEEN '{$period}' AND '{$monthEnd}' 
                                AND NOT EXISTS (
                                    SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                    AND period = '{$period}' AND entryType = 'OT' AND moreDet.otherDetailID = attTB.ID 
                                )")->result_array();

                if (!empty($OT_ded)) {
                    foreach ($OT_ded as $OT_row) {
                        $tot_amount += $OT_row['amount'];
                        $payingSal[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'OT', 'period' => $period,
                            'salaryCatID' => $OT_row['salaryCategoryID'], 'otherDetailID' => $OT_row['detID'], 'noOfDays' => null, 'amount' => $OT_row['amount'],
                            'GLAutoID' => $OT_row['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }
                }
            }

            if (array_key_exists('NP', $row)) { /* No Pay */
                $NP_detID = array_column($row['NP'], 1);
                $NP_detID = implode(',', $NP_detID);

                $NoPayDed = $this->db->query("SELECT attTB.ID detID, (noPayAmount * -1) AS amount, GLCode, attTB.salaryCategoryID FROM srp_erp_pay_empattendancereview AS attTB
                                JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = attTB.salaryCategoryID AND catTB.companyID = {$companyID}                                 
                                WHERE attTB.companyID={$companyID} AND attTB.empID = {$empID} AND attTB.ID IN ({$NP_detID}) AND
                                attendanceDate BETWEEN '{$period}' AND '{$monthEnd}' AND NOT EXISTS (
                                    SELECT salaryID FROM srp_erp_pay_finalsettlementmoredetails moreDet WHERE moreDet.fsMasterID = {$masterID} 
                                    AND period = '{$period}' AND entryType = 'NP' AND moreDet.otherDetailID = attTB.ID 
                                )")->result_array();

                if (!empty($NoPayDed)) {
                    foreach ($NoPayDed as $NP_row) {
                        $tot_amount += $NP_row['amount'];
                        $payingSal[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'NP', 'period' => $period,
                            'salaryCatID' => $NP_row['salaryCategoryID'], 'otherDetailID' => $NP_row['detID'], 'noOfDays' => null, 'amount' => $NP_row['amount'],
                            'GLAutoID' => $NP_row['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }
                }
            }
        }

        if (!empty($payingSal)) {
            $this->db->insert_batch('srp_erp_pay_finalsettlementmoredetails', $payingSal);
        }

        $this->db->where(['fsDetID' => $detID])->update('srp_erp_pay_finalsettlementdetail', ['amount' => $tot_amount]);
    }

    function final_settlement_insert_loan($masterID, $empID)
    {
        $loans = $this->input->post('loans');
        $companyID = current_companyID();

        if (empty($loans)) {
            die(json_encode(['e', 'Loan items not selected']));
        }

        $loanID_list = implode(',', $loans);

        $loanDetails = $this->db->query("SELECT mas.ID, sch.loanCode, cat.description, amount, cat.GLCode,
                                         SUM(amountPerInstallment * -1) totPending 
                                         FROM srp_erp_pay_emploan_schedule sch
                                         JOIN srp_erp_pay_emploan mas ON mas.ID = sch.loanID
                                         JOIN srp_erp_pay_loan_category cat ON cat.loanID = mas.loanCatID
                                         WHERE mas.empID = {$empID} AND approvedYN = 1 AND mas.companyID= {$companyID}
                                         AND mas.ID IN ($loanID_list)
                                         AND isSetteled = 0 AND skipedInstallmentID = 0 AND NOT EXISTS (
                                         SELECT loanMasterID FROM srp_erp_pay_finalsettlementmoredetails
                                         WHERE companyID = {$companyID} AND loanMasterID = mas.ID AND entryType = 'LO' ) GROUP BY mas.ID")->result_array();

        if (empty($loanDetails)) {
            die(json_encode(['e', 'Loan details not found']));
        }

        $narration = $this->input->post('narration');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 8, 'amount' => 0, 'narration' => $narration,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        $loan_recover = [];
        $tot_amount = 0;
        foreach ($loanDetails as $row) {
            $tot_amount += $row['totPending'];
            $loan_recover[] = [
                'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'LO', 'loanMasterID' => $row['ID'],
                'amount' => $row['totPending'],
                'GLAutoID' => $row['GLCode'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
            ];
        }

        $this->db->insert_batch('srp_erp_pay_finalsettlementmoredetails', $loan_recover);


        $this->db->where(['fsDetID' => $detID])->update('srp_erp_pay_finalsettlementdetail', ['amount' => $tot_amount]);
    }

    function final_settlement_gratuity_calculation($masterID, $masterData)
    {
        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $gratuityID = $this->db->query("SELECT gratuityID FROM srp_employeesdetails WHERE EIdNo={$empID}")->row('gratuityID');

        if (empty($gratuityID)) {
            die(json_encode(['e', 'Gratuity not assigned for this employee.']));
        }

        $narration = $this->input->post('narration');
        $amount = 0;

        $gratuityMaster = $this->db->query("SELECT t1.gratuityID, gratuityDescription, formulaString, provisionGL                                 
                            FROM srp_erp_pay_gratuitymaster t1 JOIN srp_erp_pay_gratuityformula t2 ON t2.autoID = t1.gratuityID 
                            AND t1.gratuityID='{$gratuityID}' AND t2.masterType='GRATUITY' ")->row_array();

        $dPlace = $masterData['trDPlace'];
        $lastWorkingDate = $masterData['lastWorkingDay'];

        $gratuitySlabData = $this->db->query("SELECT formulaString, startYear, endYear, formulaString FROM srp_erp_pay_gratuityslab t1                                    
                                    JOIN srp_erp_pay_gratuityformula t3 ON t3.autoID = t1.id AND t3.masterType='GRATUITY-SLAB'
                                    WHERE t1.gratuityMasterID='{$gratuityID}'")->result_array();

        if (!empty($gratuitySlabData)) {

            $slabStr = 'round((CASE';
            foreach ($gratuitySlabData as $slabKey => $slabData) {
                $endYear = $slabData['endYear'];
                $result_slab = formulaBuilder_to_sql_simple_conversion($slabData['formulaString']);
                $formula_slab = $result_slab['formulaDecode'];

                $slabStr .= ' WHEN (totalWorkingDays/365) <= ' . $endYear . ' THEN ' . $formula_slab;
            }
            $slabStr .= ' ELSE 0 END), ' . $dPlace . ') AS gratuityAmount';

            $result = formulaBuilder_to_sql_simple_conversion($gratuityMaster['formulaString']);

            $formula = $result['formulaDecode'];
            $salCat = $result['select_str'];
            $salCat2 = $result['select_str2'];
            $whereInClause = $result['whereInClause'];

            $details = $this->db->query("SELECT CONCAT('Total working ', totalWork) narration, {$slabStr} FROM (
                                SELECT empID, totalWorkingDays, CONCAT(age,'Y ',days,'D') AS totalWork, {$formula} AS totFixPayment  FROM (
                                    SELECT empID, DATEDIFF( lastWorkingDate, empTB.EDOJ ) AS totalWorkingDays,
                                    TIMESTAMPDIFF( YEAR, empTB.EDOJ, lastWorkingDate ) AS age,                                      
                                    IF(
                                        TIMESTAMPDIFF( YEAR, empTB.EDOJ, lastWorkingDate ) = 0, DATEDIFF( lastWorkingDate, empTB.EDOJ ),
                                        FLOOR( TIMESTAMPDIFF( DAY, empTB.EDOJ, lastWorkingDate ) % 365 )
                                    )  AS days, {$salCat2}                                                                    
                                    FROM srp_employeesdetails empTB 
                                    JOIN (
                                        SELECT employeeNo AS empID, {$salCat} FROM srp_erp_pay_salarydeclartion salDec
                                        WHERE employeeNo = '{$empID}' AND effectiveDate <= '{$lastWorkingDate}' AND amount IS NOT NULL 
                                        AND salaryCategoryID IN ({$whereInClause}) GROUP BY salaryCategoryID
                                    )  salDec ON salDec.empID = empTB.EIdNo
                                    WHERE empTB.EIdNo = '{$empID}'
                                ) empSalary
                          ) t1")->row_array();

            if (!empty($details)) {
                $amount = $details['gratuityAmount'];
                $narration .= ' [ ' . $details['narration'] . ' ]';
            }
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 4, 'amount' => $amount, 'narration' => $narration,
            'GLAutoID' => $gratuityMaster['provisionGL'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
    }

    function final_settlement_SSO_calculation($masterID, $masterData)
    {

        $periods_arr = $this->db->query("SELECT * FROM( 
                            SELECT period FROM srp_erp_pay_finalsettlementmoredetails WHERE fsMasterID = {$masterID} 
                            AND entryType IN ('FA', 'MA', 'MD', 'OT', 'NP') GROUP BY period
                        ) t1 WHERE period NOT IN (
                            SELECT period FROM srp_erp_pay_finalsettlementdetail det JOIN srp_erp_pay_finalsettlementmoredetails 
                            mor ON det.fsDetID = mor.fsDetID AND mor.fsMasterID = {$masterID} WHERE det.fsMasterID = {$masterID} AND itemID = 7
                        )")->result_array();

        if (empty($periods_arr)) {
            die(json_encode(['e', 'There is no record for process SSO']));
        }

        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $ssoData = $this->db->query("SELECT ssoTB.socialInsuranceID, formulaString, expenseGlAutoID, liabilityGlAutoID, SlabID, 
                                     isSlabApplicable, masterTB.payGroupID, payGroupCategories, masterTB.Description,
                                     employeeContribution, employerContribution
                                     FROM srp_erp_socialinsurancemaster AS ssoTB
                                     JOIN srp_erp_paygroupmaster AS masterTB ON masterTB.socialInsuranceID=ssoTB.socialInsuranceID 
                                     JOIN srp_erp_paygroupformula AS formulaTB ON formulaTB.payGroupID=masterTB.payGroupID 
                                     JOIN (
                                        SELECT socialInsuranceMasterID AS ssoID FROM srp_erp_socialinsurancedetails
                                        WHERE companyID={$companyID} AND empID = {$empID} GROUP BY socialInsuranceMasterID
                                     ) AS ssoDetail ON ssoDetail.ssoID = ssoTB.socialInsuranceID
                                     WHERE ssoTB.companyID={$companyID} AND masterTB.companyID={$companyID} AND 
                                     formulaTB.companyID={$companyID}")->result_array();

        if (empty($ssoData)) {
            die(json_encode(['e', 'SSO not assigned for this employee.']));
        }

        $narration = $this->input->post('narration');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 7, 'amount' => 0, 'narration' => $narration,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        $dPlace = $masterData['trDPlace'];
        $salary_categories_arr = salary_categories(array('A', 'D'));

        $totalAmount = 0;
        $more_data = [];
        foreach ($periods_arr as $row_period) {
            $period = $row_period['period'];

            foreach ($ssoData as $key => $ssoRow) {
                $caption = trim($ssoRow['Description'] ?? '');
                $isSlabApplicable = trim($ssoRow['isSlabApplicable'] ?? '');
                $slabID = trim($ssoRow['SlabID'] ?? '');
                $SSO_ID = trim($ssoRow['socialInsuranceID'] ?? '');
                $payGroupID = trim($ssoRow['payGroupID'] ?? '');
                $formula = trim($ssoRow['formulaString'] ?? '');
                $isEmployeeContribution = (trim($ssoRow['employeeContribution'] ?? '') > 0) ? 'Y' : 'N';
                $entryType = ($isEmployeeContribution == 'Y') ? 'SSO' : 'SSO-E';
                $expenseGL = trim($ssoRow['expenseGlAutoID'] ?? '');
                $liabilityGL = trim($ssoRow['liabilityGlAutoID'] ?? '');

                if (!empty($formula) && $formula != null) {
                    $getBalancePay = ($isSlabApplicable == 1) ? 'N' : 'Y';
                    $formulaBuilder = formulaBuilder_to_sql($ssoRow, $salary_categories_arr, $period, $payGroupID, $getBalancePay);

                    if (array_key_exists(0, $formulaBuilder)) {
                        if ($formulaBuilder[0] == 'e') {
                            $formulaBuilder[1] = $formulaBuilder[1] . 'Check the \'' . $caption . '\' formula of SSO.';
                            $formulaBuilder['SSO'] = $SSO_ID;
                            return $formulaBuilder;
                            break;
                        }
                    }


                    $formulaDecode = $formulaBuilder['formulaDecode'];
                    $select_str2 = $formulaBuilder['select_str2'];
                    $whereInClause = $formulaBuilder['whereInClause'];

                    $select_str2 = (trim($select_str2) == '') ? '' : $select_str2 . ',';

                    $amount = 0;
                    if ($isSlabApplicable == 1) {
                        $slabData = $this->db->query("SELECT startRangeAmount strAmount, endRangeAmount endAmount, formulaString, payGroupCategories,
                                                  slabMaster.description, slabMaster.ssoSlabMasterID
                                                  FROM srp_erp_ssoslabmaster AS slabMaster
                                                  JOIN srp_erp_ssoslabdetails AS slabDet ON slabMaster.ssoSlabMasterID = slabDet.ssoSlabMasterID
                                                  AND slabDet.companyID={$companyID}
                                                  WHERE slabMaster.companyID={$companyID} AND slabMaster.ssoSlabMasterID={$slabID}")->result_array();


                        if (!empty($slabData)) {
                            foreach ($slabData as $keySlab => $slabRow) {
                                $slabCaption = $slabRow['description'];
                                $ssoSlabMasterID = $slabRow['ssoSlabMasterID'];
                                $formulaBuilder_slab = formulaBuilder_to_sql($slabRow, $salary_categories_arr, $period, $payGroupID);

                                if (array_key_exists(0, $formulaBuilder)) {
                                    if ($formulaBuilder[0] == 'e') {
                                        $formulaBuilder[1] = $formulaBuilder[1] . 'Check the \'' . $slabCaption . '\' formula of SSO slab.';
                                        $formulaBuilder['sso_slab'] = $ssoSlabMasterID;
                                        return $formulaBuilder;
                                        break;
                                    }
                                }

                                $formulaDecode_slab = $formulaBuilder_slab['formulaDecode'];
                                $select_str_slab = $formulaBuilder_slab['select_str2'];
                                $select_str_slab = ($select_str_slab == '') ? '' : $select_str_slab . ', ';
                                $whereInClause_slab = $formulaBuilder_slab['whereInClause'];

                                $strAmount = $slabRow['strAmount'];
                                $endAmount = $slabRow['endAmount'];

                                $amount = $this->db->query("SELECT round( (IF( ({$formulaDecode_slab}) < 1, 0, (({$formulaDecode_slab}) * -1))), {$dPlace} ) AS trAmount                                                                                           
                                              FROM (
                                                    SELECT {$empID} AS empID, {$select_str_slab} entryType FROM (
                                                        SELECT entryType, salaryCatID AS salCatID, amount AS transactionAmount 
                                                        FROM srp_erp_pay_finalsettlementmoredetails 
                                                        WHERE fsMasterID = {$masterID} AND period = '{$period}' AND entryType = 'FA' 
                                                    ) t1 WHERE transactionAmount IS NOT NULL {$whereInClause_slab} GROUP BY salCatID                                                     
                                              ) calculationTB                                              
                                              WHERE calculationTB.empID IN (
                                                   SELECT {$empID} AS empID FROM (
                                                       SELECT round( ({$formulaDecode}), {$dPlace}) AS trAmount
                                                       FROM (
                                                            SELECT {$select_str2} {$empID} AS empID FROM (
                                                                SELECT entryType, salaryCatID AS salCatID, amount AS transactionAmount 
                                                                FROM srp_erp_pay_finalsettlementmoredetails 
                                                                WHERE fsMasterID = {$masterID} AND period = '{$period}' AND entryType = 'FA'                                             
                                                            ) t1 WHERE transactionAmount IS NOT NULL {$whereInClause} GROUP BY salCatID                                         
                                                       ) calculationTB GROUP BY empID
                                                   ) AS currentMonthAmountTB WHERE trAmount > {$strAmount} and trAmount <= {$endAmount}
                                              ) GROUP BY calculationTB.empID")->row('trAmount');

                                if (!empty($amount)) {
                                    if ($isEmployeeContribution == 'Y') { /*Employee contribution only effect on Final settlement*/
                                        $totalAmount += $amount;
                                    }

                                    $more_data[] = [
                                        'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => $entryType, 'otherDetailID' => $SSO_ID,
                                        'period' => $period, 'amount' => $amount, 'GLAutoID' => $expenseGL, 'liabilityGL' => $liabilityGL,
                                        'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                                        'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                                    ];
                                }

                            }
                        }

                    } else {

                        $amount = $this->db->query("SELECT round( (IF( ({$formulaDecode}) < 1, 0, (({$formulaDecode})  * -1))), {$dPlace}) AS trAmount
                                                    FROM (
                                                        SELECT {$select_str2} entryType FROM (
                                                            SELECT entryType, salaryCatID AS salCatID, amount AS transactionAmount 
                                                            FROM srp_erp_pay_finalsettlementmoredetails 
                                                            WHERE fsMasterID = {$masterID} AND period = '{$period}' AND entryType = 'FA'                                             
                                                        ) t1 WHERE transactionAmount IS NOT NULL {$whereInClause} GROUP BY salCatID                                         
                                                    ) calculationTB ")->row('trAmount');

                        if ($isEmployeeContribution == 'Y') { /*Employee contribution only effect on Final settlement*/
                            $totalAmount += $amount;
                        }

                        $more_data[] = [
                            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => $entryType, 'otherDetailID' => $SSO_ID,
                            'period' => $period, 'amount' => $amount, 'GLAutoID' => $expenseGL, 'liabilityGL' => $liabilityGL,
                            'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                        ];
                    }

                }
            }
        }

        $this->db->insert_batch('srp_erp_pay_finalsettlementmoredetails', $more_data);

        $this->db->where(['fsDetID' => $detID])->update('srp_erp_pay_finalsettlementdetail', ['amount' => $totalAmount]);

    }

    function final_settlement_PAYE($masterID, $masterData)
    {

        $periods_arr = $this->db->query("SELECT * FROM( 
                            SELECT period FROM srp_erp_pay_finalsettlementmoredetails WHERE fsMasterID = {$masterID} 
                            AND entryType IN ('FA', 'MA', 'MD', 'OT', 'NP') GROUP BY period
                        ) t1 WHERE period NOT IN (
                            SELECT period FROM srp_erp_pay_finalsettlementdetail det JOIN srp_erp_pay_finalsettlementmoredetails 
                            mor ON det.fsDetID = mor.fsDetID AND mor.fsMasterID = {$masterID} WHERE det.fsMasterID = {$masterID} AND itemID = 13
                        )")->result_array();

        if (empty($periods_arr)) {
            die(json_encode(['e', 'There is no record for process PAYE']));
        }

        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $payeeData = $this->db->query("SELECT payeTB.payeeMasterID, formulaString, liabilityGlAutoID, SlabID,  
                         masterTB.payGroupID, payGroupCategories, masterTB.Description                                    
                         FROM srp_erp_payeemaster AS payeTB
                         JOIN srp_erp_paygroupmaster AS masterTB ON masterTB.payeeID=payeTB.payeeMasterID 
                         JOIN srp_erp_paygroupformula AS formulaTB ON formulaTB.payGroupID=masterTB.payGroupID 
                         JOIN (
                            SELECT payeeID FROM srp_erp_socialinsurancedetails WHERE companyID={$companyID} AND empID = {$empID}  
                         ) AS payeDetail ON payeDetail.payeeID = payeTB.payeeMasterID
                         WHERE payeTB.companyID={$companyID} AND masterTB.companyID={$companyID} AND 
                         formulaTB.companyID={$companyID}")->result_array();

        if (empty($payeeData)) {
            die(json_encode(['e', 'PAYE not assigned for this employee.']));
        }

        $narration = $this->input->post('narration');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 13, 'amount' => 0, 'narration' => $narration,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        $dPlace = $masterData['trDPlace'];
        $salary_categories_arr = salary_categories(array('A', 'D'));
        $payGroup_arr = get_payGroup();

        $totalAmount = 0;
        $more_data = [];
        foreach ($periods_arr as $row_period) {
            $period = $row_period['period'];

            foreach ($payeeData as $key => $paRow) {
                $caption = trim($paRow['Description'] ?? '');
                $slabID = trim($paRow['SlabID'] ?? '');
                $payeeMasterID = trim($paRow['payeeMasterID'] ?? '');
                $payGroupID = trim($paRow['payGroupID'] ?? '');
                $formula = trim($paRow['formulaString'] ?? '');
                $liabilityGL = trim($paRow['liabilityGlAutoID'] ?? '');


                if (!empty($formula) && $formula != null) {
                    $formulaBuilder = formulaBuilder_to_sql($paRow, $salary_categories_arr, $period, $payGroupID);

                    if (array_key_exists(0, $formulaBuilder)) {
                        if ($formulaBuilder[0] == 'e') {
                            $formulaBuilder[1] = $formulaBuilder[1] . 'Check the \'' . $caption . '\' formula of PAYEE.';
                            $formulaBuilder['Payee'] = $payGroupID;
                            return $formulaBuilder;
                            break;
                        }
                    }


                    $formulaDecode = $formulaBuilder['formulaDecode'];
                    $select_str2 = $formulaBuilder['select_str2'];
                    $whereInClause = $formulaBuilder['whereInClause'];

                    $select_str2 = (trim($select_str2) == '') ? '' : $select_str2 . ',';

                    $payeeFormula = '(IF( slabDet.percentage = 0, slabDet.thresholdAmount, 	(trAmount * (slabDet.percentage/100)) - slabDet.thresholdAmount ))';


                    $amount = $this->db->query("SELECT round( ($payeeFormula) *-1 , {$dPlace} )AS trAmount
                                  FROM (
                                      SELECT (" . $formulaDecode . ") AS trAmount, {$slabID} AS slbID                                       
                                      FROM
                                      (
                                          SELECT {$select_str2} fsMasterID FROM
                                          (
                                              SELECT fsMasterID, salaryCatID AS salCatID, amount AS transactionAmount 
                                              FROM srp_erp_pay_finalsettlementmoredetails        
                                              WHERE fsMasterID = {$masterID} AND period = '{$period}' 
                                               AND salaryCatID IS NOT NULL AND salaryCatID <> 0
                                          )  payDet                                                                                           
                                          WHERE transactionAmount IS NOT NULL {$whereInClause} GROUP BY salCatID                                      
                                      ) calculationTB GROUP BY fsMasterID
                                  ) AS calculationGROUP
                                  JOIN srp_erp_slabsdetail AS slabDet ON slabDet.slabsMasterID = calculationGROUP.slbID
                                  AND round(calculationGROUP.trAmount) BETWEEN rangeStartAmount AND rangeEndAmount 
                                  AND slabDet.companyID={$companyID}")->row('trAmount');

                    $totalAmount += $amount;

                    $more_data[] = [
                        'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'PAYE', 'otherDetailID' => $payeeMasterID,
                        'period' => $period, 'amount' => $amount, 'liabilityGL' => $liabilityGL, 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                        'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                    ];
                }
            }
        }

        $this->db->insert_batch('srp_erp_pay_finalsettlementmoredetails', $more_data);

        $this->db->where(['fsDetID' => $detID])->update('srp_erp_pay_finalsettlementdetail', ['amount' => $totalAmount]);

    }

    function final_settlement_insert_open_leave($masterID, $masterData, $itemGL)
    {
        $sal_cats = $this->input->post('calculate_based_on');
        $sal_cats = implode(',', $sal_cats);
        $empID = $masterData['empID'];
        $dPlace = $masterData['trDPlace'];
        $no_of_working_days = $this->input->post('no_of_working_days');
        $companyID = current_companyID();
        $narration = $this->input->post('narration');
        $amount = $gross = 0;

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $this->db->select('leaveTypeID');
        $this->db->from('srp_erp_leavetype');
        $this->db->where('companyID',$companyID);
        $this->db->where('finalSettlementYN',1);
        $query=$this->db->get();
        $leaveID=$query->row_array();


        $leave_det = $this->db->query("SELECT lv_type.description, lv_det.policyMasterID 
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID 
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID} AND lv_det.leaveTypeID = {$leaveID['leaveTypeID']}")->row_array();

        $leaveData = $this->Employee_model->employeeOpenLeaveSummery($empID, $leaveID['leaveTypeID'], $leave_det['policyMasterID']);
        $leaveBalance = $leaveData['sumofdays'];

       
        if ($leaveBalance > 0) {
            $gross = $this->db->query("SELECT SUM(amount) AS gross FROM srp_erp_pay_salarydeclartion
                            WHERE employeeNo = {$empID} AND salaryCategoryID IN ({$sal_cats})")->row('gross');
            $amount = $leaveBalance * ($gross / $no_of_working_days);
            $amount = round($amount, $dPlace);
        }
        
        $data = [
            'fsMasterID' => $masterID, 'itemID' => 16, 'amount' => $amount, 'narration' => $narration, 'linkedDetailID' => $leaveID['leaveTypeID'],
            'GLAutoID' => $itemGL, 'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];
       
        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();
        $more_data = [
            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'leaveID' => $leaveID['leaveTypeID'], 'grossSelections' => $sal_cats,
            'noOfDays' => $no_of_working_days, 'leaveBalance' => $leaveBalance, 'grossAmount' => $gross,
            //'GLAutoID' => 0, 'liabilityGL' => 0,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup,
            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementleavepaydetails', $more_data);
    }

    function final_settlement_insert_leave_payment($masterID, $masterData, $itemGL)
    {
        $leaveID = $this->input->post('leaveID');
        $sal_cats = $this->input->post('calculate_based_on');
        $sal_cats = implode(',', $sal_cats);
        $empID = $masterData['empID'];
        $dPlace = $masterData['trDPlace'];
        $no_of_working_days = $this->input->post('no_of_working_days');
        $companyID = current_companyID();
        $narration = $this->input->post('narration');
        $amount = $gross = 0;

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $leave_det = $this->db->query("SELECT lv_type.description, lv_det.policyMasterID 
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID 
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID} AND lv_det.leaveTypeID = {$leaveID}")->row_array();

        $leaveData = $this->Employee_model->employeeLeaveSummery($empID, $leaveID, $leave_det['policyMasterID']);
        $leaveBalance = $leaveData['balance'];
        if ($leaveBalance > 0) {
            $gross = $this->db->query("SELECT SUM(amount) AS gross FROM srp_erp_pay_salarydeclartion
                            WHERE employeeNo = {$empID} AND salaryCategoryID IN ({$sal_cats})")->row('gross');
            $amount = $leaveBalance * ($gross / $no_of_working_days);
            $amount = round($amount, $dPlace);
        }

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 14, 'amount' => $amount, 'narration' => $narration, 'linkedDetailID' => $leaveID,
            'GLAutoID' => $itemGL, 'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();


        $more_data = [
            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'leaveID' => $leaveID, 'grossSelections' => $sal_cats,
            'noOfDays' => $no_of_working_days, 'leaveBalance' => $leaveBalance, 'grossAmount' => $gross,
            //'GLAutoID' => 0, 'liabilityGL' => 0,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup,
            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementleavepaydetails', $more_data);
    }

    function final_settlement_PAYE_pay_group_decode($masterID, $masterData)
    {

        $periods_arr = $this->db->query("SELECT * FROM( 
                            SELECT period FROM srp_erp_pay_finalsettlementmoredetails WHERE fsMasterID = {$masterID} 
                            AND entryType IN ('FA', 'MA', 'MD', 'OT', 'NP') GROUP BY period
                        ) t1 WHERE period NOT IN (
                            SELECT period FROM srp_erp_pay_finalsettlementdetail det JOIN srp_erp_pay_finalsettlementmoredetails 
                            mor ON det.fsDetID = mor.fsDetID AND mor.fsMasterID = {$masterID} WHERE det.fsMasterID = {$masterID} AND itemID = 13
                        )")->result_array();

        if (empty($periods_arr)) {
            die(json_encode(['e', 'There is no record for process PAYE']));
        }

        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $payeeData = $this->db->query("SELECT payeTB.payeeMasterID, formulaString, liabilityGlAutoID, SlabID,  
                         masterTB.payGroupID, payGroupCategories, masterTB.Description                                    
                         FROM srp_erp_payeemaster AS payeTB
                         JOIN srp_erp_paygroupmaster AS masterTB ON masterTB.payeeID=payeTB.payeeMasterID 
                         JOIN srp_erp_paygroupformula AS formulaTB ON formulaTB.payGroupID=masterTB.payGroupID 
                         JOIN (
                            SELECT payeeID FROM srp_erp_socialinsurancedetails WHERE companyID={$companyID} AND empID = {$empID}  
                         ) AS payeDetail ON payeDetail.payeeID = payeTB.payeeMasterID
                         WHERE payeTB.companyID={$companyID} AND masterTB.companyID={$companyID} AND 
                         formulaTB.companyID={$companyID}")->result_array();

        if (empty($payeeData)) {
            die(json_encode(['e', 'PAYE not assigned for this employee.']));
        }

        $narration = $this->input->post('narration');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 13, 'amount' => 0, 'narration' => $narration,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        $dPlace = $masterData['trDPlace'];
        $salary_categories_arr = salary_categories(array('A', 'D'));
        $payGroup_arr = get_payGroup();

        $totalAmount = 0;
        $more_data = [];
        foreach ($periods_arr as $row_period) {
            $period = $row_period['period'];

            foreach ($payeeData as $key => $ssoRow) {
                $caption = trim($ssoRow['Description'] ?? '');
                $slabID = trim($ssoRow['SlabID'] ?? '');
                $payeeMasterID = trim($ssoRow['payeeMasterID'] ?? '');
                $payGroupID = trim($ssoRow['payGroupID'] ?? '');
                $formula = trim($ssoRow['formulaString'] ?? '');
                $liabilityGL = trim($ssoRow['liabilityGlAutoID'] ?? '');

                if (!empty($formula) && $formula != null) {
                    $formulaBuilder = payGroup_formulaBuilder_to_sql('decode', $formula, $salary_categories_arr, $payGroup_arr, $payGroupID, $period);

                    if (array_key_exists(0, $formulaBuilder)) {
                        if ($formulaBuilder[0] == 'e') {
                            $formulaBuilder[1] = $formulaBuilder[1] . 'Check the \'' . $caption . '\' formula of PAYEE.';
                            $formulaBuilder['Payee'] = $payGroupID;
                            return $formulaBuilder;
                            break;
                        }
                    }


                    $formulaDecode = $formulaBuilder['formulaDecode'];
                    $select_salCat_str = trim($formulaBuilder['select_salaryCat_str'] ?? '');
                    $select_group_str = trim($formulaBuilder['select_group_str'] ?? '');
                    $whereInClause = trim($formulaBuilder['whereInClause'] ?? '');
                    $whereInClause_group = trim($formulaBuilder['whereInClause_group'] ?? '');

                    if ($whereInClause != '' && $select_salCat_str != '') {
                        $select_salCat_str .= ',';
                        $whereInClause = 'salCatID IN (' . $whereInClause . ')';

                    }

                    if ($whereInClause_group != '' && $select_group_str != '') {
                        $select_group_str .= ',';
                        $whereInClause_group = 'detailTBID IN (' . $whereInClause . ') AND fromTB = \'PAY_GROUP\'';
                    }

                    if ($whereInClause != '' && $whereInClause_group != '') {
                        $whereIN = $whereInClause . ' OR ' . $whereInClause_group;
                    } else {
                        $whereIN = $whereInClause . ' ' . $whereInClause_group;
                    }

                    $whereIN = (trim($whereIN) == '') ? '' : 'AND (' . $whereIN . ')';

                    $payeeFormula = '(IF( slabDet.percentage = 0, slabDet.thresholdAmount, 	(trAmount * (slabDet.percentage/100)) - slabDet.thresholdAmount ))';


                    $amount = $this->db->query("SELECT round( ($payeeFormula) *-1 , {$dPlace} )AS trAmount
                                  FROM (
                                      SELECT (" . $formulaDecode . ") AS trAmount, {$slabID} AS slbID                                       
                                      FROM
                                      (
                                          SELECT {$select_salCat_str} {$select_group_str} fsMasterID FROM
                                          (
                                              SELECT fsMasterID, salaryCatID AS salCatID, amount AS transactionAmount 
                                              FROM srp_erp_pay_finalsettlementmoredetails        
                                              WHERE fsMasterID = {$masterID} AND period = '{$period}' AND entryType = 'FA' 
                                          )  payDet                                                                                           
                                          WHERE fsMasterID = {$masterID} {$whereIN}                                         
                                      ) calculationTB GROUP BY fsMasterID
                                  ) AS calculationGROUP
                                  JOIN srp_erp_slabsdetail AS slabDet ON slabDet.slabsMasterID = calculationGROUP.slbID
                                  AND round(calculationGROUP.trAmount) BETWEEN rangeStartAmount AND rangeEndAmount 
                                  AND slabDet.companyID={$companyID}")->row('trAmount');

                    $totalAmount += $amount;

                    $more_data[] = [
                        'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => 'PAYE', 'otherDetailID' => $payeeMasterID,
                        'period' => $period, 'amount' => $amount, 'liabilityGlAutoID' => $liabilityGL, 'companyID' => $companyID, 'createdUserGroup' => $userGroup,
                        'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
                    ];
                }
            }
        }

        $this->db->insert_batch('srp_erp_pay_finalsettlementmoredetails', $more_data);

        $this->db->where(['fsDetID' => $detID])->update('srp_erp_pay_finalsettlementdetail', ['amount' => $totalAmount]);

    }

    function final_settlement_provision_salary($masterID,$masterData,$itemGL){

        $narration = $this->input->post('narration');

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();
        $companyID = current_companyID();

        $empID = $masterData['empID'];

        $this->db->where('gratuityID IS NULL',null);
        $this->db->where('empID',$empID);
        $this->db->where('companyID',$companyID);
        $this->db->order_by('id','DESC');
        $this->db->from('srp_erp_jv_provision_detail');
        $provision_detail = $this->db->get()->row_array();

        $provision_detail = $this->db->query("SELECT empID,SUM(amount) as amount, JVmasterID
            FROM `srp_erp_jv_provision_detail`
            WHERE empID = {$empID} and companyID = {$companyID} and gratuityID IS NULL and provisionDocType = 'JV' and isReversal != 1
            GROUP BY JVmasterID 
            ORDER BY JVmasterID DESC")->row_array();

        if($provision_detail){
            
            $pv_details = $this->db->query("SELECT SUM(amount) as amount
                FROM `srp_erp_jv_provision_detail`
                WHERE empID = {$empID} and companyID = {$companyID} and provisionDocType = 'PV' and isReversal != 1
                GROUP BY empID")->row_array();

             $provision_detail['amount'] = $provision_detail['amount'] + $pv_details['amount'];

        }

        //get provision amount
        $provision_rec = $this->db->query("SELECT expenseGlAutoID
            FROM `srp_erp_leave_salary_provision`
            WHERE isProvision = 1 and companyID = {$companyID}")->row_array();

        if(empty($provision_rec)){
            die(json_encode(['e', 'Provision GL is not Set']));
        }

        if(empty($provision_detail)){
            die(json_encode(['e', 'There is no record for process Salary Provision']));
        }

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 15, 'amount' => $provision_detail['amount'], 'narration' => $narration, 'linkedDetailID' => $provision_detail['JVmasterID'],
            'GLAutoID' => $provision_rec['expenseGlAutoID'], 'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();

        return TRUE;


    }

    function final_settlement_salary_provision(){

        $masterID = $this->input->post('masterID');
        $companyID = current_companyID();

        $masterData = $this->db->query("SELECT  ma.* FROM srp_erp_pay_finalsettlementmaster ma
        WHERE masterID={$masterID}")->row_array();

        $empID = $masterData['empID'];

        $provision_detail = $this->db->query("SELECT empID,SUM(amount) as amount, JVmasterID
            FROM `srp_erp_jv_provision_detail`
            WHERE empID = {$empID} and companyID = {$companyID} and gratuityID IS NULL and provisionDocType = 'JV' and isReversal != 1
            GROUP BY JVmasterID 
            ORDER BY JVmasterID DESC")->row_array();

        if($provision_detail){
            $pv_details = $this->db->query("SELECT SUM(amount) as amount
                FROM `srp_erp_jv_provision_detail`
                WHERE empID = {$empID} and companyID = {$companyID} and provisionDocType = 'PV' and isReversal != 1
                GROUP BY empID")->row_array();

            $provision_detail['amount'] = $provision_detail['amount'] + $pv_details['amount'];
        }

        echo json_encode($provision_detail);

    }

    function final_settlement_adjustment($masterID, $masterData)
    {
        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $adjustment_type = $this->input->post('adjustment_type');
        $adjustment_type = explode('-', $adjustment_type);
        $adj_type = trim($adjustment_type[0] ?? '');
        $adj_type_id = trim($adjustment_type[1] ?? '');
        $dPlace = $masterData['trDPlace'];
        $narration = $this->input->post('narration');
        $amount = $this->input->post('amount');
        $amount = round($amount, $dPlace);

        if ($adj_type == 'S') {
            $adjData = $this->db->query("SELECT ssoTB.socialInsuranceID, expenseGlAutoID, liabilityGlAutoID, masterTB.Description,
                                     employeeContribution, employerContribution
                                     FROM srp_erp_socialinsurancemaster AS ssoTB
                                     JOIN srp_erp_paygroupmaster AS masterTB ON masterTB.socialInsuranceID=ssoTB.socialInsuranceID 
                                     JOIN srp_erp_paygroupformula AS formulaTB ON formulaTB.payGroupID=masterTB.payGroupID 
                                     JOIN (
                                        SELECT socialInsuranceMasterID AS ssoID FROM srp_erp_socialinsurancedetails
                                        WHERE companyID={$companyID} AND empID = {$empID} GROUP BY socialInsuranceMasterID
                                     ) AS ssoDetail ON ssoDetail.ssoID = ssoTB.socialInsuranceID
                                     WHERE ssoTB.companyID={$companyID} AND masterTB.companyID={$companyID} 
                                     AND formulaTB.companyID={$companyID} AND ssoTB.socialInsuranceID = {$adj_type_id}")->row_array();


            if (empty($adjData)) {
                $description = $this->db->get_where('srp_erp_socialinsurancemaster', ['socialInsuranceID' => $adj_type_id])->row('Description');
                die(json_encode(['e', $description . ' not assigned for this employee.']));
            }

            $det_amount = (trim($adjData['employeeContribution'] ?? '') > 0) ? $amount : 0;
            $entryType = (trim($adjData['employeeContribution'] ?? '') > 0) ? 'SSO' : 'SSO-E';
            $expenseGL = trim($adjData['expenseGlAutoID'] ?? '');
            $liabilityGL = trim($adjData['liabilityGlAutoID'] ?? '');
        } else if ($adj_type == 'P') { /*PAYE*/
            $adjData = $this->db->query("SELECT payeTB.payeeMasterID, liabilityGlAutoID, masterTB.payGroupID, masterTB.Description                                    
                         FROM srp_erp_payeemaster AS payeTB
                         JOIN srp_erp_paygroupmaster AS masterTB ON masterTB.payeeID=payeTB.payeeMasterID 
                         JOIN srp_erp_paygroupformula AS formulaTB ON formulaTB.payGroupID=masterTB.payGroupID 
                         JOIN (
                            SELECT payeeID FROM srp_erp_socialinsurancedetails WHERE companyID={$companyID} AND empID = {$empID}  
                         ) AS payeDetail ON payeDetail.payeeID = payeTB.payeeMasterID
                         WHERE payeTB.companyID={$companyID} AND masterTB.companyID={$companyID} AND 
                         payeTB.payeeMasterID = {$adj_type_id} AND formulaTB.companyID={$companyID}")->row_array();

            if (empty($adjData)) {
                $description = $this->db->get_where('srp_erp_payeemaster', ['payeeMasterID' => $adj_type_id])->row('Description');
                die(json_encode(['e', $description . ' not assigned for this employee.']));
            }

            $det_amount = $amount;
            $entryType = 'PAYE';
            $expenseGL = null;
            $liabilityGL = trim($adjData['liabilityGlAutoID'] ?? '');
            null;
        } else {
            die(json_encode(['e', 'Selected type not assigned for this employee.']));
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $data = [
            'fsMasterID' => $masterID, 'itemID' => 12, 'amount' => $det_amount, 'narration' => $narration, 'linkedDetailID' => $adj_type_id,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementdetail', $data);
        $detID = $this->db->insert_id();


        $more_data = [
            'fsDetID' => $detID, 'fsMasterID' => $masterID, 'entryType' => $entryType, 'otherDetailID' => $adj_type_id,
            'period' => null, 'amount' => $amount, 'GLAutoID' => $expenseGL, 'liabilityGL' => $liabilityGL,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup,
            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_finalsettlementmoredetails', $more_data);
    }

    function FS_detail_view()
    {
        $masterID = $this->input->post('masterID');
        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);

        if (empty($masterData)) {
            die(json_encode(['e', 'Master details not found']));
        }

        $dPlace = $masterData['trDPlace'];
        $isConfirmed = $masterData['confirmedYN'];
        $addView = $this->addition_view($masterID, $dPlace, $isConfirmed);
        $dedView = $this->deduction_view($masterID, $dPlace, $isConfirmed);
        $netAmount = $this->get_final_settlement_net_amount($masterID);

        echo json_encode(['s', 'addView' => $addView, 'dedView' => $dedView, 'netAmount' => $netAmount]);
    }

    function get_final_settlement_net_amount($masterID)
    {
        return $this->db->query("SELECT FORMAT(SUM(IFNULL(amount, 0)), trDPlace) net FROM srp_erp_pay_finalsettlementmaster mas 
                                 LEFT JOIN srp_erp_pay_finalsettlementdetail det ON mas.masterID = det.fsMasterID WHERE masterID = {$masterID}")->row('net');
    }

    function addition_view($masterID, $dPlace, $isConfirmed)
    {
        $data['dPlace'] = $dPlace;
        $data['isConfirmed'] = $isConfirmed;

        $data['details'] = $this->Employee_model->get_final_settlement_details($masterID, 0);
        return $this->load->view('system/hrm/ajax/final-settlement-detail-view', $data, true);
    }

    function deduction_view($masterID, $dPlace, $isConfirmed)
    {
        $data['dPlace'] = $dPlace;
        $data['isConfirmed'] = $isConfirmed;

        $data['details'] = $this->Employee_model->get_final_settlement_details($masterID, 1);
        return $this->load->view('system/hrm/ajax/final-settlement-detail-view', $data, true);
    }

    function delete_fs_item()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('id', 'Item', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $dPlace = $masterData['trDPlace'];

        $id = $this->input->post('id');
        $isDeleteConfirmed = $this->input->post('isDeleteConfirmed');
        $where = ['fsMasterID' => $masterID, 'fsDetID' => $id];
        $entry_type = $this->db->get_where('srp_erp_pay_finalsettlementdetail', $where)->row('itemID');

        $this->db->trans_start();

        if (in_array($entry_type, [1, 4, 7, 8, 12, 13])) { /*Salary => 1 | Gratuity => 4 | Social Insurance(PASI) => 7 | Loan Recovery => 8 | Adjustment => 12 | PAYE => 13*/
            if ($entry_type == 1) {

                if ($isDeleteConfirmed != 1) {
                    /*Is PAYE / SSO calculated already*/
                    $isPAYE_SSO = $this->db->select('itemID')->from('srp_erp_pay_finalsettlementdetail')->where(['fsMasterID' => $masterID])
                        ->where_in('itemID', [7, 13])->get()->result_array();

                    if (!empty($isPAYE_SSO)) {
                        die(json_encode(['w', '']));
                    }
                }

                $companyID = current_companyID();
                $dateTime = current_date();
                $pc = current_pc();
                $userID = current_userID();
                $userGroup = current_user_group();

                /*If deleting item salary than update MA/ MD process status*/

                $MA_id = $this->db->query("SELECT * FROM (
                                SELECT MA_ded.monthlyAdditionsMasterID AS masterID FROM srp_erp_pay_finalsettlementmoredetails morDet
                                JOIN srp_erp_pay_monthlyadditiondetail MA_ded ON morDet.otherDetailID = MA_ded.monthlyAdditionDetailID
                                WHERE fsDetID = {$id} AND entryType = 'MA' GROUP BY MA_ded.monthlyAdditionsMasterID
                            ) t1
                            WHERE NOT EXISTS (
                                SELECT monthlyAdditionsMasterID FROM srp_erp_payrolldetail AS payDet
                                JOIN srp_erp_pay_monthlyadditiondetail AS monthDet
                                ON monthDet.monthlyAdditionDetailID=payDet.detailTBID AND monthDet.companyID={$companyID}
                                WHERE payDet.companyID={$companyID} AND fromTB='MA' AND monthDet.monthlyAdditionsMasterID = t1.masterID
                                GROUP BY monthlyAdditionsMasterID
                            )")->result_array();

                if (!empty($MA_id)) {
                    $MA_id = array_column($MA_id, 'masterID');
                    /*Update Monthly Additions Master */
                    $upData = ['isProcessed' => 0, 'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime];
                    $this->db->where_in('monthlyAdditionsMasterID', $MA_id)->where('isProcessed', 1)->update('srp_erp_pay_monthlyadditionsmaster', $upData);
                }

                $MD_id = $this->db->query("SELECT * FROM (
                                SELECT MD_ded.monthlyDeductionMasterID AS masterID FROM srp_erp_pay_finalsettlementmoredetails morDet
                                JOIN srp_erp_pay_monthlydeductiondetail MD_ded ON morDet.otherDetailID = MD_ded.monthlyDeductionDetailID
                                WHERE fsDetID = {$id} AND entryType = 'MD' GROUP BY MD_ded.monthlyDeductionMasterID
                            ) t1
                            WHERE NOT EXISTS (
                                SELECT monthlyDeductionMasterID FROM srp_erp_payrolldetail AS payDet
                                JOIN srp_erp_pay_monthlydeductiondetail AS monthDet
                                ON monthDet.monthlyDeductionDetailID=payDet.detailTBID AND monthDet.companyID={$companyID}
                                WHERE payDet.companyID={$companyID} AND fromTB='MD' AND monthDet.monthlyDeductionMasterID = t1.masterID
                                GROUP BY monthlyDeductionMasterID
                            )")->result_array();

                if (!empty($MD_id)) {
                    $MD_id = array_column($MD_id, 'masterID');
                    /*Update Monthly Deduction Master */
                    $upData = ['isProcessed' => 0, 'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime];
                    $this->db->where_in('monthlyDeductionMasterID', $MD_id)->where('isProcessed', 1)->update('srp_erp_pay_monthlydeductionmaster', $upData);
                }
            }

            $this->db->delete('srp_erp_pay_finalsettlementmoredetails', $where);
        }

        if ($entry_type == 14) { /*Leave Payment*/
            $this->db->delete('srp_erp_pay_finalsettlementleavepaydetails', $where);
        }

        $this->db->delete('srp_erp_pay_finalsettlementdetail', $where);
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $type = (in_array($entry_type, [1, 2, 3, 4, 5, 11, 14, 15])) ? 'A' : 'D';
            $view = ($type == 'A') ? $this->addition_view($masterID, $dPlace, 0) : $this->deduction_view($masterID, $dPlace, 0);
            $netAmount = $this->get_final_settlement_net_amount($masterID);

            echo json_encode(['s', 'Deleted successfully.', 'type' => $type, 'view' => $view, 'netAmount' => $netAmount]);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function FS_more_detail_view()
    {
        $masterID = $this->input->post('masterID');
        $id = $this->input->post('autoID');
        $typeID = $this->input->post('typeID');

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        $basicDetail = $this->db->query("SELECT itm.description, narration FROM srp_erp_pay_finalsettlementdetail det
                          JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID  WHERE det.fsDetID = {$id}")->row_array();

        $dPlace = $masterData['trDPlace'];

        switch ($typeID) {
            case 1: /*Salary*/
                $this->FS_more_detail_salary_view($id, $basicDetail, $dPlace);
                break;

            case 7: /*SSO*/
                $this->FS_more_detail_SSO($id, $basicDetail, $dPlace);
                break;

            case 8: /*Loan recovery*/
                $this->FS_more_detail_loan_view($id, $basicDetail, $dPlace);
                break;

            case 12: /*Adjustment*/
                $this->FS_more_detail_adjustment_view($id, $basicDetail, $dPlace);
                break;

            case 13: /*PAYE*/
                $this->FS_more_detail_PAYE_view($id, $basicDetail, $dPlace);
                break;

            case 14: /*Leave Payment*/
                $basicDetail['empID'] = $masterData['empID'];
                $this->FS_more_detail_leave_pay_view($id, $basicDetail, $dPlace);
                break;
            default:
                die(json_encode(['e', 'Requested type not found']));
        }
    }

    function FS_more_detail_salary_view($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT cat.salaryDescription AS des, period, noOfDays, SUM(paid.amount) amount, GLSecondaryCode, 
                            GLDescription, 'Fixed Allowance' AS entryType
                            FROM srp_erp_pay_finalsettlementdetail det
                            JOIN srp_erp_pay_finalsettlementmoredetails paid ON paid.fsDetID = det.fsDetID AND entryType = 'FA' 
                            JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = paid.salaryCatID 
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = paid.GLAutoID                            
                            WHERE paid.fsDetID = {$id} GROUP BY paid.salaryCatID, period
                            UNION ALL
                            SELECT cat.monthlyDeclaration AS des, period, noOfDays, paid.amount, GLSecondaryCode,  
                            GLDescription, 'Monthly Addition' AS entryType
                            FROM srp_erp_pay_finalsettlementmoredetails paid
                            JOIN srp_erp_pay_monthlyadditiondetail det ON paid.otherDetailID = det.monthlyAdditionDetailID 
                            AND entryType = 'MA' 
                            JOIN srp_erp_pay_monthlydeclarationstypes cat ON cat.monthlyDeclarationID = det.declarationID 
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = paid.GLAutoID
                            WHERE paid.fsDetID = {$id}
                            UNION ALL
                            SELECT cat.monthlyDeclaration AS des, period, noOfDays, paid.amount, GLSecondaryCode, 
                            GLDescription, 'Monthly Deduction' AS entryType
                            FROM srp_erp_pay_finalsettlementmoredetails paid
                            JOIN srp_erp_pay_monthlydeductiondetail det ON paid.otherDetailID = det.monthlyDeductionDetailID 
                            AND entryType = 'MD' 
                            JOIN srp_erp_pay_monthlydeclarationstypes cat ON cat.monthlyDeclarationID = det.declarationID 
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = paid.GLAutoID
                            WHERE paid.fsDetID = {$id}
                            UNION ALL 
                            SELECT CONCAT(cat.salaryDescription, ' (',otCode,')') AS des, period, noOfDays, paid.amount, GLSecondaryCode, 
                            GLDescription, 'Over Time' AS entryType
                            FROM srp_erp_pay_finalsettlementmoredetails paid
                            JOIN srp_erp_pay_empattendancereview det ON paid.otherDetailID = det.ID AND entryType = 'OT'                              
                            JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = det.salaryCategoryID 
                            JOIN srp_erp_generalotmaster AS otMas ON otMas.generalOTMasterID = det.generalOTID AND otMas.companyID = {$companyID}
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = paid.GLAutoID
                            WHERE paid.fsDetID = {$id}
                            UNION ALL 
                            SELECT CONCAT(cat.salaryDescription, ' (',otCode,')') AS des, period, noOfDays, paid.amount, GLSecondaryCode, 
                            GLDescription, 'No Pay' AS entryType
                            FROM srp_erp_pay_finalsettlementmoredetails paid
                            JOIN srp_erp_pay_empattendancereview det ON paid.otherDetailID = det.ID AND entryType = 'NP'                              
                            JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = det.salaryCategoryID 
                            JOIN srp_erp_generalotmaster AS otMas ON otMas.generalOTMasterID = det.generalOTID AND otMas.companyID = {$companyID}
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = paid.GLAutoID
                            WHERE paid.fsDetID = {$id}")->result_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        $title = '<b>' . $basicDetail['description'] . ' : </b> <span style="font-size: 12px;">' . $basicDetail['narration'] . '</span>';
        $moreDetail = array_group_by($moreDetail, 'period');
        $str = '';
        $totalAmount = 0;
        foreach ($moreDetail as $row) {
            $periodTot = 0;
            foreach ($row as $dec) {
                $periodTot += round($dec['amount'], $dPlace);
                $totalAmount += round($dec['amount'], $dPlace);


                $str .= '<tr>
                        <td>' . date('Y F', strtotime($dec['period'])) . '</td>
                        <td>' . $dec['entryType'] . '</td>                        
                        <td>' . $dec['des'] . '</td>                        
                        <td align="center">' . $dec['noOfDays'] . '</td>                       
                        <td>' . $dec['GLSecondaryCode'] . ' ' . $dec['GLDescription'] . '</td>
                        <td align="right">' . number_format($dec['amount'], $dPlace) . '</td>
                     </tr>';
            }

            if (count($moreDetail) > 1) {
                $str .= '<tr>
                            <td colspan="5" class="total-sd-single" align="right">Total</td> 
                            <td class="total-sd-single" align="right">' . number_format($periodTot, $dPlace) . '</td> 
                         </tr>';
            }
        }

        $str .= '<tr>
                    <td colspan="5" class="total-sd" align="right">Total - Pay</td> 
                    <td class="total-sd" align="right">' . number_format($totalAmount, $dPlace) . '</td> 
                 </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function FS_more_detail_loan_view($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT mas.loanCode, cat.description, mor.amount recoverAmount,  
                            GLSecondaryCode, GLDescription
                            FROM srp_erp_pay_finalsettlementmoredetails mor
                            JOIN srp_erp_pay_emploan mas ON mor.loanMasterID = mas.ID
                            JOIN srp_erp_pay_loan_category cat ON cat.loanID = mas.loanCatID
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = mor.GLAutoID
                            WHERE mas.companyID= $companyID AND fsDetID = {$id} AND entryType = 'LO'")->result_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        $title = '<b>' . $basicDetail['description'] . ' : </b> <span style="font-size: 12px;">' . $basicDetail['narration'] . '</span>';
        $str = '';
        $totalAmount = 0;
        foreach ($moreDetail as $dec) {
            $totalAmount += round($dec['recoverAmount'], $dPlace);
            $str .= '<tr>                        
                        <td>' . $dec['loanCode'] . '</td>                        
                        <td>' . $dec['description'] . '</td>                               
                        <td>' . $dec['GLSecondaryCode'] . ' ' . $dec['GLDescription'] . '</td>
                        <td align="right">' . number_format($dec['recoverAmount'], $dPlace) . '</td>
                     </tr>';
        }
        $str .= '<tr>
                    <td colspan="3" class="total-sd" align="right">Total - Recovery</td> 
                    <td class="total-sd" align="right">' . number_format($totalAmount, $dPlace) . '</td> 
                 </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function FS_more_detail_SSO($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT period, entryType, amount, CONCAT(ch.GLSecondaryCode, ' - ', ch.GLDescription) glEx,
                            ssMas.Description, CONCAT(ch2.GLSecondaryCode, ' - ', ch2.GLDescription) glLib
                            FROM srp_erp_pay_finalsettlementmoredetails mt
                            LEFT JOIN srp_erp_socialinsurancemaster ssMas ON ssMas.socialInsuranceID = mt.otherDetailID AND ssMas.companyID = {$companyID}
                            LEFT JOIN srp_erp_chartofaccounts ch ON ch.GLAutoID = mt.GLAutoID AND ch.companyID = {$companyID}
                            LEFT JOIN srp_erp_chartofaccounts ch2 ON ch2.GLAutoID = mt.liabilityGL AND ch2.companyID = {$companyID}                             
                            WHERE mt.companyID = {$companyID} AND fsDetID = {$id} AND entryType IN ('SSO', 'SSO-E')")->result_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        $title = '<b>' . $basicDetail['description'] . ' : </b> <span style="font-size: 12px;">' . $basicDetail['narration'] . '</span>';
        $str = '';
        $totalSSO = 0;
        $totalSSO_e = 0;
        $perPeriod = '';
        foreach ($moreDetail as $key => $dec) {
            if ($dec['entryType'] == 'SSO') {
                $totalSSO += round($dec['amount'], $dPlace);
            } else {
                $totalSSO_e += round($dec['amount'], $dPlace);
            }

            $period = '';
            if ($perPeriod != $dec['period']) {
                $perPeriod = $dec['period'];
                $period = '<b>' . date('Y - F', strtotime($dec['period'])) . '</b>';
            }

            $employee = ($dec['entryType'] == 'SSO') ? number_format($dec['amount'], $dPlace) : number_format(0, $dPlace);
            $employer = ($dec['entryType'] == 'SSO-E') ? number_format($dec['amount'], $dPlace) : number_format(0, $dPlace);

            $str .= '<tr>                        
                        <td>' . $period . '</td>
                        <td>' . $dec['Description'] . '</td>
                        <td align="right">' . $employee . '</td>                               
                        <td align="right">' . $employer . '</td>                                                       
                        <td>' . $dec['glEx'] . '</td>
                        <td>' . $dec['glLib'] . '</td> 
                     </tr>';
        }
        $str .= '<tr>
                    <td class="total-sd" align="right" colspan="2">Total</td> 
                    <td class="total-sd" align="right">' . number_format($totalSSO, $dPlace) . '</td> 
                    <td class="total-sd" align="right">' . number_format($totalSSO_e, $dPlace) . '</td> 
                    <td class="total-sd" colspan="2"></td> 
                 </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function FS_more_detail_adjustment_view($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT entryType, amount, CONCAT(ch.GLSecondaryCode, ' - ', ch.GLDescription) glEx,
                            CONCAT(ch2.GLSecondaryCode, ' - ', ch2.GLDescription) glLib, otherDetailID
                            FROM srp_erp_pay_finalsettlementmoredetails mt
                            LEFT JOIN srp_erp_chartofaccounts ch ON ch.GLAutoID = mt.GLAutoID AND ch.companyID = {$companyID}
                            LEFT JOIN srp_erp_chartofaccounts ch2 ON ch2.GLAutoID = mt.liabilityGL AND ch2.companyID = {$companyID}                             
                            WHERE mt.companyID= $companyID AND fsDetID = {$id} AND entryType IN ('SSO', 'SSO-E', 'PAYE')")->row_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        if ($moreDetail['entryType'] == 'PAYE') {
            $type = $this->db->get_where('srp_erp_payeemaster', ['payeeMasterID' => $moreDetail['otherDetailID']])->row('Description');
        } else {
            $type = $this->db->get_where('srp_erp_socialinsurancemaster', ['socialInsuranceID' => $moreDetail['otherDetailID']])->row('Description');
        }

        $title = '<b>' . $basicDetail['description'] . ' : ' . $type . ' </b> <span style="font-size: 12px;"> - ' . $basicDetail['narration'] . '</span>';
        $str = '';

        $employee = (in_array($moreDetail['entryType'], ['SSO', 'PAYE'])) ? number_format($moreDetail['amount'], $dPlace) : number_format(0, $dPlace);
        $employer = ($moreDetail['entryType'] == 'SSO-E') ? number_format($moreDetail['amount'], $dPlace) : number_format(0, $dPlace);

        $str .= '<tr>                                                                                                                       
                        <td align="right">' . $employee . '</td>                               
                        <td align="right">' . $employer . '</td>                               
                        <td>' . $moreDetail['glEx'] . '</td>
                        <td>' . $moreDetail['glLib'] . '</td> 
                     </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function FS_more_detail_PAYE_view($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT period, mas.Description, mor.amount, GLSecondaryCode, GLDescription
                            FROM srp_erp_pay_finalsettlementmoredetails mor
                            JOIN srp_erp_payeemaster mas ON mor.otherDetailID = mas.payeeMasterID 
                            LEFT JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = mor.liabilityGL
                            WHERE mas.companyID = {$companyID} AND fsDetID = {$id} AND entryType = 'PAYE'")->result_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        $title = '<b>' . $basicDetail['description'] . ' : ' . $moreDetail[0]['Description'] . ' </b> <span style="font-size: 12px;"> - ' . $basicDetail['narration'] . '</span>';
        $str = '';
        $totalAmount = 0;
        foreach ($moreDetail as $dec) {
            $totalAmount += round($dec['amount'], $dPlace);
            $str .= '<tr>                        
                        <td>' . date('Y - F', strtotime($dec['period'])) . '</td>                                                                        
                        <td>' . $dec['GLSecondaryCode'] . ' ' . $dec['GLDescription'] . '</td>
                        <td align="right">' . number_format($dec['amount'], $dPlace) . '</td>
                     </tr>';
        }
        $str .= '<tr>
                    <td colspan="2" class="total-sd" align="right">Total - Amount</td> 
                    <td class="total-sd" align="right">' . number_format($totalAmount, $dPlace) . '</td> 
                 </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function FS_more_detail_leave_pay_view($id, $basicDetail, $dPlace)
    {
        $companyID = current_companyID();
        $moreDetail = $this->db->query("SELECT lvType.description lvDesc, grossSelections, grossAmount, noOfDays, leaveBalance 
                                        FROM srp_erp_pay_finalsettlementleavepaydetails AS fnLevDet
                                        JOIN srp_erp_leavetype AS lvType ON lvType.leaveTypeID = fnLevDet.leaveID
                                        WHERE fsDetID = {$id} AND lvType.companyID = {$companyID}")->row_array();

        if (empty($moreDetail)) {
            die(json_encode(['e', 'No records found']));
        }

        $sal_cats = $moreDetail['grossSelections'];
        $empID = $basicDetail['empID'];
        $salary_det = $this->db->query("SELECT sal_cat.salaryDescription, amount 
                            FROM srp_erp_pay_salarydeclartion AS sal_dec
                            JOIN srp_erp_pay_salarycategories AS sal_cat ON sal_cat.salaryCategoryID = sal_dec.salaryCategoryID
                            WHERE employeeNo = {$empID} AND sal_dec.salaryCategoryID IN ({$sal_cats})")->result_array();
        $title = '<b>' . $basicDetail['description'] . '  </b>';
        $str = '';
        $totalAmount = 0;
        foreach ($salary_det as $key => $dec) {
            $totalAmount += round($dec['amount'], $dPlace);
            $td = '<td colspan="3"></td>';

            if ($key == 0) {
                $td = '<td>' . $moreDetail['lvDesc'] . '</td>';
                $td .= '<td style="text-align: right">' . $moreDetail['leaveBalance'] . '</td>';
                $td .= '<td style="text-align: right">' . $moreDetail['noOfDays'] . '</td>';
            }


            $str .= '<tr>                        
                        ' . $td . '                                                     
                        <td>' . $dec['salaryDescription'] . '</td>
                        <td align="right">' . number_format($dec['amount'], $dPlace) . '</td>
                     </tr>';
        }
        $str .= '<tr>
                    <td colspan="4" class="total-sd" align="right">Gross - Amount</td> 
                    <td class="total-sd" align="right">' . number_format($totalAmount, $dPlace) . '</td> 
                 </tr>';

        echo json_encode(['s', 'view' => $str, 'title' => $title]);
    }

    function final_settlement_document_confirm()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('FS', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $validate = $this->input->post('validate');
        if ($validate == 0) {
            $company_id = current_companyID();
            //validate assets returned or not
            $count = $this->db->query("SELECT COUNT(masterID) un_count FROM srp_erp_pay_assets
                              WHERE companyID = {$company_id} AND returnStatus = 0 AND empID = (
                                 SELECT empID FROM srp_erp_pay_finalsettlementmaster WHERE masterID = {$masterID}
                              )")->row('un_count');
            if ($count > 0) {
                die(json_encode(['w', 'There are some assets pending for return from this employee.<br/>Are you sure you want to proceed?']));
            }
        }

        $documentName = 'Final Settlement Approval';
        $tableName = 'srp_erp_pay_finalsettlementmaster';
        $documentCode = $document_status['data']['docCode'];
        $createdDate = $document_status['data']['createdDate'];

        $validate_code = validate_code_duplication($documentCode, 'documentCode', $masterID,'masterID', 'srp_erp_pay_finalsettlementmaster');
        if(!empty($validate_code)) {
            die(json_encode(['e', 'The document Code Already Exist.(' . $validate_code . ')']));
        }

        $this->load->library('approvals'); // Document Confirmation also update with the approvals library
        $this->db->trans_begin();
        $isAutoApproval = get_document_auto_approval('FS');
        if ($isAutoApproval == 0) { // If auto approval
            $this->approvals->auto_approve($masterID, $tableName, 'masterID', 'FS', $documentCode, $createdDate);
            $masterDetail = $this->Employee_model->finalSettlement_masterData($masterID);
            $this->final_settlement_GL_entries($masterID, $masterDetail);
            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                die(json_encode(['s', 'Approved successfully']));
            } else {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Error in approval process']));
            }
        }

        $approvals_status = $this->approvals->CreateApproval('FS', $masterID, $documentCode, $documentName, $tableName, 'masterID', 0, $createdDate);
        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            die(json_encode(['e', 'Something went wrong!, In approval create process']));
        }

        if ($approvals_status == 3) {
            $this->db->trans_rollback();
            echo json_encode(['w', 'There is no user exists to perform final settlement approval for this company.']);
        } elseif ($approvals_status == 1) {
            $empID = $this->db->get_where('srp_erp_pay_finalsettlementmaster', ['masterID' => $masterID])->row('empID');
            $upData = ['finalSettlementDoneYN' => 1, 'ModifiedPC' => current_pc(), 'ModifiedUserName' => current_employee(), 'Timestamp' => current_date()];
            $this->db->where(['EIdNo' => $empID])->update('srp_employeesdetails', $upData);

            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Something went wrong!, In approval create process']));
            }
            $this->db->trans_commit();
            echo json_encode(['s', 'Approval created : ' . $documentCode]);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['w', 'some thing went wrong', $approvals_status]);
        }
    }

    function final_settlement_GL_config()
    {
        $this->form_validation->set_rules('itemID', 'Item ID', 'trim|required');
        $this->form_validation->set_rules('glCode', 'GL Code', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $itemID = $this->input->post('itemID');
        $glCode = $this->input->post('glCode');
        $dateTime = current_date();
        $companyID = current_companyID();

        $id = $this->db->get_where('srp_erp_pay_finalsettlement_gl_config', ['typeID' => $itemID, 'companyID' => $companyID])->row('id');

        $this->db->trans_start();

        if (!empty($id)) {
            $data = [
                'GLID' => $glCode, 'modifyUserID' => current_userID(), 'modifyPC' => current_pc(),
                'modifyDateTime' => $dateTime, 'timestamp' => $dateTime
            ];

            $this->db->where(['id' => $id])->update('srp_erp_pay_finalsettlement_gl_config', $data);
        } else {
            $data = [
                'typeID' => $itemID, 'GLID' => $glCode, 'companyID' => $companyID, 'createdUserID' => current_userID(),
                'createdPC' => current_pc(), 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
            ];

            $this->db->insert('srp_erp_pay_finalsettlement_gl_config', $data);
        }


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function final_settlement_referBack()
    {
        $masterID = $this->input->post('masterID');
        $masterDetail = $this->Employee_model->finalSettlement_masterData($masterID);

        if ($masterDetail['approvedYN'] == 1) {
            echo json_encode(array('e', 'This document is already approved.<p>You can not refer back this.'));
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($masterID, 'FS');
            if ($status == 1) {
                echo json_encode(array('s', $masterDetail['documentCode'] . ' Referred back successfully.'));
            } else {
                echo json_encode(array('e', $masterDetail['documentCode'] . ' Error in refer back.'));
            }
        }
    }

    function fetch_finalSettlement_on_approval()
    {
        $companyID = current_companyID();

        $userID = current_userID();
        $status = trim($this->input->post('approvedYN') ?? '');
        if ($status == 0) {
            $where = [
                'approve.documentID' => 'FS',
                'ap.documentID' => 'FS',
                'ap.employeeID' => $userID,
                'approve.approvedYN' => $status
            ];

            $this->datatables->select('masterID, fm.documentCode AS documentCode, ECode, Ename2, narration, approve.approvedYN as approvedYN,
                    documentApprovedID, approvalLevelID', true)
                ->from('srp_erp_pay_finalsettlementmaster AS fm')
                ->join('srp_employeesdetails empTB', 'empTB.EIdNo=fm.empID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = fm.masterID AND approve.approvalLevelID = fm.currentLevelNo')
                ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = fm.currentLevelNo')
                ->where($where)->where('fm.companyID', $companyID)->where('ap.companyID', $companyID)
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"FS", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $where = [
                'approve.documentID' => 'FS',

            ];

            $this->datatables->select('masterID, fm.documentCode AS documentCode, ECode, Ename2, narration, approve.approvedYN as approvedYN,
                    documentApprovedID, approvalLevelID', true)
                ->from('srp_erp_pay_finalsettlementmaster AS fm')
                ->join('srp_employeesdetails empTB', 'empTB.EIdNo=fm.empID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = fm.masterID')
                ->where($where)
                ->where('fm.companyID', $companyID)
                ->where('approve.approvedEmpID', $userID)
                ->group_by('fm.masterID')
                ->group_by('approve.approvalLevelID')
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"FS", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        }

    }

    function final_settlement_approval()
    {
        $masterID = $this->input->post('masterID');
        $masterDetail = $this->Employee_model->finalSettlement_masterData($masterID);

        if ($masterDetail['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved.<p>You can not approved this.']));
        }

        if ($masterDetail['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed.<p>You can not approved this.']));
        }

        $documentCode = $masterDetail['documentCode'];
        $level_id = $this->input->post('level');
        $status = $this->input->post('status');
        $comments = $this->input->post('comments');

        $this->load->library('approvals');

        $this->db->trans_begin();
        $approvals_status = $this->approvals->approve_document($masterID, $level_id, $status, $comments, 'FS');

        if ($approvals_status == 2) {
            $this->db->trans_commit();
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';
            echo json_encode(['s', $msg, $approvals_status]);
        } else if ($approvals_status == 1) { /*Final level approved*/
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';

            $this->final_settlement_GL_entries($masterID, $masterDetail);
            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', $msg]);
            } else {
                $this->db->trans_rollback();
                $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
                echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
            }
        } else if ($approvals_status == 3) {
            $this->db->trans_commit();
            $msg = 'Approvals  Reject Process Successfully done'; //$this->lang->line('hrms_payroll_approvals_reject_process_successfully_done');
            echo json_encode(['s', '[ ' . $documentCode . ' ]' . $msg . ' .']);
        } else if ($approvals_status == 5) {
            $this->db->trans_rollback();
            $msg = 'Previous Level Approval Not Finished'; //$this->lang->line('hrms_payroll_previous_level_approval_not_finished');
            echo json_encode(['w', '[ ' . $documentCode . ' ] ' . $msg . '.']); /*Previous Level Approval Not Finished*/
        } else {
            $this->db->trans_rollback();
            $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
            echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
        }
    }

    function final_settlement_GL_entries($masterID, $masterData)
    {

        $documentCode = $masterData['documentCode'];
        $docDate = $masterData['createdDateTime'];
        $docYear = date('Y', strtotime($docDate));
        $docMonth = date('m', strtotime($docDate));
        $narration = $masterData['narration'];
        $empID = $masterData['empID'];
        $confByID = $masterData['confirmedByEmpID'];
        $confBy = $masterData['confirmedByName'];
        $confDate = $masterData['confirmedDate'];
        $appByID = $masterData['approvedByEmpID'];
        $appBy = $masterData['approvedByEmpName'];
        $appDate = $masterData['approvedDate'];

        $trCurrID = $masterData['trCurrencyID'];
        $trCurr = get_currency_code($trCurrID);
        $trDPlace = $masterData['trDPlace'];
        $locCurrID = $masterData['localCurrencyID'];
        $locCurr = get_currency_code($locCurrID);
        $locDPlace = $masterData['localDPlace'];
        $locER = $masterData['localCurrencyER'];
        $rptCurrID = $masterData['trCurrencyID'];
        $rptCurr = get_currency_code($rptCurrID);
        $rptDPlace = $masterData['rptDPlace'];
        $rptER = $masterData['rptCurrencyER'];

        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $userGroup = current_user_group();
        $pc = current_pc();
        $userID = current_userID();
        $dateTime = current_date();
        $userName = current_employee();

        $segDetails = $this->db->query("SELECT seg.segmentID, segmentCode FROM srp_employeesdetails empTB
                                        JOIN srp_erp_segment seg ON seg.segmentID = empTB.segmentID
                                        WHERE EIdNo = {$empID}")->row_array();

        $segmentID = $segDetails['segmentID'];
        $segmentCode = $segDetails['segmentCode'];


        /*Except SSO & PAYE*/
        $records = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,  
                                    subCategory, SUM(amount) amount FROM (
                                        SELECT itemID, itm.description, amount, narration, GLAutoID, 0 AS liabilityGL
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm
                                        ON itm.typeID = det.itemID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (2,3,4,5,6,9,10,11,14) 
                                        UNION ALL
                                        SELECT itemID, itm.description, mor.amount, narration, mor.GLAutoID, liabilityGL
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID NOT IN (2,3,4,5,6,7,9,10,11,12)                                           
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();
        if (!empty($records)) {
            foreach ($records as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $detail[] = [
                    'documentCode' => 'FS', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
                    'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'],
                    'GLCode' => $row['GLSecondaryCode'], 'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,

                    'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

                    'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
                    'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

                    'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
                    'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

                    'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

                    'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
                    'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => $segmentID, 'segmentCode' => $segmentCode
                ];
            }
        }

        /*SSO Expense only*/
        $SSO_expense = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,                                                                                
                                    subCategory, SUM(amount * -1) amount FROM (
                                        SELECT itemID, itm.description, mor.amount, narration, mor.GLAutoID AS GLAutoID
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (7,12)                                        
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();
        if (!empty($SSO_expense)) {
            foreach ($SSO_expense as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $detail[] = [
                    'documentCode' => 'FS', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
                    'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'],
                    'GLCode' => $row['GLSecondaryCode'], 'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,

                    'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

                    'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
                    'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

                    'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
                    'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

                    'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

                    'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
                    'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => $segmentID, 'segmentCode' => $segmentCode
                ];
            }
        }

        /*SSO/ PAYE Liability*/
        $liability_entry = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,                                                                                                                            
                                    subCategory, SUM(amount) amount FROM (    
                                        SELECT itemID, itm.description, mor.amount, narration, liabilityGL AS GLAutoID
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (7,12,13)
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();

        if (!empty($liability_entry)) {
            foreach ($liability_entry as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $detail[] = [
                    'documentCode' => 'FS', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
                    'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'],
                    'GLCode' => $row['GLSecondaryCode'], 'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,

                    'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

                    'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
                    'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

                    'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
                    'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

                    'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

                    'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
                    'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => $segmentID, 'segmentCode' => $segmentCode
                ];
            }
        }

        $this->db->insert_batch('srp_erp_generalledger', $detail);

        /************  Company Payroll Control Account ID  *************/
        $payrollCA = $this->db->query("SELECT GLAutoID, systemAccountCode, GLSecondaryCode, GLDescription, subCategory FROM srp_erp_chartofaccounts
                                    WHERE GLAutoID = (
                                       SELECT GLAutoID FROM srp_erp_companycontrolaccounts WHERE controlAccountType = 'PCA' AND companyID = {$companyID}
                                    ) AND companyID={$companyID} ")->row_array();

        $amount = $this->db->query("SELECT SUM(transactionAmount) trAmount FROM srp_erp_generalledger WHERE documentMasterAutoID={$masterID} 
                                    AND documentCode = 'FS' AND companyID={$companyID} ")->row('trAmount');
        $amount *= -1;
        $amount_type = ($amount > 0) ? 'dr' : 'cr';

        $detail = [
            'documentCode' => 'FS', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
            'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $payrollCA['GLAutoID'], 'systemGLCode' => $payrollCA['systemAccountCode'],
            'GLCode' => $payrollCA['GLSecondaryCode'], 'GLDescription' => $payrollCA['GLDescription'], 'GLType' => $payrollCA['subCategory'], 'amount_type' => $amount_type,

            'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

            'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
            'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

            'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
            'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

            'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

            'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
            'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => null, 'segmentCode' => null
        ];

        $this->db->insert('srp_erp_generalledger', $detail);

    }

    function final_settlement_account_review()
    {
        $masterID = $this->uri->segment(3);
        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);

        $data['masterData'] = $masterData;
        $trCurrID = $masterData['trCurrencyID'];
        $trCurr = get_currency_code($trCurrID);
        $trDPlace = $masterData['trDPlace'];
        $companyID = current_companyID();
        $empID = $masterData['empID'];
        $pay_control_amount = 0;

        $segDetails = $this->db->query("SELECT seg.segmentID, segmentCode FROM srp_employeesdetails empTB
                        JOIN srp_erp_segment seg ON seg.segmentID = empTB.segmentID
                        WHERE EIdNo = {$empID}")->row_array();

        $segmentID = $segDetails['segmentID'];
        $segmentCode = $segDetails['segmentCode'];

        /*Except SSO & PAYE*/
        $records = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,  
                                    subCategory, SUM(amount) amount FROM (
                                        SELECT itemID, itm.description, amount, narration, GLAutoID, 0 AS liabilityGL
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm
                                        ON itm.typeID = det.itemID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (2,3,4,5,6,9,10,11,14,15) 
                                        UNION ALL
                                        SELECT itemID, itm.description, mor.amount, narration, mor.GLAutoID, liabilityGL
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID NOT IN (2,3,4,5,6,7,9,10,11,12)                                           
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();
        if (!empty($records)) {
            foreach ($records as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $pay_control_amount += $amount;
                $detail[] = [
                    'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'], 'GLCode' => $row['GLSecondaryCode'],
                    'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,
                    'transactionAmount' => $amount, 'transactionCurrency' => $trCurr, 'segmentCode' => $segmentCode
                ];
            }
        }

        /*SSO Expense only*/
        $SSO_expense = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,                                                                                
                                    subCategory, SUM(amount * -1) amount FROM (
                                        SELECT itemID, itm.description, mor.amount, narration, mor.GLAutoID AS GLAutoID
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (7,12)                                        
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();
        if (!empty($SSO_expense)) {
            foreach ($SSO_expense as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $pay_control_amount += $amount;
                $detail[] = [
                    'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'], 'GLCode' => $row['GLSecondaryCode'],
                    'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,
                    'transactionAmount' => $amount, 'transactionCurrency' => $trCurr, 'segmentCode' => $segmentCode
                ];
            }
        }

        /*SSO/ PAYE Liability*/
        $liability_entry = $this->db->query("SELECT t1.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,                                                                                                                            
                                    subCategory, SUM(amount) amount FROM (    
                                        SELECT itemID, itm.description, mor.amount, narration, liabilityGL AS GLAutoID
                                        FROM srp_erp_pay_finalsettlementdetail det 
                                        JOIN srp_erp_pay_finalsettlementitems itm ON itm.typeID = det.itemID
                                        JOIN srp_erp_pay_finalsettlementmoredetails mor ON mor.fsDetID = det.fsDetID
                                        WHERE det.fsMasterID = {$masterID} AND det.itemID IN (7,12,13)
                                    ) t1
                                    JOIN srp_erp_chartofaccounts chAcc ON chAcc.GLAutoID = t1.GLAutoID
                                    GROUP BY t1.itemID, t1.GLAutoID ")->result_array();

        if (!empty($liability_entry)) {
            foreach ($liability_entry as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $pay_control_amount += $amount;
                $detail[] = [
                    'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'], 'GLCode' => $row['GLSecondaryCode'],
                    'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,
                    'transactionAmount' => $amount, 'transactionCurrency' => $trCurr, 'segmentCode' => $segmentCode
                ];
            }
        }


        /************  Company Payroll Control Account ID  *************/
        $payrollCA = $this->db->query("SELECT GLAutoID, systemAccountCode, GLSecondaryCode, GLDescription, subCategory FROM srp_erp_chartofaccounts
                                    WHERE GLAutoID = (
                                       SELECT GLAutoID FROM srp_erp_companycontrolaccounts WHERE controlAccountType = 'PCA' AND companyID = {$companyID}
                                    ) AND companyID={$companyID} ")->row_array();

        $pay_control_amount *= -1;
        $amount_type = $amount_type = ($pay_control_amount > 0) ? 'dr' : 'cr';

        $detail[] = [
            'GLAutoID' => $payrollCA['GLAutoID'], 'systemGLCode' => $payrollCA['systemAccountCode'], 'GLCode' => $payrollCA['GLSecondaryCode'],
            'GLDescription' => $payrollCA['GLDescription'], 'GLType' => $payrollCA['subCategory'], 'amount_type' => $amount_type,
            'transactionAmount' => $pay_control_amount, 'transactionCurrency' => $trCurr, 'segmentCode' => ''
        ];

        $data['dPlace'] = $trDPlace;
        $data['trCurr'] = $trCurr;
        $data['detail'] = $detail;
        $html = $this->load->view('system/hrm/print/final-settlement-account-review', $data, true);
        //die($html);

        $this->load->library('pdf');
        $status = ($masterData['confirmedYN'] == 1) ? $masterData['approvedYN'] : $masterData['confirmedYN'];
        $this->pdf->printed($html, 'A4', $status, null);
    }

    function final_settlement_print()
    {
        $masterID = $this->uri->segment(3);
        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);

        $data['masterID'] = $masterID;
        $data['addView'] = $this->Employee_model->get_final_settlement_details($masterID, 0);
        $data['dedView'] = $this->Employee_model->get_final_settlement_details($masterID, 1);

        $html = $this->load->view('system/hrm/ajax/final-settlement-print', $data, true);

        $this->load->library('pdf');
        $status = ($masterData['confirmedYN'] == 1) ? $masterData['approvedYN'] : $masterData['confirmedYN'];
        $this->pdf->printed($html, 'A4', $status, null);
    }

    function final_settlement_paymentVoucher_generation()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('empBankID', 'Employee bank', 'trim|required');
        $this->form_validation->set_rules('transDate', 'Transfer Date', 'trim|required');
        $this->form_validation->set_rules('accountID', 'Bank or Cash', 'trim|required');

        $companyID = current_companyID();
        $accountID = $this->input->post('accountID');
        $paymentType = $this->input->post('paymentType');

        $bankData = [];
        if (!empty($accountID)) {
            $where = ['approvedYN' => 1, 'companyID' => $companyID, 'GLAutoID' => $accountID];
            $bankData = $this->db->get_where('srp_erp_chartofaccounts', $where)->row_array();

            if ($bankData['isCash'] == 0) {
                $this->form_validation->set_rules('paymentType', 'Payment Type', 'trim|required');

                if ($paymentType == 1) { /*Cheque*/
                    $this->form_validation->set_rules('chequeNo', 'Cheque No', 'trim|required');
                    $this->form_validation->set_rules('chequeDate', 'Cheque Date', 'trim|required');
                }
            }
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');

        $masterData = $this->Employee_model->finalSettlement_masterData($masterID);
        if ($masterData['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed yet']));
        }

        if ($masterData['approvedYN'] != 1) {
            die(json_encode(['e', 'This document is not approved yet']));
        }

        if ($masterData['paymentVoucherID'] > 0) {
            die(json_encode(['e', 'Payment voucher is already processed']));
        }

        $empBankID = $this->input->post('empBankID');
        $transDate = $this->input->post('transDate');
        $chequeDate = $this->input->post('chequeDate');
        $chequeNo = $this->input->post('chequeNo');
        $bankTransferDetails = $this->input->post('bankTransferDetails');
        $accountPayeeOnly = $this->input->post('accountPayeeOnly');

        $date_format_policy = date_format_policy();

        $dateTime = current_date();
        $transDate = input_format_date($transDate, $date_format_policy);
        $periodStart = date('Y-m-01', strtotime($transDate));
        $periodEnd = date('Y-m-t', strtotime($transDate));

        $bankTransferAmount = $this->get_final_settlement_net_amount($masterID);
        $bankTransferAmount = str_replace(',', '', $bankTransferAmount);

        $bank_curr_data = currency_conversionID($masterData['trCurrencyID'], $bankData['bankCurrencyID']);

        $financePeriod_arr = $this->db->select('companyFinancePeriodID, companyFinanceYearID')->from('srp_erp_companyfinanceperiod')
            ->where(['dateFrom' => $periodStart, 'dateTo' => $periodEnd, 'companyID' => $companyID])->get()->row_array();

        $financeYear_arr = $this->db->select('companyFinanceYearID, beginingDate, endingDate')->from('srp_erp_companyfinanceyear')
            ->where(['companyFinanceYearID' => $financePeriod_arr['companyFinanceYearID'], 'isActive' => 1, 'companyID' => $companyID])->get()->row_array();

        $financeYearID = $financeYear_arr['companyFinanceYearID'];
        $companyFinanceYear = $financeYear_arr['beginingDate'] . ' ' . $financeYear_arr['endingDate'];

        $this->load->library('sequence');
        $year = date('Y', strtotime($financeYear_arr['beginingDate']));
        $month = date('m', strtotime($financeYear_arr['beginingDate']));
        $pvCode = $this->sequence->sequence_generator_fin('PV', $financeYearID, $year, $month);
        $fs_documentCode = $masterData['documentCode'];
        $empID = $masterData['empID'];
        $empDetails = $this->db->query("SELECT empTB.*, seg.segmentCode FROM srp_employeesdetails empTB
                                        LEFT JOIN srp_erp_segment seg ON seg.segmentID = empTB.segmentID
                                        WHERE EIdNo = {$empID}")->row_array();

        $segmentID = $empDetails['segmentID'];
        $segmentCode = $empDetails['segmentCode'];


        $pvMaster = [
            'documentID' => 'PV', 'PVcode' => $pvCode, 'PVdate' => $transDate, 'pvType' => 'Employee', 'referenceNo' => $fs_documentCode,

            'companyFinanceYearID' => $financeYearID, 'companyFinanceYear' => $companyFinanceYear, 'FYBegin' => $financeYear_arr['beginingDate'],
            'FYEnd' => $financeYear_arr['endingDate'], 'FYPeriodDateFrom' => $periodStart, 'FYPeriodDateTo' => $periodEnd,
            'companyFinancePeriodID' => $financePeriod_arr['companyFinancePeriodID'],

            'modeOfPayment' => ($bankData['isCash'] == 1) ? 1 : 2,
            'paymentType' => ($bankData['isCash'] == 1) ? 0 : $paymentType,

            'PVbank' => $bankData['bankName'], 'PVbankCode' => $bankData['GLAutoID'], 'bankGLAutoID' => $bankData['GLAutoID'],
            'bankSystemAccountCode' => $bankData['systemAccountCode'], 'bankGLSecondaryCode' => $bankData['GLSecondaryCode'],
            'PVbankBranch' => $bankData['bankBranch'], 'PVbankSwiftCode' => $bankData['bankSwiftCode'], 'PVbankAccount' => $bankData['bankAccountNumber'],
            'PVbankType' => $bankData['subCategory'], 'PVNarration' => $fs_documentCode . ' ' . $masterData['narration'],

            'partyType' => 'EMP', 'partyID' => $empID, 'partyCode' => $empDetails['ECode'], 'partyName' => $empDetails['Ename2'],
            'partyTelephone' => $empDetails['EpTelephone'], 'partyEmail' => $empDetails['EEmail'], 'partyFax' => $empDetails['EpFax'],
            'partyAddress' => $empDetails['EcAddress1'] . ' ' . $empDetails['EcAddress2'] . ' ' . $empDetails['EcAddress3'],

            'confirmedYN' => 1, 'confirmedByEmpID' => current_userID(), 'confirmedByName' => current_employee(), 'confirmedDate' => $dateTime,

            'transactionCurrencyID' => $masterData['trCurrencyID'], 'transactionCurrency' => get_currency_code($masterData['trCurrencyID']),
            'transactionExchangeRate' => 1, 'transactionAmount' => $bankTransferAmount, 'transactionCurrencyDecimalPlaces' => $masterData['trDPlace'],

            'companyLocalCurrencyID' => $masterData['localCurrencyID'], 'companyLocalCurrency' => get_currency_code($masterData['localCurrencyID']),
            'companyLocalExchangeRate' => $masterData['localCurrencyER'], 'companyLocalAmount' => round(($bankTransferAmount / $masterData['localCurrencyER']), $masterData['localDPlace']),
            'companyLocalCurrencyDecimalPlaces' => $masterData['localDPlace'],

            'companyReportingCurrencyID' => $masterData['rptCurrencyID'], 'companyReportingCurrency' => get_currency_code($masterData['rptCurrencyID']),
            'companyReportingExchangeRate' => $masterData['rptCurrencyER'], 'companyReportingAmount' => round(($bankTransferAmount / $masterData['rptCurrencyER']), $masterData['rptDPlace']),
            'companyReportingCurrencyDecimalPlaces' => $masterData['rptDPlace'],

            'partyCurrencyID' => $masterData['trCurrencyID'], 'partyCurrency' => get_currency_code($masterData['trCurrencyID']),
            'partyExchangeRate' => 1, /* Party currency = employee currency (transaction currency)*/
            'partyCurrencyAmount' => round($bankTransferAmount, $masterData['trDPlace']), 'partyCurrencyDecimalPlaces' => $masterData['trDPlace'],


            'bankCurrencyID' => $bankData['bankCurrencyID'], 'bankCurrency' => $bank_curr_data['CurrencyCode'],
            'bankCurrencyAmount' => round(($bankTransferAmount / $bank_curr_data['conversion']), $bank_curr_data['DecimalPlaces']),
            'bankCurrencyExchangeRate' => $bank_curr_data['conversion'], 'bankCurrencyDecimalPlaces' => $bank_curr_data['DecimalPlaces'],

            'companyID' => $companyID, 'companyCode' => current_companyCode(), 'segmentID' => $segmentID, 'segmentCode' => $segmentCode,
            'createdUserGroup' => current_user_group(), 'createdPCID' => current_pc(), 'createdUserID' => current_userID(),
            'createdUserName' => current_employee(), 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        if ($bankData['isCash'] == 0) {
            if ($paymentType == 1) { /*Cheque*/
                $pvMaster['PVchequeNo'] = $chequeNo;
                $pvMaster['PVchequeDate'] = input_format_date($chequeDate, $date_format_policy);
                $pvMaster['accountPayeeOnly'] = ($accountPayeeOnly == 'on') ? 1 : 0;
            } else {
                $pvMaster['bankTransferDetails'] = $bankTransferDetails;
            }
        }

        $this->db->trans_begin();

        $this->db->insert('srp_erp_paymentvouchermaster', $pvMaster);
        $pvMasterID = $this->db->insert_id();

        /*Start of payment voucher detail */
        $payrollCA = $this->db->query("SELECT coa.* FROM srp_erp_chartofaccounts coa
                        JOIN srp_erp_companycontrolaccounts cnt on coa.GLAutoID = cnt.GLAutoID
                        WHERE coa.companyID = {$companyID} AND cnt.controlAccountType='PCA'")->row_array();

        $pvDet = [
            'payVoucherAutoId' => $pvMasterID,
            'type' => 'GL', 'referenceNo' => $pvCode, 'GLAutoID' => $payrollCA['GLAutoID'], 'systemGLCode' => $payrollCA['systemAccountCode'],
            'GLCode' => $payrollCA['GLSecondaryCode'], 'GLDescription' => $payrollCA['GLDescription'], 'GLType' => $payrollCA['subCategory'],
            'description' => $pvCode . ' ' . $masterData['narration'],

            'transactionCurrencyID' => $masterData['trCurrencyID'], 'transactionCurrency' => get_currency_code($masterData['trCurrencyID']),
            'transactionExchangeRate' => 1, 'transactionAmount' => $bankTransferAmount, 'transactionCurrencyDecimalPlaces' => $masterData['trDPlace'],

            'companyLocalCurrencyID' => $masterData['localCurrencyID'], 'companyLocalCurrency' => get_currency_code($masterData['localCurrencyID']),
            'companyLocalExchangeRate' => $masterData['localCurrencyER'], 'companyLocalAmount' => round(($bankTransferAmount / $masterData['localCurrencyER']), $masterData['localDPlace']),
            'companyLocalCurrencyDecimalPlaces' => $masterData['localDPlace'],

            'companyReportingCurrencyID' => $masterData['rptCurrencyID'], 'companyReportingCurrency' => get_currency_code($masterData['rptCurrencyID']),
            'companyReportingExchangeRate' => $masterData['rptCurrencyER'], 'companyReportingAmount' => round(($bankTransferAmount / $masterData['rptCurrencyER']), $masterData['rptDPlace']),
            'companyReportingCurrencyDecimalPlaces' => $masterData['rptDPlace'],

            'partyCurrencyID' => $masterData['trCurrencyID'], 'partyCurrency' => get_currency_code($masterData['trCurrencyID']),
            'partyExchangeRate' => 1, /* Party currency = employee currency (transaction currency)*/
            'partyAmount' => round($bankTransferAmount, $masterData['trDPlace']), 'partyCurrencyDecimalPlaces' => $masterData['trDPlace'],

            'companyID' => $companyID, 'companyCode' => current_companyCode(), 'segmentID' => $segmentID, 'segmentCode' => $segmentCode,
            'createdUserGroup' => current_user_group(), 'createdPCID' => current_pc(), 'createdUserID' => current_userID(), 'createdUserName' => current_employee(),
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_paymentvoucherdetail', $pvDet);

        /*End of payment voucher detail */


        $fs_data = ['bankMasterID' => $empBankID, 'paymentVoucherID' => $pvMasterID, 'netPay' => $bankTransferAmount];
        $this->db->where(['masterID' => $masterID])->update('srp_erp_pay_finalsettlementmaster', $fs_data);


        /*Approval create*/
        $this->load->library('approvals');
        $approvals_status = $this->approvals->CreateApproval('PV', $pvMasterID, $pvCode, 'Payment Voucher', 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId');

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            die(json_encode(['e', 'Something went wrong!, In bank transfer process']));
        }

        if ($approvals_status == 1) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Payment voucher [ ' . $pvCode . ' ] successfully generated', 'payVoucherAutoId' => $pvMasterID]);
        } else if ($approvals_status == 3) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'There are no users exist to perform Payment voucher approval.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Something went wrong!, In approval creation process']);
        }

    }

    function fetch_gratuity()
    {
        $companyID = current_companyID();
        $this->datatables->select("gratuityID, gratuityDescription, provisionGL, expenseGL, isDefault, 
                                 formula, CONCAT(glTbl1.GLSecondaryCode,' - ', glTbl1.GLDescription) prGL, 
                                 CONCAT(glTbl2.GLSecondaryCode,' - ', glTbl2.GLDescription) exGL")
            ->from('srp_erp_pay_gratuitymaster AS t1')
            ->join('srp_erp_chartofaccounts glTbl1', 't1.provisionGL=glTbl1.GLAutoID', 'left')
            ->join('srp_erp_chartofaccounts glTbl2', 't1.expenseGL=glTbl2.GLAutoID', 'left')
            ->join("(SELECT autoID, formula FROM srp_erp_pay_gratuityformula WHERE companyID='{$companyID}' AND masterType='GRATUITY') t2", 't2.autoID=t1.gratuityID', 'left')
            ->add_column('formula', '<span id="gratuity-formula-$1">$2</span>', 'gratuityID,formula')
            ->add_column('edit', '$1', 'load_gratuity_setup_action(gratuityID,gratuityDescription,provisionGL,expenseGL)')
            ->where('t1.companyID', $companyID);

        echo $this->datatables->generate();
    }

    function create_gratuity()
    {
        $this->form_validation->set_rules('gratuity_description', 'Description', 'trim|required');
        $this->form_validation->set_rules('expenseGL', 'Expense GL', 'trim|required');
        $this->form_validation->set_rules('provisionGL', 'Provision GL', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $description = $this->input->post('gratuity_description');
        $expenseGL = $this->input->post('expenseGL');
        $provisionGL = $this->input->post('provisionGL');
        $companyID = current_companyID();

        $isExist = $this->db->get_where('srp_erp_pay_gratuitymaster', ['companyID' => $companyID, 'gratuityDescription' => $description])->row('gratuityID');

        if (!empty($isExist)) {
            die(json_encode(['e', 'This description is already exists']));
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $insert_data = [
            'gratuityDescription' => $description, 'expenseGL' => $expenseGL, 'provisionGL' => $provisionGL,
            'companyID' => $companyID, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('srp_erp_pay_gratuitymaster', $insert_data);

        echo json_encode(['s', 'Record added successfully']);
    }

    function update_gratuity_master()
    {
        $this->form_validation->set_rules('masterID', 'masterID', 'trim|required');
        $this->form_validation->set_rules('gratuity_description', 'Description', 'trim|required');
        $this->form_validation->set_rules('expenseGL', 'Expense GL', 'trim|required');
        $this->form_validation->set_rules('provisionGL', 'Provision GL', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $description = $this->input->post('gratuity_description');
        $expenseGL = $this->input->post('expenseGL');
        $provisionGL = $this->input->post('provisionGL');
        $companyID = current_companyID();

        $where = ['companyID' => $companyID, 'gratuityDescription' => $description];
        $isExist = $this->db->get_where('srp_erp_pay_gratuitymaster', $where)->row('gratuityID');

        if (!empty($isExist)) {
            if ($isExist != $masterID) {
                die(json_encode(['e', 'This description is already exists']));
            }
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $update = [
            'gratuityDescription' => $description, 'expenseGL' => $expenseGL, 'provisionGL' => $provisionGL,
            'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $where = ['companyID' => $companyID, 'gratuityID' => $masterID];
        $this->db->where($where)->update('srp_erp_pay_gratuitymaster', $update);

        echo json_encode(['s', 'Record updated successfully']);
    }

    function delete_gratuity_master()
    {
        $masterID = $this->input->post('masterID');
        $isInUse = $this->db->get_where('srp_employeesdetails', ['gratuityID' => $masterID])->row('EIdNo');
        if (!empty($isInUse)) {
            die(json_encode(['e', 'This master is assigned for some employees.<br/>You can not delete this record.']));
        }

        $this->db->trans_start();

        $slabData = $this->db->get_where('srp_erp_pay_gratuityslab', ['gratuityMasterID' => $masterID])->result_array();
        if (!empty($slabData)) {
            $slabID_arr = array_column($slabData, 'id');
            $this->db->where_in('autoID', $slabID_arr)->where('masterType', 'GRATUITY-SLAB')->delete('srp_erp_pay_gratuityformula');/*Delete slab formula*/
            $this->db->where(['gratuityMasterID' => $masterID])->delete('srp_erp_pay_gratuityslab'); /*Delete slab details*/
        }

        $this->db->where(['autoID' => $masterID, 'masterType' => 'GRATUITY'])->delete('srp_erp_pay_gratuityformula'); /*Delete master formula*/
        $this->db->where(['gratuityID' => $masterID])->delete('srp_erp_pay_gratuitymaster');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function saveFormula_gratuity()
    {
        $this->form_validation->set_rules('payGroupID', 'ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterType = trim($this->uri->segment(3));
        $formula = $this->input->post('formula');
        $formulaString = $this->input->post('formulaString');
        $autoID = $this->input->post('payGroupID');
        $salaryCategories = $this->input->post('salaryCategoryContainer');
        $salaryCategories = (trim($salaryCategories) == '') ? null : $salaryCategories;
        $ssoCategories = $this->input->post('SSOContainer');
        $ssoCategories = (trim($ssoCategories) == '') ? null : $ssoCategories;
        $payGroupCategories = $this->input->post('payGroupContainer');
        $payGroupCategories = (trim($payGroupCategories) == '') ? null : $payGroupCategories;
        $companyID = current_companyID();
        $current_date = current_date();
        $current_pc = current_pc();
        $user_id = current_userID();
        $user_group = current_user_group();


        $data['formula'] = $formula;
        $data['formulaString'] = $formulaString;
        $data['salaryCategories'] = $salaryCategories;
        $data['ssoCategories'] = $ssoCategories;
        $data['payGroupCategories'] = $payGroupCategories;


        $where = ['companyID' => $companyID, 'autoID' => $autoID, 'masterType' => $masterType];
        $id = $this->db->get_where("srp_erp_pay_gratuityformula", $where)->row('id');


        if (!empty($id)) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $user_id;
            $data['modifiedDateTime'] = $current_date;
            $data['timestamp'] = $current_date;
            $this->db->where(['id' => $id])->update('srp_erp_pay_gratuityformula', $data);

            echo json_encode(['s', 'Formula updated successfully.']);
        } else {
            $data['autoID'] = $autoID;
            $data['masterType'] = $masterType;
            $data['companyID'] = $companyID;
            $data['createdUserGroup'] = $user_group;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $user_id;
            $data['createdDateTime'] = $current_date;
            $data['timestamp'] = $current_date;
            $this->db->insert('srp_erp_pay_gratuityformula', $data);
            $q = $this->db->last_query();
            echo json_encode(['s', 'Formula added successfully.', $q]);
        }

    }

    function save_gratuity_slabs()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('slab_title', 'Title', 'trim|required');
        $this->form_validation->set_rules('start_range', 'Start year', 'trim|required');
        $this->form_validation->set_rules('end_range', 'End year', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $slab_title = trim($this->input->post('slab_title') ?? '');
        $startYear = $this->input->post('start_range');
        $endYear = $this->input->post('end_range');


        $where = ['companyID' => $companyID, 'gratuityMasterID' => $masterID];

        $this->db->select("MAX(startYear) AS lastStartRange");
        $this->db->from("srp_erp_pay_gratuityslab");
        $this->db->where($where);
        $lastStartRange = $this->db->get()->row('lastStartRange');

        if ($lastStartRange >= $startYear) {
            die(json_encode(['e', 'Start year should be greater than <br/>last slab end range( ' . $startYear . ' ).Please refresh the page and try again.']));
        }

        $where['slabTitle'] = $slab_title;
        $titleExit = $this->db->get_where('srp_erp_pay_gratuityslab', $where)->row('id');
        if (!empty($titleExit)) {
            die(json_encode(['e', 'This title already exists.']));
        }

        if ($startYear > $endYear) {
            die(json_encode(['e', 'End year should be greater than start year.']));
        }

        $data = [
            'gratuityMasterID' => $masterID,
            'slabTitle' => $slab_title,
            'startYear' => $startYear,
            'endYear' => $endYear,
            'companyID' => $companyID,
            'createdPCID' => current_pc(),
            'createdUserGroup' => current_user_group(),
            'createdUserID' => current_userID(),
            'createdDateTime' => current_date()
        ];
        //echo '<pre>'; print_r($data); echo '</pre>';        die();
        $this->db->insert('srp_erp_pay_gratuityslab', $data);
        if ($this->db->affected_rows() > 0) {
            echo json_encode(['s', 'Detail inserted successfully']);
        } else {
            echo json_encode(['e', 'Error in insertion, Please contact your system support team']);
        }
    }

    function ajax_update_gratuity_slab_title()
    {
        $value = trim($this->input->post('value') ?? '');
        $id = $this->input->post('pk');

        if (empty($value)) {
            header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', true, 500);
            die('Slab title can not be blank');
        }

        $companyID = current_companyID();
        $where = ['companyID' => $companyID, 'id' => $id];
        /*get gratuity master id*/
        $masterID = $this->db->get_where('srp_erp_pay_gratuityslab', $where)->row('gratuityMasterID');

        /*Check title already exist*/
        $where_title = ['companyID' => $companyID, 'gratuityMasterID' => $masterID, 'slabTitle' => $value];
        $titleExit = $this->db->select('id')->from('srp_erp_pay_gratuityslab')->where($where_title)->where("id <> {$id}")->get()->row('id');
        if (!empty($titleExit)) {
            header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', true, 500);
            die('This title already exists.');
        }

        $this->db->trans_start();
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $data = [
            'slabTitle' => $value, 'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->where($where)->update('srp_erp_pay_gratuityslab', $data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Title updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in title update process.']);
        }

    }

    function delete_gratuity_slab_detail()
    {
        $masterID = $this->input->post('masterID');
        $id = $this->input->post('id');

        $max_id = $this->db->query("SELECT MAX(id) max_id FROM srp_erp_pay_gratuityslab WHERE gratuityMasterID = {$masterID}")->row('max_id');
        if ($max_id != $id) {
            die(json_encode(['e', 'First delete slab ranges greater than this slab range.']));
        }

        $this->db->trans_start();

        $this->db->where(['autoID' => $id, 'masterType' => 'GRATUITY-SLAB'])->delete('srp_erp_pay_gratuityformula');
        $this->db->where(['id' => $id])->delete('srp_erp_pay_gratuityslab');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function employee_service_analysis_report()
    {
        $isForPrint = ($this->uri->segment(3) == 'Print') ? 'Y' : 'N';
        $this->form_validation->set_rules('category', 'Category ID', 'trim|required');
        $this->form_validation->set_rules('empID[]', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('segment[]', 'Segment', 'trim|required');

        $category = $this->input->post('category');

        if ($category != 'all') {
            $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required');
            $this->form_validation->set_rules('toDate', 'To Date', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $empID = $this->input->post('empID');
        $segment = $this->input->post('segment');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $where = '';
        $period = '';

        if ($category != 'all') {
            $period = "From {$fromDate} To {$toDate}";
            $date_format_policy = date_format_policy();
            $fromDate = input_format_date($fromDate, $date_format_policy);
            $toDate = input_format_date($toDate, $date_format_policy);

            if ($fromDate > $toDate) {
                die(json_encode(['e', 'To date should be greater than from date']));
            }

            if ($category == 'join') {
                $where = " AND EDOJ BETWEEN '{$fromDate}' AND '{$toDate}'";
            } else { /*discharged*/
                $where = " AND dischargedDate BETWEEN '{$fromDate}' AND '{$toDate}'";
            }
        }

        $empIDList = implode(',', $empID);
        $segmentList = implode(',', $segment);
        $segmentArr = $this->db->query("SELECT segmentID, description FROM srp_erp_segment 
                        WHERE companyID={$companyID} AND segmentID IN ({$segmentList})")->result_array();

        $segmentList = (!empty($segmentArr)) ? implode('<b>,</b> ', array_column($segmentArr, 'description')) : '';

        $detail = $this->db->query("SELECT EIdNo, ECode, Ename2, DATE_FORMAT(EDOJ,'{$convertFormat}') AS EDOJ2, segmentStr, designationStr,
                                    DATE_FORMAT(dischargedDate,'{$convertFormat}') AS dischargedDate2, EDOJ, dischargedDate, isDischarged
                                    FROM srp_employeesdetails AS empTB                                    
                                    LEFT JOIN (
                                        SELECT segmentID, description AS segmentStr FROM srp_erp_segment WHERE companyID={$companyID}
                                    ) AS segmentTB ON segmentTB.segmentID=empTB.segmentID
                                    LEFT JOIN (
                                        SELECT DesignationID, DesDescription AS designationStr FROM srp_designation WHERE Erp_companyID={$companyID}
                                    ) AS designationTB ON designationTB.DesignationID=empTB.EmpDesignationId                                    
                                    WHERE Erp_companyID={$companyID} AND EIdNo IN ({$empIDList}) {$where} ORDER BY EDOJ ASC ")->result_array();

        $data['detail'] = $detail;
        $data['segmentList'] = $segmentList;
        $data['isForPrint'] = $isForPrint;
        $data['category'] = $category;
        $data['period'] = $period;

        if ($isForPrint == 'N') {
            echo json_encode(['s', $this->load->view('system/hrm/ajax/service-analysis-report-ajax', $data, true)]);
        } else {
            $html = $this->load->view('system/hrm/ajax/service-analysis-report-ajax', $data, true);
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', 1);
        }
    }

    function birthday_report()
    {
        $isForPrint = ($this->uri->segment(3) == 'Print') ? 'Y' : 'N';
        $this->form_validation->set_rules('segment[]', 'Segment', 'trim|required');
        $empID = $this->input->post('empID');

        if (empty($empID)) {
            $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required');
            $this->form_validation->set_rules('toDate', 'To Date', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $segment = $this->input->post('segment');
        $convertFormat = convert_date_format_sql();
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');

        $period = '';

        $segmentList = implode(',', $segment);

        if (!empty($empID)) {
            $empList = implode(',', $empID);
            $currentYear = date('Y');

            $detail = $this->db->query("SELECT EIdNo, ECode, Ename2, DATE_FORMAT(EDOB,'{$convertFormat}') AS dob, segmentStr, designationStr
                                FROM (
                                    SELECT EIdNo, ECode, Ename2, segmentID, EmpDesignationId, EDOB, DATE_FORMAT(EDOB, '{$currentYear}-%m-%d')  AS dateOfBirth
                                    FROM srp_employeesdetails WHERE Erp_companyID={$companyID} AND EDOB IS NOT NULL AND isDischarged = 0  
                                    AND segmentID IN ({$segmentList}) AND EIdNo IN ({$empList})
                                ) AS empTB   
                                LEFT JOIN (
                                    SELECT segmentID, description AS segmentStr FROM srp_erp_segment WHERE companyID={$companyID}
                                ) AS segmentTB ON segmentTB.segmentID=empTB.segmentID
                                LEFT JOIN (
                                    SELECT DesignationID, DesDescription AS designationStr FROM srp_designation WHERE Erp_companyID={$companyID}
                                ) AS designationTB ON designationTB.DesignationID=empTB.EmpDesignationId                                   
                                ORDER BY dateOfBirth ASC ")->result_array();
        } else {
            $period = "From {$fromDate} To {$toDate}";
            $date_format_policy = date_format_policy();
            $fromDate = input_format_date($fromDate, $date_format_policy);
            $toDate = input_format_date($toDate, $date_format_policy);

            if ($fromDate > $toDate) {
                die(json_encode(['e', 'To date should be greater than from date']));
            }

            $currentMonth = date('m', strtotime($fromDate));
            $currentYear = date('Y', strtotime($fromDate));
            $nextYear = $currentYear + 1;

            $detail = $this->db->query("SELECT EIdNo, ECode, Ename2, DATE_FORMAT(EDOB,'{$convertFormat}') AS dob, segmentStr, designationStr                                       
                                    FROM (
                                        SELECT EIdNo, ECode, Ename2, segmentID, EmpDesignationId, EDOB,
                                        IF(                                           
                                           (DATE_FORMAT(EDOB, '%m') < {$currentMonth}), DATE_FORMAT(EDOB, '{$nextYear}-%m-%d'), DATE_FORMAT(EDOB, '{$currentYear}-%m-%d')
                                        ) AS dateOfBirth
                                        FROM srp_employeesdetails WHERE Erp_companyID={$companyID} AND EDOB IS NOT NULL AND isDischarged = 0 AND segmentID IN ({$segmentList})
                                    ) AS empTB                                    
                                    LEFT JOIN (
                                        SELECT segmentID, description AS segmentStr FROM srp_erp_segment WHERE companyID={$companyID}
                                    ) AS segmentTB ON segmentTB.segmentID=empTB.segmentID
                                    LEFT JOIN (
                                        SELECT DesignationID, DesDescription AS designationStr FROM srp_designation WHERE Erp_companyID={$companyID}
                                    ) AS designationTB ON designationTB.DesignationID=empTB.EmpDesignationId                                    
                                    WHERE dateOfBirth BETWEEN '{$fromDate}' AND '{$toDate}'
                                    ORDER BY dateOfBirth ASC ")->result_array();
        }

        $segmentArr = $this->db->query("SELECT segmentID, description FROM srp_erp_segment 
                        WHERE companyID={$companyID} AND segmentID IN ({$segmentList})")->result_array();

        $segmentList = (!empty($segmentArr)) ? implode('<b>,</b> ', array_column($segmentArr, 'description')) : '';

        $data['detail'] = $detail;
        $data['isForPrint'] = $isForPrint;
        $data['period'] = $period;
        $data['segmentList'] = $segmentList;

        if ($isForPrint == 'N') {
            echo json_encode(['s', $this->load->view('system/hrm/ajax/birthday-report-ajax', $data, true)]);
        } else {
            $html = $this->load->view('system/hrm/ajax/birthday-report-ajax', $data, true);
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', 1);
        }
    }

    function contract_renewal_report()
    {
        $isForPrint = ($this->uri->segment(3) == 'Print') ? 'Y' : 'N';
        $this->form_validation->set_rules('segment[]', 'Segment', 'trim|required');
        $empID = $this->input->post('empID');

        if (empty($empID)) {
            $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required');
            $this->form_validation->set_rules('toDate', 'To Date', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        if ($this->input->post('returnType') != 0) {
            die(json_encode(['s', '']));
        }

        $companyID = current_companyID();
        $segment = $this->input->post('segment');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');

        $segmentList = implode(',', $segment);

        $detail = $this->Employee_model->contract_renewal_report();

        $period = (empty($empID)) ? "From {$fromDate} To {$toDate}" : '';

        $segmentArr = $this->db->query("SELECT segmentID, description FROM srp_erp_segment 
                        WHERE companyID={$companyID} AND segmentID IN ({$segmentList})")->result_array();

        $segmentList = (!empty($segmentArr)) ? implode('<b>,</b> ', array_column($segmentArr, 'description')) : '';

        $data['detail'] = $detail;
        $data['isForPrint'] = $isForPrint;
        $data['period'] = $period;
        $data['segmentList'] = $segmentList;

        if ($isForPrint == 'N') {
            echo json_encode(['s', $this->load->view('system/hrm/ajax/contract-renewal-report-ajax', $data, true)]);
        } else {
            $html = $this->load->view('system/hrm/ajax/contract-renewal-report-ajax', $data, true);
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', 1);
        }
    }

    function contract_renewal_report_excel()
    {
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('employee_master', $primaryLanguage);
        $this->lang->load('hrms_reports', $primaryLanguage);
        $segment = $this->input->post('segment');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');

        $detail = $this->Employee_model->contract_renewal_report();

        $period = (empty($empID)) ? "From {$fromDate} To {$toDate}" : '';

        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Contract Expiry Report');

        $ex_data = [];
        $fileName = 'Contract-Renewal-Report - ' . $period . '.xlsx';

        $ex_data[0] = [$this->common_data['company_data']['company_name']];
        $ex_data[1] = [$this->lang->line('hrms_contract_expiry_report')];
        $ex_data[2] = [$period];

        $ex_data[3] = [
            '#',
            $this->lang->line('common_emp_no'),
            $this->lang->line('common_employee_name'),
            $this->lang->line('common_designation'),
            $this->lang->line('common_segment'),
            $this->lang->line('common_contract_type'),
            $this->lang->line('emp_contract_ref_no'),
            $this->lang->line('emp_contract_start_date'),
            $this->lang->line('emp_contract_end_date'),
        ];

        $r = 1;
        foreach ($detail as $row) {
            $ex_data[] = [
                $r, $row['ECode'], $row['Ename2'], $row['designationStr'], $row['segmentStr'],
                $row['Description'], $row['contractRefNo'], $row['cStart'], $row['cEnd']
            ];
            $r++;
        }

        $this->excel->getActiveSheet()->fromArray($ex_data, null, 'A1');
        $this->excel->getActiveSheet()->getStyle('A1:I3')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1:I3')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->mergeCells('A1:I1');
        $this->excel->getActiveSheet()->mergeCells('A2:I2');
        $this->excel->getActiveSheet()->mergeCells('A3:I3');
        $this->excel->getActiveSheet()->getStyle('A4:I4')->getFill()->setFillType(Fill::FILL_SOLID)->getStartColor()->setRGB('cee2f3');

        $fileName = 'Contract-Renewal-Report.xls';
        header('Content-Type: application/vnd.ms-excel;charset=utf-16');
        header('Content-Disposition: attachment;filename="' . $fileName . '"');
        header('Cache-Control: max-age=0');

        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function variable_pay_declaration_master_data_table()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();


        $this->datatables->select("vpMasterID,description,documentCode,confirmedYN,approvedYN,masTB.createdUserID AS createdUserID,
        documentDate, curTB.CurrencyCode AS trCurrency,documentID");
        $this->datatables->from('srp_erp_variablepaydeclarationmaster masTB');
        $this->datatables->join('srp_erp_currencymaster curTB', 'masTB.trCurrencyID = curTB.currencyID');
        $this->datatables->where('companyID', $companyID);
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"VD",vpMasterID)');
        $this->datatables->add_column('edit', '$1', 'common_td_action(vpMasterID, confirmedYN, approvedYN, createdUserID, documentCode)');
        $this->datatables->edit_column('documentDate', '<span >$1 </span>', 'convert_date_format(documentDate)');

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT decID FROM srp_erp_payrollgroupincharge AS inCharge
                                      JOIN (
                                            SELECT declarationMasterID AS decID, accessGroupID
                                            FROM srp_erp_salarydeclarationdetails
                                            WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                            GROUP BY declarationMasterID, accessGroupID
                                      ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                      WHERE companyID={$companyID} AND empID={$currentEmp}
                                      GROUP BY decID
                                      UNION
                                          SELECT vpMasterID
                                          FROM srp_erp_salarydeclarationmaster AS t1
                                          LEFT JOIN srp_erp_salarydeclarationdetails AS t2
                                          ON t2.declarationMasterID=t1.vpMasterID
                                          WHERE t1.companyID={$companyID} AND declarationMasterID IS NULL
                                          GROUP BY t1.vpMasterID
                                      ) AS accTB", 'masTB.vpMasterID = accTB.decID');

        }
        echo $this->datatables->generate();
    }

    function save_variable_pay_declaration_master()
    {
        $this->form_validation->set_rules('documentDate', 'Document date', 'trim|required|date');
        $this->form_validation->set_rules('currencyID', 'Currency', 'trim|required');
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $this->load->library('sequence');
        $date_format_policy = date_format_policy();
        $documentDate = $this->input->post('documentDate');
        $currencyID = $this->input->post('currencyID');
        $documentDate = input_format_date($documentDate, $date_format_policy);
        $companyID = current_companyID();

        $serialNo = $this->db->query("SELECT serialNo FROM srp_erp_variablepaydeclarationmaster WHERE companyID={$companyID}
                                     ORDER BY vpMasterID DESC LIMIT 1")->row('serialNo');
        $serialNo += 1;


        $data['documentID'] = 'VD';
        $data['documentCode'] = $this->sequence->sequence_generator('VD', $serialNo);
        $data['documentDate'] = $documentDate;
        $data['description'] = trim($this->input->post('description') ?? '');
        $data['isInitialDeclaration'] = $this->input->post('isInitialDeclaration');
        $data['trCurrencyID'] = $currencyID;
        $data['trCurrencyDPlaces'] = fetch_currency_desimal_by_id($currencyID);
        $data['serialNo'] = $serialNo;
        $data['companyID'] = current_companyID();
        $data['createdUserGroup'] = current_user_group();
        $data['createdPCID'] = current_pc();
        $data['createdUserID'] = current_userID();
        $data['createdDateTime'] = current_date();


        $this->db->insert('srp_erp_variablepaydeclarationmaster', $data);
        if ($this->db->affected_rows() === FALSE) {
            echo json_encode(['Variable Pay master saving process failed']);
        } else {
            $id = $this->db->insert_id();
            echo json_encode(['s', 'Variable Pay master Saved successfully.', 'id' => $id]);
        }
    }

    function load_variable_pay_declaration_master()
    {
        $masterID = $this->input->post('id');
        $masterData = $this->Employee_model->variable_pay_declaration_master($masterID);

        if (empty($masterData)) {
            die('<div class="alert alert-warning"> Master details not found </div>');
        }

        $str = '';
        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $totalEntries = $this->db->query("SELECT COUNT(declarationDetailID) AS totalEntries FROM srp_erp_salarydeclarationdetails detTB
                                    JOIN srp_erp_pay_salarycategories catTB ON catTB.salaryCategoryID=detTB.salaryCategoryID
                                    WHERE declarationMasterID = {$masterID} ORDER BY employeeNo")->row('totalEntries');

            $data['totalEntries'] = $totalEntries;
            $companyID = current_companyID();
            $currentEmp = current_userID();
            $str = "JOIN (
                        SELECT groupID FROM srp_erp_payrollgroupincharge
                        WHERE companyID={$companyID} AND empID={$currentEmp}
                    ) AS accTb ON accTb.groupID = decDet.accessGroupID";
        }

        $detailRecords = $this->db->query("SELECT detailID, masterID, empID, decDet.salaryCategoryID, amount,
                                catTB.salaryDescription AS description, decDet.salaryCategoryType, effectiveDate,  
                                ECode, Ename2, currentAmount, narration
                                FROM srp_erp_variablepaydeclarationdetails AS decDet
                                JOIN srp_employeesdetails ed ON ed.EIdNo = decDet.empID  
                                JOIN srp_erp_pay_salarycategories catTB ON decDet.salaryCategoryID=catTB.salaryCategoryID
                                {$str}
                                WHERE masterID = {$masterID} ORDER BY empID, catTB.salaryDescription")->result_array();

        $data['masterData'] = $masterData;
        $data['detailRecords'] = $detailRecords;
        $data['isGroupAccess'] = $isGroupAccess;

        echo $this->load->view('system/hrm/ajax/variable_pay_declaration_insertion_details', $data, true);
    }

    function save_variable_pay_declaration_employee()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required|numeric');
        $this->form_validation->set_rules('category[]', 'Salary Category', 'trim|required|numeric');
        $this->form_validation->set_rules('temp_empHiddenID[]', 'Employee', 'trim|required|numeric');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $empList = $empArr = $this->input->post('temp_empHiddenID');
        $categoryList = $catArr = $this->input->post('category');
        $effectiveDate = $this->input->post('bulk_effectiveDate');
        $amount = $this->input->post('bulk_amount');
        $narration = $this->input->post('bulk_narration');

        $empList = implode(',', $empList);
        $categoryList = implode(',', $categoryList);
        $date_format_policy = date_format_policy();
        $effectiveDate = input_format_date($effectiveDate, $date_format_policy);

        $masterData = $this->Employee_model->variable_pay_declaration_master($masterID);
        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $currencyID = $masterData['trCurrencyID'];

        $details = $this->db->query("SELECT EIdNo AS empID, ECode, Ename2, payCurrencyID, catID, amount,
                         gr.groupID, sal.salaryCategoryType, EDOJ
                        FROM srp_employeesdetails empTB 
                        LEFT JOIN (
                            SELECT empID, cat.salaryCategoryID catID, amount, cat.salaryCategoryType
                            FROM srp_erp_pay_salarycategories cat 
                            JOIN srp_erp_variablepaydeclarationdetails decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                            AND decl.salaryCategoryID IN ({$categoryList}) AND decl.isActive = 1
                            WHERE empID IN ({$empList})  
                        ) sal ON sal.empID = empTB.EIdNo
                        LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                        WHERE Erp_companyID = {$companyID} AND payCurrencyID = {$currencyID} AND isDischarged = 0 
                        AND EIdNo IN ({$empList})")->result_array();

        if (empty($details)) {
            die(json_encode(['e', 'Employee details not found']));
        }


        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();


        $trDPlace = $masterData['trCurrencyDPlaces'];
        $amount = (empty($amount)) ? 0 : round($amount, $trDPlace);

        $details = array_group_by($details, 'empID');
        $salaryCatTypes = $this->db->query("SELECT salaryCategoryID, salaryCategoryType FROM srp_erp_pay_salarycategories WHERE salaryCategoryID IN ($categoryList)")->result_array();
        $salaryCatTypes = array_group_by($salaryCatTypes, 'salaryCategoryID');

        $intData = [];
        $existing_str = '';
        $effectiveDateLessThanDOJ = '';
        foreach ($empArr as $empID) {
            $thisEmpDet = $details[$empID];
            $groupID = $thisEmpDet[0]['groupID'];
            $dateOfJoin = $thisEmpDet[0]['EDOJ'];
            $effectiveDate = ($masterData['isInitialDeclaration'] == 1) ? $dateOfJoin : $effectiveDate;

            $empName = $thisEmpDet[0]['ECode'] . ' - ' . $thisEmpDet[0]['Ename2'];


            if ($masterData['isInitialDeclaration'] != 1) { /*If salary declaration is not initial entry, checking the effective date and date of join*/
                if ($dateOfJoin > $effectiveDate) {
                    $effectiveDateLessThanDOJ .= "<br/> &nbsp; - $empName => " . date('d-m-Y', strtotime($dateOfJoin));
                }
            }

            $isExisting = $this->db->query("SELECT cat.salaryDescription FROM srp_erp_variablepaydeclarationdetails det
                            JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = det.salaryCategoryID
                            WHERE empID = {$empID} AND det.masterID = {$masterID}
                            AND det.salaryCategoryID IN ({$categoryList})")->result_array();

            if (!empty($isExisting)) {
                $isExisting = array_column($isExisting, 'salaryDescription');
                $isExisting = '<br/> &nbsp; - &nbsp; ' . implode('<br/> &nbsp; - &nbsp; ', $isExisting);
                $existing_str .= '<br/><b>' . $empName . '</b>' . $isExisting;
            }

            if (empty($existing_str) && empty($effectiveDateLessThanDOJ)) {
                foreach ($catArr as $catID) {
                    $currentData = array_column($thisEmpDet, 'catID');
                    $catKey = array_search($catID, $currentData);
                    $currAmount = ($catKey !== false) ? $thisEmpDet[$catKey]['amount'] : 0;
                    $catType = $salaryCatTypes[$catID][0]['salaryCategoryType'];


                    $intData[] = [
                        'masterID' => $masterID, 'empID' => $empID, 'accessGroupID' => $groupID,
                        'salaryCategoryType' => $catType, 'salaryCategoryID' => $catID, 'amount' => $amount,
                        'currentAmount' => $currAmount, 'effectiveDate' => $effectiveDate, 'narration' => $narration,

                        'companyID' => $companyID, 'createdPCID' => $createdPCID, 'createdUserID' => $createdUserID,
                        'createdUserGroup' => $createdUserGroup, 'createdDateTime' => $createdDateTime,
                        'timestamp' => $createdDateTime,
                    ];
                }
            }

        }

        if (!empty($effectiveDateLessThanDOJ)) {
            $msg = '<b>Effective date should be greater than employee date of join </b> ' . $effectiveDateLessThanDOJ;
            die(json_encode(['m', $msg]));
        }

        if (!empty($existing_str)) {
            $msg = 'Following salary categories already added for these employees' . $existing_str;
            die(json_encode(['m', $msg]));
        }

        $this->db->trans_start();

        $this->db->insert_batch('srp_erp_variablepaydeclarationdetails', $intData);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Emplyees` added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function variable_pay_declaration_inline_update()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('detID', 'Detail ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $detID = $this->input->post('detID');
        $empID = $this->input->post('empID');
        $column = $this->input->post('column');
        $updateVal = $this->input->post('updateVal');

        $masterData = $this->Employee_model->variable_pay_declaration_master($masterID);

        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $where = ['empID' => $empID, 'detailID' => $detID, 'masterID' => $masterID];
        $detailData = $this->db->get_where('srp_erp_variablepaydeclarationdetails', $where)->row_array();

        if (empty($detailData)) {
            die(json_encode(['e', 'Document detail is not found']));
        }

        $dateTime = current_date();


        if ($column == 'amount') {
            $dPlace = $masterData['trCurrencyDPlaces'];
            $updateVal = round($updateVal, $dPlace);
        } else if ($column == 'effectiveDate') {
            $date_format_policy = date_format_policy();
            $updateVal = input_format_date($updateVal, $date_format_policy);

            $empJoinDate = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $empID])->row('EDOJ');
            $oldVal = $detailData['effectiveDate'];
            if ($updateVal < $empJoinDate) {
                $disDate = convert_date_format($empJoinDate);
                $oldVal = convert_date_format($oldVal);
                die(json_encode(['e', 'Effective date should be greater than or equal to employee <br/>join date [ ' . $disDate . ' ]', 'oldVal' => $oldVal]));
            }
        } else if ($column == 'narration') {
            $updateVal = trim($updateVal);
        } else {
            die(json_encode(['e', 'Update column not valid.<p>Please contact system support']));
        }

        $updateData = [
            $column => $updateVal, 'modifiedPCID' => current_pc(), 'modifiedUserID' => current_userID(),
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where($where)->update('srp_erp_variablepaydeclarationdetails', $updateData);


        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }

    }

    function confirm_variablePay()
    {
        $masterID = trim($this->input->post('masterID') ?? '');

        $document_status = document_status('VD', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }
        $detailRecords = $this->db->get_where('srp_erp_variablepaydeclarationdetails', ['masterID' => $masterID])->row_array();
        if (empty($detailRecords)) {
            die(json_encode(['e', 'Details record not added.']));
        }

        $documentCode = $document_status['data']['docCode'];
        $table = 'srp_erp_variablepaydeclarationmaster';
        $primaryColumn = 'vpMasterID';
        $documentName = 'Variable Pay Declaration';
        $documentDate = $document_status['data']['createdDate'];

        $validate_code = validate_code_duplication($documentCode, 'documentCode', $masterID, $primaryColumn, $table);
        if(!empty($validate_code)) {
            die(json_encode(['e', 'The document Code Already Exist.(' . $validate_code . ')']));
        }
        $this->load->library('approvals');
        $isAutoApproval = get_document_auto_approval('VD');
        if ($isAutoApproval == 0) { // If auto approval
            $this->db->trans_start();
            $this->approvals->auto_approve($masterID, $table, $primaryColumn, 'VD', $documentCode, $documentDate);
            $this->variable_pay_status_change($masterID);
            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                die(json_encode(['s', 'Approved successfully']));
            } else {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Error in approval process']));
            }
        }

        $approvals_status = $this->approvals->CreateApproval('VD', $masterID, $documentCode, $documentName, $table, $primaryColumn, 0, $documentDate);
        if ($approvals_status == 1) {
            echo json_encode(['s', 'Approvals created successfully']);
        } else if ($approvals_status == 3) {
            echo json_encode(['w', 'There are no users exist to perform \'Variable Pay Declaration\' approval for this company.']);
        } else {
            echo json_encode(['e', 'Error in process']);
        }
    }

    function refer_back_variable_pay_declaration_master()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('VD', $masterID, 1);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $this->load->library('approvals');
        $status = $this->approvals->approve_delete($masterID, 'VD');
        if ($status == 1) {
            echo json_encode(array('s', $document_status['data']['docCode'] . ' Referred Back Successfully.'));
        } else {
            echo json_encode(array('e', $document_status['data']['docCode'] . ' Error in refer back.'));
        }
    }

    function delete_variable_pay_declaration_single_row()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('VD', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $detailID = $this->input->post('detailID');

        $this->db->delete('srp_erp_variablepaydeclarationdetails', ['detailID' => $detailID, 'masterID' => $masterID, 'companyID' => current_companyID()]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully deleted.']);
        }
    }

    function delete_variable_pay_declaration_single_employee()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('VD', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $empID = trim($this->input->post('empID') ?? '');
        $companyID = current_companyID();

        $this->db->trans_start();

        $this->db->delete('srp_erp_variablepaydeclarationdetails', ['empID' => $empID, 'masterID' => $masterID, 'companyID' => $companyID]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully deleted.']);
        }
    }

    function delete_variable_pay_declaration_all_details()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('VD', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $this->db->trans_start();

        $this->db->delete('srp_erp_variablepaydeclarationdetails', ['masterID' => $masterID, 'companyID' => current_companyID()]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully deleted.']);
        }
    }

    function delete_variable_pay_declaration_master()
    {
        $masterID = $this->input->post('masterID');

        $document_status = document_status('VD', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $this->db->trans_start();

        $this->db->delete('srp_erp_variablepaydeclarationdetails', ['masterID' => $masterID, 'companyID' => current_companyID()]);
        $this->db->delete('srp_erp_variablepaydeclarationmaster', ['vpMasterID' => $masterID, 'companyID' => current_companyID()]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        } else {
            $this->db->trans_commit();
            echo json_encode(['s', 'Successfully deleted.']);
        }
    }

    function variable_pay_approval_confirmation_view()
    {
        $data['imgPath'] = ($this->uri->segment(3)) ? mPDFImage : htmlImage;
        $masterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('masterID') ?? '');
        $masterData = $this->Employee_model->variable_pay_declaration_master($masterID);

        if (empty($masterData)) {
            die('<div class="alert alert-warning"> Master details not found </div>');
        }

        $str = '';
        $isGroupAccess = getPolicyValues('PAC', 'All');
        if ($isGroupAccess == 1) {
            $totalEntries = $this->db->query("SELECT COUNT(declarationDetailID) AS totalEntries FROM srp_erp_salarydeclarationdetails detTB
                                JOIN srp_erp_pay_salarycategories catTB ON catTB.salaryCategoryID=detTB.salaryCategoryID
                                WHERE declarationMasterID = {$masterID} ORDER BY employeeNo")->row('totalEntries');

            $data['totalEntries'] = $totalEntries;
            $companyID = current_companyID();
            $currentEmp = current_userID();
            $str = "JOIN (
                    SELECT groupID FROM srp_erp_payrollgroupincharge
                    WHERE companyID={$companyID} AND empID={$currentEmp}
                ) AS accTb ON accTb.groupID = decDet.accessGroupID";
        }

        $detailRecords = $this->db->query("SELECT detailID, masterID, empID, decDet.salaryCategoryID, amount,
                            catTB.salaryDescription AS description, decDet.salaryCategoryType, effectiveDate,  
                            ECode, Ename2, currentAmount, narration, decDet.isActive
                            FROM srp_erp_variablepaydeclarationdetails AS decDet
                            JOIN srp_employeesdetails ed ON ed.EIdNo = decDet.empID  
                            JOIN srp_erp_pay_salarycategories catTB ON decDet.salaryCategoryID=catTB.salaryCategoryID
                            {$str}
                            WHERE masterID = {$masterID} ORDER BY empID, catTB.salaryDescription")->result_array();

        $data['masterData'] = $masterData;
        $data['detailRecords'] = $detailRecords;
        $data['isGroupAccess'] = $isGroupAccess;
        $data['isPrint'] = (!empty($this->uri->segment(3))) ? 'Y' : 'N';

        $html = $this->load->view('system/hrm/print/variable_pay_declaration_print', $data, true);

        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', $data['masterData']['approvedYN']);
        }
    }

    function fetch_variable_pay_approval()
    {
        /*
        * rejected = 1
        * not rejected = 0
        * */
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $currentuser = current_userID();
        if ($approvedYN == 0) {
            $this->datatables->select('vpMasterID, description,crMas.CurrencyCode AS trCurr,confirmedYN, appTB.approvedYN AS approvedYN, documentApprovedID,
            approvalLevelID,DATE_FORMAT(decMas.documentDate,\'' . $convertFormat . '\') AS documentDate, decMas.documentCode AS docCode', false);
            $this->datatables->from('srp_erp_variablepaydeclarationmaster AS decMas');
            $this->datatables->join('srp_erp_documentapproved AS appTB', 'appTB.documentSystemCode = decMas.vpMasterID AND appTB.approvalLevelID = decMas.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = decMas.currentLevelNo');
            $this->datatables->join("srp_erp_currencymaster crMas", "decMas.trCurrencyID=crMas.currencyID");
            $this->datatables->where('appTB.documentID', 'VD');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'VD');
            $this->datatables->where('srp_erp_approvalusers.employeeID', current_userID());
            $this->datatables->where('decMas.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('appTB.approvedYN', $approvedYN);
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD",vpMasterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "VD", vpMasterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("VD", vpMasterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('vpMasterID, description,crMas.CurrencyCode AS trCurr,confirmedYN, appTB.approvedYN AS approvedYN, documentApprovedID,
            approvalLevelID,DATE_FORMAT(decMas.documentDate,\'' . $convertFormat . '\') AS documentDate, decMas.documentCode AS docCode', false);
            $this->datatables->from('srp_erp_variablepaydeclarationmaster AS decMas');
            $this->datatables->join('srp_erp_documentapproved AS appTB', 'appTB.documentSystemCode = decMas.vpMasterID');
            $this->datatables->join("srp_erp_currencymaster crMas", "decMas.trCurrencyID=crMas.currencyID");
            $this->datatables->where('appTB.documentID', 'VD');
            $this->datatables->where('decMas.companyID', $companyID);
            $this->datatables->where('appTB.approvedEmpID', $currentuser);
            $this->datatables->group_by('decMas.vpMasterID');
            $this->datatables->group_by('appTB.approvalLevelID');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('docCode', '$1', 'common_approval_action("VD",vpMasterID, approvalLevelID, approvedYN, documentApprovedID, \'code\', docCode)');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN, "VD", vpMasterID)');
            $this->datatables->add_column('edit', '$1', 'common_approval_action("VD", vpMasterID, approvalLevelID, approvedYN, documentApprovedID, \'edit\')');
            echo $this->datatables->generate();
        }


    }

    function approval_variable_pay_declaration()
    {
        $this->form_validation->set_rules('approval_status', 'Variable Pay Declaration Status', 'trim|required');
        if ($this->input->post('approval_status') == 2) {
            $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
        }
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $this->db->trans_start();
        $this->load->library('approvals');
        $masterID = trim($this->input->post('masterID') ?? '');
        $level_id = trim($this->input->post('Level') ?? '');
        $status = trim($this->input->post('approval_status') ?? '');
        $comments = trim($this->input->post('comments') ?? '');

        $document_status = document_status('VD', $masterID, 1);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $docCode = $document_status['data']['docCode'];

        $approvals_status = $this->approvals->approve_document($masterID, $level_id, $status, $comments, 'VD');

        if ($approvals_status == 1) {
            $this->variable_pay_status_change($masterID);

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Error In Variable Pay Declaration Approval Process.']));
            } else {
                $this->db->trans_commit();
                die(json_encode(['s', 'Variable Pay Declaration Approved Successfully.']));
            }
        } else if ($approvals_status == 2) {
            die(json_encode(['s', 'Variable Pay Declaration Approval : Level ' . $level_id . ' Successfully.']));
        } else if ($approvals_status == 3) {
            die(json_encode(['s', '[ ' . $docCode . ' ] Approvals  Reject Process Successfully done.']));
        } else if ($approvals_status == 5) {
            die(json_encode(['w', '[ ' . $docCode . ' ] Previous Level Approval Not Finished.']));
        } else {
            die(json_encode(['e', 'Error in approvals Of  [ ' . $docCode . ' ] ', $approvals_status]));
        }
    }

    function variable_pay_status_change($masterID)
    {
        $this->db->query("UPDATE srp_erp_variablepaydeclarationdetails AS varDet
                JOIN (
                    SELECT detailID FROM srp_erp_variablepaydeclarationdetails t2
                    JOIN (
                        SELECT empID, salaryCategoryID FROM srp_erp_variablepaydeclarationdetails WHERE masterID = {$masterID}
                    ) AS t1 ON t1.empID = t2.empID AND t1.salaryCategoryID = t2.salaryCategoryID
                    WHERE masterID <> {$masterID} AND isActive = 1
                ) AS detTB ON varDet.detailID = detTB.detailID
                SET isActive = 0 ");

        $this->db->where(['masterID' => $masterID])->update('srp_erp_variablepaydeclarationdetails', ['isActive' => 1]);
    }

    function fetch_empVariablePayDeclaration()
    {
        $empID = trim($this->input->post('empID') ?? '');
        $catID = trim($this->input->post('catID') ?? '');

        $convertFormat = convert_date_format_sql();
        $this->datatables->select('detTB.masterID AS id, masTB.documentCode AS documentSystemCode, narration,
                catTB.salaryDescription AS salDec, DATE_FORMAT(effectiveDate,\'' . $convertFormat . '\') AS effectiveDate, 
                FORMAT(amount,trCurrencyDPlaces) AS amountTr ', false)
            ->from('srp_erp_variablepaydeclarationdetails detTB')
            ->join('srp_erp_pay_salarycategories AS catTB', 'catTB.salaryCategoryID = detTB.salaryCategoryID')
            ->join('srp_erp_variablepaydeclarationmaster AS masTB', 'masTB.vpMasterID = detTB.masterID')
            ->add_column('amountTrAlign', '<div align="right"> $1</div>', 'amountTr')
            ->add_column('effectiveDateStr', '<div align="center"> $1</div>', 'effectiveDate')
            ->where('empID', $empID)->where('catTB.salaryCategoryID', $catID)->where('isActive', 0)
            ->where('masTB.approvedYN', 1)->where('detTB.companyID', current_companyID());
        echo $this->datatables->generate();
    }

    function save_tr_frequency()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $description = trim($this->input->post('description') ?? '');

        $isExists = $this->db->get_where('srp_erp_travelfrequency', ['companyID' => $companyID, 'frequencyDescription' => $description])
            ->row('travelFrequencyID');
        if (!empty($isExists)) {
            die(json_encode(['e', 'This description is already exist']));
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $insert_data = [
            'frequencyDescription' => $description, 'companyID' => $companyID, 'createdPC' => $pc,
            'createdUserID' => $userID, 'createdDate' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_travelfrequency', $insert_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Travel frequency added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    public function fetch_tr_frequency()
    {
        $companyID = current_companyID();
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-pencil" onclick="edit_tr_frequency(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; |  &nbsp;&nbsp;';
        $details .= '<span class="glyphicon glyphicon-trash" onclick="delete_tr_frequency($1)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('travelFrequencyID, frequencyDescription', false)
            ->from('srp_erp_travelfrequency sch')
            ->where('sch.companyID', $companyID)
            ->add_column('action', $details, 'travelFrequencyID');
        echo $this->datatables->generate();
    }

    function edit_tr_frequency()
    {
        $this->form_validation->set_rules('autoID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['s', validation_errors()]));
        }

        $companyID = current_companyID();
        $autoID = $this->input->post('autoID');
        $description = trim($this->input->post('description') ?? '');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();


        $isExists = $this->db->query("SELECT * FROM srp_erp_travelfrequency WHERE companyID ={$companyID} 
                            AND frequencyDescription = '{$description}' AND travelFrequencyID <> {$autoID}")->row('travelFrequencyID');
        if (!empty($isExists)) {
            die(json_encode(['e', 'This description is already exist']));
        }

        $update_data = [
            'frequencyDescription' => $description, 'modifiedPC' => $pc, 'modifiedUserID' => $userID,
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where(['travelFrequencyID' => $autoID, 'companyID' => $companyID]);
        $this->db->update('srp_erp_travelfrequency', $update_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Travel frequency updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function delete_tr_frequency()
    {
        $this->form_validation->set_rules('id', 'Master ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $autoID = $this->input->post('id');

        $where = ['Erp_companyID' => $companyID, 'travelFrequencyID' => $autoID];
        $isExists = $this->db->get_where('srp_employeesdetails', $where)->row('travelFrequencyID');
        if (!empty($isExists)) {
            die(json_encode(['e', 'This travel frequency is in use']));
        }


        $this->db->trans_start();

        $this->db->where(['travelFrequencyID' => $autoID, 'companyID' => $companyID]);
        $this->db->delete('srp_erp_travelfrequency');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Travel frequency deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function load_salary_advance_request_view()
    {
        $company_id = current_companyID();
        $masterID = $this->input->post('masterID');
        $emp_id = current_userID();
        $masterData = [];

        if ($masterID > 0) {
            $convertFormat = convert_date_format_sql();
            $masterData = $this->db->query("SELECT empID, documentCode, DATE_FORMAT(request_date, '{$convertFormat}') AS docDate, narration,
                                    request_amount, FORMAT(request_amount, trDPlace) AS request_amount_str, confirmedYN, approvedYN
                                    FROM srp_erp_pay_salaryadvancerequest WHERE companyID={$company_id} AND masterID={$masterID}")->row_array();
            $emp_id = $masterData['empID'];
        }


        $convertFormat = convert_date_format_sql();

        $emp_data = $this->db->query("SELECT CONCAT(ECode, ' | ', Ename2) empNam, cur_mas.DecimalPlaces AS trDPlace, 
                              DATE_FORMAT(EDOJ, '{$convertFormat}') AS joinDate, CurrencyCode AS curr_code 
                              FROM srp_employeesdetails AS empTB
                              JOIN srp_erp_currencymaster AS cur_mas ON empTB.payCurrencyID = cur_mas.currencyID
                              WHERE EIdNo = {$emp_id}")->row_array();

        $payrollSal = $this->db->query("SELECT salaryDescription, SUM(amount) AS amount
                                FROM srp_erp_pay_salarydeclartion decl
                                JOIN srp_erp_pay_salarycategories cat ON cat.salaryCategoryID = decl.salaryCategoryID
                                WHERE employeeNo = '{$emp_id}' GROUP BY cat.salaryCategoryID")->result_array();


        if ($this->uri->segment(3) == 'view') {
            $data['emp_id'] = $emp_id;
            $data['emp_data'] = $emp_data;
            $data['masterData'] = $masterData;
            $data['payrollSal'] = $payrollSal;
            echo $this->load->view('system/hrm/ajax/salary-advance-request-view', $data, true);
        } else if ($this->uri->segment(3) == 'print') {
            $data['emp_id'] = $emp_id;
            $data['emp_data'] = $emp_data;
            $data['masterData'] = $masterData;
            $data['payrollSal'] = $payrollSal;
            $html = $this->load->view('system/hrm/print/salary-advance-request-print', $data, true);

            $this->load->library('pdf');
            $status = ($masterData['confirmedYN'] == 1) ? $masterData['approvedYN'] : 0;

            $this->pdf->printed($html, 'A4', $status, null);
        } else {
            $dPlaces = $emp_data['trDPlace'];

            $totPayroll = 0;
            $salary_str = '';
            if (!empty($payrollSal)) {
                foreach ($payrollSal as $rowAdd) {
                    $salary_str .= '<tr>
                                        <td>' . $rowAdd['salaryDescription'] . '</td>                                  
                                        <td align="right">' . number_format($rowAdd['amount'], $dPlaces) . '</td>
                                    </tr>';
                    $totPayroll += round($rowAdd['amount'], $dPlaces);
                }
                $totPayroll = number_format($totPayroll, $dPlaces);
            } else {
                $salary_str = '<tr><td align="center" colspan="2">' . $this->lang->line('common_no_records_found') . '</td></tr>';
            }
            echo json_encode(['s', 'emp_data' => $emp_data, 'masterData' => $masterData, 'salary_str' => $salary_str, 'totPayroll' => $totPayroll]);
        }

    }

    function fetch_salary_advanceMasters()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();
        $userID = current_userID();
        $this->datatables->select("masterID,documentCode,CurrencyCode trCurrency,confirmedYN,approvedYN, ECode, adv.confirmedByEmpID cnEmpID,
            Ename2, adv.request_date AS docDate,narration, adv.createdUserID AS createdUserID, 
            FORMAT(request_amount, 2) AS request_amount");
        $this->datatables->from('srp_erp_pay_salaryadvancerequest adv');
        $this->datatables->join('srp_employeesdetails empTB', 'empTB.EIdNo=adv.empID');
        $this->datatables->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID=adv.trCurrencyID');
        $this->datatables->where('companyID', $companyID);
        $this->datatables->where('empID', $userID);
        $this->datatables->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount');
        $this->datatables->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2');
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"SAR",masterID)');
        $this->datatables->add_column('edit', '$1', 'salary_advance_action(masterID, confirmedYN, approvedYN, createdUserID, cnEmpID, documentCode)');
        $this->datatables->edit_column('docDate', '<span >$1 </span>', 'convert_date_format(docDate)');

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            $this->datatables->join("(SELECT decID FROM srp_erp_payrollgroupincharge AS inCharge
                                      JOIN (
                                            SELECT declarationMasterID AS decID, accessGroupID
                                            FROM srp_erp_salarydeclarationdetails
                                            WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                            GROUP BY declarationMasterID, accessGroupID
                                      ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                      WHERE companyID={$companyID} AND empID={$currentEmp}
                                      GROUP BY decID
                                      UNION
                                          SELECT masterID
                                          FROM srp_erp_pay_finalsettlementmaster AS t1
                                          LEFT JOIN srp_erp_salarydeclarationdetails AS t2
                                          ON t2.declarationMasterID=t1.masterID
                                          WHERE t1.companyID={$companyID} AND declarationMasterID IS NULL
                                          GROUP BY t1.masterID
                                      ) AS accTB", 'adv.masterID = accTB.decID');

        }
        echo $this->datatables->generate();
    }

    function save_salary_advance_request()
    {
        $this->form_validation->set_rules('emp_id', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('doc_date', 'Date', 'trim|required');
        $this->form_validation->set_rules('request_amount', 'Request amount', 'trim|required');
        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $emp_id = $this->input->post('emp_id');
        $doc_date = $this->input->post('doc_date');
        $request_amount = $this->input->post('request_amount');
        $narration = trim($this->input->post('narration') ?? '');
        $isConfirmed = $this->input->post('isConfirmed');
        $doc_date = input_format_date($doc_date, date_format_policy());
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $user_group = current_user_group();

        $emp_data = $this->db->query("SELECT cur_mas.currencyID, cur_mas.DecimalPlaces AS trDPlace                            
                              FROM srp_employeesdetails AS empTB
                              JOIN srp_erp_currencymaster AS cur_mas ON empTB.payCurrencyID = cur_mas.currencyID
                              WHERE EIdNo = {$emp_id}")->row_array();

        $tr_curr = $emp_data['currencyID'];
        $tr_dPlace = $emp_data['trDPlace'];
        $loc_cur = $this->common_data['company_data']['company_default_currencyID'];
        $rpt_cur = $this->common_data['company_data']['company_reporting_currencyID'];
        $localCon = currency_conversionID($tr_curr, $loc_cur, 0);
        $reportCon = currency_conversionID($tr_curr, $rpt_cur, 0);
        $serialNo = $this->db->query("SELECT serialNo FROM srp_erp_pay_salaryadvancerequest WHERE companyID = {$companyID} ORDER BY masterID DESC LIMIT 1")->row('serialNo');
        $serialNo += 1;

        //Generate template Code
        $this->load->library('sequence');
        $documentCode = $this->sequence->sequence_generator('SAR', $serialNo);

        $request_amount = round($request_amount, $tr_dPlace);


        $update_data = [
            'documentCode' => $documentCode, 'empID' => $emp_id, 'request_date' => $doc_date, 'request_amount' => $request_amount,
            'narration' => $narration, 'documentID' => 'SAR', 'serialNo' => $serialNo, 'trCurrencyID' => $tr_curr, 'trDPlace' => $tr_dPlace,
            'localCurrencyID' => $loc_cur, 'localCurrencyER' => $localCon['conversion'], 'localDPlace' => $localCon['DecimalPlaces'],
            'rptCurrencyID' => $rpt_cur, 'rptCurrencyER' => $reportCon['conversion'], 'rptDPlace' => $reportCon['DecimalPlaces'],
            'companyID' => $companyID, 'createdUserGroup' => $user_group, 'createdPCID' => $pc, 'createdUserID' => $userID,
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_begin();

        $this->db->insert('srp_erp_pay_salaryadvancerequest', $update_data);
        $masterID = $this->db->insert_id();


        if ($isConfirmed == 1) {
            $document_status = document_status('SAR', $masterID);
            $response = $this->confirm_salary_advance_request($masterID, $document_status);
            die(json_encode($response));
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Salary Advance Request successfully added. [ ' . $documentCode . ' ]']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function update_salary_advance_request()
    {
        $this->form_validation->set_rules('masterID', 'master ID', 'trim|required');
        $this->form_validation->set_rules('doc_date', 'Date', 'trim|required');
        $this->form_validation->set_rules('request_amount', 'Request amount', 'trim|required');
        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $document_status = document_status('SAR', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $emp_id = $this->input->post('emp_id');
        $doc_date = $this->input->post('doc_date');
        $doc_date = input_format_date($doc_date, date_format_policy());
        $request_amount = $this->input->post('request_amount');
        $isConfirmed = $this->input->post('isConfirmed');
        $narration = trim($this->input->post('narration') ?? '');
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();


        $update_data = [
            'request_date' => $doc_date, 'request_amount' => $request_amount, 'narration' => $narration,
            'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];


        $this->db->trans_begin();

        $this->db->where(['masterID' => $masterID, 'companyID' => $companyID, 'empID' => $emp_id])->update('srp_erp_pay_salaryadvancerequest', $update_data);

        if ($isConfirmed == 1) {
            $response = $this->confirm_salary_advance_request($masterID, $document_status);
            die(json_encode($response));
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() === true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Salary Advance Request updated successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function confirm_salary_advance_request($masterID, $document_status)
    {
        $documentName = 'Salary Advance Request Approval';
        $tableName = 'srp_erp_pay_salaryadvancerequest';
        $documentCode = $document_status['data']['docCode'];
        $createdDate = $document_status['data']['createdDate'];

        $validate_code = validate_code_duplication($documentCode, 'documentCode', $masterID,'masterID', 'srp_erp_pay_salaryadvancerequest');
        if(!empty($validate_code)) {
            return ['e', 'The document Code Already Exist.(' . $validate_code . ')'];
        }

        $this->load->library('approvals');
        $isAutoApproval = get_document_auto_approval('SAR');
        if ($isAutoApproval == 0) { // If auto approval

            $this->approvals->auto_approve($masterID, $tableName, 'masterID', 'SAR', $documentCode, $createdDate);

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                return ['s', 'Approved successfully'];
            } else {
                $this->db->trans_rollback();
                return ['e', 'Error in approval process'];
            }
        }

        $approvals_status = $this->approvals->CreateApproval('SAR', $masterID, $documentCode, $documentName, $tableName, 'masterID', 0, $createdDate);

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            return ['e', 'Something went wrong!, In approval create process'];
        }

        if ($approvals_status == 3) {
            $this->db->trans_rollback();
            return ['w', 'There is no user exists to perform <b>Salary Advance Request approval</b> for this company.'];
        } elseif ($approvals_status == 1) {

            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                return ['e', 'Something went wrong!, In approval create process'];
            }
            $this->db->trans_commit();
            return ['s', 'Approval created : ' . $documentCode];
        } else {
            $this->db->trans_rollback();
            return ['w', 'some thing went wrong', $approvals_status];
        }
    }

    function referBack_salary_advance_request()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('SAR', $masterID, 1);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $documentCode = $document_status['data']['docCode'];
        $is_approved = $document_status['data']['approvalVal'];

        if ($is_approved == 1) {
            echo json_encode(['e', 'This document is already approved.<p>You can not refer back this.']);
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($masterID, 'SAR');
            if ($status == 1) {
                echo json_encode(array('s', $documentCode . ' Referred back successfully.'));
            } else {
                echo json_encode(array('e', $documentCode . ' Error in refer back.'));
            }
        }
    }

    function delete_salary_advance_request()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('SAR', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $companyID = current_companyID();
        $this->db->trans_start();

        $this->db->where(['masterID' => $masterID, 'companyID' => $companyID])->delete('srp_erp_pay_salaryadvancerequest');

        $this->db->trans_complete();
        if ($this->db->trans_status() === true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Salary Advance Request deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in delete process.']);
        }
    }

    function fetch_salary_advanceMasters_on_approval()
    {
        $companyID = current_companyID();

        $userID = current_userID();
        $status = trim($this->input->post('approvedYN') ?? '');
        if ($status == 0) {
            $where = [
                'approve.documentID' => 'SAR',
                'ap.documentID' => 'SAR',
                'approve.approvedYN' => $status
            ];


            $this->datatables->select('masterID, adv.documentCode AS documentCode, ECode, Ename2, narration, approve.approvedYN as approvedYN,
                    documentApprovedID, approvalLevelID, FORMAT(request_amount, 2) AS request_amount', true)
                ->from('srp_erp_pay_salaryadvancerequest AS adv')
                ->join('srp_employeesdetails empTB', 'empTB.EIdNo=adv.empID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = adv.masterID AND approve.approvalLevelID = adv.currentLevelNo')
                ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = adv.currentLevelNo')
                ->where($where)->where('adv.companyID', $companyID)->where('ap.companyID', $companyID)
                ->where("( ap.employeeID = '{$userID}'
                    OR (
                        ap.employeeID = -1
                        AND adv.empID IN (
                            SELECT emp_manager.empID FROM srp_employeesdetails AS emp_detail
                            JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                            AND emp_manager.active = 1 AND emp_manager.companyID = '{$companyID}' AND emp_manager.managerID = '{$userID}'
                       )
                    )
                    OR (
                        ap.employeeID = - 2 
                        AND adv.empID IN (
                    SELECT
                        emp_detail.EIdNo 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                        JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                        AND `emp_dep`.`isactive` = 1 
                        AND `emp_dep`.Erp_companyID = '{$companyID}' 
                        AND srp_dep.hod_id = '{$userID}' 
                        ) 
                    )
                    OR (
                        ap.employeeID = - 3 
                        AND adv.empID IN (
                    SELECT
                        emp_detail.Eidno 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                        JOIN ( SELECT * FROM srp_erp_employeemanagers ) AS top_manager ON top_manager.empID = emp_manager.managerID 
                    WHERE
                        emp_manager.active = 1 
                        AND `emp_manager`.`companyID` = '{$companyID}' 
                        AND top_manager.managerID = '{$userID}' 
                        ) 
                    )
                 )")
                ->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount')
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"SAR", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $where = [
                'approve.documentID' => 'SAR',
            ];

            $this->datatables->select('masterID, adv.documentCode AS documentCode, ECode, Ename2, narration, approve.approvedYN as approvedYN,
                    documentApprovedID, approvalLevelID, FORMAT(request_amount, 2) AS request_amount', true)
                ->from('srp_erp_pay_salaryadvancerequest AS adv')
                ->join('srp_employeesdetails empTB', 'empTB.EIdNo=adv.empID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = adv.masterID')
                ->where($where)
                ->where('adv.companyID', $companyID)
                ->where('approve.approvedEmpID', $userID)
                ->group_by('adv.masterID')
                ->group_by('approve.approvalLevelID')
                ->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount')
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"SAR", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        }
    }

    function salary_advance_approval()
    {
        $masterID = $this->input->post('masterID');
        $company_id = current_companyID();
        $masterDetail = $this->db->query("SELECT * FROM srp_erp_pay_salaryadvancerequest WHERE companyID = {$company_id} AND masterID = {$masterID}")->row_array();

        if (empty($masterDetail)) {
            die(json_encode(['e', 'This document is not found']));
        }

        if ($masterDetail['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved.<p>You can not approved this.']));
        }

        if ($masterDetail['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed.<p>You can not approved this.']));
        }

        $documentCode = $masterDetail['documentCode'];
        $level_id = $this->input->post('level');
        $status = $this->input->post('status');
        $comments = $this->input->post('comments');

        $this->load->library('approvals');

        $this->db->trans_begin();
        $approvals_status = $this->approvals->approve_document($masterID, $level_id, $status, $comments, 'SAR');

        if ($approvals_status == 2) {
            $this->db->trans_commit();
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';
            echo json_encode(['s', $msg, $approvals_status]);
        } else if ($approvals_status == 1) { /*Final level approved*/
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', $msg]);
            } else {
                $this->db->trans_rollback();
                $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
                echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
            }
        } else if ($approvals_status == 3) {
            $this->db->trans_commit();
            $msg = 'Approvals  Reject Process Successfully done'; //$this->lang->line('hrms_payroll_approvals_reject_process_successfully_done');
            echo json_encode(['s', '[ ' . $documentCode . ' ]' . $msg . ' .']);
        } else if ($approvals_status == 5) {
            $this->db->trans_rollback();
            $msg = 'Previous Level Approval Not Finished'; //$this->lang->line('hrms_payroll_previous_level_approval_not_finished');
            echo json_encode(['w', '[ ' . $documentCode . ' ] ' . $msg . '.']); /*Previous Level Approval Not Finished*/
        } else {
            $this->db->trans_rollback();
            $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
            echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
        }
    }

    function fetch_leave_encashment_masters()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();
        $filterType = $this->input->post('filterType');

        $this->datatables->select("masterID,documentCode,CurrencyCode trCurrency,confirmedYN,approvedYN, enc.confirmedByEmpID cnEmpID,
            DATE_FORMAT(enc.encashment_date, '{$convertFormat}') AS docDate, narration, enc.createdUserID AS createdUserID, document_type,
            IF(document_type = 1, 'Leave Encashment', 'Leave Salary') AS document_type_str, paymentVoucherID");
        $this->datatables->from('srp_erp_pay_leaveencashment enc');
        $this->datatables->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID=enc.trCurrencyID');
        $this->datatables->where('companyID', $companyID);
        if ($filterType != 0) {
            $this->datatables->where('document_type', $filterType);
        }
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"LEC",masterID)');
        $this->datatables->add_column('edit', '$1', 'leave_encashment_action(masterID, document_type, confirmedYN, approvedYN, createdUserID, cnEmpID, documentCode, paymentVoucherID)');

        if ($isGroupAccess == 1) {
            $currentEmp = current_userID();
            // Usage of UNION in this sub query
            // to get the declaration master record that are not contain any record in detail table record
            // which means we can not get the access rights with out a employee in detail table

            /*$this->datatables->join("(SELECT decID FROM srp_erp_payrollgroupincharge AS inCharge
                                      JOIN (
                                            SELECT declarationMasterID AS decID, accessGroupID
                                            FROM srp_erp_salarydeclarationdetails
                                            WHERE companyID={$companyID} AND accessGroupID IS NOT NULL
                                            GROUP BY declarationMasterID, accessGroupID
                                      ) AS declrationTB ON inCharge.groupID=declrationTB.accessGroupID
                                      WHERE companyID={$companyID} AND empID={$currentEmp}
                                      GROUP BY decID
                                      UNION
                                          SELECT masterID
                                          FROM srp_erp_pay_finalsettlementmaster AS t1
                                          LEFT JOIN srp_erp_salarydeclarationdetails AS t2
                                          ON t2.declarationMasterID=t1.masterID
                                          WHERE t1.companyID={$companyID} AND declarationMasterID IS NULL
                                          GROUP BY t1.masterID
                                      ) AS accTB", 'enc.masterID = accTB.decID');*/

        }

        echo $this->datatables->generate();
    }

    function save_leave_encashment()
    {
        $this->form_validation->set_rules('doc_date', 'Date', 'trim|required');
        $this->form_validation->set_rules('doc_type', 'Type', 'trim|required');
        $this->form_validation->set_rules('currencyID', 'Currency ID', 'trim|required');
        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $currencyID = $this->input->post('currencyID');
        $doc_date = $this->input->post('doc_date');
        $doc_type = $this->input->post('doc_type');
        $narration = trim($this->input->post('narration') ?? '');

        $doc_date = input_format_date($doc_date, date_format_policy());
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $user_group = current_user_group();

        $curr_data = $this->db->query("SELECT currencyID, DecimalPlaces AS trDPlace FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();

        $tr_curr = $curr_data['currencyID'];
        $tr_dPlace = $curr_data['trDPlace'];
        $loc_cur = $this->common_data['company_data']['company_default_currencyID'];
        $rpt_cur = $this->common_data['company_data']['company_reporting_currencyID'];
        $localCon = currency_conversionID($tr_curr, $loc_cur, 0);
        $reportCon = currency_conversionID($tr_curr, $rpt_cur, 0);
        $serialNo = $this->db->query("SELECT serialNo FROM srp_erp_pay_leaveencashment WHERE companyID = {$companyID} ORDER BY masterID DESC LIMIT 1")->row('serialNo');
        $serialNo += 1;

        //Generate template Code
        $this->load->library('sequence');
        $documentCode = $this->sequence->sequence_generator('LEC', $serialNo);


        $int_data = [
            'documentCode' => $documentCode, 'encashment_date' => $doc_date, 'document_type' => $doc_type, 'narration' => $narration,
            'documentID' => 'LEC', 'serialNo' => $serialNo, 'trCurrencyID' => $tr_curr, 'trDPlace' => $tr_dPlace,
            'localCurrencyID' => $loc_cur, 'localCurrencyER' => $localCon['conversion'], 'localDPlace' => $localCon['DecimalPlaces'],
            'rptCurrencyID' => $rpt_cur, 'rptCurrencyER' => $reportCon['conversion'], 'rptDPlace' => $reportCon['DecimalPlaces'],
            'companyID' => $companyID, 'createdUserGroup' => $user_group, 'createdPCID' => $pc, 'createdUserID' => $userID,
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_pay_leaveencashment', $int_data);
        $masterID = $this->db->insert_id();

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Leave encashment document created successfully.<br/>[ ' . $documentCode . ' ]', 'masterID' => $masterID, 'doc_type' => $doc_type]);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function leave_encashment_and_salary_view()
    {
        $is_view = ($this->uri->segment(3) == 'view') ? 'Y' : '';
        $masterID = $this->input->post('masterID');
        $company_id = current_companyID();

        $master_data = $this->db->query("SELECT * FROM srp_erp_pay_leaveencashment WHERE masterID = {$masterID}  AND companyID = {$company_id}")->row_array();
        $document_type = ($master_data['document_type'] == 1) ? 'encashment' : 'salary';

        if ($document_type == 'encashment') {
            $data['details'] = $this->Employee_model->leave_encashment_details($masterID);
        } else {
            $data['details'] = $this->Employee_model->leave_salary_details($masterID);
        }

        $data['master_data'] = $master_data;
        $data['is_view'] = $is_view;

        if ($this->uri->segment(3) == 'print') {
            $html = $this->load->view("system/hrm/print/leave-{$document_type}-print", $data, true); //die($html);
            $this->load->library('pdf');
            $status = ($master_data['confirmedYN'] == 1) ? $master_data['approvedYN'] : $master_data['confirmedYN'];
            $this->pdf->printed($html, 'A4', $status, null);
        } else {
            $data['from_master'] = $this->uri->segment(4);
            $view = $this->load->view("system/hrm/ajax/leave-{$document_type}-view", $data, true);
            if ($is_view == 'Y') {
                echo $view;
            } else {
                echo json_encode(['s', 'view' => $view, 'doc_type' => $master_data['document_type']]);
            }
        }
    }

    function delete_leave_encashment_master()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $companyID = current_companyID();
        $this->db->trans_start();

        $this->db->where(['encash_masterID' => $masterID, 'companyID' => $companyID])->delete('srp_erp_pay_leaveencashmentsalarydetails');
        $this->db->where(['encash_masterID' => $masterID, 'companyID' => $companyID])->delete('srp_erp_pay_leaveencashmentdetails');
        $this->db->where(['masterID' => $masterID, 'companyID' => $companyID])->delete('srp_erp_pay_leaveencashment');

        $this->db->trans_complete();
        if ($this->db->trans_status() === true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Leave encashment deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in delete process.']);
        }
    }

    function add_leave_encashment_employees()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required|numeric');
        $this->form_validation->set_rules('leave_type', 'Annual Leave', 'trim|required');
        $this->form_validation->set_rules('no_of_working_days', 'No Of Working Days In The Month', 'trim|required|callback_validate_no_of_working_days');
        $this->form_validation->set_rules('calculate_based_on[]', 'Basic / Gross ', 'trim|required');
        $this->form_validation->set_rules('temp_empHiddenID[]', 'Employee', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $empList = $empArr = $this->input->post('temp_empHiddenID');
        $categoryList = $this->input->post('calculate_based_on');
        $leave_typeID = $this->input->post('leave_type');
        $working_days = $this->input->post('no_of_working_days');


        $empList = implode(',', $empList);
        $categoryList = implode(',', $categoryList);

        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $masterData = $this->db->get_where('srp_erp_pay_leaveencashment', ['masterID' => $masterID])->row_array();
        $en_cash_date = $masterData['encashment_date'];
        $trCurrID = $masterData['trCurrencyID'];

        $isExisting = $this->db->query("SELECT CONCAT(ECode, ' - ', Ename2) AS empName
                            FROM srp_erp_pay_leaveencashmentdetails AS det
                            JOIN srp_employeesdetails empTB ON empTB.EIdNo = det.empID
                            WHERE empID IN ({$empList}) AND encash_masterID = {$masterID}
                            AND companyID = {$companyID} ")->result_array();

        if (!empty($isExisting)) {
            $ex_list = implode('<br/>', array_column($isExisting, 'empName'));
            die(json_encode(['e', 'Following employees already added in this master.<br/>' . $ex_list]));
        }


        $month_start = date('Y-m-01', strtotime($en_cash_date));
        $month_end = date('Y-m-t', strtotime($month_start));

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $encash_policy = getPolicyValues('LEB', 'All'); //Leave encashment policy
        if ($encash_policy == 1) {
            $working_days = ($salaryProportionFormulaDays == 365) ? 30.42 : 30;
        }

        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;


        $totalWorkedDays = getPolicyValues('SCD', 'All');
        $totalWorkedDays = (empty($totalWorkedDays)) ? 'LAST_DAY(effectiveDate)' : $totalWorkedDays;

        if ($totalWorkedDays == 'LAST_DAY(effectiveDate)') {
            $totalWorkedDays = ' DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ';
        } else {
            $totalWorkedDays = "( 30 - DATE_FORMAT(effectiveDate, '%d') )+1";
        }

        $transactionAmount = "IF (
                                DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                round(
                                  ( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays}) ), transactionCurrencyDecimalPlaces
                                ),
                                transactionAmount
                             )";

        if ($salaryProportionDays == 1) {
            $transactionAmount = "IF (
                                    DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                    round(
                                      ( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )
                                      , transactionCurrencyDecimalPlaces
                                    ),
                                    transactionAmount
                                 )";
        }

        $details = $this->db->query("SELECT EIdNo AS empID, ECode, Ename2, amount AS gross_amount, gr.groupID                         
                        FROM srp_employeesdetails empTB 
                        LEFT JOIN (
                            SELECT employeeNo, cat.salaryCategoryID catID, SUM({$transactionAmount}) AS amount, salaryCategoryType
                            FROM srp_erp_pay_salarycategories cat 
                            JOIN srp_erp_pay_salarydeclartion decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                            AND decl.salaryCategoryID IN ({$categoryList})
                            WHERE employeeNo IN ({$empList}) AND payDate <= '{$month_end}' GROUP BY employeeNo
                        ) sal ON sal.employeeNo = empTB.EIdNo
                        LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                        WHERE Erp_companyID = {$companyID} AND payCurrencyID = {$trCurrID} AND isDischarged = 0 
                        AND EIdNo IN ({$empList})")->result_array();


        if (empty($details)) {
            die(json_encode(['e', 'Employee details not found']));
        }


        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();

        $trDPlace = $masterData['trDPlace'];
        $loCurrID = $masterData['localCurrencyID'];
        $loCurrEr = $masterData['localCurrencyER'];
        $loDPlace = $masterData['localDPlace'];
        $rptCurrID = $masterData['rptCurrencyID'];
        $rptCurrEr = $masterData['rptCurrencyER'];
        $rptDPlace = $masterData['rptDPlace'];

        $details = array_group_by($details, 'empID');

        $intData = [];
        $existing_str = '';
        foreach ($empArr as $empID) {
            $thisEmpDet = $details[$empID];
            $groupID = $thisEmpDet[0]['groupID'];
            $gross = round($thisEmpDet[0]['gross_amount'], $trDPlace);

            $leave_det = $this->db->query("SELECT lv_type.description, lv_det.policyMasterID 
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID 
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID} AND lv_det.leaveTypeID = {$leave_typeID}")->row_array();

            $leaveData = $this->Employee_model->employeeLeaveSummery($empID, $leave_typeID, $leave_det['policyMasterID']);
            $leave_balance = $leaveData['balance'];
            $leave_balance = (empty($leave_balance)) ? 0 : round($leave_balance, 2);

            $amount = 0;
            if ($leave_balance > 0) {
                $amount = $leave_balance * ($gross / $working_days);
                $amount = round($amount, $trDPlace);
            }

            $intData[] = [
                'encash_masterID' => $masterID, 'empID' => $empID, 'leave_typeID' => $leave_typeID, 'amount' => $amount,
                'leave_balance' => $leave_balance, 'encashment_days' => $leave_balance, 'gross_amount' => $gross,
                'salaryCategories' => $categoryList, 'noOfWorkingDaysInMonth' => $working_days, 'accessGroupID' => $groupID,

                'trCurrencyID' => $trCurrID, 'trDPlace' => $trDPlace,
                'localCurrencyID' => $loCurrID, 'localCurrencyER' => $loCurrEr, 'localDPlace' => $loDPlace,
                'rptCurrencyID' => $rptCurrID, 'rptCurrencyER' => $rptCurrEr, 'rptDPlace' => $rptDPlace,

                'companyID' => $companyID, 'createdPCID' => $createdPCID, 'createdUserID' => $createdUserID,
                'createdUserGroup' => $createdUserGroup, 'createdDateTime' => $createdDateTime, 'timestamp' => $createdDateTime
            ];
        }


        $this->db->trans_start();

        $this->db->insert_batch('srp_erp_pay_leaveencashmentdetails', $intData);

        $this->db->query("INSERT INTO srp_erp_pay_leaveencashmentsalarydetails ( encash_masterID, empID, salaryDecID, salaryCategoryID, 
                          trCurrencyID, trDPlace, amount, GLAutoID, companyID, createdPCID, createdUserID, createdDateTime, `timestamp`)
                          
                          SELECT {$masterID} AS  masterID, employeeNo, decl.id, cat.salaryCategoryID, transactionCurrencyID, 
                          transactionCurrencyDecimalPlaces, {$transactionAmount} AS trAmount, cat.GLCode, {$companyID}, '{$createdPCID}', 
                          {$createdUserID}, '{$createdDateTime}', '{$createdDateTime}' 
                          FROM srp_erp_pay_salarycategories AS cat 
                          JOIN srp_erp_pay_salarydeclartion AS decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                          AND decl.salaryCategoryID IN ({$categoryList})
                          WHERE employeeNo IN ({$empList}) AND payDate <= '{$month_end}' 
                          ORDER BY employeeNo, cat.salaryCategoryID ASC");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Emplyees added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function leave_encashment_update_narration()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $id = $this->input->post('id');
        $narration = trim($this->input->post('narration') ?? '');
        $companyID = current_companyID();

        $this->db->trans_start();

        $dateTime = current_date();
        $up_data = [
            'narration' => $narration, 'modifiedPCID' => current_pc(), 'modifiedUserID' => current_userID(),
            'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->where(['id' => $id, 'encash_masterID' => $masterID, 'companyID' => $companyID])
            ->update('srp_erp_pay_leaveencashmentdetails', $up_data);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Fail to update narration']);
        } else {
            echo json_encode(['s', 'Narration update successfully']);
        }
    }

    function leave_encashment_change_days()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $id = $this->input->post('id');
        $en_days = trim($this->input->post('en_days') ?? '');
        $companyID = current_companyID();
        $where = ['id' => $id, 'encash_masterID' => $masterID, 'companyID' => $companyID];

        $data = $this->db->get_where('srp_erp_pay_leaveencashmentdetails', $where)->row_array();
        $leave_balance = $data['leave_balance'];

        if ($leave_balance < $en_days) {
            die(json_encode(['e', 'Encashment days can not be greater than actual leave balance']));
        }

        $maxencash = $this->db->query(" SELECT srp_erp_pay_leaveencashmentdetails.id, srp_erp_leavegroupdetails.max_encashment, srp_erp_leavegroupdetails.eligibleforencashment 
                            FROM `srp_erp_pay_leaveencashmentdetails` 
                            JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo = srp_erp_pay_leaveencashmentdetails.empID 
                            left join srp_erp_leavegroupdetails on  srp_erp_leavegroupdetails.leaveGroupId = srp_employeesdetails.leaveGroupID AND srp_erp_pay_leaveencashmentdetails.leave_typeID = srp_erp_leavegroupdetails.leaveTypeID 
                            where srp_erp_pay_leaveencashmentdetails.id = $id ")->row_array(); 

        if($maxencash['max_encashment'] != null && $maxencash['max_encashment'] != 0){ 
            if( $leave_balance < $maxencash['max_encashment'] ) { 
                die(json_encode(['e', 'Leave Balance should be equal to maximum_encashment_days('. $maxencash['max_encashment'].') '.'or greater'])); 
            }

            if( $en_days > $maxencash['max_encashment'] ){ 
                die(json_encode(['e', 'LMaximum Encashment days should be equal to' .' '. $maxencash['max_encashment'] ])); 
            } 
        } 


        $gross = $data['gross_amount'];
        $working_days = $data['noOfWorkingDaysInMonth'];
        $trDPlace = $data['trDPlace'];

        $amount = $en_days * ($gross / $working_days);
        $amount = round($amount, $trDPlace);

        $this->db->trans_start();

        $dateTime = current_date();
        $up_data = [
            'encashment_days' => $en_days, 'amount' => $amount, 'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(), 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->where($where)->update('srp_erp_pay_leaveencashmentdetails', $up_data);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Fail to update days']);
        } else {
            $amount = number_format($amount, $trDPlace);

            $return_data = $this->db->query("SELECT SUM(amount) AS total, mas.trDPlace FROM srp_erp_pay_leaveencashment AS mas
                                          LEFT JOIN srp_erp_pay_leaveencashmentdetails AS det ON mas.masterID = det.encash_masterID 
                                          WHERE encash_masterID = {$masterID}")->row_array();

            echo json_encode(['s',
                'Encashment days update successfully',
                'amount' => $amount,
                'total' => $return_data['total'],
                'dPlaces' => $return_data['trDPlace']
            ]);
        }
    }

    function delete_all_leave_encashment_details()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $this->db->trans_start();

        $companyID = current_companyID();
        $this->db->delete('srp_erp_pay_leaveencashmentdetails', ['encash_masterID' => $masterID, 'companyID' => $companyID]);
        $this->db->delete('srp_erp_pay_leaveencashmentsalarydetails', ['encash_masterID' => $masterID, 'companyID' => $companyID]);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'All detail reocrds deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function delete_leave_encashment_item()
    {

        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $id = trim($this->input->post('detailID') ?? '');
        $companyID = current_companyID();

        $this->db->trans_start();

        $where = ['id' => $id, 'encash_masterID' => $masterID, 'companyID' => $companyID];
        $details = $this->db->get_where('srp_erp_pay_leaveencashmentdetails', $where)->row_array();
        $where_salary = ['empID' => $details['empID'], 'salary_pay_date' => $details['salary_pay_date'], 'encash_masterID' => $masterID];

        $this->db->delete('srp_erp_pay_leaveencashmentsalarydetails', $where_salary);
        $this->db->delete('srp_erp_pay_leaveencashmentdetails', $where);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Fail to delete the item']);
        } else {
            echo json_encode(['s', 'Successfully deleted']);
        }
    }

    function leave_encashment_document_confirm()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $documentName = 'Leave Encashment Approval';
        $tableName = 'srp_erp_pay_leaveencashment';
        $documentCode = $document_status['data']['docCode'];
        $createdDate = $document_status['data']['createdDate'];

        $validate_code = validate_code_duplication($documentCode, 'documentCode', $masterID,'masterID', 'srp_erp_pay_leaveencashment');
        if(!empty($validate_code)) {
            die(json_encode(['e', 'The document Code Already Exist.(' . $validate_code . ')']));
        }

        $this->load->library('approvals'); // Document Confirmation also update with the approvals library
        $this->db->trans_begin();
        $isAutoApproval = get_document_auto_approval('LEC');
        if ($isAutoApproval == 0) { // If auto approval
            $this->approvals->auto_approve($masterID, $tableName, 'masterID', 'LEC', $documentCode, $createdDate);
            $company_id = current_companyID();
            $masterDetail = $this->db->query("SELECT * FROM srp_erp_pay_leaveencashment WHERE companyID = {$company_id} AND masterID = {$masterID}")->row_array();
            if ($masterDetail['document_type'] == 1) { //If leave encashment
                $this->leave_encashment_leave_adjustment($masterID, $masterDetail);
            } else { //if leave salary
                $this->leave_salary_GL_entries($masterID, $masterDetail);
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                die(json_encode(['s', 'Approved successfully']));
            } else {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Error in approval process']));
            }
        }

        $approvals_status = $this->approvals->CreateApproval('LEC', $masterID, $documentCode, $documentName, $tableName, 'masterID', 0, $createdDate);
        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            die(json_encode(['e', 'Something went wrong!, In approval create process']));
        }

        if ($approvals_status == 3) {
            $this->db->trans_rollback();
            echo json_encode(['w', 'There is no user exists to perform leave encashment approval for this company.']);
        } elseif ($approvals_status == 1) {
            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Something went wrong!, In approval create process']));
            }
            $this->db->trans_commit();
            echo json_encode(['s', 'Approval created : ' . $documentCode]);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['w', 'some thing went wrong', $approvals_status]);
        }
    }

    function referBack_leave_encashment()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('LEC', $masterID, 1);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $documentCode = $document_status['data']['docCode'];
        $is_approved = $document_status['data']['approvalVal'];

        if ($is_approved == 1) {
            echo json_encode(['e', 'This document is already approved.<p>You can not refer back this.']);
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($masterID, 'LEC');
            if ($status == 1) {
                echo json_encode(array('s', $documentCode . ' Referred back successfully.'));
            } else {
                echo json_encode(array('e', $documentCode . ' Error in refer back.'));
            }
        }
    }

    function leave_encashment_payment_voucher($masterID)
    {
        //$masterDetail = $this->db->get_where('srp_erp_pay_leaveencashment', ['masterID'=>$masterID])->row_array();
        return true;
    }

    function fetch_leave_encashment_on_approval()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();

        $userID = current_userID();
        $status = trim($this->input->post('approvedYN') ?? '');
        if ($status == 0) {
            $where = [
                'approve.documentID' => 'LEC',
                'ap.documentID' => 'LEC',
                'ap.employeeID' => $userID,
                'approve.approvedYN' => $status
            ];

            $this->datatables->select('masterID, enc.documentCode AS documentCode, narration, approve.approvedYN as approvedYN, CurrencyCode trCurrency,
                    documentApprovedID, approvalLevelID, DATE_FORMAT(enc.encashment_date, \'' . $convertFormat . '\') AS docDate', true)
                ->from('srp_erp_pay_leaveencashment AS enc')
                ->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID=enc.trCurrencyID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = enc.masterID AND approve.approvalLevelID = enc.currentLevelNo')
                ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = enc.currentLevelNo')
                ->where($where)->where('enc.companyID', $companyID)->where('ap.companyID', $companyID)
                ->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount')
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LEC", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        } else {
            $where = [
                'approve.documentID' => 'LEC',
            ];

            $this->datatables->select('masterID, enc.documentCode AS documentCode, narration, approve.approvedYN as approvedYN, CurrencyCode trCurrency,
                    documentApprovedID, approvalLevelID, DATE_FORMAT(enc.encashment_date, \'' . $convertFormat . '\') AS docDate', true)
                ->from('srp_erp_pay_leaveencashment AS enc')
                ->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID=enc.trCurrencyID')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = enc.masterID')
                ->where($where)
                ->where('enc.companyID', $companyID)
                ->where('approve.approvedEmpID', $userID)
                ->group_by('enc.masterID')
                ->group_by('approve.approvalLevelID')
                ->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount')
                ->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2')
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"LEC", masterID)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(masterID, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();
        }
    }

    function leave_encashment_approval()
    {
        $masterID = $this->input->post('masterID');
        $company_id = current_companyID();
        $masterDetail = $this->db->query("SELECT * FROM srp_erp_pay_leaveencashment WHERE companyID = {$company_id} AND masterID = {$masterID}")->row_array();

        if (empty($masterDetail)) {
            die(json_encode(['e', 'This document is not found']));
        }

        if ($masterDetail['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved.<p>You can not approved this.']));
        }

        if ($masterDetail['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed.<p>You can not approved this.']));
        }

        $documentCode = $masterDetail['documentCode'];
        $level_id = $this->input->post('level');
        $status = $this->input->post('status');
        if (empty($status) || $status == 0) {
            die(json_encode(['e', 'Please select a status and try again.']));
        }
        $comments = $this->input->post('comments');

        $this->load->library('approvals');

        $this->db->trans_begin();
        $approvals_status = $this->approvals->approve_document($masterID, $level_id, $status, $comments, 'LEC');

        if ($approvals_status == 2) {
            $this->db->trans_commit();
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';
            echo json_encode(['s', $msg, $approvals_status]);
        } else if ($approvals_status == 1) { /*Final level approved*/
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';

            if ($masterDetail['document_type'] == 1) { //If leave encashment
                $this->leave_encashment_leave_adjustment($masterID, $masterDetail);
            } else { //if leave salary
                $this->leave_salary_GL_entries($masterID, $masterDetail);
            }

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', $msg]);
            } else {
                $this->db->trans_rollback();
                $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
                echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
            }
        } else if ($approvals_status == 3) {
            $this->db->trans_commit();
            $msg = 'Approvals  Reject Process Successfully done'; //$this->lang->line('hrms_payroll_approvals_reject_process_successfully_done');
            echo json_encode(['s', '[ ' . $documentCode . ' ]' . $msg . ' .']);
        } else if ($approvals_status == 5) {
            $this->db->trans_rollback();
            $msg = 'Previous Level Approval Not Finished'; //$this->lang->line('hrms_payroll_previous_level_approval_not_finished');
            echo json_encode(['w', '[ ' . $documentCode . ' ] ' . $msg . '.']); /*Previous Level Approval Not Finished*/
        } else {
            $this->db->trans_rollback();
            $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
            echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
        }
    }

    function leave_encashment_leave_adjustment($masterID, $master_data)
    {
        $company_id = current_companyID();
        $dateTime = date('Y-m-d H:i:s');

        $en_cash_data = $this->db->query("SELECT empID, leave_balance, leave_typeID, empTB.leaveGroupID, policyMasterID ,encashment_days
                                    FROM srp_erp_pay_leaveencashmentdetails AS enc
                                    JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = enc.empID
                                    JOIN (
                                         SELECT lvType.leaveTypeID, gr_det.policyMasterID, gr_tb.leaveGroupID
                                         FROM srp_erp_leavegroup gr_tb
                                         JOIN srp_erp_leavegroupdetails gr_det ON gr_tb.leaveGroupID = gr_det.leaveGroupID
                                         JOIN srp_erp_leavetype lvType ON lvType.leaveTypeID = gr_det.leaveTypeID
                                         WHERE gr_tb.companyID = {$company_id} AND lvType.isAnnualLeave = 1
                                    ) AS grp_data ON grp_data.leaveGroupID = empTB.leaveGroupID AND grp_data.leaveTypeID = enc.leave_typeID
                                    WHERE encash_masterID = {$masterID} AND leave_balance > 0")->result_array();

        if (empty($en_cash_data)) {
            return true;
        }

        $en_cash_data_group = array_group_by($en_cash_data, 'leaveGroupID', 'policyMasterID');

        $this->load->library('sequence');

        $adjustment_master_data = [
            'companyID' => $company_id,
            'documentID' => 'LAM',
            'year' => date('Y'),
            'month' => date('m'),
            'createdUserGroup' => current_user_group(),
            'createDate' => $dateTime,
            'createdpc' => current_pc(),
            'manualYN' => 1,
            'confirmedYN' => 1,
            'confirmedDate' => $dateTime,
            'confirmedby' => current_userID(),
        ];

        foreach ($en_cash_data_group as $group_id => $policy_data) { //Loop group wise

            foreach ($policy_data as $policy_id => $en_data) {//Loop policy wise

                $code = $this->sequence->sequence_generator('LAM');

                $adjustment_master_data['leaveGroupID'] = $group_id;
                $description = 'Leave en-cashment [ ' . $master_data['documentCode'] . ' ]';
                $adjustment_master_data['leaveaccrualMasterCode'] = $code;
                $adjustment_master_data['description'] = $description;
                $adjustment_master_data['policyMasterID'] = $policy_id;

                $this->db->insert('srp_erp_leaveaccrualmaster', $adjustment_master_data);
                $acc_masterID = $this->db->insert_id();

                $adjustment_data_det = [];
                foreach ($en_data as $key => $row) {
                    //$daysEntitled = $row['leave_balance'] * -1;
                    $daysEntitled = $row['encashment_days'] * -1;
                    $hoursEntitled = 0;
                    $previous_balance = $row['leave_balance'];
                    $adjustment_data_det[$key]['leaveaccrualMasterID'] = $acc_masterID;
                    $adjustment_data_det[$key]['empID'] = $row['empID'];
                    $adjustment_data_det[$key]['leaveGroupID'] = $group_id;
                    $adjustment_data_det[$key]['leaveType'] = $row['leave_typeID'];
                    $adjustment_data_det[$key]['daysEntitled'] = $daysEntitled;
                    $adjustment_data_det[$key]['hoursEntitled'] = $hoursEntitled;
                    $adjustment_data_det[$key]['previous_balance'] = $previous_balance;
                    $adjustment_data_det[$key]['description'] = $description;
                    $adjustment_data_det[$key]['createdUserGroup'] = current_user_group();
                    $adjustment_data_det[$key]['createdPCid'] = current_pc();
                    $adjustment_data_det[$key]['timestamp'] = $dateTime;
                }

                $this->db->insert_batch('srp_erp_leaveaccrualdetail', $adjustment_data_det);
            }
        }

        return true;
    }

    function leave_encashment_paymentVoucher_generation()
    {
        $this->form_validation->set_rules('autoID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('transDate', 'Transfer Date', 'trim|required');
        $this->form_validation->set_rules('accountID', 'Bank or Cash', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('autoID');
        $accountID = $this->input->post('accountID');

        $where = ['approvedYN' => 1, 'companyID' => $companyID, 'GLAutoID' => $accountID];
        $bankData = $this->db->get_where('srp_erp_chartofaccounts', $where)->row_array();


        $masterData = $this->db->query("SELECT * FROM srp_erp_pay_leaveencashment WHERE companyID = {$companyID} AND masterID = {$masterID}")->row_array();
        if ($masterData['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed yet']));
        }

        if ($masterData['approvedYN'] != 1) {
            die(json_encode(['e', 'This document is not approved yet']));
        }

        if ($masterData['paymentVoucherID'] > 0) {
            die(json_encode(['e', 'Payment voucher is already processed']));
        }

        $control_acc = [];

        if ($masterData['document_type'] == 1) { // if leave encashment
            $control_acc = $this->db->query("SELECT coa.* FROM srp_erp_chartofaccounts coa
                        JOIN srp_erp_companycontrolaccounts cnt on coa.GLAutoID = cnt.GLAutoID
                        WHERE coa.companyID = {$companyID} AND cnt.controlAccountType='LEC'")->row_array();

            if (empty($control_acc)) {
                die(json_encode(['e', 'Leave Encashment Control Account not found.']));
            }
        } else { // if leave salary
            $control_acc = $this->db->query("SELECT coa.* FROM srp_erp_chartofaccounts coa
                        JOIN srp_erp_companycontrolaccounts cnt on coa.GLAutoID = cnt.GLAutoID
                        WHERE coa.companyID = {$companyID} AND cnt.controlAccountType='PCA'")->row_array();

            if (empty($control_acc)) {
                die(json_encode(['e', 'Payroll Control Account not found.']));
            }
        }


        $transDate = $this->input->post('transDate');
        $date_format_policy = date_format_policy();

        $dateTime = current_date();
        $transDate = input_format_date($transDate, $date_format_policy);
        $periodStart = date('Y-m-01', strtotime($transDate));
        $periodEnd = date('Y-m-t', strtotime($transDate));


        $bank_curr_data = currency_conversionID($masterData['trCurrencyID'], $bankData['bankCurrencyID']);

        $financePeriod_arr = $this->db->select('companyFinancePeriodID, companyFinanceYearID')->from('srp_erp_companyfinanceperiod')
            ->where(['dateFrom' => $periodStart, 'dateTo' => $periodEnd, 'companyID' => $companyID])->get()->row_array();

        $financeYear_arr = $this->db->select('companyFinanceYearID, beginingDate, endingDate')->from('srp_erp_companyfinanceyear')
            ->where(['companyFinanceYearID' => $financePeriod_arr['companyFinanceYearID'], 'isActive' => 1, 'companyID' => $companyID])->get()->row_array();

        $financeYearID = $financeYear_arr['companyFinanceYearID'];
        $companyFinanceYear = $financeYear_arr['beginingDate'] . ' ' . $financeYear_arr['endingDate'];

        $this->load->library('sequence');
        $year = date('Y', strtotime($financeYear_arr['beginingDate']));
        $month = date('m', strtotime($financeYear_arr['beginingDate']));

        $location_wise_code_generate = getPolicyValues('LDG', 'All');
        if ($location_wise_code_generate == 1) {
            $location = $this->common_data['emplanglocationid'];

            if (empty($location)) {
                die(json_encode(['e', 'Payment voucher code generation.<br/>Location is not assigned for current employee']));
            }

            $pvCode = $this->sequence->sequence_generator_location('PV', $financeYearID, $location, $year, $month);

        } else {
            $pvCode = $this->sequence->sequence_generator_fin('PV', $financeYearID, $year, $month);
        }

        $lec_documentCode = $masterData['documentCode'];

        $bankTransferAmount = $this->db->query("SELECT round(SUM(amount), trDPlace) AS net FROM srp_erp_pay_leaveencashmentdetails WHERE encash_masterID = {$masterID}")->row('net');

        $tr_curr_code = get_currency_code($masterData['trCurrencyID']);
        $loc_curr_code = get_currency_code($masterData['localCurrencyID']);
        $rpt_curr_code = get_currency_code($masterData['rptCurrencyID']);

        $pvMaster = [
            'documentID' => 'PV', 'PVcode' => $pvCode, 'PVdate' => $transDate, 'pvType' => 'Direct', 'isSytemGenerated' => 1, 'referenceNo' => $lec_documentCode,

            'companyFinanceYearID' => $financeYearID, 'companyFinanceYear' => $companyFinanceYear, 'FYBegin' => $financeYear_arr['beginingDate'],
            'FYEnd' => $financeYear_arr['endingDate'], 'FYPeriodDateFrom' => $periodStart, 'FYPeriodDateTo' => $periodEnd,
            'companyFinancePeriodID' => $financePeriod_arr['companyFinancePeriodID'],

            'modeOfPayment' => ($bankData['isCash'] == 1) ? 1 : 2,
            'paymentType' => ($bankData['isCash'] == 1) ? 0 : 1,

            'PVbank' => $bankData['bankName'], 'PVbankCode' => $bankData['GLAutoID'], 'bankGLAutoID' => $bankData['GLAutoID'],
            'bankSystemAccountCode' => $bankData['systemAccountCode'], 'bankGLSecondaryCode' => $bankData['GLSecondaryCode'],
            'PVbankBranch' => $bankData['bankBranch'], 'PVbankSwiftCode' => $bankData['bankSwiftCode'], 'PVbankAccount' => $bankData['bankAccountNumber'],
            'PVbankType' => $bankData['subCategory'], 'PVNarration' => $lec_documentCode . ' ' . $masterData['narration'], 'partyType' => 'DIR',

            'confirmedYN' => 1, 'confirmedByEmpID' => current_userID(), 'confirmedByName' => current_employee(), 'confirmedDate' => $dateTime,

            'transactionCurrencyID' => $masterData['trCurrencyID'], 'transactionCurrency' => $tr_curr_code,
            'transactionExchangeRate' => 1, 'transactionAmount' => $bankTransferAmount, 'transactionCurrencyDecimalPlaces' => $masterData['trDPlace'],

            'companyLocalCurrencyID' => $masterData['localCurrencyID'], 'companyLocalCurrency' => $loc_curr_code,
            'companyLocalExchangeRate' => $masterData['localCurrencyER'], 'companyLocalAmount' => round(($bankTransferAmount / $masterData['localCurrencyER']), $masterData['localDPlace']),
            'companyLocalCurrencyDecimalPlaces' => $masterData['localDPlace'],

            'companyReportingCurrencyID' => $masterData['rptCurrencyID'], 'companyReportingCurrency' => $rpt_curr_code,
            'companyReportingExchangeRate' => $masterData['rptCurrencyER'], 'companyReportingAmount' => round(($bankTransferAmount / $masterData['rptCurrencyER']), $masterData['rptDPlace']),
            'companyReportingCurrencyDecimalPlaces' => $masterData['rptDPlace'],

            'partyCurrencyID' => $masterData['trCurrencyID'], 'partyCurrency' => $tr_curr_code,
            'partyExchangeRate' => 1, /* Party currency = employee currency (transaction currency)*/
            'partyCurrencyAmount' => round($bankTransferAmount, $masterData['trDPlace']), 'partyCurrencyDecimalPlaces' => $masterData['trDPlace'],


            'bankCurrencyID' => $bankData['bankCurrencyID'], 'bankCurrency' => $bank_curr_data['CurrencyCode'],
            'bankCurrencyAmount' => round(($bankTransferAmount / $bank_curr_data['conversion']), $bank_curr_data['DecimalPlaces']),
            'bankCurrencyExchangeRate' => $bank_curr_data['conversion'], 'bankCurrencyDecimalPlaces' => $bank_curr_data['DecimalPlaces'],

            'companyID' => $companyID, 'companyCode' => current_companyCode(), 'segmentID' => 0, 'segmentCode' => '',
            'createdUserGroup' => current_user_group(), 'createdPCID' => current_pc(), 'createdUserID' => current_userID(),
            'createdUserName' => current_employee(), 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_begin();

        $this->db->insert('srp_erp_paymentvouchermaster', $pvMaster);
        $pvMasterID = $this->db->insert_id();


        /*Start of payment voucher detail */

        $pv_temp = [
            'payVoucherAutoId' => $pvMasterID,
            'type' => 'GL', 'referenceNo' => $pvCode, 'GLAutoID' => $control_acc['GLAutoID'], 'systemGLCode' => $control_acc['systemAccountCode'],
            'GLCode' => $control_acc['GLSecondaryCode'], 'GLDescription' => $control_acc['GLDescription'], 'GLType' => $control_acc['subCategory'],
            'description' => $pvCode . ' ' . $masterData['narration'],

            'transactionCurrencyID' => $masterData['trCurrencyID'], 'transactionCurrency' => $tr_curr_code,
            'transactionExchangeRate' => 1, 'transactionAmount' => 0, 'transactionCurrencyDecimalPlaces' => $masterData['trDPlace'],

            'companyLocalCurrencyID' => $masterData['localCurrencyID'], 'companyLocalCurrency' => $loc_curr_code,
            'companyLocalExchangeRate' => $masterData['localCurrencyER'], 'companyLocalAmount' => 0,
            'companyLocalCurrencyDecimalPlaces' => $masterData['localDPlace'],

            'companyReportingCurrencyID' => $masterData['rptCurrencyID'], 'companyReportingCurrency' => $rpt_curr_code,
            'companyReportingExchangeRate' => $masterData['rptCurrencyER'], 'companyReportingAmount' => 0,
            'companyReportingCurrencyDecimalPlaces' => $masterData['rptDPlace'],

            'partyCurrencyID' => $masterData['trCurrencyID'], 'partyCurrency' => $tr_curr_code,
            'partyExchangeRate' => 1, 'partyAmount' => 0,

            'companyID' => $companyID, 'companyCode' => current_companyCode(), 'segmentID' => 0, 'segmentCode' => '', 'createdUserGroup' => current_user_group(),
            'createdPCID' => current_pc(), 'createdUserID' => current_userID(), 'createdUserName' => current_employee(),
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $amount_by_segments = $this->db->query("SELECT round(SUM(amount), trDPlace) AS amount, empTB.segmentID, seg.segmentCode 
                                                FROM srp_erp_pay_leaveencashmentdetails AS enc
                                                JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = enc.empID
                                                JOIN srp_erp_segment AS seg ON seg.segmentID = empTB.segmentID
                                                WHERE encash_masterID = {$masterID}
                                                GROUP BY empTB.segmentID ")->result_array();

        $pvDet = [];
        foreach ($amount_by_segments as $row) {
            $amount = $row['amount'];
            $pv_temp['segmentID'] = $row['segmentID'];
            $pv_temp['segmentCode'] = $row['segmentCode'];

            $pv_temp['transactionAmount'] = $amount;
            $pv_temp['partyAmount'] = $amount;
            $pv_temp['companyLocalAmount'] = round(($amount / $masterData['localCurrencyER']), $masterData['localDPlace']);
            $pv_temp['companyReportingAmount'] = round(($amount / $masterData['rptCurrencyER']), $masterData['rptDPlace']);

            $pvDet[] = $pv_temp;
        }

        $this->db->insert_batch('srp_erp_paymentvoucherdetail', $pvDet);

        /*End of payment voucher detail */


        /*Update payment voucher id*/
        $this->db->where(['masterID' => $masterID])->update('srp_erp_pay_leaveencashment', ['paymentVoucherID' => $pvMasterID]);


        /*Approval create*/
        $this->load->library('approvals');

        $autoApproval = get_document_auto_approval('PV');

        if ($autoApproval == 0) {
            $this->load->helpers('payable');
            $this->load->model('Payment_voucher_model');
            $this->approvals->auto_approve($pvMasterID, 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 'PV', $pvCode, $transDate);

            $this->Payment_voucher_model->save_pv_approval(0, $pvMasterID, 1, 'Auto Approved');

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                die(json_encode(['s', 'Payment voucher [ ' . $pvCode . ' ] approved successfully']));
            } else {
                $this->db->trans_rollback();
                die(json_encode(['e', 'Error in Payment voucher generation process']));
            }
        }

        $approvals_status = $this->approvals->CreateApproval('PV', $pvMasterID, $pvCode, 'Payment Voucher', 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId');

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            die(json_encode(['e', 'Something went wrong!, In bank transfer process']));
        }

        if ($approvals_status == 1) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Payment voucher [ ' . $pvCode . ' ] successfully generated', 'payVoucherAutoId' => $pvMasterID]);
        } else if ($approvals_status == 3) {
            $this->db->trans_rollback();
            echo json_encode(['e', 'There are no users exist to perform Payment voucher approval.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Something went wrong!, In approval creation process']);
        }

    }

    function add_leave_salary_employees()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required|numeric');
        $this->form_validation->set_rules('payYear', 'Year', 'trim|required');
        $this->form_validation->set_rules('payMonth', 'Month', 'trim|required');
        $this->form_validation->set_rules('no_of_working_days', 'No Of Working Days In The Month', 'trim|required|callback_validate_no_of_working_days');
        $this->form_validation->set_rules('calculate_based_on[]', 'Basic / Gross ', 'trim|required');
        $this->form_validation->set_rules('temp_empHiddenID[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('no_of_leave_days', 'no of leave days', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $empList = $empArr = $this->input->post('temp_empHiddenID');
        $categoryList = $this->input->post('calculate_based_on');
        $payYear = $this->input->post('payYear');
        $payMonth = $this->input->post('payMonth');
        $pay_date = "{$payYear}-{$payMonth}-01";
        $month_start = $pay_date = date('Y-m-d', strtotime($pay_date));
        $month_end = date('Y-m-t', strtotime($pay_date));
        $working_days = $this->input->post('no_of_working_days');
        $leave_days = $this->input->post('no_of_leave_days');

        $empList = implode(',', $empList);
        $categoryList = implode(',', $categoryList);

        $document_status = document_status('LEC', $masterID);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        if (!empty($leave_days) && !empty($no_of_working_days)) {
            if($leave_days > $no_of_working_days){
                die(json_encode(['e','Number of leave days can not be greater than number of working days']));
            }  
        }

        $masterData = $this->db->get_where('srp_erp_pay_leaveencashment', ['masterID' => $masterID])->row_array();
        $en_cash_date = $masterData['encashment_date'];
        $trCurrID = $masterData['trCurrencyID'];

        $isPayrollProcessed = isPayrollProcessedForEmpGroup($empList, $payYear, $payMonth, 'N');

        if (!empty($isPayrollProcessed)) {
            $employeesStr = implode('<br/>', array_column($isPayrollProcessed, 'empData'));
            $month = date('Y  F', strtotime($pay_date));
            die(json_encode(['e', 'Payroll already processed on selected <br/> month (' . $month . ') for following employees <br/>' . $employeesStr]));
        }

        $isExisting = $this->db->query("SELECT CONCAT(ECode, ' - ', Ename2, ' ( ', documentCode, ' )' ) AS empName
                            FROM srp_erp_pay_leaveencashmentdetails AS det
                            JOIN srp_employeesdetails empTB ON empTB.EIdNo = det.empID
                            JOIN srp_erp_pay_leaveencashment AS mas ON mas.masterID = det.encash_masterID
                            WHERE empID IN ({$empList}) AND det.companyID = {$companyID} AND salary_pay_date = '{$pay_date}'")->result_array();

        if (!empty($isExisting)) {
            $ex_list = implode('<br/>', array_column($isExisting, 'empName'));
            die(json_encode(['e', 'Leave salary already processed for following employees on selected month.<br/>' . $ex_list]));
        }

        $month_start = date('Y-m-01', strtotime($en_cash_date));
        $month_end = date('Y-m-t', strtotime($month_start));

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $encash_policy = getPolicyValues('LEB', 'All'); //Leave encashment policy
        if ($encash_policy == 1) {
            $working_days = ($salaryProportionFormulaDays == 365) ? 30.42 : 30;
        }

        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;


        $totalWorkedDays = getPolicyValues('SCD', 'All');
        $totalWorkedDays = (empty($totalWorkedDays)) ? 'LAST_DAY(effectiveDate)' : $totalWorkedDays;

        if ($totalWorkedDays == 'LAST_DAY(effectiveDate)') {
            $totalWorkedDays = ' DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ';
        } else {
            $totalWorkedDays = "( 30 - DATE_FORMAT(effectiveDate, '%d') )+1";
        }

        $transactionAmount = "IF (
                                DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                round(
                                  ( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays}) ), transactionCurrencyDecimalPlaces
                                ),
                                transactionAmount
                             )";

        $transactionAmountPro = "IF (
                                DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                round(
                                  ( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays})  )   , transactionCurrencyDecimalPlaces
                                ),

                                round(((transactionAmount/$working_days)* $leave_days), transactionCurrencyDecimalPlaces)
                             )";

        if ($salaryProportionDays == 1) {
            $transactionAmount = "IF (
                                    DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                    round(
                                      ( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )
                                      , transactionCurrencyDecimalPlaces
                                    ),
                                    transactionAmount
                                 )";

            $transactionAmountPro = "IF (
                                    DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                    round(
                                      ( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )
                                      , transactionCurrencyDecimalPlaces
                                    ),
                                    round(((transactionAmount/$working_days)* $leave_days), transactionCurrencyDecimalPlaces)
                                 )";
        }

        $details = $this->db->query("SELECT EIdNo AS empID, ECode, Ename2, amount AS gross_amount, gr.groupID                         
                        FROM srp_employeesdetails empTB 
                        LEFT JOIN (
                            SELECT employeeNo, cat.salaryCategoryID catID, SUM({$transactionAmount}) AS amount, salaryCategoryType
                            FROM srp_erp_pay_salarycategories cat 
                            JOIN srp_erp_pay_salarydeclartion decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                            AND decl.salaryCategoryID IN ({$categoryList})
                            WHERE employeeNo IN ({$empList}) AND payDate <= '{$month_end}' GROUP BY employeeNo
                        ) sal ON sal.employeeNo = empTB.EIdNo
                        LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                        WHERE Erp_companyID = {$companyID} AND payCurrencyID = {$trCurrID} AND isDischarged = 0 
                        AND EIdNo IN ({$empList})")->result_array();

        if (empty($details)) {
            die(json_encode(['e', 'Employee details not found']));
        }


        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();

        $trDPlace = $masterData['trDPlace'];
        $loCurrID = $masterData['localCurrencyID'];
        $loCurrEr = $masterData['localCurrencyER'];
        $loDPlace = $masterData['localDPlace'];
        $rptCurrID = $masterData['rptCurrencyID'];
        $rptCurrEr = $masterData['rptCurrencyER'];
        $rptDPlace = $masterData['rptDPlace'];

        $details = array_group_by($details, 'empID');

        $intData = [];
        $existing_str = '';
        foreach ($empArr as $empID) {
            $thisEmpDet = $details[$empID];
            $groupID = $thisEmpDet[0]['groupID'];
            $gross = round($thisEmpDet[0]['gross_amount'], $trDPlace);

            
            /*    $leave_det = $this->db->query("SELECT lv_type.description, lv_det.policyMasterID 
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID 
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID} AND lv_det.leaveTypeID = {$leave_typeID}")->row_array();

            $leaveData = $this->Employee_model->employeeLeaveSummery($empID, $leave_typeID, $leave_det['policyMasterID']);
            $leave_balance = $leaveData['balance'];
            $leave_balance = (empty($leave_balance)) ? 0 : round($leave_balance, 2);

            $amount = 0;
            if ($leave_balance > 0) {
                $amount = $leave_balance * ($gross / $working_days);
                $amount = round($amount, $trDPlace);
            }
                */
            $amount = 0;
            $amount = $leave_days * ($gross / $working_days);
            $amount = round($amount, $trDPlace);

            $intData[] = [
                'encash_masterID' => $masterID, 'empID' => $empID, 'amount' => $amount, 'salary_pay_date' => $pay_date,
                'gross_amount' => $gross, 'salaryCategories' => $categoryList, 'accessGroupID' => $groupID,
                'leave_typeID' => 0, 'leave_balance' => 0, 'noOfWorkingDaysInMonth' => $working_days, 'salary_days' => $leave_days,

                'trCurrencyID' => $trCurrID, 'trDPlace' => $trDPlace,
                'localCurrencyID' => $loCurrID, 'localCurrencyER' => $loCurrEr, 'localDPlace' => $loDPlace,
                'rptCurrencyID' => $rptCurrID, 'rptCurrencyER' => $rptCurrEr, 'rptDPlace' => $rptDPlace,

                'companyID' => $companyID, 'createdPCID' => $createdPCID, 'createdUserID' => $createdUserID,
                'createdUserGroup' => $createdUserGroup, 'createdDateTime' => $createdDateTime, 'timestamp' => $createdDateTime
            ];
        }


        if (!empty($existing_str)) {
            $msg = 'Following salary categories already added for these employees' . $existing_str;
            die(json_encode(['m', $msg]));
        }

        $this->db->trans_start();

        $this->db->insert_batch('srp_erp_pay_leaveencashmentdetails', $intData);

        $this->db->query("INSERT INTO srp_erp_pay_leaveencashmentsalarydetails ( encash_masterID, empID, salaryDecID, salaryCategoryID, trCurrencyID, 
                          trDPlace, amount, GLAutoID, salary_pay_date, companyID, createdPCID, createdUserID, createdDateTime, `timestamp`)
                          
                          SELECT {$masterID} AS  masterID, employeeNo, decl.id, cat.salaryCategoryID, transactionCurrencyID, 
                          transactionCurrencyDecimalPlaces, {$transactionAmountPro} AS trAmount, cat.GLCode, '{$pay_date}', {$companyID}, 
                          '{$createdPCID}', {$createdUserID}, '{$createdDateTime}', '{$createdDateTime}' 
                          FROM srp_erp_pay_salarycategories AS cat 
                          JOIN srp_erp_pay_salarydeclartion AS decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                          AND decl.salaryCategoryID IN ({$categoryList})
                          WHERE employeeNo IN ({$empList}) AND payDate <= '{$month_end}' 
                          ORDER BY employeeNo, cat.salaryCategoryID ASC");

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Emplyees added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function leave_salary_account_review()
    {
        $masterID = $this->uri->segment(3);
        $masterData = $this->db->get_where('srp_erp_pay_leaveencashment', ['masterID' => $masterID])->row_array();

        $data['masterData'] = $masterData;
        $trCurrID = $masterData['trCurrencyID'];
        $trCurr = get_currency_code($trCurrID);
        $trDPlace = $masterData['trDPlace'];
        $companyID = current_companyID();
        $pay_control_amount = 0;

        $records = $this->db->query("SELECT chAcc.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,  
                                    subCategory, seg_tb.segmentCode, SUM(amount) amount, trCurrencyID
                                    FROM srp_erp_pay_leaveencashmentsalarydetails AS le_det
                                    JOIN srp_employeesdetails AS emp_tb ON emp_tb.EIdNo = le_det.empID
                                    JOIN srp_erp_segment AS seg_tb ON seg_tb.segmentID = emp_tb.segmentID
                                    JOIN srp_erp_chartofaccounts AS chAcc ON chAcc.GLAutoID = le_det.GLAutoID
                                    WHERE le_det.encash_masterID = {$masterID} AND chAcc.companyID = {$companyID}
                                    GROUP BY emp_tb.segmentID, le_det.GLAutoID ")->result_array();
        if (!empty($records)) {
            foreach ($records as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $pay_control_amount += $amount;
                $detail[] = [
                    'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'], 'GLCode' => $row['GLSecondaryCode'],
                    'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,
                    'transactionAmount' => $amount, 'transactionCurrency' => $trCurr, 'segmentCode' => $row['segmentCode']
                ];
            }
        }


        /************  Company Payroll Control Account ID  *************/
        $payrollCA = $this->db->query("SELECT GLAutoID, systemAccountCode, GLSecondaryCode, GLDescription, subCategory FROM srp_erp_chartofaccounts
                                    WHERE GLAutoID = (
                                       SELECT GLAutoID FROM srp_erp_companycontrolaccounts WHERE controlAccountType = 'PCA' AND companyID = {$companyID}
                                    ) AND companyID={$companyID} ")->row_array();

        $pay_control_amount *= -1;
        $amount_type = $amount_type = ($pay_control_amount > 0) ? 'dr' : 'cr';

        $detail[] = [
            'GLAutoID' => $payrollCA['GLAutoID'], 'systemGLCode' => $payrollCA['systemAccountCode'], 'GLCode' => $payrollCA['GLSecondaryCode'],
            'GLDescription' => $payrollCA['GLDescription'], 'GLType' => $payrollCA['subCategory'], 'amount_type' => $amount_type,
            'transactionAmount' => $pay_control_amount, 'transactionCurrency' => $trCurr, 'segmentCode' => ''
        ];

        $data['dPlace'] = $trDPlace;
        $data['trCurr'] = $trCurr;
        $data['detail'] = $detail;
        $html = $this->load->view('system/hrm/print/leave-salary-account-review', $data, true);

        $this->load->library('pdf');
        $status = ($masterData['confirmedYN'] == 1) ? $masterData['approvedYN'] : $masterData['confirmedYN'];
        $this->pdf->printed($html, 'A4', $status, null);
    }

    function leave_salary_GL_entries($masterID, $masterData)
    {

        $documentCode = $masterData['documentCode'];
        $docDate = $masterData['encashment_date'];
        $docYear = date('Y', strtotime($docDate));
        $docMonth = date('m', strtotime($docDate));
        $narration = $masterData['narration'];
        $confByID = $masterData['confirmedByEmpID'];
        $confBy = $masterData['confirmedByName'];
        $confDate = $masterData['confirmedDate'];
        $appByID = $masterData['approvedByEmpID'];
        $appBy = $masterData['approvedByEmpName'];
        $appDate = $masterData['approvedDate'];

        $trCurrID = $masterData['trCurrencyID'];
        $trCurr = get_currency_code($trCurrID);
        $trDPlace = $masterData['trDPlace'];
        $locCurrID = $masterData['localCurrencyID'];
        $locCurr = get_currency_code($locCurrID);
        $locDPlace = $masterData['localDPlace'];
        $locER = $masterData['localCurrencyER'];
        $rptCurrID = $masterData['trCurrencyID'];
        $rptCurr = get_currency_code($rptCurrID);
        $rptDPlace = $masterData['rptDPlace'];
        $rptER = $masterData['rptCurrencyER'];

        $companyID = current_companyID();
        $companyCode = current_companyCode();
        $userGroup = current_user_group();
        $pc = current_pc();
        $userID = current_userID();
        $dateTime = current_date();
        $userName = current_employee();


        $records = $this->db->query("SELECT chAcc.GLAutoID, chAcc.GLDescription, systemAccountCode, GLSecondaryCode,  
                                    subCategory, emp_tb.segmentID, seg_tb.segmentCode, SUM(amount) AS amount
                                    FROM srp_erp_pay_leaveencashmentsalarydetails AS le_det
                                    JOIN srp_employeesdetails AS emp_tb ON emp_tb.EIdNo = le_det.empID
                                    JOIN srp_erp_segment AS seg_tb ON seg_tb.segmentID = emp_tb.segmentID
                                    JOIN srp_erp_chartofaccounts AS chAcc ON chAcc.GLAutoID = le_det.GLAutoID
                                    WHERE le_det.encash_masterID = {$masterID} AND chAcc.companyID = {$companyID}
                                    GROUP BY emp_tb.segmentID, le_det.GLAutoID ")->result_array();
        $detail = [];
        if (!empty($records)) {
            foreach ($records as $row) {
                $amount = $row['amount'];
                $amount_type = ($amount > 0) ? 'dr' : 'cr';
                $detail[] = [
                    'documentCode' => 'LEC', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
                    'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $row['GLAutoID'], 'systemGLCode' => $row['systemAccountCode'],
                    'GLCode' => $row['GLSecondaryCode'], 'GLDescription' => $row['GLDescription'], 'GLType' => $row['subCategory'], 'amount_type' => $amount_type,

                    'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

                    'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
                    'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

                    'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
                    'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

                    'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

                    'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
                    'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => $row['segmentID'], 'segmentCode' => $row['segmentCode']
                ];
            }
        }


        $this->db->insert_batch('srp_erp_generalledger', $detail);

        /************  Company Payroll Control Account ID  *************/
        $payrollCA = $this->db->query("SELECT GLAutoID, systemAccountCode, GLSecondaryCode, GLDescription, subCategory FROM srp_erp_chartofaccounts
                                    WHERE GLAutoID = (
                                       SELECT GLAutoID FROM srp_erp_companycontrolaccounts WHERE controlAccountType = 'PCA' AND companyID = {$companyID}
                                    ) AND companyID={$companyID} ")->row_array();

        $amount = $this->db->query("SELECT SUM(transactionAmount) trAmount FROM srp_erp_generalledger WHERE documentMasterAutoID={$masterID} 
                                    AND documentCode = 'LEC' AND companyID={$companyID} ")->row('trAmount');
        $amount *= -1;
        $amount_type = ($amount > 0) ? 'dr' : 'cr';

        $detail = [
            'documentCode' => 'LEC', 'documentMasterAutoID' => $masterID, 'documentSystemCode' => $documentCode, 'documentDate' => $docDate, 'documentYear' => $docYear,
            'documentMonth' => $docMonth, 'documentNarration' => $narration, 'GLAutoID' => $payrollCA['GLAutoID'], 'systemGLCode' => $payrollCA['systemAccountCode'],
            'GLCode' => $payrollCA['GLSecondaryCode'], 'GLDescription' => $payrollCA['GLDescription'], 'GLType' => $payrollCA['subCategory'], 'amount_type' => $amount_type,

            'transactionAmount' => $amount, 'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurr, 'transactionCurrencyDecimalPlaces' => $trDPlace, 'transactionExchangeRate' => 1,

            'companyLocalAmount' => round(($amount / $locER), $locDPlace), 'companyLocalCurrencyID' => $locCurrID, 'companyLocalCurrency' => $locCurr,
            'companyLocalCurrencyDecimalPlaces' => $locDPlace, 'companyLocalExchangeRate' => $locER,

            'companyReportingAmount' => round(($amount / $rptER), $rptDPlace), 'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurr,
            'companyReportingCurrencyDecimalPlaces' => $rptDPlace, 'companyReportingExchangeRate' => $rptER,

            'confirmedByEmpID' => $confByID, 'confirmedByName' => $confBy, 'confirmedDate' => $confDate, 'approvedbyEmpID' => $appByID, 'approvedbyEmpName' => $appBy, 'approvedDate' => $appDate,

            'companyID' => $companyID, 'companyCode' => $companyCode, 'createdUserGroup' => $userGroup, 'createdPCID' => $pc, 'createdUserID' => $userID,
            'createdDateTime' => $dateTime, 'createdUserName' => $userName, 'segmentID' => null, 'segmentCode' => null
        ];

        $this->db->insert('srp_erp_generalledger', $detail);

    }

    function fetch_employee_assets()
    {
        $empID = $this->input->post('empID');
        $frm_profile = $this->uri->segment(3);
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $data['empID'] = $empID;
        $data['is_frm_profile'] = ($frm_profile == 'frm_profile') ? 1 : 0;


        $data['asset_det'] = $this->db->query("SELECT mas_tb.masterID, mas_tb.description, asset_serial_no, returnComment, type_tb.assetType, 
                                               cond_tb.description AS con_des, mas_tb.assetTypeID, mas_tb.assetConditionID, returnStatus,
                                               DATE_FORMAT(handOverDate,'{$convertFormat}') AS handOverDate, 
                                               DATE_FORMAT(returnDate,'{$convertFormat}') AS returnDate
                                               FROM srp_erp_pay_assets AS mas_tb
                                               JOIN srp_erp_pay_assettype AS type_tb ON type_tb.id = mas_tb.assetTypeID                                                     
                                               JOIN srp_erp_pay_assetcondition AS cond_tb ON cond_tb.id = mas_tb.assetConditionID                                                     
                                               WHERE mas_tb.companyID={$companyID} AND mas_tb.empID={$empID} ")->result_array();

        $this->load->view('system/hrm/ajax/employee-assets-view', $data);
    }

    public function new_assets_category()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $description = trim($this->input->post('description') ?? '');
        $companyID = current_companyID();
        $isExist = $this->db->query("SELECT id FROM srp_erp_pay_assettype WHERE companyID={$companyID} AND assetType='{$description}'")->row('id');

        if (isset($isExist)) {
            die(json_encode(['e', 'This asset category is already exists']));
        }

        $date_time = current_date();
        $data = [
            'assetType' => $description,
            'companyID' => current_companyID(),
            'createdUserGroup' => current_user_group(),
            'createdPCID' => current_pc(),
            'createdUserID' => current_userID(),
            'createdDateTime' => $date_time,
            'timestamp' => $date_time
        ];

        $this->db->insert('srp_erp_pay_assettype', $data);
        if ($this->db->affected_rows() > 0) {
            $titleID = $this->db->insert_id();
            echo json_encode(['s', 'Asset category is created successfully.', 'id' => $titleID, 'description' => $description]);
        } else {
            echo json_encode(['e', 'Error in asset category creating process']);
        }
    }

    function save_emp_assets()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('description', 'Description', 'trim|required');
        $this->form_validation->set_rules('asset_category', 'Category', 'trim|required');
        $this->form_validation->set_rules('serial_no', 'Serial no', 'trim|required');
        $this->form_validation->set_rules('condition_id', 'Condition', 'trim|required');
        $this->form_validation->set_rules('hand_over_date', 'Date', 'trim|required');
        $is_returned = $this->input->post('is_returned');

        if ($is_returned == 1) {
            $this->form_validation->set_rules('returned_date', 'Returned Date', 'trim|required');
            $this->form_validation->set_rules('returnComment', 'Return comment', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $description = $this->input->post('description');
        $asset_category = $this->input->post('asset_category');
        $serial_no = $this->input->post('serial_no');
        $condition_id = $this->input->post('condition_id');
        $hand_over_date = $this->input->post('hand_over_date');
        $returnDate = $this->input->post('returned_date');
        $returnComment = $this->input->post('returnComment');

        $hand_over_date = input_format_date($hand_over_date, date_format_policy());
        $returnDate = (empty($returnDate)) ? null : input_format_date($returnDate, date_format_policy());

        if ($is_returned == 0 || empty($is_returned)) {
            $returnDate = null;
            $returnComment = '';
            $is_returned = 0;
        }

        if (empty($returnDate)) {
            $returnDate = null;
        } else {
            $returnDate = input_format_date($returnDate, date_format_policy());

            if ($returnDate < $hand_over_date) {
                die(json_encode(['e', 'Retun date shold be greater than or equal to hand over date.']));
            }
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $user_group = current_user_group();

        $int_data = [
            'empID' => $empID, 'description' => $description, 'assetTypeID' => $asset_category, 'asset_serial_no' => $serial_no,
            'assetConditionID' => $condition_id, 'handOverDate' => $hand_over_date, 'returnStatus' => $is_returned,
            'returnDate' => $returnDate, 'returnComment' => $returnComment, 'companyID' => $companyID, 'createdUserGroup' => $user_group,
            'createdPCID' => $pc, 'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_pay_assets', $int_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Assets added successfully']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function edit_emp_assets()
    {
        $this->form_validation->set_rules('asset_id', 'Auto ID', 'trim|required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('description', 'Description', 'trim|required');
        $this->form_validation->set_rules('asset_category', 'Category', 'trim|required');
        $this->form_validation->set_rules('serial_no', 'Serial no', 'trim|required');
        $this->form_validation->set_rules('condition_id', 'Condition', 'trim|required');
        $this->form_validation->set_rules('hand_over_date', 'Hand over date', 'trim|required');
        $is_returned = $this->input->post('is_returned');

        if ($is_returned == 1) {
            $this->form_validation->set_rules('returned_date', 'Returned Date', 'trim|required');
            $this->form_validation->set_rules('returnComment', 'Return comment', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $asset_id = $this->input->post('asset_id');
        $empID = $this->input->post('empID');
        $description = $this->input->post('description');
        $asset_category = $this->input->post('asset_category');
        $serial_no = $this->input->post('serial_no');
        $condition_id = $this->input->post('condition_id');
        $hand_over_date = $this->input->post('hand_over_date');
        $returnDate = $this->input->post('returned_date');
        $returnComment = $this->input->post('returnComment');

        if ($is_returned == 0 || empty($is_returned)) {
            $returnDate = null;
            $returnComment = '';
            $is_returned = 0;
        }

        $hand_over_date = input_format_date($hand_over_date, date_format_policy());
        if (empty($returnDate)) {
            $returnDate = null;
        } else {
            $returnDate = input_format_date($returnDate, date_format_policy());

            if ($returnDate < $hand_over_date) {
                die(json_encode(['e', 'Retun date shold be greater than or equal to hand over date.']));
            }
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $int_data = [
            'description' => $description, 'assetTypeID' => $asset_category, 'asset_serial_no' => $serial_no,
            'assetConditionID' => $condition_id, 'handOverDate' => $hand_over_date, 'returnStatus' => $is_returned,
            'returnDate' => $returnDate, 'returnComment' => $returnComment,
            'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->where(['empID' => $empID, 'masterID' => $asset_id])->update('srp_erp_pay_assets', $int_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Assets updated successfully']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function delete_employee_assets()
    {
        $this->form_validation->set_rules('asset_id', 'ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $asset_id = $this->input->post('asset_id');

        $this->db->where('companyID', current_companyID())->where('masterID', $asset_id)->delete('srp_erp_pay_assets');

        if ($this->db->affected_rows() > 0) {
            echo json_encode(['s', 'Record deleted']);
        } else {
            echo json_encode(['e', 'Error in record delete process']);
        }
    }

    public function sendProgress($percentage) {
        if($percentage > 0){
            echo '@';
            flush();
            if (ob_get_level() > 0) {
                ob_flush();
            }
        }
    }


    function my_profile_load_attendance_view()
    {
      
        $this->form_validation->set_rules('from_date', 'From date', 'trim|required');
        $this->form_validation->set_rules('to_date', 'To date', 'trim|required');
        $this->form_validation->set_rules('request-type', 'Request Type', 'trim|required');
        $this->form_validation->set_rules('att_type[]', 'Present Type', 'trim|required');

        $request_type = $this->input->post('request-type');
        if ($request_type == 'my_employee') {
            $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $request_type = $this->input->post('request-type');
        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $date_format_policy = date_format_policy();
        $fromDate = input_format_date($from_date, $date_format_policy);
        $toDate = input_format_date($to_date, $date_format_policy);

        if ($fromDate > $toDate) {
            die(json_encode(['e', 'To date should be greater than from date']));
        }

        $emp_id = current_userID();
        $companyID = current_companyID();
        $att_type_arr = $this->input->post('att_type');
        $att_type_list = implode(',', $att_type_arr);

        if ($request_type == 'my_employee') {
            $emp_id_arr = $this->input->post('empID');
            $emp_id_list = implode(',', $emp_id_arr);

            //pull up employee weekends
            $employee_weekends = get_employee_defined_weekends($from_date,$to_date,$emp_id_arr);

         

            $att_rec = $this->db->query("SELECT isWeekEndDay,approvedComment,approvedYN,confirmedYN,empID,ECode, Ename2,empMachineID, floorDescription, ID, machineID, att_rev.floorID, attendanceDate, 
                                     presentTypeID,checkInDate,checkOutDate,isShiftNextDay,specialOThours,DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, 
                                     DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours,normalDay,mustCheck,normalTime, weekend, holiday, NDaysOT, weekendOTHours, 
                                     holidayOTHours,realTime#, att_rev.empComment
                                     FROM srp_erp_pay_empattendancereview AS att_rev
                                     JOIN srp_employeesdetails ON att_rev.empID = srp_employeesdetails.EIdNo
                                     LEFT JOIN srp_erp_pay_floormaster ON srp_erp_pay_floormaster.floorID = att_rev.floorID 
                                     WHERE empID IN ({$emp_id_list}) AND attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' AND att_rev.companyID = {$companyID} 
                                     AND (EXISTS (
                                          SELECT manger_tb.empID FROM srp_erp_employeemanagers AS manger_tb WHERE active = 1 AND managerID = {$emp_id} 
                                          AND companyID = {$companyID} AND manger_tb.empID = att_rev.empID
                                     ) OR EXISTS (SELECT assign_tb.empID 
	                                FROM	srp_erp_employee_attendees AS assign_tb	WHERE	empID = {$emp_id}	AND companyID = {$companyID}	
                                    AND assign_tb.attendeeID = att_rev.empID )) AND att_rev.presentTypeID IN ({$att_type_list})")->result_array();

            $base_arr = array();
            if($employee_weekends){

                // print_r($employee_weekends); exit;
                foreach($att_rec as $attendance_weekend){
                    if(isset($employee_weekends[$attendance_weekend['empID']])){
                        $employee_weekends_arr = $employee_weekends[$attendance_weekend['empID']];
                    
                        foreach($employee_weekends_arr as $weekend_date){
                            $base_arr[$attendance_weekend['empID']][$weekend_date] = fetch_send_employee_weekend_arr($weekend_date,$attendance_weekend);
                        }
                    }
                 
                }
          
                foreach($att_rec as $attendance_record){
                    $base_arr[$attendance_record['empID']][$attendance_record['attendanceDate']] = $attendance_record;
                }
            }

         

            $base_att_rec = array();
            foreach($base_arr as $emp_arr){
                ksort($emp_arr);
                foreach($emp_arr as $date_value){
                    $base_att_rec[] = $date_value;
                }
            }  

            if(!empty($base_att_rec)){
                $att_rec = $base_att_rec;
            }

        } else {

         

            $att_rec = $this->db->query("SELECT isWeekEndDay,approvedComment,approvedYN,confirmedYN,empID,ECode, Ename2,empMachineID, floorDescription, ID, machineID, att_rev.floorID, attendanceDate, 
                                     presentTypeID,checkInDate,checkOutDate,isShiftNextDay,specialOThours,DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, 
                                     DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours,normalDay,mustCheck,normalTime, weekend, holiday, NDaysOT, weekendOTHours, 
                                     holidayOTHours,realTime#, att_rev.empComment
                                     FROM srp_erp_pay_empattendancereview AS att_rev
                                     JOIN srp_employeesdetails ON att_rev.empID = srp_employeesdetails.EIdNo
                                     LEFT JOIN srp_erp_pay_floormaster ON srp_erp_pay_floormaster.floorID = att_rev.floorID 
                                     WHERE empID = {$emp_id} AND attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' AND att_rev.companyID = {$companyID} 
                                     AND att_rev.presentTypeID IN ({$att_type_list})")->result_array();
          
        
        }



        if (empty($att_rec)) {
            die(json_encode(['e', 'No record found.']));
        }
        


        $data['att_rec'] = $att_rec;
        $data['is_edit'] = true;

        $view = $this->load->view('system/profile/ajax/attendance-view-ajax', $data, true);
        echo json_encode(['s', 'view' => $view]);

    }

    function my_profile_load_attendance_shift_view()
    {
   
        $request_type = $this->input->post('request-type');
        if ($request_type == 'my_employee') {
            $this->form_validation->set_rules('empIDShift[]', 'Employee', 'trim|required');
        }

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $request_type = $this->input->post('request-type');
        $from_date = $this->input->post('from_date_shift');
        $to_date = $this->input->post('to_date_shift');
        $emp_id_arr = $this->input->post('empIDShift');
        $active_state = $this->input->post('status');
        $date_format_policy = date_format_policy();
        $fromDate = input_format_date($from_date, $date_format_policy);
        $toDate = input_format_date($to_date, $date_format_policy);

        if ($fromDate > $toDate) {
            die(json_encode(['e', 'To date should be greater than from date']));
        }

        $emp_str = join(',',$emp_id_arr);

        $emp_id = current_userID();
        $companyID = current_companyID();

        $date = date('Y-m-d');

        if($active_state == 2){
            $active_str = "AND empShift.endDate < '{$date}'";
        }else{
            $active_str = "AND empShift.endDate >= '{$date}'";
        }

        $employee_shift = $this->db->query("
            SELECT
                empShift.startDate,empShift.endDate,srp_employeesdetails.EIdNo,srp_employeesdetails.Ename1,srp_employeesdetails.ECode,shiftMaster.Description,empShift.autoID
            FROM
                srp_erp_pay_shiftemployees AS empShift
            LEFT JOIN srp_employeesdetails ON srp_employeesdetails.EIdNo = empShift.empID
            INNER JOIN srp_erp_pay_shiftmaster as shiftMaster ON empShift.shiftID = shiftMaster.shiftID
            AND (EXISTS (
                    SELECT
                        manger_tb.empID,manger_tb.managerID
                    FROM
                        srp_erp_employeemanagers AS manger_tb 
                    WHERE
                        active = 1 
                        AND managerID = '{$emp_id}' 
                        AND companyID = '{$companyID}'  
                    AND manger_tb.empID = empShift.empID 
            ) or EXISTS(SELECT
            assign_tb.empID 
        FROM
            srp_erp_employee_attendees AS assign_tb
        WHERE
            empID =  '{$emp_id}'
            AND companyID = '{$companyID}' 
            AND assign_tb.attendeeID = empShift.empID ))
            WHERE
                empShift.companyID = '{$companyID}' {$active_str} AND srp_employeesdetails.EIdNo IS NOT NULL AND srp_employeesdetails.EIdNo IN ($emp_str)

        ")->result_array();

        //


        if (empty($employee_shift)) {
            // die(json_encode(['e', 'No active records found.']));
        }

        $data['att_rec'] = $employee_shift;
        $data['is_edit'] = true;
        $data['state'] = $active_state;

        $view = $this->load->view('system/profile/ajax/attendance-view-shift-ajax', $data, true);
        echo json_encode(['s', 'view' => $view]);


    }

    function load_attendance_view()
    {
        if (ob_get_level() > 0) {
            ob_end_clean();
        }

        $this->form_validation->set_rules('from_date', 'From date', 'trim|required');
        $this->form_validation->set_rules('to_date', 'To date', 'trim|required');
        $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('att_type[]', 'Present Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $emp_id_arr = $this->input->post('empID');
        $emp_id_list = implode(',', $emp_id_arr);
        $date_format_policy = date_format_policy();
        $fromDate = input_format_date($from_date, $date_format_policy);
        $toDate = input_format_date($to_date, $date_format_policy);

        if ($fromDate > $toDate) {
            die(json_encode(['e', 'To date should be greater than from date']));
        }

        $companyID = current_companyID();
        $requestType = $this->uri->segment(3);
        $att_type_arr = $this->input->post('att_type');
        $department = $this->input->post('department_type');
        $feedback_progress = 1;
        
        if($requestType == 'excel'){
            $feedback_progress = 0;
        }

        $att_type_list = implode(',', $att_type_arr);

        $department_list = null;
        if($department){
            $department_list = implode(',', $department);
        }
    
        $department_str = '';
        $department_join = '';
        if($department_list){
            $department_str = " AND dep.DepartmentMasterID IN ({$department_list}) ";
            $department_join = ' LEFT JOIN (
                SELECT EmpID,DepartmentMasterID
                FROM srp_empdepartments as emp_dep
                WHERE emp_dep.isPrimary = 1
             ) dep ON dep.EmpID = srp_employeesdetails.EIdNo ';
        }

        $employee_weekends = get_employee_defined_weekends($from_date,$to_date,$emp_id_arr);

        $this->sendProgress($feedback_progress);

        $att_rec = $this->db->query("SELECT isWeekEndDay,approvedComment,approvedYN,att_rev.confirmedYN as confirmedYN ,att_rev.empID,ECode, Ename2,empMachineID, floorin.floorDescription AS clockinFloorDescription, ID, machineID, att_rev.floorID, attendanceDate, 
                                     att_rev.presentTypeID AS presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, 
                                     DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours,normalDay,mustCheck,normalTime, weekend, holiday, NDaysOT, weekendOTHours, 
                                     holidayOTHours,realTime,srp_sys_attpresenttype.PresentTypeDes as PresentTypeDes, flootout.floorDescription AS  clockoutFloorDescription
                                     FROM srp_erp_pay_empattendancereview AS att_rev
                                     JOIN srp_employeesdetails ON att_rev.empID = srp_employeesdetails.EIdNo
                                     LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = att_rev.floorID 
                                     LEFT JOIN srp_erp_pay_floormaster  flootout ON flootout.floorID = att_rev.clockoutFloorID
                                     LEFT JOIN srp_sys_attpresenttype ON srp_sys_attpresenttype.PresentTypeID = att_rev.PresentTypeID 
                                     {$department_join}
                                     WHERE att_rev.empID IN ({$emp_id_list}) {$department_str} AND attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' AND att_rev.companyID = {$companyID} AND att_rev.presentTypeID IN ({$att_type_list}) ORDER BY empID,attendanceDate")->result_array();

        $this->sendProgress($feedback_progress);

        $base_arr = array();
        if($employee_weekends){

            // print_r($employee_weekends); exit;
            foreach($att_rec as $attendance_weekend){
                if(isset($employee_weekends[$attendance_weekend['empID']])){
                    $employee_weekends_arr = $employee_weekends[$attendance_weekend['empID']];
                
                    foreach($employee_weekends_arr as $weekend_date){
                        $base_arr[$attendance_weekend['empID']][$weekend_date] = fetch_send_employee_weekend_arr($weekend_date,$attendance_weekend);
                    }
                }
            
            }

            foreach($att_rec as $attendance_record){
                $base_arr[$attendance_record['empID']][$attendance_record['attendanceDate']] = $attendance_record;
            }
        }

        $this->sendProgress($feedback_progress);
        
        $base_att_rec = array();
        foreach($base_arr as $emp_arr){
            ksort($emp_arr);
            foreach($emp_arr as $date_value){
                $base_att_rec[] = $date_value;
            }
        }  

        if(!empty($base_att_rec)){
            $att_rec = $base_att_rec;
        }

        $this->sendProgress($feedback_progress);

        $data['att_rec'] = $att_rec;
        $data['is_edit'] = true;

        // $view = $this->load->view('system/hrm/report/ajax/attendance-view-report-ajax', $data, true);
        // echo json_encode(['s', 'view' => $view]);


        if ($requestType == 'excel') {
            $data['file_name'] = 'Attendance '.date('Y - F', strtotime($fromDate)).' - '.date('Y - F', strtotime($toDate));
            return $this->excel_attendance_report($data);
        } else {
            $view = $this->load->view('system/hrm/report/ajax/attendance-view-report-ajax', $data, true);
            echo json_encode(['s', 'view' => $view]);
    
        }
    }

    function load_attendance_view_simple()
    {
        $this->form_validation->set_rules('from_date', 'From date', 'trim|required');
        $this->form_validation->set_rules('to_date', 'To date', 'trim|required');
        $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');
        $this->form_validation->set_rules('att_type[]', 'Present Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $emp_id_arr = $this->input->post('empID');
        $emp_id_list = implode(',', $emp_id_arr);
        $date_format_policy = date_format_policy();
        $fromDate = input_format_date($from_date, $date_format_policy);
        $toDate = input_format_date($to_date, $date_format_policy);

        if ($fromDate > $toDate) {
            die(json_encode(['e', 'To date should be greater than from date']));
        }

        $companyID = current_companyID();
        $requestType = $this->uri->segment(3);
        $att_type_arr = $this->input->post('att_type');
        $att_type_list = implode(',', $att_type_arr);
        $att_rec = $this->db->query("SELECT isWeekEndDay,approvedComment,approvedYN,att_rev.confirmedYN as confirmedYN ,empID,ECode, Ename2,empMachineID, floorin.floorDescription AS clockinFloorDescription, ID, machineID, att_rev.floorID, attendanceDate, 
                                     att_rev.presentTypeID AS presentTypeID, DATE_FORMAT(checkIn, '%h:%i %p') checkIn, DATE_FORMAT(checkOut, '%h:%i %p') checkOut, DATE_FORMAT(onDuty, '%h:%i %p') onDuty, 
                                     DATE_FORMAT(offDuty, '%h:%i %p') offDuty, lateHours, earlyHours, OTHours,normalDay,mustCheck,normalTime, weekend, holiday, NDaysOT, weekendOTHours, 
                                     holidayOTHours,realTime,srp_sys_attpresenttype.PresentTypeDes as PresentTypeDes, flootout.floorDescription AS  clockoutFloorDescription
                                     FROM srp_erp_pay_empattendancereview AS att_rev
                                     JOIN srp_employeesdetails ON att_rev.empID = srp_employeesdetails.EIdNo
                                     LEFT JOIN srp_erp_pay_floormaster floorin ON floorin.floorID = att_rev.floorID 
                                     LEFT JOIN srp_erp_pay_floormaster  flootout ON flootout.floorID = att_rev.clockoutFloorID
                                     LEFT JOIN srp_sys_attpresenttype ON srp_sys_attpresenttype.PresentTypeID = att_rev.PresentTypeID 
                                     WHERE empID IN ({$emp_id_list}) AND attendanceDate BETWEEN '{$fromDate}' AND '{$toDate}' AND att_rev.companyID = {$companyID} AND att_rev.presentTypeID IN ({$att_type_list})")->result_array();

        $data['att_rec'] = $att_rec;
        $data['is_edit'] = true;

        // $view = $this->load->view('system/hrm/report/ajax/attendance-view-report-ajax', $data, true);
        // echo json_encode(['s', 'view' => $view]);

        if ($requestType == 'excel') {
            $data['file_name'] = 'Attendance '.date('Y - F', strtotime($fromDate)).' - '.date('Y - F', strtotime($toDate));
            return $this->excel_attendance_report($data);
        } else {
            $view = $this->load->view('system/hrm/report/ajax/attendance-view-report-ajax-simple', $data, true);
            echo json_encode(['s', 'view' => $view]);
    
        }
    }

    function excel_attendance_report($data){
        $primaryLanguage = getPrimaryLanguage();
        $this->lang->load('common', $primaryLanguage);
        $this->lang->load('hrms_attendance', $primaryLanguage);
        $this->load->library('excel');
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Attendance report');

        $this->excel->getActiveSheet()->fromArray([current_companyName()], null, 'A1');
        $this->excel->getActiveSheet()->mergeCells('A1:E1');
        $this->excel->getActiveSheet()->mergeCells("A2:E2");

        $this->excel->getActiveSheet()->getStyle('A1')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->fromArray(['Attendance List'], null, 'A2');
        $this->excel->getActiveSheet()->getStyle('A2')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->getStyle('A4:Y4')->getFont()->setBold(true)->setSize(11)->setName('Calibri');
        $this->excel->getActiveSheet()->getStyle('A4:Y4')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $this->excel->getActiveSheet()->getStyle('A4:Y4')->getFill()->setFillType(Fill::FILL_SOLID)->getStartColor()->setRGB('cee2f3');

        $header = [
            '#',
            $this->lang->line('common_status'),
            $this->lang->line('common_comment'),
            $this->lang->line('hrms_attendance_employee_code'),
            $this->lang->line('hrms_attendance_employee_name'),
            $this->lang->line('common_date'),
            //$this->lang->line('hrms_attendance_floor'),
            'Location in',
            'Location Out',
            $this->lang->line('hrms_attendance_on_duty_time'),
            $this->lang->line('hrms_attendance_off_duty_time'),
            $this->lang->line('hrms_attendance_clock_in'),
            $this->lang->line('hrms_attendance_clock_out'),
            $this->lang->line('hrms_attendance_real_time'),
            $this->lang->line('hrms_attendance_present'),
            $this->lang->line('hrms_attendance_late') ,
            $this->lang->line('hrms_attendance_early'),
            $this->lang->line('hrms_attendance_over_time'),
            $this->lang->line('hrms_attendance_work_time'),
            $this->lang->line('hrms_attendance_att_time'),
            $this->lang->line('hrms_attendance_normal_day'),
            $this->lang->line('hrms_attendance_weekend'),
            $this->lang->line('hrms_attendance_holiday'),
            $this->lang->line('hrms_attendance_ndays_ot') ,
            $this->lang->line('hrms_attendance_weekend_ot'),
            $this->lang->line('hrms_attendance_holiday_ot'),
        ];
        $this->excel->getActiveSheet()->fromArray($header, null, 'A4');

        $det = [];
        $att_data = $data['att_rec'];
        if(empty($att_data)){
            $det[] =  $this->lang->line('common_no_records_found');
        }
        else{
            $n = 5;
            foreach ($att_data as $key=>$row){
                if ($row['approvedYN'] == 1){
                    $status = 'Approved';
                }else if ($row['confirmedYN'] == 1){
                    $status = 'Confirmed';
                }else{
                    $status = 'Open';
                }

                $onDuty = ($row['onDuty'] == null) ? '-not set-' : $row['onDuty'];
                $offDuty = ($row['offDuty'] == null) ? '-not set-' : $row['offDuty'];

                $totWorkingHours = '';
                $attendhours = '';
                $isAllSet = 0;
                if ($row['checkIn'] != null && $row['checkOut'] != null && $row['offDuty'] != null) {
                    $datetime1 = new DateTime($row['offDuty']);

                    if($row['onDuty'] >=$row['checkIn']){
                        $datetime2= new DateTime($row['onDuty']);
                    }else{
                        $datetime2 = new DateTime($row['checkIn']);
                    }
                    $totWorkingHours_obj = $datetime1->diff($datetime2);
                    $totWorkingHours = $totWorkingHours_obj->format('%h') . " h " . $totWorkingHours_obj->format('%i') . " m";
                }
                if ($row['checkIn'] != null && $row['checkOut'] != null) {
                    $datetime1 = new DateTime($row['checkIn']);
                    $datetime2 = new DateTime($row['checkOut']);
                    $attendhours_obj = $datetime1->diff($datetime2);
                    $attendhours = $attendhours_obj->format('%h') . " h " . $attendhours_obj->format('%i') . " m";
                } else {
                    $isAllSet += 1;
                }

                $det[] = [
                    ($key+1),$status ,$row['approvedComment'], $row['ECode'],$row['Ename2'], $row['attendanceDate'],
                    $row['clockinFloorDescription'],$row['clockoutFloorDescription'], $onDuty,$offDuty, $row['checkIn'], $row['checkOut'],$row['realTime'], 
                    $row['PresentTypeDes'],gmdate("H:i", $row['lateHours'] * 60), gmdate("H:i", $row['earlyHours'] * 60), 
                    gmdate("H:i", $row['OTHours'] * 60), $totWorkingHours, $attendhours,$row['normalDay'],$row['weekend'],
                    $row['holiday'], gmdate("H:i", $row['NDaysOT'] * 60), gmdate("H:i", $row['weekendOTHours'] * 60), 
                    gmdate("H:i", $row['holidayOTHours'] * 60),

                ];
                $n++;
            }

            $this->excel->getActiveSheet()->getStyle("A{$n}:Y{$n}")->getFont()->setBold(true)->setSize(11)->setName('Calibri');
            $this->excel->getActiveSheet()->getStyle("A{$n}:Y{$n}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle("H5:Y{$n}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        }

        $this->excel->getActiveSheet()->fromArray($det, null, 'A5');

        /*ob_clean();
        ob_start();*/
        $filename = $data['file_name'].'.xls';
        header('Content-Type: application/vnd.ms-excel;charset=utf-16');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        $writer = new Xlsx($this->excel);
        $writer->save('php://output');
    }

    function load_attendance_chat()
    {
        $review_id = $this->input->post('review_id');
        $company_id = current_companyID();

        $data['attendance_date'] = $this->input->post('att_date');

        $emp_data = $this->db->select('ECode, Ename2, EmpImage, Gender AS emp_gender')->from('srp_employeesdetails')
            ->where('EIdNo', current_userID())->get()->row_array();

        $data['this_emp_code'] = $emp_data['ECode'];
        $data['this_emp_name'] = $emp_data['Ename2'];

        $chat_data = $this->db->query("SELECT chatTB.chatID, chatTB.createdUserID,empTB.Ename2 AS emp_name, message,   
                                       createdDateTime, EmpImage, chatTB.createdUserID, empTB.Gender AS emp_gender
                                       FROM srp_erp_pay_attendancereviewcomment AS chatTB 
                                       JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = chatTB.createdUserID 
                                       WHERE companyID = {$company_id} AND reviewID = {$review_id}
                                       ORDER BY chatID ASC")->result_array();


        if (!empty($chat_data)) {
            $chat_data_by_img = array_group_by($chat_data, 'createdUserID');

            foreach ($chat_data_by_img as $emp_id => $row) {
                $imgPath = $row[0]['EmpImage'];
                $gender = $row[0]['emp_gender'];
                $imgPath = single_emp_image_s3_with_validation($imgPath, $gender);

                $data['user_img'][$emp_id] = $imgPath;

                if ($emp_id == current_userID()) {
                    $data['this_emp_image'] = $imgPath;
                }
            }
        }

        if (!array_key_exists('this_emp_image', $data)) {
            $data['this_emp_image'] = single_emp_image_s3_with_validation($emp_data['EmpImage'], $emp_data['emp_gender']);
        }

        $data['review_id'] = $review_id;
        $data['chat_arr'] = $chat_data;
        $view = $this->load->view('system/profile/attendance-chat-view', $data, true);

        echo json_encode(['s', 'view' => $view]);
    }

    function update_leave_comment()
    {
        $review_id = $this->input->post('review_id');
        $review_comment = $this->input->post('review_comment');
        $company_id = current_companyID();
        $date_time = current_date();
        $emp_id = current_userID();

        $data = [
            'reviewID' => $review_id, 'message' => $review_comment,
            'companyID' => $company_id, 'createdPCID' => current_pc(), 'createdUserID' => $emp_id,
            'createdDateTime' => $date_time, 'timestamp' => $date_time
        ];

        $this->db->insert('srp_erp_pay_attendancereviewcomment', $data);

        $ch_data = [
            'chatID' => $this->db->insert_id(),
            'ch_time' => date('g:i A', strtotime($date_time)),
            'ch_date' => date('F d', strtotime($date_time)),
            'message' => $review_comment
        ];
        echo json_encode(['s', 'ch_data' => $ch_data]);
    }

    function update_userType()
    {
        echo json_encode($this->Employee_model->update_userType());
    }

    function fetch_hr_letter_requests()
    {
        $companyID = current_companyID();
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $convertFormat = convert_date_format_sql();
        $userID = current_userID();
        $this->datatables->select("request_id,documentCode, confirmedYN,approvedYN, ECode, req.confirmedByEmpID cnEmpID,
            Ename2, req.request_date AS docDate,narration, req.createdUserID AS createdUserID, 
            if(letter_language = 'E', 'English', 'Arabic') AS letter_language, letType.letter_type AS letter_type, address_to ");
        $this->datatables->from('srp_erp_hr_letterrequests req');
        $this->datatables->join('srp_employeesdetails empTB', 'empTB.EIdNo=req.emp_id');
        $this->datatables->join('srp_erp_hr_letters letType', 'letType.id=req.letter_type');
        $this->datatables->where('companyID', $companyID);
        $this->datatables->where('emp_id', $userID);
        $this->datatables->edit_column('request_amount_str', '<div align="right">$1<br>', 'request_amount');
        $this->datatables->add_column('employee', '<b>Emp Code : </b> $1 <br> <b> Emp Name  : </b> $2', 'ECode, Ename2');
        $this->datatables->add_column('confirmed', '$1', 'confirm(confirmedYN)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"HDR",request_id)');
        $this->datatables->add_column('edit', '$1', 'hr_letter_request_action(request_id, confirmedYN, approvedYN, createdUserID, cnEmpID, documentCode)');
        $this->datatables->edit_column('docDate', '<span >$1 </span>', 'convert_date_format(docDate)');

        echo $this->datatables->generate();
    }

    function hr_letter_request_create()
    {
        $this->form_validation->set_rules('emp_id', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('doc_date', 'Date', 'trim|required');
        $this->form_validation->set_rules('letter_type', 'Letter type', 'trim|required');
        $this->form_validation->set_rules('identity_type', 'Identity type', 'trim|required');
        $this->form_validation->set_rules('identity_no', 'Identity No', 'trim|required');
        $letter_type = $this->input->post('letter_type');

        if ($letter_type == 1) {
            $this->form_validation->set_rules('bank_acc', 'Bank Account', 'trim|required');
        }

        $this->form_validation->set_rules('letter_addressed', 'Addressed', 'trim|required');
        $this->form_validation->set_rules('letter_language', 'Language', 'trim|required');
        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $emp_id = $this->input->post('emp_id');
        $doc_date = $this->input->post('doc_date');

        $identity_type = $this->input->post('identity_type');
        $identity_no = $this->input->post('identity_no');
        $letter_addressed = $this->input->post('letter_addressed');
        $letter_language = $this->input->post('letter_language');
        $narration = trim($this->input->post('narration') ?? '');
        $isConfirmed = $this->input->post('isConfirmed');
        $doc_date = input_format_date($doc_date, date_format_policy());
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $user_group = current_user_group();


        $serialNo = $this->db->query("SELECT serial_no FROM srp_erp_hr_letterrequests WHERE companyID = {$companyID} 
                                          ORDER BY request_id DESC LIMIT 1")->row('serial_no');
        $serialNo += 1;

        //Generate template Code
        $this->load->library('sequence');
        $documentCode = $this->sequence->sequence_generator('HDR', $serialNo);


        $update_data = [
            'documentCode' => $documentCode, 'emp_id' => $emp_id, 'request_date' => $doc_date,
            'letter_type' => $letter_type, 'identity_type' => $identity_type, 'identity_no' => $identity_no,
            'address_to' => $letter_addressed, 'letter_language' => $letter_language,
            'narration' => $narration, 'documentID' => 'HDR', 'serial_no' => $serialNo,
            'companyID' => $companyID, 'createdUserGroup' => $user_group, 'createdPCID' => $pc, 'createdUserID' => $userID,
            'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        if ($letter_type == 1) {
            $update_data['bank_acc'] = $this->input->post('bank_acc');
        }

        $this->db->trans_begin();

        $this->db->insert('srp_erp_hr_letterrequests', $update_data);
        $masterID = $this->db->insert_id();

        if ($isConfirmed == 1) {
            $document_status = document_status('HDR', $masterID);
            $response = $this->confirm_hr_letter_request($masterID, $document_status);
            die(json_encode($response));
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'HR Document Request successfully added. [ ' . $documentCode . ' ]']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function hr_letter_request_update()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('doc_date', 'Date', 'trim|required');
        $this->form_validation->set_rules('letter_type', 'Letter type', 'trim|required');

        $letter_type = $this->input->post('letter_type');

        if ($letter_type == 1) {
            $this->form_validation->set_rules('bank_acc', 'Bank Account', 'trim|required');
        }

        $this->form_validation->set_rules('identity_type', 'Identity type', 'trim|required');
        $this->form_validation->set_rules('identity_no', 'Identity No', 'trim|required');
        $this->form_validation->set_rules('letter_addressed', 'Addressed', 'trim|required');
        $this->form_validation->set_rules('letter_language', 'Language', 'trim|required');
        $this->form_validation->set_rules('narration', 'Narration', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $identity_type = $this->input->post('identity_type');
        $identity_no = $this->input->post('identity_no');
        $doc_date = $this->input->post('doc_date');
        $letter_addressed = $this->input->post('letter_addressed');
        $letter_language = $this->input->post('letter_language');
        $narration = trim($this->input->post('narration') ?? '');
        $isConfirmed = $this->input->post('isConfirmed');
        $doc_date = input_format_date($doc_date, date_format_policy());
        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $update_data = [
            'request_date' => $doc_date, 'letter_type' => $letter_type, 'address_to' => $letter_addressed,
            'letter_language' => $letter_language, 'narration' => $narration,
            'identity_type' => $identity_type, 'identity_no' => $identity_no, 'modifiedPCID' => $pc,
            'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $update_data['bank_acc'] = ($letter_type == 1) ? $this->input->post('bank_acc') : 0;


        $this->db->trans_begin();

        $where = ['companyID' => $companyID, 'request_id' => $masterID];
        $this->db->where($where)->update('srp_erp_hr_letterrequests', $update_data);

        $document_status = document_status('HDR', $masterID);

        if ($isConfirmed == 1) {
            $response = $this->confirm_hr_letter_request($masterID, $document_status);
            die(json_encode($response));
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'HR Document Request successfully updated. [ ' . $document_status['data']['docCode'] . ' ]']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function confirm_hr_letter_request($masterID, $document_status)
    {
        $documentName = 'HR Document Request Approval';
        $tableName = 'srp_erp_hr_letterrequests';
        $documentCode = $document_status['data']['docCode'];
        $createdDate = $document_status['data']['createdDate'];

        $validate_code = validate_code_duplication($documentCode, 'documentCode', $masterID,'request_id', 'srp_erp_hr_letterrequests');
        if(!empty($validate_code)) {
            return ['e', 'The document Code Already Exist.(' . $validate_code . ')'];
        }

        $this->load->library('approvals');

        $isAutoApproval = get_document_auto_approval('HDR');
        if ($isAutoApproval == 0) { // If auto approval
            $this->approvals->auto_approve($masterID, $tableName, 'request_id', 'HDR', $documentCode, $createdDate);

            $this->db->trans_complete();
            if ($this->db->trans_status() === true) {
                $this->db->trans_commit();
                return ['s', 'Approved successfully'];
            } else {
                $this->db->trans_rollback();
                return ['e', 'Error in approval process'];
            }
        }

        $approvals_status = $this->approvals->CreateApproval('HDR', $masterID, $documentCode, $documentName, $tableName, 'request_id', 0, $createdDate);

        if ($this->db->trans_status() === false) {
            $this->db->trans_rollback();
            return ['e', 'Something went wrong!, In approval create process'];
        }

        if ($approvals_status == 3) {
            $this->db->trans_rollback();
            return ['w', 'There is no user exists to perform <b>HR Document Request approval</b> for this company.'];
        } elseif ($approvals_status == 1) {

            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                return ['e', 'Something went wrong!, In approval create process'];
            }
            $this->db->trans_commit();
            return ['s', 'Approval created : ' . $documentCode];
        } else {
            $this->db->trans_rollback();
            return ['w', 'some thing went wrong', $approvals_status];
        }
    }

    function hr_letter_request_referBack()
    {
        $masterID = $this->input->post('masterID');
        $document_status = document_status('HDR', $masterID, 1);
        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $documentCode = $document_status['data']['docCode'];
        $is_approved = $document_status['data']['approvalVal'];

        if ($is_approved == 1) {
            echo json_encode(['e', 'This document is already approved.<p>You can not refer back this.']);
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($masterID, 'HDR');
            if ($status == 1) {
                echo json_encode(array('s', $documentCode . ' Referred back successfully.'));
            } else {
                echo json_encode(array('e', $documentCode . ' Error in refer back.'));
            }
        }
    }

    function load_hr_letter_request()
    {
        $masterID = $this->input->post('masterID');
        $data = $this->get_hr_letter_request($masterID);

        if ($data['letter_type'] == 1) {
            $id = $data['bank_acc'];
            $data['bankData'] = $this->db->query("SELECT bankName, accountNo                                
                                 FROM srp_erp_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE acc.id = {$id}")->row_array();
        }

        $data['signature_data'] = $this->get_hr_letter_signature_data($data);

        echo json_encode(['s', 'masterData' => $data]);

    }

    function view_hr_letter_request()
    {
        $masterID = $this->input->post('masterID');
        $masterData = $this->get_hr_letter_request($masterID);
        $data['masterData'] = $masterData;

        if ($masterData['letter_type'] == 1) {
            $id = $masterData['bank_acc'];
            $data['bankData'] = $this->db->query("SELECT bankName, accountNo                                
                                 FROM srp_erp_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE acc.id = {$id}")->row_array();
        }

        $data['signature_data'] = $this->get_hr_letter_signature_data($masterData);

        $view = $this->load->view("system/profile/request-letters-view", $data, true);

        echo $view;

    }

    function request_letter_template_checkAvailability()
    {
        $masterID = $this->input->post('masterID');
        $repData = $this->get_hr_letter_request($masterID);
        if ($repData['letter_language'] == 'A') {
            echo json_encode(array('e', 'Arabic language template is not available'));
        } else {
            echo json_encode(array('s'));
        }
    }

    function print_hr_letter_request()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('masterID');
        $repData = $this->get_hr_letter_request($masterID);

        $emp_id = $repData['emp_id'];
        $data['repData'] = $repData;


        $this->load->library('NumberToWords');
        $this->load->library('pdf');

        $letterTitle = $repData['letter_type_des'] . ' - ' . $repData['ECode'];

        $data['signature'] = $this->get_hr_letter_signature_data($repData, 2);

        if ($repData['letter_type'] == 1) {
            $salary_det = $this->db->query("SELECT SUM(amount) AS grossSalary, transactionCurrency AS trCur
                                    FROM srp_erp_pay_salarydeclartion WHERE employeeNo = {$emp_id}")->row_array();
            $data['salary_det'] = $salary_det;
            $accountNo = $this->db->get_where('srp_erp_pay_salaryaccounts', ['id' => $repData['bank_acc']])->row('accountNo');
            $accountDetails = $this->db->query("SELECT srp_erp_pay_salaryaccounts.bankID,BankName,bnkBranchName
            FROM srp_erp_pay_salaryaccounts LEFT JOIN srp_erp_pay_bankmaster ON srp_erp_pay_bankmaster.bankID = srp_erp_pay_salaryaccounts.bankID AND srp_erp_pay_bankmaster.companyID = $companyID
            WHERE srp_erp_pay_salaryaccounts.id = {$repData['bank_acc']}")->row_array();
            
            $data['accountDetails']= $accountDetails;
            $data['repData']['accountNo'] = $accountNo;
            //$view = $this->load->view("system/profile/print/salary-transfer-letter", $data, true);
            $printlink = print_template_pdf('HSTL','system/profile/print/salary-transfer-letter');
            $view = $this->load->view($printlink, $data, true);
            
            $this->pdf->print_without_footer($view, 'A4', 40, 15, 5, 5, $letterTitle, $letterTitle);
        }

        if ($repData['letter_type'] == 2) {
            $data['repData']['identityDoc'] = ($repData['identity_type'] == 2) ? 'Resident Card/ID No' : 'Passport';
            //$view = $this->load->view("system/profile/print/experience-letter", $data, true);
            $printlink = print_template_pdf('HEL','system/profile/print/experience-letter');
            $view = $this->load->view($printlink, $data, true);
            $this->pdf->print_without_footer($view, 'A4', 60, 15, 5, 5, $letterTitle, $letterTitle);
        }

        if ($repData['letter_type'] == 3) {
            $salary_det = $this->db->query("SELECT salCat.salaryDescription, SUM(amount) AS amount, transactionCurrency,
                                    transactionCurrencyDecimalPlaces AS dPlaces
                                    FROM srp_erp_pay_salarydeclartion AS sDec
                                    JOIN srp_erp_pay_salarycategories AS salCat ON sDec.salaryCategoryID = salCat.salaryCategoryID 
                                    WHERE employeeNo = {$emp_id} GROUP BY sDec.salaryCategoryID")->result_array();
            $data['salary_det'] = $salary_det;
            //$view = $this->load->view("system/profile/print/salary-certificate", $data, true);
            $printlink = print_template_pdf('HSCL','system/profile/print/salary-certificate');
            $view = $this->load->view($printlink, $data, true);
            $this->pdf->print_without_footer($view, 'A4', 50, 15, 5, 5, $letterTitle, $letterTitle);
        }
    }

    function get_hr_letter_request($masterID)
    {
        $company_id = current_companyID();
        $convertFormat = convert_date_format_sql();

        $data = $this->db->query("SELECT documentCode, req.letter_type, address_to, letter_language, narration, 
                              DATE_FORMAT(request_date, '{$convertFormat}') AS request_date, confirmedYN, approvedYN,
                              emp_id, ECode, Ename2, letter_ty_tb.letter_type AS letter_type_des, Gender AS gender,
                              TitleDescription AS empTitle, DesDescription, EDOJ, identity_type, identity_no, bank_acc,
                              signature_empID, req.designationID AS sig_designationID, approvedYN
                              FROM srp_erp_hr_letterrequests AS req
                              JOIN srp_erp_hr_letters AS letter_ty_tb ON letter_ty_tb.id = req.letter_type
                              JOIN srp_employeesdetails AS empTB ON empTB.EIdNo=req.emp_id
                              LEFT JOIN srp_titlemaster ON srp_titlemaster.TitleID = empTB.EmpTitleId
                              LEFT JOIN srp_designation ON srp_designation.DesignationID = empTB.EmpDesignationId
                              WHERE request_id = {$masterID} AND companyID = {$company_id}")->row_array();

        return $data;
    }

    function get_hr_letter_signature_data($data, $is_array = false)
    {
        if (empty($data['signature_empID'])) {
            return '';
        }

        $signature_emp = $data['signature_empID'];
        $designationID = $data['sig_designationID'];

        $signature_emp = $this->db->query("SELECT Ename2 AS empName, CONCAT_WS(' - ', ECode, Ename2) AS empName2                              
                                            FROM srp_employeesdetails WHERE EIdNo = {$signature_emp}")->row('empName');

        $signature_des = $this->db->get_where('srp_designation', ['DesignationID' => $designationID])->row('DesDescription');


        if ($is_array) {
            return ['sigName' => $signature_emp, 'sigDesignation' => $signature_des];
        }

        return $signature_emp . ' ( ' . $signature_des . ' )';
    }

    function get_identityNo()
    {
        $emp_id = $this->input->post('emp_id');
        $identity_type = $this->input->post('identity_type');

        $documentNo = $this->db->query("SELECT documentNo FROM srp_documentdescriptionforms AS frm
                                      JOIN srp_documentdescriptionmaster AS mas ON mas.DocDesID = frm.DocDesID
                                      WHERE frm.PersonID = {$emp_id} AND PersonType = 'E' AND frm.isActive = 1 
                                      AND mas.systemTypeID = {$identity_type}")->row('documentNo');

        if (empty($documentNo)) {
            die(json_encode(['e', 'Identity no not found']));
        }

        echo json_encode(['s', 'documentNo' => $documentNo]);
    }

    function delete_request()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $document_status = document_status('HDR', $masterID);

        if ($document_status['error'] == 1) {
            die(json_encode(['e', $document_status['message']]));
        }

        $companyID = current_companyID();
        $this->db->trans_start();

        $this->db->where(['request_id' => $masterID, 'companyID' => $companyID])->delete('srp_erp_hr_letterrequests');

        $this->db->where('documentSystemCode', $masterID)->where('documentID', 'HDR');
        $this->db->where('companyID', $companyID)->delete('srp_erp_documentattachments');

        $this->db->trans_complete();
        if ($this->db->trans_status() === true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'HR Document Request deleted successfully.']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Error in delete process.']);
        }
    }

    function fetch_hr_letter_requests_approvals()
    {
        $convertFormat = convert_date_format_sql();
        $companyID = current_companyID();

            $where = [
                'approve.documentID' => 'HDR',
                'ap.documentID' => 'HDR'
                //'approve.approvedYN' => $status
            ];

            $this->datatables->select("request_id,req.documentCode AS documentCode, confirmedYN, approve.approvedYN AS approvedYN,
            Ename2, DATE_FORMAT(req.request_date, '{$convertFormat}') AS docDate,narration, req.createdUserID AS createdUserID, 
            letType.letter_type AS letter_type, CONCAT(ECode, ' - ', Ename2) AS employee_det, documentApprovedID, approvalLevelID", true)
                ->from('srp_erp_hr_letterrequests AS req')
                ->join('srp_erp_hr_letters letType', 'letType.id=req.letter_type')
                ->join('srp_employeesdetails empTB', 'empTB.EIdNo=req.emp_id')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = req.request_id AND approve.approvalLevelID = req.currentLevelNo')
                ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = req.currentLevelNo')
                ->where($where)->where('req.companyID', $companyID)->where('ap.companyID', $companyID)
                ->add_column('level', "<div>Level $1</div>", 'approvalLevelID')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"HDR", request_id)')
                ->add_column('edit', '$1', 'final_settlement_approval_action(request_id, approvalLevelID, documentCode, approvedYN, \'edit\')');
            echo $this->datatables->generate();

    }

    function hr_letter_requests_approval()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('signature_drop', 'Signature', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $company_id = current_companyID();
        $masterDetail = $this->db->query("SELECT * FROM srp_erp_hr_letterrequests WHERE companyID = {$company_id} AND request_id = {$masterID}")->row_array();

        if (empty($masterDetail)) {
            die(json_encode(['e', 'This document is not found']));
        }

        if ($masterDetail['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved.<p>You can not approved this.']));
        }

        if ($masterDetail['confirmedYN'] != 1) {
            die(json_encode(['e', 'This document is not confirmed.<p>You can not approved this.']));
        }

        $documentCode = $masterDetail['documentCode'];
        $level_id = $this->input->post('level');
        $status = $this->input->post('status');
        $signature_emp = $this->input->post('signature_drop');
        $comments = $this->input->post('comments');

        $this->load->library('approvals');

        $this->db->trans_begin();

        $designationID = $this->db->get_where('srp_employeesdetails', ['EIdNo' => $signature_emp])->row('EmpDesignationId');

        $this->db->where(['request_id' => $masterID])->update('srp_erp_hr_letterrequests', [
            'signature_empID' => $signature_emp, 'designationID' => $designationID
        ]);

        //echo '<pre>'.$this->db->last_query().'</pre>'; die();

        $approvals_status = $this->approvals->approve_document($masterID, $level_id, $status, $comments, 'HDR');

        if ($approvals_status == 2) {
            $this->db->trans_commit();
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';
            echo json_encode(['s', $msg, $approvals_status]);
        } else if ($approvals_status == 1) { /*Final level approved*/
            $msg = ' [ ' . $documentCode . ' ] ' . strtolower($this->lang->line('common_approved')) . '.';

            if ($this->db->trans_status() == true) {
                $this->db->trans_commit();
                echo json_encode(['s', $msg]);
            } else {
                $this->db->trans_rollback();
                $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
                echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
            }
        } else if ($approvals_status == 3) {
            $this->db->trans_commit();
            $msg = 'Approvals  Reject Process Successfully done'; //$this->lang->line('hrms_payroll_approvals_reject_process_successfully_done');
            echo json_encode(['s', '[ ' . $documentCode . ' ]' . $msg . ' .']);
        } else if ($approvals_status == 5) {
            $this->db->trans_rollback();
            $msg = 'Previous Level Approval Not Finished'; //$this->lang->line('hrms_payroll_previous_level_approval_not_finished');
            echo json_encode(['w', '[ ' . $documentCode . ' ] ' . $msg . '.']); /*Previous Level Approval Not Finished*/
        } else {
            $this->db->trans_rollback();
            $msg = 'Error in Approvals Of'; //$this->lang->line('hrms_payroll_error_in_paysheet_approvals_of');
            echo json_encode(['e', $msg . ' [ ' . $documentCode . ' ]']); /*Error in Approvals Of */
        }
    }

    function load_leave_cost_view()
    {
        $this->form_validation->set_rules('asOfDate', 'As Of Date', 'trim|required');
        $this->form_validation->set_rules('leave_type', 'Annual Leave', 'trim|required');
        $this->form_validation->set_rules('no_of_working_days', 'No Of Working Days In The Month', 'trim|required|callback_validate_no_of_working_days');
        $this->form_validation->set_rules('calculate_based_on[]', 'Basic / Gross ', 'trim|required');
        $this->form_validation->set_rules('empID[]', 'Employee', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $en_cash_date = $this->input->post('asOfDate');
        $empList = $empArr = $this->input->post('empID');
        $categoryList = $this->input->post('calculate_based_on');
        $leave_typeID = $this->input->post('leave_type');
        $working_days = $this->input->post('no_of_working_days');

        $data['asOfDate'] = $en_cash_date;

        $empList = implode(',', $empList);
        $categoryList = implode(',', $categoryList);

        $month_start = date('Y-m-01', strtotime($en_cash_date));
        $month_end = date('Y-m-t', strtotime($month_start));

        $salaryProportionFormulaDays = getPolicyValues('SPF', 'All');
        $salaryProportionDays = (empty($salaryProportionFormulaDays)) ? 365 : $salaryProportionFormulaDays;


        $totalWorkedDays = getPolicyValues('SCD', 'All');
        $totalWorkedDays = (empty($totalWorkedDays)) ? 'LAST_DAY(effectiveDate)' : $totalWorkedDays;

        if ($totalWorkedDays == 'LAST_DAY(effectiveDate)') {
            $totalWorkedDays = ' DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ';
        } else {
            $totalWorkedDays = "( 30 - DATE_FORMAT(effectiveDate, '%d') )+1";
        }

        $transactionAmount = "IF (
                                DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                round(
                                  ( ((transactionAmount * 12) / {$salaryProportionDays}) *  ({$totalWorkedDays}) ), transactionCurrencyDecimalPlaces
                                ),
                                transactionAmount
                             )";

        if ($salaryProportionDays == 1) {
            $transactionAmount = "IF (
                                    DATE_FORMAT(effectiveDate, '%Y-%m-01') = '{$month_start}' AND (DATE_FORMAT(effectiveDate, '%d') != '01'),
                                    round(
                                      ( (transactionAmount / DATE_FORMAT(LAST_DAY(effectiveDate), '%d') ) *  ( DATEDIFF( LAST_DAY(effectiveDate), effectiveDate )+1 ) )
                                      , transactionCurrencyDecimalPlaces
                                    ),
                                    transactionAmount
                                 )";
        }

        $details = $this->db->query("SELECT EIdNo AS empID, CONCAT(ECode,' - ',Ename2) AS empName, amount AS gross_amount,                        
                        payCurrencyID AS trCurID, CurrencyCode AS trCurCode, DecimalPlaces AS trDPlace
                        FROM srp_employeesdetails empTB 
                        LEFT JOIN (
                            SELECT employeeNo, cat.salaryCategoryID catID, SUM({$transactionAmount}) AS amount, salaryCategoryType
                            FROM srp_erp_pay_salarycategories cat 
                            JOIN srp_erp_pay_salarydeclartion decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                            AND decl.salaryCategoryID IN ({$categoryList})
                            WHERE employeeNo IN ({$empList}) AND payDate <= '{$month_end}' GROUP BY employeeNo
                        ) sal ON sal.employeeNo = empTB.EIdNo
                        LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                        JOIN srp_erp_currencymaster AS curTB ON curTB.currencyID = empTB.payCurrencyID
                        WHERE Erp_companyID = {$companyID} AND isDischarged = 0 AND EIdNo IN ({$empList})")->result_array();


        if (empty($details)) {
            die(json_encode(['e', 'Employee details not found']));
        }


        $details = array_group_by($details, 'empID');

        $data['cur'] = [];
        foreach ($empArr as $empID) {
            $thisEmpDet = $details[$empID];
            $thisEmpDet = $thisEmpDet[0];
            $trCur = $thisEmpDet['trCurCode'];
            $trDPlace = $thisEmpDet['trDPlace'];
            $gross = round($thisEmpDet['gross_amount'], $trDPlace);

            $leave_det = $this->db->query("SELECT lv_type.description, lv_det.policyMasterID 
                            FROM srp_employeesdetails AS emptTB
                            JOIN srp_erp_leavegroup AS lv_gr ON lv_gr.leaveGroupID = emptTB.leaveGroupID
                            JOIN srp_erp_leavegroupdetails AS lv_det ON lv_det.leaveGroupID = lv_gr.leaveGroupID 
                            JOIN srp_erp_leavetype AS lv_type ON lv_type.leaveTypeID = lv_det.leaveTypeID
                            WHERE EIdNo = {$empID} AND lv_type.companyID = {$companyID} AND lv_det.leaveTypeID = {$leave_typeID}")->row_array();

            $leaveData = $this->Employee_model->employeeLeaveSummery($empID, $leave_typeID, $leave_det['policyMasterID']);

            $leave_balance = $leaveData['balance'];
            $leave_balance = (empty($leave_balance)) ? 0 : $leave_balance;

            $amount = 0;
            if ($leave_balance > 0) {
                $amount = $leave_balance * ($gross / $working_days);
                $amount = round($amount, $trDPlace);
            }

            $data['cur_wise'][$trCur][] = [
                'empID' => $empID, 'empName' => $thisEmpDet['empName'],
                'leave_typeID' => $leave_typeID, 'leave_des' => $leave_det['description'],
                'amount' => $amount, 'leave_balance' => $leave_balance, 'gross_amount' => $gross,
                'noOfWorkingDaysInMonth' => $working_days, 'trDPlace' => $trDPlace,
            ];
        }

        $is_view = $this->uri->segment(3);
        $data['is_view'] = $is_view;

        $view = $this->load->view("system/hrm/report/ajax/leave-cost-view", $data, true);
        if ($is_view == 'Y') {
            echo json_encode(['s', 'view' => $view]);
        } else {
            //die($view);
            $this->load->library('pdf');
            $this->pdf->printed($view, 'A4', 1);
        }
    }

    function get_hr_document_expiry_details()
    {

        $company_id = current_companyID();
        $segment = $this->input->post('segment');
        $rpt_type = $this->input->post('rpt_type');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');
        $empID = $this->input->post('empID');
        $segment_filter = $where = $period = '';


        if ($this->input->post('expired')) {
            $toDay = date('Y-m-d');
            $where = "AND expireDate < '{$toDay}'";
        } elseif (!empty($empID)) {
            $empList = implode(',', $empID);
            $where = " AND PersonID IN ({$empList}) AND expireDate IS NOT NULL ";
        } else {
            $data['period'] = "From {$fromDate} To {$toDate}";
            $date_format_policy = date_format_policy();
            $fromDate = input_format_date($fromDate, $date_format_policy);
            $toDate = input_format_date($toDate, $date_format_policy);

            if ($fromDate > $toDate) {
                die(json_encode(['e', 'To date should be greater than from date']));
            }

            $segmentList = implode(',', $segment);
            $segment_filter = " AND empTB.segmentID IN ({$segmentList})";
            $where = " AND expireDate BETWEEN '{$fromDate}' AND '{$toDate}'";
        }

        $query = '';
        $convertFormat = convert_date_format_sql();

        if ($rpt_type == 'E') {
            $query = "SELECT CONCAT(ECode,' - ',Ename2) AS empName, doc_det.*
                    FROM srp_employeesdetails AS empTB 
                    JOIN (
                        SELECT DocDesFormID, DocDescription,  sub_types.description AS sub_typesDes, documentNo, mas.DocDesID AS DocDesID, PersonID, 
                        DATE_FORMAT( issueDate, '%d-%m-%Y' ) AS issueDate, DATE_FORMAT( expireDate, '%d-%m-%Y' ) AS expireDate, 
                        IF(issuedBy=-1, issuedByText, IF(sysType.issuedByType = 1, CONCAT(company_code, ' - ', company_name), country_tb.CountryDes) ) AS issueDet
                        FROM srp_documentdescriptionmaster mas
                        JOIN srp_documentdescriptionsetup AS setup ON mas.DocDesID = setup.DocDesID
                        JOIN srp_erp_system_document_types AS sysType ON mas.systemTypeID = sysType.id
                        JOIN ( 
                             SELECT * FROM srp_documentdescriptionforms WHERE PersonType = 'E' AND isActive = 1 AND isDeleted = 0 {$where}
                        ) AS forms ON forms.DocDesID = mas.DocDesID
                        LEFT JOIN ( 
                            SELECT * FROM srp_erp_system_document_sub_types WHERE companyID = {$company_id} 
                        ) AS sub_types ON sub_types.sub_id = forms.subDocumentType
                        LEFT JOIN srp_erp_company AS comTB ON forms.issuedBy = comTB.company_id
                        LEFT JOIN ( 
                            SELECT * FROM srp_countrymaster WHERE Erp_companyID = {$company_id} 
                        ) AS country_tb ON country_tb.countryID = forms.issuedBy 
                        WHERE mas.Erp_companyID = {$company_id}  AND mas.isDeleted = 0 ORDER BY issueDate DESC
                    ) AS doc_det ON empTB.EIdNo = doc_det.PersonID {$segment_filter}
                    WHERE empTB.isDischarged = 0";
        } else {
            $query = "SELECT empName, docType, relName, relaType.relationship, DATE_FORMAT(expireDate, '{$convertFormat}') AS expireDate
                      FROM(
                            SELECT PersonID, CONCAT(ECode,' - ',Ename2) AS empName, expireDate, 'Passport' AS docType, 
                            relName, relationship, emp_tb.segmentID
                            FROM srp_employeesdetails AS emp_tb 
                            JOIN (
                                SELECT empID AS PersonID, `name` AS relName, DATE(passportExpiredate) AS expireDate, relationship
                                FROM srp_erp_family_details AS family_det 
                            )  AS pass_tb ON emp_tb.EIdNo = pass_tb.PersonID
                            WHERE emp_tb.Erp_companyID = {$company_id} {$where}
                        
                            UNION ALL
                        
                            SELECT PersonID, CONCAT(ECode,' - ',Ename2) AS empName, expireDate, 'Visa' AS docType, 
                            relName, relationship, emp_tb.segmentID
                            FROM srp_employeesdetails AS emp_tb 
                            JOIN (
                                SELECT empID AS PersonID, `name` AS relName, DATE(VisaexpireDate) AS expireDate, relationship
                                FROM srp_erp_family_details AS family_det 
                            )  AS visa_tb  ON emp_tb.EIdNo = visa_tb.PersonID
                            WHERE emp_tb.Erp_companyID = {$company_id} AND emp_tb.isDischarged = 0 {$where}
                      ) AS empTB
                      LEFT JOIN srp_erp_family_relationship AS relaType ON relaType.relationshipID = empTB.relationship {$segment_filter} ";
        }

        $detail = $this->db->query($query)->result_array();

        if (empty($detail)) {
            die(json_encode(['e', 'No records found']));
        }

        $is_view = $this->uri->segment(3);
        $data['detail'] = $detail;
        $data['is_view'] = $is_view;
        $data['rpt_type'] = $rpt_type;

        if ($is_view == 'Y') {

            $view = $this->load->view('system/hrm/report/ajax/hr-document-expiry-view', $data, true);
            echo json_encode(['s', 'view' => $view]);
        } else {
            $html = $this->load->view('system/hrm/report/ajax/hr-document-expiry-view', $data, true);
            $this->load->library('pdf');
            $this->pdf->printed($html, 'A4', 1);
        }
    }

    public function new_sponser_frequency()
    {
        $this->form_validation->set_rules('sponser', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $sponser = trim($this->input->post('sponser') ?? '');
        $companyID = current_companyID();
        $isExist = $this->db->query("SELECT sponsorID FROM srp_erp_sponsormaster WHERE companyID={$companyID} AND sponsorName='$sponser' ")->row_array();

        if (isset($isExist)) {
            die(json_encode(['e', 'This description is already exists']));
        }

        $data = array(
            'sponsorName' => $sponser,
            'companyID' => current_companyID(),
            'createdPCID' => current_pc(),
            'createdUserID' => current_userID(),
            'createdDateTime' => current_date(),
            'createdUserName' => current_user()
        );

        $this->db->insert('srp_erp_sponsormaster', $data);
        if ($this->db->affected_rows() > 0) {
            $insertID = $this->db->insert_id();
            echo json_encode(['s', 'Sponser is created successfully.', $insertID]);
        } else {
            echo json_encode(['e', 'Error in Sponser Creating']);
        }
    }

    function fetch_hr_group_masters()
    {
        $edit = '<a href="#" data-type="text" data-pk="$1" class="description_xEditable" data-value="$2">$2</a>';
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();

        $this->datatables->select("hrMas.hrGroupID AS hrGroupID, hrMas.description AS description, sysType.description AS periodSysType, groupName,
               CONCAT_WS(' | ', DATE_FORMAT(per_start,'{$convertFormat}'), DATE_FORMAT(per_end,'{$convertFormat}')) AS active_period")
            ->from('srp_erp_hrperiodgroup AS hrMas')
            ->join('srp_erp_systemhrperiodtypes AS sysType', 'sysType.id=hrMas.periodTypeID')
            ->join("(SELECT hrGroupID AS grID, GROUP_CONCAT(groupName SEPARATOR ' , ') AS groupName
                     FROM srp_erp_hrperiodassign AS assign
                     JOIN srp_erp_payrollgroups AS grp ON grp.groupID = assign.accessGroupID
                     WHERE assign.companyID = {$companyID} GROUP BY hrGroupID) AS accGrp", 'accGrp.grID=hrMas.hrGroupID', 'left')
            ->join("(SELECT hrGroupID, startDate AS per_start, endDate AS per_end FROM srp_erp_hrperiodmaster
                     WHERE companyID = {$companyID} AND IsActive = 1 GROUP BY hrGroupID) AS active_pr", 'active_pr.hrGroupID = hrMas.hrGroupID', 'left')
            ->where('companyID', $companyID)
            ->edit_column('description', $edit, 'hrGroupID,description')
            ->add_column('edit', '$1', 'hrPeriod_action(hrGroupID,description,periodSysType)');
        echo $this->datatables->generate();
    }

    function fetch_hr_period_master()
    {
        $action = '<span class="pull-right">';
        $action .= '<a onclick="load_periodSubDet($1)"  title="View" rel="tooltip"> <i class="fa fa-eye"></i></a>';
        $action .= '</span>';
        $hrGroupID = $this->input->post('hrGroupID');
        $this->datatables->select("hrPeriodID,startDate,endDate,isActive")
            ->from('srp_erp_hrperiodmaster')->where('companyID', current_companyID())->where('hrGroupID', $hrGroupID)
            ->add_column('startDate', '<div style="text-align: center">$1</div>', 'convert_date_format(startDate)')
            ->add_column('endDate', '<div style="text-align: center">$1</div>', 'convert_date_format(endDate)')
            ->add_column('action', $action, 'hrPeriodID')
            ->add_column('per_status', '<div style="text-align: center">$1</div>', 'confirm(isActive)');
        echo $this->datatables->generate();
    }

    function fetch_hr_period_setup_groups()
    {
        $hrGroupID = $this->input->post('hrGroupID');
        $this->datatables->select("ID,groupName,assign.createdDateTime AS createdDateTime")
            ->from('srp_erp_hrperiodassign AS assign')
            ->join('srp_erp_payrollgroups AS grp', 'grp.groupID = assign.accessGroupID')
            ->where('assign.companyID', current_companyID())->where('hrGroupID', $hrGroupID)
            ->add_column('createdDate', '<div style="text-align: center">$1</div>', 'convert_date_format(createdDateTime)');
        echo $this->datatables->generate();
    }

    function fetch_hr_period_det()
    {
        $hrPeriodID = $this->input->post('hrPeriodID');
        $this->datatables->select("id,dateFrom,dateTo")
            ->from('srp_erp_hrperiod')->where('companyID', current_companyID())->where('hrPeriodID', $hrPeriodID)
            ->add_column('dateFrom', '<div style="text-align: center">$1</div>', 'convert_date_format(dateFrom)')
            ->add_column('dateTo', '<div style="text-align: center">$1</div>', 'convert_date_format(dateTo)')
            ->add_column('action', '<div style="text-align: center"></div>', 'id');
        echo $this->datatables->generate();
    }

    function save_hrPeriod()
    {
        $this->form_validation->set_rules('description', 'Description', 'trim|required');
        $this->form_validation->set_rules('hr_type', 'Type', 'trim|required');
        $this->form_validation->set_rules('start_date', 'Start Date', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $description = trim($this->input->post('description') ?? '');
        $hr_type = trim($this->input->post('hr_type') ?? '');
        $start_date = trim($this->input->post('start_date') ?? '');

        $date_format_policy = date_format_policy();
        $start_date = input_format_date($start_date, $date_format_policy);

        $isExist = $this->db->query("SELECT description FROM srp_erp_hrperiodgroup WHERE companyID={$companyID}
                                         AND description='{$description}'")->row('description');

        if (!empty($isExist)) {
            die(json_encode(['e', 'This description is already exist.']));
        }

        $pc = current_pc();
        $user_grp = current_user_group();
        $userID = current_userID();
        $created_date = current_date();

        $data = [
            'description' => $description, 'periodTypeID' => $hr_type, 'startDate' => $start_date,
            'companyID' => $companyID, 'createdPCID' => $pc, 'createdUserGroup' => $user_grp,
            'createdUserID' => $userID, 'createdDateTime' => $created_date
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_hrperiodgroup', $data);
        $groupID = $this->db->insert_id();

        $access_groups = $this->input->post('groups');
        if (!empty($access_groups)) {
            $access_groups_list = join(',', $access_groups);

            $check = $this->db->query("SELECT ID, groupName FROM srp_erp_hrperiodassign AS assign
                              JOIN srp_erp_payrollgroups AS grp ON grp.groupID = assign.accessGroupID
                              WHERE assign.companyID = {$companyID} AND accessGroupID IN ({$access_groups_list})")->result_array();

            if (!empty($check)) {
                $check = '<br/> - &nbsp; ' . join('<br/> - &nbsp; ', array_column($check, 'groupName'));
                die(json_encode(['e', 'Following Groups is/are already configured with period master.' . $check]));
            }

            $grp_ins = [];
            foreach ($access_groups as $grp) {
                $grp_ins[] = [
                    'hrGroupID' => $groupID, 'accessGroupID' => $grp, 'companyID' => $companyID,
                    'createdPCID' => $pc, 'createdUserGroup' => $user_grp,
                    'createdUserID' => $userID, 'createdDateTime' => $created_date
                ];
            }

            $this->db->insert_batch('srp_erp_hrperiodassign', $grp_ins);
        }

        $this->generate_hr_period($groupID, $hr_type, $start_date);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $hr_type = $this->get_hr_periodDescription($hr_type);
            echo json_encode(['s', 'Payroll period setup master successfully created', 'group_id' => $groupID, 'description' => $description, 'pr_type' => $hr_type]);
        } else {
            echo json_encode(['e', 'Error in period setup master create process']);
        }
    }

    function generate_hr_period($groupID, $hr_type, $start_date)
    {
        $companyID = current_companyID();
        $pc = current_pc();
        $user_grp = current_user_group();
        $userID = current_userID();
        $created_date = current_date();

        $data = [
            'hrGroupID' => $groupID, 'startDate' => $start_date, 'endDate' => null,
            'companyID' => $companyID, 'createdPCID' => $pc, 'createdUserGroup' => $user_grp,
            'createdUserID' => $userID, 'createdDateTime' => $created_date
        ];

        $this->db->insert('srp_erp_hrperiodmaster', $data);
        $periodID = $this->db->insert_id();

        if ($hr_type == 1) {
            $period[] = [
                'dateFrom' => $start_date, 'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
            ];

            $i = 1;
            while ($i < 365) {
                $start_date = date('Y-m-d', strtotime("{$start_date} +1 days"));
                $period[] = [
                    'dateFrom' => $start_date, 'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
                ];
                $i++;
            }
            $end_date = $start_date;
        } else if ($hr_type == 2) {
            $period[] = [
                'dateFrom' => $start_date,
                'dateTo' => date('Y-m-d', strtotime("{$start_date} +6 days")),
                'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
            ];

            $i = 1;
            while ($i < 52) {
                $start_date = date('Y-m-d', strtotime("{$start_date} +7 days"));
                $end_date = date('Y-m-d', strtotime("{$start_date} +6 days"));
                $period[] = [
                    'dateFrom' => $start_date, 'dateTo' => $end_date, 'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
                ];
                $i++;
            }
        } else if ($hr_type == 3) {
            $period[] = [
                'dateFrom' => $start_date,
                'dateTo' => date('Y-m-d', strtotime("{$start_date} +13 days")),
                'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
            ];

            $i = 1;
            while ($i < 26) {
                $start_date = date('Y-m-d', strtotime("{$start_date} +14 days"));
                $end_date = date('Y-m-d', strtotime("{$start_date} +13 days"));
                $period[] = [
                    'dateFrom' => $start_date, 'dateTo' => $end_date, 'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
                ];
                $i++;
            }
        } else if ($hr_type == 4) {
            $end_date = date('Y-m-d', strtotime("{$start_date} +1 month"));
            $period[] = [
                'dateFrom' => $start_date,
                'dateTo' => date('Y-m-d', strtotime("{$end_date} -1 day")),
                'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
            ];

            $i = 1;
            while ($i < 12) {
                $start_date = date('Y-m-d', strtotime("{$start_date} +1 month"));
                $end_date = date('Y-m-d', strtotime("{$start_date} +1 month"));
                $end_date = date('Y-m-d', strtotime("{$end_date} -1 day"));
                $period[] = [
                    'dateFrom' => $start_date, 'dateTo' => $end_date, 'hrPeriodID' => $periodID, 'companyID' => $companyID, 'timestamp' => $created_date
                ];
                $i++;
            }
        }

        $this->db->where('hrPeriodID', $periodID)->update('srp_erp_hrperiodmaster', ['endDate' => $end_date]);
        //echo '<pre>'; print_r($period); echo '</pre>';
        $this->db->insert_batch('srp_erp_hrperiod', $period);
    }

    function get_hr_periodDescription($id)
    {
        return $this->db->get_where('srp_erp_systemhrperiodtypes', ['id' => $id])->row('description');
    }

    function generate_next_hrPeriod()
    {
        $this->form_validation->set_rules('groupID', 'Group ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $groupID = trim($this->input->post('groupID') ?? '');

        $group_data = $this->db->query("SELECT periodTypeID, endDate, description FROM srp_erp_hrperiodgroup AS perGrp
                                JOIN (
                                     SELECT hrGroupID, MAX(endDate) AS endDate FROM srp_erp_hrperiodmaster 
                                     WHERE companyID = {$companyID} GROUP BY hrGroupID
                                ) AS perMas ON perGrp.hrGroupID = perMas.hrGroupID
                                WHERE perGrp.hrGroupID = {$groupID} AND companyID = {$companyID}")->row_array();

        $hr_type = $group_data['periodTypeID'];
        $description = $group_data['description'];
        $start_date = $group_data['endDate'];
        $start_date = date('Y-m-d', strtotime("{$start_date} +1 day"));

        $this->db->trans_start();

        $this->generate_hr_period($groupID, $hr_type, $start_date);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $hr_type = $this->get_hr_periodDescription($hr_type);
            echo json_encode(['s', 'Hr period master successfully created', 'group_id' => $groupID, 'description' => $description, 'pr_type' => $hr_type]);
        } else {
            echo json_encode(['e', 'Error in hr period master create process']);
        }
    }

    function ajax_update_hrPeriodDescription()
    {
        $companyID = current_companyID();
        $masterID = $this->input->post('pk');
        $description = trim($this->input->post('value') ?? '');

        if ($description == '') {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Description is required.');
        }

        $isExist = $this->db->query("SELECT description FROM srp_erp_hrperiodgroup WHERE companyID={$companyID}
                                         AND description='{$description}' AND hrGroupID <> {$masterID}")->row('description');


        if (!empty($isExist) && $isExist != $masterID) {
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('This description is already exist.');
        }

        $data = [
            'description' => $description,
            'modifiedPCID' => current_pc(),
            'modifiedUserID' => current_userID(),
            'modifiedDateTime' => current_date()
        ];

        $this->db->trans_start();
        $this->db->trans_complete();
        $this->db->where(['companyID' => $companyID, 'hrGroupID' => $masterID])->update('srp_erp_hrperiodgroup', $data);

        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Description updated successfully']);
        } else {
            $this->db->trans_rollback();
            header($_SERVER['SERVER_PROTOCOL'] . '', true, 500);
            die('Error in description Update process');
        }
    }

    function load_unassigned_access_groups()
    {
        $companyID = current_companyID();

        $grp_data = $this->db->query("SELECT groupID, groupName FROM srp_erp_payrollgroups 
                    WHERE companyID = {$companyID} AND groupID NOT IN (
                       SELECT accessGroupID FROM srp_erp_hrperiodassign WHERE companyID = {$companyID}
                    )")->result_array();

        echo json_encode($grp_data);
    }

    function payroll_assign_access_group()
    {
        $this->form_validation->set_rules('hrGroupID', 'Group ID', 'trim|required');
        $this->form_validation->set_rules('groups[]', 'Access Group', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $groupID = $this->input->post('hrGroupID');
        $access_groups = $this->input->post('groups');
        $companyID = current_companyID();
        $pc = current_pc();
        $user_grp = current_user_group();
        $userID = current_userID();
        $created_date = current_date();

        $access_groups_list = join(',', $access_groups);

        $check = $this->db->query("SELECT ID, groupName FROM srp_erp_hrperiodassign AS assign
                              JOIN srp_erp_payrollgroups AS grp ON grp.groupID = assign.accessGroupID
                              WHERE assign.companyID = {$companyID} AND accessGroupID IN ({$access_groups_list})")->result_array();

        if (!empty($check)) {
            $check = '<br/> - &nbsp; ' . join('<br/> - &nbsp; ', array_column($check, 'groupName'));
            die(json_encode(['e', 'Following Groups is/are already configured with period master.' . $check]));
        }

        $grp_ins = [];
        foreach ($access_groups as $grp) {
            $grp_ins[] = [
                'hrGroupID' => $groupID, 'accessGroupID' => $grp, 'companyID' => $companyID,
                'createdPCID' => $pc, 'createdUserGroup' => $user_grp,
                'createdUserID' => $userID, 'createdDateTime' => $created_date
            ];
        }

        $this->db->trans_start();
        $this->db->insert_batch('srp_erp_hrperiodassign', $grp_ins);
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Access group assigned successfully created']);
        } else {
            echo json_encode(['e', 'Error in access group assigning process']);
        }
    }

    function salary_declaration_download_csv()
    {
        $empID = $this->input->post('empID');
        $empFilter = '';
        if (!empty($empID)) {
            $empFilter = implode(',', $empID);
            $empFilter = 'AND EIdNo IN (' . $empFilter . ')';
        }

        $companyID = current_companyID();
        $category = $this->input->post('s_category');

        $this->db->select('salaryDescription')->from('srp_erp_pay_salarycategories')
            ->where('companyID', $companyID)->where_in('salaryCategoryID', $category);
        $cat_arr = $this->db->get()->result_array();

        $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                    AND isPayrollEmployee =1 AND isDischarged=0 AND empConfirmedYN=1 {$empFilter}")->result_array();

        $csv_data = [
            [
                0 => 'Code',
                1 => 'Name',
                2 => 'Category',
                3 => 'Amount',
            ]
        ];


        foreach ($cat_arr as $cat) {
            foreach ($empArr as $key => $row) {
                $csv_data[] = [$row['ECode'], $row['Ename2'], $cat['salaryDescription'], 'N/A'];
            }
        }

        header("Content-Type: text/csv");
        header("Content-Disposition: attachment; filename=file.csv");


        $output = fopen("php://output", "w");
        foreach ($csv_data as $row) {
            fputcsv($output, $row);
        }
        fclose($output);
    }

    public function salary_declaration_excelUpload()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('up_effectiveDate', 'Effective Date', 'trim|required');
        $this->form_validation->set_rules('up_payDate', 'Pay Date', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $masterID = $this->input->post('masterID');
        $effectiveDate = $this->input->post('up_effectiveDate');
        $payDate = $this->input->post('up_payDate');
        $date_format_policy = date_format_policy();
        $effectiveDate = input_format_date($effectiveDate, $date_format_policy);
        $payDate = input_format_date($payDate, $date_format_policy);
        $lastDateOfMonth = date('Y-m-t', strtotime($payDate));
        $year = date('Y', strtotime($payDate));
        $month = date('m', strtotime($payDate));
        $companyID = current_companyID();


        if (empty($masterID)) {
            die(json_encode(['e', 'Id field is required']));
        }

        $masterData = $this->db->get_where('srp_erp_salarydeclarationmaster', ['salarydeclarationMasterID' => $masterID])->row_array();
        if (empty($masterData)) {
            die(json_encode(['e', 'Document master is not found']));
        }

        if ($masterData['approvedYN'] == 1) {
            die(json_encode(['e', 'This document is already approved']));
        }

        if ($masterData['confirmedYN'] == 1) {
            die(json_encode(['e', 'This document is already confirmed']));
        }

        $companyCode = current_companyCode();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserName = current_employee();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();

        $dPlace = $masterData['transactionCurrencyDecimalPlaces'];
        $trCurrID = $masterData['transactionCurrencyID'];
        $trCurrCode = $masterData['transactionCurrency'];
        $trCurrEr = 1;
        $trDPlace = $masterData['transactionCurrencyDecimalPlaces'];

        $loCurrID = $masterData['companyLocalCurrencyID'];
        $loCurrCode = $masterData['companyLocalCurrency'];
        $loCurrEr = $masterData['companyLocalER'];
        $loDPlace = $masterData['companyLocalCurrencyDecimalPlaces'];

        $rptCurrID = $masterData['companyReportingCurrencyID'];
        $rptCurrCode = $masterData['companyReportingCurrency'];
        $rptCurrEr = $masterData['companyReportingER'];
        $rptDPlace = $masterData['companyReportingCurrencyDecimalPlaces'];

        if (isset($_FILES['excelUpload_file']['size']) && $_FILES['excelUpload_file']['size'] > 0) {
            $type = explode(".", $_FILES['excelUpload_file']['name']);
            if (strtolower(end($type)) != 'csv') {
                die(json_encode(['e', 'File type is not csv - ', $type]));
            }

            //Get all salary category
            $this->db->select('salaryCategoryID, salaryDescription')->from('srp_erp_pay_salarycategories');
            $cat_arr = $this->db->where('companyID', $companyID)->get()->result_array();
            $category = [];
            foreach ($cat_arr as $row) {
                $category[$row['salaryDescription']] = $row['salaryCategoryID'];
            }

            //Get all employees in the company
            $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                            AND isPayrollEmployee = 1 ")->result_array();
            $emp_list = array_column($empArr, 'ECode');


            $dataExcel = [];
            $unMatchRecords = [];
            $unMatchCategory = [];
            $emp_id_list = [];
            $joinDate_conf = [];
            $i = 0;
            $filename = $_FILES["excelUpload_file"]["tmp_name"];
            $file = fopen($filename, "r");
            while (($getData = fgetcsv($file, 10000, ",")) !== FALSE) {
                if ($i > 0) {

                    $excelEmpCode = trim($getData[0] ?? '');
                    $amount = trim($getData[3] ?? '');
                    if ($amount == 'N/A') {
                        continue;
                    }

                    $amount = str_replace(',', '', $amount);
                    $amount = round($amount, $dPlace);

                    $excel_cat = trim($getData[2] ?? '');
                    if (!array_key_exists($excel_cat, $category)) { //validate salary category
                        $unMatchCategory[] = $excel_cat;
                        continue;
                    }

                    if (!empty($excelEmpCode) && ($amount > 0)) {

                        $keys = array_keys($emp_list, $excelEmpCode);
                        $thisEmpData = array_map(function ($k) use ($empArr) {
                            return $empArr[$k];
                        }, $keys);

                        if (!empty($thisEmpData[0])) {
                            $emp_id = $thisEmpData[0]['EIdNo'];
                            $category_id = $category[$excel_cat];
                            $emp_id_list[] = $emp_id;

                            $details = $this->db->query("SELECT CONCAT_WS(' - ', ECode, Ename2) AS empName, catID, amount,
                                                gr.groupID, salaryCategoryType, EDOJ
                                                FROM srp_employeesdetails empTB 
                                                LEFT JOIN (
                                                    SELECT employeeNo, cat.salaryCategoryID catID, SUM(amount) AS amount, salaryCategoryType
                                                    FROM srp_erp_pay_salarycategories AS cat 
                                                    JOIN srp_erp_pay_salarydeclartion decl ON cat.salaryCategoryID = decl.salaryCategoryID 
                                                    AND decl.salaryCategoryID = {$category_id}
                                                    WHERE employeeNo = {$emp_id} GROUP BY employeeNo, cat.salaryCategoryID
                                                ) sal ON sal.employeeNo = empTB.EIdNo
                                                LEFT JOIN srp_erp_payrollgroupemployees gr ON gr.employeeID = empTB.EIdNo
                                                WHERE Erp_companyID = {$companyID}  AND isDischarged = 0 AND EIdNo = {$emp_id}")->row_array();

                            $salarycategory = $this->db->query("SELECT salaryCategoryType FROM `srp_erp_pay_salarycategories` where salaryCategoryID = {$category_id} ")->row('salaryCategoryType');
                            $groupID = $details['groupID'];
                            $salaryCategoryType = $salarycategory;
                            $currAmount = $details['amount'];
                            $joinDate = date('Y-m-d', strtotime($details['EDOJ']));

                            if ($joinDate > $effectiveDate) {
                                $joinDate_conf[] = ' &nbsp;&nbsp;- ' . $details['empName'] . ' => ' . convert_date_format($joinDate);
                            }

                            $dataExcel[] = [
                                'declarationMasterID' => $masterID, 'employeeNo' => $emp_id, 'accessGroupID' => $groupID,
                                'salaryCategoryType' => $salaryCategoryType, 'salaryCategoryID' => $category_id, 'amount' => $amount,
                                'effectiveDate' => $effectiveDate, 'payDate' => $payDate, 'narration' => '', 'currentAmount' => $currAmount,

                                'transactionCurrencyID' => $trCurrID, 'transactionCurrency' => $trCurrCode,
                                'transactionER' => $trCurrEr, 'transactionCurrencyDecimalPlaces' => $trDPlace,

                                'companyLocalCurrencyID' => $loCurrID, 'companyLocalCurrency' => $loCurrCode,
                                'companyLocalER' => $loCurrEr, 'companyLocalCurrencyDecimalPlaces' => $loDPlace,

                                'companyReportingCurrencyID' => $rptCurrID, 'companyReportingCurrency' => $rptCurrCode,
                                'companyReportingER' => $rptCurrEr, 'companyReportingCurrencyDecimalPlaces' => $rptDPlace,

                                'transactionAmount' => $amount, 'companyLocalAmount' => ($amount / $loCurrEr), 'companyReportingAmount' => ($amount / $rptCurrEr),

                                'companyID' => $companyID, 'companyCode' => $companyCode, 'createdPCID' => $createdPCID, 'createdUserID' => $createdUserID,
                                'createdUserName' => $createdUserName, 'createdUserGroup' => $createdUserGroup, 'createdDateTime' => $createdDateTime,
                                'timestamp' => $createdDateTime
                            ];


                        } else {
                            $unMatchRecords[] = ' &nbsp;&nbsp;- ' . $excelEmpCode;
                        }
                    }
                }
                $i++;
            }
            fclose($file);

            if (!empty($unMatchCategory)) {
                $unMatchCategory = array_unique($unMatchCategory);
                $msg = '<strong>Following salary categories does not match with the database.</strong><br/>';
                $msg .= implode('<br/>', $unMatchCategory);
                die(json_encode(['m', $msg]));
            }

            if (!empty($unMatchRecords)) {
                $msg = '<strong>Following Employee codes does not match with the database.</strong><br/>';
                $msg .= implode('<br/>', $unMatchRecords);
                die(json_encode(['m', $msg]));
            }

            if (!empty($joinDate_conf)) {
                $msg = '<strong>Effective date should be greater than employee date of join</strong><br/>';
                $msg .= implode('<br/>', $joinDate_conf);
                die(json_encode(['m', $msg]));
            }

            $emp_id_list = array_unique($emp_id_list);
            $emp_id_list = join(',', $emp_id_list);

            /*** check employee discharge status ***/
            $validate_discharge = $this->db->query("SELECT EIdNo, CONCAT_WS(' - ', ECode, Ename2 ) AS empName,                                                                                          
                                                IF( isDischarged != 1, 0,
                                                    CASE
                                                       WHEN '{$lastDateOfMonth}' <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                       WHEN '{$lastDateOfMonth}' > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                    END
                                                ) AS isDischargedStatus 
                                                FROM srp_employeesdetails AS empTB                                                                  
                                                WHERE empTB.Erp_companyID = '{$companyID}' AND empTB.EIdNo IN ($emp_id_list)
                                                HAVING isDischargedStatus = 1 ")->result_array();

            if (!empty($validate_discharge)) {
                $validate_discharge = array_column($validate_discharge, 'empName');
                $msg = '<strong>Following employee is/are already discharged.</strong><br/>';
                $msg .= implode('<br/>', $validate_discharge);
                die(json_encode(['m', $msg]));
            }


            /*** check payroll already processed for pay date month ***/
            $validate_payroll = $this->db->query("SELECT CONCAT_WS(' - ', ECode, Ename2 ) AS empName, IF(ISNULL(empID_pay), 'N', 'Y') AS isPayrollProcessed  
                                                FROM srp_employeesdetails AS empTB                                                                                                                                             
                                                LEFT JOIN (
                                                    SELECT empID AS empID_pay FROM srp_erp_payrollmaster AS payMaster
                                                    JOIN srp_erp_payrollheaderdetails AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID
                                                    WHERE payMaster.companyID = {$companyID} AND payDet.companyID={$companyID} AND payrollYear={$year}
                                                    AND payrollMonth={$month}
                                                ) AS thisPayTB ON thisPayTB.empID_pay = empTB.EIdNo                                                 
                                                WHERE empTB.Erp_companyID = '{$companyID}' AND empTB.EIdNo IN ($emp_id_list)
                                                HAVING isPayrollProcessed = 'Y'")->result_array();
            if (!empty($validate_payroll)) {
                $validate_payroll = array_column($validate_payroll, 'empName');
                $msg = '<strong>Payroll already processed on selected pay date, for following employees.</strong><br/>';
                $msg .= implode('<br/>', $validate_payroll);
                die(json_encode(['m', $msg]));
            }

            if (!empty($dataExcel)) {
                $this->db->trans_start();
                $this->db->insert_batch('srp_erp_salarydeclarationdetails', $dataExcel);

                $dec_data = $this->db->query("SELECT employeeNo, declarationDetailID, salaryCategoryID, effectiveDate, payDate, amount 
                                    FROM srp_erp_salarydeclarationdetails
                                    WHERE declarationMasterID = {$masterID} AND DATE_FORMAT(effectiveDate, '%Y-%m-01') <> DATE_FORMAT(payDate, '%Y-%m-01') 
                                    ")->result_array();

                foreach ($dec_data as $row) {
                    $this->calculateBalancePayment(
                        $row['employeeNo'], $masterID, $row['declarationDetailID'], $row['salaryCategoryID'],
                        $row['effectiveDate'], $row['payDate'], $row['amount'], $createdDateTime, $dPlace
                    );
                }

                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    die(json_encode(['e', 'Error in process']));
                } else {
                    $this->db->trans_commit();
                    die(json_encode(['s', 'Successfully uploaded']));
                }
            } else {
                die(json_encode(['e', 'File is empty']));
            }

        } else {
            echo json_encode(['e', 'Please Select CSV File .']);
        }
    }


    public function dropDown_search()
    {
        $keyword = $this->input->get('term');
        $items = $this->Employee_model->search($keyword);

        $data = [];
        if (!empty($items)) {
            foreach ($items as $row) {
                $data[] = [
                    'id' => $row->EIdNo, 'text' => $row->ECode . ' ' . $row->Ename2
                ];
            }
        }
        echo json_encode(['items' => $data]);
    }

    function add_to_signature_list()
    {
        $this->form_validation->set_rules('emp_drop', 'Employee', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $empID = trim($this->input->post('emp_drop') ?? '');

        $isExists = $this->db->get_where('srp_erp_signaturelist', ['companyID' => $companyID, 'empID' => $empID])
            ->row('signatureID');
        if (!empty($isExists)) {
            die(json_encode(['e', 'This employee is already added in the list']));
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();

        $insert_data = [
            'empID' => $empID, 'companyID' => $companyID, 'createdPC' => $pc,
            'createdUserID' => $userID, 'createdDate' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_signaturelist', $insert_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Employee added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    public function fetch_signaturelist()
    {
        $companyID = current_companyID();
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-trash" onclick="delete_signature($1)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('signatureID, CONCAT_WS(\' - \', ECode, Ename2 ) AS empName, EIdNo, DesDescription AS designation', false)
            ->from('srp_erp_signaturelist AS sList')
            ->join('srp_employeesdetails AS empTB', 'empTB.EIdNo=sList.empID')
            ->join('srp_designation AS desTB', 'empTB.EmpDesignationId=desTB.DesignationID')
            ->where('sList.companyID', $companyID)
            ->add_column('action', $details, 'signatureID');
        echo $this->datatables->generate();
    }

    function delete_signature_list()
    {
        $this->form_validation->set_rules('id', 'Master ID', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $autoID = $this->input->post('id');

        $this->db->trans_start();

        $this->db->where(['signatureID' => $autoID, 'companyID' => $companyID])->delete('srp_erp_signaturelist');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Employee successfully removed from signature list']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function load_attendanceOccurrences()
    {
        $row_id = $this->input->get('id');
        $att_data = $this->db->query("SELECT GROUP_CONCAT(TIME_FORMAT(att_temp.attTime , '%r')  SEPARATOR '<br/>' ) AS rec 
                            FROM srp_erp_pay_empattendancereview AS rev_tb
                            JOIN srp_erp_pay_empattendancetemptable AS att_temp ON att_temp.device_id = rev_tb.deviceID 
                            AND rev_tb.machineID = att_temp.empMachineID AND rev_tb.attendanceDate = att_temp.attDate
                            WHERE rev_tb.ID = {$row_id}")->row('rec');

        echo $att_data;
    }

    public function fetch_attendance_mapping()
    {
        $this->datatables->select('mapping_id, machineTypeID, device_id, table_name, auto_id_column, machine_id_column, att_time_column')
            ->from('attendance_mapping')
            ->where('companyID', current_companyID())
            ->add_column('machineTypeDes', '$1', 'getMachineType(machineTypeID)')
            ->add_column('action', '$1', 'machineConf_action(mapping_id,device_id,machineTypeID)');

        echo $this->datatables->generate();
    }

    function save_attMachineConfig()
    {
        $this->form_validation->set_rules('deviceID', 'Device ID', 'trim|required');
        $this->form_validation->set_rules('machineType', 'Machine Type', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $deviceID = $this->input->post('deviceID');
        $machineType = $this->input->post('machineType');

        $exist = $this->db->get_where('attendance_mapping', [
            'device_id' => $deviceID, 'companyID' => $companyID
        ])->row('mapping_id');

        if (!empty($exist)) {
            die(json_encode(['e', 'This device ID already exist.']));
        }

        $column = $this->get_attendanceMachineDColumnDet($machineType);

        if (empty($column)) {
            die(json_encode(['e', 'Machine column details not found']));
        }

        $this->db->trans_start();

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $int_data = [
            'device_id' => $deviceID, 'machineTypeID' => $machineType, 'table_name' => $column['table_name'],
            'auto_id_column' => $column['auto_id_column'], 'machine_id_column' => $column['machine_id_column'],
            'att_time_column' => $column['att_time_column'], 'companyID' => $companyID, 'createdPCID' => $pc,
            'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->insert('attendance_mapping', $int_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Machine configuration added successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function get_attendanceMachineDColumnDet($id)
    {
        $db2 = $this->load->database('db2', TRUE);
        $data = $db2->get_where('attendance_machine_details', ['machineTypeID' => $id])->row_array();
        return $data;
    }

    function update_attMachineConfig()
    {
        $this->form_validation->set_rules('mappingID', 'Auto ID', 'trim|required');
        $this->form_validation->set_rules('deviceID', 'Device ID', 'trim|required');
        $this->form_validation->set_rules('machineType', 'Machine Type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $mappingID = $this->input->post('mappingID');
        $deviceID = $this->input->post('deviceID');
        $machineType = $this->input->post('machineType');

        $usage = attendance_machine_usage($deviceID);

        if (!empty($usage)) {
            die(json_encode(['e', 'This device ID contains records in attendance pulling table.<br/>You can not make changes on this record']));
        }

        $exist = $this->db->select('mapping_id')->from('attendance_mapping')
            ->where(['device_id' => $deviceID, 'companyID' => $companyID])
            ->where("mapping_id <> {$mappingID}")
            ->get()->row('mapping_id');

        if (!empty($exist)) {
            die(json_encode(['e', 'This device ID already exist.']));
        }

        $column = $this->get_attendanceMachineDColumnDet($machineType);

        if (empty($column)) {
            die(json_encode(['e', 'Machine column details not found']));
        }

        $this->db->trans_start();

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $userGroup = current_user_group();

        $int_data = [
            'device_id' => $deviceID, 'machineTypeID' => $machineType, 'table_name' => $column['table_name'],
            'auto_id_column' => $column['auto_id_column'], 'machine_id_column' => $column['machine_id_column'],
            'att_time_column' => $column['att_time_column'], 'companyID' => $companyID, 'modifiedPCID' => $pc,
            'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime
        ];

        $this->db->where(['mapping_id' => $mappingID])->update('attendance_mapping', $int_data);

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Machine configuration updated successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    function delete_attMachineConfig()
    {
        $this->form_validation->set_rules('id', 'Auto ID', 'trim|required');
        $this->form_validation->set_rules('deviceID', 'Device ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $companyID = current_companyID();
        $mappingID = $this->input->post('id');
        $deviceID = $this->input->post('deviceID');

        $usage = attendance_machine_usage($deviceID);

        if (!empty($usage)) {
            die(json_encode(['e', 'This device ID contains records in attendance pulling table.<br/>You can not make changes on this record']));
        }

        $this->db->trans_start();

        $this->db->where([
            'mapping_id' => $mappingID, 'companyID' => $companyID
        ])->delete('attendance_mapping');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Machine configuration deleted successfully.']);
        } else {
            echo json_encode(['e', 'Error in process.']);
        }
    }

    public function employees_group_tables()
    {
        $this->datatables->select("EIdNo, CONCAT(ECode, ' - ', Ename2) AS emp_name, DesDescription AS designation", false)
            ->from('srp_employeesdetails AS empTB')
            ->join('srp_designation AS desTB', 'empTB.EmpDesignationId=desTB.DesignationID', 'left')
            ->where('empTB.Erp_companyID', current_companyID())->where('empTB.isDischarged', 0)
            ->where($this->input->post('grp'), $this->input->post('grpID'));
        echo $this->datatables->generate();
    }

    function update_userPassword()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('password', 'password', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $db2 = $this->load->database('db2', TRUE);
        $empId = $this->input->post('empID');
        $password = $this->input->post('password');
        $companyID = current_companyID();

        if (is_QHSE_integrated() == 'Y') {
            //Update user in QHSE DB
            $userData = $this->db->query("SELECT Ename2 AS empName,EEmail, UserName, 
                            integratedUserID, isActive
                            FROM srp_employeesdetails AS empTB
                            JOIN srp_erp_system_integration_user AS usr ON usr.empID = empTB.EIdNo 
                            AND integratedSystem = 'QHSE'
                            WHERE EIdNo = {$empId}")->row_array();

            if (!empty($userData['integratedUserID'])) {
                $this->load->model('Company_model');

                $url = 'api/v1/user/update/' . $userData['integratedUserID'];
                $res_data = $this->Company_model->QHSE_api_requests([
                    'name' => $userData['empName'], 'username' => $userData['UserName'], 'email' => $userData['EEmail'], 'password' => $password,
                    'password_confirmation' => $password, 'activeYN' => $userData['isActive']
                ], $url, $is_put = true);

                if ($res_data['status'] == 'e') {
                    die(json_encode(['e', "QHSE - Error<br/>{$res_data['message']}", 'http_code' => $res_data['http_code']]));
                }
            }
        }

        $password = md5($password);
        $centralUpdate = $db2->where('empID', $empId)->where('companyID', $companyID)
            ->update('user', ['Password' => $password]);
        if ($centralUpdate) {
            $this->db->where('EIdNo', trim($empId));
            $update = $this->db->update('srp_employeesdetails', ['Password' => $password]);
            if ($update) {
                die(json_encode(['s', 'Password updated successfully']));
            } else {
                die(json_encode(['e', 'Password update failed']));
            }
        }
    }

    function create_user_for_integration()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('intType', 'Integration type', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $empId = $this->input->post('empID');
        $intType = $this->input->post('intType');

        switch ($intType) {
            case 'QHSE':
                if (is_QHSE_integrated() == 'N') {
                    die(json_encode(['e', 'QHSE is not integrated for this company.']));
                }
                break;
        }


        $companyID = current_companyID();
        $userData = $this->db->query("SELECT Ename2 AS empName, UserName,EEmail, intUsr.integratedUserID, isActive                                                                
                                    FROM srp_employeesdetails AS empTB
                                    LEFT JOIN (  
                                        SELECT empID, integratedUserID FROM srp_erp_system_integration_user
                                        WHERE companyID={$companyID} AND integratedSystem='{$intType}'
                                    ) AS intUsr ON intUsr.empID = empTB.EIdNo                         
                                    WHERE EIdNo = {$empId}")->row_array();

        if (!empty($userData['integratedUserID'])) {
            die(json_encode(['e', "This employee ( {$userData['empName']} ) is already integrated to {$intType}."]));
        }

        $this->load->model('Company_model');

        $password = 'Welcome@123';
        $url = 'api/v1/user/create';
        //create user in QHSE DB
        $res_data = $this->Company_model->QHSE_api_requests([
            'name' => $userData['empName'], 'username' => $userData['UserName'], 'email' => $userData['EEmail'], 'password' => $password,
            'password_confirmation' => $password, 'activeYN' => $userData['isActive']
        ], $url);

        if ($res_data['status'] == 'e') {
            die(json_encode(['e', "QHSE - Error<br/>{$res_data['message']}", 'http_code' => $res_data['http_code']]));
        }

        $date_time = current_date();

        $user_integration = [
            'empID' => $empId, 'integratedUserID' => $res_data['data'], 'integratedSystem' => 'QHSE', 'companyID' => $companyID,
            'createdUserID' => current_userID(), 'createdDateTime' => $date_time, 'createdPCID' => current_pc(), 'timestamp' => $date_time
        ];

        $this->db->trans_start();

        $this->db->insert('srp_erp_system_integration_user', $user_integration);

        $this->db->where('EIdNo', $empId)->where('Erp_companyID', $companyID);
        $this->db->update('srp_employeesdetails', ['isChangePassword' => 1]);

        $this->db->trans_complete();
        if ($this->db->trans_status() === true) {
            die(json_encode(['s', "User successfully integrated to {$intType}"]));
        } else {
            die(json_encode(['e', 'Error in user integration process.']));
        }
    }

    function fetch_grade_salary()
    {
        $companyID = current_companyID();
        $gradeID = $this->input->post('gradeID');
        $dPlace = (int)fetch_currency_desimal_by_id($this->common_data['company_data']['company_default_currencyID']);
        $table_view = '';

        $salary_data = $this->db->select('id, salaryCategoryID, salaryDescription, startRange,midRange, endRange,air_ticket_enhancement')
            ->from('srp_erp_pay_salarycategories AS catTb')
            ->join("(SELECT id, categoryID, startRange,midRange, endRange,air_ticket_enhancement
                                       FROM srp_erp_employeegradesalary
                                       WHERE companyID={$companyID} AND salaryGradeID={$gradeID})
                                       AS sal", "sal.categoryID=catTb.salaryCategoryID", 'left')
            ->where('companyID', $companyID)
            ->order_by('salaryDescription', 'ASC')
            ->get()->result_array();

        if (!empty($salary_data)) {
            foreach ($salary_data as $key => $row) {
                $catID = $row['salaryCategoryID'];
                $setupID = $row['id'];
                $startRange = (!empty($row['startRange'])) ? number_format($row['startRange'], $dPlace, '.', '') : '';
                $midRange = (!empty($row['midRange'])) ? number_format($row['midRange'], $dPlace, '.', '') : '';
                $endRange = (!empty($row['endRange'])) ? number_format($row['endRange'], $dPlace, '.', '') : '';

                $table_view .= '<tr>
                                   <td>' . ($key + 1) . '</td> 
                                   <td>' . $row['salaryDescription'] . '</td> 
                                   <td>
                                      <input type="text" class="numeric range-text start_txt" data-id="' . $catID . '" 
                                             name="startRange[' . $catID . ']" value="' . $startRange . '" placeholder="not-assigned"> 
                                   </td>
                                   <td>
                                      <input type="text" class="numeric range-text mid_txt" data-id="' . $catID . '" 
                                             name="midRange[' . $catID . ']" value="' . $midRange . '" placeholder="not-assigned"> 
                                   </td>
                                   <td>                                  
                                      <input type="text" class="numeric range-text" id="end_' . $catID . '" name="endRange[' . $catID . ']" 
                                             value="' . $endRange . '" placeholder="not-assigned">
                                      <input type="hidden" name="setupID[' . $catID . ']" value="' . $setupID . '"> 
                                      <input type="hidden" name="catDes[' . $catID . ']" value="' . $row['salaryDescription'] . '"> 
                                   </td>                                   
                               </tr>';
            }
        }
        $air_ticket_enhancements = array_column($salary_data, 'air_ticket_enhancement');

        echo json_encode(['error' => 0, 'air_ticket_enhancement' => $air_ticket_enhancements[0],'table_view' => $table_view, 'dis_count' => count($salary_data), 'dPlace' => $dPlace]);
    }

    function save_gradeSalarySetup()
    {
        $companyID = current_companyID();
        $gradeID = $this->input->post('gradeID');
        $catDes = $this->input->post('catDes');
        $startRange = $this->input->post('startRange');
        $midRange = $this->input->post('midRange');
        $endRange = $this->input->post('endRange');
        $setupID = $this->input->post('setupID');
        $air_ticket = $this->input->post('air_ticket');

        if (!($midRange >= $startRange && $midRange <= $endRange)) {
            echo json_encode(['error' => 'e', 'message' => 'Mid range is not in the range.']);
            return;
        }

        $dateTime = current_date();
        $pc = current_pc();
        $userID = current_userID();
        $dPlace = (int)fetch_currency_desimal_by_id($this->common_data['company_data']['company_default_currencyID']);

        $this->db->trans_start();

        $insert_arr = $up_data = $range_conflict = $proper_fill = $delete_arr = [];
        foreach ($startRange as $cat => $row) {
            $start = trim($row);
            $end = trim($endRange[$cat]);
            $mid = trim($midRange[$cat]);
            $auto_id = $setupID[$cat];

            if ($start == '' && $end == '') {
                if (!empty($auto_id)) {
                    $delete_arr[] = $auto_id;
                }
                continue;
            }

            if ($start != '' && $end == '') {
                $proper_fill[] = $catDes[$cat];
                continue;
            }

            if ($start == '' && $end != '') {
                $proper_fill[] = $catDes[$cat];
                continue;
            }

            $start = round($start, $dPlace);
            $end = round($end, $dPlace);

            if ($start > $end) {
                $range_conflict[] = $catDes[$cat];
            }

            if (!empty($range_conflict) or !empty($proper_fill)) {
                continue;
            }

            if (empty($auto_id)) { //insert
                $insert_arr[] = [
                    'salaryGradeID' => $gradeID, 'categoryID' => $cat, 'startRange' => $start,'midRange'=>$mid,
                    'endRange' => $end, 'companyID' => $companyID, 'createdPCID' => $pc,
                    'createdUserID' => $userID, 'createdDateTime' => $dateTime, 'timestamp' => $dateTime, 'air_ticket_enhancement' => $air_ticket
                ];
            } else { //update
                $up_data[] = [
                    'id' => $auto_id, 'startRange' => $row,'midRange'=>$midRange[$cat], 'endRange' => $endRange[$cat], 'companyID' => $companyID,
                    'modifiedPCID' => $pc, 'modifiedUserID' => $userID, 'modifiedDateTime' => $dateTime, 'timestamp' => $dateTime, 'air_ticket_enhancement' => $air_ticket
                ];
            }
        }

        if (!empty($range_conflict)) {
            $message = 'Following salary categories start range should be less than end range.<br/> - ';
            $message .= join('<br/> - ', $range_conflict);
            die(json_encode(['error' => 'e', 'message' => $message]));
        }

        if (!empty($proper_fill)) {
            $message = 'Following salary categories start range or end range not filled.<br/> - ';
            $message .= join('<br/> - ', $proper_fill);
            die(json_encode(['error' => 'e', 'message' => $message]));
        }

        if (!empty($delete_arr)) {
            $this->db->where_in('id', $delete_arr)->delete('srp_erp_employeegradesalary');
        }

        if (!empty($insert_arr)) {
            $this->db->insert_batch('srp_erp_employeegradesalary', $insert_arr);
        }

        if (!empty($up_data)) {
            $this->db->update_batch('srp_erp_employeegradesalary', $up_data, 'id');
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['error' => 's', 'message' => 'Updated successfully.']);
        } else {
            echo json_encode(['error' => 'e', 'message' => 'Error in process.']);
        }
    }

    function fetch_split_salary()
    {
        $convertFormat = convert_date_format_sql();

        $this->datatables->select('splitSalaryMasterID,	splitSalaryCode, createdDateTime AS documentDate, endDate, description, confirmedYN, approvedYN, isDeleted, createdUserID, confirmedByEmpID');
        $this->datatables->from('srp_erp_splitsalarymaster');
        $this->datatables->where('CompanyID', current_companyID());
        $this->datatables->add_column('confirmed', '$1', 'confirm_user_approval_drilldown(confirmedYN,"SS",splitSalaryMasterID)');
        $this->datatables->add_column('approved', '$1', 'confirm_ap_user(approvedYN,confirmedYN,"SS",splitSalaryMasterID)');
        $this->datatables->add_column('edit', '$1', 'edit_split_salary(splitSalaryMasterID, confirmedYN, approvedYN, isDeleted, createdUserID, confirmedByEmpID)');
        $this->datatables->edit_column('DT_RowClass', '$1', 'set_deleted_class(isDeleted)');
        $this->datatables->edit_column('documentDate', '<span >$1 </span>', 'convert_date_format(documentDate)');
        $this->datatables->edit_column('startDate', '<span >$1 </span>', 'convert_date_format(startDate)');
        $this->datatables->edit_column('endDate', '<span >$1 </span>', 'convert_date_format(endDate)');
        echo $this->datatables->generate();
    }

    function create_split_salary()
    {
        $this->form_validation->set_rules('splitCurrency', 'Currency', 'trim|required');
        $this->form_validation->set_rules('splitStartDate', 'Start Date', 'trim|required');
        $this->form_validation->set_rules('splitEndDate', 'End Date', 'trim|required');
        $this->form_validation->set_rules('Description', 'Description', 'trim|required');
        $this->form_validation->set_rules('no_of_months', 'No of Months', 'trim|required');
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->create_split_salary());
        }
    }

    function delete_split_salary()
    {
        $masterID = trim($this->input->post('masterID') ?? '');
        $details = $this->db->get_where('srp_erp_splitsalary', ['splitSalaryMasterID' => $masterID])->row_array();

        if (!empty($details)) {
            die(json_encode(['e', 'Please delete all detail records before deleting this document.']));
        }
        $documentCode = $this->db->get_where('srp_erp_splitsalarymaster', ['splitSalaryMasterID' => $masterID])->row('splitSalaryCode');

        $this->db->trans_start();
        $length = strlen($documentCode);
        if ($length > 1) {
            $data = ['isDeleted' => 1, 'deletedEmpID' => current_userID(), 'deletedDate' => current_date()];
            $this->db->where('splitSalaryMasterID', $masterID);
            $this->db->update('srp_erp_splitsalarymaster', $data);
        } else {
            $this->db->where('splitSalaryMasterID', $masterID)->delete('srp_erp_splitsalary');
            $this->db->where('splitSalaryMasterID', $masterID)->delete('srp_erp_splitsalarymaster');
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Deleted successfully']);
        } else {
            echo json_encode(['e', 'Error in delete process.']);
        }
    }

    function reOpen_split_salary()
    {
        echo json_encode($this->Employee_model->reOpen_split_salary());
    }

    function fetch_emp_details_SS()
    {
        $companyID = current_companyID();
        $empID = $this->input->post('empID');
        $currency = $this->input->post('currency');
        $data = array();
        $grossSalary = $this->db->query("SELECT IFNULL(SUM(amount), 0) AS amount, transactionCurrencyDecimalPlaces, transactionCurrencyID FROM srp_erp_pay_salarydeclartion AS declartionTB
                    JOIN srp_erp_pay_salarycategories AS catTB ON catTB.salaryCategoryID = declartionTB.salaryCategoryID 
                    WHERE employeeNo = {$empID} AND declartionTB.companyID = {$companyID}")->row_array();

        $conversion = currency_conversionID($grossSalary['transactionCurrencyID'], $currency);
        $data['grossSalary'] = ROUND(($grossSalary['amount']), $grossSalary['transactionCurrencyDecimalPlaces']);
        $data['accountDetails'] = $this->db->query("SELECT bnk.bankID, bankName, accountNo, accountHolderName, acc.id,
                                 acc.isActive, bnk.bankSwiftCode, branchName, brn.branchID
                                 FROM srp_erp_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE employeeNo = {$empID} AND acc.isPrimary = 0")->result_array();

        echo json_encode($data);
    }

    function fetch_emp_account_details_SS()
    {
        $acc_id = $this->input->post('acc_id');
        $data = $this->db->query("SELECT bnk.bankID, bankName, accountNo, accountHolderName, acc.id,
                                 acc.isActive, bnk.bankSwiftCode, branchName, brn.branchID
                                 FROM srp_erp_pay_salaryaccounts AS acc
                                 JOIN srp_erp_pay_bankmaster AS bnk ON bnk.bankID=acc.bankID
                                 JOIN srp_erp_pay_bankbranches AS brn ON brn.branchID=acc.branchID
                                 WHERE acc.id = {$acc_id} AND acc.isPrimary = 0")->row_array();

        echo json_encode($data);
    }

    function save_split_salary_details()
    {
        $this->form_validation->set_rules("splitSalaryMasterID", 'splitSalaryMasterID', 'trim|required');
        $startdate = $this->input->post('startdate');
        foreach ($startdate as $key => $customer) {
            $this->form_validation->set_rules("customerID[{$key}]", 'Customer', 'trim|required');
            $this->form_validation->set_rules("grossSalary[{$key}]", 'Customer', 'trim|required');
            $this->form_validation->set_rules("monthlyDeduction[{$key}]", 'Monthly Deducation', 'trim|required');
            $this->form_validation->set_rules("comment[{$key}]", 'Comment', 'trim|required');
            $this->form_validation->set_rules("accountNo[{$key}]", 'Bank Account', 'trim|required');
        }
        if ($this->form_validation->run() == FALSE) {
            $msg = explode('</p>', validation_errors());
            $trimmed_array = array_map('trim', $msg);
            $uniqMesg = array_unique($trimmed_array);
            $validateMsg = array_map(function ($uniqMesg) {
                return $a = $uniqMesg . '</p>';
            }, array_filter($uniqMesg));
            echo json_encode(array('e', join('', $validateMsg)));
        } else {
            echo json_encode($this->Employee_model->save_split_salary_details());
        }
    }

    function split_salary_details()
    {
        $splitSalaryMasterID = $this->input->post('splitSalaryMasterID');
        $convertFormat = convert_date_format_sql();

        $this->datatables->select('splitSalaryID, empID, Ename2, DATE_FORMAT(startFrom,\'' . $convertFormat . '\') AS startFrom,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate, CONCAT(bankName,\' | \',branch ) AS bank, accountNo, bankName, branch, currency, CurrencyCode, monthlyDeduction, grossSalary');
        $this->datatables->from('srp_erp_splitsalary');
        $this->datatables->where('splitSalaryMasterID', $splitSalaryMasterID);
        $this->datatables->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = srp_erp_splitsalary.empID');
        $this->datatables->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID = srp_erp_splitsalary.currency');
        $this->datatables->add_column('edit', '$1', 'edit_split_salary_details(splitSalaryID)');
        echo $this->datatables->generate();
    }

    function delete_split_salary_details()
    {
        $masterID = trim($this->input->post('splitSalaryID') ?? '');
        $this->db->trans_start();
        $this->db->where('splitSalaryID', $masterID)->delete('srp_erp_splitsalary');

        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            echo json_encode(['s', 'Detail Deleted successfully']);
        } else {
            echo json_encode(['e', 'Error in delete process.']);
        }
    }

    function fetch_split_salary_details()
    {
        echo json_encode($this->Employee_model->fetch_split_salary_details());
    }

    function edit_split_salary_details()
    {
        $this->form_validation->set_rules("splitSalaryMasterID", 'splitSalaryMasterID', 'trim|required');
        $this->form_validation->set_rules("splitSalaryID", 'splitSalaryID', 'trim|required');
        $this->form_validation->set_rules("customerID", 'Customer', 'trim|required');
        $this->form_validation->set_rules("grossSalary", 'Customer', 'trim|required');
        $this->form_validation->set_rules("monthlyDeduction", 'Monthly Deducation', 'trim|required');
        $this->form_validation->set_rules("comment", 'Comment', 'trim|required');
        $this->form_validation->set_rules("accountNo", 'Bank Account', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            $msg = explode('</p>', validation_errors());
            $trimmed_array = array_map('trim', $msg);
            $uniqMesg = array_unique($trimmed_array);
            $validateMsg = array_map(function ($uniqMesg) {
                return $a = $uniqMesg . '</p>';
            }, array_filter($uniqMesg));
            echo json_encode(array('e', join('', $validateMsg)));
        } else {
            echo json_encode($this->Employee_model->edit_split_salary_details());
        }
    }

    function split_salary_confirmation()
    {
        echo json_encode($this->Employee_model->split_salary_confirmation());
    }

    function load_splitSalary_conformation()
    {
        $splitSalaryMasterID = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('splitSalaryMasterID') ?? '');
        $data['extra'] = $this->Employee_model->fetch_split_salary_confirmation($splitSalaryMasterID);
        $data['approval'] = $this->input->post('approval');
        if (!$this->input->post('html')) {
            $data['signature'] = fetch_signature_level('SS');
        } else {
            $data['signature'] = '';
        }
        $data['logo'] = mPDFImage;
        if ($this->input->post('html')) {
            $data['logo'] = htmlImage;
        }
        $html = $this->load->view('system/hrm/ajax/split_salary_view', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['master']['approvedYN']);
        }
    }

    function referback_split_salary()
    {
        $splitSalaryMasterID = $this->input->post('splitSalaryMasterID');
        $this->db->select('approvedYN,splitSalaryCode');
        $this->db->where('splitSalaryMasterID', trim($splitSalaryMasterID));
        $this->db->where('approvedYN', 1);
        $this->db->where('confirmedYN', 1);
        $this->db->from('srp_erp_splitsalarymaster');
        $approved_split_salary = $this->db->get()->row_array();
        if (!empty($approved_purchase_request)) {
            echo json_encode(array('e', 'The document already approved - ' . $approved_split_salary['splitSalaryCode']));
        } else {
            $this->load->library('approvals');
            $status = $this->approvals->approve_delete($splitSalaryMasterID, 'SS');
            if ($status == 1) {
                echo json_encode(array('s', ' Referred Back Successfully.', $status));
            } else {
                echo json_encode(array('e', ' Error in refer back.', $status));
            }
        }
    }

    function fetch_split_salary_approval()
    {
        /*
         * rejected = 1
         * not rejected = 0
         * */

        $companyID = current_companyID();
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $convertFormat = convert_date_format_sql();
        $currentuser = current_userID();

        if ($approvedYN == 0) {
            $this->datatables->select('srp_erp_splitsalarymaster.splitSalaryMasterID as splitSalaryMasterID,splitSalaryCode,
            DATE_FORMAT(srp_erp_splitsalarymaster.createdDateTime,\'' . $convertFormat . '\') AS documentDate,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate,
            
            description,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN,documentApprovedID,approvalLevelID', false);
            $this->datatables->from('srp_erp_splitsalarymaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_splitsalarymaster.splitSalaryMasterID AND srp_erp_documentapproved.approvalLevelID = srp_erp_splitsalarymaster.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_splitsalarymaster.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SS');
            $this->datatables->where('srp_erp_approvalusers.documentID', 'SS');
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', $approvedYN);
            $this->datatables->where('srp_erp_splitsalarymaster.CompanyID', current_companyID());

            $this->datatables->add_column('splitSalaryCode', '$1', 'approval_change_modal(splitSalaryCode,splitSalaryMasterID,documentApprovedID,approvalLevelID,approvedYN,SS,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"SS",splitSalaryMasterID)');

            $this->datatables->add_column('edit', '$1', 'splitSalary_action_approval(splitSalaryMasterID,approvalLevelID,approvedYN,documentApprovedID,SS)');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('srp_erp_splitsalarymaster.splitSalaryMasterID as splitSalaryMasterID,splitSalaryCode,
            DATE_FORMAT(srp_erp_splitsalarymaster.createdDateTime,\'' . $convertFormat . '\') AS documentDate,DATE_FORMAT(startDate,\'' . $convertFormat . '\') AS startDate,DATE_FORMAT(endDate,\'' . $convertFormat . '\') AS endDate,
            
            description,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN,documentApprovedID,approvalLevelID', false);
            $this->datatables->from('srp_erp_splitsalarymaster');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_splitsalarymaster.splitSalaryMasterID AND srp_erp_documentapproved.approvalLevelID = srp_erp_splitsalarymaster.currentLevelNo');
            $this->datatables->where('srp_erp_documentapproved.documentID', 'SS');
            $this->datatables->where('srp_erp_documentapproved.approvedYN', $approvedYN);
            $this->datatables->where('srp_erp_splitsalarymaster.CompanyID', current_companyID());

            $this->datatables->add_column('splitSalaryCode', '$1', 'approval_change_modal(splitSalaryCode,splitSalaryMasterID,documentApprovedID,approvalLevelID,approvedYN,SS,0)');
            $this->datatables->add_column('confirmed', "<center>Level $1</center>", 'approvalLevelID');
            $this->datatables->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"SS",splitSalaryMasterID)');

            $this->datatables->add_column('edit', '$1', 'splitSalary_action_approval(splitSalaryMasterID,approvalLevelID,approvedYN,documentApprovedID,SS)');
            echo $this->datatables->generate();
        }

    }

    function save_split_salary_approval()
    {
        $system_code = trim($this->input->post('splitSalaryMasterID') ?? '');
        $level_id = trim($this->input->post('Level') ?? '');
        $status = trim($this->input->post('po_status') ?? '');
        if ($status == 1) {
            $approvedYN = checkApproved($system_code, 'SS', $level_id);
            if ($approvedYN) {
                $this->session->set_flashdata('w', 'Document already approved');
                echo json_encode(FALSE);
            } else {
                $this->db->select('splitSalaryMasterID');
                $this->db->where('splitSalaryMasterID', trim($system_code));
                $this->db->where('approvedYN', 2);
                $this->db->from('srp_erp_splitsalarymaster');
                $po_approved = $this->db->get()->row_array();
                if (!empty($po_approved)) {
                    $this->session->set_flashdata('w', 'Document already rejected');
                    echo json_encode(FALSE);
                } else {
                    $this->form_validation->set_rules('po_status', 'Purchase Order Status', 'trim|required');
                    if ($this->input->post('po_status') == 2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('splitSalaryMasterID', 'Split Salary ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->save_split_salary_approval());
                    }
                }
            }
        } else if ($status == 2) {
            $this->db->select('splitSalaryMasterID');
            $this->db->where('splitSalaryMasterID', trim($system_code));
            $this->db->where('approvedYN', 2);
            $this->db->where('confirmedYN !=', 1);
            $this->db->from('srp_erp_splitsalarymaster');
            $po_approved = $this->db->get()->row_array();
            if (!empty($po_approved)) {
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
            } else {
                $rejectYN = checkApproved($system_code, 'SS', $level_id);
                if (!empty($rejectYN)) {
                    $this->session->set_flashdata('w', 'Document already approved');
                    echo json_encode(FALSE);
                } else {
                    $this->form_validation->set_rules('po_status', 'Purchase Order Status', 'trim|required');
                    if ($this->input->post('po_status') == 2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('splitSalaryMasterID', 'Split Salary ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->save_split_salary_approval());
                    }
                }
            }
        }
    }

    function change_empPrimaryBankAccount()
    {
        $this->db->trans_start();
        $sccountID = trim($this->input->post('accountID') ?? '');
        $empID = trim($this->input->post('empID') ?? '');
        $companyID = current_companyID();
        $this->load->helpers('configuration_helper');
        $dataChange=getPolicyValues('APEMP', 'All');

        if($dataChange==0){
            $data['isPrimary'] = 0;
            $this->db->where('employeeNo', $empID);
            $this->db->update('srp_erp_pay_salaryaccounts', $data);

            $data['isPrimary'] = 1;
            $this->db->where('id', $sccountID);
            $this->db->where('employeeNo', $empID);
            $this->db->update('srp_erp_pay_salaryaccounts', $data);
        }
        else{
            $change=[
                'empID'=>$empID,
                'relatedColumnID'=>$sccountID,
                'realtedColumnName'=>'id',
                'columnName'=>'isPrimary',
                'columnVal'=> 1,
                'approvedYN'=>0,
                'companyID'=>$companyID ,
                'timestamp'=>current_date(),
                'tableName'=>'srp_erp_pay_salaryaccounts',
            ];

            $this->db->insert('srp_erp_employeedatachanges',$change);
        }
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            echo json_encode(['s', 'Primary Bank account Updated Succesfully!']);
        } else {
            $this->db->trans_rollback();
            echo json_encode(['e', 'Primary Bank account Update Failed!']);
        }
    }

    function load_segments_table()
    {
        $companyID = current_companyID();
        $this->datatables->select("segment.segmentID as segmentID,
        segment.description as description",
            true)
            ->from('srp_erp_segment AS segment')
            ->where('segment.companyID', $companyID)
            ->add_column('succession_plan_link', '$1', 'succession_plan_link(segmentID,description)');
        echo $this->datatables->generate();
    }

    function load_succession_headers_table()
    {
        $companyID = current_companyID();
        $this->datatables->select("sp_headers.headerID as headerID,
        sp_headers.description as description,
        sp_headers.isActive as isActive,
        ", true)
            ->from('srp_erp_hrms_sp_headers AS sp_headers')
            ->where('sp_headers.companyID', $companyID)
            ->add_column('isActiveColumn', '$1', 'succession_header_active_status(isActive,headerID)')
            ->add_column('edit', '$1', 'succession_header_edit(headerID,description,isActive)');
        echo $this->datatables->generate();
    }

    function save_succession_header()
    {
        $description = nl2br($this->input->post('description', true));
        $id = $this->input->post('id', true);
        $companyID = current_companyID();
        if ($id != "") {
            $record = array(
                "description" => $description
            );
            $this->db->where('headerID', $id);
            $this->db->update('srp_erp_hrms_sp_headers', $record);
            $data['status'] = 'success';
            $data['message'] = 'Record saved successfully.';
        } else {
            $record = array(
                "description" => $description,
                "companyID" => $companyID
            );
            $this->db->insert('srp_erp_hrms_sp_headers', $record);
            $data['status'] = 'success';
            $data['message'] = 'Record saved successfully.';
        }
        echo json_encode($data);
    }

    function update_succession_header_active_status()
    {
        $status = $this->input->post('status', true);
        $header_id = $this->input->post('header_id', true);
        $record = array(
            "isActive" => $status
        );
        $this->db->where('headerID', $header_id);
        $this->db->update('srp_erp_hrms_sp_headers', $record);
        $data['status'] = 'success';
        $data['message'] = 'Record saved successfully.';
        echo json_encode($data);
    }

    function get_segment_by_id()
    {
        $segment_id = $this->input->post('segment_id', true);
        $row = $this->db->query("select * from srp_erp_segment where segmentID=$segment_id")->row();
        echo json_encode($row);
    }

    function get_designations()
    {
        $companyID = current_companyID();
        $result = $this->db->query("select * from srp_designation where Erp_companyID=$companyID")->result();
        echo json_encode($result);
    }

    function get_employees_filt_seg_desig()
    {
        $segment_id = $this->input->post('segment_id', true);
        $designation_id = $this->input->post('designation_id', true);
        $result = $this->db->query("select * from srp_employeesdetails where segmentID=$segment_id and EmpDesignationId=$designation_id")->result();
        $html = '<select class="form-control" id="employee_dropdown" onchange="emp_onchange()">';
        $html .= '<option value="">Select an employee</option>';
        foreach ($result as $row) {
            $html .= '<option value="' . $row->EIdNo . '" onchange="">' . $row->Ename1 . ' - ' . $row->ECode . '</option>';
        }
        $html .= '</select>';
        echo $html;
    }

    function get_employees_filt_seg()
    {
        $segment_id = $this->input->post('segment_id', true);
        $result = $this->db->query("select * from srp_employeesdetails where segmentID=$segment_id")->result();
        //echo var_dump($this->db->last_query());exit;
        echo json_encode($result);
    }

    function get_emp_manager()
    {
        $emp_id = $this->input->post('emp_id', true);
        $row = $this->db->query("select * from srp_employeesdetails where EIdNo in (select srp_erp_employeemanagers.managerID from srp_erp_employeemanagers
join srp_employeesdetails on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo
where srp_employeesdetails.EIdNo=$emp_id and srp_erp_employeemanagers.active=1)
")->row();
        echo json_encode($row);
    }

    function save_succession_plan()
    {
        $this->load->library('Approvals');
        $segmentID = $this->input->post('segmentID', true);
        $empID = $this->input->post('empID', true);
        $currentDesignationID = $this->input->post('currentDesignationID', true);
        $reportingManagerID = $this->input->post('reportingManagerID', true);
        $hodID = $this->input->post('hodID', true);
        $roleLevel = $this->input->post('roleLevel', true);
        $form_status = $this->input->post('form_status', true);
        $spAutoID = $this->input->post('spAutoID', true);
        $is_confirmed = $this->input->post('is_confirmed', true);
        $year = $this->input->post('year', true);

        $department_row = $this->db->query("SELECT srp_departmentmaster.DepartmentMasterID,srp_departmentmaster.DepartmentDes FROM `srp_departmentmaster` 
join srp_empdepartments on srp_departmentmaster.DepartmentMasterID=srp_empdepartments.DepartmentMasterID
where srp_empdepartments.EmpID=$empID")->row();
        if(empty($department_row)){
            $department_row = (object)[];
            $department_row->DepartmentMasterID=0;
        }
        $companyID = current_companyID();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserName = current_employee();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();


        if ($form_status == 'new') {
            //serial number
            $last_id_query = $this->db->query("SELECT spAutoID FROM `srp_erp_hrms_sp_documents` ORDER BY spAutoID DESC");
            if ($last_id_query->num_rows() > 0) {
                $last_id = $last_id_query->row()->spAutoID;
                $index = $last_id + 1;
            } else {
                $index = 1;
            }

            $length = 6;
            $serialNo = substr(str_repeat(0, $length) . $index, -$length);
            $documentsystemCode = 'SCP' . $serialNo;

            $record = array(
                "segmentID" => $segmentID,
                "departmentID" => $department_row->DepartmentMasterID,
                "documentID" => 'SCP',
                "documentsystemCode" => $documentsystemCode,
                "serialNo" => $serialNo,
                "empID" => $empID,
                "currentDesignationID" => $currentDesignationID,
                "reportingManagerID" => $reportingManagerID,
                "hodID" => $hodID,
                "roleLevel" => $roleLevel,
                "companyID" => $companyID,
                "createdPCID" => $createdPCID,
                "createdUserID" => $createdUserID,
                "createdDateTime" => $createdDateTime,
                "createdUserName" => $createdUserName,
                "createdUserGroup" => $createdUserGroup,
                "modifiedPCID" => '',
                "modifiedUserID" => '',
                "modifiedDateTime" => '',
                "modifiedUserName" => '',
                "timestamp" => $createdDateTime,
                "year"=>$year
            );
            $this->db->insert('srp_erp_hrms_sp_documents', $record);
        } else {
            $record = array(
                "segmentID" => $segmentID,
                "departmentID" => $department_row->DepartmentMasterID,
                "empID" => $empID,
                "currentDesignationID" => $currentDesignationID,
                "reportingManagerID" => $reportingManagerID,
                "hodID" => $hodID,
                "roleLevel" => $roleLevel,
                "modifiedPCID" => $createdPCID,
                "modifiedUserID" => $createdUserID,
                "modifiedDateTime" => $createdDateTime,
                "modifiedUserName" => $createdUserName,
                "timestamp" => $createdDateTime,
                "year"=>$year
            );
            $this->db->where('spAutoID', $spAutoID);
            $this->db->update('srp_erp_hrms_sp_documents', $record);
            $documentsystemCode = $this->db->query("select documentsystemCode from srp_erp_hrms_sp_documents where spAutoID=$spAutoID")->row()->documentsystemCode;
        }

        if ($is_confirmed == '1') {
            $approvals_status = $this->approvals->CreateApproval('SCP', $spAutoID, $documentsystemCode, 'Succession Plan', 'srp_erp_hrms_sp_documents', 'spAutoID');
            $record = array(
                "confirmedYN" => 1,
                "confirmedByEmpID" => $createdUserID,
                "confirmedByName" => $createdUserName,
                "confirmedDate" => $createdDateTime
            );
            $this->db->where('spAutoID', $spAutoID);
            $this->db->update('srp_erp_hrms_sp_documents', $record);
        }

        $data['status'] = 'success';
        $data['message'] = 'Successfully saved.';
        echo json_encode($data);
    }

    function load_succession_plans()
    {
        $convertFormat = convert_date_format_sql();
        $segmentID = $this->input->post('segmentID', true);
        $this->datatables->select('sp_doc.spAutoID as spAutoID,
        sp_doc.documentsystemCode as documentsystemCode,
        srp_erp_segment.description as segment_des,
        srp_designation.DesDescription as DesDescription,
        DATE_FORMAT(sp_doc.createdDateTime,\'' . $convertFormat . '\') AS createdDateTime,
        sp_doc.createdUserName,
        srp_employeesdetails.Ename1,
        sp_doc.confirmedYN as confirmedYN,
        sp_doc.approvedYN as approvedYN,
        sp_doc.year as year', false);
        $this->datatables->from('srp_erp_hrms_sp_documents sp_doc');
        $this->datatables->join('srp_erp_segment', 'srp_erp_segment.segmentID = sp_doc.segmentID');
        $this->datatables->join('srp_employeedesignation', 'srp_employeedesignation.DesignationID = sp_doc.currentDesignationID');
        $this->datatables->join('srp_designation', 'srp_designation.DesignationID = sp_doc.currentDesignationID');
        $this->datatables->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = sp_doc.empID');
        $this->datatables->where('sp_doc.segmentID', $segmentID);
        $this->datatables->group_by('sp_doc.spAutoID');
        $this->datatables->add_column('confirmed_status', '$1', 'succession_plan_confirmed_status(confirmedYN,approvedYN)');
        $this->datatables->add_column('view_btn', '$1', 'sp_view_btn(spAutoID,confirmedYN,approvedYN)');

        echo $this->datatables->generate();

    }

    function get_sp_by_id()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $row = $this->db->query("select srp_erp_hrms_sp_documents.empID,
srp_erp_hrms_sp_documents.reportingManagerID,
srp_erp_hrms_sp_documents.hodID,
srp_erp_hrms_sp_documents.roleLevel,
srp_erp_hrms_sp_documents.currentDesignationID,
srp_erp_hrms_sp_documents.confirmedYN,
srp_erp_hrms_sp_documents.year
from srp_erp_hrms_sp_documents
where srp_erp_hrms_sp_documents.spAutoID=$spAutoID")->row();

        $data['empID'] = $row->empID;
        $data['emp_name'] = $this->get_emp_name($data['empID']);
        $data['reportingManagerID'] = $row->reportingManagerID;
        $data['reportingManagerName'] = $this->get_emp_name($data['reportingManagerID']);
        $data['hodID'] = $row->hodID;
        $data['currentDesignationID'] = $row->currentDesignationID;
        $data['roleLevel'] = $row->roleLevel;
        $data['confirmedYN'] = $row->confirmedYN;
        $data['year'] = $row->year;
        echo json_encode($data);

    }

    function get_emp_name($emp_id)
    {
        $row = $this->db->query("select * from srp_employeesdetails where EIdNo=$emp_id")->row();
        return $row->Ename1;
    }

    function sp_header_add()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $header_id = $this->input->post('header_id', true);
        $header_emp_id = $this->input->post('header_emp_id', true);
        $header_current_role = $this->input->post('header_current_role', true);
        $header_role_level = $this->input->post('header_role_level', true);
        $companyID = current_companyID();
        $createdPCID = current_pc();
        $createdUserID = current_userID();
        $createdUserName = current_employee();
        $createdUserGroup = current_user_group();
        $createdDateTime = current_date();
        $record = array(
            'spAutoID' => $spAutoID,
            'HeaderID' => $header_id,
            'empID' => $header_emp_id,
            'designationID' => $header_current_role,
            'roleLevel' => $header_role_level,
            'companyID' => $companyID,
            "createdPCID" => $createdPCID,
            "createdUserID" => $createdUserID,
            "createdDateTime" => $createdDateTime,
            "createdUserName" => $createdUserName,
            "createdUserGroup" => $createdUserGroup,
            "modifiedPCID" => '',
            "modifiedUserID" => '',
            "modifiedDateTime" => '',
            "modifiedUserName" => '',
            "timestamp" => $createdDateTime
        );
        $this->db->insert('srp_erp_sp_document_headers', $record);
        $data['status'] = 'success';
        $data['message'] = 'Header added successfully.';
        echo json_encode($data);
    }

    function get_emp_designation()
    {
        $emp_id = $this->input->post('emp_id', true);
        $row = $this->db->query("select * from srp_designation
join srp_employeedesignation on srp_employeedesignation.DesignationID=srp_designation.DesignationID
where srp_employeedesignation.EmpID=$emp_id")->row();
        echo json_encode($row);
    }

    function get_header_list()
    {
        $companyID = current_companyID();
        $result = $this->db->query("select * from srp_erp_hrms_sp_headers where companyID=$companyID and isActive=1")->result();
        echo json_encode($result);
    }

    function succession_plan_header_table()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $this->datatables->select('document_headers.documentHeaderID as documentHeaderID,
        document_headers.spAutoID as spAutoID,
        document_headers.HeaderID as HeaderID,
        document_headers.empID as empID,
        document_headers.designationID as designationID,
        document_headers.roleLevel as roleLevel,
        srp_designation.DesDescription as DesDescription,
        srp_erp_hrms_sp_headers.description as header_description,
        srp_employeesdetails.Ename1 as Ename1,
        srp_erp_hrms_sp_documents.confirmedYN as confirmedYN', false);
        $this->datatables->from('srp_erp_sp_document_headers document_headers');
        $this->datatables->join('srp_designation', 'srp_designation.DesignationID = document_headers.designationID');
        $this->datatables->join('srp_erp_hrms_sp_headers', 'srp_erp_hrms_sp_headers.headerID = document_headers.HeaderID');
        $this->datatables->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo = document_headers.empID');
        $this->datatables->join('srp_erp_hrms_sp_documents', 'srp_erp_hrms_sp_documents.spAutoID = document_headers.spAutoID');

        $this->datatables->where('document_headers.spAutoID', $spAutoID);
        $this->datatables->add_column('action', '$1', 'succession_plan_header_table_action(documentHeaderID,confirmedYN)');
        echo $this->datatables->generate();
    }


    function succession_plan_approval_table()
    {
        /*
        * rejected = 1
        * not rejected = 0
        * */
        //error_reporting(0);
        $convertFormat = convert_date_format_sql();
        $companyID = $this->common_data['company_data']['company_id'];
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $currentuserid = current_userID();
        if ($approvedYN == '1') {
            $this->datatables->select('sp_documents.spAutoID as spAutoID,
            sp_documents.segmentID,
            sp_documents.currentDesignationID,            
            sp_documents.documentsystemCode,
            sp_documents.confirmedYN as confirmedYN,
            srp_erp_segment.description as seg_des,
            srp_designation.DesDescription as DesDescription,
            srp_erp_documentapproved.approvalLevelID as approvalLevelID,
            sp_documents.approvedYN as approvedYN,
            srp_erp_documentapproved.documentApprovedID as documentApprovedID');
            $this->datatables->from('srp_erp_hrms_sp_documents sp_documents');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = sp_documents.spAutoID AND srp_erp_documentapproved.approvalLevelID = sp_documents.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = sp_documents.currentLevelNo');
            $this->datatables->join('srp_erp_segment', 'srp_erp_segment.segmentID = sp_documents.segmentID');
            $this->datatables->join('srp_designation', 'srp_designation.DesignationID = sp_documents.currentDesignationID');
            $this->datatables->where_in('srp_erp_documentapproved.documentID', array('SCP'));
            $this->datatables->where_in('srp_erp_approvalusers.documentID', array('SCP'));
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->where('sp_documents.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->group_by('srp_erp_documentapproved.documentSystemCode');
            $this->datatables->add_column('confirmedYN', '$1', 'succession_plan_confirm_status(confirmedYN)');//corporate_goal_confirm_status(confirmedYN)
            $this->datatables->add_column('approved', '$1', 'sp_approval_drilldown(approvedYN,"SCP",spAutoID)');
            $this->datatables->add_column('edit', '$1', 'succession_plan_approval_action(spAutoID,approvalLevelID,approvedYN,documentApprovedID,spAutoID,0)');
            echo $this->datatables->generate();
        } else {
            $this->datatables->select('sp_documents.spAutoID as spAutoID,
            sp_documents.segmentID,
            sp_documents.currentDesignationID,            
            sp_documents.documentsystemCode,
            sp_documents.confirmedYN as confirmedYN,
            srp_erp_segment.description as seg_des,
            srp_designation.DesDescription as DesDescription,
            srp_erp_documentapproved.approvalLevelID as approvalLevelID,
            sp_documents.approvedYN as approvedYN,
            srp_erp_documentapproved.documentApprovedID as documentApprovedID');
            $this->datatables->from('srp_erp_hrms_sp_documents sp_documents');
            $this->datatables->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = sp_documents.spAutoID AND srp_erp_documentapproved.approvalLevelID = sp_documents.currentLevelNo');
            $this->datatables->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = sp_documents.currentLevelNo');
            $this->datatables->join('srp_erp_segment', 'srp_erp_segment.segmentID = sp_documents.segmentID');
            $this->datatables->join('srp_designation', 'srp_designation.DesignationID = sp_documents.currentDesignationID');
            $this->datatables->where_in('srp_erp_documentapproved.documentID', array('SCP'));
            $this->datatables->where_in('srp_erp_approvalusers.documentID', array('SCP'));
            $this->datatables->where('srp_erp_approvalusers.employeeID', $this->common_data['current_userID']);
            $this->datatables->where('srp_erp_documentapproved.approvedYN', trim($this->input->post('approvedYN') ?? ''));
            $this->datatables->where('sp_documents.companyID', $companyID);
            $this->datatables->where('srp_erp_approvalusers.companyID', $companyID);
            $this->datatables->group_by('srp_erp_documentapproved.documentSystemCode');
            $this->datatables->add_column('confirmedYN', '$1', 'succession_plan_confirm_status(confirmedYN)');//corporate_goal_confirm_status(confirmedYN)
            $this->datatables->add_column('approved', '$1', 'sp_approval_drilldown(approvedYN,"SCP",spAutoID)');
            $this->datatables->add_column('edit', '$1', 'succession_plan_approval_action(spAutoID,approvalLevelID,approvedYN,documentApprovedID,spAutoID,0)');
            echo $this->datatables->generate();
        }

    }

    function get_sp_approval_by_id()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $row = $this->db->query("select srp_erp_hrms_sp_documents.empID,
srp_erp_hrms_sp_documents.reportingManagerID,
srp_erp_hrms_sp_documents.hodID,
srp_erp_hrms_sp_documents.roleLevel,
srp_erp_hrms_sp_documents.currentDesignationID,
srp_erp_segment.description as seg_des,
srp_designation.DesDescription as DesDescription,
srp_employeesdetails.Ename1 as Ename1
from srp_erp_hrms_sp_documents
join srp_erp_segment on srp_erp_segment.segmentID = srp_erp_hrms_sp_documents.segmentID
join srp_designation on srp_designation.DesignationID = srp_erp_hrms_sp_documents.currentDesignationID
join srp_employeesdetails on srp_erp_hrms_sp_documents.empID = srp_employeesdetails.EIdNo
where srp_erp_hrms_sp_documents.spAutoID=$spAutoID")->row();

        $data['segment'] = $row->seg_des;
        $data['DesDescription'] = $row->DesDescription;
        $data['empID'] = $row->empID;
        $data['emp_name'] = $this->get_emp_name($data['empID']);
        $data['reportingManagerID'] = $row->reportingManagerID;
        $data['reportingManagerName'] = $this->get_emp_name($data['reportingManagerID']);
        $data['hodID'] = $row->hodID;
        $data['hod_name'] = $this->get_emp_name($data['hodID']);
        $data['currentDesignationID'] = $row->currentDesignationID;
        $data['roleLevel'] = $row->roleLevel;
        echo json_encode($data);

    }

    function save_succession_plan_approval()
    {
        $system_code = trim($this->input->post('goal_id') ?? '');
        $level_id = trim($this->input->post('level') ?? '');
        $status = trim($this->input->post('status') ?? '');
        $code = trim($this->input->post('code') ?? '');
        if ($status == 1) {
            $approvedYN = checkApproved($system_code, $code, $level_id);
            if ($approvedYN) {
                //$this->session->set_flashdata('w', 'Document already approved');
                $data['status'] = false;
                $data['message'] = 'Document already approved';
                echo json_encode($data);
                exit;
            } else {
                $this->db->select('spAutoID');
                $this->db->where('spAutoID', trim($system_code));
                $this->db->where('confirmedYN', 2);
                $this->db->from('srp_erp_hrms_sp_documents');
                $po_approved = $this->db->get()->row_array();
                if (!empty($po_approved)) {
//                    $this->session->set_flashdata('w', 'Document already rejected');
                    $data['status'] = false;
                    $data['message'] = 'Document already rejected';
                    echo json_encode($data);
                    exit;
                } else {
                    if ($this->input->post('status') == 2) {
                        $this->form_validation->set_rules('comment', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('status', 'Status', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $data['status'] = false;
                        $data['message'] = validation_errors();
                        echo json_encode($data);
                        exit;
                    } else {
                        echo json_encode($this->sp_approval());
                        exit;
                    }
                }
            }
        } else if ($status == 2) {
            $this->db->select('spAutoID');
            $this->db->where('spAutoID', trim($system_code));
            $this->db->where('confirmedYN', 2);
            $this->db->from('srp_erp_hrms_sp_documents');
            $po_approved = $this->db->get()->row_array();
            if (!empty($po_approved)) {
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
                exit;
            } else {
                $rejectYN = checkApproved($system_code, $code, $level_id);
                if (!empty($rejectYN)) {

                    $data['status'] = false;
                    $data['message'] = 'Document already approved';
                    echo json_encode($data);
                    exit;
                } else {
                    if ($this->input->post('status') == 2) {
                        $this->form_validation->set_rules('comment', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('status', 'Status', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $data['status'] = false;
                        $data['message'] = validation_errors();
                        echo json_encode($data);
                    } else {
                        echo json_encode($this->sp_approval());
                        exit;
                    }
                }
            }
        }
        echo $this->session->flashdata('w');
    }

    function sp_approval($autoappLevel = 1, $system_idAP = 0, $statusAP = 0, $commentsAP = 0)
    {
        $this->db->trans_start();
        $this->load->library('Approvals');
        if ($autoappLevel == 1) {
            $system_code = trim($this->input->post('goal_id') ?? '');
            $level_id = trim($this->input->post('level') ?? '');
            $status = trim($this->input->post('status') ?? '');
            $comments = trim($this->input->post('comment') ?? '');
            $code = trim($this->input->post('code') ?? '');
        } else {
            $system_code = $system_idAP;
            $level_id = 0;
            $status = $statusAP;
            $comments = $commentsAP;
            $_post['contractAutoID'] = $system_code;
            $_post['Level'] = $level_id;
            $_post['status'] = $status;
            $_post['comments'] = $comments;
        }

        $code = trim($this->input->post('code') ?? '');
//var_dump($comments);exit;
        if ($autoappLevel == 0) {
            $approvals_status = 1;
        } else {
            $code = trim($this->input->post('code') ?? '');
            $approvals_status = $this->approve_document($system_code, $level_id, $status, $comments, $code);
        }

        if ($status == 1) {
            $data['status'] = true;
            $data['message'] = "Successfully approved.";
        } else {
            $data['status'] = true;
            $data['message'] = "Successfully rejected.";
        }

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            $data['status'] = false;
            $data['message'] = "Goal not approved due to an system error.";
            return $data;
        } else {
            $this->db->trans_commit();
            return $data;
        }
    }

    function approve_document($system_code, $level_id, $status, $comments, $documentCode)
    {
        $this->db->select('documentCode,approvedYN');
        $this->db->from('srp_erp_documentapproved');
        $this->db->where('documentID', $documentCode);
        $this->db->where('documentSystemCode', $system_code);
        $this->db->where('approvedYN', 2);
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $approval_data = $this->db->get()->row_array();

        if (!empty($approval_data)) {
            $this->session->set_flashdata('w', $documentCode . 'Approval : ' . $approval_data['documentCode'] . ' This ' . $documentCode . ' has been rejected already! You cannot do approval for this..');
            return 3;
        } else {
            if ($level_id > 1) {
                $previousLevel = $level_id - 1;
                $isLast_where = array('documentID' => $documentCode, 'documentSystemCode' => $system_code, 'approvalLevelID' => $previousLevel);
                $this->db->select('approvedYN');
                $this->db->from('srp_erp_documentapproved');
                $this->db->where($isLast_where);
                $isLastLevelApproved = $this->db->get()->row_array();
                if ($isLastLevelApproved['approvedYN'] == 1) {
                    if ($status == 1) {

                        return $this->approve($system_code, $level_id, $status, $comments, $documentCode);
                    } elseif ($status == 2) {
                        return $this->reject($system_code, $level_id, $comments, $documentCode);
                    }

                } else {
                    $this->session->set_flashdata('w', $documentCode . ' `s Previous level Approval not Finished.');
                    return 5;
                }
            } else {
                if ($status == 1) {

                    return $this->approve($system_code, $level_id, $status, $comments, $documentCode);
                } elseif ($status == 2) {
                    return $this->reject($system_code, $level_id, $comments, $documentCode);
                }
            }
        }
    }

    function approve($system_code, $level_id, $status, $comments, $documentCode)
    {
        $maxlevel = $this->maxlevel($documentCode);
        $maxlevelNo = $maxlevel['levelNo'];
//var_dump($maxlevel);exit;
        $this->db->trans_start();

        $data = array(
            'approvedYN' => $status,
            'approvedEmpID' => current_userID(),
            'approvedComments' => $comments,
            'approvedDate' => $this->common_data['current_date'],
            'approvedPC' => $this->common_data['current_pc']
        );

        $this->db->where('documentSystemCode', $system_code);
        $this->db->where('documentID', $documentCode);
        $this->db->where('approvalLevelID', $level_id);
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->update('srp_erp_documentapproved', $data);
        $data = $this->details($system_code, $documentCode);

        /* write my alert table*/
        $policy = getPolicyValues('SCP', 'All');
        /**/
        if ($data['approvedYN'] == 1) {
            if (!empty($data['table_unique_field_name']) && !empty($data['table_name'])) {
                $dataUpdate = array(
                    'approvedYN' => '1',
                    'approvedDate' => $this->common_data['current_date'],
                    'approvedbyEmpID' => $this->common_data['current_userID'],
                    'approvedComments' => $comments
                );

                if (!in_array($documentCode, ['VD'])) {
                    $dataUpdate['approvedbyEmpName'] = $this->common_data['current_user'];
                }

                $this->db->where(trim($data['table_unique_field_name'] ?? ''), $system_code);
                $this->db->update(trim($data['table_name'] ?? ''), $dataUpdate);

                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Approval.');
                    return 'e';
                } else {
                    $this->db->trans_commit();
                    $this->session->set_flashdata('s', $data['documentCode'] . ' Approved Successfully.');
                    return 1;
                }

            } else {
                $this->db->trans_complete();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Approval.');
                    return 'e';
                } else {
                    $this->db->trans_commit();
                    $this->session->set_flashdata('s', $data['documentCode'] . ' Approved Successfully.');
                    return 3;
                }
            }
        } else {
            /*update current level in master record*/
            $dataUpdate = array(
                'currentLevelNo' => $level_id + 1,
            );
            $this->db->where(trim($data['table_unique_field_name'] ?? ''), $system_code);
            $this->db->update(trim($data['table_name'] ?? ''), $dataUpdate);

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return 'e';
            } else {
                $this->db->trans_commit();
                $this->session->set_flashdata('s', $data['documentCode'] . ' Approved Successfully.');
                return 2;
            }
        }

    }

    function reject($system_code, $level_id, $comments, $documentCode)
    {
        $this->db->trans_start();
        $data = $this->details($system_code, $documentCode);
        $rejectData = array(
            'documentID' => $data['documentID'],
            'systemID' => $system_code,
            'documentCode' => $data['documentCode'],
            'comment' => $comments,
            'rejectedLevel' => $level_id,
            'rejectByEmpID' => $this->common_data['current_userID'],
            'table_name' => $data['table_name'],
            'table_unique_field' => $data['table_unique_field_name'],
            'companyID' => $this->common_data['company_data']['company_id'],
            'companyCode' => $this->common_data['company_data']['company_code'],
            'createdPCID' => $this->common_data['current_pc'],
            'createdUserID' => $this->common_data['current_userID'],
            'createdUserName' => $this->common_data['current_user'],
            'createdDateTime' => $this->common_data['current_date']
        );

        $this->db->insert('srp_erp_approvalreject', $rejectData);

        $this->db->trans_commit();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Approval Reject Process.');
            return 'e';
        } else {

            $delete_data = $this->approve_delete($system_code, $documentCode, false);

            if ($delete_data == 1) {
                //$this->emailRejectAlert($data['table_name'], $data['table_unique_field_name'], $system_code, $data['documentCode'], $documentCode);
                $this->session->set_flashdata('s', $data['documentCode'] . ' Approvals  Reject Process Successfully done.');
                return 3;
            } else {
                $this->session->set_flashdata('e', $data['documentCode'] . ' Approvals  Reject Process Failed.');
                return $delete_data;
            }
        }

    }

    function approve_delete($system_code, $documentCode, $status = true)
    {
        $this->db->trans_start();

        $data = $this->details($system_code, $documentCode);

        if ($status) {
            $confirmedYN = 3;
        } else {
            $confirmedYN = 2;
        }

        if (!empty($data)) {
            $where = array('documentID' => $documentCode, 'documentSystemCode' => $system_code);
            $this->db->where($where)->delete('srp_erp_documentapproved');

            if (!empty($data['table_unique_field_name']) && !empty($data['table_name'])) {
                if(in_array($documentCode, ['INV']) || in_array($documentCode, ['SUP'])) {
                    $dataUpdate = array(
                        'masterConfirmedYN' => $confirmedYN,
                        'masterConfirmedByEmpID' => '',
                        'masterConfirmedDate' => '',
                        'masterCurrentLevelNo' => 1
                    );

                    if (!in_array($documentCode, ['VD'])) {
                        $dataUpdate['masterConfirmedByName'] = '';
                    }
                }else{
                    $dataUpdate = array(
                        'confirmedYN' => $confirmedYN,
                        'confirmedByEmpID' => '',
                        'confirmedDate' => '',
                        'currentLevelNo' => 1
                    );

                    if (!in_array($documentCode, ['VD'])) {
                        $dataUpdate['confirmedByName'] = '';
                    }
                }
                $this->db->where(trim($data['table_unique_field_name'] ?? ''), $system_code);
                $this->db->update(trim($data['table_name'] ?? ''), $dataUpdate);

                if($documentCode == 'FS'){ /*If final settlement*/
                    $empID = $this->db->get_where('srp_erp_pay_finalsettlementmaster', ['masterID'=>$system_code])->row('empID');
                    $upData = [ 'finalSettlementDoneYN'=>0, 'ModifiedPC' => current_pc(), 'ModifiedUserName' => current_employee(), 'Timestamp' => current_date() ];
                    $this->db->where(['EIdNo'=>$empID])->update('srp_employeesdetails', $upData);
                }

                $this->db->trans_commit();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Referred Back.');
                    return 'e';
                } else {
                    $this->session->set_flashdata('s', $data['documentCode'] . ' Referred Back Successfully.');
                    return 1;
                }
            } else {
                $this->db->trans_commit();
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Referred Back.');
                    return 'e';
                } else {
                    $this->session->set_flashdata('s', $data['documentCode'] . ' Approvals Deleted Successfully.');
                    return 3;
                }
            }
        } else {
            $this->session->set_flashdata('e', $data['documentCode'] . ' Error In Referred Back.');
            return 'e1';
        }

    }

    function maxlevel($document)
    {
        $this->db->select_max('levelNo');
        $this->db->where('Status', 1);
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->where('documentID', $document);
        $this->db->from('srp_erp_approvalusers');
        return $this->db->get()->row_array();
    }

    function details($system_code, $documentCode)
    {
        $this->db->select('documentID, documentCode, table_name, table_unique_field_name, approvedYN');
        $this->db->from('srp_erp_documentapproved');
        $this->db->where('documentSystemCode', $system_code);
        $this->db->where('documentID', $documentCode);
        $this->db->where('companyID', $this->common_data['company_data']['company_id']);
        $this->db->order_by('approvalLevelID', 'DESC');
        $this->db->limit(1);
        return $this->db->get()->row_array();
//        $this->db->get()->row_array();
//        var_dump($this->db->last_query());exit;
    }

    function refer_back_succession_plan()
    {
        $masterID = $this->input->post('masterID');
        $this->load->library('approvals');
        //$status = $this->approvals->approve_delete($masterID, 'APR-EWP');

        $row = $this->db->get_where('srp_erp_documentapproved', array('documentSystemCode' => $masterID, 'documentID' => 'SCP'))->row();
        if ($row->approvedYN == 1) {
            $this->db->delete('srp_erp_documentapproved', array('documentApprovedID' => $row->documentApprovedID));
            $this->db->where('spAutoID', $masterID);
            $this->db->update('srp_erp_hrms_sp_documents',
                array(
                    'approvedYN' => 0,
                    'approvedDate' => '',
                    'approvedbyEmpID' => '',
                    'approvedbyEmpName' => '',
                    'confirmedYN' => 2,
                    'confirmedByEmpID' => '',
                    'confirmedByName' => '',
                    'confirmedDate' => ''
                ));
            $data['status'] = TRUE;
            $data['message'] = "Successfully Referred Back";
            echo json_encode($data);
        } else {
            $data['status'] = FALSE;
            $data['message'] = "Still Not Approved";
            echo json_encode($data);
        }

    }

    function get_sp_report_headers()
    {
        $companyID = current_companyID();
        $query = $this->db->query("select * from srp_erp_hrms_sp_headers where companyID=$companyID and isActive=1");
        $table = '<tr>
            <th rowspan="2">Emp Code</th>
            <th rowspan="2">Current Incumbent</th>
            <th rowspan="2">ROLE TITLE</th>
            <th rowspan="2">Line Manager</th>
            <th rowspan="2">HOD</th>
            <th rowspan="2">Role level</th>';
        foreach ($query->result() as $item) {
            $table .= ' <th colspan="3">' . $item->description . '</th>';
        }
        $table .= '</tr>';
        $table .= '<tr>';
        foreach ($query->result() as $item) {
            $table .= ' <th>Name</th>';
            $table .= ' <th>Current Role</th>';
            $table .= ' <th>Role level</th>';
        }
        $table .= '</tr>';
        echo $table;
    }

    function get_sp_report()
    {
        $segment_id = $this->input->post('segment_id', true);
        $segment_id = join(',', $segment_id);
        $emp_id = $this->input->post('emp_id', true);
        $year = $this->input->post('year', true);
        $emp_id = join(',', $emp_id);

        if($year==""){
            $year_fliter = "";
        }else{
            $year_fliter = "and srp_erp_hrms_sp_documents.year=$year";
        }
        $query = $this->db->query("select srp_erp_hrms_sp_documents.empID,
srp_erp_hrms_sp_documents.hodID,
srp_designation.DesDescription,
srp_erp_hrms_sp_documents.roleLevel,
srp_erp_hrms_sp_documents.spAutoID,
srp_employeesdetails.ECode
from srp_erp_hrms_sp_documents
join srp_designation on srp_designation.DesignationID=srp_erp_hrms_sp_documents.currentDesignationID
join srp_employeesdetails on srp_employeesdetails.EIdNo = srp_erp_hrms_sp_documents.empID
where srp_erp_hrms_sp_documents.segmentID in ($segment_id) 
and srp_erp_hrms_sp_documents.empID in ($emp_id) 
and srp_erp_hrms_sp_documents.approvedYN=1 $year_fliter");
        $tbody = "";
        foreach ($query->result() as $row) {
            $emp_id = $row->empID;
            $emp_name = $this->get_emp_name($emp_id);
            $role_title = $row->DesDescription;
            $line_manager = $this->get_emp_name($this->get_emp_manager_this($emp_id));
            $hod_name = $this->get_emp_name($row->hodID);
            $role_level = $row->roleLevel;
            $emp_code = $row->ECode;
            $tbody .= '<tr>';
            $tbody .= '<td>' . $emp_code . '</td>';
            $tbody .= '<td>' . $emp_name . '</td>';
            $tbody .= '<td>' . $role_title . '</td>';
            $tbody .= '<td>' . $line_manager . '</td>';
            $tbody .= '<td>' . $hod_name . '</td>';
            $tbody .= '<td>' . $role_level . '</td>';

            $spAutoID = $row->spAutoID;
            $companyID = current_companyID();
            $query2 = $this->db->query("select * from srp_erp_hrms_sp_headers where companyID=$companyID and isActive=1");
            foreach ($query2->result() as $row2) {
                $hid = $row2->headerID;
                $query3 = $this->db->query("select srp_erp_sp_document_headers.empID,
                    srp_designation.DesDescription,
                    srp_erp_sp_document_headers.roleLevel
                    from srp_erp_sp_document_headers 
                    join srp_designation on srp_designation.DesignationID=srp_erp_sp_document_headers.designationID
                    where srp_erp_sp_document_headers.spAutoID=$spAutoID and srp_erp_sp_document_headers.HeaderID=$hid");
                if ($query3->num_rows() > 0) {
                    $row3 = $query3->row();
                    $h_name = $this->get_emp_name($row3->empID);
                    $h_designation = $row3->DesDescription;
                    $h_rolelevel = $row3->roleLevel;
                    $tbody .= '<td>' . $h_name . '</td>';
                    $tbody .= '<td>' . $h_designation . '</td>';
                    $tbody .= '<td>' . $h_rolelevel . '</td>';
                } else {
                    $tbody .= '<td></td>';
                    $tbody .= '<td></td>';
                    $tbody .= '<td></td>';
                }
            }

            $tbody .= '</tr>';
        }
        echo $tbody;
    }

    function get_emp_manager_this($emp_id)
    {
        $row = $this->db->query("select * from srp_employeesdetails where EIdNo in (select srp_erp_employeemanagers.managerID from srp_erp_employeemanagers
            join srp_employeesdetails on srp_erp_employeemanagers.empID=srp_employeesdetails.EIdNo
            where srp_employeesdetails.EIdNo=$emp_id and srp_erp_employeemanagers.active=1)
            ")->row();
        return $row->EIdNo;
    }

    function delete_sp()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $this->db->trans_start();
        $this->db->delete('srp_erp_sp_document_headers', array('spAutoID' => $spAutoID));
        $this->db->delete('srp_erp_hrms_sp_documents', array('spAutoID' => $spAutoID));
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $data['status'] = 'failed';
            $data['message'] = 'Error';
        } else {
            $data['status'] = 'success';
            $data['message'] = 'Succession plan was deleted';
        }
        echo json_encode($data);
    }

    function delete_sph()
    {
        $documentHeaderID = $this->input->post('documentHeaderID', true);
        $this->db->trans_start();
        $this->db->delete('srp_erp_sp_document_headers', array('documentHeaderID' => $documentHeaderID));
        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $data['status'] = 'failed';
            $data['message'] = 'Error';
        } else {
            $data['status'] = 'success';
            $data['message'] = 'Succession plan header was deleted';
        }
        echo json_encode($data);
    }

    function get_segments_by_company()
    {
        $companyID = current_companyID();
        $result = $this->db->query("select * from srp_erp_segment where companyID=$companyID")->result();
        echo json_encode($result);
    }

    function get_emp_by_segment_list()
    {
        $segmentID = join(',', $this->input->post("segmentID"));
        $result = $this->db->query("select * from srp_employeesdetails where segmentID in ($segmentID)")->result();
        $html = '<select class=" filters" multiple="" required="" name="emp_dropdown[]" id="emp_dropdown">';
        foreach ($result as $row) {
            $html .= '<option value="' . $row->EIdNo . '">' . $row->Ename1 . '</option>';
        }
        $html .= '</select>';
        echo $html;
    }

    function is_sp_approval_setup_exist()
    {
        $query = $this->db->query("SELECT * FROM `srp_erp_approvalusers` where documentID='SCP'");
        if ($query->num_rows() > 0) {
            echo json_encode(array("status" => true));
        } else {
            echo json_encode(array("status" => false));
        }
    }

    function refer_back_confirmed_plan()
    {
        $spAutoID = $this->input->post('spAutoID', true);
        $row = $this->db->query("select * from srp_erp_hrms_sp_documents where spAutoID=$spAutoID")->row();
        if ($row->approvedYN == 1) {
            $data['status'] = 'failed';
            $data['message'] = 'Already approved.';
        } else {
            $this->load->library('approvals');
            //$status = $this->approvals->approve_delete($masterID, 'APR-EWP');
            $row = $this->db->get_where('srp_erp_documentapproved', array('documentSystemCode' => $spAutoID, 'documentID' => 'SCP'))->row();
            $this->db->delete('srp_erp_documentapproved', array('documentApprovedID' => $row->documentApprovedID));
            $this->db->where('spAutoID', $spAutoID);
            $this->db->update('srp_erp_hrms_sp_documents',
                array(
                    'approvedYN' => 0,
                    'approvedDate' => '',
                    'approvedbyEmpID' => '',
                    'approvedbyEmpName' => '',
                    'confirmedYN' => 0,
                    'confirmedByEmpID' => '',
                    'confirmedByName' => '',
                    'confirmedDate' => ''
                ));
            $data['status'] = 'success';
            $data['message'] = "Successfully Referred Back";
        }
        echo json_encode($data);
    }

    function is_sp_headers_exist()
    {
        $spAutoID = $this->input->post('spAutoID',true);
        $query = $this->db->query("SELECT * FROM `srp_erp_sp_document_headers` where spAutoID=$spAutoID");
        if ($query->num_rows() > 0) {
            echo json_encode(array("status" => true));
        } else {
            echo json_encode(array("status" => false));
        }
    }

    function validate_emp_header(){
        $header_id = $this->input->post('header_id',true);
        $header_emp_id = $this->input->post('header_emp_id',true);
        $spAutoID = $this->input->post('spAutoID',true);
        $query = $this->db->query("SELECT * FROM `srp_erp_sp_document_headers` where HeaderID=$header_id and empID=$header_emp_id and spAutoID=$spAutoID");
        if ($query->num_rows() > 0) {
            echo json_encode(array("status" => false));
        } else {
            echo json_encode(array("status" => true));
        }
    }

    function late_attendance_mail(){
        echo json_encode($this->Employee_model->late_attendance_mail());
    }

    function attandance_reUpload()
    {
        $this->form_validation->set_rules('fromDate', 'From Date', 'required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'required|date');
        //$this->form_validation->set_rules('floorID[]', 'Floor ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->attandance_reUpload());
        }
    }

    /*Start of Employee Attendance Location*/
    public function fetch_empLocations()
    {
        $empID = $this->input->post('empID');
        $details = '<div align="right" >';
        $details .= '<span class="glyphicon glyphicon-pencil" onclick="editEmp_Location(this)" style="color:#3c8dbc;"></span>&nbsp;&nbsp; | &nbsp;&nbsp;';
        $details .= '<span class="glyphicon glyphicon-trash traceIcon" onclick="deleteEmp_Location(this)" style="color:#d15b47;"></span>';
        $details .= '</div>';

        $this->datatables->select('attendanceLocationID, loc.floorID as floorID ,floor.floorDescription as floorDescription, loc.deviceID as  deviceID , loc.empMachineID as  empMachineID')
            ->from('srp_erp_empattendancelocation AS loc')
            ->join('srp_erp_pay_floormaster AS floor', 'floor.floorID=loc.floorID AND isActive = 1 ')
            ->add_column('edit', $details)
            ->where('loc.empID', $empID)
            ->where('loc.companyID', current_companyID());

        echo $this->datatables->generate();
    }

    public function save_empLocation()
    {
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('floorID', 'Floor ', 'trim|required');
        $this->form_validation->set_rules('deviceID', 'deviceID', 'trim|date|required');
        $this->form_validation->set_rules('empMachineID', 'empMachineID', 'trim|date');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_empLocation());
        }
    }
    public function update_empLocation()
    {
        $this->form_validation->set_rules('floorID', 'Floor', 'trim|required');
        $this->form_validation->set_rules('empID', 'Employee ID', 'trim|required');
        $this->form_validation->set_rules('attendanceLocationID', 'Location ID', 'trim|required');
        $this->form_validation->set_rules('deviceID', 'Device ID', 'trim|date|required');
        $this->form_validation->set_rules('empMachineID', 'Machine ID', 'trim|date');
        
        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->update_empLocation());
        }
    }
    public function delete_empLocation()
    {

        $this->form_validation->set_rules('hidden-id', 'Location ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_empLocation());
        }
    }
    public function load_empLocationView()
    {
        $empID = $this->input->post('empID');
        $companyID = current_companyID();
        $data['empID'] = $empID;
        $data['moreLocation'] = $this->db->query("SELECT floorID,deviceID,empMachineID FROM srp_erp_empattendancelocation loc WHERE
            companyID={$companyID} AND empID = {$empID} ")->result_array();
        $this->load->view('system/hrm/ajax/load_empLocationView', $data);
    }

    public function save_user()
    {
         echo json_encode($this->Employee_model->save_user());
    }

    public function get_attandance_variable_table($empViewID = null,$confirmed = 0){

        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $edit = $this->input->post('edit');
        $payment = $this->input->post('payment');
        $companyID = current_companyID();
        $select_arr = $this->input->post('select_arr');
        $alter_from_approval = $this->input->post('alter');
        $excel = $this->input->post('excel');

        $department = $this->input->post('department');
        $segment = $this->input->post('segment');
        $location = $this->input->post('location');

        if($from_date){
            $_POST['fromDate'] = $this->input->post('from_date');
            $_POST['toDate'] = $this->input->post('to_date');
        }else{
            $_POST['fromDate'] = $this->input->post('fromDate');
            $_POST['toDate'] = $this->input->post('toDate');
        }
        
        $get_link_categories = get_attandance_link_categories($location);

      
        if($empViewID){
            $get_pay_attendance_records = $this->Employee_model->get_attendanceDataRecord($empViewID,$confirmed);
        }else{
            $get_pay_attendance_records = $this->Employee_model->get_attendanceData2(0);
        }


        $declaration_exists_arr = array();

        foreach($get_pay_attendance_records as $key => $attendance){

            $attendanceCheckInDayTime = $attendance['checkInDate'].' '.$attendance['checkIn'];
            $attendanceCheckOutDayTime = $attendance['checkOutDate'].' '.$attendance['checkOut'];
       
            $datetime1 = new DateTime($attendanceCheckInDayTime);
            $datetime2 = new DateTime($attendanceCheckOutDayTime);
            $attendhours_obj = $datetime1->diff($datetime2);
            $attendhours = $attendhours_obj->format('%h') . ":" . $attendhours_obj->format('%i') . "";
            $working_hours = $attendhours_obj->format('%h');
            $get_pay_attendance_records[$key]['working_hours'] = $attendhours;
            $declaration_exists_arr[$attendance['empID']]['declaration'] = 0;
            $emp_id = $attendance['empID'];

            foreach($get_link_categories as $categories){

                $calType = $categories['calType'];
                //$get_pay_attendance_records[$key]['working_hours'] = $attendhours;
                $categories['monthlyDeclaration'] = str_replace(" ", "_",$categories['monthlyDeclaration']);
                $paid_amount = 0;

                //add existing value
                $ex_empViewID = $attendance['ID'];
                $monthlyDeclartionID = $categories['monthlyDeclarationID'];
                $ex_variable_record = fetch_emp_variable_attandance_value($ex_empViewID,$monthlyDeclartionID);
                $ex_variable_declaration = fetch_variable_declaration_emp($emp_id,$monthlyDeclartionID);
            

                if($ex_variable_declaration){
                    $paid_amount = $ex_variable_declaration['currentAmount'] + $ex_variable_declaration['transactionAmount'];
                    $paid_amount = number_format((float)$paid_amount,$ex_variable_declaration['transactionCurrencyDecimalPlaces'],'.','');
                    $declaration_exists_arr[$attendance['empID']]['declaration'] = 1;
                }

                $declaired_amount_str = $categories['monthlyDeclaration'].'_amount';

                if($ex_variable_record && $alter_from_approval != 1){
                    $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = $ex_variable_record['value'];
                    $get_pay_attendance_records[$key][$declaired_amount_str] = $paid_amount;
                    continue;
                }
        
                if($categories['linkType']  == 2){

                    if($attendance['presentTypeID'] == 5){
                        if($calType == 1){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 0;
                        }elseif($calType == 2){
                            //Days
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 1;
                         
                        }
                    }elseif(in_array($attendance['presentTypeID'],[3,4,6])){
                        if($calType == 1 || $calType == 2){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 0;
                        }

                    }elseif(in_array($attendance['presentTypeID'],[1,2])){
                        if($calType == 1){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = $attendhours;
                        }else if($calType == 2){
                            //Days
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 1;
                        }
                    }
                    
                }elseif($categories['linkType']  == 3){
                    if($attendance['presentTypeID'] == 5){
                        if($calType == 1 || $calType == 2){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 0;
                        }

                    }elseif(in_array($attendance['presentTypeID'],[3,4,6])){
                        if($calType == 1 || $calType == 2){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 0;
                        }
                    }elseif(in_array($attendance['presentTypeID'],[1,2])){
                        if($calType == 1){
                            //Hours
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = $attendhours;
                        }else if($calType == 2){
                            //Days
                            $get_pay_attendance_records[$key][$categories['monthlyDeclaration']] = 1;
                        }
                    }
                }

                $get_pay_attendance_records[$key][$declaired_amount_str] = $paid_amount;
               
            }
        }

        $base_pay_variable_arr = array();

        foreach($get_pay_attendance_records as $attendance_records){
            
            $empID = $attendance_records['empID'];
            $isDeclaration = ($declaration_exists_arr[$empID]['declaration']) ? $declaration_exists_arr[$empID]['declaration'] : 0;

            if($isDeclaration == 1){
                $base_pay_variable_arr[] = $attendance_records;
            }

        }


        $base_arr = array("columns" => $get_link_categories,"data" => $base_pay_variable_arr);


        if($empViewID){
            $temp_data = isset($get_pay_attendance_records[0]) ? $get_pay_attendance_records[0] : ''; 
            return json_encode(array("columns" => $get_link_categories,"data" =>  $temp_data ));
        }

        $base_arr['disabled'] = ($edit) ? 0 : 1;
        
        if($payment){
            $this->load->view('system/hrm/ajax/ajax_variable_monthly_column_approval', $base_arr);
        }else{
            $this->load->view('system/hrm/ajax/ajax_variable_monthly_column', $base_arr);
        }
        
    }




    public function update_emp_varibale_empattendanceView($detail){
   
        foreach($detail as $attandance){
      
            $empViewID = $attandance['ID'];
            $confirmedYN = isset($attandance['confirmedYN']) ? $attandance['confirmedYN'] : 0;
            $empViewRecord = fetch_emp_attandance_view_record($empViewID);
            $get_variable_pay = json_decode($this->get_attandance_variable_table($empViewID,$confirmedYN));
            $data = array();

            if($get_variable_pay) {
                   
                $columns = $get_variable_pay->columns;
                $variableData = $get_variable_pay->data;

                foreach($columns as $key => $record){ 

                    $monthlyDeclarationID = $record->monthlyDeclarationID;
                    $empViewVariableRecord = fetch_emp_variable_attandance_value($empViewID,$monthlyDeclarationID);

                    if($empViewVariableRecord){

                        $data = array();
                        $update_id = $empViewVariableRecord['id'];

                        $monthlyDeclaration = str_replace(" ","_",$record->monthlyDeclaration);

                        $data['value'] = isset($variableData->$monthlyDeclaration) ? $variableData->$monthlyDeclaration : 0;

                        $res = $this->db->where('id',$update_id)->update('srp_erp_pay_variable_empattendancereview', $data);

                    }else{

                        $monthlyDeclaration = str_replace(" ","_",$record->monthlyDeclaration);
                        $data['empattendancereviewID'] = $empViewID;
                        $data['monthlyDeclarationID'] = $record->monthlyDeclarationID;
                        $data['monthlyDeclaration'] = $record->monthlyDeclaration;
                        $data['linkType'] = $record->linkType;
                        $data['calType'] = $record->calType;
                        $data['value'] = isset($variableData->$monthlyDeclaration) ? $variableData->$monthlyDeclaration : 0;
                        $data['empID'] = $attandance['empID'];

                        $res = $this->db->insert('srp_erp_pay_variable_empattendancereview', $data);

                    }

                }

            }
         

        }

    }

    public function update_pay_variable_values(){
        echo json_encode($this->Employee_model->update_pay_variable_values());
    }

    public function save_gl_setup()
    {

        $this->form_validation->set_rules('provision_gl', 'Provision GL', 'trim|required');
        $this->form_validation->set_rules('expenseGl', 'Provision GL', 'trim|required');
        $this->form_validation->set_rules('salary_provision_months', 'salary provision months', 'trim|required');
        $this->form_validation->set_rules('eligible_after_months', 'eligible after months', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_gl_setup());
        }

    }

    public function add_salary_categories()
    {

        $this->form_validation->set_rules('salarycategoryid', 'Salary Category', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->add_salary_categories());
        }

    }

    public function fetch_leave_salary_provision_configuration()
    {        
                $this->datatables->select('t1.Id as Id, t1.salarycategoryID as salarycategoryID, CONCAT(t2.salaryCategoryType, " | ", t2.salaryDescription) as SLDes')
                ->from('srp_erp_leave_salary_provision AS t1')
                ->join('srp_erp_pay_salarycategories AS t2', 't2.salaryCategoryID=t1.salarycategoryID')
                ->where('t1.isProvision', 0)
                //->where('t1.companyID', current_companyID())
                ->add_column('action', '$1', 'salary_provition_delete_action(Id)');

            echo $this->datatables->generate(); 

                    
    }


  /*public function edit_salaryProvision_config()
    {
        $this->form_validation->set_rules('salarycategoryid', 'salarycategory id', 'required');
        //$this->form_validation->set_rules('glcode2', 'glcode2', 'required');
        $this->form_validation->set_rules('hidden-id', 'hidden-id', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->edit_salaryProvision_config());
        }
    }
  */

    public function delete_salaryProvision_config()
    {
        $this->form_validation->set_rules('id', 'ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->delete_salaryProvision_config());
        }
    }

    
    public function refresh_Gl2()
    {
        $gl_code2 = fetch_provision_Gl2();
        echo json_encode($gl_code2);
    }

// end : leave salary provision configuration


    /** ================================
     * Manual attendance for manager employee
    */
    function get_attendance_emp_for_manager(){

        $view = $this->input->post('view');
        $attendance_master = $this->input->post('attendance_master');
        //$pageType = $this->input->post('pageType');
        
        $base_arr = array();
        $this->db->where('EmpAttMasterID',$attendance_master);
        $master_record = $this->db->from('srp_empattendancemaster')->get()->row_array();
        
        if($view == 'system/hrm/attendance_management_manual'){
            $base_arr['attendance_master'] = $attendance_master;
            $base_arr['master'] = $master_record;
            //$base_arr['pageType'] = $pageType;
            $this->load->view('system/hrm/attendance_management_manual', $base_arr);
        }else{
            $this->load->view('system/profile/manual_attendance', $base_arr);
        }
        
    }

    function get_leave_approval_setup_on_group(){

        $leaveGroupID = $this->input->post('leaveGroupID');
        $data = array();

        $setupData = getLeaveApprovalSetup('Y',null,$leaveGroupID);
        $empDrop = load_employee_drop();

        $data['approvalLevel'] = $setupData['approvalLevel'];
        $data['approvalSetup'] = $setupData['approvalSetup'];
        $data['approvalEmp'] = $setupData['approvalEmp'];
        $data['appTypeArr'] = $setupData['appSystemValues'];
        $data['empDrop'] = $empDrop;
        
        $this->load->view('system/hrm/ajax/ajax_leave_approval_setup', $data);

    }

    
    function save_description()
    {
        /*$structures = $this->input->post('structures');
        
        if(!empty($structures)){
            $errors = array();
            foreach($structures as $val){
                if(empty($val['reportingStructureDetailID'])){
                   $errors_1 = array(
                        'e', $val['reportingStructureName'].' '.'Description is required' 
                   );
    
                   $errors[] = $errors_1;
                }
            }
        }else{
            $errors_1 = array(
                'e', 'Nothing to save. please try again..!' 
           );
           $errors[] = $errors_1;
        }
    
        if(count($errors)> 0){
            echo json_encode(array('p', $errors));
        }else{
            echo json_encode($this->Employee_model->save_description());
        }*/

        echo json_encode($this->Employee_model->save_description());

    }

    /* Load Operation related details */
    function load_relevant_job_details(){
        $data = array();
        $data['detail'] = $this->Employee_model->load_relevant_job_details();
        $data['empDetails'] = fetch_employee_detail_tbl($this->input->post('empID'));
        $data['attendanceDate'] = $this->input->post('date');

        $this->load->view('system/hrm/ajax/ajax_op_table_view', $data);
    }

    function update_shift_details_emp(){
        echo json_encode($this->Employee_model->update_shift_details_emp());
    }

    function get_manufature_job(){

        $data = array();
        $data['jobList'] = $this->Employee_model->load_manufature_job();
        $data['empDetails'] = fetch_employee_detail_tbl($this->input->post('empID'));
        $data['attendanceDate'] = $this->input->post('date');
        $data['detail'] = $this->Employee_model->load_manufature_job_added();
        $data['view'] = $this->input->post('view');
        $this->load->view('system/hrm/ajax/ajax_manufature_job_select', $data);

    }

    function add_mfqjob_employee(){
        echo json_encode($this->Employee_model->add_mfqjob_employee());
    }

    function change_job_minutes_hours(){
        echo json_encode($this->Employee_model->change_job_minutes_hours());
    }

    function remove_mfq_job_added(){
        echo json_encode($this->Employee_model->remove_mfq_job_added());
    }

    function update_labour_taskID(){
        echo json_encode($this->Employee_model->update_labour_taskID());
    }


    /** employee persional action heade save*/
    function save_personal_action_header(){
        echo json_encode($this->Employee_model->save_personal_action_header());
    }


    /** employee persional action load main table*/
    function fetch_personal_action_table()
    {
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $dateto = $this->input->post('dateto');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $datetoconvert = input_format_date($dateto, $date_format_policy);

        $companyid = $this->common_data['company_data']['company_id'];
        //$createdusetID = current_userID();
        $status = $this->input->post('status');
        $supplier_filter = '';
        
        $date = "";
        if (!empty($datefrom) && !empty($dateto)) {
            $date .= " AND ( srp_erp_personal_action.documentDate >= '" . $datefromconvert . " 00:00:00' AND srp_erp_personal_action.documentDate <= '" . $datetoconvert . " 23:59:00')";
        }
        $status_filter = "";
        if ($status != 'all') {
            if ($status == 1) {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 0 AND srp_erp_personal_action.approvedYN = 0)";
            } else if ($status == 2) {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 1 AND srp_erp_personal_action.approvedYN = 0)";
            } else {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 1 AND srp_erp_personal_action.approvedYN = 1)";
            }
        }

        $where = "srp_erp_personal_action.companyID = " . $companyid . $date . $status_filter . "";

        $convertFormat = convert_date_format_sql();
        $company_reporting_currency=$this->common_data['company_data']['company_reporting_currency'];
        $company_reporting_DecimalPlaces=$this->common_data['company_data']['company_reporting_decimal'];
        $this->datatables->select("
            srp_erp_personal_action.id as id,
            srp_erp_personal_action.documentID as documentID,
            srp_erp_personal_action.documentCode as documentCode,
            CASE 
                WHEN actionType = 1 THEN 'Transfer'
                WHEN actionType = 2 THEN 'Increment'
                WHEN actionType = 3 THEN 'Bonus'
                ELSE '-'
            END AS actionType,
            Remarks,
            srp_employeesdetails.Ename2 as Ename2,
            srp_erp_personal_action.confirmedYN as confirmedYN,
            srp_erp_personal_action.approvedYN as approvedYN,
            DATE_FORMAT(documentDate,'$convertFormat') AS documentDate,
            srp_erp_personal_action.createdUserName as createdUserName,
            srp_erp_personal_action.createdUserID as createdUserID,
        ");
        $this->datatables->join('srp_employeesdetails ', 'srp_erp_personal_action.empID = srp_employeesdetails.EIdNo');
        $this->datatables->from('srp_erp_personal_action');
        $this->datatables->where($where);
        $this->datatables->add_column('confirmed', '$1', 'confirm_user_approval_drilldown(confirmedYN,"PAA",id)');
        $this->datatables->add_column('approved', '$1', 'confirm_approval_personal_application(approvedYN,confirmedYN,"PAA",id)');
        $this->datatables->add_column('edit', '$1', 'load_personal_application_action(id,confirmedYN,approvedYN,createdUserID)');
        echo $this->datatables->generate();
    }

    /** delete personal action*/
    function delete_personal_action(){
        $status=$this->db->delete('srp_erp_personal_action', array('id' => trim($this->input->post('id') ?? '')));
        if($status){
            $this->db->delete('srp_erp_personal_action_details', array('paID' => trim($this->input->post('id') ?? '')));
            echo json_encode(array('s', ' Deleted Successfully.', $status));
        }else {
            echo json_encode(array('e', ' Error in Deletion.', $status));
        }
    }

    /** load action header default values */
    function fetch_personal_Action_header($id_n = null){

        $convertFormat = convert_date_format_sql();
        if($id_n){
            $id = $id_n;
        }else{
            $id = trim($this->input->post('id') ?? '');
        }
        
        $companyID = current_companyID();

        $query = "SELECT 
            *,
            DATE_FORMAT(documentDate, '{$convertFormat}') AS documentDate
          FROM srp_erp_personal_action
          WHERE id = {$id} AND companyID = {$companyID}";

        $details = $this->db->query($query)->row_array();

        if($id_n){
            return $details;
        }else{
            echo json_encode($details);
        }
        
    }

    /**save personal action details */
    function save_personal_action_details() {
        $this->load->model('Employee_model');
    
        $id = $this->input->post('id');

        $result = $this->Employee_model->save_personal_action_details($id);
        echo json_encode($result);
    }

    function load_personal_action_conformation(){
        ob_start();
        $id = $this->input->post('id');

        if(empty($id)){
            $id = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('id') ?? '');
        }
 
        $data = array();
 
        $documentSystemCode = $this->input->post('id');
        if(!isset($documentSystemCode)){
            $documentSystemCode = $id;
        }
        $companyID = $this->common_data['company_data']['company_id'];
        //fetch levels and users
            $this->db->select("approvalLevelID,approvedDate,'' AS Ename2,
                ap.employeeID");
            $this->db->from('srp_erp_documentapproved');
            $this->db->join("srp_erp_approvalusers AS ap", "ap.levelNo = srp_erp_documentapproved.approvalLevelID AND ap.documentID = 'PAA' AND ap.companyID = '{$companyID}'");
            $this->db->where('srp_erp_documentapproved.documentID', 'PAA');
            $this->db->where('documentSystemCode', $documentSystemCode);
            $this->db->where('srp_erp_documentapproved.companyID', $companyID);
            $this->db->order_by('srp_erp_documentapproved.approvalLevelID');
            $approved = $this->db->get()->result_array();
 
            $managers = $this->db->query("SELECT
                                                *
                                            FROM
                                                (
                                                SELECT
                                                    repManager,
                                                    repManagerName,
                                                    currentLevelNo,
                                                    HOD,
                                                    HODName
                                                FROM
                                                    srp_erp_personal_action AS paTB
                                                    JOIN srp_erp_documentapproved ON paTB.documentID = 'PAA'
                                                    LEFT JOIN (
                                                    SELECT
                                                        hod_id AS HOD,
                                                        EmpID AS EmpNew,
                                                        t3.Ename2 AS HODName
                                                    FROM
                                                        srp_empdepartments AS dpt
                                                        JOIN srp_departmentmaster AS departmentmaster ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                                        JOIN srp_employeesdetails AS t3 ON departmentmaster.hod_id = t3.EIdNo
                                                        AND t3.Erp_companyID = {$companyID}
                                                    WHERE
                                                        dpt.isPrimary = 1
                                                    ) AS HodData ON paTB.empID = HodData.EmpNew
                                                    LEFT JOIN (
                                                    SELECT
                                                        empID,
                                                        managerID AS repManager,
                                                        Ename2 AS repManagerName
                                                    FROM
                                                        srp_erp_employeemanagers AS t1
                                                        JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo
                                                    WHERE
                                                        active = 1
                                                        AND t1.companyID = {$companyID}
                                                    ) AS repoManagerTB ON paTB.empID = repoManagerTB.empID
                                                WHERE
                                                    paTB.companyID = {$companyID}
                                                    AND id = {$documentSystemCode}
                                                   
                                                ) AS empData
                                                LEFT JOIN (
                                                SELECT
                                                    managerID AS topManager,
                                                    Ename2 AS topManagerName,
                                                    empID AS topEmpID
                                                FROM
                                                    srp_erp_employeemanagers AS t1
                                                    JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo
                                                    AND t2.Erp_companyID ={$companyID}
                                                WHERE
                                                    t1.companyID = {$companyID}
                                                AND active = 1
                                                ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID;
           
            ")->row_array();
            
            foreach($approved as $key => $approve_details){
 
                $employeeID = $approve_details['employeeID'];
 
                if($employeeID == -1){
                    $approved[$key]['Ename2'] =  $managers['repManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['repManager'];
                }elseif($employeeID == -2){
                    $approved[$key]['Ename2'] =  $managers['HODName'];
                    $approved[$key]['levelUserID'] =  $managers['HOD'];
                }elseif($employeeID == -3){
                    $approved[$key]['Ename2'] =  $managers['topManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['topManager'];
                }else{
                    $employee_details = fetch_employeeNo($employeeID);
                    $approved[$key]['Ename2'] =  $employee_details['Ename2'];
                    $approved[$key]['levelUserID'] =  $employee_details['EIdNo'];
                }
            }
        $data['approval_users_data'] = $approved;
 
        $headerDetails = $this->fetch_personal_Action_header(trim($id));
        $data['headerDetails'] = $headerDetails;
 
        /**action type */
        $remarks = $this->db->select('Remarks')->from('srp_erp_personal_action')->where('id', $id)->get()->row('Remarks');
        $data['remark'] = trim($remarks);
       
        $data['approval'] = $this->input->post('approval');
        $data['extra'] = $this->Employee_model->fetch_personal_action_template_data($id);
 
        if (!$this->input->post('html')) {
            $data['signature']=$this->Employee_model->fetch_signaturelevel();
           } else {
              $data['signature']='';
        }
        $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
        }
   
        $data['template_data'] = $this->Employee_model->personal_application_get_template_data($id);
 
        /**employee currency */
        $data['empCurrency'] = $this->db->query("SELECT
                srp_erp_pay_salarydeclartion.transactionCurrency AS transactionCurrency
            FROM
                srp_erp_pay_salarydeclartion
                LEFT JOIN ( SELECT empID FROM srp_erp_personal_action WHERE id = 217 GROUP BY empID ) AS person ON person.empID = srp_erp_pay_salarydeclartion.employeeNo
            GROUP BY
                employeeNo
        ")->row_array('srp_erp_pay_salarydeclartion.transactionCurrency');
 
        /**action type */
        $actionType = $this->db->select('actionType')->from('srp_erp_personal_action')->where('id', $id)->get()->row('actionType');
        $data['actionType'] = trim($actionType);
 
        /**Justification */
        if($actionType == 2){
            $data['justification'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'Justification')->where('paID', $id)->get()->row('NewValueText');
        }else{
            $data['justification'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'Justification_bonus')->where('paID', $id)->get()->row('NewValueText');
        }
       
        $html = $this->load->view('system/hrm/erp_personal_action_print', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            ob_end_clean();
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['master']['approvedYN']);
        }
    }


    function personal_action_confirmation()
    {
            $result = $this->Employee_model->personal_action_confirmation();
            if($result){
                if($result[0] == 's'){
                    echo json_encode(array('s','Confirmed successfully'));
                } else {
                    echo json_encode(array('w',$result[1]));
                }
            }
    }



    function fetch_personal_action_type_view(){
        $data = array();
        $headerDetails = $this->fetch_personal_Action_header(trim($this->input->post('id') ?? ''));
        $data['headerDetails'] = $headerDetails;

        $data['id'] = trim($this->input->post('id') ?? '');

        $data['template_data'] = $this->Employee_model->personal_application_get_template_data();
        
        $data['details'] = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$data['id'])->get()->result_array();
        foreach($data['details'] as $row){
            if($row['fieldType'] == 'Activity Code'){
                if(!empty($row['NewValue'])){
                    $activityCodeType = 2;
                }else{
                    $activityCodeType = 1;
                }
            }
        }

        if(isset($activityCodeType)){
            $data['reportingData'] = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$data['id'])->get()->result_array();
        }

        $data['empCurrency'] = $this->db->query("SELECT
                srp_erp_pay_salarydeclartion.transactionCurrency AS transactionCurrency 
            FROM
                srp_erp_pay_salarydeclartion
                LEFT JOIN ( SELECT empID FROM srp_erp_personal_action WHERE id = 217 GROUP BY empID ) AS person ON person.empID = srp_erp_pay_salarydeclartion.employeeNo 
            GROUP BY
                employeeNo
        ")->row_array('srp_erp_pay_salarydeclartion.transactionCurrency');

        $actionType = $this->db->select('actionType')->from('srp_erp_personal_action')->where('id', $data['id'])->get()->row('actionType');
        $data['actionType'] = trim($actionType);

        if($actionType == 1){
            $this->load->view('system/hrm/ajax/ajax_personal_action_transfer', $data);
        }else if($actionType == 2){
            $this->load->view('system/hrm/ajax/ajax_personal_action_increment', $data);
        }else if($actionType == 3){
            $this->load->view('system/hrm/ajax/ajax_personal_action_increment', $data);
        }
        else{
            return null;
        }
    }

    function update_persional_action_details(){
        echo json_encode($this->Employee_model->update_persional_action_details());
    }

    function referback_persional_action()
    {
        $id = $this->input->post('id');
        $data = array(
            'currentLevelNo' => 1,
            'confirmedYN' => 0,
            'confirmedDate' => null,
            'confirmedByEmpID' => null,
            'confirmedByName' => null,
        );
        $this->db->where('id', trim($this->input->post('id') ?? ''));
        $status= $this->db->update('srp_erp_personal_action', $data);

        //remove document approved 
        $this->load->library('Approvals');
        $status = $this->approvals->approve_delete($this->input->post('id'), 'PAA');

        if ($status) {
            $id = trim($this->input->post('id') ?? '');
            $this->db->select('*');
            $this->db->where('id', $id);
            $this->db->from('srp_erp_personal_action');
            $ec_data = $this->db->get()->row_array();

            /*** Firebase Mobile Notification*/
            $this->db->select('managerID');
            $this->db->where('empID', trim($ec_data['createdUserID'] ?? ''));
            $this->db->where('active', 1);
            $this->db->from('srp_erp_employeemanagers');
            $managerid = $this->db->get()->row_array();

            $token_android = firebaseToken($managerid["managerID"], 'android');
            $token_ios = firebaseToken($managerid["managerID"], 'apple');

            $firebaseBody = $ec_data['createdUserName'] . " has referred back Personal Action Application.";

            $this->load->library('firebase_notification');
            if(!empty($token_android)) {
                $this->firebase_notification->sendFirebasePushNotification("Personal Action Application Approval Referred Back", $firebaseBody, $token_android, 6, $ec_data['documentCode'], "PAA", $id, "android");
            }
            if(!empty($token_ios)) {
                $this->firebase_notification->sendFirebasePushNotification("Personal Action Application Approval Referred Back", $firebaseBody, $token_ios, 6, $ec_data['documentCode'], "PAA", $id, "apple");
            }

            echo json_encode(array('s', ' Referred Back Successfully.', $status));
        } else {
            echo json_encode(array('e', ' Error in refer back.', $status));
        }
    }


    function fetch_approval_user_modal_pa(){
        echo json_encode($this->Employee_model->fetch_approval_user_modal_pa());
    }




    function fetch_personal_application_approval()
    {
        $date_format_policy = date_format_policy();

        $companyid = $this->common_data['company_data']['company_id'];
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $empID=current_userID();
        $convertFormat = convert_date_format_sql();
        $company_reporting_currency=$this->common_data['company_data']['company_reporting_currency'];
        $company_reporting_DecimalPlaces=$this->common_data['company_data']['company_reporting_decimal'];

        $this->datatables->select("srp_erp_personal_action.id as id,srp_erp_personal_action.documentCode,srp_erp_personal_action.Remarks as Remarks,srp_employeesdetails.Ename2 as createdUserName,
        CASE 
        WHEN srp_erp_personal_action.actionType = 1 THEN 'Transfer'
        WHEN srp_erp_personal_action.actionType = 2 THEN 'Increment'
        WHEN srp_erp_personal_action.actionType = 3 THEN 'Bonus'
        ELSE '-'
        END AS actionType,srp_erp_personal_action.confirmedYN as confirmedYN,approve.approvedYN as approvedYN,documentApprovedID,approvalLevelID ,DATE_FORMAT(srp_erp_personal_action.documentDate,'$convertFormat') AS documentDate,srp_erp_personal_action.createdUserID");
        $this->datatables->join('srp_employeesdetails', 'srp_erp_personal_action.empID = srp_employeesdetails.EIdNo');
        $this->datatables->join('srp_erp_employeemanagers ', 'srp_erp_personal_action.empID = srp_erp_employeemanagers.empID');
        $this->datatables->from('srp_erp_personal_action');
        $this->datatables->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = srp_erp_personal_action.id AND approve.approvalLevelID = srp_erp_personal_action.currentLevelNo');
        $this->datatables->join('srp_erp_approvalusers AS ap', 'ap.levelNo = srp_erp_personal_action.currentLevelNo');

        $this->datatables->where('approve.documentID', 'PAA');
        $this->datatables->where('ap.documentID', 'PAA');
        $this->datatables->where('srp_erp_personal_action.companyID', $companyid);
        $this->datatables->where('ap.companyID', $companyid);
        $this->datatables->where('approve.companyID', $companyid);
        $this->datatables->where('srp_erp_personal_action.confirmedYN', 1);
        $this->datatables->where('srp_erp_personal_action.approvedYN', $approvedYN);

        $this->datatables->where("( ap.employeeID = '{$empID}'
            OR (
                ap.employeeID = -1 
                AND srp_erp_personal_action.empID IN (
                    SELECT
                        emp_manager.empID 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID 
                        AND `emp_manager`.`active` = 1 
                        AND `emp_manager`.`companyID` = '{$companyid}' 
                        AND emp_manager.managerID = '{$empID}' 
                        ) 
                        ) 
                OR (
                ap.employeeID = -2 
                AND srp_erp_personal_action.empID IN (
                    SELECT
                        emp_detail.EIdNo 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                        JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                        AND `emp_dep`.`isactive` = 1 
                        AND `emp_dep`.Erp_companyID = '{$companyid}' 
                        AND srp_dep.hod_id = '{$empID}' 
                        ) 
                ) 
                OR (
                ap.employeeID = -3 
                        AND srp_erp_personal_action.empID IN (
                    SELECT
                        emp_detail.Eidno 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                        JOIN ( SELECT * FROM srp_erp_employeemanagers ) AS top_manager ON top_manager.empID = emp_manager.managerID 
                    WHERE
                        emp_manager.active = 1 
                        AND `emp_manager`.`companyID` = '{$companyid}' 
                        AND top_manager.managerID = '{$empID}' 
                        ) 
                ) 
            ) "
        );

        $this->datatables->add_column('approved', '$1', 'confirm_aproval_paa(approvedYN,confirmedYN,"PAA",id)');
        $this->datatables->add_column('edit', '$1', 'load_PAA_approval_action(id,approvalLevelID,approvedYN,documentApprovedID)');
        $this->datatables->add_column('PAA_detail', '<b>Claimed By Name : </b> $1 <br> <b>Claimed Date : </b> $2 <br><b>Description : </b> $3', 'createdUserName,documentDate,Remarks');
       
        echo $this->datatables->generate();
    }


    function personal_application_approval()
    {
        $system_code = trim($this->input->post('id') ?? '');
        $level_id = trim($this->input->post('level') ?? '');
        $status = trim($this->input->post('po_status') ?? '');
        if($status==1){
            $approvedYN=checkApproved($system_code,'PAA',$level_id);
            if($approvedYN){
                $this->session->set_flashdata('w', 'Document already approved');
                echo json_encode(FALSE);
            }else{
                $this->db->select('id');
                $this->db->where('id', trim($system_code));
                $this->db->where('approvedYN', 2);
                $this->db->from('srp_erp_personal_action');
                $po_approved = $this->db->get()->row_array();
                if(!empty($po_approved)){
                    $this->session->set_flashdata('w', 'Document already rejected');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'personal action ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->personal_application_approval());
                    }
                }
            }
        }else if($status==2){
            $this->db->select('id');
            $this->db->where('id', trim($system_code));
            $this->db->where('approvedYN', 2);
            $this->db->where('confirmedYN !=', 1);
            $this->db->from('srp_erp_personal_action');
            $po_approved = $this->db->get()->row_array();
            if(!empty($po_approved)){
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
            }else{
                $rejectYN=checkApproved($system_code,'PAA',$level_id);
                if(!empty($rejectYN)){
                    $this->session->set_flashdata('w', 'Document already approved');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'personal action ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->personal_application_approval());
                    }
                }
            }
        }
    }

    function update_persional_action_details_actionCodeType(){
        // $id = $this->input->post('id');
        // $newactivitycode = $this->input->post('fieldValue');

        // $x = $this->Employee_model->update_persional_action_details_actionCodeType();
        
        // $data['details'] = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$id)->where('ActivityCodeType', $x)->get()->result_array();
        // $data['activityCode'] = $x;
        // $this->load->view('system/hrm/ajax/ajax_personal_action_activity_code_fields', $data);

        echo json_encode($this->Employee_model->update_persional_action_details_actionCodeType());
    }

    public function fetch_employee_detail_travel_id()
    {
        echo json_encode($this->Employee_model->fetch_employee_detail_travel_id());

    }
    public function fetch_city()
    {
        echo json_encode($this->Employee_model->fetch_city());

    }
     public function saverequest() {
        $this->form_validation->set_rules('subject', 'Subject', 'required');
        $this->form_validation->set_rules('description', 'Description', 'required');
        // $this->form_validation->set_rules('seat_preference', 'Seat Preference', 'required');
        // $this->form_validation->set_rules('meal_preference', 'Meal Preference', 'required');
        // $this->form_validation->set_rules('mobile_number', 'Mobile Number', 'required');

    
        if ($this->form_validation->run() == FALSE) {
            $array = array(
                'error' => true,
                'subject' => strip_tags(form_error('subject')),
                'description' => strip_tags(form_error('description')),
                // 'seat_preference' => strip_tags(form_error('seat_preference')),
                // 'meal_preference' => strip_tags(form_error('meal_preference')),
                // 'mobile_number' => strip_tags(form_error('mobile_number')),
                'rules' => 'required'
            );
            echo json_encode($array);
        } else {
            echo json_encode($this->Employee_model->save_request());
        }
    }
    public function get_details()
    {
        echo json_encode($this->Employee_model->fetch_city());

    }
    public function saveTravelRequestDetails()
    {
        echo json_encode($this->Employee_model->saveTravelRequestDetail());

    }
     public function traveldetailpage()
    {
        $this->load->view('system/travel/travel_detail.php');

    }
    public function fetch_travel_request_detail_table()
    {
        echo json_encode($this->Employee_model->fetch_travel_request_detail_table());

    }
    public function delete_travel_request_detail()
    {
        echo json_encode($this->Employee_model->delete_travel_request_detail());

    }
    public function edit_travel_request_detail()
    {
        echo json_encode($this->Employee_model->edit_travel_request_detail());

    }
     public function updateTravelRequestDetails()
    {
        echo json_encode($this->Employee_model->updateTravelRequestDetails());

    }
     public function load_travel_request_conformation()
    {
        $requestid = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('requestid') ?? '');
        $data['extra'] = $this->Employee_model->get_travel_request_details($requestid);
        $data['approval'] = $this->input->post('approval');
        $data['pendingApproval']=$this->Employee_model->fetch_all_approval_users_modal($requestid);
        
        $data['type']='PDF';
        $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
            $data['type']='html';  
        }
        // $html = $this->load->view('system/travel/travel_request_print', $data, true);
        $html = $this->load->view('system/travel/travel_request_print_new', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');        
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['detail']['approvedYN']);
        }

    }

    function travel_request_conformation()
    {
        $this->db->select('requestedByEmpID');
        $this->db->where('id', trim($this->input->post('requestid') ?? ''));
        $this->db->from('srp_erp_travel_request');
        $empid = $this->db->get()->row_array();

        if($empid){
            $this->db->select('managerID');
            $this->db->where('empID', trim($empid['requestedByEmpID'] ?? ''));
            $this->db->where('active', 1);
            $this->db->from('srp_erp_employeemanagers');
            $managerid = $this->db->get()->row_array();

            $result = $this->Employee_model->travel_request_confirmation();
            
            if($result){
             
                if($result[0] == 's'){
                    echo json_encode(array('s','Travel Request successfully '));
                } else {
                    echo json_encode(array('w','Error in confirmation'));
                }
            }

        }
    }
    public function fetch_travel_request_confirm_table()
    {
        echo json_encode($this->Employee_model->fetch_travel_request_confirm_table());

    }
        public function load_travel_request_header()
    {
        echo json_encode($this->Employee_model->load_travel_request_header());

    }
    function delete_travel_request(){
        $status=$this->db->delete('srp_erp_travel_request', array('id' => trim($this->input->post('id') ?? '')));
        if($status){
            $this->db->delete('srp_erp_travel_request_details', array('travelRequestID' => trim($this->input->post('id') ?? '')));
            echo json_encode(array('s', ' Deleted Successfully.', $status));
        }else {
            echo json_encode(array('e', ' Error in Deletion.', $status));
        }
    }

   function reverse_travel_request(){
        $requestid = $this->input->post('id');
        $this->db->select('*');
        $this->db->from('srp_erp_travel_request');
        $this->db->join('srp_employeesdetails', 'srp_employeesdetails.EIdNo=srp_erp_travel_request.approvedByEmpID', 'LEFT');
        $this->db->where('id', $requestid);
        $approvedByEmpdetails = $this->db->get()->row_array();

        $bodyData = 'Travel Request ' . $approvedByEmpdetails['travelRequestCode'] . ' is reversed by Employee Name '. current_user().'.<br/> ';
        $param["empName"] = $approvedByEmpdetails["Ename2"];
        $param["body"] = $bodyData;

        $mailData = [
            'approvalEmpID' => $approvedByEmpdetails["EIdNo"],
            'documentCode' => $approvedByEmpdetails['travelRequestCode'],
            'toEmail' => $approvedByEmpdetails["EEmail"],
            'subject' => 'Travel Request reversed',
            'param' => $param
        ];

        $data = array(
            'confirmedYN' => 0,
            'confirmedDate' => null,
            'confirmedByEmpID' => null,
            'confirmedByName' => null,
            'approvedYN' => 0,
            'approvedDate' => null,
            'approvedByEmpID' => null,
            'approvedByEmpName' => null
        );
        $this->db->where('id', trim($requestid));
        $status= $this->db->update('srp_erp_travel_request', $data);
        if ($status) {
            echo json_encode(array('s', 'Reversed Successfully.', $status));
            send_approvalEmail($mailData);
        } else {
            echo json_encode(array('e', ' Error in refer back.', $status));
        }

   }

   /**employeement - salary stop details */
    function save_salaryStopDetail(){
        $this->form_validation->set_rules('salaryStopDate', 'salary Stop Date', 'required');
        $this->form_validation->set_rules('salaryStopReason', 'salary Stop Reason', 'required');
        $this->form_validation->set_rules('empID', 'employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        } else {
            echo json_encode($this->Employee_model->save_salaryStopDetail());
        }
    }

    function fetch_TravelRequest_conformation(){
        $userID = $this->common_data["current_userID"];
        $status = trim($this->input->post('approvedYN') ?? '');
        $companyid = current_companyID();

        if($status == 0)
        {
            $where = array(
                'approve.documentID' => 'TRQ',
                'ap.documentID' => 'TRQ',
                'ap.employeeID' => $userID,
                'approve.approvedYN' => $status,
            );
            $this->datatables->select('t1.id as travelRequestID, t1.travelRequestCode AS documentCode,t1.empID, emp.Ename2, t1.tripTypeID, tt.tripType, approve.approvedYN as approvedYN,t1.requestType,documentApprovedID, approvalLevelID', true)
                ->from('srp_erp_travel_request AS t1')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = t1.id AND approve.approvalLevelID = t1.currentLevelNo')
                // ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = t1.currentLevelNo')
                ->join('srp_erp_approvalusers AS ap', 'ap.levelNo = t1.currentLevelNo AND ap.typeID = IF(t1.requestType = "Trip Request", 1, IF(t1.requestType = "Travel Request", 2, 0))', 'left')
                ->join('srp_erp_travel_type AS tt', 'tt.id = t1.tripTypeID') 
                ->join('srp_employeesdetails AS emp', 'emp.EIdNo = t1.empID')
                ->where($where)
                ->where('t1.companyID', current_companyID())
                ->where('t1.confirmedYN', 1)
                ->where('ap.companyID', current_companyID())
                ->add_column('level', "<center>Level $1</center>", 'approvalLevelID')
                ->add_column('edit', '$1', 'travel_request_action_approval(travelRequestID, approvalLevelID, documentCode, approvedYN, \'edit\')')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"TRQ", travelRequestID)');
            echo $this->datatables->generate('json', 'ISO-8859-1');
        }else
        {
            $where = array(
                'approve.documentID' => 'TRQ',
                't1.companyID' => $companyid,
                'approve.approvedEmpID' => $userID,

            );
            $this->datatables->select('t1.id as travelRequestID, t1.travelRequestCode AS documentCode,t1.empID, emp.Ename2, t1.tripTypeID, tt.tripType, approve.approvedYN as approvedYN,
            documentApprovedID, approvalLevelID', true)
                ->from('srp_erp_travel_request AS t1')
                ->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = t1.id AND approve.approvalLevelID = t1.currentLevelNo')
                ->join('srp_erp_travel_type AS tt', 'tt.id = t1.tripTypeID') 
                ->join('srp_employeesdetails AS emp', 'emp.EIdNo = t1.empID')
                ->where($where)
                ->where('t1.companyID', current_companyID())
                ->group_by('t1.id')
                ->group_by('approve.approvalLevelID')
                ->add_column('level', "<center>Level $1</center>", 'approvalLevelID')

                ->add_column('edit', '$1', 'travel_request_action_approval(travelRequestID, approvalLevelID, documentCode, approvedYN, \'edit\')')
                ->add_column('approved', '$1', 'document_approval_drilldown(approvedYN,"TRQ", travelRequestID)');
            echo $this->datatables->generate('json', 'ISO-8859-1');
        }

    }

    function travel_request_approval(){
        $requestid = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('hidden_payrollID') ?? '');
        $data['extra'] = $this->Employee_model->get_travel_request_details($requestid);
        $data['approval'] = $this->input->post('from_approval');
        $data['pendingApproval']=$this->Employee_model->fetch_all_approval_users_modal($requestid);
        
        $data['type']='PDF';
         $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
            $data['type']='html';
        }
        
        echo $this->load->view('system/travel/travel_request_print_new', $data, true);
    }
    
    function travelRequestApproval()
    {
        $travelID = $this->input->post('hidden_travelRequestID');
        $TravelRequestcode = $this->input->post('hidden_travelRequest_Code');
        $level_id = $this->input->post('level');
        $status = $this->input->post('status');
        $comments = $this->input->post('comments');

        $this->form_validation->set_rules('hidden_travelRequestID', 'Travel Request ID', 'trim|required');
        $this->form_validation->set_rules('status', 'Status', 'trim|required');
        $this->form_validation->set_rules('level', 'Level', 'trim|required');

        if ($this->input->post('status') == 2) {
            $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
        }


        if ($this->form_validation->run() == FALSE)
        {
            echo json_encode(array('e', validation_errors()));
        }
        else {
            $isConfirmed = $this->Employee_model->get_travel_detail($travelID);
            
            if (!empty($isConfirmed) && isset($isConfirmed[0]['confirmedYN']) && $isConfirmed[0]['confirmedYN'] == 1) {
                $this->load->library('approvals');
                $docCode = 'TRQ';
                $approvals_status = $this->approvals->approve_document($travelID, $level_id, $status, $comments, $docCode);
        
                if ($approvals_status == 1) {
                    $data = array(
                        'approvedYN' => 1,
                        'approvedDate' => $this->common_data['current_date'],
                        'approvedbyEmpID' => $this->common_data['current_userID'],
                        'approvedbyEmpName' => $this->common_data['current_user'],
                    );
                    $this->db->where('id', $travelID);
                    $this->db->update('srp_erp_travel_request', $data);
                    $this->session->set_flashdata('s', 'Approved Successfully.');
                    echo json_encode(array('s', 'Approved Successfully.'));
                } else {
                    $travel_Request = $this->lang->line('common_travel_request');
                    $notconfirmed = $this->lang->line('common_not_confirmed_yet');
                    $refresh = $this->lang->line('common_please_refresh_and_try_again');
                    echo json_encode(array('e', "$travel_Request [ $TravelRequestcode ] $notconfirmed.</br>$refresh."));
                }
            } else {
                $travel_Request = $this->lang->line('common_travel_request');
                $notconfirmed = $this->lang->line('common_not_confirmed_yet');
                $refresh = $this->lang->line('common_please_refresh_and_try_again');
                echo json_encode(array('e', "$travel_Request [ $TravelRequestcode ] $notconfirmed.</br>$refresh."));
            }
        }
        
    }

    public function fetch_travel_request_confirm_table_hr()
    {
        echo json_encode($this->Employee_model->fetch_travel_request_confirm_table_hr());

    }

    public function generatePO()
    {
        $requstid = $this->input->post('requestid');
        $supplier = $this->input->post('supplier');
        $PODate = $this->input->post('PODate');

        $this->db->select('*');
        $this->db->where('companyID',$this->common_data['company_data']['company_id']);
        $this->db->from('srp_erp_itemmaster');
        $this->db->where('defaultYN',1);
        $item = $this->db->get();
        $item_result = $item->row_array();
       
        if($item_result)
        {
            $this->db->select('tr.*, ed.segmentID, td.currencyID,td.amount');
            $this->db->from('srp_erp_travel_request tr');
            $this->db->join('srp_employeesdetails ed', 'tr.empID = ed.EIdNo');
            $this->db->join('srp_erp_travel_request_details td', 'tr.id = td.travelRequestID', 'left');
            $this->db->where('tr.id', $requstid);
            $this->db->group_by('td.currencyID');
        
            $query = $this->db->get();
            $results = $query->result_array();
        
            $supplier_arr = $this->fetch_supplier_data(trim($this->input->post('supplier') ?? ''));
        
            
            $success = true;
        
            foreach ($results as $result) {
                $this->db->select('CurrencyCode');
                $this->db->where('currencyID',$result['currencyID']);
                $this->db->from('srp_erp_currencymaster');
                $code_query = $this->db->get();
                $code_result = $code_query->row_array();

                $this->db->select('segmentCode');
                $this->db->where('segmentID',$result['segmentID']);
                $this->db->from('srp_erp_segment');
                $segment_query = $this->db->get();
                $segment_result = $segment_query->row_array();

                $data = [
                    'documentID' => 'PO',
                    'linkeddocumentID'=>$result['documentID'],
                    'linkedDocumentmasterID'=>$requstid,
                    'purchaseOrderType' => 'Standard',
                    'segmentID' => $result['segmentID'],
                    'segmentCode' => $segment_result['segmentCode'],
                    'transactionCurrencyID' => $result['currencyID'],
                    'transactionCurrency' => $code_result['CurrencyCode'],
                    'documentDate' => $PODate,
                    'expectedDeliveryDate' => $PODate,
                    'purchaseOrderCode' => $this->sequence->sequence_generator('PO'),
                    'supplierPrimaryCode' => $supplier,
                    'supplierID' => $supplier_arr['supplierAutoID'],
                    'supplierCode' => $supplier_arr['supplierSystemCode'],
                    'supplierName' => $supplier_arr['supplierName'],
                    'supplierAddress' => $supplier_arr['supplierAddress1'] . ' ' . $supplier_arr['supplierAddress2'],
                    'supplierTelephone' => $supplier_arr['supplierTelephone'],
                    'supplierFax' => $supplier_arr['supplierFax'],
                    'supplierEmail' => $supplier_arr['supplierEmail'],
                    'companyID' => $this->common_data['company_data']['company_id'],
                    'companyCode' => $this->common_data['company_data']['company_code'],
                    'companyLocalCurrencyID' => $this->common_data['company_data']['company_default_currencyID'],
                    'companyLocalCurrency' => $this->common_data['company_data']['company_default_currency']
                ];
        
                $default_currency = currency_conversionID($result['currencyID'], $data['companyLocalCurrencyID']);
                $data['companyLocalExchangeRate'] = $default_currency['conversion'];
                $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        
                $data['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
                $data['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
                $reporting_currency = currency_conversionID($result['currencyID'], $data['companyReportingCurrencyID']);
                $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
                $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        
                $data['createdUserGroup'] = $this->common_data['user_group'];
                $data['createdPCID'] = $this->common_data['current_pc'];
                $data['createdUserID'] = $this->common_data['current_userID'];
                $data['createdUserName'] = $this->common_data['current_user'];
                $data['createdDateTime'] = $this->common_data['current_date'];
        
                // $status = $this->db->insert('srp_erp_purchaseordermaster', $data);
                $this->db->insert('srp_erp_purchaseordermaster', $data);
                $lastID = $this->db->insert_id();
                
            
                $detail=[
                    'purchaseOrderID'=>$lastID,
                    'itemAutoID'=>$item_result['itemAutoID'],
                    'itemSystemCode'=>$item_result['itemSystemCode'],
                    'itemDescription'=>$item_result['itemDescription'],
                    'itemType'=>$item_result['mainCategory'],
                    'itemType'=>$item_result['mainCategory'],
                    'defaultUOM' => $item_result['defaultUnitOfMeasure'],
                    'defaultUOMID' => $item_result['defaultUnitOfMeasureID'],
                    'unitOfMeasure' => $item_result['defaultUnitOfMeasure'],
                    'unitOfMeasureID' => $item_result['defaultUnitOfMeasureID'],
                    'conversionRateUOM' => conversionRateUOM_id($item_result['defaultUnitOfMeasureID'], $item_result['defaultUnitOfMeasureID']),
                    'totalAmount'=>$result['amount'],
                ];
                
                $detail['companyID'] = $this->common_data['company_data']['company_id'];
                $detail['companyCode'] = $this->common_data['company_data']['company_code'];
                $detail['GRVSelectedYN'] = 0;
                $detail['goodsRecievedYN'] = 0;

                $detail['modifiedPCID'] = $this->common_data['current_pc'];
                $detail['modifiedUserID'] = $this->common_data['current_userID'];
                $detail['modifiedUserName'] = $this->common_data['current_user'];
                $detail['modifiedDateTime'] = $this->common_data['current_date'];

                $detail['createdUserGroup'] = $this->common_data['user_group'];
                $detail['createdPCID'] = $this->common_data['current_pc'];
                $detail['createdUserID'] = $this->common_data['current_userID'];
                $detail['createdUserName'] = $this->common_data['current_user'];
                $detail['createdDateTime'] = $this->common_data['current_date'];

                $status = $this->db->insert('srp_erp_purchaseorderdetails', $detail);
               
                if (!$status) {
                    $success = false;
                    break;
                }
            }
        
            $this->db->trans_complete();
        
            if ($success) 
            {
                echo json_encode(['status' => 's', 'message' => 'Purchase order generated Successfully.']);
            } 
            else 
            {
                echo json_encode(['status' => 'e', 'message' => 'Error in generating Purchase Order.']);
            }
        }
        else
        {
            echo json_encode(['status' => 'e', 'message' => 'DefaultYN is missing for this company']);
        }
    
       
    }
    

    function fetch_supplier_data($supplierID)
    {
        $this->db->select('*');
        $this->db->from('srp_erp_suppliermaster');
        $this->db->where('supplierAutoID', $supplierID);
        return $this->db->get()->row_array();
    }

    public function generateExpenseClaim()
    {
        $companyid = $this->common_data['company_data']['company_id'];
        $this->db->select('expenseClaimCategoriesAutoID');
        $this->db->where('companyID',$companyid);
        $this->db->where('IsTravelRequestYN',1);
        $this->db->from('srp_erp_expenseclaimcategories');
        $category = $this->db->get();
        $expensecategory = $category->result_array();
        
        if($expensecategory)
        {
            $requstid = $this->input->post('requestid');
    
            $this->db->select('tr.*,ed.Ename2, ed.segmentID,ed.payCurrencyID,ed.payCurrency, td.currencyID,td.amount');
            $this->db->from('srp_erp_travel_request tr');
            $this->db->join('srp_employeesdetails ed', 'tr.empID = ed.EIdNo');
            $this->db->join('srp_erp_travel_request_details td', 'tr.id = td.travelRequestID', 'left');
            $this->db->where('tr.id', $requstid);
            $this->db->group_by('td.currencyID');
        
            $query = $this->db->get();
            $results = $query->result_array();
        
            $supplier_arr = $this->fetch_supplier_data(trim($this->input->post('supplier') ?? ''));
        
            $success = true;
            foreach ($results as $result) {
                $this->db->select('CurrencyCode');
                $this->db->where('currencyID',$result['currencyID']);
                $this->db->from('srp_erp_currencymaster');
                $code_query = $this->db->get();
                $code_result = $code_query->row_array();
    
                $this->db->select('segmentCode');
                $this->db->where('segmentID',$result['segmentID']);
                $this->db->from('srp_erp_segment');
                $segment_query = $this->db->get();
                $segment_result = $segment_query->row_array();
                
                $data = [
                    'documentID' => 'EC',
                    'claimedByEmpID'=>$result['empID'],
                    'linkeddocumentID'=>$result['documentID'],
                    'linkedDocumentmasterID'=>$requstid,
                    'expenseClaimCode' => $this->sequence->sequence_generator('EC'),
                    'expenseClaimDate' =>$this->common_data['current_date'],
                    'claimedByEmpName' =>$result['Ename2'],
                    'comments' =>$result['descriptions'],
                    'companyID' => $this->common_data['company_data']['company_id'],
                    'companyCode' => $this->common_data['company_data']['company_code'],
                    'segmentCode' => $segment_result['segmentCode'],
                    'segmentID'=>$result['segmentID']
                ];
                $data['createdUserGroup'] = $this->common_data['user_group'];
                $data['createdPCID'] = $this->common_data['current_pc'];
                $data['createdUserID'] = $this->common_data['current_userID'];
                $data['createdUserName'] = $this->common_data['current_user'];
                $data['createdDateTime'] = $this->common_data['current_date'];
        
                $this->db->insert('srp_erp_expenseclaimmaster', $data);
                $lastID = $this->db->insert_id();

                $expenseClaimCategoriesAutoID = $expensecategory[0]['expenseClaimCategoriesAutoID'] ;
                $expensedetail = [
                    'expenseClaimMasterAutoID' => $lastID,
                    'expenseClaimCategoriesAutoID' => $expenseClaimCategoriesAutoID,
                    'description' =>$result['descriptions'],
                    'segmentID' =>$result['segmentID'],
                    'transactionCurrencyID' =>$result['currencyID'],
                    'transactionCurrency' => $code_result['CurrencyCode'],
                    'transactionExchangeRate'=>1,
                    'companyID' => $this->common_data['company_data']['company_id'],
                    'companyCode' => $this->common_data['company_data']['company_code'],
                    'companyLocalCurrencyID' => $this->common_data['company_data']['company_default_currencyID'],
                    'companyLocalCurrency' => $this->common_data['company_data']['company_default_currency'],
                    'companyLocalExchangeRate'=>$this->common_data['company_data']['company_default_currency']
                ];

                $expensedetail['transactionAmount'] = $result['amount'];
                $expensedetail['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($result['currencyID']);

                $default_currency = currency_conversionID($result['currencyID'], $expensedetail['companyLocalCurrencyID']);
                $expensedetail['companyLocalExchangeRate'] = $default_currency['conversion'];
                $expensedetail['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];

                $LocalAmount = $result['amount'] / $default_currency['conversion'];
                $expensedetail['companyLocalAmount'] = $LocalAmount;
                
                $expensedetail['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
                $expensedetail['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
                $reporting_currency = currency_conversionID($result['currencyID'], $expensedetail['companyReportingCurrencyID']);
                $expensedetail['companyReportingExchangeRate'] = $reporting_currency['conversion'];
                $expensedetail['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
                $ReportingAmount =$result['amount'] / $reporting_currency['conversion'];
                $expensedetail['companyReportingAmount'] = $ReportingAmount;

                $expensedetail['empCurrencyID'] = $result['payCurrencyID'];
                $expensedetail['empCurrency'] = $result['payCurrency'];
                $emp_currency = currency_conversionID($result['currencyID'], $result['payCurrencyID']);
                $expensedetail['empCurrencyExchangeRate'] = $emp_currency['conversion'];
                $empCurrencyAmount = $result['amount']/ $emp_currency['conversion'];
                $expensedetail['empCurrencyAmount'] = round($empCurrencyAmount, $emp_currency['DecimalPlaces']);
                $expensedetail['empCurrencyDecimalPlaces'] = $emp_currency['DecimalPlaces'];

                $expensedetail['createdUserGroup'] = $this->common_data['user_group'];
                $expensedetail['createdPCID'] = $this->common_data['current_pc'];
                $expensedetail['createdUserID'] = $this->common_data['current_userID'];
                $expensedetail['createdUserName'] = $this->common_data['current_user'];
                $expensedetail['createdDateTime'] = $this->common_data['current_date'];

                $status=$this->db->insert('srp_erp_expenseclaimdetails', $expensedetail);
                if (!$status) {
                    $success = false;
                    break;
                }
            }
        
            $this->db->trans_complete();
        
            if ($success) {
                echo json_encode(['status' => 's', 'message' => 'Expense claim generated Successfully.']);
            } else {
                echo json_encode(['status' => 'e', 'message' => 'Error in generating expense claim.']);
            }
        }
        else
        {
            echo json_encode(['status' => 'e', 'message' => 'Expense Claim Category not found']);
        }
       
    }

    function family_dropdown() {
        $empID=$this->input->post('empID');
        $familyDetails = family_drop($empID);

        echo json_encode($familyDetails);
    }

    /**employment - Medical tab */
    //save
    function save_medical()
    {
        $this->form_validation->set_rules('empID', 'employee ID', 'required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            echo json_encode($this->Employee_model->save_medical());
        }
    }

    //main tb view
    public function load_medical_details()
    {
        $this->load->helper('employee_helper');
        $empID = trim($this->input->post('empID') ?? '');
        $companyid = current_companyID();

        //$information = header
        $information = $this->db->query("SELECT 
                *
            FROM
                srp_erp_employee_medical_information
            WHERE
                empID = {$empID} 
                AND companyID = {$companyid}
        ")->result_array();

        $data['information'] = $information;
        $this->load->view('system/hrm/ajax/load_employ_medicalView', $data);
    }

    //edit view
    public function load_medical_edit_details(){

        $this->load->helper('employee_helper');
        $empID = trim($this->input->post('empID') ?? '');
        $companyid = current_companyID();

        $this->db->select('
            *, 
            t1.Description as employmentType, 
            srp_departmentmaster.DepartmentMasterID as DepartmentMasterID, 
            srp_departmentmaster.DepartmentDes as DepartmentDes,
        ');
        $this->db->from('srp_employeesdetails');
        $this->db->join('srp_empcontracttypes AS t1', 'srp_employeesdetails.EmployeeConType = t1.EmpContractTypeID', 'left');
        $this->db->join('srp_empdepartments', 'srp_employeesdetails.EIdNo = srp_empdepartments.EmpID');
        $this->db->join('srp_departmentmaster', 'srp_empdepartments.DepartmentMasterID = srp_departmentmaster.DepartmentMasterID', 'left');
        $this->db->where('srp_employeesdetails.EIdNo', $empID);
        $this->db->where('srp_employeesdetails.Erp_companyID', $companyid);
        $this->db->where('t1.Erp_CompanyID', $companyid);
        $employee = $this->db->get()->row_array();

        //employee company
        $cmany = $this->db->query("
            SELECT 
                Erp_companyID,
                CONCAT(srp_erp_company.company_code, ' | ' , srp_erp_company.company_name) AS employcompany
            FROM
                srp_employeesdetails
            LEFT JOIN srp_erp_company ON srp_employeesdetails.Erp_companyID = srp_erp_company.company_id
            WHERE
                srp_employeesdetails.EIdNo = ?
                AND srp_employeesdetails.Erp_companyID = ?
        ", array($empID, $companyid))->row_array();
    
        //employee segment
        $segment = $this->db->query("
            SELECT
                CONCAT(srp_erp_segment.segmentCode, '-' , srp_erp_segment.description) AS segmentDescription
            FROM
                srp_employeesdetails
            LEFT JOIN srp_erp_segment ON srp_employeesdetails.segmentID = srp_erp_segment.segmentID
            WHERE
                srp_employeesdetails.EIdNo = ?
                AND srp_employeesdetails.Erp_companyID = ?
                AND srp_erp_segment.status = 1
                AND srp_erp_segment.isShow = 1
        ", array($empID, $companyid))->row_array();
    
        $data['segment'] = $segment;
        $data['company'] = $cmany;
        $data['employee'] = $employee;

        if($this->input->post('viewType') == 1)
        {
            $this->load->view('system/hrm/ajax/load_ajax_emp_medicine_view', $data);
        }
        else
        {
            $medicalInformationID = trim($this->input->post('medicalInformationID') ?? '');
            
            //$information = header
            $information = $this->db->query("SELECT 
                    *
                FROM
                    srp_erp_employee_medical_information
                WHERE
                    id = $medicalInformationID
                    AND empID = {$empID} 
                    AND companyID = {$companyid}
            ")->row_array();

            //$categories
            $categories = $this->db->query("SELECT 
                    *
                FROM
                    srp_erp_employee_medical_categories
                WHERE
                    informationAutoID = $medicalInformationID
                    AND empID = {$empID} 
                    AND companyID = {$companyid}
            ")->row_array();

            $data['information'] = $information;
            $data['categories'] = $categories;

            if($this->input->post('viewType') == 3){
                $data['setOnlyReadable'] = true;
                $this->load->view('system/hrm/ajax/load_ajax_emp_medicine_view', $data);
            }else{
                $this->load->view('system/hrm/ajax/load_ajax_emp_medicine_view', $data);
            }
        }
    }

    //print view
    public function load_medical_details_print()
    {
        $requestid = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('id') ?? '');
        $companyid = current_companyID();

        $this->db->select('*');
        $this->db->from('srp_employeesdetails');
        $this->db->where('EIdNo', $empID);
        $this->db->where('Erp_companyID', $companyid);
        $employee = $this->db->get()->row_array();

        //$information = header
        $information = $this->db->query("SELECT 
                *
            FROM
                srp_erp_employee_medical_information
            WHERE
                id = {$requestid}
                AND empID = {$empID} 
                AND companyID = {$companyid}
        ")->row_array();

        //$categories
        $categories = $this->db->query("SELECT 
                *
            FROM
                srp_erp_employee_medical_categories
            WHERE
                informationAutoID = {$requestid}
                AND empID = {$empID} 
                AND companyID = {$companyid}
        ")->row_array();

        $data['information'] = $information;
        $data['categories'] = $categories;
        $data['employee'] = $employee;

        $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
        }

        $html = $this->load->view('system/hrm/ajax/load_ajax_emp_medicine_view_print', $data, true);

        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            ob_end_clean();
            $pdf = $this->pdf->printed($html, 'A4', 0);
        }

        // $this->load->library('pdf');
        // $pdf = $this->pdf->printed($html, 'A4', 0);
    }

    function delete_medical_details()
    {
        echo json_encode($this->Employee_model->delete_medical_details());
    }
    /**end medical tab */

/** start : almansoori chnges for personal application */
    /** MSE persional action*/
    function save_mse_personal_action_header()
    {
        echo json_encode($this->Employee_model->save_mse_personal_action_header());
    }

    function fetch_personal_action_mse_view()
    {
        $data = array();
        $headerDetails = $this->fetch_personal_Action_header_mse(trim($this->input->post('id') ?? ''));
        $data['headerDetails'] = $headerDetails;

        $data['id'] = trim($this->input->post('id') ?? '');

        $data['template_data'] = $this->Employee_model->mse_personal_application_get_template_data();
        
        $data['details'] = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$data['id'])->get()->result_array();
        
        $actionType = $this->db->select('actionType')->from('srp_erp_personal_action')->where('id', $data['id'])->get()->row('actionType');
        $data['actionType'] = trim($actionType);

        $this->load->view('system/hrm/ajax/ajax_personal_action_mse', $data);

    }

    /** load mse personal action header values */
    function fetch_personal_Action_header_mse($id_n = null){

        $convertFormat = convert_date_format_sql();
        if($id_n){
            $id = $id_n;
        }else{
            $id = trim($this->input->post('id') ?? '');
        }
        
        $companyID = current_companyID();

        $query = "SELECT 
            *,
            DATE_FORMAT(documentDate, '{$convertFormat}') AS documentDate
          FROM srp_erp_personal_action
          WHERE id = {$id} AND companyID = {$companyID}";

        $details = $this->db->query($query)->row_array();

        //echo '<pre>'; print_r($data); exit;
        if($id_n){
            return $details;
        }else{
            echo json_encode($details);
        } 
    }

    function fetch_personal_action_mse_table()
    {
        $date_format_policy = date_format_policy();
        $datefrom = $this->input->post('datefrom');
        $dateto = $this->input->post('dateto');
        $datefromconvert = input_format_date($datefrom, $date_format_policy);
        $datetoconvert = input_format_date($dateto, $date_format_policy);

        $companyid = $this->common_data['company_data']['company_id'];
        //$createdusetID = current_userID();
        $status = $this->input->post('status');
        $supplier_filter = '';
        
        $date = "";
        if (!empty($datefrom) && !empty($dateto)) {
            $date .= " AND ( srp_erp_personal_action.documentDate >= '" . $datefromconvert . " 00:00:00' AND srp_erp_personal_action.documentDate <= '" . $datetoconvert . " 23:59:00')";
        }
        $status_filter = "";
        if ($status != 'all') {
            if ($status == 1) {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 0 AND srp_erp_personal_action.approvedYN = 0)";
            } else if ($status == 2) {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 1 AND srp_erp_personal_action.approvedYN = 0)";
            } else {
                $status_filter = " AND ( srp_erp_personal_action.confirmedYN = 1 AND srp_erp_personal_action.approvedYN = 1)";
            }
        }

        $where = "srp_erp_personal_action.companyID = " . $companyid . $date . $status_filter . "";

        $convertFormat = convert_date_format_sql();
        $company_reporting_currency=$this->common_data['company_data']['company_reporting_currency'];
        $company_reporting_DecimalPlaces=$this->common_data['company_data']['company_reporting_decimal'];
        $this->datatables->select("
            srp_erp_personal_action.id as id,
            srp_erp_personal_action.documentID as documentID,
            srp_erp_personal_action.documentCode as documentCode,
            srp_erp_personal_action.actionType as typeID,
            CASE 
                WHEN actionType = 1 THEN 'Transfer'
                WHEN actionType = 2 THEN 'Increment'
                WHEN actionType = 3 THEN 'Bonus'
                WHEN actionType = 4 THEN 'Recruitment'
                WHEN actionType = 5 THEN 'Promotion'
                WHEN actionType = 6 THEN 'Designation Change'
                WHEN actionType = 7 THEN 'Regrading'
                ELSE '-' 
            END AS actionType, 
            Remarks, 
            srp_employeesdetails.Ename2 as Ename2,
            srp_erp_personal_action.confirmedYN as confirmedYN,
            srp_erp_personal_action.approvedYN as approvedYN,
            DATE_FORMAT(documentDate,'$convertFormat') AS documentDate,
            srp_erp_personal_action.createdUserName as createdUserName,
            srp_erp_personal_action.createdUserID as createdUserID,
        ");
        $this->datatables->join('srp_employeesdetails ', 'srp_erp_personal_action.empID = srp_employeesdetails.EIdNo');
        $this->datatables->from('srp_erp_personal_action');
        $this->datatables->where($where);
        $this->datatables->add_column('confirmed', '$1', 'confirm_user_approval_drilldown_mse(confirmedYN,"PAA",id)');
        $this->datatables->add_column('approved', '$1', 'confirm_approval_personal_application_mse(approvedYN,confirmedYN,"PAA",id,typeID)');
        $this->datatables->add_column('edit', '$1', 'load_personal_application_action_mse(id,confirmedYN,approvedYN,createdUserID)');
        echo $this->datatables->generate();
    }


    function load_personal_action_conformation_mse(){
        ob_start();
        $id = $this->input->post('id');

        if(empty($id)){
            $id = ($this->uri->segment(3)) ? $this->uri->segment(3) : trim($this->input->post('id') ?? '');
        }
 
        $this->db->select('*');
        $this->db->where('id', $id);
        $this->db->from('srp_erp_personal_action');
        $actionType = $this->db->get()->row_array();

        $personal_action_type = $actionType['actionType'];
 
        $data = array();
 
        $documentSystemCode = $this->input->post('id');
        if(!isset($documentSystemCode)){
            $documentSystemCode = $id;
        }
        $companyID = $this->common_data['company_data']['company_id'];
        //fetch levels and users
            $this->db->select("approvalLevelID,approvedDate,'' AS Ename2,
                ap.employeeID");
            $this->db->from('srp_erp_documentapproved');
            $this->db->join("srp_erp_approvalusers AS ap", "ap.levelNo = srp_erp_documentapproved.approvalLevelID AND ap.documentID = 'PAA' AND ap.typeID = '{$personal_action_type}' AND ap.companyID = '{$companyID}'");
            $this->db->where('srp_erp_documentapproved.documentID', 'PAA');
            $this->db->where('documentSystemCode', $documentSystemCode);
            $this->db->where('srp_erp_documentapproved.companyID', $companyID);
            $this->db->order_by('srp_erp_documentapproved.approvalLevelID');
            $approved = $this->db->get()->result_array();
 
            $managers = $this->db->query("SELECT
                                                *
                                            FROM
                                                (
                                                SELECT
                                                    repManager,
                                                    repManagerName,
                                                    currentLevelNo,
                                                    HOD,
                                                    HODName
                                                FROM
                                                    srp_erp_personal_action AS paTB
                                                    JOIN srp_erp_documentapproved ON paTB.documentID = 'PAA'
                                                    LEFT JOIN (
                                                    SELECT
                                                        hod_id AS HOD,
                                                        EmpID AS EmpNew,
                                                        t3.Ename2 AS HODName
                                                    FROM
                                                        srp_empdepartments AS dpt
                                                        JOIN srp_departmentmaster AS departmentmaster ON departmentmaster.DepartmentMasterID = dpt.DepartmentMasterID
                                                        JOIN srp_employeesdetails AS t3 ON departmentmaster.hod_id = t3.EIdNo
                                                        AND t3.Erp_companyID = {$companyID}
                                                    WHERE
                                                        dpt.isPrimary = 1
                                                    ) AS HodData ON paTB.empID = HodData.EmpNew
                                                    LEFT JOIN (
                                                    SELECT
                                                        empID,
                                                        managerID AS repManager,
                                                        Ename2 AS repManagerName
                                                    FROM
                                                        srp_erp_employeemanagers AS t1
                                                        JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo
                                                    WHERE
                                                        active = 1
                                                        AND t1.companyID = {$companyID}
                                                    ) AS repoManagerTB ON paTB.empID = repoManagerTB.empID
                                                WHERE
                                                    paTB.companyID = {$companyID}
                                                    AND id = {$documentSystemCode}
                                                   
                                                ) AS empData
                                                LEFT JOIN (
                                                SELECT
                                                    managerID AS topManager,
                                                    Ename2 AS topManagerName,
                                                    empID AS topEmpID
                                                FROM
                                                    srp_erp_employeemanagers AS t1
                                                    JOIN srp_employeesdetails AS t2 ON t1.managerID = t2.EIdNo
                                                    AND t2.Erp_companyID ={$companyID}
                                                WHERE
                                                    t1.companyID = {$companyID}
                                                AND active = 1
                                                ) AS topManagerTB ON empData.repManager = topManagerTB.topEmpID;
           
            ")->row_array();
            
            foreach($approved as $key => $approve_details){
 
                $employeeID = $approve_details['employeeID'];
 
                if($employeeID == -1){
                    $approved[$key]['Ename2'] =  $managers['repManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['repManager'];
                }elseif($employeeID == -2){
                    $approved[$key]['Ename2'] =  $managers['HODName'];
                    $approved[$key]['levelUserID'] =  $managers['HOD'];
                }elseif($employeeID == -3){
                    $approved[$key]['Ename2'] =  $managers['topManagerName'];
                    $approved[$key]['levelUserID'] =  $managers['topManager'];
                }else{
                    $employee_details = fetch_employeeNo($employeeID);
                    $approved[$key]['Ename2'] =  $employee_details['Ename2'];
                    $approved[$key]['levelUserID'] =  $employee_details['EIdNo'];
                }
            }
        $data['approval_users_data'] = $approved;
 
        $headerDetails = $this->fetch_personal_Action_header(trim($id));
        $data['headerDetails'] = $headerDetails;
 
        /**action type */
        $remarks = $this->db->select('Remarks')->from('srp_erp_personal_action')->where('id', $id)->get()->row('Remarks');
        $data['remark'] = trim($remarks);
       
        $data['approval'] = $this->input->post('approval');
        $data['extra'] = $this->Employee_model->fetch_personal_action_template_data_mse($id);
 
        if (!$this->input->post('html')) {
            $data['signature']=$this->Employee_model->fetch_signaturelevel();
           } else {
              $data['signature']='';
        }
        $data['logo']=mPDFImage;
        if($this->input->post('html')){
            $data['logo']=htmlImage;
        }
   
        $data['template_data'] = $this->Employee_model->mse_personal_application_get_template_data($id);
 
        /**employee currency */
        $data['empCurrency'] = $this->db->query("SELECT
                srp_erp_pay_salarydeclartion.transactionCurrency AS transactionCurrency
            FROM
                srp_erp_pay_salarydeclartion
                LEFT JOIN ( SELECT empID FROM srp_erp_personal_action WHERE id = 217 GROUP BY empID ) AS person ON person.empID = srp_erp_pay_salarydeclartion.employeeNo
            GROUP BY
                employeeNo
        ")->row_array('srp_erp_pay_salarydeclartion.transactionCurrency');
 
        /**action type */
        $actionType = $this->db->select('actionType')->from('srp_erp_personal_action')->where('id', $id)->get()->row('actionType');
        $data['actionType'] = trim($actionType);

        /**if not in budget */
        $data['ifNotOnBudget'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'ifNotOnBudget')->where('paID', $id)->get()->row('NewValueText');
        /** */
        $data['remark2'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'remark2')->where('paID', $id)->get()->row('NewValueText');
 
        /**Remarks */
        $data['remark1'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'remark1')->where('paID', $id)->get()->row('NewValueText');
        $data['remark2'] = $this->db->select('NewValueText')->from('srp_erp_personal_action_details')->where('fieldType', 'remark2')->where('paID', $id)->get()->row('NewValueText');
       
        $data['details'] = $this->db->select('*')->from('srp_erp_personal_action_details')->where('paID',$id)->get()->result_array();

        $html = $this->load->view('system/hrm/erp_personal_action_print_mse', $data, true);
        if ($this->input->post('html')) {
            echo $html;
        } else {
            $this->load->library('pdf');
            ob_end_clean();
            $pdf = $this->pdf->printed($html, 'A4', $data['extra']['master']['approvedYN']);
        }
    }

    /** delete personal action mse*/
    function delete_personal_action_mse()
    {
        $id = trim($this->input->post('id') ?? '');
        $companyid = $this->common_data['company_data']['company_id'];

        $status=$this->db->delete('srp_erp_personal_action', array('id' => trim($this->input->post('id') ?? '')));

        if($this->db->affected_rows() > 0){
            $this->db->delete('srp_erp_personal_action_details', array('paID' => trim($this->input->post('id') ?? '')));

            $is_exist = $this->db->query("SELECT systemID FROM srp_erp_approvalreject WHERE systemID={$id} AND companyID={$companyid}
            ")->row_array();

            if($is_exist){
                $this->db->delete('srp_erp_approvalreject', array('systemID' => trim($this->input->post('id') ?? '')));
            }

            echo json_encode(array('s', ' Deleted Successfully.', $status));
        }else {
            echo json_encode(array('e', ' Error in Deletion.', $status));
        }
    }

    function update_persional_action_details_mse(){
        echo json_encode($this->Employee_model->update_persional_action_details_mse());
    }

    function update_persional_action_details_actionCodeType_mse(){
        echo json_encode($this->Employee_model->update_persional_action_details_actionCodeType_mse());
    }

    function personal_action_confirmation_mse()
    {
        $result = $this->Employee_model->personal_action_confirmation_mse();

        echo json_encode($result);
    }

    function fetch_approval_user_modal_pa_mse(){
        echo json_encode($this->Employee_model->fetch_approval_user_modal_pa_mse());
    }

    function referback_persional_action_mse()
    {
        $id = $this->input->post('id');

        /**delete from document approved TBs */
         $where = array('documentID' => 'PAA', 'documentSystemCode' => $id);
        $this->db->where($where)->delete('srp_erp_documentapproved');  

        if ($this->db->affected_rows() > 0)
        {
            $data = array(
                'currentLevelNo' => 1,
                'confirmedYN' => 3,
                'confirmedDate' => null,
                'confirmedByEmpID' => null,
                'confirmedByName' => null,
                'criteriaID' => 0
            );
            $this->db->where('id', trim($this->input->post('id') ?? ''));
            $status= $this->db->update('srp_erp_personal_action', $data);
    
            //remove document approved 
            // $this->load->library('Approvals');
            // $status = $this->approvals->approve_delete($this->input->post('id'), 'PAA');
    
            if ($this->db->affected_rows() > 0)
            {
                $id = trim($this->input->post('id') ?? '');
                $this->db->select('*');
                $this->db->where('id', $id);
                $this->db->from('srp_erp_personal_action');
                $paa_data = $this->db->get()->row_array();
    
                /*** Firebase Mobile Notification*/
                $this->db->select('managerID');
                $this->db->where('empID', trim($paa_data['createdUserID'] ?? ''));
                $this->db->where('active', 1);
                $this->db->from('srp_erp_employeemanagers');
                $managerid = $this->db->get()->row_array();
    
                $token_android = firebaseToken($managerid["managerID"], 'android');
                $token_ios = firebaseToken($managerid["managerID"], 'apple');
    
                $firebaseBody = $paa_data['createdUserName'] . " has referred back Personal Action Application.";
    
                $this->load->library('firebase_notification');
                if(!empty($token_android)) {
                    $this->firebase_notification->sendFirebasePushNotification("Personal Action Application Approval Referred Back", $firebaseBody, $token_android, 6, $paa_data['documentCode'], "PAA", $id, "android");
                }
                if(!empty($token_ios)) {
                    $this->firebase_notification->sendFirebasePushNotification("Personal Action Application Approval Referred Back", $firebaseBody, $token_ios, 6, $paa_data['documentCode'], "PAA", $id, "apple");
                }
    
                echo json_encode(array('s', ' Referred Back Successfully.'));
            } else {
                echo json_encode(array('e', ' Error in refer back.'));
            }
        }else{
            return array('e', 'Error..! <br> Document not removed from Document Approved TB');
        }
        
    }

    function personal_application_approval_mse()
    {
        $system_code = trim($this->input->post('id') ?? '');
        $level_id = trim($this->input->post('level') ?? '');
        $status = trim($this->input->post('po_status') ?? '');
        if($status==1){
            $approvedYN=checkApproved($system_code,'PAA',$level_id);
            if($approvedYN){
                $this->session->set_flashdata('w', 'Document already approved');
                echo json_encode(FALSE);
            }else{
                $this->db->select('id');
                $this->db->where('id', trim($system_code));
                $this->db->where('approvedYN', 2);
                $this->db->from('srp_erp_personal_action');
                $po_approved = $this->db->get()->row_array();
                if(!empty($po_approved)){
                    $this->session->set_flashdata('w', 'Document already rejected');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'personal action ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->personal_application_approval_mse());
                    }
                }
            }
        }else if($status==2){
            $this->db->select('id');
            $this->db->where('id', trim($system_code));
            $this->db->where('approvedYN', 2);
            $this->db->where('confirmedYN !=', 1);
            $this->db->from('srp_erp_personal_action');
            $po_approved = $this->db->get()->row_array();
            if(!empty($po_approved)){
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
            }else{
                $rejectYN=checkApproved($system_code,'PAA',$level_id);
                if(!empty($rejectYN)){
                    $this->session->set_flashdata('w', 'Document already approved');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'personal action ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->personal_application_approval_mse());
                    }
                }
            }
        }
    }

    function fetch_personal_application_approval_mse()
    {
        $date_format_policy = date_format_policy();

        $companyid = $this->common_data['company_data']['company_id'];
        $approvedYN = trim($this->input->post('approvedYN') ?? '');
        $empID=current_userID();
        $convertFormat = convert_date_format_sql();
        $company_reporting_currency=$this->common_data['company_data']['company_reporting_currency'];
        $company_reporting_DecimalPlaces=$this->common_data['company_data']['company_reporting_decimal'];

        $this->db->select('approvalType');
        $this->db->where('documentID', 'PAA');
        $this->db->where('companyID', $companyid);
        $this->db->from('srp_erp_documentcodemaster');
        $check_approvalType = $this->db->get()->row_array();

        $this->datatables->select("
            srp_erp_personal_action.id as id,
            srp_erp_personal_action.documentCode,
            srp_erp_personal_action.Remarks as Remarks,
            srp_employeesdetails.Ename2 as createdUserName, 
            ap.typeID as typeID,
            CASE 
                WHEN srp_erp_personal_action.actionType = 1 THEN 'Transfer'
                WHEN srp_erp_personal_action.actionType = 2 THEN 'Increment'
                WHEN srp_erp_personal_action.actionType = 3 THEN 'Bonus'
                WHEN srp_erp_personal_action.actionType = 4 THEN 'Recruitment'
                WHEN srp_erp_personal_action.actionType = 5 THEN 'Promotion'
                WHEN srp_erp_personal_action.actionType = 6 THEN 'Designation Change'
                WHEN srp_erp_personal_action.actionType = 7 THEN 'Regrading'
            ELSE '-'
            END AS actionType,
            srp_erp_personal_action.confirmedYN as confirmedYN,
            approve.approvedYN as approvedYN,
            documentApprovedID,
            approvalLevelID,
            DATE_FORMAT(srp_erp_personal_action.documentDate, '$convertFormat') AS documentDate,
            srp_erp_personal_action.createdUserID
        ");

        $this->datatables->join('srp_employeesdetails', 'srp_erp_personal_action.empID = srp_employeesdetails.EIdNo');
        $this->datatables->join('srp_erp_employeemanagers', 'srp_erp_personal_action.empID = srp_erp_employeemanagers.empID');
        $this->datatables->from('srp_erp_personal_action');
        $this->datatables->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = srp_erp_personal_action.id AND approve.approvalLevelID = srp_erp_personal_action.currentLevelNo');
        $this->datatables->join('srp_erp_approvalusers AS ap', 'ap.levelNo = srp_erp_personal_action.currentLevelNo AND ap.typeID = srp_erp_personal_action.actionType AND ap.criteriaID = srp_erp_personal_action.criteriaID');

        $this->datatables->where('approve.documentID', 'PAA');
        $this->datatables->where('approve.companyID', $companyid);
        $this->datatables->where('ap.documentID', 'PAA');
        $this->datatables->where('ap.companyID', $companyid);
        $this->datatables->where('srp_erp_personal_action.companyID', $companyid); 
        $this->datatables->where('srp_erp_personal_action.confirmedYN', 1);
        $this->datatables->where('srp_erp_personal_action.approvedYN', $approvedYN);

        if($check_approvalType['approvalType'] == 2) /**less than one year approval */
        {
            $this->datatables->where('srp_erp_personal_action.criteriaID', 1);
        }else{
            $this->datatables->where('srp_erp_personal_action.criteriaID', 0);
        }

        $this->datatables->where("
            ( ap.employeeID = '{$empID}'
                OR (
                    ap.employeeID = -1 
                    AND srp_erp_personal_action.empID IN (
                        SELECT
                            emp_manager.empID 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID 
                            AND emp_manager.active = 1 
                            AND emp_manager.companyID = '{$companyid}' 
                            AND emp_manager.managerID = '{$empID}'
                    )
                )
                OR (
                    ap.employeeID = -2 
                    AND srp_erp_personal_action.empID IN (
                        SELECT
                            emp_detail.EIdNo 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                            JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                            AND emp_dep.isactive = 1 
                            AND emp_dep.Erp_companyID = '{$companyid}' 
                            AND srp_dep.hod_id = '{$empID}'
                    )
                )
                OR (
                    ap.employeeID = -3 
                    AND srp_erp_personal_action.empID IN (
                        SELECT
                            emp_detail.EIdNo 
                        FROM
                            srp_employeesdetails AS emp_detail
                            JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                            JOIN (
                                SELECT * FROM srp_erp_employeemanagers
                            ) AS top_manager ON top_manager.empID = emp_manager.managerID 
                        WHERE
                            emp_manager.active = 1 
                            AND emp_manager.companyID = '{$companyid}' 
                            AND top_manager.managerID = '{$empID}'
                    )
                )
            )
        ");

        $this->datatables->add_column('approved', '$1', 'confirm_approval_personal_application_mse(approvedYN, confirmedYN, "PAA", id, typeID)');
        $this->datatables->add_column('edit', '$1', 'load_PAA_approval_action_mse(id, approvalLevelID, approvedYN, documentApprovedID)');
        $this->datatables->add_column('PAA_detail', '<b>Claimed By Name : </b> $1 <br> <b>Claimed Date : </b> $2 <br><b>Description : </b> $3', 'createdUserName, documentDate, Remarks');

        echo $this->datatables->generate();

    }

    function selectBasicSlary(){

        $company_id=current_companyID();
        $this->db->select('salaryCategoryID');
        $this->db->from('srp_erp_pay_salarycategories');
        $this->db->where('is_basic',1);
        $this->db->where('companyID',$company_id);
        $query=$this->db->get();
        $basicSalary=$query->row_array();
        echo json_encode($basicSalary); 
    }


/**start : monthly allowance claim */
    public function save_monthly_allowance_header()
    {
        $this->form_validation->set_rules('documentDate', 'Document Date', 'trim|required|date');
        $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'trim|required|date');
        $this->form_validation->set_rules('monthDescription', 'Description', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        } else {
            //$unProcessedEmployees = $this->payrollNotProcessed_Employee();

            //if ($unProcessedEmployees[0] == 's') {
                $data = $this->Employee_model->save_monthly_allowance_header('MAC');
                echo json_encode($data);
            //} else {
                //echo json_encode($unProcessedEmployees);
            //}
        }
    }

    function payrollNotProcessed_Employee()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $documentDate = input_format_date($this->input->post('documentDate'), $date_format_policy);
        $year = date('Y', strtotime($documentDate));
        $month = date('m', strtotime($documentDate));

        $isSalaryDeclared = $this->getCountOfSalaryDeclared_Employee($documentDate);
        if ($isSalaryDeclared == 0) {
            return ['e', 'Salary is not declared for this employee on or before this date.'];
        }

        $processedEmp = $this->db->query("SELECT EIdNo, ECode, Ename2 AS empName
                                          FROM srp_employeesdetails AS empTB
                                          JOIN (
                                              SELECT employeeNo FROM srp_erp_pay_salarydeclartion WHERE companyID={$companyID}
                                              AND payDate<='{$documentDate}' GROUP BY employeeNo
                                          ) AS declarationTB ON declarationTB.employeeNo=empTB.EIdNo
                                          JOIN (
                                              SELECT EIdNo AS empID, dischargedDate,
                                              IF( isDischarged != 1, 0,
                                                    CASE
                                                       WHEN DATE_FORMAT('{$documentDate}', '%Y-%m-01') <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                       WHEN DATE_FORMAT('{$documentDate}', '%Y-%m-01') > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                    END
                                              ) AS isDischargedStatus
                                              FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                          ) AS dischargedStatusTB ON dischargedStatusTB.empID = empTB.EIdNo
                                          WHERE empTB.Erp_companyID={$companyID} AND empConfirmedYN=1 AND empTB.isPayrollEmployee = 1 AND isDischargedStatus != 1
                                          AND  EIdNo NOT IN (
                                              SELECT  empID FROM srp_erp_payrollmaster AS payMaster
                                              JOIN srp_erp_payrollheaderdetails AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID AND payDet.companyID={$companyID}
                                              WHERE payMaster.companyID={$companyID} AND payrollYear={$year} AND payrollMonth={$month}
                                          )")->result_array();

        if (count($processedEmp) == 0) {
            return ['e', 'Payroll has been processed for the employee on this month.'];
        }

        return ['s'];
    }

    function getCountOfSalaryDeclared_Employee($documentDate)
    {
        $companyID = current_companyID();
        $empCount = $this->db->query("SELECT COUNT(id) countEmp FROM srp_erp_pay_salarydeclartion WHERE companyID={$companyID}
                                      AND payDate <='{$documentDate}'")->row('countEmp');
        return $empCount;
    }

    public function load_monthlyAllowanceClaimMaster_table()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();

        $from = $this->input->post('fromDateFilter');
        $to = $this->input->post('toDateFilter');
        $date_format_policy = date_format_policy();
        $dateFrom = input_format_date($from, $date_format_policy);
        $dateTo = input_format_date($to, $date_format_policy);

        $this->datatables->select("monthlyClaimMasterID AS masterID, monthlyClaimCode, masTB.description AS des, documentDate, confirmedYN, approvedYN,
            DATE_FORMAT(dateFrom, '$convertFormat') AS fromDate, DATE_FORMAT(dateTo, '$convertFormat') AS toDate, 'Monthly Addition Claim' AS typeDescription", false)
            ->from('srp_erp_pay_monthlyadditionclaim masTB')
            ->add_column('status', '$1', 'confirm(confirmedYN)')
            ->add_column('approved', '$1', 'document_approval_drilldown_allowance_claim(approvedYN,confirmedYN,"MAC",masterID)')
            ->add_column('action', '$1', 'monthlyAdditionClaim_DeclarationsAction(masterID, monthlyClaimCode, confirmedYN,approvedYN)')
            ->edit_column('documentDate', '<span>$1</span>', 'convert_date_format(documentDate)')
            ->where('masTB.companyID', $companyID);

        // Apply date filter
        if (!empty($from) && !empty($to)) {
            $this->datatables->where("masTB.documentDate >=", $dateFrom);
            $this->datatables->where("masTB.documentDate <=", $dateTo);
        }

        echo $this->datatables->generate();
    }

    public function editmonthAddition()
    {
        echo json_encode($this->Employee_model->editmonthAddition('MAC'));
    }

    public function loadAllowanceDetail_table()
    {
        $masterID = $this->input->post('masterID');//
        $type = $this->input->post('type_m');//

        $isVariable = $this->input->post('isVariable');
        $selected_groups = $this->input->post('groups');
        $currentEmp = current_userID();
        $selected_emp = $this->input->post('emp_arr');

        $companyID = current_companyID();
        $masterData = $this->Employee_model->editmonthAddition($type, $masterID);
        $data['masterData'] = $masterData;

        $additionType = 0;
        if ($type == 'MAC') {
            $tableName = 'srp_erp_pay_monthlyadditionclaimdetail';
            $masterColumn = 'monthlyClaimMasterID';
            $additionType = 0;
        }

        $str = '';
        $isGroupAccess = getPolicyValues('PAC', 'All');
        $data['isGroupAccess'] = $isGroupAccess;
        if ($isGroupAccess == 1) {
            $totalEntries = $this->db->query("SELECT COUNT($masterColumn) AS totalEntries
                                     FROM srp_erp_pay_monthlyadditionclaimdetail AS detailTB
                                     JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                     LEFT JOIN (
                                          SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                     ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                     LEFT JOIN (
                                        SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                     )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                     WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} ORDER BY ECode ASC")->row('totalEntries');
            $data['totalEntries'] = $totalEntries;
            
            $str = "JOIN (
                        SELECT groupID FROM srp_erp_payrollgroupincharge
                        WHERE companyID={$companyID} AND empID={$currentEmp}
                    ) AS accTb ON accTb.groupID = detailTB.accessGroupID";
        }

        $filter_sel = '';
        if($selected_groups){
            $selected_groups_str = join(',',$selected_groups);
            $filter_sel .= 'AND decType.monthlyDeclarationID IN ('.$selected_groups_str.') ';
        }

        if($selected_emp){
            $selected_emp_str = join(',',$selected_emp);
            $filter_sel .= 'AND empTB.EIdNo IN ('.$selected_emp_str.') ';
        }
       // $filter_sel .= 'AND empTB.EIdNo = '.$currentEmp.'';

        $details_all = $this->db->query("SELECT detailTB.*, EIdNo, ECode, Ename2 AS empName,
                                    IFNULL(declarationID, 0) AS declarationID, IFNULL(GLSecondaryCode, 0) AS GLSecondaryCode
                                    FROM srp_erp_pay_monthlyadditionclaimdetail AS detailTB
                                    JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                    {$str}
                                    LEFT JOIN (
                                        SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                    ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                    LEFT JOIN (
                                    SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                    )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                    WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} ORDER BY ECode ASC")->result_array();


        $details = $this->db->query("SELECT detailTB.*, EIdNo, ECode, Ename2 AS empName,
                                     IFNULL(declarationID, 0) AS declarationID, IFNULL(GLSecondaryCode, 0) AS GLSecondaryCode
                                     FROM srp_erp_pay_monthlyadditionclaimdetail AS detailTB
                                     JOIN srp_employeesdetails AS empTB ON detailTB.empID=empTB.EIdNo  AND Erp_companyID={$companyID}
                                     {$str}
                                     LEFT JOIN (
                                          SELECT monthlyDeclarationID FROM srp_erp_pay_monthlydeclarationstypes WHERE companyID={$companyID}
                                     ) AS decType ON decType.monthlyDeclarationID=detailTB.declarationID
                                     LEFT JOIN (
                                        SELECT GLAutoID, GLSecondaryCode FROM srp_erp_chartofaccounts WHERE companyID={$companyID}
                                     )AS chartAcc ON chartAcc.GLAutoID=detailTB.GLCode
                                     WHERE {$masterColumn} = {$masterID} AND detailTB.companyID = {$companyID} {$filter_sel} ORDER BY ECode ASC")->result_array();

        $data['details'] = $details;
        $data['isVariable'] = $isVariable ? $isVariable: null;
        $data_emp_arr = array();

        foreach($details_all as $det){
            $data_emp_arr[$det['empID']] = $det['ECode'].' | '.$det['empName'];
        }
      
        $data['emp_arr'] = $data_emp_arr;
        $data['selected_groups'] = $selected_groups;
        $data['selected_emp'] = $selected_emp;

        //echo'<pre>';print_r($data);exit;
        if ($additionType == 0) {
            $this->load->view('system/hrm/ajax/monthly-allowance_detailsTB-view', $data);
        }
    }


    public function saveemployeeAsTemp()
    {
        $this->form_validation->set_rules('masterID', 'Master ID', 'trim|required');
        $this->form_validation->set_rules('dateDesc', 'Date', 'trim|required|date');

        $this->form_validation->set_rules('fromDate', 'From Date', 'trim|required|date');
        $this->form_validation->set_rules('toDate', 'To Date', 'trim|required|date');

        if ($this->form_validation->run() == FALSE) {
            die(json_encode(['e', validation_errors()]));
        }

        $monthlyAD = $this->input->post('type_m'); // MAC 
        $empHiddenID = $this->input->post('temp_empHiddenID');
        $fromDate = $this->input->post('fromDate');
        $toDate = $this->input->post('toDate');

        if (count($empHiddenID) > 0) {

            $date_format_policy = date_format_policy();
            $masterID = $this->input->post('updateID');
            $dtDsc = $this->input->post('dateDesc');
            $empArr = $this->input->post('temp_empHiddenID');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
            $payYear = date('Y', strtotime($dateDesc));
            $payMonth = date('m', strtotime($dateDesc));

            $masterData = $this->Employee_model->editmonthAddition($monthlyAD, $masterID);

            $this->load->helper('template_paySheet_helper');

            if (!empty($this->input->post('empHiddenID'))) {
                $isProcessSuccess = $this->Employee_model->save_emp_Monthly_Allowance($monthlyAD);
            } else {
                $isProcessSuccess[0] = 's';
            }

            if ($isProcessSuccess[0] == 's') {
                echo json_encode($this->Employee_model->saveemployeeAsTemp());
            } else {
                echo json_encode($isProcessSuccess);
            }

        } else {
            echo json_encode(array('e', 'There are no one selected to proceed'));
        }
    }
    

    public function save_empMonthly_Allowance()
    {
         $this->form_validation->set_rules('monthlyClaimMasterID', 'monthlyClaimMasterID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        }
        else {
            $date_format_policy = date_format_policy();

            $dtDsc = $this->input->post('document_date');
            $dateDesc = input_format_date($dtDsc, $date_format_policy);
          
            $isSalaryDeclared = $this->getCountOfSalaryDeclaredEmployees('N', $dateDesc); //N - (payrollType-payroll)

            if ($isSalaryDeclared == 0) {
                die(json_encode(['e', 'Salary is not declared for you on or before this date.']));
            }

            echo json_encode($this->Employee_model->save_emp_Monthly_Allowance('MAC'));

        }
    }

    public function monthly_Allowance_excelUpload()
    {
        $masterID = $this->input->post('masterID');
        $type_m = $this->input->post('type_m');
        $docDate = $this->input->post('docDate');
        $date_format_policy = date_format_policy();
        $docDate = input_format_date($docDate, $date_format_policy);
        $lastDateOfMonth = date('Y-m-t', strtotime($docDate));;
        $year = date('Y', strtotime($docDate));
        $month = date('m', strtotime($docDate));
        $companyID = current_companyID();
        $i = 0;
        $m = 0;
        $current_date = current_date();


        if (empty($masterID)) {
            die(json_encode(['e', 'Id field is required']));
        }

        if ($type_m == 'MAC') {
            $tableName = 'srp_erp_pay_monthlyadditionclaimdetail';
            $masterColumn = 'monthlyClaimMasterID';
        }

        if (isset($_FILES['excelUpload_file']['size']) && $_FILES['excelUpload_file']['size'] > 0) {
            $type = explode(".", $_FILES['excelUpload_file']['name']);
            if (strtolower(end($type)) != 'csv') {
                die(json_encode(['e', 'File type is not csv - ', $type]));
            }

            //Get all employees in the company
            $current_emp = current_userID();
            $empArr = $this->db->query("SELECT EIdNo, ECode, Ename2 FROM srp_employeesdetails WHERE EIdNo={$current_emp} AND Erp_companyID={$companyID}")->result_array();
            $emp_list = array_column($empArr, 'ECode');

            $filename = $_FILES["excelUpload_file"]["tmp_name"];
            $file = fopen($filename, "r");
            $dataExcel = [];
            $unMatchRecords = [];

            while (($getData = fgetcsv($file, 10000, ",")) !== FALSE) {
                if ($i > 0) {
                
                    if (count($getData) >= 5) { // Check if the row has at least 5 columns
                        // print_r($getData[4]);exit;
                        $excelEmpCode = trim($getData[0] ?? '');
                        $description = trim($getData[2] ?? '');
                        $rate = trim($getData[3] ?? '');
                        $unit = trim($getData[4] ?? '');
                        $amount = $rate * $unit;
                        $amount = str_replace(',', '', $amount);

                        if (!empty($excelEmpCode) && ($amount > 0)) {

                            $keys = array_keys($emp_list, $excelEmpCode);
                            $thisEmpData = array_map(function ($k) use ($empArr) {
                                return $empArr[$k];
                            }, $keys);

                            if (!empty($thisEmpData[0])) {
                                $dataExcel[$m]['empID'] = $thisEmpData[0]['EIdNo'];
                                $dataExcel[$m][$masterColumn] = $masterID;
                                $dataExcel[$m]['transactionAmount'] = $amount;
                                $dataExcel[$m]['payRate'] = $rate;
                                $dataExcel[$m]['payUnit'] = $unit;
                                $dataExcel[$m]['description'] = $description;
                                $dataExcel[$m]['empCodeName'] = trim($excelEmpCode . ' - ' . trim($getData[1] ?? ''));

                                $m++;
                            } else {
                                $unMatchRecords[] = ' &nbsp;&nbsp;- ' . $excelEmpCode;
                            }
                        }

                    } else {
                        // Skip rows with insufficient columns and log them if needed
                        $unMatchRecords[] = ' &nbsp;&nbsp;- Insufficient columns in row: ' . implode(', ', $getData);
                    }
                }
                $i++;
            }
            fclose($file);

            if (!empty($unMatchRecords)) {
                $msg = '<strong>Following Employee code does not match with the database.</strong><br/>';
                $msg .= implode('<br/>', $unMatchRecords);
                die(json_encode(['m', $msg]));
            }


            if (!empty($dataExcel)) {
                $alreadyPayrollProcessed = [];
                $dischargedList = [];
                $notMatchRecords = [];
                $com_currencyID = $this->common_data['company_data']['company_default_currencyID'];
                $com_currency = $this->common_data['company_data']['company_default_currency'];
                $com_currDPlace = $this->common_data['company_data']['company_default_decimal'];
                $groupEmpBy = array_group_by($dataExcel, 'empID');

                $data = [];
                $k = 0;
                $canPull = true;
                foreach ($groupEmpBy as $key => $row) {
                    $empID = $key;

                    $empData = $this->db->query("SELECT EIdNo, ECode, Ename2 AS empName, currencyID, CurrencyCode, DecimalPlaces,
                                                IF(ISNULL(empID_pay), 'N', 'Y') AS isPayrollProcessed, isDischargedStatus, groupID
                                                FROM srp_employeesdetails AS empTB
                                                JOIN srp_designation ON empTB.EmpDesignationId = srp_designation.DesignationID
                                                JOIN srp_erp_currencymaster AS cur ON cur.currencyID = empTB.payCurrencyID
                                                JOIN srp_erp_pay_salarydeclartion AS salaryDec ON empTB.EIdNo = salaryDec.employeeNo
                                                JOIN (
                                                    SELECT EIdNo AS empID, dischargedDate,
                                                    IF( isDischarged != 1, 0,
                                                         CASE
                                                             WHEN '{$lastDateOfMonth}' <= DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 0
                                                             WHEN '{$lastDateOfMonth}' > DATE_FORMAT(dischargedDate, '%Y-%m-01') THEN 1
                                                         END
                                                    )AS isDischargedStatus FROM srp_employeesdetails WHERE Erp_companyID={$companyID}
                                                ) AS dischargedStatusTB ON dischargedStatusTB.empID = empTB.EIdNo
                                                LEFT JOIN (
                                                    SELECT empID AS empID_pay FROM srp_erp_payrollmaster AS payMaster
                                                    JOIN srp_erp_payrollheaderdetails AS payDet ON payDet.payrollMasterID = payMaster.payrollMasterID
                                                    WHERE payMaster.companyID = {$companyID} AND payDet.companyID={$companyID} AND payrollYear={$year}
                                                    AND payrollMonth={$month}
                                                ) AS thisPayTB ON thisPayTB.empID_pay = empTB.EIdNo
                                                LEFT JOIN(
                                                  SELECT groupID, employeeID FROM srp_erp_payrollgroupemployees
                                                  WHERE employeeID={$empID} AND companyID={$companyID}
                                                ) AS accTb ON accTb.employeeID = empTB.EIdNo
                                                WHERE empTB.Erp_companyID = '{$companyID}' AND empTB.isPayrollEmployee = 1 AND salaryDec.confirmedYN = 1
                                                AND salaryDec.payDate <= '{$lastDateOfMonth}' AND empTB.EIdNo={$empID}
                                                GROUP BY salaryDec.employeeNo")->row_array();


                    if (!empty($empData)) {

                        if ($empData['isPayrollProcessed'] == 'Y') {
                            /*** If payroll already processed ***/
                            $alreadyPayrollProcessed[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }
                        if ($empData['isDischargedStatus'] == '1') {
                            /*** If employee discharged ***/
                            $dischargedList[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'];
                            $canPull = false;
                        }

                        if ($canPull == true) {
                            $trCurrencyID = $empData['currencyID'];
                            $com_exchangeRateData = currency_conversionID($trCurrencyID, $com_currencyID);
                            $com_exchangeRate = $com_exchangeRateData['conversion'];

                            foreach ($row as $keyEmp => $rowEmp) {
                                $data[$k]['empID'] = $empID;
                                $data[$k]['accessGroupID'] = $empData['groupID'];
                                $data[$k][$masterColumn] = $masterID;

                                $trAmount = round($rowEmp['transactionAmount'], $empData['DecimalPlaces']);
                                $localAmount = ($trAmount / $com_exchangeRate);

                                $data[$k]['transactionAmount'] = $trAmount;
                                $data[$k]['transactionCurrencyID'] = $trCurrencyID;
                                $data[$k]['transactionCurrency'] = $empData['CurrencyCode'];
                                $data[$k]['transactionExchangeRate'] = 1;
                                $data[$k]['transactionCurrencyDecimalPlaces'] = $empData['DecimalPlaces'];
                                $data[$k]['payRate'] = $rowEmp['payRate'];
                                $data[$k]['payUnit'] = $rowEmp['payUnit'];
                                $data[$k]['description'] = $rowEmp['description'];

                                $data[$k]['companyLocalCurrencyID'] = $com_currencyID;
                                $data[$k]['companyLocalCurrency'] = $com_currency;
                                $data[$k]['companyLocalExchangeRate'] = $com_exchangeRate;
                                $data[$k]['companyLocalCurrencyDecimalPlaces'] = $com_currDPlace;
                                $data[$k]['companyLocalAmount'] = round($localAmount, $com_currDPlace);

                                $data[$k]['companyID'] = $companyID;
                                $data[$k]['companyCode'] = $this->common_data['company_data']['company_code'];
                                $data[$k]['createdPCID'] = $this->common_data['current_pc'];
                                $data[$k]['createdUserID'] = $this->common_data['current_userID'];
                                $data[$k]['createdUserName'] = $this->common_data['current_user'];
                                $data[$k]['createdUserGroup'] = $this->common_data['user_group'];
                                $data[$k]['createdDateTime'] = $current_date;

                                $k++;
                            }
                        }
                    } else {
                        $canPull = false;
                        $notMatchRecords[] = ' &nbsp;&nbsp;- ' . $row[0]['empCodeName'] . ' - ' . $empID;
                    }
                }

                if ($canPull == false) {
                    $msg = '';
                    if (!empty($alreadyPayrollProcessed)) {
                        $msg .= '<strong>Payroll already processed for following employees</strong><br/>';
                        $msg .= implode('<br/>', $alreadyPayrollProcessed);
                    }
                    if (!empty($dischargedList)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        $msg .= '<strong>Following employees already discharged</strong><br/>';
                        $msg .= implode('<br/>', $dischargedList);
                    }
                    if (!empty($notMatchRecords)) {
                        $msg .= ($msg == '') ? '' : '<br/>';
                        //$msg .= '<strong>Following record are not match with the database</strong><br/>(Please verify the salary declaration)<br/>';
                        $msg .= '<strong>Please verify following records with salary declarations</strong><br/>';
                        $msg .= implode('<br/>', $notMatchRecords);
                    }

                    die(json_encode(['m', $msg]));
                }

                if (!empty($data)) {
                    $this->db->trans_start();
                    $this->db->insert_batch($tableName, $data);
                    $this->db->trans_complete();
                    if ($this->db->trans_status() === FALSE) {
                        $this->db->trans_rollback();
                        die(json_encode(['e', 'Error in process']));
                    } else {
                        $this->db->trans_commit();
                        die(json_encode(['s', 'Successfully uploaded']));
                    }
                }
            } else {
                die(json_encode(['e', 'File is empty']));
            }

        } else {
            echo json_encode(['e', 'Please Select CSV File .']);
        }
    }

    public function remove_Single_emp()
    {
        $monthlyAD = $this->input->post('type_m'); // MAC
        $masterID = $this->input->post('updateID');
        $updateCode = $this->input->post('updateCode');
        $masterData = $this->Employee_model->editmonthAddition('MAC', $masterID);

        // if ($masterData['isProcessed'] == 1) {
        //     exit(json_encode(['e', $updateCode . ' is already processed you can not make changes on this.']));
        // }

        if ($masterData['det']['confirmedYN'] == 1) {
            exit(json_encode(['e', $updateCode . ' is already confirmed you can not make changes on this.']));
        }

        echo json_encode($this->Employee_model->remove_Single_emp());
    }

    
    public function delete_monthAllowance()
    {
        echo json_encode($this->Employee_model->delete_monthAllowance('MAC'));
    }

    public function delete_claimDetail()
    {
        echo json_encode($this->Employee_model->delete_claimDetail());
    }

    public function referBack_month_Allowance()
    {
        $this->form_validation->set_rules('referID', 'Refer back ID', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            echo json_encode(array('e', validation_errors()));
        }
        else {
            echo json_encode($this->Employee_model->referBack_month_Allowance());
        }
    }


    public function monthly_allowance_print()
    {
        $id = $this->input->post('id');
        $approval = $this->input->post('approval');
        if(empty($id)){
            $id = $this->uri->segment(4);
        }

        $type = $this->uri->segment(3) ? $this->uri->segment(3) : 'MAC';

        $masterData = $this->Employee_model->editmonthAddition($type, $id); 

        $data['masterData'] = $masterData['master'];
        //$data['details'] = $masterData['details'];
        $data['type'] = $type;
        $data['details'] = $this->Employee_model->empMonth_Allowance_printData($id);

        $isVariablePay = 'N';

        if ($isVariablePay == 'N') {
            $html = $this->load->view('system/hrm/print/monthly_allowance_print', $data, true);
        }

        if ($this->input->post('html')) {
            echo $html;
        } else {

        $this->load->library('pdf');
        $this->pdf->printed($html, 'A4', $data['masterData']['confirmedYN']);
        }
    }


    function fetch_monthly_allowance_approval()
    {
        $date_format_policy = date_format_policy();

        $companyid = $this->common_data['company_data']['company_id'];
        $approvedYN = $this->input->post('approvedYN');
        $empID=current_userID();
        $convertFormat = convert_date_format_sql();

        
        $this->datatables->select("srp_erp_pay_monthlyadditionclaim.monthlyClaimMasterID AS masterID, monthlyClaimCode, srp_erp_pay_monthlyadditionclaim.description AS des, srp_erp_pay_monthlyadditionclaim.documentDate, srp_erp_pay_monthlyadditionclaim.confirmedYN AS confirmedYN, approve.approvedYN AS approvedYN,
            DATE_FORMAT(srp_erp_pay_monthlyadditionclaim.dateFrom, '$convertFormat') AS fromDate, DATE_FORMAT(srp_erp_pay_monthlyadditionclaim.dateTo, '$convertFormat') AS toDate, 'Monthly Addition Claim' AS typeDescription,
            CONCAT(ECode, '/' , Ename2) AS employee, srp_erp_pay_monthlyadditionclaim.confirmedByName, srp_erp_pay_monthlyadditionclaim.currentLevelNo, approve.documentApprovedID AS documentApprovedID, approve.approvalLevelID AS approvalLevelID
        ");
        
        $this->datatables->join('srp_employeesdetails', 'srp_erp_pay_monthlyadditionclaim.empID = srp_employeesdetails.EIdNo');
        $this->datatables->join('srp_erp_employeemanagers ', 'srp_erp_pay_monthlyadditionclaim.empID = srp_erp_employeemanagers.empID');
        $this->datatables->from('srp_erp_pay_monthlyadditionclaim');
        $this->datatables->join('srp_erp_documentapproved AS approve', 'approve.documentSystemCode = srp_erp_pay_monthlyadditionclaim.monthlyClaimMasterID AND approve.approvalLevelID = srp_erp_pay_monthlyadditionclaim.currentLevelNo');
        $this->datatables->join('srp_erp_approvalusers AS ap', 'ap.levelNo = srp_erp_pay_monthlyadditionclaim.currentLevelNo');

        $this->datatables->where('approve.documentID', 'MAC');
        $this->datatables->where('ap.documentID', 'MAC');
        $this->datatables->where('srp_erp_pay_monthlyadditionclaim.companyID', $companyid);
        $this->datatables->where('ap.companyID', $companyid);
        $this->datatables->where('approve.companyID', $companyid);
        $this->datatables->where('srp_erp_pay_monthlyadditionclaim.confirmedYN', 1);
        $this->datatables->where('approve.approvedYN', $approvedYN);

        $this->datatables->where("( ap.employeeID = '{$empID}'
            OR (
                ap.employeeID = -1 
                AND srp_erp_pay_monthlyadditionclaim.empID IN (
                    SELECT
                        emp_manager.empID 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID 
                        AND `emp_manager`.`active` = 1 
                        AND `emp_manager`.`companyID` = '{$companyid}' 
                        AND emp_manager.managerID = '{$empID}' 
                        ) 
                        ) 
                OR (
                ap.employeeID = -2 
                AND srp_erp_pay_monthlyadditionclaim.empID IN (
                    SELECT
                        emp_detail.EIdNo 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_empdepartments AS emp_dep ON emp_detail.EIdNo = emp_dep.EmpID
                        JOIN srp_departmentmaster AS srp_dep ON emp_dep.DepartmentMasterID = srp_dep.DepartmentMasterID 
                        AND `emp_dep`.`isactive` = 1 
                        AND `emp_dep`.Erp_companyID = '{$companyid}' 
                        AND srp_dep.hod_id = '{$empID}' 
                        ) 
                ) 
                OR (
                ap.employeeID = -3 
                        AND srp_erp_pay_monthlyadditionclaim.empID IN (
                    SELECT
                        emp_detail.Eidno 
                    FROM
                        srp_employeesdetails AS emp_detail
                        JOIN srp_erp_employeemanagers AS emp_manager ON emp_detail.EIdNo = emp_manager.empID
                        JOIN ( SELECT * FROM srp_erp_employeemanagers ) AS top_manager ON top_manager.empID = emp_manager.managerID 
                    WHERE
                        emp_manager.active = 1 
                        AND `emp_manager`.`companyID` = '{$companyid}' 
                        AND top_manager.managerID = '{$empID}' 
                        ) 
                ) 
            ) "
        );

        $this->datatables->edit_column('documentDate', '<span>$1</span>', 'convert_date_format(documentDate)');
        $this->datatables->edit_column('startDate', '<center>$1</center>', 'fromDate');
        $this->datatables->edit_column('endDate', '<center>$1</center>', 'toDate');
        $this->datatables->add_column('approved', '$1', 'document_approval_drilldown_allowance_claim(approvedYN,confirmedYN,"MAC",masterID)');
        $this->datatables->add_column('edit', '$1', 'load_MAC_approval_action(masterID,approvedYN,approvalLevelID,documentApprovedID)');
       
        echo $this->datatables->generate();
    }

    function monthlyAllowance_approval()
    {
        $system_code = trim($this->input->post('id') ?? '');
        $level_id = trim($this->input->post('level') ?? '');
        $status = trim($this->input->post('po_status') ?? '');

        if($status==1){
            $approvedYN=checkApproved($system_code,'MAC',$level_id);
            if($approvedYN){
                $this->session->set_flashdata('w', 'Document already approved');
                echo json_encode(FALSE);
            }else{
                $this->db->select('monthlyClaimMasterID');
                $this->db->where('monthlyClaimMasterID', trim($system_code));
                $this->db->where('approvedYN', 2);
                $this->db->from('srp_erp_pay_monthlyadditionclaim');
                $po_approved = $this->db->get()->row_array();
                if(!empty($po_approved)){
                    $this->session->set_flashdata('w', 'Document already rejected');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'Monthly Allowance Claim ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->monthlyAllowance_approval());
                    }
                }
            }
        }else if($status==2){
            $this->db->select('monthlyClaimMasterID');
            $this->db->where('monthlyClaimMasterID', trim($system_code));
            $this->db->where('approvedYN', 2);
            $this->db->where('confirmedYN !=', 1);
            $this->db->from('srp_erp_pay_monthlyadditionclaim');
            $po_approved = $this->db->get()->row_array();
            if(!empty($po_approved)){
                $this->session->set_flashdata('w', 'Document already rejected');
                echo json_encode(FALSE);
            }else{
                $rejectYN=checkApproved($system_code,'MAC',$level_id);
                if(!empty($rejectYN)){
                    $this->session->set_flashdata('w', 'Document already approved');
                    echo json_encode(FALSE);
                }else{
                    $this->form_validation->set_rules('po_status', 'Status', 'trim|required');
                    if($this->input->post('po_status') ==2) {
                        $this->form_validation->set_rules('comments', 'Comments', 'trim|required');
                    }
                    $this->form_validation->set_rules('id', 'Monthly Allowance Claim ID', 'trim|required');
                    $this->form_validation->set_rules('documentApprovedID', 'Document Approved ID', 'trim|required');
                    if ($this->form_validation->run() == FALSE) {
                        $this->session->set_flashdata($msgtype = 'e', validation_errors());
                        echo json_encode(FALSE);
                    } else {
                        echo json_encode($this->Employee_model->monthlyAllowance_approval());
                    }
                }
            }
        }
    }

    function checkStatus(){

        $empID=$this->input->post('empID');

        $this->db->select('MaritialStatus');
        $this->db->from('srp_employeesdetails');
        $this->db->where('EIdNo',$empID);
        $this->db->where('Erp_companyID',current_companyID());
        $query=$this->db->get();
        $status=$query->row();

        echo json_encode($status);
    }

    function updateEmpImage(){

        echo json_encode($this->Employee_model->updateEmpImage());
    }

    function saveAccommodation() {
        $this->form_validation->set_rules('accommodation_type', 'Accommodation', 'trim|required');
        
        if ($this->form_validation->run() == FALSE) {
            $response = array('status' => 'error', 'message' => validation_errors());
            echo json_encode($response);
        } else {
            $result = $this->Employee_model->saveAccommodation();
            if ($result) {
                $response = array('status' => 'success', 'message' => 'Accommodation saved successfully.');
            } else {
                $response = array('status' => 'error', 'message' => 'An error occurred while saving the accommodation.');
            }
            echo json_encode($response);
        }
    }

    function saveEmpAccommodation() {
 
        $this->form_validation->set_rules('accommodation_emp_type', 'Accommodation', 'trim|required');
        
        if ($this->form_validation->run() == FALSE) {
            $response = array('status' => 'error', 'message' => validation_errors());
            echo json_encode($response);
        } else {
            $result = $this->Employee_model->saveEmpAccommodation();
            if ($result) {
                $response = array('status' => 'success', 'message' => 'Accommodation saved successfully.');
            } else {
                $response = array('status' => 'error', 'message' => 'An error occurred while saving the accommodation.');
            }
            echo json_encode($response);
        }
    }

    function deleteEmpAccommodation()
    {
        $accID = $this->input->post('accID');

        $this->db->trans_start();

        $this->db->delete('srp_erp_employee_accomadation', ['empAccID' => $accID]);

        $this->db->trans_complete();

        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Employee accommodation deleted failed']);
        } else {
            echo json_encode(['s', 'Employee accommodation deleted successfully.']);
        }
    }

    function empAccommodationView(){

        $companyID=current_companyID();
        $empID=current_userID();

        $empaccdata = $this->db->query("SELECT empACC.*, acc.description, empTB.Ename2
                               FROM srp_erp_employee_accomadation empACC
                               JOIN srp_erp_accomadationmaster acc ON empACC.accomadationID = acc.id
                               JOIN srp_employeesdetails empTB ON empTB.EIdNo = empACC.empID
                               WHERE empACC.companyID = {$companyID} AND empID={$empID}");
        $data=$empaccdata->result_array();
         
         echo json_encode($data);
    }

    function getEmpaccommodation(){

        $empID=current_userID();
        $companyID=current_companyID();
        $empAccomID=$this->input->post('id');
        $empaccdata = $this->db->query("SELECT * FROM srp_erp_employee_accomadation WHERE companyID = {$companyID} AND empAccID={$empAccomID} AND empID={$empID}");
        $data=$empaccdata->row_array();

         echo json_encode($data);
    }

    public function getaccomodation() {

        $com = current_companyID();
        $this->db->select("*");
        $this->db->from('srp_erp_accomadationmaster');
        $this->db->where('srp_erp_accomadationmaster.companyID', $com);
        $query = $this->db->get();
        $result = $query->result_array();
        echo json_encode($result);
    }
    
    public function generatePR()
    {
        $requstid = $this->input->post('requestid');

        $this->db->select('*');
        $this->db->where('companyID',$this->common_data['company_data']['company_id']);
        $this->db->from('srp_erp_itemmaster');
        $this->db->where('defaultYN',1);
        $item = $this->db->get();
        $item_result = $item->row_array();
       
        if($item_result)
        {
            $this->db->select('tr.*, ed.segmentID, td.currencyID,td.amount,ed.Ename2 AS empName, tr.requestDate');
            $this->db->from('srp_erp_travel_request tr');
            $this->db->join('srp_employeesdetails ed', 'tr.empID = ed.EIdNo');
            $this->db->join('srp_erp_travel_request_details td', 'tr.id = td.travelRequestID', 'left');
            $this->db->where('tr.id', $requstid);
            $this->db->group_by('td.currencyID');
        
            $query = $this->db->get();
            $results = $query->result_array();
            $success = true;
        
            foreach ($results as $result) {
                $this->db->select('CurrencyCode');
                $this->db->where('currencyID',$result['currencyID']);
                $this->db->from('srp_erp_currencymaster');
                $code_query = $this->db->get();
                $code_result = $code_query->row_array();

                $this->db->select('segmentCode');
                $this->db->where('segmentID',$result['segmentID']);
                $this->db->from('srp_erp_segment');
                $segment_query = $this->db->get();
                $segment_result = $segment_query->row_array();

                $data = [
                    'documentID' => 'PRQ',
                    'linkeddocumentID'=>$result['documentID'],
                    'linkedDocumentmasterID'=>$requstid,
                    'requestedEmpID'=>$result['requestedByEmpID'],
                    'requestedByName'=>$result['empName'],
                    'narration'=>'Created from Travel Request',
                    'projectExchangeRate'=>1,
                    'segmentID' => $result['segmentID'],
                    'segmentCode' => $segment_result['segmentCode'],
                    'transactionCurrencyID' => $result['currencyID'],
                    'transactionCurrency' => $code_result['CurrencyCode'],
                    'documentDate' =>current_date(),
                    'expectedDeliveryDate' => current_date(),
                    'purchaseRequestCode' => $this->sequence->sequence_generator('PRQ'),
                    'companyID' => $this->common_data['company_data']['company_id'],
                    'companyCode' => $this->common_data['company_data']['company_code'],
                    'companyLocalCurrencyID' => $this->common_data['company_data']['company_default_currencyID'],
                    'companyLocalCurrency' => $this->common_data['company_data']['company_default_currency']
                ];
        
                $default_currency = currency_conversionID($result['currencyID'], $data['companyLocalCurrencyID']);
                $data['companyLocalExchangeRate'] = $default_currency['conversion'];
                $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        
                $data['companyReportingCurrency'] = $this->common_data['company_data']['company_reporting_currency'];
                $data['companyReportingCurrencyID'] = $this->common_data['company_data']['company_reporting_currencyID'];
                $reporting_currency = currency_conversionID($result['currencyID'], $data['companyReportingCurrencyID']);
                $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
                $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        
                $data['createdUserGroup'] = $this->common_data['user_group'];
                $data['createdPCID'] = $this->common_data['current_pc'];
                $data['createdUserID'] = $this->common_data['current_userID'];
                $data['createdUserName'] = $this->common_data['current_user'];
                $data['createdDateTime'] = $this->common_data['current_date'];
        
                $this->db->insert('srp_erp_purchaserequestmaster', $data);
                $lastID = $this->db->insert_id();

            
                $detail=[
                    'purchaseRequestID'=>$lastID,
                    'requestedQty'=>1,
                    'itemAutoID'=>$item_result['itemAutoID'],
                    'itemSystemCode'=>$item_result['itemSystemCode'],
                    'itemDescription'=>'Created from Travel Request',
                    'itemType'=>$item_result['mainCategory'],
                    'itemType'=>$item_result['mainCategory'],
                    'defaultUOM' => $item_result['defaultUnitOfMeasure'],
                    'defaultUOMID' => $item_result['defaultUnitOfMeasureID'],
                    'unitOfMeasure' => $item_result['defaultUnitOfMeasure'],
                    'unitOfMeasureID' => $item_result['defaultUnitOfMeasureID'],
                    'expectedDeliveryDate'=>current_date(),
                    'conversionRateUOM' => conversionRateUOM_id($item_result['defaultUnitOfMeasureID'], $item_result['defaultUnitOfMeasureID']),
                    'totalAmount'=>$result['amount'],
                ];
                
                $detail['companyID'] = $this->common_data['company_data']['company_id'];
                $detail['companyCode'] = $this->common_data['company_data']['company_code'];
                $detail['createdUserGroup'] = $this->common_data['user_group'];
                $detail['createdPCID'] = $this->common_data['current_pc'];
                $detail['createdUserID'] = $this->common_data['current_userID'];
                $detail['createdUserName'] = $this->common_data['current_user'];
                $detail['createdDateTime'] = $this->common_data['current_date'];

                $status = $this->db->insert('srp_erp_purchaserequestdetails', $detail);
               
                if (!$status) {
                    $success = false;
                    break;
                }
            }
        
            $this->db->trans_complete();
        
            if ($success) 
            {
                echo json_encode(['status' => 's', 'message' => 'Purchase Request generated Successfully.']);
            } 
            else 
            {
                echo json_encode(['status' => 'e', 'message' => 'Error in generating Purchase Request.']);
            }
        }
        else
        {
            echo json_encode(['status' => 'e', 'message' => 'DefaultYN is missing for this company']);
        }
    
       
    }

    function save_allowance(){
        echo json_encode($this->Employee_model->save_allowance());
    }

    public function fetch_grade_allowance()
    {
        $gradeID = $this->input->post('gradeID');
        $companyID = current_companyID();
    
        $details = $this->db->query("SELECT declarationTypeID, isActive,maxAllowanceAmount
                                       FROM srp_erp_employeeclaimassign
                                       WHERE gradeID={$gradeID} AND companyID = {$companyID}");
        $result = $details->result_array();

        // $isActive = false;
        // foreach ($result as $val) {
        //     if ($val['isActive'] == 1) {
        //         $isActive = true;
        //         break;
        //     }
        // }
        // $data['isActive']=$isActive;

        $data['maxAllowanceAmount']= array_column($result, 'maxAllowanceAmount');
        $data['isActive']= array_column($result, 'isActive');
        $data['declarationTypeIDs'] = array_column($result, 'declarationTypeID');
    
        echo json_encode($data);
    }

    function getLeaveByEmpID(){
        $empID = $this->input->post('id');
        $companyID = current_companyID(); 

        $query = $this->db->query( "SELECT srp_erp_leavemaster.leaveMasterID,srp_erp_leavemaster.documentCode FROM srp_erp_leavemaster WHERE empID = $empID AND companyID = $companyID AND approvedYN = 1" )->result_array();
        echo json_encode( $query);
    }  

    function getProject(){
        $typeID=$this->input->post('typeID');
        $companyID = current_companyID();

        if($typeID==1){
            $query = $this->db->query("SELECT * FROM srp_erp_jobsmaster WHERE companyID = $companyID")->result_array();
        }
        else if($typeID==2){
            $query = $this->db->query("SELECT * FROM srp_erp_mfq_job WHERE companyID = $companyID")->result_array();
        }
        else{
            $query ='';
        }
        echo json_encode( $query);
        
    }
    
    function isAnnualLeave(){
        $leaveID = $this->input->post('id');
        
        $this->db->select('isAnnualLeave')
                 ->from('srp_erp_leavetype')
                 ->where('leaveTypeID', $leaveID)
                 ->where('companyID', current_companyID());
        $query = $this->db->get();
        $isAnnual = $query->row_array();
        echo json_encode(['isAnnualLeave' => $isAnnual['isAnnualLeave']]);
    }

    function getTravelType(){
        $this->db->select('*, scr.systemAccountCode')
                 ->from('srp_erp_travel_type')
                 ->where('srp_erp_travel_type.companyID', current_companyID())
                 ->join('srp_erp_chartofaccounts AS scr', 'scr.GLAutoID = srp_erp_travel_type.glAutoID','left');
        $query=$this->db->get();
        $travelTypes=$query->result_array();

        echo json_encode($travelTypes);
        
    }

    function saveTravelType(){
       
        $travelType=$this->input->post('travelType');
        $glcode=$this->input->post('glcode');
        
        $data=[
            'tripType'=> $travelType,
            'glAutoID'=>$glcode,
            'companyID'=>current_companyID(),
            'createdPCID'=> $this->common_data['current_pc'],
            'createdUserID'=>$this->common_data['current_userID'],
            'createdDateTime'=> $this->common_data['current_date'],
            'createdUserName'=>$this->common_data['current_user'],
            'timestamp'=>current_date()
        ];

        $inserted = $this->db->insert('srp_erp_travel_type', $data);

        if ($inserted) {
            echo json_encode(['s', 'Travel type created successfully']);
        } else {
            echo json_encode(['e', 'Failed to create travel type']);
        }
       
    }

    function deleteTravel(){

        $id=$this->input->post('id');
        $this->db->trans_start();

        $this->db->delete('srp_erp_travel_type', ['id' => $id]);

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            echo json_encode(['e', 'Error in travel type deleted process']);
        } else {
            echo json_encode(['s', 'Travel type deleted successfully.']);
        }
    }

    /**personal action : almansoori */
    function add_new_allowanse_mse(){ 
        echo json_encode($this->Employee_model->add_new_allowanse_mse());
    }

    /**monthly allowance claim */
    function update_monthly_allowance_header(){ 
        echo json_encode($this->Employee_model->update_monthly_allowance_header());
    }

    function getTravelRequestMoreDetails(){
        echo json_encode($this->Employee_model->getTravelRequestMoreDetails());
    }

    function saveTrMoreDetails(){
        echo json_encode($this->Employee_model->saveTrMoreDetails());
    }
    
}