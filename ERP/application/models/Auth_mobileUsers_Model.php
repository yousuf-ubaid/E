<?php

use Restserver\Libraries\REST_Controller;

class Auth_mobileUsers_Model extends ERP_Model
{

    function get_users()
    {
        $q = "SELECT UserName,`Password` FROM `srp_employeesdetails`";
        $results = $this->db->query($q)->result_array();
        return $results;
    }

    function get_userID($username, $pwd)
    {

        $this->db->select('EIdNo,Erp_companyID,ECode,t2.company_code,Ename1');
        $this->db->from('srp_employeesdetails AS t1');
        $this->db->join('srp_erp_company AS t2', 't2.company_id = t1.Erp_companyID');
        $this->db->where('UserName', $username);
        $this->db->where('Password', $pwd);
        return $this->db->get()->row_array();
    }

    function get_emp_designation($id)
    {

        $this->db->select('DesDescription as description');
        $this->db->from('srp_employeedesignation AS t1');
        $this->db->join('srp_designation AS t2', 't2.DesignationID = t1.DesignationID');
        $this->db->where('isActive', 1);
        $this->db->where('EmpID', $id);
        return $this->db->get()->row_array();

    }

    function get_emplist($reportmanagerid)
    {
        $this->db->select('t1.empID');
        $this->db->from('srp_erp_employeemanagers  AS t1');
        $this->db->where('active', 1);
        $this->db->where('managerID', $reportmanagerid);
        return $this->db->get()->result_array();
    }
  

    function get_emp_details($id)
    {

        $this->db->select('t2.company_id as companyId, t2.company_name as companyName, t2.company_city as companyCity, t2.company_country  as companyCountry ');
        $this->db->from('srp_employeesdetails AS t1');
        $this->db->join('srp_erp_company AS t2', 't2.company_id = t1.Erp_companyID');
        $this->db->where('EIdNo', $id);
        return $this->db->get()->row_array();

    }

    function save_deviceInfo($id, $devID)
    {
        $q = "SELECT count(*) as `rec` from `srp_devices` WHERE emp_id ='" . $id . "' AND player_id='" . $devID . "' ";
        $results = $this->db->query($q)->row_array();
        if ($results['rec'] == '0') {
            $data = array(
                'emp_id' => $id,
                'player_id' => $devID
            );
            $this->db->insert('srp_devices', $data);
        }
    }

    function get_all_approval_query($eid, $comp_id, $limit=null){
        $query = "SELECT `t2`.`document`,
                        `srp_erp_documentapproved`.`documentID`,
                        `srp_erp_itemissuemaster`.`itemIssueAutoID` AS `itemIssueAutoID`,
                        `documentCode`,
                        `srp_erp_itemissuemaster`.`employeeName` AS `Ename1`,
                        `srp_erp_documentapproved`.`approvedYN` AS `approvedYN`,
                        `approvalLevelID`,
                        `documentApprovedID`,
                        `table_name`,
                        `table_unique_field_name`,
                        `srp_erp_documentapproved`.`documentSystemCode`
                    FROM
                        `srp_erp_itemissuemaster`
                    LEFT JOIN (
                        SELECT
                            SUM(qtyIssued) AS qtyIssued,
                            itemIssueAutoID
                        FROM
                            srp_erp_itemissuedetails
                        GROUP BY
                            itemIssueAutoID
                    ) det ON `det`.`itemIssueAutoID` = `srp_erp_itemissuemaster`.`itemIssueAutoID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_itemissuemaster`.`itemIssueAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_itemissuemaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_itemissuemaster`.`currentLevelNo`
                    LEFT JOIN `srp_erp_documentcodes` AS `t2` ON `srp_erp_documentapproved`.`documentID` = `t2`.`documentID`
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'MI'
                    AND `srp_erp_approvalusers`.`documentID` = 'MI'
                    AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                    AND `srp_erp_itemissuemaster`.`companyID` = ".$comp_id."
                    AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'

     UNION
                    
                  SELECT
                            'Invoice' as document,
                            `srp_erp_documentapproved`.`documentID`,
                            srp_erp_customerinvoicemaster.invoiceAutoID,
                            invoiceCode as documentID , 
                            customerName as Ename1,
                            srp_erp_documentapproved.approvedYN AS approvedYN,
                            approvalLevelID,
                            documentApprovedID,
                             `table_name`,
                             `table_unique_field_name`,
                             `srp_erp_documentapproved`.`documentSystemCode`

                        FROM
                            `srp_erp_customerinvoicemaster`
                        LEFT JOIN (
                            SELECT
                                SUM(transactionAmount) AS transactionAmount,
                                invoiceAutoID
                            FROM
                                srp_erp_customerinvoicedetails
                            GROUP BY
                                invoiceAutoID
                        ) det ON (
                            `det`.`invoiceAutoID` = srp_erp_customerinvoicemaster.invoiceAutoID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerinvoicemaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerinvoicemaster`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'CINV'
                        AND `srp_erp_approvalusers`.`documentID` = 'CINV'
                        AND `srp_erp_documentapproved`.`companyID` = ".$comp_id."
                        AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                        AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'

     UNION 
                SELECT
                            'Purchase Order' AS document,
                            'PO' AS documentID,
                            srp_erp_purchaseordermaster.purchaseOrderID,
                            purchaseOrderCode,
                            supplierName AS Ename1,
                            narration,
                            approvalLevelID,
                           `srp_erp_documentapproved`.documentApprovedID,
                            `table_name`,
                            `table_unique_field_name`,
                            `srp_erp_documentapproved`.`documentSystemCode`
                          
                        FROM
                            `srp_erp_purchaseordermaster`
                        LEFT JOIN (
                            SELECT
                                SUM(totalAmount) AS transactionAmount,
                                purchaseOrderID
                            FROM
                                srp_erp_purchaseorderdetails
                            GROUP BY
                                purchaseOrderID
                        ) det ON (
                            `det`.`purchaseOrderID` = srp_erp_purchaseordermaster.purchaseOrderID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaseordermaster`.`purchaseOrderID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'PO'
                        AND `srp_erp_approvalusers`.`documentID` = 'PO'
                        AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                        AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                        AND `srp_erp_purchaseordermaster`.`companyID` = ".$comp_id."
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        
     UNION 
                       SELECT
                                'Payment Voucher' AS document,
                                'PV' ,
                                srp_erp_paymentVouchermaster.payVoucherAutoId AS PayVoucherAutoId,
                                PVcode AS Code,
                                partyName,
                                PVNarration AS  Narration,
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`

                            FROM
                                `srp_erp_paymentvouchermaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    payVoucherAutoId
                                FROM
                                    srp_erp_paymentvoucherdetail
                                GROUP BY
                                    payVoucherAutoId
                            ) det ON (
                                `det`.`payVoucherAutoId` = srp_erp_paymentVouchermaster.payVoucherAutoId
                            )
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    payVoucherAutoId
                                FROM
                                    srp_erp_paymentvouchertaxdetails
                                GROUP BY
                                    payVoucherAutoId
                            ) addondet ON (
                                `addondet`.`payVoucherAutoId` = srp_erp_paymentVouchermaster.payVoucherAutoId
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_paymentvouchermaster`.`PayVoucherAutoId`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'PV'
                            AND `srp_erp_approvalusers`.`documentID` = 'PV'
                            AND `pvType` <> 'SC'
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_paymentvouchermaster`.`companyID` = ".$comp_id."
     UNION 
                        SELECT
                              'Goods received Voucher',
                              'GRV',
                            `srp_erp_grvmaster`.`grvAutoID` AS `grvAutoID`,
                            `grvPrimaryCode`,
                             supplierName,
                            `srp_erp_grvmaster`.`companyCode`,
                            approvalLevelID,
                            `documentApprovedID`,
                            `table_name`,
                            `table_unique_field_name`,
                            `srp_erp_documentapproved`.`documentSystemCode`
                            
                        FROM
                            `srp_erp_grvmaster`
                        LEFT JOIN (
                            SELECT
                                SUM(receivedTotalAmount) AS receivedTotalAmount,
                                grvAutoID
                            FROM
                                srp_erp_grvdetails
                            GROUP BY
                                grvAutoID
                        ) det ON (
                            `det`.`grvAutoID` = srp_erp_grvmaster.grvAutoID
                        )
                        LEFT JOIN (
                            SELECT
                                SUM(total_amount) AS total_amount,
                                grvAutoID
                            FROM
                                srp_erp_grv_addon
                            GROUP BY
                                grvAutoID
                        ) addondet ON (
                            `addondet`.`grvAutoID` = srp_erp_grvmaster.grvAutoID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_grvmaster`.`grvAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_grvmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_grvmaster`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_grvmaster`.`companyID` = ".$comp_id."
                        AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
     UNION
                        SELECT
                                'Stock transfer',
                                'ST',
                                stockTransferAutoID,
                                stockTransferCode,
                                form_wareHouseDescription,
                                to_wareHouseCode,
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_stocktransfermaster`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stocktransfermaster`.`stockTransferAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'ST'
                            AND `srp_erp_approvalusers`.`documentID` = 'ST'
                            AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_stocktransfermaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            
     UNION 
                            SELECT
                                'Stock Adjustment',
                                'SA',
                                stockAdjustmentAutoID,
                                stockAdjustmentCode,
                                wareHouseDescription,
                                confirmedYN,
                                approvalLevelID,
                                documentApprovedID,
                                 `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_stockadjustmentmaster`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockadjustmentmaster`.`stockAdjustmentAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SA'
                            AND `srp_erp_approvalusers`.`documentID` = 'SA'
                            AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_stockadjustmentmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            
     UNION 
                            SELECT
                                'Purchase Return',
                                'SR',
                                stockReturnAutoID,
                                stockReturnCode,  
                                wareHouseDescription,
                                confirmedYN, 
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_stockreturnmaster`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SR'
                            AND `srp_erp_approvalusers`.`documentID` = 'SR'
                            AND `srp_erp_approvalusers`.`employeeID` =  ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_stockreturnmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
     UNION 
      
                        SELECT
                                'Salary Declaration',
                                'SD',
                                salarydeclarationMasterID AS masterID,
                                srp_erp_salarydeclarationmaster.documentSystemCode AS docCode,
                                Description,
                                transactionCurrency,
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_salarydeclarationmaster`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_salarydeclarationmaster`.`salarydeclarationMasterID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SD'
                            AND `srp_erp_approvalusers`.`documentID` = 'SD'
                            AND `srp_erp_approvalusers`.`employeeID` =  ".$eid."
                            AND `srp_erp_salarydeclarationmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` =  ".$comp_id."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            
     UNION
                            SELECT
                                    'Journal Entry',
                                    'JV',
                                    `JVMasterAutoId`,
                                    `JVcode`,
                                     JVcode,
                                    `confirmedYN`,
                                    `approvalLevelID`,
                                    `documentApprovedID`,
                                    `table_name`,
                                    `table_unique_field_name`,
                                    `srp_erp_documentapproved`.`documentSystemCode`
                                    
                                
                                FROM
                                    `srp_erp_jvmaster`
                                JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_jvmaster`.`JVMasterAutoId`
                                AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_jvmaster`.`currentLevelNo`
                                JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_jvmaster`.`currentLevelNo`
                                WHERE
                                    `srp_erp_approvalusers`.`employeeID` =  ".$eid."
                                AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                                AND `srp_erp_jvmaster`.`companyID` = ".$comp_id."
                                AND `srp_erp_documentapproved`.`documentID` = 'JV'
                                AND `srp_erp_approvalusers`.`documentID` = 'JV'
                                AND `srp_erp_documentapproved`.`approvedYN` = '0'
     UNION 
                           SELECT
                                'Purchase request',
                                'PRQ',
                                srp_erp_purchaserequestmaster.purchaseRequestID AS purchaseRequestID,
                                purchaseRequestCode,
                                requestedByName,
                                confirmedYN,
                                 approvalLevelID,
                                 documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_purchaserequestmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(totalAmount) AS transactionAmount,
                                    purchaseRequestID
                                FROM
                                    srp_erp_purchaserequestdetails
                                GROUP BY
                                    purchaseRequestID
                            ) det ON (
                                `det`.`purchaseRequestID` = srp_erp_purchaserequestmaster.purchaseRequestID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaserequestmaster`.`purchaseRequestID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'PRQ'
                            AND `srp_erp_approvalusers`.`documentID` = 'PRQ'
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`employeeID` =  ".$eid."
                            AND `srp_erp_purchaserequestmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'     
     UNION
                    SELECT
                                'Debit note',
                                'DN',
                                `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` AS `debitNoteMasterAutoID`,
                                `debitNoteCode`,
                                `supplierName`,
                                `confirmedYN`,
                                `approvalLevelID`,
                                `documentApprovedID`,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                                
                            FROM
                                `srp_erp_debitnotemaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    debitNoteMasterAutoID
                                FROM
                                    srp_erp_debitnotedetail
                                GROUP BY
                                    debitNoteMasterAutoID
                            ) det ON (
                                `det`.`debitNoteMasterAutoID` = srp_erp_debitnotemaster.debitNoteMasterAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_debitnotemaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_debitnotemaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_debitnotemaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            AND `srp_erp_documentapproved`.`documentID` = 'DN'
                            AND `srp_erp_approvalusers`.`documentID` = 'DN'
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
     UNION
                        SELECT
                                'Credit Note',
                                'CN',
                                `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AS `creditNoteMasterAutoID`,
                                `creditNoteCode`,
                                `customerName`,
                                `confirmedYN`,
                                `approvalLevelID`,
                                `documentApprovedID`,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                               
                            FROM
                                `srp_erp_creditnotemaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    creditNoteMasterAutoID
                                FROM
                                    srp_erp_creditnotedetail
                                GROUP BY
                                    creditNoteMasterAutoID
                            ) det ON (
                                `det`.`creditNoteMasterAutoID` = srp_erp_creditnotemaster.creditNoteMasterAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_creditnotemaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_creditnotemaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_creditnotemaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            AND `srp_erp_documentapproved`.`documentID` = 'CN'
                            AND `srp_erp_approvalusers`.`documentID` = 'CN'
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            
     UNION 
                            SELECT
                                'Receipt Voucher',
                                'RV',
                                srp_erp_customerreceiptmaster.receiptVoucherAutoId AS receiptVoucherAutoId,
                                RVcode,
                                customerName,
                                confirmedYN,
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                               
                               
                            FROM
                                `srp_erp_customerreceiptmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    receiptVoucherAutoId
                                FROM
                                    srp_erp_customerreceiptdetail
                                GROUP BY
                                    receiptVoucherAutoId
                            ) det ON (
                                `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'RV'
                            AND `srp_erp_approvalusers`.`documentID` = 'RV'
                            AND `srp_erp_approvalusers`.`employeeID` =  ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_approvalusers`.`companyID` =  ".$comp_id."
                            AND `srp_erp_customerreceiptmaster`.`companyID` =  ".$comp_id."
     UNION 
                          SELECT
                                'Material Receipt Note' as document,
                                'MRN' as documentID,
                                srp_erp_materialreceiptmaster.mrnAutoID AS mrnAutoID,
                                mrnCode,
                                srp_erp_materialreceiptmaster.employeeName AS employeeName,
                                confirmedYN,
                                approvalLevelID,
                                documentApprovedID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                                

                            FROM
                                `srp_erp_materialreceiptmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(qtyReceived) AS qtyReceived,
                                    mrnAutoID
                                FROM
                                    srp_erp_materialreceiptdetails
                                GROUP BY
                                    mrnAutoID
                            ) det ON (
                                `det`.`mrnAutoID` = srp_erp_materialreceiptmaster.mrnAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_materialreceiptmaster`.`mrnAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'MRN'
                            AND `srp_erp_approvalusers`.`documentID` = 'MRN'
                            AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_materialreceiptmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            
     UNION
                            SELECT
                                `contractType`,
                                `srp_erp_contractmaster`.`documentID` AS `document`,
                                `srp_erp_contractmaster`.`contractAutoID` AS `contractAutoID`,
                                `contractCode`,
                                `customerName`,
                                `confirmedYN`,
                                 `approvalLevelID`,
                                `documentApprovedID`,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                                
                            FROM
                                `srp_erp_contractmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    contractAutoID
                                FROM
                                    srp_erp_contractdetails
                                GROUP BY
                                    contractAutoID
                            ) det ON (
                                `det`.`contractAutoID` = srp_erp_contractmaster.contractAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_contractmaster`.`contractAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_contractmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_contractmaster`.`currentLevelNo`
                            WHERE
                                `srp_erp_documentapproved`.`documentID` IN ('QUT', 'CNT', 'SO')
                            AND `srp_erp_approvalusers`.`documentID` IN ('QUT', 'CNT', 'SO')
                            AND `srp_erp_approvalusers`.`employeeID` = ".$eid."
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_contractmaster`.`companyID` = ".$comp_id."
                            AND `srp_erp_approvalusers`.`companyID` = ".$comp_id."
                            GROUP BY
                                `srp_erp_documentapproved`.`documentSystemCode`
                    "
        ;
        return $query;
    }

    function get_approvals($eid, $comp_id, $limit=null)
    {
        $this->db->select('t1.documentApprovedID,t1.documentCode,t1.documentDate,approvalLevelID,t1.documentID,table_name,table_unique_field_name,t1.documentSystemCode,t2.document,t2.icon,t3.Ename1');
        $this->db->from('srp_erp_documentapproved  AS t1');
        $this->db->join('srp_erp_documentcodes AS t2', 't1.documentID = t2.documentID', 'LEFT');
        $this->db->join('srp_employeesdetails AS t3', 't1.docConfirmedByEmpID = t3.EIdNo', 'LEFT');
        $this->db->where('companyID', $comp_id);
        $this->db->where('approvedEmpID', $eid);
        $this->db->where('approvedYN', '0');
        $this->db->where('isApprovalDocument', '1');
        $this->db->limit($limit);
        return $this->db->get()->result_array();
    }

    function count_approvals($eid, $comp_id)
    {

        $q = "SELECT count(documentApprovedID) as cnt FROM srp_erp_documentapproved t1 left join srp_erp_documentcodes t2 ON
		t1.documentID = t2.documentID
		WHERE companyID =$comp_id AND approvedYN = '0' AND approvedEmpID = $eid AND t2.isApprovalDocument='1' ";
        $results = $this->db->query($q)->row_array();
        return $results;
    }

    function get_approvalDoc_content($documentCode, $table, $feild, $fvalue)
    {
        $columns = "*";
        $joins = "";
        //$where = "";
        switch ($documentCode) {
            case 'LA':
                $columns = "startDate AS `Start Date`,endDate AS `End Date`,days AS `Days`,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                break;

            case 'PO':
                $columns = "supplierName AS `Supplier Name`,CONCAT(transactionAmount,transactionCurrency) AS `TR Amount`,segmentCode,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                break;

            case 'DN':

                $columns = "debitNoteDate AS `DN Date`,debitNoteCode as `DN Code`,supplierName AS `Supplier Name`,
                                    CONCAT(SUM(srp_erp_debitnotedetail.transactionAmount),' ',transactionCurrency )AS `TR Amount`,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_debitnotedetail ON srp_erp_debitnotedetail.debitNoteMasterAutoID=srp_erp_debitnotemaster.debitNoteMasterAutoID";
                break;

            case 'PV':
                $columns = "PVcode,PVdate,PVNarration, CONCAT(SUM(srp_erp_paymentvoucherdetail.transactionAmount),' ',srp_erp_paymentvoucherdetail.transactionCurrency )AS `TR Amount`,confirmedByName AS `Confirmed By`,confirmedDate as `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_paymentvoucherdetail ON srp_erp_paymentvoucherdetail.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId";
                break;

            case 'CN':

                $columns = "creditNoteDate AS `CN Date`,creditNoteCode as `CN Code`,
                                    CONCAT(SUM(srp_erp_creditnotedetail.transactionAmount),' ',transactionCurrency )AS `TR Amount`,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_creditnotedetail ON srp_erp_creditnotedetail.creditNoteMasterAutoID=srp_erp_creditnotemaster.creditNoteMasterAutoID";
                break;

            case 'SA':
                $columns = "stockAdjustmentDate as `SA Date`,stockAdjustmentCode AS  `SA Code`,wareHouseLocation as `WH Location`,comments AS `Comments`,SUM(srp_erp_stockadjustmentdetails.totalValue) as `Total value` ,
                                   confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_stockadjustmentdetails ON  srp_erp_stockadjustmentdetails.stockAdjustmentAutoID = srp_erp_stockadjustmentmaster.stockAdjustmentAutoID";
                break;

            case 'RV':
                $columns = "RVcode as `Code`,RVbank as `Bank`,RVbankAccount as `Account No`,RVbankBranch as `Branch`,customerName as `Customer Name`,
                                  SUM(srp_erp_customerreceiptdetail.transactionAmount) AS `TR Amount`,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_customerreceiptdetail ON srp_erp_customerreceiptmaster.receiptVoucherAutoId = srp_erp_customerreceiptdetail.receiptVoucherAutoId";
                break;
            case 'JV':
                $columns = "JVdate AS  `Date`,JVType AS `Type`,JVNarration AS `Narration`";
                break;

            case 'CINV':
                $columns = "invoiceCode AS `Invoice Code`,invoiceDate AS `Date`,invoicebank AS `Bank`,customerName `Customer name`,
                           CONCAT( SUM(t2.transactionAmount)+SUM(t3.transactionAmount),' ',srp_erp_customerinvoicemaster.transactionCurrency) as `Amount`, confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_customerinvoicedetails t2 ON t2.invoiceAutoID =srp_erp_customerinvoicemaster.invoiceAutoID
                          LEFT JOIN  srp_erp_customerinvoicetaxdetails t3 ON t3.invoiceAutoID =t2.invoiceAutoID ";
                break;

            case 'BSI':
                $columns = "invoiceType AS `Invoice Type`,supplierName AS `Supplier Name`,invoicebank AS `Bank`,customerName `Customer name`,
                         CONCAT( SUM(t2.transactionAmount)+SUM(t3.transactionAmount),' ',srp_erp_customerinvoicemaster.transactionCurrency) as `Amount`";
                $joins = "LEFT JOIN srp_erp_customerinvoicedetails t2 ON t2.invoiceAutoID =srp_erp_customerinvoicemaster.invoiceAutoID
                          LEFT JOIN  srp_erp_customerinvoicetaxdetails t3 ON t3.invoiceAutoID =t2.invoiceAutoID ";
                break;

            case 'QUT':
                $columns = "contractType AS `Contract Type`,contractDate AS `Contract Date`,contractCode AS `Code`,contractNarration AS `Narration`,customerName AS `Customer`,
                        CONCAT(SUM(srp_erp_contractdetails.transactionAmount),' ',srp_erp_contractmaster.transactionCurrency) AS `Amount`,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`,
                        confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_contractdetails ON srp_erp_contractdetails.contractAutoID = srp_erp_contractmaster.contractAutoID ";
                break;
            case 'GRV':
                $columns = "grvDate AS `Date`,grvType AS `Type`,grvNarration AS `Narration`,wareHouseDescription AS `Warehouse`,supplierName AS `Supplier`
                      ,CONCAT(SUM(t2.fullTotalAmount),' ',transactionCurrency) AS Amount,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date` ";
                $joins = "LEFT JOIN srp_erp_grvdetails t2 ON t2.grvAutoID=srp_erp_grvmaster.grvAutoID ";
                break;
            case 'CNT':
                $columns = "contractType AS `Type`,contractCode AS `Contract code`,contractDate AS `Date`,contractExpDate AS  `Exp date`,contractNarration AS `Narration`,
                     CONCAT(SUM(t2.transactionAmount),' ',transactionCurrency) AS Amount,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_contractdetails t2 ON t2.contractAutoID=srp_erp_contractmaster.contractAutoID ";
                break;
            case 'SR':
                $columns = "stockReturnCode AS `ST code`,returnDate AS `Date`,wareHouseDescription AS `Warehouse`,supplierName AS `Supplier`,confirmedByName as `Confirmed By`,confirmedDate AS  `Confirmed Date`";

                break;

            case 'FA':
                $columns = "faCode,assetDescription,comments,usedBy,costGLCode AS `Cost GLCode`,CONCAT(transactionAmount,' ',transactionCurrency)AS `Amount`,confirmedByName AS `Confirmed by`,confirmedDate AS `Confirmed Date`";
                break;

            case 'BT':
                $columns = "bankTransferCode AS 'BT Code',transferedAmount AS `Amount`,exchangeRate AS `Exchange Rate`,transferedDate AS `date`,narration AS `Narration`,confirmedByName AS `Confirmed by`,confirmedDate AS `Confirmed Date`";
                break;
            case 'FAD';
                $columns = "depCode AS `Code`,depDate AS `Date`,depType AS `Type`,CONCAT(transactionAmount,' ',transactionCurrency) AS `Amount`,confirmedByName AS `Confirmed by`,confirmedDate AS `Confirmed Date`";
                break;
            case 'BRC':
                $columns = "bankRecAsOf AS `Date`,month AS `Month`,openingBalance AS `Opening Balance`, closingBalance AS `Closing Balance`,description AS `Description`";
                break;
            case 'MI' :
                $columns = "itemIssueCode AS `II Code`,itemType AS `Issue Type`,itemType AS `Type`,issueDate AS `Date`,wareHouseDescription AS `Warehouse`
                 ,comment AS `Comment`,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                break;
            case 'SO':
                $columns = "contractType AS `Contract Type`,contractDate AS `Contract Date`,contractCode AS `C Code`,contractNarration AS `Narration`,
                  contactPersonName AS `Contract Person`,customerName AS `Customer`,CONCAT(SUM(t2.transactionAmount),' ',srp_erp_contractmaster.transactionCurrency) AS 'Amount'";
                $joins = "LEFT JOIN srp_erp_contractdetails t2 ON  t2.contractAutoID = srp_erp_contractmaster.contractAutoID";
                break;
            case 'SP':
                $columns = "payrollMonth AS `Month`,documentNo AS `Doc No`,processDate AS `Date`,narration AS `Narration`,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                break;
            case 'ST':
                $columns = "stockTransferCode AS `ST Code`,itemType AS `Item Type` ,tranferDate AS `Date`,comment AS Comment,form_wareHouseDescription AS Warehouse,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                break;
            case 'ADSP':
                $columns = "segmentCode AS `Segment Code`,narration AS  `Narration`,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                break;
            case 'SD':
                $columns = "documentDate AS `Date`,Description,CONCAT(SUM(t2.transactionAmount),' ',srp_erp_salarydeclarationmaster.transactionCurrency) AS Amount, confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date`";
                $joins = "LEFT JOIN srp_erp_salarydeclarationdetails t2 ON t2.declarationMasterID =srp_erp_salarydeclarationmaster.salarydeclarationMasterID ";
                break;
            case 'LO':
                $columns = "loanCode AS `Loan Code`,loanDate AS Date,loanDescription AS Description,amount AS Amount,numberOfInstallment AS Installments,
                 CONCAT(transactionAmount,' ',transactionCurrency) AS Amount,confirmedByName AS `Confirmed By`,confirmedDate AS `Confirmed Date` ";
                break;
        }
        $q = "SELECT " . $columns . " FROM " . $table . " " . $joins . "  WHERE " . $table . "." . $feild . "='" . $fvalue . "' ";
        $results = $this->db->query($q)->row_array();
        return $results;
    }

    function getApproval_docID($table, $feild, $fvalue)
    {
        $q = "SELECT * FROM " . $table . "  WHERE " . $feild . "='" . $fvalue . "' ";
        $res = $this->db->query($q)->row_array();
        return $res;
    }

    function getAssignedDashboard($empID, $companyID)
    {
        $this->db->select('userGroupID');
        $this->db->where('empID', $empID);
        $this->db->where('companyID', $companyID);

        $usergroup = $this->db->get('srp_erp_employeenavigation')->row_array();

        $this->db->select('srp_erp_userdashboardmaster.userDashboardID,srp_erp_userdashboardmaster.dashboardDescription,srp_erp_dashboardtemplate.pageName');
        $this->db->where('employeeID', $empID);
        $this->db->join('srp_erp_dashboardtemplate', 'srp_erp_dashboardtemplate.templateID = srp_erp_userdashboardmaster.templateID');
        $result = $this->db->get('srp_erp_userdashboardmaster')->result_array();
        //echo $this->db->last_query();
        return $result;

    }

    function get_last_two_financial_year($comid)
    {

        $this->db->SELECT("beginingDate,endingDate");
        $this->db->FROM('srp_erp_companyfinanceyear');
        $this->db->WHERE('companyID', $comid);
        $this->db->WHERE('isActive', '1');
        $this->db->WHERE('isCurrent', '1');
        return $this->db->get()->result_array();
    }

    function getAssignedDashboardWidget($empID, $companyID, $dbID)
    {
        $this->db->select('userGroupID');
        $this->db->where('empID', $empID);
        $this->db->where('companyID', $companyID);
        $usergroup = $this->db->get('srp_erp_employeenavigation')->row_array();

        $this->db->select('*');
        $this->db->where('employeeID', $empID);
        $this->db->where('srp_erp_userdashboardwidget.userDashboardID', $dbID);
        $this->db->where('srp_erp_widgetmaster.MobileYN', '1');
        $this->db->join('srp_erp_widgetmaster', 'srp_erp_widgetmaster.widgetID = srp_erp_userdashboardwidget.widgetID');
        $this->db->join('srp_erp_widgetposition', 'srp_erp_widgetposition.widgetPositionID = srp_erp_userdashboardwidget.positionID');
        $this->db->order_by('srp_erp_userdashboardwidget.userDashboardID asc,srp_erp_userdashboardwidget.sortOrder asc');
        $result = $this->db->get('srp_erp_userdashboardwidget')->result_array();
        return $result;
    }

    function getTotalRevenue($beginingDate, $endDate, $comid)
    {
        $result = $this->db->query("SELECT SUM(srp_erp_generalledger.companyLocalAmount)*-1 as totalRevenueLoc, SUM(srp_erp_generalledger.companyReportingAmount)*-1 as totalRevenue
        FROM
            srp_erp_generalledger
        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
        WHERE
            srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 11 AND srp_erp_generalledger.companyID = " . $comid)->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function getNetProfit($beginingDate, $endDate, $comid)
    {
        $result = $this->db->query("SELECT SUM(srp_erp_generalledger.companyLocalAmount)*-1 as netProfitLoc,SUM(srp_erp_generalledger.companyReportingAmount)*-1 as netProfit
        FROM
            srp_erp_generalledger
        INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
        INNER JOIN srp_erp_accountCategoryTypes ON srp_erp_accountCategoryTypes.accountCategoryTypeID = srp_erp_chartofaccounts.accountCategoryTypeID
        WHERE
            srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_generalledger.companyID = " . $comid)->row_array();
        //echo $this->db->last_query();
        return $result;
    }

    function getOverallPerformance($beginingDate, $endDate, $months, $comid)
    {
        $feilds = "";
        if (!empty($months)) {
            foreach ($months as $key => $val2) {
                $feilds .= "SUM(if(DATE_FORMAT(srp_erp_generalledger.documentDate,'%Y-%m') = '$key',srp_erp_generalledger.companyReportingAmount * -1,0) ) as `" . $val2 . "`,";
            }
        }
        $sql = "SELECT $feilds 'Revenue' as description
                FROM
                    srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
                WHERE
                    srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 11 AND srp_erp_generalledger.companyID = " . $comid . " 
                    UNION 
                    SELECT $feilds 'COGS' as description 
                FROM
                    srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
                WHERE
                    srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 12 AND srp_erp_generalledger.companyID = " . $comid . "
                    UNION 
                    SELECT $feilds 'Other Cost' as description 
                FROM
                    srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
                WHERE
                    srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 13 AND srp_erp_generalledger.companyID = " . $comid . " 
                    UNION 
                    SELECT $feilds 'GP' as description 
                FROM
                    srp_erp_generalledger
                INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
                WHERE
                    srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND (srp_erp_chartofaccounts.accountCategoryTypeID = 11 OR srp_erp_chartofaccounts.accountCategoryTypeID = 12) AND srp_erp_generalledger.companyID = " . $comid;
        $result = $this->db->query($sql)->result_array();
        return $result;
    }

    function getRevenueDetailAnalysis($beginingDate, $endDate, $comid)
    {
        $sql = "SELECT SUM(((transactionQTY * -1) * salesPrice)/srp_erp_itemledger.companyLocalExchangeRate) as companyLocalAmount,SUM(((transactionQTY * -1) * salesPrice)/srp_erp_itemledger.companyReportingExchangeRate) as companyReportingAmount,srp_erp_itemcategory.description as subCategory,srp_erp_itemcategory.itemCategoryID FROM srp_erp_itemledger
        INNER JOIN srp_erp_itemmaster ON srp_erp_itemledger.itemAutoID = srp_erp_itemmaster.itemAutoID  AND srp_erp_itemmaster.mainCategory = 'Inventory'
        INNER JOIN srp_erp_itemcategory ON srp_erp_itemcategory.itemCategoryID = srp_erp_itemmaster.subcategoryID  
        WHERE srp_erp_itemledger.companyID = " . $comid . "  AND srp_erp_itemledger.documentCode IN('CINV','DN','RV') AND srp_erp_itemledger.documentDate BETWEEN '$beginingDate' AND '$endDate'
        GROUP BY srp_erp_itemmaster.subcategoryID";
        $result = $this->db->query($sql)->result_array();
        return $result;
    }

    function getPerformanceSummary($beginingDate, $endDate, $comid)
    {
        $sql = "SELECT 'Revenue' as description,SUM(companyLocalAmount)*-1 as amountLoc,SUM(companyReportingAmount)*-1 as amount
FROM
	srp_erp_generalledger
INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
WHERE
	srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 11 AND srp_erp_generalledger.companyID = " . $comid . " 
	UNION 
	SELECT 'COGS' as description,SUM(companyLocalAmount)*-1 as amountLoc,SUM(companyReportingAmount)*-1 as amount 
FROM
	srp_erp_generalledger
INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
WHERE
	srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 12 AND srp_erp_generalledger.companyID = " . $comid . "
	UNION 
	SELECT 'Other Cost' as description,SUM(companyLocalAmount)*-1 as amountLoc,SUM(companyReportingAmount)*-1 as amount 
FROM
	srp_erp_generalledger
INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
WHERE
	srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND srp_erp_chartofaccounts.accountCategoryTypeID = 13 AND srp_erp_generalledger.companyID = " . $comid . "
	UNION 
	SELECT 'Gross Profit' as description,SUM(companyLocalAmount)*-1 as amountLoc,SUM(companyReportingAmount)*-1 as amount 
FROM
	srp_erp_generalledger
INNER JOIN srp_erp_chartofaccounts ON srp_erp_generalledger.GLAutoID = srp_erp_chartofaccounts.GLAutoID AND srp_erp_chartofaccounts.masterCategory = 'PL' AND srp_erp_chartofaccounts.companyID = " . $comid . "
WHERE
	srp_erp_generalledger.documentDate BETWEEN '$beginingDate' AND '$endDate' AND (srp_erp_chartofaccounts.accountCategoryTypeID = 11 OR srp_erp_chartofaccounts.accountCategoryTypeID = 12) AND srp_erp_generalledger.companyID = " . $comid;
        $result = $this->db->query($sql)->result_array();
        return $result;
    }

    function get_fastMovingItem($beginingDate, $endDate, $compID)
    {
        $this->db->select('SUM(((il.transactionQTY/convertionRate)*-1) * il.salesPrice/il.companyReportingExchangeRate) as companyReportingAmount,il.companyReportingCurrencyDecimalPlaces as companyReportingCurrencyDecimalPlaces,im.defaultUnitOfMeasure as UOM,im.itemDescription,SUM(il.transactionQTY/convertionRate)*-1 as transactionQTY,im.itemSystemCode,il.companyReportingCurrencyDecimalPlaces,im.currentStock as currentStock', false)
            ->from('srp_erp_itemledger il')
            ->join('srp_erp_itemmaster im', 'il.itemAutoID = im.itemAutoID', 'inner')
            ->where('il.documentDate BETWEEN "' . $beginingDate . '"
            AND "' . $endDate . '" AND il.companyID = "' . $compID . '" AND il.documentCode IN ("CINV","RV") AND im.mainCategory = "Inventory"')
            ->group_by('il.itemAutoID');
        return $this->db->get()->result_array();
    }

    function get_bankPosition($comid)
    {
        $this->db->select('bankCurrencyCode,srp_erp_chartofaccounts.GLDescription,(SUM(if(srp_erp_bankledger.transactionType = 1,srp_erp_bankledger.bankcurrencyAmount,0)) - SUM(if(srp_erp_bankledger.transactionType = 2,srp_erp_bankledger.bankcurrencyAmount,0))) as bookBalance,(SUM(if(srp_erp_bankledger.transactionType = 1 AND srp_erp_bankrecmaster.approvedYN = 1,srp_erp_bankledger.bankcurrencyAmount,0)) - SUM(if(srp_erp_bankledger.transactionType = 2 AND srp_erp_bankrecmaster.approvedYN = 1,srp_erp_bankledger.bankcurrencyAmount,0))) as bankBalance', false)
            ->from('srp_erp_chartofaccounts')
            ->join('srp_erp_bankledger', 'srp_erp_chartofaccounts.GLAutoID = srp_erp_bankledger.bankGLAutoID AND srp_erp_bankledger.companyID = ' . $comid, 'INNER')
            ->join('srp_erp_bankrecmaster', 'srp_erp_bankrecmaster.bankrecAutoID = srp_erp_bankledger.bankRecMonthID', 'LEFT')
            ->where('srp_erp_chartofaccounts.companyID', $comid)
            ->group_by('srp_erp_chartofaccounts.GLAutoID');
        return $this->db->get()->result_array();
    }

    function get_overdue_payable($comid)
    {
        $this->db->select('srp_erp_paysupplierinvoicemaster.companyReportingCurrencyDecimalPlaces as decimalPlace,srp_erp_paysupplierinvoicemaster.companyReportingCurrency as currency, srp_erp_suppliermaster.supplierName as supplierName,supplierAutoID,SUM(srp_erp_paysupplierinvoicemaster.transactionAmount) - (IFNULL(pvd.transactionAmount,0) + IFNULL(dnd.transactionAmount,0) + IFNULL(pva.transactionAmount,0)) as amount', false)
            ->from('srp_erp_paysupplierinvoicemaster')
            ->join('srp_erp_suppliermaster', 'srp_erp_paysupplierinvoicemaster.supplierID = srp_erp_suppliermaster.supplierAutoID', 'LEFT')
            ->join("(SELECT
                         IFNULL(SUM(srp_erp_paymentvoucherdetail.companyReportingAmount),0) as companyReportingAmount,IFNULL(SUM(srp_erp_paymentvoucherdetail.transactionAmount),0) as transactionAmount,srp_erp_paymentvoucherdetail.InvoiceAutoID,srp_erp_paymentvoucherdetail.payVoucherAutoID,partyID,
                srp_erp_paymentvouchermaster.transactionCurrency
                    FROM
                        srp_erp_paymentvoucherdetail
                        INNER JOIN `srp_erp_paymentvouchermaster` ON `srp_erp_paymentvouchermaster`.`payVoucherAutoID` = `srp_erp_paymentvoucherdetail`.`payVoucherAutoID` AND `srp_erp_paymentvouchermaster`.`approvedYN` = 1
                    WHERE
                        `srp_erp_paymentvoucherdetail`.`companyID` = " . $comid . " AND srp_erp_paymentvouchermaster.PVDate <= '" . current_date() . "' AND srp_erp_paymentvoucherdetail.InvoiceAutoID IS NOT NULL  GROUP BY srp_erp_paymentvouchermaster.partyID,
                srp_erp_paymentvouchermaster.transactionCurrency) pvd", 'pvd.partyID = srp_erp_paysupplierinvoicemaster.supplierID AND `pvd`.`transactionCurrency` = `srp_erp_paysupplierinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->join("(SELECT IFNULL(SUM(srp_erp_debitnotedetail.transactionAmount),0) as transactionAmount,IFNULL(SUM(srp_erp_debitnotedetail.companyReportingAmount),0) as companyReportingAmount,
                         srp_erp_debitnotedetail.InvoiceAutoID,srp_erp_debitnotedetail.debitNoteMasterAutoID,supplierID,
                srp_erp_debitnotemaster.transactionCurrency
                    FROM
                        srp_erp_debitnotedetail 
                        INNER JOIN `srp_erp_debitnotemaster` ON `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` = `srp_erp_debitnotedetail`.`debitNoteMasterAutoID` AND `srp_erp_debitnotemaster`.`approvedYN` = 1
                    WHERE
                        `srp_erp_debitnotedetail`.`companyID` = " . $comid . " AND srp_erp_debitnotemaster.debitNoteDate <= '" . current_date() . "' AND srp_erp_debitnotedetail.InvoiceAutoID IS NOT NULL GROUP BY srp_erp_debitnotemaster.supplierID,
                srp_erp_debitnotemaster.transactionCurrency) dnd", 'dnd.supplierID = srp_erp_paysupplierinvoicemaster.supplierID AND `dnd`.`transactionCurrency` = `srp_erp_paysupplierinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->join("(SELECT
                            IFNULL(SUM(srp_erp_pvadvancematchdetails.companyReportingAmount),0) as companyReportingAmount,IFNULL(SUM(srp_erp_pvadvancematchdetails.transactionAmount),0) as transactionAmount,
                         srp_erp_pvadvancematchdetails.InvoiceAutoID,supplierID,
                srp_erp_pvadvancematch.transactionCurrency
                    FROM
                    srp_erp_pvadvancematchdetails
                        INNER JOIN `srp_erp_pvadvancematch` ON `srp_erp_pvadvancematch`.`matchID` = `srp_erp_pvadvancematchdetails`.`matchID` AND `srp_erp_pvadvancematch`.`confirmedYN` = 1
                        WHERE `srp_erp_pvadvancematch`.`matchDate` <= '" . current_date() . "' AND srp_erp_pvadvancematchdetails.InvoiceAutoID IS NOT NULL GROUP BY srp_erp_pvadvancematch.supplierID,
                srp_erp_pvadvancematch.transactionCurrency) pva", 'pva.supplierID = srp_erp_paysupplierinvoicemaster.supplierID AND `pva`.`transactionCurrency` = `srp_erp_paysupplierinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->where('srp_erp_paysupplierinvoicemaster.companyID', $comid)
            ->where('invoiceDueDate <=', current_date())
            ->where('srp_erp_paysupplierinvoicemaster.approvedYN', 1)
            ->group_by('srp_erp_paysupplierinvoicemaster.supplierID');
        return $this->db->get()->result_array();
    }

    function fetch_overdue_receivable($comid)
    {
//        $fields = "";
//            $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrency as currency,';
//            $fields .= 'srp_erp_customerinvoicemaster.companyReportingCurrencyDecimalPlaces as decimalPlace,';
//            $fields .= 'SUM(srp_erp_customerinvoicemaster.companyReportingAmount) - (IFNULL(pvd.companyReportingAmount,0)+IFNULL(cnd.companyReportingAmount,0)+IFNULL(ca.transactionAmount,0)) as amount,';

        $this->db->select('srp_erp_customerinvoicemaster.companyReportingCurrencyDecimalPlaces as decimalPlace,srp_erp_customerinvoicemaster.companyReportingCurrency as currency,srp_erp_customermaster.customerName as customerName,customerAutoID,SUM(srp_erp_customerinvoicemaster.companyReportingAmount) - (IFNULL(pvd.companyReportingAmount,0)+IFNULL(cnd.companyReportingAmount,0)+IFNULL(ca.transactionAmount,0)) as amount', false)
            ->from('srp_erp_customerinvoicemaster')
            ->join('srp_erp_customermaster', 'srp_erp_customerinvoicemaster.customerID = srp_erp_customermaster.customerAutoID', 'LEFT')
            ->join("(SELECT SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount,SUM(srp_erp_customerreceiptdetail.companyReportingAmount) as companyReportingAmount,
		 srp_erp_customerreceiptdetail.invoiceAutoID,srp_erp_customerreceiptdetail.receiptVoucherAutoID,
		 srp_erp_customerreceiptmaster.customerID,
srp_erp_customerreceiptmaster.transactionCurrency
	FROM
		srp_erp_customerreceiptdetail
		INNER JOIN `srp_erp_customerreceiptmaster` ON `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId` = `srp_erp_customerreceiptdetail`.`receiptVoucherAutoId` AND `srp_erp_customerreceiptmaster`.`approvedYN` = 1
	WHERE
		`srp_erp_customerreceiptdetail`.`companyID` = " . $comid . " AND srp_erp_customerreceiptmaster.RVDate <= '" . current_date(false) . "' AND srp_erp_customerreceiptdetail.invoiceAutoID IS NOT NULL  GROUP BY srp_erp_customerreceiptmaster.customerID,srp_erp_customerreceiptmaster.transactionCurrency) pvd", 'pvd.customerID = srp_erp_customerinvoicemaster.customerID AND `pvd`.`transactionCurrency` = `srp_erp_customerinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->join("(SELECT SUM(srp_erp_creditnotedetail.transactionAmount) as transactionAmount,SUM(srp_erp_creditnotedetail.companyReportingAmount) as companyReportingAmount,
		 invoiceAutoID,srp_erp_creditnotedetail.creditNoteMasterAutoID,srp_erp_creditnotemaster.customerID,srp_erp_creditnotemaster.transactionCurrency
	FROM
		srp_erp_creditnotedetail
		INNER JOIN `srp_erp_creditnotemaster` ON `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` = `srp_erp_creditnotedetail`.`creditNoteMasterAutoID` AND `srp_erp_creditnotemaster`.`approvedYN` = 1
	WHERE
		`srp_erp_creditnotedetail`.`companyID` = " . $comid . " AND srp_erp_creditnotemaster.creditNoteDate <= '" . current_date(false) . "' AND srp_erp_creditnotedetail.invoiceAutoID IS NOT NULL GROUP BY srp_erp_creditnotemaster.customerID,srp_erp_creditnotemaster.transactionCurrency) cnd", 'cnd.customerID = srp_erp_customerinvoicemaster.customerID AND `cnd`.`transactionCurrency` = `srp_erp_customerinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->join("(SELECT SUM(srp_erp_rvadvancematchdetails.transactionAmount) as transactionAmount,SUM(srp_erp_rvadvancematchdetails.companyReportingAmount) as companyReportingAmount,
 srp_erp_rvadvancematchdetails.InvoiceAutoID,srp_erp_rvadvancematchdetails.receiptVoucherAutoID,srp_erp_rvadvancematch.customerID,srp_erp_rvadvancematch.transactionCurrency
	FROM srp_erp_rvadvancematchdetails 
	INNER JOIN `srp_erp_rvadvancematch` ON `srp_erp_rvadvancematchdetails`.`matchID` = `srp_erp_rvadvancematch`.`matchID` AND `srp_erp_rvadvancematch`.`confirmedYN` = 1
	WHERE `srp_erp_rvadvancematchdetails`.`companyID` = " . $comid . " AND srp_erp_rvadvancematchdetails.invoiceAutoID IS NOT NULL GROUP BY srp_erp_rvadvancematch.customerID,srp_erp_rvadvancematch.transactionCurrency) ca", 'ca.customerID = srp_erp_customerinvoicemaster.customerID AND `ca`.`transactionCurrency` = `srp_erp_customerinvoicemaster`.`transactionCurrency`', 'LEFT')
            ->where('srp_erp_customerinvoicemaster.companyID', $comid)
            ->where('invoiceDueDate <=', current_date())
            ->where('srp_erp_customerinvoicemaster.approvedYN', 1)
            ->group_by('srp_erp_customerinvoicemaster.customerID');
        return $this->db->get()->result_array();
    }

    function fetch_postdated_cheque_given($comid)
    {
        $this->db->select('srp_erp_bankledger.bankCurrencyAmount as bankCurrencyAmount,chequeDate as dueDate,bankCurrency,DATEDIFF(chequeDate,CURDATE()) as dueDays,CONCAT(IFNULL(srp_erp_customermaster.customerName, ""),IFNULL(srp_erp_suppliermaster.supplierName, "")) as vendor,remainIn', false)
            ->from('srp_erp_bankledger')
            ->join('srp_erp_bankrecmaster', 'srp_erp_bankrecmaster.bankrecAutoID = srp_erp_bankledger.bankRecMonthID', 'LEFT')
            ->join('srp_erp_customermaster', 'srp_erp_bankledger.partyCode = srp_erp_customermaster.customerSystemCode', 'LEFT')
            ->join('srp_erp_suppliermaster', 'srp_erp_bankledger.partyCode = srp_erp_suppliermaster.supplierSystemCode', 'LEFT')
            ->where('srp_erp_bankledger.transactionType', 2)
            ->where('srp_erp_bankledger.companyID', $comid)
            ->where('(srp_erp_bankrecmaster.approvedYN = 0 OR srp_erp_bankledger.bankRecMonthID IS NULL)')
            ->where('srp_erp_bankledger.documentDate < srp_erp_bankledger.chequeDate')
            ->limit(10);
        return $this->db->get()->result_array();
    }

    function fetch_postdated_cheque_received($comid)
    {
        $this->db->select('srp_erp_bankledger.bankCurrencyAmount as bankCurrencyAmount,chequeDate as dueDate,bankCurrency,DATEDIFF(chequeDate,CURDATE()) as dueDays,CONCAT(IFNULL(srp_erp_customermaster.customerName, ""),IFNULL(srp_erp_suppliermaster.supplierName, "")) as vendor,remainIn', false)
            ->from('srp_erp_bankledger')
            ->join('srp_erp_bankrecmaster', 'srp_erp_bankrecmaster.bankrecAutoID = srp_erp_bankledger.bankRecMonthID', 'LEFT')
            ->join('srp_erp_customermaster', 'srp_erp_bankledger.partyCode = srp_erp_customermaster.customerSystemCode', 'LEFT')
            ->join('srp_erp_suppliermaster', 'srp_erp_bankledger.partyCode = srp_erp_suppliermaster.supplierSystemCode', 'LEFT')
            ->where('srp_erp_bankledger.transactionType', 1)
            ->where('srp_erp_bankledger.companyID', $comid)
            ->where('(srp_erp_bankrecmaster.approvedYN = 0 OR srp_erp_bankledger.bankRecMonthID IS NULL)')
            ->where('srp_erp_bankledger.documentDate < srp_erp_bankledger.chequeDate')
            ->limit(10);
        return $this->db->get()->result_array();
    }

    /******** FROM SPUR-Mobile-BackEnd Repo - GitHub */
    function get_companies($empid)
    {
        $this->db->select('srp_erp_employeenavigation.companyID as companyId,  srp_erp_company.company_name as companyName,srp_erp_company.company_city as companyCity, srp_erp_company.company_country as companyCountry');
        $this->db->from('srp_erp_employeenavigation');
        $this->db->join('srp_erp_company', 'srp_erp_employeenavigation.companyID =  srp_erp_company.company_id', 'LEFT');
        $this->db->where('empID', $empid);
        return $this->db->get()->result_array();
    }

    function get_company($companyID)
    {
        $this->db->select('company_id as companyId,company_name as companyName,company_city as companyCity, company_country as companyCountry');
        $this->db->from('srp_erp_company');
        $this->db->where('company_id', $companyID);
        return $this->db->get()->row();
    }

    function get_companyCode($comid)
    {
        $this->db->select('company_code');
        $this->db->from('srp_erp_company');
        $this->db->where('company_id', $comid);
        return $this->db->get()->row_array();

    }

    function get_companyName($comid)
    {
        $this->db->select('company_name');
        $this->db->from('srp_erp_company');
        $this->db->where('company_id', $comid);
        return $this->db->get()->row_array();
    }

    function get_companyLocation($userID, $companyID)
    {
        $q = "SELECT
                latitude,
                longitude,
                locationRadius
            FROM
                `srp_erp_pay_floormaster` t1
            LEFT JOIN srp_employeesdetails t2 ON t1.floorID = t2.floorID
            WHERE
                EIdNo = {$userID} AND Erp_companyID = {$companyID} ;
        ";
        $res = $this->db->query($q)->row_array();
        return $res;
    }

    function get_approvals1($eid, $companyID)
    {
        $this->db->select('srp_erp_salescommisionmaster.salesCommisionID as salesCommisionID ,det2.transactionAmount as  transactionAmount,srp_erp_salescommisionmaster.companyCode,salesCommisionCode,Description,confirmedYN,srp_erp_documentapproved.approvedYN as approvedYN,documentApprovedID,approvalLevelID,transactionCurrencyDecimalPlaces, transactionCurrency');
        $this->db->join('(SELECT SUM(transactionAmount) as transactionAmount,salesCommisionID FROM srp_erp_salescommisiondetail GROUP BY salesCommisionID) det', '(det.salesCommisionID = srp_erp_salescommisionmaster.salesCommisionID)', 'left');
        $this->db->join('(SELECT SUM(netCommision) as transactionAmount,salesCommisionID FROM srp_erp_salescommisionperson GROUP BY salesCommisionID) det2', '(det2.salesCommisionID = srp_erp_salescommisionmaster.salesCommisionID)', 'left');
        $this->db->from('srp_erp_salescommisionmaster');
        $this->db->join('srp_erp_documentapproved', 'srp_erp_documentapproved.documentSystemCode = srp_erp_salescommisionmaster.salesCommisionID AND srp_erp_documentapproved.approvalLevelID = srp_erp_salescommisionmaster.currentLevelNo');
        $this->db->join('srp_erp_approvalusers', 'srp_erp_approvalusers.levelNo = srp_erp_salescommisionmaster.currentLevelNo');
        $this->db->where('srp_erp_documentapproved.documentID', 'SC');
        $this->db->where('srp_erp_approvalusers.documentID', 'SC');
        $this->db->where('srp_erp_approvalusers.employeeID', $eid);
        $this->db->where('srp_erp_documentapproved.approvedYN', '0');
        $this->db->where('srp_erp_salescommisionmaster.companyID', $companyID);
        $this->db->where('srp_erp_approvalusers.companyID', $companyID);
        return $this->db->get()->result_array();
    }

    function get_approval_forEmp($eid, $comp_id)
    {
        $query = "SELECT
                            t1.document,
                            t2.documentID,
                            (
                                SELECT
                                    count(DISTINCT documentSystemCode)
                                FROM
                                    srp_erp_documentapproved
                                WHERE
                                    srp_erp_documentapproved.documentID = t2.documentID
                                AND approvedYN = 0
                                AND employeeID = " . $eid . "
                                AND companyID = " . $comp_id . "
                                AND isCancel =0
                                AND documentID = t2.documentID
                                                        
                            ) AS counts
                        FROM
                            srp_erp_documentcodes t1
                        INNER JOIN srp_erp_documentapproved t2 ON t1.documentID = t2.documentID
                        INNER JOIN srp_erp_approvalusers t3 ON t3.documentID = t2.documentID
                        AND t2.approvalLevelID = t3.levelNo
                        WHERE
                            employeeID = " . $eid . "
                        AND t2.companyID =" . $comp_id . "
                        AND approvedYN = 0
                        AND isApprovalDocument = 1
                        AND t2.documentID NOT IN (
                            'LA',
                            'EC',
                            'BT',
                            'BRC',
                            'MR',
                            'EST',
                            'JOB',
                            'SCNT',
                            'BBSV',
                            'BBRV',
                            'BBBC',
                            'BBDPN',
                            'RJV',
                            'FED',
                            'BD',
                            'QUT',
                            'BBGRN',
                            'BBPV',
                            'HCINV',
                            'PRP',
                            'SC' ,
                            'BBDR'
                        )
                        GROUP BY
                            t2.documentID";
        $res = $this->db->query($query)->result_array();

        return $res;
    }

    function get_DocApprovals($eid, $comp_id, $documentCode, $approvedStatus = 0)
    {
        $q = " ";
        $data=array();
        if(empty($documentCode)) {
            $documentCode = 'all';
        }
        $code_arr = explode(',', $documentCode);
        foreach ($code_arr as $documentCode){
            switch ($documentCode) {
                case 'EC':
                    $q="SELECT
                        `det`.`transactionAmount` AS `amount`,
                        `det`.`empCurrencyID` AS `currencyID`,
                        `det`.`empCurrency` AS `currency`,
                        CurrencyName AS currencyDescription,
                        `det`.`transactionCurrencyDecimalPlaces` AS `transactionCurrencyDecimalPlaces`,
                        `srp_erp_expenseclaimmaster`.`expenseClaimMasterAutoID` AS `documentAutoID`,
                        `expenseClaimCode` AS document,
                        `srp_erp_expenseclaimmaster`.`documentID` AS `documentCode`,
                        'Expense Claim' AS documentName,
                        '1' AS level,
                        comments AS Narration,
                        srp_erp_expenseclaimmaster.companyID AS companyID,
                        srp_erp_expenseclaimmaster.confirmedByName,
                        DATE_FORMAT( srp_erp_expenseclaimmaster.confirmedDate, \"%y-%m-%d %h:%i:%s\" ) AS date,
                        srp_erp_expenseclaimmaster.segmentID AS segmentID,
                        IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                        IFNULL( segmentmaster.description, '-' ) AS segmentdescription
                        FROM
                        `srp_erp_expenseclaimmaster`
                        LEFT JOIN ( SELECT SUM( empCurrencyAmount ) AS transactionAmount, expenseClaimMasterAutoID, empCurrencyID, empCurrency,transactionCurrencyDecimalPlaces FROM srp_erp_expenseclaimdetails GROUP BY expenseClaimMasterAutoID ) det ON ( `det`.`expenseClaimMasterAutoID` = srp_erp_expenseclaimmaster.expenseClaimMasterAutoID )
                        
                        JOIN `srp_erp_employeemanagers` ON `srp_erp_expenseclaimmaster`.`claimedByEmpID` = `srp_erp_employeemanagers`.`empID`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_expenseclaimmaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = det.empCurrencyID
                    WHERE
                        `srp_erp_expenseclaimmaster`.`companyID` = {$comp_id} 
                        AND `srp_erp_expenseclaimmaster`.`confirmedYN` = 1 
                        AND `srp_erp_expenseclaimmaster`.`approvedYN` = '0' 
                        AND `srp_erp_employeemanagers`.`managerID` = {$eid}
                        AND `srp_erp_employeemanagers`.`active` = 1 
                    ORDER BY
                        confirmedDate DESC";
                    break;
                case 'all':
                    $q = $this->get_all_approval_query($eid, $comp_id);
                    break;
                case 'LA':
                    $setupData = $this->getLeaveApprovalSetup('', $comp_id);
                    $approvalLevel = $setupData['approvalLevel'];
                    $approvalSetup = $setupData['approvalSetup'];
                    $approvalEmp_arr = $setupData['approvalEmp'];
                    $empID = $eid;
                    $x = 0;
                    $str = 'CASE';
                    while($x < $approvalLevel) {
                        $level = $x + 1;
                        $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                        $arr = array_map(function ($k) use ($approvalSetup) {
                            return $approvalSetup[$k];
                        }, $keys);

                        $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                        if($approvalType == 3){
                            /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                            $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                            $hrManagerID = array_column($hrManagerID, 'empID');

                            if(!empty($hrManagerID)){
                                $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( ';
                                foreach($hrManagerID as $key=>$hrManagerRow){
                                    $str .= ($key > 0)? ' OR': '';
                                    $str .= ' ( \''.$empID.'\' = '.$hrManagerRow.')';
                                }
                                $str .= ' , 1, 0 ) ';
                            }
                        }
                        else{
                            $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( '.$managerType.' = '.$empID.', 1, 0 ) ';
                        }


                        $x++;
                    }
                    $str .= 'END AS isInApproval';

                    $q = "SELECT
                        '0' AS amount,
                        '' AS `currencyID`,
                        `leaveMasterID` AS documentAutoID,
                        `documentCode` AS document,
                        'LA' AS documentCode,
                        'Leave' AS documentName,
                        currentLevelNo AS level,
                        t1.comments AS Narration,
                    companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT( confirmedDate, \"%y-%m-%d %h:%i:%s\") AS date,
                        '' AS segmentID
                    FROM
                        (
                    SELECT
                        *, {$str}
                    FROM
                        (
                        SELECT
                            leaveMasterID,
                            lMaster.`documentCode`,
                            lMaster.companyCode,
                            `ECode`,
                            `Ename2` AS `empName`,
                            lMaster.`approvedYN`,
                            `lMaster`.`empID`,
                            `currentLevelNo`,
                            `repManager`,
                            `coveringEmpID` AS `coveringEmp`,
                            `startDate`,
                            endDate,
                            comments,
                            lMaster.companyID,
                            confirmedByName,
                            confirmedDate,
                            lMaster.segmentID AS segmentID,
                            IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes
                        FROM
                            srp_erp_leavemaster AS lMaster
                            JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
                            LEFT JOIN ( SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers WHERE active = 1 AND companyID = {$comp_id} ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID 
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = lMaster.segmentID
                        WHERE
                            lMaster.companyID = {$comp_id} 
                            AND lMaster.confirmedYN = 1 
                            AND lMaster.approvedYN = '0' 
                        ) AS leaveData
                        LEFT JOIN ( SELECT managerID AS topManager, empID AS topEmpID FROM srp_erp_employeemanagers WHERE companyID = {$comp_id} AND active = 1 ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID 
                        ) AS t1 
                    WHERE
                        `t1`.`isInApproval` = 1 
                    ORDER BY
                        confirmedDate DESC";

                    break;
                case 'MI':
                    $q = "SELECT 
                        det.totalValue AS amount,
                        companyLocalCurrencyID AS `currencyID`,
                        companyLocalCurrency AS `currency`,
                        CurrencyName AS currencyDescription,
                        companyLocalCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces, 
                        `srp_erp_itemissuemaster`.`itemIssueAutoID` AS `documentAutoID`,
                        `documentCode` AS document,
                        `srp_erp_documentapproved`.`documentID` AS documentCode,
                        'Material Issue' AS documentName,
                        approvalLevelID AS level,
                        `comment` AS Narration,
                        srp_erp_itemissuemaster.companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                        srp_erp_itemissuemaster.segmentID AS segmentID,
                        IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                        IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                        FROM
                            `srp_erp_itemissuemaster`
                        LEFT JOIN (
                            SELECT
                                SUM(qtyIssued) AS qtyIssued,
                                SUM( totalValue ) AS totalValue, 
                                itemIssueAutoID
                            FROM
                                srp_erp_itemissuedetails
                            GROUP BY
                                itemIssueAutoID
                        ) det ON `det`.`itemIssueAutoID` = `srp_erp_itemissuemaster`.`itemIssueAutoID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_itemissuemaster`.`itemIssueAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_itemissuemaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_itemissuemaster`.`currentLevelNo`
                        LEFT JOIN `srp_erp_documentcodes` AS `t2` ON `srp_erp_documentapproved`.`documentID` = `t2`.`documentID`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_itemissuemaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_itemissuemaster.companyLocalCurrencyID
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'MI'
                        AND `srp_erp_approvalusers`.`documentID` = 'MI'
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_itemissuemaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'PO':
                    $q = "SELECT  
                        srp_erp_purchaseordermaster.transactionAmount AS amount,
                        transactionCurrencyID AS `currencyID`,
                        transactionCurrency AS `currency`,
                        CurrencyName AS currencyDescription, 
                        transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        srp_erp_purchaseordermaster.purchaseOrderID AS documentAutoID,
                        purchaseOrderCode AS document,
                        'PO' AS documentCode,
                        'Purchase Order' AS documentName,
                        approvalLevelID AS level,
                        narration,
                        srp_erp_purchaseordermaster.companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                        srp_erp_purchaseordermaster.segmentID AS segmentID,
                        IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                        IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                        FROM
                            `srp_erp_purchaseordermaster`
                        LEFT JOIN (
                            SELECT
                                SUM(totalAmount) AS transactionAmount,
                                purchaseOrderID
                            FROM
                                srp_erp_purchaseorderdetails
                            GROUP BY
                                purchaseOrderID
                        ) det ON (
                            `det`.`purchaseOrderID` = srp_erp_purchaseordermaster.purchaseOrderID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaseordermaster`.`purchaseOrderID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_purchaseordermaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_purchaseordermaster.transactionCurrencyID
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'PO'
                        AND `srp_erp_approvalusers`.`documentID` = 'PO'
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_purchaseordermaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'GRV':
                    $q = "SELECT
                        srp_erp_grvmaster.transactionAmount AS amount,
                        srp_erp_grvmaster.transactionCurrencyID AS `currencyID`,
                        transactionCurrency AS `currency`,
                        CurrencyName AS currencyDescription, 
                        transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        `srp_erp_grvmaster`.`grvAutoID` AS `documentAutoID`,
                        `grvPrimaryCode` AS document,
                        'GRV' AS documentCode,
                        'Goods Receipt Voucher' AS documentName,
                        approvalLevelID AS level,
                        grvNarration AS Narration,
                        srp_erp_grvmaster.companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                        srp_erp_grvmaster.segmentID AS segmentID,
                        IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                        IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                        FROM
                            `srp_erp_grvmaster`
                        LEFT JOIN (
                            SELECT
                                SUM(receivedTotalAmount) AS receivedTotalAmount,
                                grvAutoID
                            FROM
                                srp_erp_grvdetails
                            GROUP BY
                                grvAutoID
                        ) det ON (
                            `det`.`grvAutoID` = srp_erp_grvmaster.grvAutoID
                        )
                        LEFT JOIN (
                            SELECT
                                SUM(total_amount) AS total_amount,
                                grvAutoID
                            FROM
                                srp_erp_grv_addon
                            GROUP BY
                                grvAutoID
                        ) addondet ON (
                            `addondet`.`grvAutoID` = srp_erp_grvmaster.grvAutoID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_grvmaster`.`grvAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_grvmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_grvmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_grvmaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_grvmaster.transactionCurrencyID
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        
                        AND `srp_erp_grvmaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";

                    break;
                case 'ST':
                    $q = "SELECT
                        det.totalValue AS amount,
                        srp_erp_stocktransfermaster.companyLocalCurrencyID AS currencyID,
                        companyLocalCurrency AS `currency`,
                        CurrencyName AS currencyDescription, 
                        companyLocalCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        srp_erp_stocktransfermaster.stockTransferAutoID AS documentAutoID,
                        stockTransferCode AS document,
                        'ST' as documentCode,
                        'Stock Transfer' AS documentName,
                        approvalLevelID AS level,
                        `comment` AS Narration,
                        srp_erp_stocktransfermaster.companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                        srp_erp_stocktransfermaster.segmentID AS segmentID,
                        IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                        IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                        FROM
                            `srp_erp_stocktransfermaster`
                        LEFT JOIN (
                                SELECT stockTransferAutoID, SUM(totalValue) AS totalValue FROM srp_erp_stocktransferdetails GROUP BY stockTransferAutoID
                        ) det ON det.stockTransferAutoID = srp_erp_stocktransfermaster.stockTransferAutoID
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stocktransfermaster`.`stockTransferAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_stocktransfermaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_stocktransfermaster.companyLocalCurrencyID			
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'ST'
                        AND `srp_erp_approvalusers`.`documentID` = 'ST'
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_stocktransfermaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'CINV':
                    $q = "  SELECT
                            det.transactionAmount AS amount,
                            srp_erp_customerinvoicemaster.transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            srp_erp_customerinvoicemaster.invoiceAutoID AS documentAutoID,
                            invoiceCode AS document,
                            'CINV' AS documentCode,
                            'Customer Invoice' AS documentName,
                            approvalLevelID AS level,
                            invoiceNarration AS Narration,
                            srp_erp_customerinvoicemaster.companyID AS companyID,
                            srp_erp_customerinvoicemaster.approvedYN AS approvedYN,
                            srp_erp_customerinvoicemaster.invoiceDate AS invoiceDate,
                            srp_erp_customerinvoicemaster.invoiceType AS invoiceType,
                            company.company_name,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            srp_erp_customerinvoicemaster.segmentID AS segmentID,
                            IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                            IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                        FROM
                            `srp_erp_customerinvoicemaster`
                        LEFT JOIN (
                            SELECT
                                SUM(transactionAmount) AS transactionAmount,
                                invoiceAutoID
                            FROM
                                srp_erp_customerinvoicedetails
                            GROUP BY
                                invoiceAutoID
                        ) det ON (
                            `det`.`invoiceAutoID` = srp_erp_customerinvoicemaster.invoiceAutoID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerinvoicemaster`.`invoiceAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerinvoicemaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerinvoicemaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_customerinvoicemaster.segmentID
                        LEFT JOIN srp_erp_company company on company.company_id = srp_erp_customerinvoicemaster.companyID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_customerinvoicemaster.transactionCurrencyID
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'CINV'
                        AND `srp_erp_approvalusers`.`documentID` = 'CINV'
                        AND `srp_erp_documentapproved`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_documentapproved`.`approvedYN` = $approvedStatus";
                    break;
                case 'SR':
                    $q = "SELECT
                            det.totalValue AS amount,
                             srp_erp_stockreturnmaster.transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            srp_erp_stockreturnmaster.stockReturnAutoID AS documentAutoID,
                            stockReturnCode AS document,
                            'SR' as documentCode,
                            'Purchase Return' AS documentName,
                            approvalLevelID AS level,
                            srp_erp_stockreturnmaster.`comment` AS Narration,
                            srp_erp_stockreturnmaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date, 
                            '' AS segmentID		
                            FROM
                                `srp_erp_stockreturnmaster`
                            LEFT JOIN (
		                            SELECT stockReturnAutoID, SUM(totalValue) AS totalValue FROM srp_erp_stockreturndetails GROUP BY stockReturnAutoID
	                        ) det ON det.stockReturnAutoID = srp_erp_stockreturnmaster.stockReturnAutoID
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SR'
                            AND `srp_erp_approvalusers`.`documentID` = 'SR'
                            AND `srp_erp_approvalusers`.`employeeID` =  " . $eid . "
                            AND `srp_erp_stockreturnmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'PV':
                    $q = "SELECT
                                det.transactionAmount AS amount,
                                srp_erp_paymentvouchermaster.transactionCurrencyID AS `currencyID`,
                                transactionCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                                srp_erp_paymentVouchermaster.payVoucherAutoId AS documentAutoID,
                                PVcode AS document,
                                'PV' AS documentCode,
                                'Payment Voucher' AS documentName,
                                approvalLevelID AS level,
                                PVNarration AS Narration,
                                srp_erp_paymentvouchermaster.companyID AS companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                srp_erp_paymentvouchermaster.segmentID AS segmentID,
                                IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription 	
                            FROM
                                `srp_erp_paymentvouchermaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    payVoucherAutoId
                                FROM
                                    srp_erp_paymentvoucherdetail
                                GROUP BY
                                    payVoucherAutoId
                            ) det ON (
                                `det`.`payVoucherAutoId` = srp_erp_paymentVouchermaster.payVoucherAutoId
                            )
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    payVoucherAutoId
                                FROM
                                    srp_erp_paymentvouchertaxdetails
                                GROUP BY
                                    payVoucherAutoId
                            ) addondet ON (
                                `addondet`.`payVoucherAutoId` = srp_erp_paymentVouchermaster.payVoucherAutoId
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_paymentvouchermaster`.`PayVoucherAutoId`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_paymentvouchermaster.segmentID	
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID	
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'PV'
                            AND `srp_erp_approvalusers`.`documentID` = 'PV'
                            AND `pvType` <> 'SC'
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_paymentvouchermaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SA' :
                    $q = " SELECT
                              '0' AS amount,
                               companyLocalCurrencyID AS `currencyID`,
                                companyLocalCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                companyLocalCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                                stockAdjustmentAutoID AS documentAutoID,
                                stockAdjustmentCode AS document,
                                'SA' AS documentCode,
                                'Stock Adjustment' AS documentName,
                                approvalLevelID AS level,
                                comment AS Narration,
                                srp_erp_stockadjustmentmaster.companyID AS companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                srp_erp_stockadjustmentmaster.segmentID AS segmentID,
                                IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                            FROM
                                `srp_erp_stockadjustmentmaster`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockadjustmentmaster`.`stockAdjustmentAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_stockadjustmentmaster.segmentID	
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_stockadjustmentmaster.companyLocalCurrencyID 
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SA'
                            AND `srp_erp_approvalusers`.`documentID` = 'SA'
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "                          
                            AND `srp_erp_stockadjustmentmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'RV':
                    $q = "  SELECT
                            det.transactionAmount as amount,
                            srp_erp_customerreceiptmaster.transactionCurrencyID AS currencyID,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            srp_erp_customerreceiptmaster.receiptVoucherAutoId AS documentAutoID,
                            RVcode AS document,
                            'RV' AS documentCode,
                            'Receipt Voucher' AS documentName,
                            approvalLevelID AS level,
                            RVNarration AS Narration,
                            srp_erp_customerreceiptmaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            srp_erp_customerreceiptmaster.segmentID AS segmentID,
                            IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                            IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                            FROM
                                `srp_erp_customerreceiptmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    receiptVoucherAutoId
                                FROM
                                    srp_erp_customerreceiptdetail
                                GROUP BY
                                    receiptVoucherAutoId
                            ) det ON (
                                `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_customerreceiptmaster.segmentID
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID	
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'RV'
                            AND `srp_erp_approvalusers`.`documentID` = 'RV'
                            AND `srp_erp_approvalusers`.`employeeID` =  " . $eid . "
                            AND `srp_erp_approvalusers`.`companyID` =  " . $comp_id . "
                            AND `srp_erp_customerreceiptmaster`.`companyID` =  " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'CN':
                    $q = "SELECT
                            det.transactionAmount AS amount,
                            srp_erp_creditnotemaster.transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            `srp_erp_creditnotemaster`.`creditNoteMasterAutoID` AS documentAutoID,
                            `creditNoteCode` AS document,
                            'CN' AS documentCode,
                            'Credit Note' AS documentName,
                            approvalLevelID AS level,
                            comments AS Narration,
                            srp_erp_creditnotemaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            '' AS segmentID
                            FROM
                                `srp_erp_creditnotemaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    creditNoteMasterAutoID
                                FROM
                                    srp_erp_creditnotedetail
                                GROUP BY
                                    creditNoteMasterAutoID
                            ) det ON (
                                `det`.`creditNoteMasterAutoID` = srp_erp_creditnotemaster.creditNoteMasterAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_creditnotemaster`.`creditNoteMasterAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_creditnotemaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_creditnotemaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_creditnotemaster.transactionCurrencyID	
                            WHERE
                                `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_creditnotemaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`documentID` = 'CN'
                            AND `srp_erp_approvalusers`.`documentID` = 'CN'
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'DN':
                    $q = " SELECT
                            det.transactionAmount AS amount,
                            srp_erp_debitnotemaster.transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            `srp_erp_debitnotemaster`.`debitNoteMasterAutoID` AS documentAutoID,
                            `debitNoteCode` AS document,
                            'DN' AS documentCode,
                            'Debit Note' AS documentName,
                            approvalLevelID AS level,
                            comments AS Narration,
                            srp_erp_debitnotemaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            '' AS segmentID    
                            FROM
                                `srp_erp_debitnotemaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    debitNoteMasterAutoID
                                FROM
                                    srp_erp_debitnotedetail
                                GROUP BY
                                    debitNoteMasterAutoID
                            ) det ON (
                                `det`.`debitNoteMasterAutoID` = srp_erp_debitnotemaster.debitNoteMasterAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_debitnotemaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_debitnotemaster`.`currentLevelNo`
                              LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_debitnotemaster.transactionCurrencyID	
                            WHERE
                                `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_debitnotemaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`documentID` = 'DN'
                            AND `srp_erp_approvalusers`.`documentID` = 'DN'
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SD':
                    $q = "SELECT
                             	det.transactionAmount AS amount,
                                srp_erp_salarydeclarationmaster.transactionCurrencyID AS `currencyID`,
                                transactionCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                                srp_erp_salarydeclarationmaster.salarydeclarationMasterID AS documentAutoID,
                                srp_erp_salarydeclarationmaster.documentSystemCode AS document,
                                'SD' as documentCode,
                                'Salary Declaration' AS documentName,
                                approvalLevelID AS level,
                                '' AS Narration,
                                srp_erp_salarydeclarationmaster.companyID AS companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                '' AS segmentID
                            FROM
                                `srp_erp_salarydeclarationmaster`
                            LEFT JOIN ( 
				                        SELECT declarationMasterID AS salarydeclarationMasterID, SUM(transactionAmount) AS transactionAmount FROM srp_erp_salarydeclarationdetails GROUP BY salarydeclarationMasterID
		                    ) det ON det.salarydeclarationMasterID = srp_erp_salarydeclarationmaster.salarydeclarationMasterID
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_salarydeclarationmaster`.`salarydeclarationMasterID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_salarydeclarationmaster.transactionCurrencyID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SD'
                            AND `srp_erp_approvalusers`.`documentID` = 'SD'
                            AND `srp_erp_approvalusers`.`employeeID` =  " . $eid . "
                            AND `srp_erp_salarydeclarationmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` =  " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'JV' :
                    $q = " SELECT
                            transactionAmount AS amount,
                            transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            `JVMasterAutoId` AS documentAutoID,
                            `JVcode` AS document,
                            'JV' AS documentCode,
                            'Journal Voucher' AS documentName,
                            approvalLevelID AS level,
                            JVNarration AS Narration,
                            srp_erp_jvmaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            '' AS segmentID  
                                FROM
                                    `srp_erp_jvmaster`
                                JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_jvmaster`.`JVMasterAutoId`
                                AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_jvmaster`.`currentLevelNo`
                                JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_jvmaster`.`currentLevelNo`
                                LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_jvmaster.transactionCurrencyID
                                WHERE
                                    `srp_erp_approvalusers`.`employeeID` =  " . $eid . "
                                AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                                AND `srp_erp_jvmaster`.`companyID` = " . $comp_id . "
                                AND `srp_erp_documentapproved`.`documentID` = 'JV'
                                AND `srp_erp_approvalusers`.`documentID` = 'JV'
                                AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'MRN' :
                    $q = "SELECT
                            	det.totalValue AS amount,
                                companyLocalCurrencyID AS `currencyID`,
                                companyLocalCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                companyLocalCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                                srp_erp_materialreceiptmaster.mrnAutoID AS documentAutoID,
                                mrnCode AS document,
                                'MRN' AS documentCode,
                                'Material Receipt Note' AS documentName,
                                approvalLevelID AS level,
                                comment AS Narration,
                                srp_erp_materialreceiptmaster.companyID AS companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                srp_erp_materialreceiptmaster.segmentID AS segmentID,
                                IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
                            FROM
                                `srp_erp_materialreceiptmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(qtyReceived) AS qtyReceived,
                                    SUM(totalValue) as totalValue,
                                    mrnAutoID
                                FROM
                                    srp_erp_materialreceiptdetails
                                GROUP BY
                                    mrnAutoID
                            ) det ON (
                                `det`.`mrnAutoID` = srp_erp_materialreceiptmaster.mrnAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_materialreceiptmaster`.`mrnAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_materialreceiptmaster.segmentID
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_materialreceiptmaster.companyLocalCurrencyID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'MRN'
                            AND `srp_erp_approvalusers`.`documentID` = 'MRN'
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_materialreceiptmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'CNT':
                    $q = "SELECT
                            det.transactionAmount AS amount, 
                            transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,	
                            `srp_erp_contractmaster`.`contractAutoID` AS documentAutoID,
                            `contractCode` AS document,
                            'CNT' as documentCode,
                            'Contract' AS documentName,
                            approvalLevelID AS level,
                            contractNarration AS Narration,
                            srp_erp_contractmaster.companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            srp_erp_contractmaster.segmentID AS segmentID,
                            IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                            IFNULL( segmentmaster.description, '-' ) AS segmentdescription   
                            FROM
                                `srp_erp_contractmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    contractAutoID
                                FROM
                                    srp_erp_contractdetails
                                GROUP BY
                                    contractAutoID
                            ) det ON (
                                `det`.`contractAutoID` = srp_erp_contractmaster.contractAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_contractmaster`.`contractAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_contractmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_contractmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_contractmaster.segmentID
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_contractmaster.transactionCurrencyID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` IN ('CNT')
                            AND `srp_erp_approvalusers`.`documentID` IN ('CNT')
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_contractmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            GROUP BY
                                `srp_erp_documentapproved`.`documentSystemCode`";
                    break;
                case 'Qut' :
                    $q = "SELECT
                                det.transactionAmount AS amount,
                                transactionCurrencyID AS `currencyID`,
                                transactionCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,	
                                `srp_erp_contractmaster`.`contractAutoID` AS documentAutoID,
                                `contractCode` AS document,
                                'Qut' as documentCode,
                                'Quotation' AS documentName,
                                approvalLevelID AS level,
                                contractNarration AS Narration,
                                srp_erp_contractmaster.companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                srp_erp_contractmaster.segmentID AS segmentID,
                                IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription  
                            FROM
                                `srp_erp_contractmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    contractAutoID
                                FROM
                                    srp_erp_contractdetails
                                GROUP BY
                                    contractAutoID
                            ) det ON (
                                `det`.`contractAutoID` = srp_erp_contractmaster.contractAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_contractmaster`.`contractAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_contractmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_contractmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_contractmaster.segmentID
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_contractmaster.transactionCurrencyID			
                            WHERE
                                `srp_erp_documentapproved`.`documentID` IN ('QUT')
                            AND `srp_erp_approvalusers`.`documentID` IN ('QUT' )
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_contractmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            GROUP BY
                                `srp_erp_documentapproved`.`documentSystemCode`";
                    break;
                case 'SO' :
                    $q = "SELECT
                                det.transactionAmount AS amount,
                                transactionCurrencyID AS `currencyID`,
                                transactionCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,	
                                `srp_erp_contractmaster`.`contractAutoID` AS documentAutoID,
                                `contractCode` AS document,
                                'SO' as documentCode,
                                'Sales Order' AS documentName,
                                approvalLevelID AS level,
                                contractNarration AS Narration,
                                srp_erp_contractmaster.companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                srp_erp_contractmaster.segmentID AS segmentID,
                                IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription  
                            FROM
                                `srp_erp_contractmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    contractAutoID
                                FROM
                                    srp_erp_contractdetails
                                GROUP BY
                                    contractAutoID
                            ) det ON (
                                `det`.`contractAutoID` = srp_erp_contractmaster.contractAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_contractmaster`.`contractAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_contractmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_contractmaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_contractmaster.segmentID
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_contractmaster.transactionCurrencyID			
                            WHERE
                                `srp_erp_documentapproved`.`documentID` IN ('SO')
                            AND `srp_erp_approvalusers`.`documentID` IN ('SO')
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'
                            AND `srp_erp_contractmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            GROUP BY
                                `srp_erp_documentapproved`.`documentSystemCode`";
                    break;
                case 'BSI' :
                    $q = "SELECT
                               (((( IFNULL( addondet.taxPercentage, 0 )/ 100)*(
                                                IFNULL( det.transactionAmount, 0 )-((
                                                        IFNULL( generalDiscountPercentage, 0 )/ 100 
                                                    )* IFNULL( det.transactionAmount, 0 ))))+ IFNULL( det.transactionAmount, 0 ))-((
                                        IFNULL( generalDiscountPercentage, 0 )/ 100 
                                )* IFNULL( det.transactionAmount, 0 ))) AS amount,
                                transactionCurrencyID AS currencyID,
                                transactionCurrency AS currency,
                                CurrencyName AS currencyDescription,
                                transactionCurrencyDecimalPlaces,
                                `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` AS documentAutoID,
                                `bookingInvCode` AS document,
                                'BSI' AS documentCode,
                                'Supplier Invoice' AS documentName,
                        	    '1' AS level,
                                comments AS Narration,
                                srp_erp_paysupplierinvoicemaster.companyID,
                                srp_erp_paysupplierinvoicemaster.confirmedByName,
                                DATE_FORMAT( srp_erp_paysupplierinvoicemaster.confirmedDate, \"%y-%m-%d %h:%i:%s\" ) AS date,
                                srp_erp_paysupplierinvoicemaster.segmentID,
                                IFNULL( segmentmaster.segmentcode, '-' ) AS segmentcodedes,
                                IFNULL( segmentmaster.description, '-' ) AS segmentdescription
                            FROM
                                `srp_erp_paysupplierinvoicemaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    InvoiceAutoID
                                FROM
                                    srp_erp_paysupplierinvoicedetail
                                GROUP BY
                                    InvoiceAutoID
                            ) det ON (
                                `det`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
                            )
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    SUM(taxPercentage) AS taxPercentage,
                                    InvoiceAutoID
                                FROM
                                    srp_erp_paysupplierinvoicetaxdetails
                                GROUP BY
                                    InvoiceAutoID
                            ) addondet ON (
                                `addondet`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_paysupplierinvoicemaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_paysupplierinvoicemaster`.`currentLevelNo`
                            LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_paysupplierinvoicemaster.segmentID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'BSI'
                            AND `srp_erp_approvalusers`.`documentID` = 'BSI'
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_paysupplierinvoicemaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'BRC' :
                    $q = "SELECT
                       
                            'Bank Reconciliation' AS document,
                            'BRC' AS documentID,
                            `b`.`bankRecAutoID` AS master_id,
                            `bankGLAutoID`,
                            `createdBy`,
                            `description`,
                            `bankRecPrimaryCode` AS document,
                            `createdBy`,
                            `d`.`approvedYN` AS `approvedYN`,
                            `documentApprovedID`,
                            `table_name`,
                            `table_unique_field_name`,
                            `d`.`documentSystemCode`
                        FROM
                            `srp_erp_bankrecmaster` AS `b`
                        LEFT JOIN `srp_erp_documentapproved` AS `d` ON `d`.`documentSystemCode` = `b`.`bankRecAutoID`
                        AND `d`.`approvalLevelID` = `b`.`currentLevelNo`
                        LEFT JOIN `srp_erp_chartofaccounts` AS `c` ON `c`.`GLAutoID` = `b`.`bankGLAutoID`
                        JOIN `srp_erp_approvalusers` AS `au` ON `au`.`levelNo` = `b`.`currentLevelNo`
                        WHERE
                            `d`.`documentID` = 'BRC'
                        AND `au`.`documentID` = 'BRC'
                        AND `au`.`employeeID` = " . $eid . "
                        AND `au`.`companyID` = " . $comp_id . "
                        AND `b`.`companyID` = " . $comp_id . "
                        AND `d`.`approvedYN` = '0'";
                    break;
                case 'FA' :
                    $q = "SELECT
                            `faID` AS master_id,
                            'FA' AS documentID,
                           
                            `faCode` AS document,                          
                            `documentApprovedID`,
                            `approvalLevelID`,
                            `table_name`,
                            `table_unique_field_name`,
                            `srp_erp_documentapproved`.`documentSystemCode`
                        FROM
                            `srp_erp_fa_asset_master`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_fa_asset_master`.`faID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_fa_asset_master`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_fa_asset_master`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'FA'
                        AND `srp_erp_approvalusers`.`documentID` = 'FA'            
                        AND `srp_erp_fa_asset_master`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'LO' :
                    $q = "SELECT
                            `e_loan`.`ID` AS master_id,
                            `loanCode` AS document,
                            'LO' AS documentID,
                          
                            `confirmedYN`,
                            `approve`.`approvedYN` AS `appYN`,
                            `documentApprovedID`,
                            `approvalLevelID`,
                            `table_name`,
                            `table_unique_field_name`,
                             approve.documentSystemCode
                        FROM `srp_erp_pay_emploan` AS `e_loan` LEFT 
                        JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `e_loan`.`ID` AND `approve`.`approvalLevelID` = `e_loan`.`currentLevelNo`
                        JOIN `srp_employeesdetails` AS `emp` ON `emp`.`EIdNo` = `e_loan`.`empID`
                        JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `e_loan`.`currentLevelNo`
                        WHERE `approve`.`documentID` = 'LO'
                        AND `ap`.`documentID` = 'LO'
                        AND `ap`.`employeeID` = " . $comp_id . "
                        AND `approve`.`approvedYN` = '0'
                        AND `e_loan`.`companyID` = " . $eid . "
                        AND `ap`.`companyID` = " . $eid . "
                        AND `approve`.`approvedYN` = '0'";
                    break;
                case 'BT' :
                    $q = "SELECT
                                'BT' AS documentID,
                            
                                bankTransferAutoID AS master_id,
                                bankTransferCode AS document,
                                referenceNo,
                                narration,
                                a.GLDescription AS frombank,
                                b.GLDescription AS toBank,
                                srp_erp_documentapproved.approvedYN AS approvedYN,
                                documentApprovedID,
                                approvalLevelID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_banktransfer`
                            LEFT JOIN `srp_erp_chartofaccounts` `a` ON `fromBankGLAutoID` = `a`.`GLAutoID`
                            LEFT JOIN `srp_erp_chartofaccounts` `b` ON `toBankGLAutoID` = `b`.`GLAutoID`
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_banktransfer`.`bankTransferAutoID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_banktransfer`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_banktransfer`.`currentLevelNo`
                            WHERE
                                `srp_erp_approvalusers`.`documentID` = 'BT'
                            AND `srp_erp_approvalusers`.`employeeID` = $eid
                            AND `srp_erp_documentapproved`.`documentID` = 'BT'
                            AND `srp_erp_banktransfer`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SLR' :
                    $q = " SELECT
                            
                            'SLR' AS documentID,
                            srp_erp_documentapproved.approvedYN AS approvedYN ,
                            salesReturnCode AS document,
                            srp_erp_documentapproved.approvedYN AS approvedYN,
                            documentApprovedID,
                            approvalLevelID,
                            documentApprovedID,
                            `table_name`,
                            `table_unique_field_name`,
                            `srp_erp_documentapproved`.`documentSystemCode`

                        FROM
                            `srp_erp_salesreturnmaster` `masterTbl`
                        LEFT JOIN (
        SELECT
                                SUM(totalValue) AS totalValue,
                                salesReturnAutoID
                            FROM
                                srp_erp_salesreturndetails detailTbl
                            GROUP BY
                                salesReturnAutoID
                        ) det ON (
        `det`.`salesReturnAutoID` = masterTbl.salesReturnAutoID
    )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `masterTbl`.`salesReturnAutoID`
    AND `srp_erp_documentapproved`.`approvalLevelID` = `masterTbl`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `masterTbl`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'SLR'
                            AND `srp_erp_approvalusers`.`documentID` = 'SLR'
                            AND `srp_erp_documentapproved`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SP' :
                    $q = "SELECT
                             'SP' as documentID,
                                                            
                            `payrollMasterID` AS master_id,
                            `t1`.`documentCode` AS document,
                            `payrollYear`,
                            `payrollMonth`,
                            `narration`,
                            `approve`.`approvedYN` AS `approvedYN`,
                            `documentApprovedID`,
                            `approvalLevelID`,
                            `table_name`,
                            `table_unique_field_name`,
                            `approve`.`documentSystemCode`
                        FROM
                            `srp_erp_payrollmaster` AS `t1`
                        JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `t1`.`payrollMasterID`
                        AND `approve`.`approvalLevelID` = `t1`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `t1`.`currentLevelNo`
                        WHERE
                            `approve`.`documentID` = 'SP'
                        AND `ap`.`documentID` = 'SP'
                        AND `ap`.`employeeID` = " . $eid . "  
                        AND `t1`.`companyID` = " . $comp_id . "
                        AND `ap`.`companyID` = " . $comp_id . "
                        AND `approve`.`approvedYN` = '0'";
                    break;
                case 'FAD' :
                    $q = "SELECT
                            'FAD' as documentID,
                                
                            `depMasterAutoID` AS master_id,
                            `srp_erp_fa_depmaster`.`companyCode`,
                            `depCode` AS document,
                            `depType`,
                            `confirmedYN`,
                            `srp_erp_documentapproved`.`approvedYN` AS `approvedYN`,
                            `documentApprovedID`,
                            `approvalLevelID`,
                            `table_name`,
                            `table_unique_field_name`,
                            `srp_erp_documentapproved`.`documentSystemCode`
                        FROM
                            `srp_erp_fa_depmaster`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_fa_depmaster`.`depMasterAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_fa_depmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_fa_depmaster`.`currentLevelNo`
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'FAD'
                        AND `srp_erp_approvalusers`.`documentID` = 'FAD'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_fa_depmaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        GROUP BY
                            `srp_erp_fa_depmaster`.`depMasterAutoID`";
                    break;
                case 'ADSP' :
                    $q = "SELECT
                        'ADSP' as documentID,
                       
                        `assetdisposalMasterAutoID` AS master_id,
                        `srp_erp_fa_asset_disposalmaster`.`companyCode`,
                        `disposalDocumentCode` AS document,
                        `disposalDocumentDate`,
                        `confirmedYN`,
                        `srp_erp_documentapproved`.`approvedYN` AS `approvedYN`,
                        `documentApprovedID`,
                        `approvalLevelID`,
                         `table_name`,
                        `table_unique_field_name`,
                        `srp_erp_documentapproved`.`documentSystemCode`
                    FROM
                        `srp_erp_fa_asset_disposalmaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_fa_asset_disposalmaster`.`assetdisposalMasterAutoID`
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'ADSP'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_fa_asset_disposalmaster`.`companyID` = " . $comp_id . "
                    GROUP BY
                        `srp_erp_fa_asset_disposalmaster`.`assetdisposalMasterAutoID`";
                    break;
                case 'ATS' :
                    $q = "SELECT
                        'ATS' as documentID,
                       
                        srp_erp_generalotmaster.generalOTMasterID AS master_id,
                        srp_erp_generalotmaster.companyCode,
                        srp_erp_generalotmaster.description,
                        otCode AS document,
                        confirmedYN,
                        srp_erp_documentapproved.approvedYN AS approvedYN,
                        documentApprovedID,
                        `table_name`,
                        `table_unique_field_name`,
                        `srp_erp_documentapproved`.`documentSystemCode`,
                        approvalLevelID FROM `srp_erp_generalotmaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_generalotmaster`.`generalOTMasterID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_generalotmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_generalotmaster`.`currentLevelNo`
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'ATS'
                    AND `srp_erp_approvalusers`.`documentID` = 'ATS'
                    AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                    AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                    AND `srp_erp_generalotmaster`.`companyID` = " . $comp_id . "
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'P' :
                    $q = "SELECT
                                'P' as documentID,                    
                                srp_erp_boq_header.projectID  AS master_id,
                                projectCode AS document,
                                projectNumber,
                                projectName,
                                segementID,
                                customerID,
                                customerCode,
                                customerName,
                                srp_erp_documentapproved.approvedYN AS approvedYN,
                                documentApprovedID,
                                approvalLevelID,
                                `table_name`,
                                `table_unique_field_name`,
                                `srp_erp_documentapproved`.`documentSystemCode`
                            FROM
                                `srp_erp_boq_header`
                            LEFT JOIN `srp_erp_projects` ON `srp_erp_boq_header`.`projectID` = `srp_erp_projects`.`projectID` JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_boq_header`.`headerID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_boq_header`.`currentLevelNo` JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_boq_header`.`currentLevelNo`
                            WHERE
                                `srp_erp_approvalusers`.`documentID` = 'P'
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                            AND `srp_erp_documentapproved`.`documentID` = 'P'
                            
                            AND `srp_erp_boq_header`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SPN' :
                    $q = "SELECT
                            '0' AS amount,
                            '' AS currencyID,
                            `payrollMasterID` AS documentAutoID,
                             `t1`.`documentCode` AS document,
                            'SPN' AS documentCode,
                            'Non Salary Process' AS documentName,
                            `approvalLevelID` AS level,
                           `narration` AS Narration, 
                           t1.companyID AS companyID,
                           confirmedByName,
	                        DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            t1.segmentID AS segmentID,
                            IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                            IFNULL( segmentmaster.description, '-' ) AS segmentdescription
                        FROM
                            `srp_erp_non_payrollmaster` AS `t1`
                        JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `t1`.`payrollMasterID`
                        AND `approve`.`approvalLevelID` = `t1`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `t1`.`currentLevelNo`
                         LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = t1.segmentID
                        WHERE
                            `approve`.`documentID` = 'SPN'
                        AND `ap`.`documentID` = 'SPN'
                        AND `ap`.`employeeID` = " . $eid . "      
                        AND `ap`.`companyID` = " . $comp_id . "
                        AND `t1`.`companyID` = " . $comp_id . "
                        AND `approve`.`approvedYN` = '0'";
                    break;
                case 'DC' :
                    $q = "SELECT
                        transactionAmount AS amount,
                        transactionCurrencyID AS `currencyID`,
                        transactionCurrency AS `currency`,
                        CurrencyName AS currencyDescription, 
                        transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        `collectionAutoId` AS documentAutoID,
                        t2.documentCode AS document,
                        'DC' as documentCode,
                        'Donor Collection' AS documentName, 	t.
                        t.approvalLevelID AS level,
                        narration AS Narration,
                        t.companyID
                        confirmedByName,
                        date,
                        '' AS segmentID
                    FROM (
                            SELECT
                                documentApprovedID,
                                `srp_erp_ngo_donorcollectionmaster`.`approvedYN`,
                                `approvalLevelID`,
                                `srp_erp_ngo_donorcollectionmaster`.`documentCode`,
                                `confirmedYN`,
                                `srp_erp_ngo_donorcollectionmaster`.`collectionAutoId`,
                                `srp_erp_ngo_donorcollectionmaster`.`documentSystemCode`,
                                `srp_erp_ngo_donorcollectionmaster`.`documentDate`,
                                `referenceNo`,
                                `transactionCurrency`,
                                transactionCurrencyID,
                                transactionCurrencyDecimalPlaces,
                                CurrencyName,
                                `donorsID`,
                                FORMAT(
                                IFNULL(transactionAmount, 0),
                                transactionCurrencyDecimalPlaces
                                ) AS transactionAmount,
                                narration,
                                 confirmedByName,
                                 DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,		
                                srp_erp_ngo_donorcollectionmaster.companyID AS companyID,
                                NAME
                            FROM
                                srp_erp_ngo_donorcollectionmaster
                            LEFT JOIN srp_erp_ngo_donors ON donorsID = contactID
                            LEFT JOIN (
                                SELECT
                                    sum(transactionAmount) AS transactionAmount,
                                    collectionAutoId
                                FROM
                                    srp_erp_ngo_donorcollectiondetails
                                GROUP BY
                                    collectionAutoId
                            ) srp_erp_ngo_donorcollectiondetails ON srp_erp_ngo_donorcollectionmaster.collectionAutoId = srp_erp_ngo_donorcollectiondetails.collectionAutoId
                            LEFT JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_ngo_donorcollectionmaster.collectionAutoId
                            AND approvalLevelID = currentLevelNo
                            LEFT JOIN srp_erp_approvalusers ON levelNo = srp_erp_ngo_donorcollectionmaster.currentLevelNo
                            	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_ngo_donorcollectionmaster.transactionCurrencyID
                            WHERE
                                isDeleted != 1
                            AND srp_erp_documentapproved.documentID = 'DC'
                            AND srp_erp_approvalusers.documentID = 'DC'
                            AND employeeID = " . $eid . "
                            AND srp_erp_ngo_donorcollectionmaster.approvedYN = '0'
                            AND srp_erp_ngo_donorcollectionmaster.companyID = " . $comp_id . "
                            ORDER BY
                                collectionAutoId DESC
                        ) t  LEFT JOIN  srp_erp_documentapproved t2 ON t.documentApprovedID = t2.documentApprovedID";
                    break;
                case 'PRQ' :
                    $q = "SELECT
                            det.transactionAmount AS amount,
                            transactionCurrencyID AS `currencyID`,
                            transactionCurrency AS `currency`,
                            CurrencyName AS currencyDescription, 
                            transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                            srp_erp_purchaserequestmaster.purchaseRequestID AS documentAutoID,
                            purchaseRequestCode AS document,
                            'PRQ' as documentCode,
                            'Purchase Request' AS documentName,
                            approvalLevelID AS level,
                            narration AS Narration,
                            srp_erp_purchaserequestmaster.companyID AS companyID,
                            confirmedByName,
                            DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                            srp_erp_purchaserequestmaster.segmentID AS segmentID,
                            IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
                            IFNULL( segmentmaster.description, '-' ) AS segmentdescription  
                        FROM
                            `srp_erp_purchaserequestmaster`
                        LEFT JOIN (
                            SELECT
                                SUM(totalAmount) AS transactionAmount,
                                purchaseRequestID
                            FROM
                                srp_erp_purchaserequestdetails
                            GROUP BY
                                purchaseRequestID
                        ) det ON (
                            `det`.`purchaseRequestID` = srp_erp_purchaserequestmaster.purchaseRequestID
                        )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaserequestmaster`.`purchaseRequestID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_purchaserequestmaster.segmentID
                        LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_purchaserequestmaster.transactionCurrencyID	
                        WHERE
                            `srp_erp_documentapproved`.`documentID` = 'PRQ'
                        AND `srp_erp_approvalusers`.`documentID` = 'PRQ'
                        AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                        AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                        AND `srp_erp_purchaserequestmaster`.`companyID` = " . $comp_id . "
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
                    break;
                case 'SC' :
                    $q = "SELECT
                                det.transactionAmount AS amount,
                                transactionCurrencyID AS `currencyID`,
                                transactionCurrency AS `currency`,
                                CurrencyName AS currencyDescription, 
                                transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                                `srp_erp_salescommisionmaster`.`salesCommisionID` AS documentAutoID,
                                salesCommisionCode AS document,
                                'SC' as documentCode,
                                'Sales Commision' AS documentName,
                                approvalLevelID AS level,
                                '' AS Narration,
                                srp_erp_salescommisionmaster.companyID AS companyID,
                                confirmedByName,
                                DATE_FORMAT( confirmedDate, '%b %D %Y') AS date,
                                '' AS segmentID
			               FROM
                            `srp_erp_salescommisionmaster`
                            LEFT JOIN (
                                SELECT
                                    SUM(transactionAmount) AS transactionAmount,
                                    salesCommisionID
                                FROM
                                    srp_erp_salescommisiondetail
                                GROUP BY
                                    salesCommisionID
                            ) det ON (
                                `det`.`salesCommisionID` = srp_erp_salescommisionmaster.salesCommisionID
                            )
                            LEFT JOIN (
                                SELECT
                                    SUM(netCommision) AS transactionAmount,
                                    salesCommisionID
                                FROM
                                    srp_erp_salescommisionperson
                                GROUP BY
                                    salesCommisionID
                            ) det2 ON (
                                `det2`.`salesCommisionID` = srp_erp_salescommisionmaster.salesCommisionID
                            )
                            JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_salescommisionmaster`.`salesCommisionID`
                            AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_salescommisionmaster`.`currentLevelNo`
                            JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_salescommisionmaster`.`currentLevelNo`
                               LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_salescommisionmaster.transactionCurrencyID
                            WHERE
                                `srp_erp_documentapproved`.`documentID` = 'SC'
                            AND `srp_erp_approvalusers`.`documentID` = 'SC'
                            AND `srp_erp_approvalusers`.`employeeID` = " . $eid . "
                           
                            AND `srp_erp_salescommisionmaster`.`companyID` = " . $comp_id . "
                            AND `srp_erp_approvalusers`.`companyID` = " . $comp_id . "
                            AND `srp_erp_documentapproved`.`approvedYN` = '0'";
            }

            $query = $this->db->query($q);
            $combined_list = array();
            foreach ($query->result_array() as $row){

                $x=array();
                $currency_arr=array();
                $segment_arr=array();
                if(!empty($row)) {
                    foreach (array_keys($row) as $item){
                        /*if($item=="documentID"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="companyCode"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="document"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="documentApprovedID"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="approvalLevelID"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="table_name"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="table_unique_field_name"){
                            $primary_data[$item] = $row[$item];
                        }
                        else if($item=="master_id"){
                            $primary_data[$item] = $row[$item];
                        }else{
                            $additional_data[$item] = $row[$item];
                        }

                        $x['primary']=$primary_data;
                        $x['additional']=$additional_data;*/
                        switch ($item) {
                            CASE 'amount' :
                                $x[$item] = (float)$row[$item];
                                BREAK;

                            CASE 'documentAutoID' : CASE 'companyID' : CASE 'level' :
                            $x[$item] = (int)$row[$item];
                            BREAK;

                            CASE 'currencyID' :
                                if(!empty($row[$item])) {
                                    $currency_arr['currencyID'] = (int)$row['currencyID'];
                                    $currency_arr['code'] = $row['currency'];
                                    $currency_arr['description'] = $row['currencyDescription'];
                                    $currency_arr['decimalPlaces'] = (int)$row['transactionCurrencyDecimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['code'] = fetch_currency_code($currencyID);
                                    $currency_arr['description'] = fetch_currency_dec($currency_arr['code']);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                BREAK;

                            CASE 'segmentID' :
                                if(!empty($row[$item])) {
                                    $segment_arr['segmentID'] = (int)$row['segmentID'];
                                    $segment_arr['code'] = $row['segmentcodedes'];
                                    $segment_arr['description'] = $row['segmentdescription'];
                                } else {
                                    $segment_arr = null;
                                }
                                BREAK;

                            CASE 'currency' :
                            CASE 'currencyDescription' :
                            CASE 'transactionCurrencyDecimalPlaces' :
                            CASE 'segmentcodedes' :
                            CASE 'segmentdescription' :
                                break;

                            DEFAULT :
                                $x[$item] = $row[$item];
                        }
                        $x['currency']=$currency_arr;
                        $x['segment']=$segment_arr;
                    }
                    array_push($combined_list,$x);
                }
            }
            foreach ($combined_list as $var) {
                array_push($data,$var);
            }
        }
        $vc_array_name = array();
        foreach ($data as $key => $row)
        {
            $vc_array_name[$key] = $row['date'];
        }
        array_multisort($vc_array_name, SORT_DESC, $data);

        return $data;
    }

    function fetch_expanse_claimApproval($empID, $companyid)
    {
        $this->db->select("srp_erp_expenseclaimmaster.expenseClaimMasterAutoID as expenseClaimMasterAutoID,expenseClaimCode,comments,claimedByEmpName,confirmedYN,approvedYN ,expenseClaimDate AS expenseClaimDate,srp_erp_expenseclaimmaster.createdUserID,det.empCurrency as empCurrency,det.transactionAmount as total_value");
        $this->db->join('(SELECT SUM(empCurrencyAmount) as transactionAmount,expenseClaimMasterAutoID,empCurrency FROM srp_erp_expenseclaimdetails GROUP BY expenseClaimMasterAutoID) det', '(det.expenseClaimMasterAutoID = srp_erp_expenseclaimmaster.expenseClaimMasterAutoID)', 'left');
        $this->db->join('srp_erp_employeemanagers ', 'srp_erp_expenseclaimmaster.claimedByEmpID = srp_erp_employeemanagers.empID');
        $this->db->from('srp_erp_expenseclaimmaster');
        $this->db->where('srp_erp_expenseclaimmaster.companyID', $companyid);
        $this->db->where('srp_erp_expenseclaimmaster.confirmedYN', 1);
        $this->db->where('srp_erp_expenseclaimmaster.approvedYN', '0');
        $this->db->where('srp_erp_employeemanagers.managerID', $empID);
        $this->db->where('srp_erp_employeemanagers.active', 1);
        $res = $this->db->get()->result_array();

        return $res;
    }

    function save_expense_Claim_approval($userID, $comID, $comCode, $status, $name, $comment, $exMasterID)
    {
        if ($status == 1) {
            $data = array(
                'approvedYN' => 1,
                'approvedDate' => current_date(),
                'approvedByEmpID' => $userID,
                'approvedByEmpName' => $name,
                'approvalComments' => $comment,
            );
            $this->db->where('expenseClaimMasterAutoID', trim($exMasterID));
            $this->db->update('srp_erp_expenseclaimmaster', $data);
            $this->session->set_flashdata('s', ' Approved Successfully ');
            return true;
        } else {

            $this->db->select('expenseClaimCode');
            $this->db->where('expenseClaimMasterAutoID', trim($exMasterID));
            $this->db->from('srp_erp_expenseclaimmaster');
            $documentCode = $this->db->get()->row_array();


            $datas = array(
                'confirmedYN' => 3,
                /*'confirmedDate' => null,
                'confirmedByEmpID' => null,
                'confirmedByName' => null,*/
            );
            $this->db->where('expenseClaimMasterAutoID', trim($exMasterID));
            $update = $this->db->update('srp_erp_expenseclaimmaster', $datas);
            if ($update) {
                $data = array(
                    'documentID' => "EC",
                    'systemID' => $exMasterID,
                    'documentCode' => $documentCode['expenseClaimCode'],
                    'comment' => $comment,
                    'rejectedLevel' => 1,
                    'rejectByEmpID' => $userID,
                    'rejectByEmpName' => $name,
                    'table_name' => "srp_erp_expenseclaimmaster",
                    'table_unique_field' => "expenseClaimMasterAutoID",
                    'companyID' => $comID,
                    'companyCode' => $comCode,
                    'createdUserGroup' => '',
                    'createdPCID' => '',
                    'createdUserID' => $userID,
                    'createdUserName' => $name,
                    'createdDateTime' => current_date(),
                );
                $this->db->insert('srp_erp_approvalreject', $data);
                return true;
            }

        }
    }

    function update_approval($comment, $status, $id, $table, $feild, $masterid, $userID, $name)
    {
        $updatedata = array(
            'approvedYN' => $status,
            'approvedComments' => $comment,
            'approvedEmpID' => $userID,
            'approvedDate' => current_date()
        );
        $this->db->where('documentApprovedID', $id);
        $res = $this->db->update('srp_erp_documentapproved', $updatedata);
        if ($res) {

            $data['approvedYN'] = $status;
            $data['approvedbyEmpID'] = $userID;
            $data['approvedbyEmpName'] = $name;
            $data['approvedDate'] = current_date();

            $this->db->where($feild, $masterid);
            $this->db->update($table, $data);
            return array('result' => '1');
        }

    }

    function insertTo_rejectApprovel($id, $masterid, $comment, $name, $UserID, $companyID, $level_id)
    {
        $getApprDetails = $this->get_docapproved($id, $companyID);

        $dataArr = array(
            'documentID' => $getApprDetails['documentID'],
            'systemID' => $getApprDetails['documentApprovedID'],
            'documentCode' => $getApprDetails['documentCode'],
            'comment' => $comment,
            'rejectedLevel' => $getApprDetails['approvalLevelID'],
            'rejectByEmpID' => $UserID,
            'rejectByEmpName' => $name,
            'companyID' => $getApprDetails['companyID'],
            'companyCode' => $getApprDetails['companyCode'],
            'table_name' => $getApprDetails['table_name'],
            'table_unique_field' => $getApprDetails['table_unique_field_name'],
            'createdUserID' => $UserID,
            'createdUserName' => $name,
            'createdDateTime' => current_date()
        );
        $updatedata = array(
            'confirmedYN' => '2'
        );
        $docdelete = array(
            'documentApprovedID' => $id
        );
        $dataUpdate = array(
            'confirmedYN' => 2,
            'confirmedByEmpID' => '',
            'confirmedByName' => '',
            'confirmedDate' => current_date(),
            'currentLevelNo' => $level_id,
            'approvedYN' => '0'

        );

        $this->db->trans_start();
        $this->db->insert('srp_erp_approvalreject', $dataArr);
        $this->db->delete('srp_erp_documentapproved', $docdelete);

        $this->db->where(trim($getApprDetails['table_unique_field_name'] ?? ''), $masterid);
        $this->db->update(trim($getApprDetails['table_name'] ?? ''), $dataUpdate);
        $this->db->trans_complete();
        if ($this->db->trans_status() == true) {
            $this->db->trans_commit();
            return true;
        } else {
            $this->db->trans_rollback();
            return false;
        }
    }

    function get_docapproved($id, $companyID)
    {
        $qry3 = "SELECT * FROM `srp_erp_documentapproved` where documentApprovedID='" . $id . "' AND companyID='" . $companyID . "' ";
        $res = $this->db->query($qry3)->row_array();
        return $res;
    }

    function fetch_Designation_head_count($compid)
    {
        $sql16 = "SELECT
        
        srp_designation.DesDescription,
            COUNT(srp_designation.DesDescription)as designationCount
        FROM
            srp_employeesdetails
        JOIN srp_designation on srp_employeesdetails.EmpDesignationId=srp_designation.DesignationID
        WHERE
            srp_employeesdetails.isDischarged = 0 AND 
            srp_employeesdetails.isSystemAdmin = 0 AND 
            srp_employeesdetails.isPayrollEmployee = 1
        AND srp_employeesdetails.Erp_companyID = $compid
        GROUP BY srp_employeesdetails.EmpDesignationId ";
        return $result = $this->db->query($sql16)->result_array();
        return $result;

    }

    function getToDoList($cmpid, $empid)
    {
        $result = $this->db->query("SELECT srp_erp_to_do_list.*,srp_erp_priority_master.priorityDescription FROM `srp_erp_to_do_list` LEFT JOIN srp_erp_priority_master on srp_erp_to_do_list.priority = srp_erp_priority_master.priorityID WHERE startDate >= CURDATE() AND employeeId = '$empid' AND companyId = '$cmpid' AND isCompleated = 0 ORDER BY srp_erp_to_do_list.autoId ASC;")->result_array();
        return $result;
    }

    function update_todolist($id)
    {
        $data['modifiedDateTime'] = current_date();
        $data['isCompleated'] = '1';

        $this->db->where('autoId', $id);
        $results = $this->db->update('srp_erp_to_do_list', $data);
        if ($results) {
            return 'Record updated successfully<br />' . $this->db->last_query();
        } else {
            return 'Error in updating record';
        }
    }

    function get_newmembers($cmpid)
    {
        $result = $this->db->query("
            SELECT
                EIdNo,
                Ename2,
                EmpImage,
                srp_designation.DesDescription,
                (CURDATE() - INTERVAL 1 MONTH) AS onemonth,
                srp_employeesdetails.EDOJ,
                DATE(srp_employeesdetails.EDOJ) AS datecreated
            FROM
                `srp_employeesdetails`
            LEFT JOIN srp_designation ON srp_employeesdetails.EmpDesignationId = srp_designation.DesignationID
            WHERE
                srp_employeesdetails.isDeleted = 0
            AND isActive = 1
            AND srp_employeesdetails.Erp_companyID = '$cmpid'
            HAVING
                EDOJ BETWEEN onemonth and CURDATE()
            Limit 10
            ;")->result_array();
        return $result;
    }

    //=======================================================payslip

    function payrollMonth_dropDown_with_visible_date($companyID, $emp_id, $isNonPayroll = null)
    {
        $tableName = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollmaster' : 'srp_erp_payrollmaster';
        $tableName2 = ($isNonPayroll == 'Y') ? 'srp_erp_non_payrollheaderdetails' : 'srp_erp_payrollheaderdetails';

        /*$payroll_arr = $this->db->query("SELECT DATE_FORMAT(CONCAT(payrollYear,'-',payrollMonth,'-01') , '%Y-%m-%d') AS monthID,
                                 DATE_FORMAT( CONCAT(payrollYear,'-',payrollMonth,'-01') , '%Y - %M') AS monthStr
                                 FROM(
                                    SELECT payrollYear, payrollMonth, DATE_FORMAT( CONCAT(payrollYear,'-',payrollMonth,'-01') , '%Y-%m-%d') payrollDate
                                    FROM {$tableName} WHERE companyID={$companyID} AND approvedYN=1 AND visibleDate <= CURDATE()
                                 ) AS payrollDateTB GROUP BY payrollDate ORDER BY payrollDate DESC")->result_array();*/

        $payroll_arr = $this->db->query("SELECT id, payrollMonth AS `month`,  payrollYear AS `year` FROM (
                                SELECT DATE_FORMAT( CONCAT(payrollYear,'-',payrollMonth,'-01'), '%Y-%m-%d') payrollDate, 
                                mas.payrollMasterID AS id, payrollYear, payrollMonth
                                FROM {$tableName2} AS det
                                JOIN {$tableName} AS mas ON mas.payrollMasterID = det.payrollMasterID
                                WHERE empID = {$emp_id} AND mas.companyID = {$companyID}
                              ) AS t1 ORDER BY payrollDate DESC")->result_array();


        return $payroll_arr;
    }
    function get_paySlipData_profile($payrollID, $isNonPayroll)
    {
        $companyID = Api_spur_ilooops::company_id();
        $empID = Api_spur_ilooops::user_id();

        //$empID = 335; $companyID = 16; $payrollID = 1447;
        $headerTB = ($isNonPayroll != 'Y') ? 'srp_erp_payrollheaderdetails' : 'srp_erp_non_payrollheaderdetails';
        $masterTB = ($isNonPayroll != 'Y') ? 'srp_erp_payrollmaster' : 'srp_erp_non_payrollmaster';
        $current_date = date('Y-m-d');

        $payrollData = $this->db->query("SELECT payrollMaster.* FROM {$headerTB} AS t1
                                       JOIN (
                                          SELECT payrollMasterID AS payID, payrollYear, DATE_FORMAT(concat('2010-',payrollMonth,'-01'), '%M') AS payrollMonth   
                                           FROM {$masterTB} WHERE companyID={$companyID}
                                          AND payrollMasterID={$payrollID} AND visibleDate <= '{$current_date}' AND approvedYN=1
                                       ) AS payrollMaster ON payrollMaster.payID = t1.payrollMasterID
                                       WHERE companyID={$companyID} AND empID={$empID}")->row_array();

        if (empty($payrollData)) {
            return [];
        }


        if ($isNonPayroll != 'Y') {
            $headerTB = 'srp_erp_payrollheaderdetails';
            $payDetailTB = 'srp_erp_payrolldetail';
            $bankTrTB = 'srp_erp_pay_banktransfer';
            $withoutBankTB = 'srp_erp_payroll_salarypayment_without_bank';
        } else {
            $headerTB = 'srp_erp_non_payrollheaderdetails';
            $payDetailTB = 'srp_erp_non_payrolldetail';
            $bankTrTB = 'srp_erp_pay_non_banktransfer';
            $withoutBankTB = 'srp_erp_non_payroll_salarypayment_without_bank';
        }

        $headerDet = $this->db->query("SELECT ECode AS code, Ename2 AS `name`, Designation AS designation, transactionCurrencyID
                                        FROM {$headerTB} WHERE payrollMasterID={$payrollID} AND EmpID={$empID} AND 
                                        {$headerTB}.companyID={$companyID}")->row_array();
        $currencyID = $headerDet['transactionCurrencyID'];
        unset($headerDet['transactionCurrencyID']);
        $currency = $this->db->query("SELECT CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description 
                                           FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
        $currency['decimals'] = (int)$currency['decimals'];

        /*** salary Declarations ***/
        $fixedDeclaration = $this->db->query("SELECT salaryDescription AS description, round(SUM(pay.transactionAmount), pay.transactionCurrencyDecimalPlaces) AS amount                                    
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR  fromTB = 'MA' OR  fromTB = 'VP' OR fromTB = 'BP' OR fromTB = 'OT' OR fromTB = 'EC')  AND detailType = 'A' 
                                        AND transactionAmount != 0 AND pay.companyID={$companyID}                                        
                                        GROUP BY pay.salCatID HAVING amount <> 0")->result_array();
        $fixedDeclaration = $this->type_cast_pay_slip($fixedDeclaration);

        $gross_amount = 0;
        $net_salary = 0;
        if (!empty($fixedDeclaration)) {
            $gross_amount = array_sum(array_column($fixedDeclaration, 'amount'));
            $net_salary = $gross_amount;
        }

        /*** Additions ***/
        $additions = $this->db->query("SELECT monthlyDeclaration AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlyadditiondetail AS mAdd ON mAdd.monthlyAdditionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mAdd.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND fromTB = 'MA' AND calculationTB = 'MA' ")->result_array();
        $additions = $this->type_cast_pay_slip($additions);
        if (!empty($additions)) {
            $gross_amount += array_sum(array_column($additions, 'amount'));
            $net_salary = $gross_amount;
        }

        /*** Deduction ***/
        $deduction = $this->db->query("SELECT salaryDescription AS description, round(SUM(pay.transactionAmount), pay.transactionCurrencyDecimalPlaces) AS amount                                    
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR fromTB = 'MD' OR  fromTB = 'NO-PAY' OR  fromTB = 'LO') AND detailType = 'D'  AND transactionAmount != 0 
                                        AND pay.companyID={$companyID}
                                        GROUP BY pay.salCatID HAVING amount <> 0
                                        UNION ALL 
                                        SELECT monthlyDeclaration AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount  
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlydeductiondetail AS mDed ON mDed.monthlyDeductionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mDed.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND calculationTB = 'MD' AND fromTB = 'MD'
                                        UNION ALL 
                                        SELECT grMaster.description AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount  
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_paygroupmaster AS grMaster ON grMaster.payGroupID = pay.detailTBID
                                        LEFT JOIN (
                                            SELECT * FROM srp_erp_socialinsurancemaster WHERE companyID={$companyID}
                                        ) AS ssoMaster ON ssoMaster.socialInsuranceID = grMaster.socialInsuranceID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND (employerContribution = 0  OR employerContribution is null)
                                        AND fromTB = 'PAY_GROUP' GROUP BY detailTBID")->result_array();

        $deduction = $this->type_cast_pay_slip($deduction);
        if (!empty($deduction)) {
            $net_salary += array_sum(array_column($deduction, 'amount'));
        }

        $image = "images/logo/" . Api_spur_ilooops::company_info()->company_logo;
        $company_logo = $this->s3->createPresignedRequest($image, '1 hour');
        $company_data = [
            'name' => Api_spur_ilooops::company_info()->company_name,
            'address' => Api_spur_ilooops::company_info()->companyPrintAddress,
            'logo' => $company_logo
        ];

        return array(
            'company' => $company_data,
            'payslip_month' => $payrollData['payrollMonth'],
            'payslip_year' => (int)$payrollData['payrollYear'],
            'employee' => $headerDet,
            'currency' => $currency,
            'fixedDeclaration' => $fixedDeclaration,
            'additions' => $additions,
            'gross_amount' => $gross_amount,
            'deduction' => $deduction,
            'net_salary' => $net_salary
        );

    }










    function get_paySlip_profile($payrollID, $isNonPayroll)
    {
        $companyID = Api_spur::company_id();
        $empID = Api_spur::user_id();

        //$empID = 335; $companyID = 16; $payrollID = 1447;
        $headerTB = ($isNonPayroll != 'Y') ? 'srp_erp_payrollheaderdetails' : 'srp_erp_non_payrollheaderdetails';
        $masterTB = ($isNonPayroll != 'Y') ? 'srp_erp_payrollmaster' : 'srp_erp_non_payrollmaster';
        $current_date = date('Y-m-d');

        $payrollData = $this->db->query("SELECT payrollMaster.* FROM {$headerTB} AS t1
                                       JOIN (
                                          SELECT payrollMasterID AS payID, payrollYear, DATE_FORMAT(concat('2010-',payrollMonth,'-01'), '%M') AS payrollMonth   
                                           FROM {$masterTB} WHERE companyID={$companyID}
                                          AND payrollMasterID={$payrollID} AND visibleDate <= '{$current_date}' AND approvedYN=1
                                       ) AS payrollMaster ON payrollMaster.payID = t1.payrollMasterID
                                       WHERE companyID={$companyID} AND empID={$empID}")->row_array();

        if (empty($payrollData)) {
            return [];
        }


        if ($isNonPayroll != 'Y') {
            $headerTB = 'srp_erp_payrollheaderdetails';
            $payDetailTB = 'srp_erp_payrolldetail';
            $bankTrTB = 'srp_erp_pay_banktransfer';
            $withoutBankTB = 'srp_erp_payroll_salarypayment_without_bank';
        } else {
            $headerTB = 'srp_erp_non_payrollheaderdetails';
            $payDetailTB = 'srp_erp_non_payrolldetail';
            $bankTrTB = 'srp_erp_pay_non_banktransfer';
            $withoutBankTB = 'srp_erp_non_payroll_salarypayment_without_bank';
        }

        $headerDet = $this->db->query("SELECT ECode AS code, Ename2 AS `name`, Designation AS designation, transactionCurrencyID
                                        FROM {$headerTB} WHERE payrollMasterID={$payrollID} AND EmpID={$empID} AND 
                                        {$headerTB}.companyID={$companyID}")->row_array();
        $currencyID = $headerDet['transactionCurrencyID'];
        unset($headerDet['transactionCurrencyID']);
        $currency = $this->db->query("SELECT CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description 
                                           FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
        $currency['decimals'] = (int)$currency['decimals'];

        /*** salary Declarations ***/
        $fixedDeclaration = $this->db->query("SELECT salaryDescription AS description, round(SUM(pay.transactionAmount), pay.transactionCurrencyDecimalPlaces) AS amount                                    
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR  fromTB = 'MA' OR  fromTB = 'VP' OR fromTB = 'BP' OR fromTB = 'OT' OR fromTB = 'EC')  AND detailType = 'A' 
                                        AND transactionAmount != 0 AND pay.companyID={$companyID}                                        
                                        GROUP BY pay.salCatID HAVING amount <> 0")->result_array();
        $fixedDeclaration = $this->type_cast_pay_slip($fixedDeclaration);

        $gross_amount = 0;
        $net_salary = 0;
        if (!empty($fixedDeclaration)) {
            $gross_amount = array_sum(array_column($fixedDeclaration, 'amount'));
            $net_salary = $gross_amount;
        }

        /*** Additions ***/
        $additions = $this->db->query("SELECT monthlyDeclaration AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlyadditiondetail AS mAdd ON mAdd.monthlyAdditionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mAdd.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND fromTB = 'MA' AND calculationTB = 'MA' ")->result_array();
        $additions = $this->type_cast_pay_slip($additions);
        if (!empty($additions)) {
            $gross_amount += array_sum(array_column($additions, 'amount'));
            $net_salary = $gross_amount;
        }

        /*** Deduction ***/
        $deduction = $this->db->query("SELECT salaryDescription AS description, round(SUM(pay.transactionAmount), pay.transactionCurrencyDecimalPlaces) AS amount                                    
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR fromTB = 'MD' OR  fromTB = 'NO-PAY' OR  fromTB = 'LO') AND detailType = 'D'  AND transactionAmount != 0 
                                        AND pay.companyID={$companyID}
                                        GROUP BY pay.salCatID HAVING amount <> 0
                                        UNION ALL 
                                        SELECT monthlyDeclaration AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount  
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlydeductiondetail AS mDed ON mDed.monthlyDeductionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mDed.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND calculationTB = 'MD' AND fromTB = 'MD'
                                        UNION ALL 
                                        SELECT grMaster.description AS description, round(pay.transactionAmount, pay.transactionCurrencyDecimalPlaces) AS amount  
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_paygroupmaster AS grMaster ON grMaster.payGroupID = pay.detailTBID
                                        LEFT JOIN (
                                            SELECT * FROM srp_erp_socialinsurancemaster WHERE companyID={$companyID}
                                        ) AS ssoMaster ON ssoMaster.socialInsuranceID = grMaster.socialInsuranceID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND (employerContribution = 0  OR employerContribution is null)
                                        AND fromTB = 'PAY_GROUP' GROUP BY detailTBID")->result_array();

        $deduction = $this->type_cast_pay_slip($deduction);
        if (!empty($deduction)) {
            $net_salary += array_sum(array_column($deduction, 'amount'));
        }

        $image = "images/logo/" . Api_spur::company_info()->company_logo;
        $company_logo = $this->s3->createPresignedRequest($image, '1 hour');
        $company_data = [
            'name' => Api_spur::company_info()->company_name,
            'address' => Api_spur::company_info()->companyPrintAddress,
            'logo' => $company_logo
        ];

        return array(
            'company' => $company_data,
            'payslip_month' => $payrollData['payrollMonth'],
            'payslip_year' => (int)$payrollData['payrollYear'],
            'employee' => $headerDet,
            'currency' => $currency,
            'fixedDeclaration' => $fixedDeclaration,
            'additions' => $additions,
            'gross_amount' => $gross_amount,
            'deduction' => $deduction,
            'net_salary' => $net_salary
        );

    }

    function type_cast_pay_slip($data)
    {
        foreach ($data as $key => $row) {
            $data[$key]['amount'] = (float)$row['amount'];
        }
        return $data;
    }

    function get_paySlip_reports_pdf($payrollID = 0, $empID, $companyID, $isNonPayroll)
    {
        $data['payrollMasterID'] = $payrollID;
        $data['empID'] = $empID;
        $data['isNonPayroll'] = $isNonPayroll;
        $data['masterData'] = $this->getPayrollDetails($payrollID, $isNonPayroll, $companyID);

        return $this->get_empPaySlipDet($empID, $payrollID, $isNonPayroll, $companyID);
    }

    function getPayrollDetails($payrollID, $isNonPayroll = null, $companyID)
    {
        $tableName = ($isNonPayroll != 'Y') ? 'srp_erp_payrollmaster' : 'srp_erp_non_payrollmaster';
        $query = $this->db->select('payrollYear, payrollMonth, documentCode, narration,processDate AS processDate, confirmedYN,
            confirmedByName, approvedYN, approvedbyEmpName, isBankTransferProcessed, templateID, visibleDate AS visibleDate,
            LAST_DAY(CONCAT(payrollYear,"-",payrollMonth,"-01")) AS payrollLastDate')
            ->from($tableName)->where('payrollMasterID', $payrollID)->where('companyID', $companyID)->get();
        return $query->row_array();
    }

    function get_empPaySlipDet($empID, $payrollID, $isNonPayroll, $companyID)
    {

        if ($isNonPayroll != 'Y') {
            $headerTB = 'srp_erp_payrollheaderdetails';
            $payDetailTB = 'srp_erp_payrolldetail';
            $bankTrTB = 'srp_erp_pay_banktransfer';
            $withoutBankTB = 'srp_erp_payroll_salarypayment_without_bank';
        } else {
            $headerTB = 'srp_erp_non_payrollheaderdetails';
            $payDetailTB = 'srp_erp_non_payrolldetail';
            $bankTrTB = 'srp_erp_pay_non_banktransfer';
            $withoutBankTB = 'srp_erp_non_payroll_salarypayment_without_bank';
        }

        $headerDet = $this->db->query("SELECT Ename2 AS empName, Designation, secondaryCode,
                                        if(transactionCurrency = null , transactionCurrency, payCurrency) AS transactionCurrency,
                                        if(transactionCurrencyDecimalPlaces = null, transactionCurrencyDecimalPlaces,
                                        (SELECT DecimalPlaces FROM srp_erp_currencymaster WHERE CurrencyCode = payCurrency )) AS dPlace
                                        FROM {$headerTB} WHERE payrollMasterID={$payrollID} AND EmpID={$empID} AND 
                                        {$headerTB}.companyID={$companyID}")->row_array();

        //salary Declarations
        $salaryDec_A = $this->db->query("SELECT salaryDescription, detailType, sum(pay.transactionAmount) AS transactionAmount,
                                        pay.transactionCurrencyDecimalPlaces AS dPlace, fromTB,pay.salCatID
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR  fromTB = 'VP' OR fromTB = 'BP' OR fromTB = 'OT') AND detailType = 'A' AND transactionAmount != 0 AND pay.companyID={$companyID}
                                        GROUP BY pay.salCatID")->result_array();

        $salaryDec_D = $this->db->query("SELECT salaryDescription, detailType, sum(pay.transactionAmount) AS transactionAmount,
                                        pay.transactionCurrencyDecimalPlaces AS dPlace
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_salarycategories AS cat ON cat.salaryCategoryID = pay.salCatID
                                        WHERE payrollMasterID={$payrollID} AND EmpID={$empID}
                                        AND (fromTB = 'SD' OR  fromTB = 'NO-PAY') AND detailType = 'D'  AND transactionAmount != 0 AND pay.companyID={$companyID}
                                        GROUP BY pay.salCatID ")->result_array();

        //Monthly Addition
        $monthAdd = $this->db->query("SELECT monthlyDeclaration AS description, detailType, pay.transactionAmount, pay.transactionCurrencyDecimalPlaces AS dPlace
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlyadditiondetail AS mAdd ON mAdd.monthlyAdditionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mAdd.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND fromTB = 'MA' ")->result_array();

        //Monthly Deduction
        $monthDec = $this->db->query("SELECT monthlyDeclaration AS description, detailType, pay.transactionAmount, pay.transactionCurrencyDecimalPlaces AS dPlace
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_monthlydeductiondetail AS mDed ON mDed.monthlyDeductionDetailID = pay.detailTBID
                                        JOIN srp_erp_pay_monthlydeclarationstypes AS monDec ON monDec.monthlyDeclarationID = mDed.declarationID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND fromTB = 'MD' ")->result_array();

        //SSO Payee
        $sso_payee = $this->db->query("SELECT grMaster.description, detailType, pay.transactionAmount, pay.transactionCurrencyDecimalPlaces AS dPlace
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_paygroupmaster AS grMaster ON grMaster.payGroupID = pay.detailTBID
                                        LEFT JOIN (
                                            SELECT * FROM srp_erp_socialinsurancemaster WHERE companyID={$companyID}
                                        ) AS ssoMaster ON ssoMaster.socialInsuranceID = grMaster.socialInsuranceID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND (employerContribution = 0  OR employerContribution is null)
                                        AND fromTB = 'PAY_GROUP' GROUP BY detailTBID ")->result_array();

        $employerContributions = [];
        $OT_data = '';
        $isNonPayroll = $this->uri->segment(5);
        /*Get only for Envoy template (Not for Non payroll) */
        if ($isNonPayroll != 'Y') {
            $template = getPolicyValues('PT', 'SP', $companyID);
            if ($template == 'Envoy') {
                $tempData = $this->db->query("SELECT template_tb.id, transactionAmount FROM srp_erp_sso_reporttemplatefields AS template_tb
                                        LEFT JOIN srp_erp_sso_reporttemplatedetails AS setup_tb ON setup_tb.reportID = template_tb.id  
                                        AND setup_tb.companyID={$companyID}
                                        LEFT JOIN srp_erp_payrolldetail AS pay ON setup_tb.reportValue=pay.detailTBID 
                                        AND pay.payrollMasterID={$payrollID} AND pay.empID={$empID} 
                                        WHERE template_tb.id IN (6, 7, 18) ")->result_array();

                foreach ($tempData as $tRow) {
                    $employerContributions[$tRow['id']] = $tRow['transactionAmount'];
                }


                /**** Get Over time hours and minutes */
                $OT_data = $this->db->query("SELECT CONCAT(
		FLOOR(SUM(hourorDays) / 60),
		'h ',
		MOD (SUM(hourorDays), 60),
		'm'
	) AS otHour, salCatID
                                FROM srp_erp_payrolldetail payTb
                                JOIN (
                                    SELECT ID AS attRVID, hourorDays, otDet.empID 
                                    FROM srp_erp_pay_empattendancereview attTB 
                                    JOIN srp_erp_generalotdetail otDet ON attTB.generalOTID = otDet.generalOTMasterID
	AND attTB.empID = otDet.empID AND otDet.salaryCategoryID = attTB.salaryCategoryID
                                    WHERE paymentOT != 0 AND attTB.companyID={$companyID} AND attTB.empID={$empID} AND hourorDays != 0
                                    GROUP BY ID
                                ) AS otTB ON otTB.empID=payTb.empID AND payTb.detailTBID=otTB.attRVID
                                WHERE payrollMasterID={$payrollID} AND fromTB='OT' GROUP BY payTb.salCatID")->result_array();

            }
        }


        //Loan Deduction
        $loanDed = $this->db->query("SELECT installmentNo, loan.loanCode, loanDescription, detailType, pay.transactionAmount,
                                        pay.transactionCurrencyDecimalPlaces AS dPlace
                                        FROM  {$payDetailTB} AS pay
                                        JOIN srp_erp_pay_emploan_schedule AS loan_sch ON loan_sch.ID = pay.detailTBID
                                        JOIN srp_erp_pay_emploan AS loan ON loan.ID = loan_sch.loanID
                                        WHERE payrollMasterID={$payrollID} AND pay.EmpID={$empID} AND pay.companyID={$companyID}
                                        AND fromTB = 'LO'")->result_array();

        $loanIntPending = $this->db->query("SELECT loan.loanCode, loanDescription, count(l_sched.ID) AS pending_Int,
                                            sum(l_sched.transactionAmount) as trAmount
                                            FROM srp_erp_pay_emploan AS loan
                                            JOIN srp_erp_pay_emploan_schedule AS l_sched ON loan.ID = l_sched.loanID
                                            WHERE loan.empID = {$empID} AND l_sched.empID = {$empID} AND approvedYN = 1
                                            AND isClosed != 1 AND isSetteled = 0 AND skipedInstallmentID = 0
                                            GROUP BY loan.loanCode")->result_array();

        //Bank transfer
        $bankTransferDed = $this->db->query("SELECT bankName, accountNo, transactionCurrency, transactionAmount, salaryTransferPer,
                                             transactionCurrencyDecimalPlaces AS dPlace, swiftCode
                                             FROM {$bankTrTB}
                                             WHERE payrollMasterID={$payrollID} AND empID={$empID} AND companyID={$companyID}")->result_array();

        //Salary Paid by cash / cheque
        $salaryNonBankTransfer = $this->db->query("SELECT * FROM {$withoutBankTB} WHERE payrollMasterID={$payrollID} AND empID ={$empID} 
                                                   AND companyID={$companyID}")->row_array();

        return array(
            'headerDet' => $headerDet,
            'salaryDec_A' => $salaryDec_A,
            'salaryDec_D' => $salaryDec_D,
            'monthAdd' => $monthAdd,
            'monthDec' => $monthDec,
            'sso_payee' => $sso_payee,
            'loanDed' => $loanDed,
            'loanIntPending' => $loanIntPending,
            'bankTransferDed' => $bankTransferDed,
            'salaryNonBankTransfer' => $salaryNonBankTransfer,
            'employerContributions' => $employerContributions,
            'OT_data' => $OT_data
        );
    }

    function saveAttendance($userID, $companyID)
    {

        $request_body = file_get_contents('php://input');
        $request = json_decode($request_body);

        $query = $this->db->query("SELECT empMachineID FROM `srp_employeesdetails` where EIdNo =$userID")->row_array();
        $timezone = null;
        $this->db->select('srp_erp_company.defaultTimezoneID, srp_erp_timezonedetail.description');
        $this->db->from('srp_erp_company');
        $this->db->join('srp_erp_timezonedetail', 'srp_erp_timezonedetail.detailID = srp_erp_company.defaultTimezoneID', 'INNER');
        $this->db->where('company_id', $companyID);
        $result = $this->db->get()->row_array();
        if (!empty($result)) {
            //  $timezoneID = $result['defaultTimezoneID'];
            $timezone = $result['description'];
            date_default_timezone_set(trim($timezone));
        } else {
            /** DEFAULT */
            date_default_timezone_set('Asia/Colombo');
            //   $timezone = 'Asia/Colombo';
            // $timezoneID = null;
        }


        $dataArr = array(
            'machineAutoID' => $request->uuid,
            'empMachineID' => $query['empMachineID'],
            'attDate' => current_date(false),
            'attTime' => date('H:i:s'),
            'attDateTime' => current_date(),
            'latitude' => $request->latitude,
            'longitude' => $request->longitude,
            'companyID' => $companyID
        );

        return $this->db->insert('srp_erp_pay_empattendancetemptable', $dataArr);
    }

    function attendanceHistory($userID, $companyID)
    {

        $empMachine = $this->db->query("SELECT empMachineID FROM `srp_employeesdetails` where EIdNo =$userID")->row_array();

        $q = "SELECT longitude,latitude,attDateTime,machineAutoID FROM `srp_erp_pay_empattendancetemptable` where empMachineID ={$empMachine["empMachineID"]} AND companyID = {$companyID}  ORDER By attDateTime DESC  LIMIT 20 ";
        $res = $this->db->query($q)->result_array();
        return $res;

    }

    function Approval_details($documentID, $documentAutoID, $companyID, $userID)
    {
        if(!empty($documentID)) {
            switch ($documentID)
            {
                case 'EC' :
                    $query = $this->db->query("SELECT
	`det`.`transactionAmount` AS `amount`,
	`det`.`empCurrencyID` AS `currencyID`,
	`det`.`empCurrency` AS `currency`,
    CurrencyName AS currencyDescription,
    `det`.`transactionCurrencyDecimalPlaces` AS `transactionCurrencyDecimalPlaces`,
	`srp_erp_expenseclaimmaster`.`expenseClaimMasterAutoID` AS `documentAutoID`,
	`expenseClaimCode` AS documentCode,
	`srp_erp_expenseclaimmaster`.`documentID` AS `documentID`,
 	'1' AS level,
	comments AS comment,
	employeesdetails.ECode AS employeeCode,
	srp_erp_expenseclaimmaster.confirmedByName AS employeeName,
	srp_erp_expenseclaimmaster.confirmedByEmpID AS employeeID,
	DATE_FORMAT( srp_erp_expenseclaimmaster.confirmedDate, \"%y/%m/%d\" ) AS confirmedDate,
	DATE_FORMAT( srp_erp_expenseclaimmaster.createdDateTime, \"%y/%m/%d\" ) AS createdDate,
	srp_erp_expenseclaimmaster.segmentID AS segmentID,
	IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
	IFNULL( segmentmaster.description, '-' ) AS segmentdescription
	FROM
	`srp_erp_expenseclaimmaster`
	LEFT JOIN ( SELECT SUM( empCurrencyAmount ) AS transactionAmount, expenseClaimMasterAutoID, empCurrencyID, empCurrency,transactionCurrencyDecimalPlaces FROM srp_erp_expenseclaimdetails GROUP BY expenseClaimMasterAutoID ) det ON ( `det`.`expenseClaimMasterAutoID` = srp_erp_expenseclaimmaster.expenseClaimMasterAutoID )
	LEFT JOIN srp_employeesdetails employeesdetails ON employeesdetails.EIdNo = srp_erp_expenseclaimmaster.confirmedByEmpID 
	JOIN `srp_erp_employeemanagers` ON `srp_erp_expenseclaimmaster`.`claimedByEmpID` = `srp_erp_employeemanagers`.`empID`
	LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_expenseclaimmaster.segmentID
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = det.empCurrencyID
WHERE
	`srp_erp_expenseclaimmaster`.`companyID` = {$companyID} 
	AND `srp_erp_expenseclaimmaster`.`confirmedYN` = 1 
	AND `srp_erp_expenseclaimmaster`.`approvedYN` = '0' 
	AND `srp_erp_employeemanagers`.`managerID` = {$userID}
	AND `srp_erp_employeemanagers`.`active` = 1
	AND `srp_erp_expenseclaimmaster`.`expenseClaimMasterAutoID` = {$documentAutoID} ")->row_array();

                    $x = array();
                    if($query){
                        $currency_arr = array();
                        $segment_arr = array();
                        foreach (array_keys($query) as $item){

                            switch ($item) {
                                CASE 'amount' :
                                    $x[$item] = (double)$query[$item];
                                    BREAK;

                                CASE 'documentAutoID' : CASE 'companyID' : CASE 'level' :
                                $x[$item] = (int)$query[$item];
                                BREAK;

                                CASE 'currencyID' :
                                    if(!empty($query[$item])) {
                                        $currency_arr['currencyID'] = (int)$query['currencyID'];
                                        $currency_arr['code'] = $query['currency'];
                                        $currency_arr['description'] = $query['currencyDescription'];
                                        $currency_arr['decimalPlaces'] = (int)$query['transactionCurrencyDecimalPlaces'];
                                    } else {
                                        $currencyID = current_company_default_currencyID();
                                        $currency_arr['currencyID'] = (int)$currencyID;
                                        $currency_arr['code'] = fetch_currency_code($currencyID);
                                        $currency_arr['description'] = fetch_currency_dec($currency_arr['code']);
                                        $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                    }
                                    BREAK;

                                CASE 'segmentID' :
                                    if(!empty($query[$item])) {
                                        $segment_arr['segmentID'] = (int)$query['segmentID'];
                                        $segment_arr['code'] = $query['segmentcodedes'];
                                        $segment_arr['description'] = $query['segmentdescription'];
                                    } else {
                                        $segment_arr = null;
                                    }
                                    BREAK;

                                CASE 'currency' :
                                CASE 'currencyDescription' :
                                CASE 'transactionCurrencyDecimalPlaces' :
                                CASE 'segmentcodedes' :
                                CASE 'segmentdescription' :
                                    break;

                                DEFAULT :
                                    $x[$item] = $query[$item];
                            }
                            $x['currency']=$currency_arr;
                            $x['segment']=$segment_arr;
                            $x['table']='srp_erp_expenseclaimmaster';
                            $x['field']='expenseClaimMasterAutoID';
                        }

                        $details = $this->db->query("SELECT
	srp_erp_expenseclaimdetails.description,
	referenceNo,
	transactionAmount,
	category.claimcategoriesDescription AS category,
	CONCAT( segmentmaster.segmentCode, ' - ', segmentmaster.description ) AS segment,
	transactionCurrencyID AS currencyID,
	transactionCurrency AS CODE,
	CurrencyName AS currencyDescription,
	transactionCurrencyDecimalPlaces AS decimalPlaces 
FROM
	srp_erp_expenseclaimdetails
	LEFT JOIN srp_erp_expenseclaimcategories AS category ON category.expenseClaimCategoriesAutoID = srp_erp_expenseclaimdetails.expenseClaimCategoriesAutoID
	LEFT JOIN srp_erp_segment segmentmaster ON segmentmaster.segmentID = srp_erp_expenseclaimdetails.segmentID
	LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_expenseclaimdetails.transactionCurrencyID 
WHERE
	srp_erp_expenseclaimdetails.companyID = {$companyID} 
	AND expenseClaimMasterAutoID = {$documentAutoID}")->result_array();

                        $x['details'] = array();
                        foreach ($details AS $val){
                            $a = array();
                            $currency_arr = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'transactionAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    CASE 'currencyID' :
                                        if(!empty($val[$det])) {
                                            $currency_arr['currencyID'] = (int)$val['currencyID'];
                                            $currency_arr['code'] = $val['CODE'];
                                            $currency_arr['description'] = $val['currencyDescription'];
                                            $currency_arr['decimalPlaces'] = (int)$val['decimalPlaces'];
                                        } else {
                                            $currencyID = current_company_default_currencyID();
                                            $currency_arr['currencyID'] = (int)$currencyID;
                                            $currency_arr['code'] = fetch_currency_code($currencyID);
                                            $currency_arr['description'] = fetch_currency_dec($currency_arr['code']);
                                            $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                        }
                                        BREAK;

                                    CASE 'CODE' :
                                    CASE 'currencyDescription' :
                                    CASE 'decimalPlaces' :
                                        break;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                                $a['currency'] = $currency_arr;
                            }
                            array_push($x['details'], $a);
                        }

                        $attachment_data = $this->db->query("SELECT
	attachmentID AS id,
	fileType AS type,
	myFileName AS fileName,
	attachmentDescription AS descripiton 
FROM
	srp_erp_documentattachments 
WHERE
	companyID = {$companyID} 
	AND documentID = '{$documentID}' 
	AND documentSystemCode = {$documentAutoID}")->result_array();

                        $x['attachments'] = array();
                        if(!empty($attachment_data)){
                            foreach ($attachment_data AS $var){
                                $attachmentLink = $this->s3->createPresignedRequest($var['fileName'], '1 hour');
                                $attachments = array(
                                    'id' => $var['id'],
                                    'link' => $attachmentLink,
                                    'type' => $var['type'],
                                    'fileName' => $var['fileName'],
                                    'descripiton' => $var['descripiton']
                                );

                                array_push($x['attachments'], $attachments);
                            }
                        }
                    }
                    return $x;

                    BREAK;

                case 'LA' :
                    $setupData = $this->getLeaveApprovalSetup('', $companyID);
                    $approvalLevel = $setupData['approvalLevel'];
                    $approvalSetup = $setupData['approvalSetup'];
                    $approvalEmp_arr = $setupData['approvalEmp'];
                    $empID = $userID;
                    $x = 0;
                    $str = 'CASE';
                    while($x < $approvalLevel) {
                        $level = $x + 1;
                        $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                        $arr = array_map(function ($k) use ($approvalSetup) {
                            return $approvalSetup[$k];
                        }, $keys);

                        $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                        if($approvalType == 3){
                            /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                            $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                            $hrManagerID = array_column($hrManagerID, 'empID');

                            if(!empty($hrManagerID)){
                                $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( ';
                                foreach($hrManagerID as $key=>$hrManagerRow){
                                    $str .= ($key > 0)? ' OR': '';
                                    $str .= ' ( \''.$empID.'\' = '.$hrManagerRow.')';
                                }
                                $str .= ' , 1, 0 ) ';
                            }
                        }
                        else{
                            $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( '.$managerType.' = '.$empID.', 1, 0 ) ';
                        }

                        $x++;
                    }
                    $str .= 'END AS isInApproval';

                    $query = $this->db->query("SELECT
	leaveMasterID AS documentAutoID,
	`documentCode`,
	'LA' AS documentID,
	`currentLevelNo` AS level,
	`ECode` AS employeeCode,
	`empName` AS employeeName,
	`empID` AS employeeID,
	comments AS comment,
	createdDateTime AS createdDate,
	confirmedDate AS confirmedDate,
	leaveType AS leaveType,
	ishalfDay AS isHalfDay,
	CASE
		WHEN ( leaveType = 'Short Leave' ) THEN
		1 
		ELSE
		0
	END AS isShortLeave,
	CASE
		WHEN ( shift = 1 ) THEN
		'Morning' 
		WHEN ( shift = 2 ) THEN
		'Evening' 
	END AS shift ,
	leaveAvailable,
	days AS leaveApplied,
	(leaveAvailable - days) AS leaveBalance,
	startDate AS startDate,
	endDate,
	`coveringEmp` AS coveringEmployee
FROM
	(
	SELECT
		*, {$str}
	FROM
		(
		SELECT
			leaveMasterID,
			lMaster.`documentCode`,
			`currentLevelNo`,
			empTB.ECode,
			empTB.`Ename2` AS `empName`,
			`lMaster`.`empID`,
			comments,
			DATE_FORMAT( lMaster.createdDateTime, \"%Y/%m/%d\" ) AS createdDateTime,
			DATE_FORMAT( lMaster.confirmedDate, \"%Y/%m/%d\" ) AS confirmedDate,
			srp_erp_leavetype.description AS leaveType,
			ishalfDay,
			shift,
			leaveAvailable,
			days,
			DATE_FORMAT( startDate, \"%Y/%m/%d\" ) AS startDate,
			DATE_FORMAT( endDate, \"%Y/%m/%d\" ) AS endDate,
			coveringEmp.Ename2 AS coveringEmp,
			`repManager` 
		FROM
			srp_erp_leavemaster AS lMaster
			JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
			LEFT JOIN ( SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers WHERE active = 1 AND companyID = $companyID ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID
			LEFT JOIN srp_erp_segment segmentmaster ON segmentmaster.segmentID = lMaster.segmentID
			LEFT JOIN srp_erp_leavetype ON lMaster.leaveTypeID = srp_erp_leavetype.leaveTypeID
			LEFT JOIN srp_employeesdetails AS coveringEmp ON coveringEmp.EIdNo = lMaster.coveringEmpID 
		WHERE
			lMaster.companyID = {$companyID} 
			AND lMaster.confirmedYN = 1 
			AND lMaster.approvedYN = '0' 
			AND lMaster.leaveMasterID = {$documentAutoID} 
		) AS leaveData
		LEFT JOIN ( SELECT managerID AS topManager, empID AS topEmpID FROM srp_erp_employeemanagers WHERE companyID = {$companyID} AND active = 1 ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID 
	) AS t1 
WHERE
	`t1`.`isInApproval` = 1")->row_array();

                    $x =array();
                    if(!empty($query)) {
                        foreach (array_keys($query) as $item){
                            switch ($item) {
                                CASE 'documentAutoID' : CASE 'isHalfDay' :
                                CASE 'isShortLeave' : CASE 'level' :
                                    $x[$item] = (int)$query[$item];
                                    BREAK;

                                CASE 'leaveAvailable' : CASE 'leaveApplied' :
                                CASE 'leaveBalance' :
                                    $x[$item] = (float)$query[$item];
                                    BREAK;

                                DEFAULT :
                                    $x[$item] = $query[$item];
                            }
                        }

                        $x['table']='srp_erp_leavemaster';
                        $x['field']='leaveMasterID';

                        $attachment_data = $this->db->query("SELECT
                                                attachmentID AS id,
                                                fileType AS type,
                                                myFileName AS fileName,
                                                attachmentDescription AS descripiton 
                                            FROM
                                                srp_erp_documentattachments 
                                            WHERE
                                                companyID = {$companyID} 
                                                AND documentID = '{$documentID}' 
                                                AND documentSystemCode = {$documentAutoID}")->result_array();

                        $x['attachments'] = array();
                        if(!empty($attachment_data)){
                            foreach ($attachment_data AS $var){
                                $attachmentLink = $this->s3->createPresignedRequest($var['fileName'], '1 hour');
                                $attachments = array(
                                    'id' => $var['id'],
                                    'link' => $attachmentLink,
                                    'type' => $var['type'],
                                    'fileName' => $var['fileName'],
                                    'descripiton' => $var['descripiton']
                                );

                                array_push($x['attachments'], $attachments);
                            }
                        }
                    }

                    return $x;
                    BREAK;

                case 'LAC' :
                    $setupData = $this->getLeaveApprovalSetup('', $companyID);
                    $approvalLevel = $setupData['approvalLevel'];
                    $approvalSetup = $setupData['approvalSetup'];
                    $approvalEmp_arr = $setupData['approvalEmp'];
                    $empID = $userID;
                    $x = 0;
                    $str = 'CASE';
                    while($x < $approvalLevel) {
                        $level = $x + 1;
                        $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                        $arr = array_map(function ($k) use ($approvalSetup) {
                            return $approvalSetup[$k];
                        }, $keys);

                        $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                        if($approvalType == 3){
                            /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                            $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                            $hrManagerID = array_column($hrManagerID, 'empID');

                            if(!empty($hrManagerID)){
                                $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( ';
                                foreach($hrManagerID as $key=>$hrManagerRow){
                                    $str .= ($key > 0)? ' OR': '';
                                    $str .= ' ( \''.$empID.'\' = '.$hrManagerRow.')';
                                }
                                $str .= ' , 1, 0 ) ';
                            }
                        }
                        else{
                            $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                            $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( '.$managerType.' = '.$empID.', 1, 0 ) ';
                        }


                        $x++;
                    }
                    $str .= 'END AS isInApproval';

                    $query = $this->db->query("SELECT
	leaveMasterID AS documentAutoID,
	`documentCode`,
	'LA' AS documentID,
	`currentLevelNo` AS level,
	`ECode` AS employeeCode,
	`empName` AS employeeName,
	`empID` AS employeeID,
	comments AS comment,
	createdDateTime AS createdDate,
	confirmedDate AS confirmedDate,
	leaveType AS leaveType,
	ishalfDay AS isHalfDay,
	CASE
		WHEN ( leaveType = 'Short Leave' ) THEN
		1 
		ELSE
		0
	END AS isShortLeave,
	CASE
		WHEN ( shift = 1 ) THEN
		'Morning' 
		WHEN ( shift = 2 ) THEN
		'Evening' 
	END AS shift ,
	leaveAvailable,
	days AS leaveApplied,
	(leaveAvailable - days) AS leaveBalance,
	startDate AS startDate,
	endDate,
	`coveringEmp` AS coveringEmployee
FROM
	(
	SELECT
		*, {$str}
	FROM
		(
		SELECT
			leaveMasterID,
			lMaster.`documentCode`,
			`currentLevelNo`,
			empTB.ECode,
			empTB.`Ename2` AS `empName`,
			`lMaster`.`empID`,
			cancelRequestComment AS comments,
			DATE_FORMAT( lMaster.createdDateTime, \"%Y/%m/%d\" ) AS createdDateTime,
			DATE_FORMAT( lMaster.confirmedDate, \"%Y/%m/%d\" ) AS confirmedDate,
			srp_erp_leavetype.description AS leaveType,
			ishalfDay,
			shift,
			leaveAvailable,
			days,
			DATE_FORMAT( startDate, \"%Y/%m/%d\" ) AS startDate,
			DATE_FORMAT( endDate, \"%Y/%m/%d\" ) AS endDate,
			coveringEmp.Ename2 AS coveringEmp,
			`repManager` 
		FROM
			srp_erp_leavemaster AS lMaster
			JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
			LEFT JOIN ( SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers WHERE active = 1 AND companyID = $companyID ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID
			LEFT JOIN srp_erp_segment segmentmaster ON segmentmaster.segmentID = lMaster.segmentID
			LEFT JOIN srp_erp_leavetype ON lMaster.leaveTypeID = srp_erp_leavetype.leaveTypeID
			LEFT JOIN srp_employeesdetails AS coveringEmp ON coveringEmp.EIdNo = lMaster.coveringEmpID 
		WHERE
			lMaster.companyID = {$companyID} 
			AND lMaster.confirmedYN = 1 
			AND lMaster.approvedYN = 1 
			AND lMaster.cancelledYN = 0 
			AND requestForCancelYN = 1
			AND lMaster.leaveMasterID = {$documentAutoID} 
		) AS leaveData
		LEFT JOIN ( SELECT managerID AS topManager, empID AS topEmpID FROM srp_erp_employeemanagers WHERE companyID = {$companyID} AND active = 1 ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID 
	) AS t1 
WHERE
	`t1`.`isInApproval` = 1")->row_array();

                    $x =array();
                    if(!empty($query)) {
                        foreach (array_keys($query) as $item){
                            switch ($item) {
                                CASE 'documentAutoID' : CASE 'isHalfDay' :
                                CASE 'isShortLeave' : CASE 'level' :
                                    $x[$item] = (int)$query[$item];
                                    BREAK;

                                CASE 'leaveAvailable' : CASE 'leaveApplied' :
                                CASE 'leaveBalance' :
                                    $x[$item] = (float)$query[$item];
                                    BREAK;

                                DEFAULT :
                                    $x[$item] = $query[$item];
                            }
                        }

                        $x['table']='srp_erp_leavemaster';
                        $x['field']='leaveMasterID';

                        $attachment_data = $this->db->query("SELECT
                                                attachmentID AS id,
                                                fileType AS type,
                                                myFileName AS fileName,
                                                attachmentDescription AS descripiton 
                                            FROM
                                                srp_erp_documentattachments 
                                            WHERE
                                                companyID = {$companyID} 
                                                AND documentID = '{$documentID}' 
                                                AND documentSystemCode = {$documentAutoID}")->result_array();

                        $x['attachments'] = array();
                        if(!empty($attachment_data)){
                            foreach ($attachment_data AS $var){
                                $attachmentLink = $this->s3->createPresignedRequest($var['fileName'], '1 hour');
                                $attachments = array(
                                    'id' => $var['id'],
                                    'link' => $attachmentLink,
                                    'type' => $var['type'],
                                    'fileName' => $var['fileName'],
                                    'descripiton' => $var['descripiton']
                                );

                                array_push($x['attachments'], $attachments);
                            }
                        }
                    }

                    return $x;
                    BREAK;

                case 'BSI' :
                    $query = $this->db->query("SELECT
     (((( IFNULL( addondet.taxPercentage, 0 )/ 100)*(
                    IFNULL( det.transactionAmount, 0 )-((
                            IFNULL( generalDiscountPercentage, 0 )/ 100 
                        )* IFNULL( det.transactionAmount, 0 ))))+ IFNULL( det.transactionAmount, 0 ))-((
            IFNULL( generalDiscountPercentage, 0 )/ 100 
    )* IFNULL( det.transactionAmount, 0 ))) AS `amount`,
	transactionCurrencyID AS `currencyID`,
	transactionCurrency AS `currency`,
	CurrencyName AS currencyDescription,
	`srp_erp_paysupplierinvoicemaster`.`transactionCurrencyDecimalPlaces` AS `transactionCurrencyDecimalPlaces`,
	`srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` AS `documentAutoID`,
	`srp_erp_paysupplierinvoicemaster`.`supplierName` AS `supplierName`,
	`srp_erp_paysupplierinvoicemaster`.`generalDiscountPercentage` AS `generalDiscountPercentage`,
	`srp_erp_paysupplierinvoicemaster`.`bookingDate` AS `documentDate`,
	`srp_erp_paysupplierinvoicemaster`.`invoiceDueDate` AS `invoiceDueDate`,
	`srp_erp_paysupplierinvoicemaster`.`supplierInvoiceNo` AS `supplierInvoiceNo`,
	`srp_erp_paysupplierinvoicemaster`.`supplierInvoiceDate` AS `supplierInvoiceDate`,
	`srp_erp_paysupplierinvoicemaster`.`RefNo` AS `ref`,
	`bookingInvCode` AS documentCode,
	`srp_erp_paysupplierinvoicemaster`.`documentID` AS `documentID`,
	'1' AS level,
	comments AS comment,
	employeesdetails.ECode AS employeeCode,
	srp_erp_paysupplierinvoicemaster.confirmedByName AS employeeName,
	srp_erp_paysupplierinvoicemaster.confirmedByEmpID AS employeeID,
	DATE_FORMAT( srp_erp_paysupplierinvoicemaster.confirmedDate, \"%y/%m/%d\" ) AS confirmedDate,
	DATE_FORMAT( srp_erp_paysupplierinvoicemaster.createdDateTime, \"%y/%m/%d\" ) AS createdDate,
	srp_erp_paysupplierinvoicemaster.segmentID AS segmentID,
	IFNULL( segmentmaster.segmentCode, '-' ) AS segmentcodedes,
	IFNULL( segmentmaster.description, '-' ) AS segmentdescription 
FROM
	`srp_erp_paysupplierinvoicemaster`
	LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID ) det ON ( `det`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID )
	LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID )
	LEFT JOIN srp_employeesdetails employeesdetails ON employeesdetails.EIdNo = srp_erp_paysupplierinvoicemaster.confirmedByEmpID
	LEFT JOIN srp_erp_segment segmentmaster ON segmentmaster.segmentID = srp_erp_paysupplierinvoicemaster.segmentID
	LEFT JOIN srp_erp_currencymaster currencymaster ON currencymaster.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID 
WHERE
	`srp_erp_paysupplierinvoicemaster`.`companyID` = {$companyID}  
	AND `srp_erp_paysupplierinvoicemaster`.`confirmedYN` = 1 
	AND `srp_erp_paysupplierinvoicemaster`.`approvedYN` = '0' 
    AND `srp_erp_paysupplierinvoicemaster`.`InvoiceAutoID` = {$documentAutoID}")->row_array();

                    $x = array();
                    if($query){
                        $currency_arr = array();
                        $segment_arr = array();
                        foreach (array_keys($query) as $item){

                            switch ($item) {
                                CASE 'amount' :
                                    $x[$item] = (double)$query[$item];
                                    BREAK;

                                CASE 'generalDiscountPercentage' :
                                    $x[$item] = (float)$query[$item];
                                    BREAK;

                                CASE 'documentAutoID' : CASE 'companyID' : CASE 'level' : CASE 'employeeID' :
                                $x[$item] = (int)$query[$item];
                                BREAK;

                                CASE 'currencyID' :
                                    if(!empty($query[$item])) {
                                        $currency_arr['currencyID'] = (int)$query['currencyID'];
                                        $currency_arr['code'] = $query['currency'];
                                        $currency_arr['description'] = $query['currencyDescription'];
                                        $currency_arr['decimalPlaces'] = (int)$query['transactionCurrencyDecimalPlaces'];
                                    } else {
                                        $currencyID = current_company_default_currencyID();
                                        $currency_arr['currencyID'] = (int)$currencyID;
                                        $currency_arr['code'] = fetch_currency_code($currencyID);
                                        $currency_arr['description'] = fetch_currency_dec($currency_arr['code']);
                                        $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                    }
                                    BREAK;

                                CASE 'segmentID' :
                                    if(!empty($query[$item])) {
                                        $segment_arr['segmentID'] = (int)$query['segmentID'];
                                        $segment_arr['code'] = $query['segmentcodedes'];
                                        $segment_arr['description'] = $query['segmentdescription'];
                                    } else {
                                        $segment_arr = null;
                                    }
                                    BREAK;

                                CASE 'currency' :
                                CASE 'currencyDescription' :
                                CASE 'transactionCurrencyDecimalPlaces' :
                                CASE 'segmentcodedes' :
                                CASE 'segmentdescription' :
                                    break;

                                DEFAULT :
                                    $x[$item] = $query[$item];
                            }
                            $x['currency']=$currency_arr;
                            $x['segment']=$segment_arr;
                            $x['table']='srp_erp_paysupplierinvoicemaster';
                            $x['field']='InvoiceAutoID';
                        }

                        $details = $this->db->query("SELECT
                    srp_erp_paysupplierinvoicedetail.InvoiceAutoID,
                    srp_erp_paysupplierinvoicedetail.InvoiceDetailAutoID,
                    srp_erp_paysupplierinvoicedetail.description,
                    type, itemAutoID,
                    GLAutoID, systemGLCode, GLDescription, GLCode, GLType,
                    srp_erp_paysupplierinvoicedetail.transactionAmount,
                    srp_erp_paysupplierinvoicedetail.segmentID,
                    transactionCurrencyID AS currencyID,
                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                    srp_erp_segment.segmentCode,
                    defaultUOMID, defaultUOM, UnitDes, conversionRateUOMID,
                    srp_erp_paysupplierinvoicedetail.discountAmount,
                    srp_erp_paysupplierinvoicedetail.discountPercentage,
                    srp_erp_paysupplierinvoicedetail.requestedQty,
                    srp_erp_paysupplierinvoicedetail.unittransactionAmount
                FROM
                    srp_erp_paysupplierinvoicedetail
                    LEFT JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = srp_erp_paysupplierinvoicedetail.InvoiceAutoID
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID
                    LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_paysupplierinvoicedetail.segmentID
                    LEFT JOIN srp_erp_unit_of_measure ON srp_erp_unit_of_measure.UnitID = srp_erp_paysupplierinvoicedetail.defaultUOMID
                WHERE
                    srp_erp_paysupplierinvoicedetail.companyID = {$companyID} 
                    AND srp_erp_paysupplierinvoicedetail.InvoiceAutoID = {$documentAutoID}")->result_array();

                        $x['details'] = array();
                        foreach ($details AS $val){
                            $a = array();
                            $uom_arr = array();
                            $glCode_arr = array();
                            $item_arr = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'InvoiceAutoID' : CASE 'InvoiceDetailAutoID' : CASE 'segmentID' : CASE 'currencyID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'defaultUOMID' :
                                        if(!empty($val['defaultUOMID'])) {
                                            $uom_arr['UnitID'] = (int)$val['defaultUOMID'];
                                            $uom_arr['UnitShortCode'] = $val['defaultUOM'];
                                            $uom_arr['UnitDes'] = $val['UnitDes'];
                                            $uom_arr['conversion'] = $val['conversionRateUOMID'];
                                        } else {
                                            $uom_arr = null;
                                        }
                                        BREAK;

                                    CASE 'type' :
                                        if(trim($val['type'] ?? '') == 'GL') {
                                            $item_arr = null;

                                            $a[$det] = $val[$det];
                                            $glCode_arr['GLAutoID'] = (int)$val['GLAutoID'];
                                            $glCode_arr['systemAccountCode'] = $val['systemGLCode'];
                                            $glCode_arr['GLSecondaryCode'] = $val['GLCode'];
                                            $glCode_arr['GLDescription'] = $val['GLDescription'];
                                            $glCode_arr['subCategory'] = $val['GLType'];
                                        } else {
                                            $glCode_arr = null;

                                            $a[$det] = $val[$det];
                                            $itemData = $this->db->query("SELECT
                            srp_erp_itemmaster.mainCategory as mainCategory,mainCategoryID,subcategoryID,seconeryItemCode,subSubCategoryID,
                            CONCAT( IFNULL(itemDescription,'empty'), ' - ', IFNULL(itemSystemCode,'empty'), ' - ', IFNULL(partNo,'empty')  , ' - ', IFNULL(seconeryItemCode,'empty')) AS 'Match',
                            revanueGLCode,itemSystemCode,costGLCode,assteGLCode,defaultUnitOfMeasure,defaultUnitOfMeasureID,itemDescription,
                            srp_erp_itemmaster.itemAutoID,srp_erp_itemmaster.currentStock,companyLocalWacAmount,companyLocalSellingPrice,
                            isSubitemExist,
                            srp_erp_itemcategory.categoryTypeID,
                            srp_erp_itemmaster.secondaryUOMID as secondaryUOMID,
                            itemledgercurrent.currentstock AS itemledgstock 
                    FROM srp_erp_itemmaster
                    LEFT JOIN srp_erp_itemcategory ON srp_erp_itemmaster.mainCategoryID = srp_erp_itemcategory.itemCategoryID
                    LEFT JOIN (SELECT IF (mainCategory = 'Inventory',(TRIM(TRAILING '.' FROM TRIM(TRAILING 0 FROM(ROUND(SUM(transactionQTY / convertionRate), 4))))), ' ') AS currentstock, srp_erp_itemledger.itemAutoID FROM `srp_erp_itemledger`
                    LEFT JOIN srp_erp_itemmaster on srp_erp_itemmaster.itemAutoID = srp_erp_itemledger.itemAutoID
                                        GROUP BY srp_erp_itemledger.itemAutoID)itemledgercurrent on itemledgercurrent.itemAutoID = srp_erp_itemmaster.itemAutoID
                    WHERE srp_erp_itemmaster.itemAutoID = {$val['itemAutoID']}")->row_array();

                                            $item_arr['itemAutoID'] = (int)$val['itemAutoID'];
                                            $item_arr['requestedQty'] = (float)$val['requestedQty'];
                                            $item_arr['unittransactionAmount'] = (float)$val['unittransactionAmount'];
                                            $item_arr['mainCategory'] = $itemData['mainCategory'];
                                            $item_arr['secondaryItemCode'] = $itemData['seconeryItemCode'];
                                            $item_arr['revanueGLCode'] = $itemData['revanueGLCode'];
                                            $item_arr['itemSystemCode'] = $itemData['itemSystemCode'];
                                            $item_arr['itemDescription'] = $itemData['itemDescription'];
                                        }
                                        BREAK;

                                    CASE 'transactionAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    CASE 'discountPercentage' :    CASE 'decimalPlaces' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'discountAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    CASE 'itemAutoID' :
                                    CASE 'defaultUOM' : CASE 'UnitDes' : CASE 'conversionRateUOMID' :
                                    CASE 'requestedQty' : CASE 'unittransactionAmount' :
                                    CASE 'GLAutoID' : CASE 'systemGLCode' : CASE 'GLCode' : CASE 'GLDescription' : CASE 'GLType' :
                                    break;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                                $a['selectedUOM'] = $uom_arr;
                                $a['GLCode'] = $glCode_arr;
                                $a['itemCode'] = $item_arr;
                            }
                            array_push($x['details'], $a);
                        }

                        $attachment_data = $this->db->query("SELECT
	attachmentID AS id,
	fileType AS type,
	myFileName AS fileName,
	attachmentDescription AS descripiton 
FROM
	srp_erp_documentattachments 
WHERE
	companyID = {$companyID} 
	AND documentID = '{$documentID}' 
	AND documentSystemCode = {$documentAutoID}")->result_array();

                        $x['attachments'] = array();
                        if(!empty($attachment_data)){
                            foreach ($attachment_data AS $var){
                                $attachmentLink = $this->s3->createPresignedRequest($var['fileName'], '1 hour');
                                $attachments = array(
                                    'id' => $var['id'],
                                    'link' => $attachmentLink,
                                    'type' => $var['type'],
                                    'fileName' => $var['fileName'],
                                    'descripiton' => $var['descripiton']
                                );

                                array_push($x['attachments'], $attachments);
                            }
                        }

                        $addon_data = $this->db->query("SELECT
	srp_erp_paysupplierinvoicetaxdetails.InvoiceAutoID,
	srp_erp_paysupplierinvoicetaxdetails.taxDetailAutoID,
	srp_erp_paysupplierinvoicetaxdetails.taxMasterAutoID,
	transactionAmount,
	taxDescription,
	taxShortCode,
	taxPercentage,
	systemGLCode,
	transactionCurrencyID AS currencyID,
	transactionCurrency AS currency,
	CurrencyName AS currencyDescription,
	transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces
FROM
	srp_erp_paysupplierinvoicetaxdetails
	LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_paysupplierinvoicetaxdetails.transactionCurrencyID
	WHERE 
    srp_erp_paysupplierinvoicetaxdetails.companyID =  {$companyID} 
	AND srp_erp_paysupplierinvoicetaxdetails.invoiceAutoID = '{$documentAutoID}'")->result_array();

                        $x['addon'] = array();
                        if(!empty($addon_data)){
                            foreach ($addon_data as $det){
                                $tax_arr = array();
                                foreach (array_keys($det) as $tax)
                                    switch ($det) {
                                        CASE 'transactionAmount' :
                                            $tax_arr[$tax] = (double)$det[$tax];
                                            BREAK;

                                        CASE 'InvoiceAutoID' :  CASE 'taxDetailAutoID' :  CASE 'taxMasterAutoID' :
                                        $tax_arr[$tax] = (int)$det[$tax];
                                        BREAK;

                                        CASE 'currencyID' :
                                            if(!empty($det[$tax])) {
                                                $taxcurrency_arr['currencyID'] = (int)$det['currencyID'];
                                                $taxcurrency_arr['code'] = $det['currency'];
                                                $taxcurrency_arr['description'] = $det['currencyDescription'];
                                                $taxcurrency_arr['decimalPlaces'] = (int)$det['transactionCurrencyDecimalPlaces'];
                                            } else {
                                                $taxcurrency_arr = null;
                                            }
                                            BREAK;

                                        CASE 'currency' :
                                        CASE 'currencyDescription' :
                                        CASE 'transactionCurrencyDecimalPlaces' :
                                        CASE 'currencyID' :
                                            break;

                                        DEFAULT :
                                            $tax_arr[$tax] = $det[$tax];
                                    }
//                var_dump($addon_data);
                                array_push($x['addon'], $tax_arr);
                            }
                        }
                        /*
                        $x['addon'] = array();
                        if(!empty($addon_data)){
                            foreach (array_keys($addon_data) as $tax){
                                $tax_arr = array();
                                switch ($tax) {
                                    CASE 'transactionAmount' :
                                        $tax_arr[$tax] = (double)$addon_data[$tax];
                                        BREAK;

                                    CASE 'InvoiceAutoID' :
                                        $tax_arr[$tax] = (int)$addon_data[$tax];
                                        BREAK;

                                    CASE 'currencyID' :
                                        if(!empty($addon_data[$tax])) {
                                            $taxcurrency_arr['currencyID'] = (int)$addon_data['currencyID'];
                                            $taxcurrency_arr['code'] = $addon_data['currency'];
                                            $taxcurrency_arr['description'] = $addon_data['currencyDescription'];
                                            $taxcurrency_arr['decimalPlaces'] = (int)$addon_data['transactionCurrencyDecimalPlaces'];
                                        } else {
                                            $taxcurrency_arr = null;
                                        }
                                        BREAK;

                                    CASE 'currency' :
                                    CASE 'currencyDescription' :
                                    CASE 'transactionCurrencyDecimalPlaces' :
                                    CASE 'currencyID' :
                                        break;

                                    DEFAULT :
                                        $tax_arr[$tax] = $addon_data[$tax];
                                }
                                array_push($x['addon'], $tax_arr);
                            }
                        }*/
                    }
                    return $x;

                    BREAK;
            }
        }
    }

    function posSalesWithItems_details($date, $companyID)
    {
        $combined_list = array();
        $master = $this->db->query("SELECT
                                            invoice.invoiceID,
                                            'JC' AS PropertyCode,
                                            'JC-POS-000001' AS POSInterfaceCode,
                                             DATE_FORMAT(invoice.createdDateTime,\"%Y/%m/%d\") AS ReceiptDate,
                                             DATE_FORMAT(invoice.createdDateTime,\"%h:%i:%s\") AS ReceiptTime,
                                             invoice.invoiceCode
                                             AS ReceiptNo,
                                             det.itemCount AS NoOfItems,
                                             invoice.transactionCurrency AS SalesCurrency,
                                            invoice.netTotal AS TotalSalesAmtB4Tax, 
                                            invoice.netTotal AS TotalSalesAmtAfterTax, 
                                            '0' AS SalesTaxRate,
                                            '0' AS ServiceChargeAmt,
                                            invoice.paidAmount AS PaymentAmt,
                                            invoice.transactionCurrency AS PaymentCurrency,
                                            'Cash' AS PaymentMethod,
                                            'Sales' AS SalesType
                                            FROM
                                                srp_erp_pos_invoice AS invoice
                                            LEFT JOIN ( SELECT COUNT( itemAutoID ) AS itemCount, invoiceID FROM srp_erp_pos_invoicedetail GROUP BY invoiceID ) det ON det.invoiceID = invoice.invoiceID
                                            WHERE
                                                isVoid = 0 
                                                AND invoice.companyID = {$companyID} 
                                                AND DATE(invoice.createdDateTime) = '{$date}' 
                                            ORDER BY
                                                invoiceID DESC")->result_array();

        if(!empty($master)){
            foreach ($master AS $val) {
                $x = array();
                $q = $this->db->query("SELECT
                                                itemDescription AS ItemDesc,
                                                transactionAmount AS ItemAmt,
                                                generalDiscountAmount AS ItemDiscountAmt 
                                            FROM
                                                srp_erp_pos_invoicedetail 
                                            WHERE
                                                companyID = {$companyID} 
                                                AND invoiceID = {$val['invoiceID']}")->result_array();

                foreach (array_keys($val) as $mas){
                    $x[$mas] = $val[$mas];
                }
                $x['details'] = $q;
                array_push($combined_list,$x);
            }
        }

        return $combined_list;
    }

    function getLeaveApprovalSetup($isSetting = 'N',$companyID)
    {
        $appSystemValues = $this->db->query("SELECT * FROM srp_erp_leavesetupsystemapprovaltypes")->result_array();

        if($isSetting == 'Y'){
            $arr = [ 0 => '' ];
            foreach($appSystemValues as $key=>$val){
                $arr[$val['id']] = $val['description'];
            }
            $appSystemValues = $arr;
        }

        $approvalLevel = $this->db->query("SELECT approvalLevel FROM srp_erp_documentcodemaster WHERE documentID = 'LA' AND
                                         companyID={$companyID} ")->row('approvalLevel');

        $approvalSetup = $this->db->query("SELECT approvalLevel, approvalType, empID, systemTB.*
                                         FROM srp_erp_leaveapprovalsetup AS setupTB
                                         JOIN srp_erp_leavesetupsystemapprovaltypes AS systemTB ON systemTB.id = setupTB.approvalType
                                         WHERE companyID={$companyID} ORDER BY approvalLevel")->result_array();

        $approvalEmp = $this->db->query("SELECT approvalLevel, empTB.empID
                                       FROM srp_erp_leaveapprovalsetup AS setupTB
                                       JOIN srp_erp_leaveapprovalsetuphremployees AS empTB ON empTB.approvalSetupID = setupTB.approvalSetupID
                                       WHERE setupTB.companyID={$companyID} AND empTB.companyID={$companyID}")->result_array();

        if(!empty($approvalEmp)){
            $approvalEmp = array_group_by($approvalEmp, 'approvalLevel');
        }

        return [
            'appSystemValues' => $appSystemValues,
            'approvalLevel' => $approvalLevel,
            'approvalSetup' => $approvalSetup,
            'approvalEmp' => $approvalEmp
        ];
    }

    function getMobileAttendanceLocation($empID, $companyID, $isAll=0){
        $where = ($isAll == 0)? "AND latitude IS NOT NULL AND longitude IS NOT NULL AND locationRadius IS NOT NULL": "";
        $details = $this->db->query("SELECT latitude, longitude, locationRadius, deviceID, empMachineID 
                                       FROM srp_employeesdetails AS empTB
                                       JOIN srp_erp_pay_floormaster AS flor ON flor.floorID = empTB.floorID
                                       WHERE EIdNo = {$empID} AND Erp_companyID = {$companyID} {$where}")->row_array();

        if(empty($details)){
            if($isAll == 1){
                return ['empMachineID'=> 0, 'deviceID'=> 0];
            }

            return ['latitude'=> (int)0, 'longitude'=> (int)0, 'locationRadius'=> (int)0];
        }

        if($isAll == 1){
            return $details;
        }

        $det['latitude'] = (float)$details['latitude'];
        $det['longitude'] = (float)$details['longitude'];
        $det['locationRadius'] = (float)$details['locationRadius'];

        return $det;
    }

    function getMobileAttendanceLocations($empID, $companyID, $isAll=0, $latitude = null, $longitude = null){
        $where = ($isAll == 0)? "AND latitude IS NOT NULL AND longitude IS NOT NULL AND locationRadius IS NOT NULL": "";
        if(!empty($longitude) && !empty($latitude)) {
            $where .= " AND latitude like '$latitude%' AND longitude like '$longitude%'";
        }

        $qry = "SELECT latitude, longitude, locationRadius, deviceID, empMachineID 
                    FROM srp_erp_empattendancelocation AS empLocTB
                    JOIN srp_erp_pay_floormaster AS flor ON flor.floorID = empLocTB.floorID
                    WHERE empID = {$empID} AND empLocTB.companyID = {$companyID} AND flor.companyID = {$companyID} {$where}";

          

        $details = $this->db->query($qry)->result_array();

        if(empty($details)){
            if($isAll == 1){
                return $data[] = ['empMachineID'=> 0, 'deviceID'=> 0];
            }

            return $data[] = array();
        }

        if($isAll == 1){
            $details = $this->db->query($qry)->row_array();
            return $details;
        }

        foreach ($details as $key => $row) {
            $details[$key]['latitude'] = $row['latitude'];
            $details[$key]['longitude'] = $row['longitude'];
            $details[$key]['locationRadius'] = $row['locationRadius'];
            $details[$key]['deviceID'] = (int)$row['deviceID'];
            $details[$key]['empMachineID'] = (int)$row['empMachineID'];
        }

        return $details;
    }

    function save_firebase_token($fireBase_token, $device, $empID, $companyID)
    {
        $data = array();
        $this->db->select('id');
        $this->db->from('srp_erp_devices');
        $this->db->where('player_id', $fireBase_token);
        $this->db->where('company_id', $companyID);
        $this->db->where('emp_id', $empID);
        $token_available = $this->db->get()->row_array();

        $data['isLogged'] = 1;
        $data['device'] = $device;
        if(!empty($token_available)) {
            $this->db->where('id', $token_available['id']);
            $this->db->where('emp_id', $empID);
            $this->db->where('player_id', $fireBase_token);
            $this->db->update('srp_erp_devices', $data);
            $last_id = $token_available['id'];
        } else {
            $data['player_id'] = $fireBase_token;
            $data['emp_id'] = $empID;
            $data['company_id'] = $companyID;

            $this->db->insert('srp_erp_devices', $data);
            $last_id = $this->db->insert_id();
        }
        return $token_available;
    }
	
	function save_firebase_token_mobileapp($fireBase_token, $device, $empID, $companyID)
    {
        $data = array();
        $this->db->select('id');
        $this->db->from('srp_erp_devices');
        $this->db->where('player_id', $fireBase_token);
        $this->db->where('company_id', $companyID);
        $this->db->where('emp_id', $empID);
        $token_available = $this->db->get()->row_array();
		

        $data['isLogged'] = 1;
        $data['device'] = $device;
        if(!empty($token_available)) {
            $this->db->where('id', $token_available['id']);
            $this->db->where('emp_id', $empID);
            $this->db->where('player_id', $fireBase_token);
            $this->db->update('srp_erp_devices', $data);
            $last_id = $token_available['id'];
        } else {
            $data['player_id'] = $fireBase_token;
            $data['emp_id'] = $empID;
            $data['company_id'] = $companyID;

            $this->db->insert('srp_erp_devices', $data);
            $last_id = $this->db->insert_id();
			//echo  $last_id;
			//exit();
        }
        return $token_available;
    }

	
	
	

    function getAllApprovals()
    {
        $allApproval = array();
        $filter_doc = $this->input->get('Document');
        $amountBasedApproval = getPolicyValues('ABA', 'All');
        $companyID = current_companyID();
        $userID = current_userID();
        $where = '';
        if(!empty($filter_doc)){
            $filter_doc = explode(',', $filter_doc);
            $filter_doc2 = "'". implode("', '", $filter_doc)."'";
            $where = "AND documentID IN ({$filter_doc2})";
        }
        $where = "AND documentID IN ('PO','JV','RV','PV','BSI','CINV','PRQ','GRV','SLR','DN','SO','QUT','CNT','DO','SC','ST','MRN','MR','MI','CN','RJV','BRC','BT','LA')";

        $document_codes = $this->db->query("SELECT documentID FROM srp_erp_documentapproved WHERE companyID = {$companyID}
                                     AND approvedYN = 0 {$where} GROUP BY documentID
                                     ORDER BY documentID ASC /*#limit 32*/")->result_array();

        $document_codes = array_column($document_codes, 'documentID');
        array_push($document_codes, 'EC');
        $query = '';

        if(in_array('BD', $document_codes)){ /*** Budget ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT budgetAutoID as DocumentAutoID, 
                            srp_erp_budgetmaster.documentID as DocumentID, 
                            srp_erp_budgetmaster.documentSystemCode AS DocumentCode,
                            'Budget' AS documentName,
                           CONCAT( 'Segment : ', srp_erp_segment.description, ' | Currency : ', transactionCurrency,' | Financial Year : ',companyFinanceYear,' | ',narration) AS Narration,
                           '-' AS suppliercustomer,
                           transactionCurrencyID AS currencyID,
                           transactionCurrency AS currency,
                           CurrencyName AS currencyDescription,
                           transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                           '' AS Amount, 
                           approvalLevelID AS LEVEL, 
                           srp_erp_budgetmaster.companyID AS companyID, 
                           confirmedByName, 
                           DATE_FORMAT(confirmedDate,'%Y-%m-%d %H:%i:%s') AS `date`, 
                           documentApprovedID, '' AS payrollYear, 
                           '' AS payrollMonth,
                           '' AS `bankGLAutoID`,
                           IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes,
                           'srp_erp_budgetmaster' AS tableName,
                           'budgetAutoID' AS feildName
                       FROM srp_erp_budgetmaster
                       LEFT JOIN srp_erp_segment ON srp_erp_budgetmaster.segmentID = srp_erp_segment.segmentID
                       AND srp_erp_budgetmaster.companyID = srp_erp_segment.companyID
                       JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_budgetmaster.budgetAutoID
                       AND srp_erp_documentapproved.approvalLevelID = srp_erp_budgetmaster.currentLevelNo
                       JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_budgetmaster.currentLevelNo
                       LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_budgetmaster.segmentID
                       LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_budgetmaster.transactionCurrencyID 
                       WHERE srp_erp_budgetmaster.companyID = '{$companyID}' AND srp_erp_budgetmaster.budgetType = 1 AND srp_erp_documentapproved.approvedYN = ''
                       AND srp_erp_documentapproved.documentID = 'BD' AND srp_erp_approvalusers.documentID = 'BD' AND srp_erp_approvalusers.employeeID = '{$userID}'";
        }

        if(in_array('BDT', $document_codes)){ /*** Budget Transfer ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT budgetTransferAutoID as DocumentAutoID, 
                       srp_erp_budgettransfer.documentID as DocumentID, 
                       srp_erp_budgettransfer.documentSystemCode AS DocumentCode,
	                   CONCAT('Created Date : ',DATE_FORMAT( srp_erp_budgettransfer.documentDate, '%d-%m-%Y' ),' | Financial Year : ', CONCAT( srp_erp_companyfinanceyear.beginingDate, ' - ', srp_erp_companyfinanceyear.endingDate ),' | ' ,srp_erp_budgettransfer.comments) AS Narration,
	                   '-' AS suppliercustomer, 
	                   	'Budget Transfer' AS documentName,
                        transactionCurrencyID AS currencyID,
                        CurrencyCode AS currency,
                        CurrencyName AS currencyDescription,
                        DecimalPlaces AS transactionCurrencyDecimalPlaces, 
	                   ' '  AS Amount, 
	                   approvalLevelID AS LEVEL, 
	                   srp_erp_budgettransfer.companyID AS companyID,
	                   srp_erp_budgettransfer.confirmedByName, 
                       DATE_FORMAT(srp_erp_budgettransfer.confirmedDate,'%Y-%m-%d %H:%i:%s') AS date, 
	                   documentApprovedID, 
	                   '' AS payrollYear, 
	                   '' AS payrollMonth, 
	                   '' AS `bankGLAutoID`, 
	                   IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes,
                       'srp_erp_budgettransfer' AS tableName,
                       'budgetTransferAutoID' AS feildName
	                   FROM srp_erp_budgettransfer 
	                   JOIN srp_erp_companyfinanceyear ON srp_erp_companyfinanceyear.companyFinanceYearID = srp_erp_budgettransfer.financeYearID
	                   JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_budgettransfer.budgetTransferAutoID
	                   AND srp_erp_documentapproved.approvalLevelID = srp_erp_budgettransfer.currentLevelNo
	                   JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_budgettransfer.currentLevelNo
	                   LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_budgettransfer.segmentID
	                   LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_budgettransfer.transactionCurrencyID
	                   WHERE srp_erp_budgettransfer.companyID = '{$companyID}' AND srp_erp_documentapproved.approvedYN = '' AND srp_erp_documentapproved.documentID = 'BDT'
	                   AND srp_erp_approvalusers.documentID = 'BDT' AND srp_erp_approvalusers.employeeID = '{$userID}'";
        }

        if(in_array('BRC', $document_codes)){ /*** Bank Reconciliation ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT b.bankRecAutoID AS DocumentAutoID, b.documentID AS DocumentID, bankRecPrimaryCode as DocumentCode,
                       concat('As Of Date : ',DATE_FORMAT( bankRecAsOf, ' % d /%m /%y' ),' | Month : ',concat( MONTH, ' / ', YEAR ),' | ',
                       b.description,' | Bank Name : ',bankName,' | GL Code : ',c.systemAccountCode,' | Account Number : ',	c.bankAccountNumber ) AS Narration,
                       ' - ' as suppliercustomer,
                       'Bank Reconciliation' AS documentName,
                       '' AS currencyID,
                        '' AS currency,
                        '' AS currencyDescription,
                        '' AS transactionCurrencyDecimalPlaces,
                       '' as Amount, currentLevelNo AS LEVEL, b.companyID AS companyID,
                       b.confirmedByName,
                       DATE_FORMAT(b.confirmedDate,'%Y-%m-%d %H:%i:%s') AS date,
                       documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth, `bankGLAutoID`, 
                       IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes,
                       'srp_erp_bankrecmaster' AS tableName,
                       'bankRecAutoID' AS feildName
                       FROM srp_erp_bankrecmaster AS b
                       JOIN srp_erp_documentapproved AS d ON d.documentSystemCode = b.bankRecAutoID
                       AND d.approvalLevelID = b.currentLevelNo
                       LEFT JOIN srp_erp_chartofaccounts AS c ON c.GLAutoID = b.bankGLAutoID
                       JOIN srp_erp_approvalusers AS au ON au.levelNo = b.currentLevelNo
                       LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = b.segmentID
                       WHERE d.documentID = 'BRC' AND au.documentID = 'BRC' AND au.employeeID = '{$userID}' AND au.companyID = '{$companyID}'
                       AND b.companyID = '{$companyID}' AND d.approvedYN = ''";
        }

        if(in_array('BSI', $document_codes)){ /*** Supplier Invoice ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT srp_erp_paysupplierinvoicemaster.InvoiceAutoID AS DocumentAutoID, srp_erp_paysupplierinvoicemaster.documentID AS DocumentID,
                       bookingInvCode AS DocumentCode, comments AS Narration, CONCAT(srp_erp_suppliermaster.supplierSystemCode ,' - ', srp_erp_suppliermaster.supplierName) AS suppliercustomer, 
                       	'Supplier Invoice' AS documentName,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_paysupplierinvoicemaster.transactionCurrencyDecimalPlaces,
                       ((((IFNULL( addondet.taxPercentage, 0 )/ 100)*(IFNULL( det.transactionAmount, 0 )-((IFNULL( generalDiscountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))))+ IFNULL( det.transactionAmount, 0 ))-((IFNULL( generalDiscountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))) AS Amount, 
                       approvalLevelID AS LEVEL,
                       srp_erp_paysupplierinvoicemaster.companyID AS companyID, 
                       srp_erp_paysupplierinvoicemaster.confirmedByName, 
                       DATE_FORMAT(srp_erp_paysupplierinvoicemaster.confirmedDate,'%Y-%m-%d %H:%i:%s') AS date,
                       documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth, '' as `bankGLAutoID`, 
                       IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes,
                       'srp_erp_paysupplierinvoicemaster' AS tableName,
                       'InvoiceAutoID' AS feildName
                       FROM srp_erp_paysupplierinvoicemaster
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID ) det ON det.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
	                    LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON addondet.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID 
                       JOIN srp_erp_suppliermaster ON srp_erp_suppliermaster.supplierAutoID = srp_erp_paysupplierinvoicemaster.supplierID
                       JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
                       AND srp_erp_documentapproved.approvalLevelID = srp_erp_paysupplierinvoicemaster.currentLevelNo
                       JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_paysupplierinvoicemaster.currentLevelNo
                       LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_paysupplierinvoicemaster.segmentID
                       LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_paysupplierinvoicemaster.transactionCurrencyID
                       WHERE srp_erp_documentapproved.documentID = 'BSI' AND srp_erp_approvalusers.documentID = 'BSI' AND srp_erp_approvalusers.employeeID = '{$userID}'
                       AND srp_erp_documentapproved.approvedYN = '0' AND srp_erp_paysupplierinvoicemaster.companyID = '{$companyID}' AND srp_erp_approvalusers.companyID = '{$companyID}'";
        }

        if(in_array('BT', $document_codes)){ /*** Bank Transfer ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT bankTransferAutoID AS DocumentAutoID, srp_erp_banktransfer.documentID AS DocumentID, bankTransferCode AS DocumentCode,
                       narration AS Narration, \"-\" AS suppliercustomer, 
                       	'Bank Transfer' AS documentName,
                        fromBankCurrencyID AS currencyID,
                        CurrencyCode AS currency,
                        CurrencyName AS currencyDescription,
                        DecimalPlaces AS transactionCurrencyDecimalPlaces,
                        round( transferedAmount, 2 ) AS Amount, approvalLevelID AS LEVEL,
                       srp_erp_banktransfer.companyID AS companyID, srp_erp_banktransfer.confirmedByName,
                       DATE_FORMAT(srp_erp_banktransfer.confirmedDate,'%Y-%m-%d %H:%i:%s') AS date,
                       documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth,
                       '' AS `bankGLAutoID`, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_banktransfer' AS tableName,
                       'bankTransferAutoID' AS feildName                      
                       FROM srp_erp_banktransfer 
                       LEFT JOIN srp_erp_chartofaccounts a ON fromBankGLAutoID = a.GLAutoID
                       LEFT JOIN srp_erp_chartofaccounts b ON toBankGLAutoID = b.GLAutoID
                       JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_banktransfer.bankTransferAutoID
                       AND srp_erp_documentapproved.approvalLevelID = srp_erp_banktransfer.currentLevelNo
                       JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_banktransfer.currentLevelNo
                       LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID =  srp_erp_banktransfer.segmentID
                       LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_banktransfer.fromBankCurrencyID 
                       WHERE srp_erp_approvalusers.documentID = 'BT' AND srp_erp_approvalusers.employeeID = '{$userID}' AND srp_erp_documentapproved.documentID = 'BT'                    
                       AND srp_erp_documentapproved.approvedYN = '0' AND srp_erp_banktransfer.companyID = '{$companyID}' AND srp_erp_approvalusers.companyID = '{$companyID}'";
        }

        if(in_array('CINV', $document_codes)){ /*** Customer Invoice ***/
            $query .= ($query != '')? ' UNION ': '';

            /*LEFT JOIN (
	                      SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID
	                   ) det ON ( det.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID )
	                   LEFT JOIN (
	                        SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails GROUP BY InvoiceAutoID
	                   ) addondet ON ( addondet.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID )*/

            $query .= "SELECT srp_erp_customerinvoicemaster.invoiceAutoID AS DocumentAutoID, srp_erp_customerinvoicemaster.documentID AS DocumentID,
	                   invoiceCode AS DocumentCode, invoiceNarration AS Narration, CONCAT(srp_erp_customermaster.customerSystemCode,' - ',srp_erp_customermaster.customerName) AS suppliercustomer, 
	                   'Customer Invoice' AS documentName,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_customerinvoicemaster.transactionCurrencyDecimalPlaces,
	                   ( IFNULL( addondet.taxPercentage, 0 )/ 100 )*(
		IFNULL( det.transactionAmount, 0 )- IFNULL( det.detailtaxamount, 0 )-((
				IFNULL( gendiscount.discountPercentage, 0 )/ 100 
				)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexchargistax.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )-((
			IFNULL( gendiscount.discountPercentage, 0 )/ 100 
		)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexcharg.transactionAmount, 0 ) - IFNULL( retensionTransactionAmount, 0 ) - IFNULL( rebateAmount, 0 ) AS Amount, 
	                     approvalLevelID AS LEVEL, srp_erp_customerinvoicemaster.companyID AS companyID,
	                   srp_erp_customerinvoicemaster.confirmedByName, 
	                   DATE_FORMAT(srp_erp_customerinvoicemaster.confirmedDate,'%Y-%m-%d %H:%i:%s') AS date,
	                   documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth,
	                   '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_customerinvoicemaster' AS tableName,
                       'invoiceAutoID' AS feildName                      
	                   FROM srp_erp_customerinvoicemaster
	                   
	                   LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) det ON det.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                        LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON addondet.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( discountPercentage ) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON gendiscount.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON genexchargistax.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON genexcharg.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID 
	                   LEFT JOIN srp_erp_customermaster ON srp_erp_customermaster.customerAutoID = srp_erp_customerinvoicemaster.customerID
	                   JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_customerinvoicemaster.invoiceAutoID
	                   AND srp_erp_documentapproved.approvalLevelID = srp_erp_customerinvoicemaster.currentLevelNo
	                   JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_customerinvoicemaster.currentLevelNo
	                   LEFT join srp_erp_segment segmentmaster on segmentmaster.segmentID  = srp_erp_customerinvoicemaster.segmentID
	                   LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.CurrencyID = srp_erp_customerinvoicemaster.transactionCurrencyID
	                   WHERE srp_erp_documentapproved.documentID = 'CINV' AND srp_erp_approvalusers.documentID = 'CINV' AND srp_erp_documentapproved.companyID = '{$companyID}'
	                   AND srp_erp_approvalusers.companyID = '{$companyID}' AND srp_erp_customerinvoicemaster.companyID = '{$companyID}' 
	                   AND srp_erp_approvalusers.employeeID = '{$userID}' AND srp_erp_documentapproved.approvedYN = '0'";
        }

        if(in_array('CN', $document_codes)){ /*** Credit Note ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT srp_erp_creditnotemaster.creditNoteMasterAutoID AS DocumentAutoID, srp_erp_creditnotemaster.documentID AS DocumentID,
                       creditNoteCode AS DocumentCode, IFNULL( comments, '-' ) AS Narration, CONCAT(srp_erp_customermaster.customerSystemCode,' - ',srp_erp_customermaster.customerName) AS suppliercustomer,
                       	'Credit Note' AS documentName,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_creditnotemaster.transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces, 
                       det.transactionAmount AS Amount, approvalLevelID AS LEVEL, srp_erp_creditnotemaster.companyID AS companyID,
                       srp_erp_creditnotemaster.confirmedByName,
                       DATE_FORMAT( srp_erp_creditnotemaster.confirmedDate, '%Y-%m-%d %H:%i:%s' ) AS `date`, 
                       documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth,
                       '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_creditnotemaster' AS tableName,
                       'creditNoteMasterAutoID' AS feildName
                       FROM srp_erp_creditnotemaster
                       LEFT JOIN ( 
                            SELECT SUM( transactionAmount ) AS transactionAmount, creditNoteMasterAutoID FROM srp_erp_creditnotedetail GROUP BY creditNoteMasterAutoID 
                       ) det ON ( det.creditNoteMasterAutoID = srp_erp_creditnotemaster.creditNoteMasterAutoID )
                       LEFT JOIN srp_erp_customermaster ON srp_erp_customermaster.customerAutoID = srp_erp_creditnotemaster.customerID
                       JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_creditnotemaster.creditNoteMasterAutoID
                       AND srp_erp_documentapproved.approvalLevelID = srp_erp_creditnotemaster.currentLevelNo
                       JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = srp_erp_creditnotemaster.currentLevelNo
                       LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_creditnotemaster.transactionCurrencyID 
                       WHERE srp_erp_approvalusers.employeeID = '{$userID}' AND srp_erp_creditnotemaster.companyID = '{$companyID}'
                       AND srp_erp_approvalusers.companyID = '{$companyID}' AND srp_erp_documentapproved.documentID = 'CN' AND srp_erp_approvalusers.documentID = 'CN'
                       AND srp_erp_documentapproved.approvedYN = '0'";
        }

        if(in_array('CNT', $document_codes) or in_array('QUT', $document_codes) or in_array('SO', $document_codes)){ /*** Contract / Quotation / Sales Order ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        srp_erp_contractmaster.contractAutoID AS DocumentAutoID,
                        `srp_erp_contractmaster`.`documentID` AS `DocumentID`,
                        `contractCode` AS DocumentCode,
                        `contractNarration` AS Narration,
                        CONCAT(srp_erp_customermaster.customerSystemCode,' - ',`srp_erp_customermaster`.`customerName`) AS `suppliercustomer`,
                        CASE
                            WHEN srp_erp_contractmaster.documentID = 'CNT' THEN
                            'Contract' 
                            WHEN srp_erp_contractmaster.documentID = 'QUT' THEN
                            'Quotation' 
                            WHEN srp_erp_contractmaster.documentID = 'SO' THEN
                            'Sales Order' 
                        END documentName,
                        transactionCurrencyID AS currencyID,
                        `transactionCurrency` AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_contractmaster.transactionCurrencyDecimalPlaces,
                        `det`.`transactionAmount` AS `Amount`,
                        srp_erp_contractmaster.currentLevelNo AS LEVEL,
                        srp_erp_contractmaster.companyID AS companyID,
                        srp_erp_contractmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_contractmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_contractmaster' AS tableName,
                       'contractAutoID' AS feildName
                    FROM
                        `srp_erp_contractmaster`
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, contractAutoID FROM srp_erp_contractdetails GROUP BY contractAutoID ) det ON ( `det`.`contractAutoID` = srp_erp_contractmaster.contractAutoID )
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `srp_erp_contractmaster`.`customerID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_contractmaster`.`contractAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_contractmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_contractmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster ON segmentmaster.segmentID = srp_erp_contractmaster.segmentID 
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_contractmaster.transactionCurrencyID
                    WHERE
                        `srp_erp_documentapproved`.`documentID` IN ( 'CNT','QUT', 'SO' )
                        AND `srp_erp_approvalusers`.`documentID` IN ( 'CNT','QUT', 'SO' )
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_contractmaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    GROUP BY `srp_erp_documentapproved`.`documentSystemCode`";
        }

        if(in_array('DC', $document_codes)){ /*** Donor Collections ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `collectionAutoId` as DocumentAutoID,
                        `documentCode` as DocumentID,
                        `documentSystemCode` as DocumentCode,
                        CONCAT(\"Donor Name : \",NAME,\" | \",narration)  AS Narration,
                        \"-\" as suppliercustomer,
                        'Donor Collection' AS documentName,
						transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
						currencyDescription,
						transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        transactionAmount AS Amount,
                        approvalLevelID AS LEVEL,
                        companyID AS companyID,
                        confirmedByName,
                        DATE_FORMAT(confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_ngo_donorcollectionmaster' AS tableName,
                       'collectionAutoId' AS feildName
                    FROM
                        (
                    SELECT
                        documentApprovedID,
                        `srp_erp_ngo_donorcollectionmaster`.`approvedYN`,
                        `srp_erp_ngo_donorcollectionmaster`.`confirmedDate`,
                        `srp_erp_ngo_donorcollectionmaster`.`confirmedByName`,
                        `srp_erp_ngo_donorcollectionmaster`.`companyID`,
                        transactionCurrencyID,
						`transactionCurrency`,
						CurrencyName AS currencyDescription,
						`srp_erp_ngo_donorcollectionmaster`.`transactionCurrencyDecimalPlaces`,
                        `srp_erp_ngo_donorcollectionmaster`.`narration`,
                        `approvalLevelID`,
                        `srp_erp_ngo_donorcollectionmaster`.`documentCode`,
                        `confirmedYN`,
                        `srp_erp_ngo_donorcollectionmaster`.`collectionAutoId`,
                        `srp_erp_ngo_donorcollectionmaster`.`documentSystemCode`,
                        `srp_erp_ngo_donorcollectionmaster`.`documentDate`,
                        `referenceNo`,
                        `donorsID`,
                        FORMAT( IFNULL( transactionAmount, 0 ), transactionCurrencyDecimalPlaces ) AS transactionAmount,
                    NAME
                    FROM
                        srp_erp_ngo_donorcollectionmaster
                        LEFT JOIN srp_erp_ngo_donors ON donorsID = contactID
                        LEFT JOIN ( SELECT sum( transactionAmount ) AS transactionAmount, collectionAutoId FROM srp_erp_ngo_donorcollectiondetails GROUP BY collectionAutoId ) srp_erp_ngo_donorcollectiondetails ON srp_erp_ngo_donorcollectionmaster.collectionAutoId = srp_erp_ngo_donorcollectiondetails.collectionAutoId
                        LEFT JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = srp_erp_ngo_donorcollectionmaster.collectionAutoId
                        AND approvalLevelID = currentLevelNo
                        LEFT JOIN srp_erp_approvalusers ON levelNo = srp_erp_ngo_donorcollectionmaster.currentLevelNo
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_ngo_donorcollectionmaster.transactionCurrencyID
                    WHERE
                        isDeleted != 1
                        AND srp_erp_documentapproved.documentID = 'DC'
                        AND srp_erp_approvalusers.documentID = 'DC'
                        AND employeeID = '{$userID}'
                        AND srp_erp_ngo_donorcollectionmaster.approvedYN = 0
                        AND srp_erp_ngo_donorcollectionmaster.companyID = '{$companyID}'
                    ORDER BY
                        collectionAutoId DESC
                        ) t";
        }

        if(in_array('DN', $document_codes)){ /*** Debit Note ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        srp_erp_debitnotemaster.debitNoteMasterAutoID AS DocumentAutoID,
                        srp_erp_debitnotemaster.documentID AS DocumentID,
                        debitNoteCode AS DocumentCode,
                        IFNULL( comments, '-' ) AS Narration,
                        
                        CONCAT(srp_erp_suppliermaster.supplierSystemCode,' - ',srp_erp_suppliermaster.supplierName) AS suppliercustomer,
                        'Debit Note' AS documentName,
						transactionCurrencyID AS currencyID,
                        `transactionCurrency` AS currency,
						CurrencyName AS currencyDescription,
						srp_erp_debitnotemaster.transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        `det`.`transactionAmount` AS Amount,
                        approvalLevelID AS LEVEL,
                        srp_erp_debitnotemaster.companyID AS companyID,
                        srp_erp_debitnotemaster.confirmedByName AS confirmedByName,
                        DATE_FORMAT(srp_erp_debitnotemaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_debitnotemaster' AS tableName,
                       'debitNoteMasterAutoID' AS feildName
                    FROM
                        `srp_erp_debitnotemaster`
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, debitNoteMasterAutoID FROM srp_erp_debitnotedetail GROUP BY debitNoteMasterAutoID ) det ON ( `det`.`debitNoteMasterAutoID` = srp_erp_debitnotemaster.debitNoteMasterAutoID )
                        JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_debitnotemaster`.`supplierID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_debitnotemaster`.`debitNoteMasterAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_debitnotemaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_debitnotemaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = `srp_erp_debitnotemaster`.`transactionCurrencyID`
                    WHERE
                        `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_debitnotemaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_documentapproved`.`documentID` = 'DN'
                        AND `srp_erp_approvalusers`.`documentID` = 'DN'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array('DO', $document_codes)){ /*** Delivery Order ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                masterTbl.DOAutoID AS DocumentAutoID,
                masterTbl.documentID AS DocumentID,
                masterTbl.DOCode AS DocumentCode,
                narration AS Narration,
                CONCAT(customerSystemCode,' - ',customerName) AS suppliercustomer,
                'Delivery Order' AS documentName,
				transactionCurrencyID AS currencyID,
                cur_mas.CurrencyCode AS currency,
                CurrencyName AS currencyDescription,
				transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                transactionAmount AS Amount,
                approvalLevelID AS LEVEL,
                masterTbl.companyID,
                masterTbl.confirmedByName,
                DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                documentApprovedID,
                \"\" AS `payrollYear`,
                '' AS `payrollMonth`,
                '' AS bankGLAutoID, segmentCode AS segmentcodedes,
               'srp_erp_deliveryorder' AS tableName,
               'DOAutoID' AS feildName
            FROM
                srp_erp_deliveryorder masterTbl
                JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = masterTbl.DOAutoID
                JOIN srp_erp_currencymaster AS cur_mas ON cur_mas.currencyID = masterTbl.transactionCurrencyID 
                AND srp_erp_documentapproved.approvalLevelID = masterTbl.currentLevelNo
                JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = masterTbl.currentLevelNo 
            WHERE
                srp_erp_documentapproved.documentID = 'DO' 
                AND srp_erp_approvalusers.documentID = 'DO' 
                AND srp_erp_documentapproved.companyID = '{$companyID}' 
                AND srp_erp_approvalusers.companyID = '{$companyID}' 
                AND srp_erp_approvalusers.employeeID = '{$userID}' 
                AND srp_erp_documentapproved.approvedYN = ''";
        }

        if(in_array( 'EC', $document_codes)) { /*** Expense Claim ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT srp_erp_expenseclaimmaster.expenseClaimMasterAutoID AS DocumentAutoID, 
srp_erp_expenseclaimmaster.documentID AS DocumentID ,
                   expenseClaimCode as DocumentCode, 
                   CONCAT(\" Description : \",comments,\" | Claimed Date : \",DATE_FORMAT( expenseClaimDate, '%d-%m-%Y' )) as Narration,
                   claimedByEmpName as suppliercustomer, 
                   'Expense Claim' AS documentName,
                    det.empCurrencyID AS currencyID,
                    det.empCurrency AS currency,
                    CurrencyName AS currencyDescription,
                    det.transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                   det.transactionAmount AS Amount, 
                   ''  AS LEVEL,
                   srp_erp_expenseclaimmaster.companyID AS companyID, 
                   srp_erp_expenseclaimmaster.confirmedByName, 
                   DATE_FORMAT(srp_erp_expenseclaimmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                   '' as documentApprovedID,
                   '' AS payrollYear, 
                   '' AS payrollMonth, 
                   '' AS bankGLAutoID, 
                   IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_expenseclaimmaster' AS tableName,
                   'expenseClaimMasterAutoID' AS feildName
                   FROM srp_erp_expenseclaimmaster 
                   LEFT JOIN ( 
                        SELECT SUM( empCurrencyAmount ) AS transactionAmount, expenseClaimMasterAutoID, empCurrencyID, empCurrency,transactionCurrencyDecimalPlaces 
                        FROM srp_erp_expenseclaimdetails GROUP BY expenseClaimMasterAutoID 
                   ) det ON ( det.expenseClaimMasterAutoID = srp_erp_expenseclaimmaster.expenseClaimMasterAutoID )
                   JOIN srp_erp_employeemanagers ON srp_erp_expenseclaimmaster.claimedByEmpID = srp_erp_employeemanagers.empID
                   LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = det.empCurrencyID 
                   LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_expenseclaimmaster.segmentID
                   WHERE srp_erp_expenseclaimmaster.companyID = '{$companyID}' AND srp_erp_expenseclaimmaster.confirmedYN = 1 AND srp_erp_expenseclaimmaster.approvedYN = '0'
                   AND srp_erp_employeemanagers.managerID = '{$userID}' AND srp_erp_employeemanagers.active = 1 ";
        }

        if(in_array('FA', $document_codes)){ /*** Fixed Asset ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `faID` AS DocumentAutoID,
                        srp_erp_fa_asset_master.documentID AS DocumentID,
                        `faCode` AS DocumentCode,
                        CONCAT( srp_erp_fa_asset_master.assetDescription, \" | Asset Depreciation Date : \", DATE_FORMAT( srp_erp_fa_asset_master.dateDEP, '%Y-%m-%d' ), \" | Asset Acquired Date : \", DATE_FORMAT( srp_erp_fa_asset_master.dateAQ, '%Y-%m-%d' ) ) AS Narration,
                        \"-\" AS suppliercustomer,
                        'Fixed Asset' AS documentName,
                        currencyID AS currencyID,
                        srp_erp_fa_asset_master.transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        transactionCurrencyDecimalPlaces,
                        srp_erp_fa_asset_master.transactionAmount AS Amount,
                        `approvalLevelID` AS LEVEL,
                        `srp_erp_fa_asset_master`.`companyID` AS companyID,
                        srp_erp_fa_asset_master.confirmedByName,
                        DATE_FORMAT(srp_erp_fa_asset_master.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_fa_asset_master' AS tableName,
                       'faID' AS feildName
                    FROM
                        `srp_erp_fa_asset_master`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_fa_asset_master`.`faID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_fa_asset_master`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_fa_asset_master`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_fa_asset_master.segmentID 
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.CurrencyCode = srp_erp_fa_asset_master.transactionCurrency 
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'FA'
                        AND `srp_erp_approvalusers`.`documentID` = 'FA'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_fa_asset_master`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'";
        }

        if(in_array('FAD', $document_codes)){ /*** Fixed Asset Depreciation ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    `depMasterAutoID` AS DocumentAutoID,
                    srp_erp_fa_depmaster.documentID AS DocumentID,
                    `depCode` AS DocumentCode,
                    CONCAT ( IF ( depType = 1, 'Adhoc Depreciation', 'Monthly Depreciation' ), ' | Depreciation Date : ', DATE_FORMAT( srp_erp_fa_depmaster.depDate, '%Y-%m-%d' ) ) AS Narration,
                    \"-\" AS suppliercustomer,
                    'Fixed Asset Depreciation' AS documentName,
                    transactionCurrencyID AS currencyID,
                    srp_erp_fa_depmaster.transactionCurrency AS currency,
                    CurrencyName AS currencyDescription,
                    transactionCurrencyDecimalPlaces,
                    transactionAmount AS Amount,
                    `approvalLevelID` AS LEVEL,
                    `srp_erp_fa_depmaster`.`companyID` AS companyID,
                    srp_erp_fa_depmaster.confirmedByName,
                    DATE_FORMAT(srp_erp_fa_depmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`,
                    '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_fa_depmaster' AS tableName,
                   'depMasterAutoID' AS feildName
                FROM
                    `srp_erp_fa_depmaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_fa_depmaster`.`depMasterAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_fa_depmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_fa_depmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_fa_depmaster.segmentID 
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_fa_depmaster.transactionCurrencyID 
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'FAD'
                    AND `srp_erp_approvalusers`.`documentID` = 'FAD'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_fa_depmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array('FS', $document_codes)){ /*** Final Settlement ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    `masterID` as DocumentAutoID,
                    fm.documentID as DocumentID,
                    `fm`.`documentCode` AS `DocumentCode`,
                    CONCAT('Emp Code : ',ECode,' | Emp Name: ',Ename2,' | ',narration) as Narration,
                    \"-\" as suppliercustomer,
                    'Final Settlement' AS documentName,
                    \"\"  AS currencyID,
                    \"\"  AS currency,
                    \"\"  AS currencyDescription,
                    \" \"  AS Amount,
                    `approvalLevelID` AS LEVEL,
                    fm.companyID AS companyID,
                    \" \" AS transactionCurrencyDecimalPlaces,
                    fm.confirmedByName,
                    DATE_FORMAT(fm.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`,
                    '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_pay_finalsettlementmaster' AS tableName,
                   'masterID' AS feildName
                FROM
                    `srp_erp_pay_finalsettlementmaster` AS `fm`
                    JOIN `srp_employeesdetails` `empTB` ON `empTB`.`EIdNo` = `fm`.`empID`
                    JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `fm`.`masterID`
                    AND `approve`.`approvalLevelID` = `fm`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `fm`.`currentLevelNo`
                WHERE
                    `approve`.`documentID` = 'FS'
                    AND `ap`.`documentID` = 'FS'
                    AND `ap`.`employeeID` =  '{$userID}'
                    AND `approve`.`approvedYN` = ''
                    AND `fm`.`companyID` = '{$companyID}'
                    AND `ap`.`companyID` = '{$companyID}'";
        }

        if(in_array('FU', $document_codes)){ /*** Fuel Usage ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `fuelusageID` as DocumentAutoID,
                        DocumentID,
                        `documentCode` as DocumentCode,
                        narration AS Narration,
                        concat(supplierSystemCode,' - ',`supplierName`) as suppliercustomer,
                        'Fuel Usage' AS documentName,
                        transactionCurrencyID AS currencyID,
                        `transactionCurrency` AS currency,
                        currencyDescription,
                        transactionCurrencyDecimalPlaces,
                        `transactionAmount` as Amount,
                        `approvalLevelID`  AS LEVEL,
                        companyID,
                        confirmedByName,
                        (confirmedDate) AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, segmentcodedes,
                       'fleet_fuelusagemaster' AS tableName,
                       'fuelusageID' AS feildName
                        FROM
                            (
                        SELECT
                            documentApprovedID,
                            `fleet_fuelusagemaster`.`approvedYN`,
                            `fleet_fuelusagemaster`.`companyID`,
                            `fleet_fuelusagemaster`.`confirmedByName`,	
                            DATE_FORMAT(fleet_fuelusagemaster.confirmedDate,'%Y-%m-%d %H:%i:%s') AS confirmedDate,
                            transactionCurrencyID,
                            transactionCurrency,
                            CurrencyName AS currencyDescription,
                            fleet_fuelusagemaster.transactionCurrencyDecimalPlaces,
                            `approvalLevelID`,
                            narration,
                            `fleet_fuelusagemaster`.`documentID`,
                            `confirmedYN`,
                            `fleet_fuelusagemaster`.`fuelusageID`,
                            `fleet_fuelusagemaster`.`supplierAutoID`,
                            `fleet_fuelusagemaster`.`documentCode`,
                            `fleet_fuelusagemaster`.`documentDate`,
                            `referenceNumber`,
                            FORMAT( IFNULL( fleet_fuelusagedetails.transactionAmount, 0 ), transactionCurrencyDecimalPlaces ) AS transactionAmount,
                            supplierName, IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes,
                            supplierSystemCode
                        FROM
                            fleet_fuelusagemaster
                            LEFT JOIN srp_erp_suppliermaster ON srp_erp_suppliermaster.supplierAutoID = fleet_fuelusagemaster.supplierAutoID
                            LEFT JOIN ( SELECT sum( fleet_fuelusagedetails.totalAmount ) AS transactionAmount, fuelusageID FROM fleet_fuelusagedetails GROUP BY fuelusageID ) fleet_fuelusagedetails ON fleet_fuelusagemaster.fuelusageID = fleet_fuelusagedetails.fuelusageID
                            LEFT JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = fleet_fuelusagemaster.fuelusageID
                            AND approvalLevelID = currentLevelNo
                            LEFT JOIN srp_erp_approvalusers ON levelNo = fleet_fuelusagemaster.currentLevelNo
                            LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = fleet_fuelusagemaster.segmentID
                            LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = fleet_fuelusagemaster.transactionCurrencyID
                        WHERE
                            isDeleted != 1
                            AND srp_erp_documentapproved.documentID = 'FU'
                            AND srp_erp_approvalusers.documentID = 'FU'
                            AND employeeID = '{$userID}'
                            AND fleet_fuelusagemaster.approvedYN = 0
                            AND fleet_fuelusagemaster.companyID = '{$companyID}'
                            ) t";
        }

        if(in_array('GRV', $document_codes)){ /*** Goods Receipt Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `srp_erp_grvmaster`.`grvAutoID` AS `DocumentAutoID`,
                        `srp_erp_grvmaster`.`DocumentID` AS `DocumentID`,
                        `grvPrimaryCode` AS DocumentCode,
                        `grvNarration` AS Narration,
                        CONCAT(srp_erp_suppliermaster.supplierSystemCode,' - ',`srp_erp_suppliermaster`.`supplierName`) AS `suppliercustomer`,
                        'Goods Receipt Voucher' AS documentName,
                        transactionCurrencyID,
                        `transactionCurrency` AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_grvmaster.transactionCurrencyDecimalPlaces,
                        ( IFNULL( det.receivedTotalAmount, 0 ) + IFNULL( addondet.total_amount, 0 ) ) AS Amount,
                        srp_erp_grvmaster.currentLevelNo AS LEVEL,
                        srp_erp_grvmaster.companyID AS `companyID`,
                        srp_erp_grvmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_grvmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_grvmaster' AS tableName,
                       'grvAutoID' AS feildName
                    FROM
                        `srp_erp_grvmaster`
                        LEFT JOIN ( SELECT SUM( receivedTotalAmount ) AS receivedTotalAmount, grvAutoID FROM srp_erp_grvdetails GROUP BY grvAutoID ) det ON ( `det`.`grvAutoID` = srp_erp_grvmaster.grvAutoID )
                        LEFT JOIN ( SELECT SUM( total_amount ) AS total_amount, grvAutoID FROM srp_erp_grv_addon GROUP BY grvAutoID ) addondet ON ( `addondet`.`grvAutoID` = srp_erp_grvmaster.grvAutoID )
                        LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_grvmaster`.`supplierID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_grvmaster`.`grvAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_grvmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_grvmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_grvmaster.segmentID
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_grvmaster.transactionCurrencyID
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`documentID` = 'GRV'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_grvmaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array('HCINV', $document_codes)){ /*** Customer Invoice - HIRA ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    srp_erp_customerinvoicemaster_temp.invoiceAutoID AS DocumentAutoID,
                    srp_erp_customerinvoicemaster_temp.documentID AS DocumentID,
                    invoiceCode AS DocumentCode,
                    invoiceNarration AS Narration,
                    CONCAT(srp_erp_customermaster.customerSystemCode,' - ',srp_erp_customermaster.customerName) AS suppliercustomer,
                    'Buyback Invoice' AS documentName,
					transactionCurrencyID,
                    transactionCurrency AS currency,
                    CurrencyName AS currencyDescription,
					srp_erp_customerinvoicemaster_temp.transactionCurrencyDecimalPlaces,
                    (
                    (
                    ( IFNULL( addondet.taxPercentage, 0 ) / 100 ) * ( ( IFNULL( det.transactionAmount, 0 ) - ( IFNULL( det.detailtaxamount, 0 ) ) ) )
                    ) + IFNULL( det.transactionAmount, 0 )
                    ) AS Amount,
                    approvalLevelID AS LEVEL,
                    srp_erp_customerinvoicemaster_temp.companyID AS companyID,
                    srp_erp_customerinvoicemaster_temp.confirmedByName,
                    DATE_FORMAT(srp_erp_customerinvoicemaster_temp.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`,
                    '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_customerinvoicemaster_temp' AS tableName,
                   'invoiceAutoID' AS feildName
                FROM
                    `srp_erp_customerinvoicemaster_temp`
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails_temp GROUP BY invoiceAutoID ) det ON ( `det`.`invoiceAutoID` = srp_erp_customerinvoicemaster_temp.invoiceAutoID )
                    LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails_temp GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_customerinvoicemaster_temp.InvoiceAutoID )
                    LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `srp_erp_customerinvoicemaster_temp`.`customerID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerinvoicemaster_temp`.`invoiceAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerinvoicemaster_temp`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerinvoicemaster_temp`.`currentLevelNo`
                    LEFT join srp_erp_segment segmentmaster on segmentmaster.segmentID  = srp_erp_customerinvoicemaster_temp.segmentID 
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_customerinvoicemaster_temp.transactionCurrencyID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'HCINV'
                    AND `srp_erp_approvalusers`.`documentID` = 'HCINV'
                AND `srp_erp_documentapproved`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND `srp_erp_customerinvoicemaster_temp`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array('IOU', $document_codes)){ /*** IOU Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    masterTbl.voucherAutoID AS DocumentAutoID,
                    masterTbl.documentID AS DocumentID,
                    masterTbl.iouCode AS DocumentCode,
                    masterTbl.narration AS Narration,
                    CONCAT(srp_employeesdetails.ECode,' - ',masterTbl.empName) AS suppliercustomer,
                    'IOU Voucher' AS documentName,
                    transactionCurrencyID,
                    transactionCurrency AS currency,
                    CurrencyName AS currencyDescription,
                    transactionCurrencyDecimalPlaces,
                    det.transactionAmount AS Amount,
                    approvalLevelID AS LEVEL,
                    masterTbl.companyID AS companyID,
                    masterTbl.confirmedByName,
                    DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`,
                    '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_iouvouchers' AS tableName,
                   'voucherAutoID' AS feildName
                FROM
                    `srp_erp_iouvouchers` `masterTbl`
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, voucherAutoID FROM srp_erp_iouvoucherdetails detailTbl GROUP BY voucherAutoID ) det ON ( `masterTbl`.`voucherAutoID` = det.voucherAutoID )
                    LEFT JOIN `srp_employeesdetails` `employee` ON `employee`.`EIdNo` = `masterTbl`.`empID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `masterTbl`.`voucherAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `masterTbl`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `masterTbl`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = masterTbl.segmentID
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.CurrencyID = masterTbl.transactionCurrencyID 
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'IOU'
                    AND `srp_erp_approvalusers`.`documentID` = 'IOU'
                    AND `srp_erp_documentapproved`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND masterTbl.companyID = '{$companyID}'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array('IOUE', $document_codes)){ /*** IOU Expenses ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        masterTbl.bookingMasterID AS DocumentAutoID,
                        masterTbl.documentID AS DocumentID,
                        masterTbl.bookingCode AS DocumentCode,
                        masterTbl.`comments` AS Narration,
                        CONCAT(srp_employeesdetails.ECode,' - ',masterTbl.empName AS suppliercustomer,
                        'IOU Expenses' AS documentName,
                        transactionCurrencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        masterTbl.transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                        det.transactionAmount AS Amount,
                        approvalLevelID AS LEVEL,
                        masterTbl.companyID AS companyID,
                        masterTbl.confirmedByName,
                        DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_ioubookingmaster' AS tableName,
                       'bookingMasterID' AS feildName
                    FROM
                        `srp_erp_ioubookingmaster` `masterTbl`
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, bookingMasterID FROM srp_erp_ioubookingdetails detailTbl GROUP BY bookingMasterID ) det ON ( `masterTbl`.`bookingMasterID` = det.bookingMasterID )
                        LEFT JOIN `srp_employeesdetails` `employee` ON `employee`.`EIdNo` = `masterTbl`.`empID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `masterTbl`.`bookingMasterID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `masterTbl`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `masterTbl`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = masterTbl.segmentID 
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = masterTbl.transactionCurrencyID 
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'IOUE'
                        AND `srp_erp_approvalusers`.`documentID` = 'IOUE'
                        AND `srp_erp_documentapproved`.`companyID` = '{$companyID}'
                        AND `masterTbl`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array('JP', $document_codes)){ /*** Journey Plan ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    masterTbl.journeyPlanMasterID AS DocumentAutoID,
                    masterTbl.documentID AS DocumentID,
                    masterTbl.documentCode AS DocumentCode,
                    CONCAT('Driver :',driver.driverName,' | ','Departure : ',depart.placeName,' | Destination',arrive.placeName) as Narration,
                    '-' as suppliercustomer,
                    'Journey Plan' AS documentName,
                    '' AS currencyID,
                    '' AS currency,
                    '' AS currencyDescription,
                    ' ' AS transactionCurrencyDecimalPlaces,
                    '' as Amount,
                    `approvalLevelID`  AS LEVEL,
                    masterTbl.companyID,
                    masterTbl.confirmedByName,
                    DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    '' AS `payrollYear`,
                    '' AS `payrollMonth`,
                    '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_journeyplan_master' AS tableName,
                   'journeyPlanMasterID' AS feildName
                FROM
                    `srp_erp_journeyplan_master` `masterTbl`
                    LEFT JOIN ( SELECT MAX( JP_RouteDetailsID ) AS JP_RouteDetailsID, journeyPlanMasterID FROM srp_erp_journeyplan_routedetails GROUP BY journeyPlanMasterID ) rout ON `rout`.`journeyPlanMasterID` = `masterTbl`.`journeyPlanMasterID`
                    LEFT JOIN ( SELECT MIN( JP_RouteDetailsID ) AS JP_RouteDetailsID, journeyPlanMasterID FROM srp_erp_journeyplan_routedetails GROUP BY journeyPlanMasterID ) routmin ON `routmin`.`journeyPlanMasterID` = `masterTbl`.`journeyPlanMasterID`
                    LEFT JOIN `fleet_drivermaster` `driver` ON `driver`.`driverMasID` = `masterTbl`.`driverID`
                    LEFT JOIN `fleet_vehiclemaster` `vehicalemaster` ON `vehicalemaster`.`vehicleMasterID` = `masterTbl`.`vehicleID`
                    LEFT JOIN `srp_erp_journeyplan_routedetails` `arrive` ON `arrive`.`JP_RouteDetailsID` = `rout`.`JP_RouteDetailsID`
                    LEFT JOIN `srp_erp_journeyplan_routedetails` `depart` ON `depart`.`JP_RouteDetailsID` = `routmin`.`JP_RouteDetailsID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `masterTbl`.`journeyPlanMasterID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `masterTbl`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `masterTbl`.`currentLevelNo`
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'JP'
                    AND `srp_erp_approvalusers`.`documentID` = 'JP'
                    AND `srp_erp_documentapproved`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = ''";
        }

        if(in_array('JV', $document_codes)){ /*** Journal Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `srp_erp_jvmaster`.`JVMasterAutoId` AS DocumentAutoID,
                        `srp_erp_jvmaster`.`documentID` AS DocumentID,
                        `JVcode` AS DocumentCode,
                        `JVNarration` AS Narration,
                        \"-\" AS suppliercustomer,
                        'Journal Voucher' AS documentName,
                        transactionCurrencyID AS currencyID,
                        `transactionCurrency` AS currency,
                        CurrencyName AS currencyDescription,
                        transactionCurrencyDecimalPlaces,
                        IFNULL( debamt.debitAmount, 0 ) AS Amount,
                        `approvalLevelID` AS LEVEL,
                        srp_erp_jvmaster.companyID AS companyID,
                        srp_erp_jvmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_jvmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_jvmaster' AS tableName,
                       'JVMasterAutoId' AS feildName
                    FROM
                        `srp_erp_jvmaster`
                        LEFT JOIN ( SELECT SUM( debitAmount ) AS debitAmount, JVMasterAutoId FROM srp_erp_jvdetail GROUP BY JVMasterAutoId ) debamt ON ( `debamt`.`JVMasterAutoId` = srp_erp_jvmaster.JVMasterAutoId )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_jvmaster`.`JVMasterAutoId`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_jvmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_jvmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = `srp_erp_jvmaster`.`transactionCurrencyID` 
                    WHERE
                        `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_jvmaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_documentapproved`.`documentID` = 'JV'
                        AND `srp_erp_approvalusers`.`documentID` = 'JV'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array('LA', $document_codes)){ /*** Leave ***/
            $setupData = getLeaveApprovalSetup();
            $approvalLevel = $setupData['approvalLevel'];
            $approvalSetup = $setupData['approvalSetup'];
            $approvalEmp_arr = $setupData['approvalEmp'];
            $leaveApp_setup = $this->db->query("SELECT approvalSetupID FROM srp_erp_leaveapprovalsetup WHERE companyID = '{$companyID}' ")->result_array();
            $lA = $ex_claim = '';

            $empID = $userID;
            $x = 0;
            $str = 'CASE';
            while($x < $approvalLevel) {
                $level = $x + 1;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                if($approvalType == 3){
                    /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                    $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                    $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                    $hrManagerID = array_column($hrManagerID, 'empID');

                    if(!empty($hrManagerID)){
                        $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( ';
                        foreach($hrManagerID as $key=>$hrManagerRow){
                            $str .= ($key > 0)? ' OR': '';
                            $str .= ' ( \''.$empID.'\' = '.$hrManagerRow.')';
                        }
                        $str .= ' , 1, 0 ) ';
                    }
                }
                else{
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( '.$managerType.' = '.$empID.', 1, 0 ) ';
                }


                $x++;
            }
            $str .= 'END AS isInApproval';

            if(!empty($leaveApp_setup)) {
                $query .= ($query != '')? ' UNION ': '';

                $query .= "SELECT leaveMasterID as DocumentAutoID, 'LA' as DocumentID, documentCode as DocumentCode, t1.comments AS Narration,
                           CONCAT( ECode, ' - ', empName ) AS suppliercustomer, 
                           'Leave'  as documentName, 
                           \"\"  as currencyID, 
                           \"\"  as currency, 
                           \"\"  as currencyDescription, 
                            \"\"  AS transactionCurrencyDecimalPlaces,
                           \"\" AS Amount, currentLevelNo AS LEVEL,
                           companyID AS companyID, confirmedByName, 
                           confirmedDate AS date, 
                           \"\"  documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth, '' AS bankGLAutoID, 
                           '' AS segmentcodedes,
                           'srp_erp_leavemaster' AS tableName,
                           'leaveMasterID' AS feildName
                           FROM (
                               SELECT *,{$str} 
                               FROM ( 
                                   SELECT leaveMasterID, documentCode, ECode, Ename2 AS empName, approvedYN, lMaster.empID, currentLevelNo, repManager, 
                                   coveringEmpID AS coveringEmp, startDate, endDate, comments, lMaster.companyID, confirmedByName, 
                                   DATE_FORMAT(confirmedDate, '%Y-%m-%d %H:%i:%s') AS confirmedDate, IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes
                                   FROM srp_erp_leavemaster AS lMaster 
                                   JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
                                   LEFT JOIN ( 
                                        SELECT empID, managerID AS repManager FROM srp_erp_employeemanagers WHERE active = 1 AND companyID = '{$companyID}' 
                                   ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID 
                                   LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = lMaster.segmentID
                                   WHERE lMaster.companyID = '{$companyID}' AND lMaster.confirmedYN = 1 AND lMaster.approvedYN = '0' 
                               ) AS leaveData
                               LEFT JOIN ( 
                                    SELECT managerID AS topManager, empID AS topEmpID FROM srp_erp_employeemanagers WHERE companyID = '{$companyID}' AND active = 1 
                               ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID
                           ) AS t1
                           WHERE t1.isInApproval = 1";
            }


            /** Leave Cancellation*/
            $setupData = getLeaveApprovalSetup();
            $approvalLevel = $setupData['approvalLevel'];
            $approvalSetup = $setupData['approvalSetup'];
            $approvalEmp_arr = $setupData['approvalEmp'];

            $x = 0;
            $str = 'CASE';
            while ($x < $approvalLevel) {
                $level = $x + 1;
                $keys = array_keys(array_column($approvalSetup, 'approvalLevel'), $level);
                $arr = array_map(function ($k) use ($approvalSetup) {
                    return $approvalSetup[$k];
                }, $keys);

                $approvalType = (!empty($arr[0])) ? $arr[0]['approvalType'] : '';
                if ($approvalType == 3) {
                    /*$hrManagerID = (!empty($arr[0])) ? $arr[0]['empID'] : '0';
                    $str .= ' WHEN( currentLevelNo = '.$level.' ) THEN IF( \''.$empID.'\' = '.$hrManagerID.', 1, 0 ) ';*/

                    $hrManagerID = (array_key_exists($level, $approvalEmp_arr)) ? $approvalEmp_arr[$level] : [];
                    $hrManagerID = array_column($hrManagerID, 'empID');

                    if (!empty($hrManagerID)) {
                        $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ';
                        foreach ($hrManagerID as $key => $hrManagerRow) {
                            $str .= ($key > 0) ? ' OR' : '';
                            $str .= ' ( \'' . $empID . '\' = ' . $hrManagerRow . ')';
                        }
                        $str .= ' , 1, 0 ) ';
                    }
                } else {
                    $managerType = (!empty($arr[0])) ? $arr[0]['desCode'] : '';
                    $str .= ' WHEN( currentLevelNo = ' . $level . ' ) THEN IF( ' . $managerType . ' = ' . $empID . ', 1, 0 ) ';
                }


                $x++;
            }
            $str .= 'END AS isInApproval';

            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT leaveMasterID as DocumentAutoID, 'LAC' as DocumentID, documentCode as DocumentCode, t1.comments AS Narration,
                        CONCAT( ECode, ' - ', empName ) AS suppliercustomer, 
                       'Leave'  as documentName, 
                       \"\"  as currencyID, 
                       \"\"  as currency, 
                       \"\"  as currencyDescription, 
                        \"\"  AS transactionCurrencyDecimalPlaces,
                       \"\" AS Amount, currentLevelNo AS LEVEL,
                       companyID AS companyID, confirmedByName, 
                       confirmedDate AS date, 
                       \"\"  documentApprovedID, \"\" AS payrollYear, \"\" AS payrollMonth, '' AS bankGLAutoID, 
                       '' AS segmentcodedes,
                       'srp_erp_leavemaster' AS tableName,
                       'leaveMasterID' AS feildName
                       FROM( SELECT *, {$str} FROM (
                                        SELECT leaveMasterID, documentCode, ECode, Ename2 AS empName, approvedYN, lMaster.empID, currentLevelNo, repManager, 
                                   coveringEmpID AS coveringEmp, startDate, endDate, cancelRequestComment AS comments, lMaster.companyID, confirmedByName, 
                                   DATE_FORMAT(confirmedDate, '%Y-%m-%d %H:%i:%s') AS confirmedDate, IFNULL(segmentmaster.segmentCode,'-') as segmentcodedes
                                        FROM srp_erp_leavemaster AS lMaster
                                        JOIN srp_employeesdetails AS empTB ON empTB.EIdNo = lMaster.empID
                                        LEFT JOIN (
                                            SELECT empID, managerID AS repManager
                                            FROM srp_erp_employeemanagers WHERE active = 1 AND companyID={$companyID}
                                        ) AS repoManagerTB ON lMaster.empID = repoManagerTB.empID
                                         LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = lMaster.segmentID
                                        WHERE lMaster.companyID = '{$companyID}' AND lMaster.confirmedYN = 1 AND
                                        lMaster.approvedYN = '1' AND lMaster.cancelledYN = '0' AND requestForCancelYN = 1
                                    ) AS leaveData
                                    LEFT JOIN (
                                        SELECT managerID AS topManager, empID AS topEmpID
                                        FROM srp_erp_employeemanagers WHERE companyID={$companyID} AND active = 1
                                    ) AS topManagerTB ON leaveData.repManager = topManagerTB.topEmpID
                        ) AS t1
                       WHERE t1.isInApproval = 1";

        }

        if(in_array( 'LEC', $document_codes)) {/*** Leave Encashment ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT masterTbl.masterID AS DocumentAutoID, masterTbl.documentID AS DocumentID, masterTbl.documentCode AS DocumentCode,
                        narration as Narration, \"-\" as suppliercustomer, 
                        'Leave Encashment' AS documentName,
                        trCurrencyID AS currencyID,
                        cur_mas.CurrencyCode AS currency,
                        CurrencyName AS currencyDescription,
                        trDPlace AS transactionCurrencyDecimalPlaces,
                        0 as Amount, approvalLevelID AS LEVEL,
                        masterTbl.companyID, masterTbl.confirmedByName,
                        DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID, \"\" AS `payrollYear`, 
                        masterTbl.document_type AS `payrollMonth`, '' AS bankGLAutoID, 
                        '' AS segmentcodedes,
                       'srp_erp_pay_leaveencashment' AS tableName,
                       'masterID' AS feildName
                        FROM srp_erp_pay_leaveencashment masterTbl	 
                        JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = masterTbl.masterID
                        JOIN srp_erp_currencymaster AS cur_mas ON cur_mas.currencyID = masterTbl.trCurrencyID
                        AND srp_erp_documentapproved.approvalLevelID = masterTbl.currentLevelNo
                        JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = masterTbl.currentLevelNo
                        WHERE srp_erp_documentapproved.documentID = 'LEC' AND srp_erp_approvalusers.documentID = 'LEC'
                        AND srp_erp_documentapproved.companyID ='{$companyID}' AND srp_erp_approvalusers.companyID = '{$companyID}'
                        AND srp_erp_approvalusers.employeeID = '{$userID}' AND srp_erp_documentapproved.approvedYN = ''";
        }

        if(in_array( 'LO', $document_codes)) {/*** Loan ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        `e_loan`.`ID` AS `DocumentAutoID`,
                        `e_loan`.`documentID` AS `DocumentID`,
                            `loanCode` as DocumentCode,
                            IFNULL(loanDescription,'-') as Narration,
                       
                        CONCAT(ECode,' - ',Ename2) AS suppliercustomer,
                       'Loan' AS documentName,
                        '' AS `currencyID`,
                        '' AS `currency`,
                        '' AS `currencyDescription`,
                        '' AS `transactionCurrencyDecimalPlaces`,
                        \" \"  AS Amount,
                        `approvalLevelID` AS LEVEL,
                        e_loan.companyID AS companyID,
                        e_loan.confirmedByName,
                        DATE_FORMAT(e_loan.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`,
                        '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_pay_emploan' AS tableName,
                       'ID' AS feildName
                    FROM
                        `srp_erp_pay_emploan` AS `e_loan`
                        JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `e_loan`.`ID`
                        AND `approve`.`approvalLevelID` = `e_loan`.`currentLevelNo`
                        JOIN `srp_employeesdetails` AS `emp` ON `emp`.`EIdNo` = `e_loan`.`empID`
                        JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `e_loan`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = e_loan.segmentID
                    WHERE
                        `approve`.`documentID` = 'LO'
                        AND `ap`.`documentID` = 'LO'
                        AND `ap`.`employeeID` =  '{$userID}'
                        AND `approve`.`approvedYN` = ''
                        AND `e_loan`.`companyID` = '{$companyID}'
                        AND `ap`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'MI', $document_codes)) {/*** Material Issue ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                srp_erp_itemissuemaster.itemIssueAutoID AS DocumentAutoID,
                srp_erp_itemissuemaster.documentID AS DocumentID,
                itemIssueCode AS DocumentCode,
                srp_erp_itemissuemaster.`comment` AS Narration,
                IF( LENGTH(srp_erp_itemissuemaster.employeeCode), 
	            CONCAT(srp_erp_itemissuemaster.employeeCode,' - ',srp_erp_itemissuemaster.employeeName),
	            IFNULL( srp_erp_itemissuemaster.employeeName, '-'  ) ) AS suppliercustomer,
               
                'Material Issue' AS documentName,
                companyLocalCurrencyID as currencyID,
                companyLocalCurrency AS currency,
                CurrencyName AS currencyDescription,
                companyLocalCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                det.totalValue AS Amount,
                currentLevelNo AS LEVEL,
                srp_erp_itemissuemaster.companyID AS companyID,
                srp_erp_itemissuemaster.confirmedByName AS confirmname,
                DATE_FORMAT(srp_erp_itemissuemaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                documentApprovedID,
                \"\" AS `payrollYear`,
                \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
               'srp_erp_itemissuemaster' AS tableName,
               'itemIssueAutoID' AS feildName
            FROM
                `srp_erp_itemissuemaster`
                LEFT JOIN ( SELECT SUM( totalValue ) AS totalValue, itemIssueAutoID FROM srp_erp_itemissuedetails GROUP BY itemIssueAutoID ) det ON ( `det`.`itemIssueAutoID` = srp_erp_itemissuemaster.itemIssueAutoID )
                JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_itemissuemaster`.`itemIssueAutoID`
                AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_itemissuemaster`.`currentLevelNo`
                JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_itemissuemaster`.`currentLevelNo`
                LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_itemissuemaster.segmentID
                LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_itemissuemaster.companyLocalCurrencyID
            WHERE
                `srp_erp_documentapproved`.`documentID` = 'MI'
                AND `srp_erp_approvalusers`.`documentID` = 'MI'
                AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                AND `srp_erp_itemissuemaster`.`companyID` = '{$companyID}'
                AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'MR', $document_codes)) {/*** Material Request ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        srp_erp_materialrequest.mrAutoID AS DocumentAutoID,
                        srp_erp_materialrequest.DocumentID AS DocumentID,
                        MRCode AS DocumentCode,
                        IFNULL( `comment`, '-' ) AS Narration,
                        IF(LENGTH(srp_erp_materialrequest.employeeCode),
                            CONCAT(srp_erp_materialrequest.employeeCode,' - ',srp_erp_materialrequest.employeeName),
                            IFNULL( srp_erp_materialrequest.employeeName, '-'))  AS suppliercustomer,
                        
                       'Material Request' AS documentName,
                        '' AS `currencyID`,
                        '' AS `currency`,
                        '' AS `currencyDescription`,
                        '' AS `transactionCurrencyDecimalPlaces`,
                        \" \" AS Amount,
                        approvalLevelID AS LEVEL,
                        srp_erp_materialrequest.companyID AS companyID,
                        srp_erp_materialrequest.confirmedByName,
                        DATE_FORMAT(srp_erp_materialrequest.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, 
                        IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_materialrequest' AS tableName,
                       'mrAutoID' AS feildName
                    FROM
                        `srp_erp_materialrequest`
                        LEFT JOIN ( SELECT SUM( qtyRequested ) AS qtyRequested, mrAutoID FROM srp_erp_materialrequestdetails GROUP BY mrAutoID ) det ON ( `det`.`mrAutoID` = srp_erp_materialrequest.mrAutoID )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_materialrequest`.`mrAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_materialrequest`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_materialrequest`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_materialrequest.segmentID
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'MR'
                        AND `srp_erp_approvalusers`.`documentID` = 'MR'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_materialrequest`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'MRN', $document_codes)) {/*** Material Receipt Note ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    srp_erp_materialreceiptmaster.mrnAutoID AS DocumentAutoID,
                    srp_erp_materialreceiptmaster.documentID AS DocumentID,
                    mrnCode AS DocumentCode,
                    IFNULL( `comment`, '-' ) AS Narration,
                    IF(LENGTH(srp_erp_materialreceiptmaster.employeeCode),
                        CONCAT(srp_erp_materialreceiptmaster.employeeCode,' - ',srp_erp_materialreceiptmaster.employeeName),
                        IFNULL( srp_erp_materialreceiptmaster.employeeName, '-')) AS suppliercustomer,
                    'Material Receipt Note' AS documentName,
                    '' AS currencyID,
                    \" \" AS currency,
                     '' AS `currencyDescription`,
                    \" \" AS Amount,
                    approvalLevelID AS LEVEL,
                    srp_erp_materialreceiptmaster.companyID AS companyID,
                    \" \" AS transactionCurrencyDecimalPlaces,
                    srp_erp_materialreceiptmaster.confirmedByName,
                    DATE_FORMAT(srp_erp_materialreceiptmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_materialreceiptmaster' AS tableName,
                   'mrnAutoID' AS feildName
                FROM
                    `srp_erp_materialreceiptmaster`
                    LEFT JOIN ( SELECT SUM( qtyReceived ) AS qtyReceived, mrnAutoID FROM srp_erp_materialreceiptdetails GROUP BY mrnAutoID ) det ON ( `det`.`mrnAutoID` = srp_erp_materialreceiptmaster.mrnAutoID )
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_materialreceiptmaster`.`mrnAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_materialreceiptmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_materialreceiptmaster.segmentID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'MRN'
                    AND `srp_erp_approvalusers`.`documentID` = 'MRN'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_materialreceiptmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'PO', $document_codes)) {/*** Purchase Order ***/
            $query .= ($query != '')? ' UNION ': '';

            
            switch ($amountBasedApproval) {
                case 1:
                    $query .= "SELECT
                    srp_erp_purchaseordermaster.purchaseOrderID AS DocumentAutoID,
                    srp_erp_purchaseordermaster.DocumentID AS DocumentID,
                    purchaseOrderCode AS DocumentCode,
                    IFNULL(narration, '') AS Narration,
                    CONCAT(srp_erp_suppliermaster.supplierSystemCode,' - ',srp_erp_suppliermaster.supplierName)  AS suppliercustomer,
                    'Purchase Order' AS documentName,
                    srp_erp_purchaseordermaster.transactionCurrencyID AS currencyID,
                    srp_erp_purchaseordermaster.transactionCurrency AS currency,
                    CurrencyName AS currencyDescription,
                    srp_erp_purchaseordermaster.transactionCurrencyDecimalPlaces,
                    ( det.transactionAmount - generalDiscountAmount ) AS Amount,
                    currentLevelNo AS LEVEL,
                    srp_erp_purchaseordermaster.companyID AS companyID,
                    srp_erp_purchaseordermaster.confirmedByName,
                    DATE_FORMAT(srp_erp_purchaseordermaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_purchaseordermaster' AS tableName,
                   'purchaseOrderID' AS feildName
                FROM
                    `srp_erp_purchaseordermaster`
                    LEFT JOIN ( SELECT SUM( totalAmount ) AS transactionAmount, purchaseOrderID FROM srp_erp_purchaseorderdetails GROUP BY purchaseOrderID ) det ON ( `det`.`purchaseOrderID` = srp_erp_purchaseordermaster.purchaseOrderID )
                    LEFT JOIN ( SELECT 
	                            srp_erp_purchaseordermaster.purchaseOrderID AS purchaseOrderID, 
                                srp_erp_purchaseordermaster.companyLocalExchangeRate,
                                transactionCurrencyID, 
                                transactionCurrency,
                                (( det.transactionAmount -( generalDiscountPercentage / 100 )* det.transactionAmount )+ IFNULL( gentax.gentaxamount, 0 ) ) /  companyLocalExchangeRate AS total_value 
                                FROM
	                            srp_erp_purchaseordermaster
	                                LEFT JOIN ( SELECT 
                                                SUM( totalAmount )+ ifnull( SUM( taxAmount ), 0 ) AS transactionAmount, 
                                                purchaseOrderID 
                                                FROM 
                                                srp_erp_purchaseorderdetails 
                                                GROUP BY 
                                                purchaseOrderID ) det ON det.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID
	                                LEFT JOIN ( SELECT
		                                        ifnull( SUM( amount ), 0 ) AS gentaxamount,
		                                        documentMasterAutoID 
	                                            FROM
		                                        srp_erp_taxledger 
	                                            WHERE
		                                        documentID = 'PO' 
		                                        AND documentDetailAutoID IS NULL 
		                                        AND companyID = $companyID
	                                            GROUP BY
		                                        documentMasterAutoID) gentax ON ( gentax.documentMasterAutoID = srp_erp_purchaseordermaster.purchaseOrderID ) 
	                                            )  approvalBased ON  approvalBased.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID
                    
                    LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_purchaseordermaster`.`supplierID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaseordermaster`.`purchaseOrderID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_purchaseordermaster.segmentID
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_purchaseordermaster.transactionCurrencyID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'PO'
                    AND `srp_erp_approvalusers`.`documentID` = 'PO'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND srp_erp_approvalusers.fromAmount  <=approvalBased.total_value AND srp_erp_approvalusers.toAmount >= approvalBased.total_value
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_purchaseordermaster`.`companyID` = '{$companyID}'";
                break;

                default:
                $query .= "SELECT
                srp_erp_purchaseordermaster.purchaseOrderID AS DocumentAutoID,
                srp_erp_purchaseordermaster.DocumentID AS DocumentID,
                purchaseOrderCode AS DocumentCode,
                IFNULL(narration, '') AS Narration,
                CONCAT(srp_erp_suppliermaster.supplierSystemCode,' - ',srp_erp_suppliermaster.supplierName)  AS suppliercustomer,
                'Purchase Order' AS documentName,
                 transactionCurrencyID AS currencyID,
                transactionCurrency AS currency,
                CurrencyName AS currencyDescription,
                srp_erp_purchaseordermaster.transactionCurrencyDecimalPlaces,
                ( det.transactionAmount - generalDiscountAmount ) AS Amount,
                currentLevelNo AS LEVEL,
                srp_erp_purchaseordermaster.companyID AS companyID,
                srp_erp_purchaseordermaster.confirmedByName,
                DATE_FORMAT(srp_erp_purchaseordermaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                documentApprovedID,
                \"\" AS `payrollYear`,
                \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
               'srp_erp_purchaseordermaster' AS tableName,
               'purchaseOrderID' AS feildName
            FROM
                `srp_erp_purchaseordermaster`
                LEFT JOIN ( SELECT SUM( totalAmount ) AS transactionAmount, purchaseOrderID FROM srp_erp_purchaseorderdetails GROUP BY purchaseOrderID ) det ON ( `det`.`purchaseOrderID` = srp_erp_purchaseordermaster.purchaseOrderID )
                LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_purchaseordermaster`.`supplierID`
                JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaseordermaster`.`purchaseOrderID`
                AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaseordermaster`.`currentLevelNo`
                LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_purchaseordermaster.segmentID
                LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_purchaseordermaster.transactionCurrencyID
            WHERE
                `srp_erp_documentapproved`.`documentID` = 'PO'
                AND `srp_erp_approvalusers`.`documentID` = 'PO'
                AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                AND `srp_erp_documentapproved`.`approvedYN` = '0'
                AND `srp_erp_purchaseordermaster`.`companyID` = '{$companyID}'";
            }
            
            
            
            
            
        }

        if(in_array( 'PRQ', $document_codes)) {/*** Purchase Request ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        srp_erp_purchaserequestmaster.purchaseRequestID AS DocumentAutoID,
                        srp_erp_purchaserequestmaster.documentID AS DocumentID,
                        purchaseRequestCode AS DocumentCode,
                        narration AS Narration,
                        \"-\" AS suppliercustomer,
                        'purchase Request' AS documentName,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        srp_erp_purchaserequestmaster.transactionCurrencyDecimalPlaces,
                        det.transactionAmount AS Amount,
                        approvalLevelID AS LEVEL,
                        srp_erp_purchaserequestmaster.companyID AS companyID,
                        srp_erp_purchaserequestmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_purchaserequestmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        srp_erp_documentapproved.documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_purchaserequestmaster' AS tableName,
                       'purchaseRequestID' AS feildName
                    FROM
                        `srp_erp_purchaserequestmaster`
                        LEFT JOIN ( SELECT SUM( totalAmount ) AS transactionAmount, purchaseRequestID FROM srp_erp_purchaserequestdetails GROUP BY purchaseRequestID ) det ON ( `det`.`purchaseRequestID` = srp_erp_purchaserequestmaster.purchaseRequestID )
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_purchaserequestmaster`.`purchaseRequestID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_purchaserequestmaster`.`currentLevelNo`
                        LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID =srp_erp_purchaserequestmaster.segmentID 
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_purchaserequestmaster.transactionCurrencyID 
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'PRQ'
                        AND `srp_erp_approvalusers`.`documentID` = 'PRQ'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND (
                        `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        OR (
                        `srp_erp_approvalusers`.`employeeID` = - 1
                        AND srp_erp_purchaserequestmaster.requestedEmpID IN (
                    SELECT
                        empmanagers.empID
                    FROM
                        srp_employeesdetails empdetail
                        JOIN srp_erp_employeemanagers empmanagers ON empdetail.EIdNo = empmanagers.empID
                        AND empmanagers.active = 1
                    WHERE
                        empmanagers.companyID = '{$companyID}'
                        AND empmanagers.managerID = '{$userID}'
                        )
                        )
                        )
                        AND `srp_erp_purchaserequestmaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'PV', $document_codes)) {/*** Payment Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    srp_erp_paymentvouchermaster.payVoucherAutoId AS DocumentAutoID,
                    srp_erp_paymentvouchermaster.documentID AS DocumentID,
                    PVcode AS DocumentCode,
                    IFNULL( PVNarration, '-' ) AS Narration,
                CASE
                    pvType
                    WHEN 'Direct' THEN
                    IF(LENGTH(partyCode),CONCAT(partyCode,' - ',partyName),IFNULL(partyName, '-')) 
                    WHEN 'Employee' THEN
                    CONCAT(srp_employeesdetails.ECode,' - ',srp_employeesdetails.Ename2)
                    WHEN 'Supplier' THEN
                    CONCAT(srp_erp_suppliermaster.supplierSystemCode,' - ',srp_erp_suppliermaster.supplierName ) 
                    END AS suppliercustomer,
                    'Payment Voucher' AS documentName,
                    transactionCurrencyID AS currencyID,
                    transactionCurrency AS currency,
                    CurrencyName AS currencyDescription,
                    transactionCurrencyDecimalPlaces AS transactionCurrencyDecimalPlaces,
                    (
                    ( ( IFNULL( addondet.taxPercentage, 0 ) / 100 ) * IFNULL( tyepdet.transactionAmount, 0 ) ) + IFNULL( det.transactionAmount, 0 ) - IFNULL( debitnote.transactionAmount, 0 ) - IFNULL( SR.transactionAmount, 0 )
                    ) AS Amount,
                    approvalLevelID AS LEVEL,
                    srp_erp_paymentvouchermaster.companyID AS companyID,
                    srp_erp_paymentvouchermaster.confirmedByName,
                    DATE_FORMAT(srp_erp_paymentvouchermaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_paymentvouchermaster' AS tableName,
                   'payVoucherAutoId' AS feildName
                FROM
                    `srp_erp_paymentvouchermaster`
                    LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS transactionAmount,
                    payVoucherAutoId
                FROM
                    srp_erp_paymentvoucherdetail
                WHERE
                    srp_erp_paymentvoucherdetail.type != \"debitnote\"
                    AND srp_erp_paymentvoucherdetail.type != \"SR\"
                GROUP BY
                    payVoucherAutoId
                    ) det ON ( `det`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                    LEFT JOIN (
                SELECT
                    SUM( transactionAmount ) AS transactionAmount,
                    payVoucherAutoId
                FROM
                    srp_erp_paymentvoucherdetail
                WHERE
                    srp_erp_paymentvoucherdetail.type = \"GL\"
                    OR srp_erp_paymentvoucherdetail.type = \"Item\"
                GROUP BY
                    payVoucherAutoId
                    ) tyepdet ON ( `tyepdet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = \"debitnote\" GROUP BY payVoucherAutoId ) debitnote ON ( `debitnote`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = \"SR\" GROUP BY payVoucherAutoId ) SR ON ( `SR`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, SUM( taxPercentage ) AS taxPercentage, payVoucherAutoId FROM srp_erp_paymentvouchertaxdetails GROUP BY payVoucherAutoId ) addondet ON ( `addondet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                    LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_paymentvouchermaster`.`partyID`
                    LEFT JOIN `srp_employeesdetails` ON `srp_employeesdetails`.`EIdNo` = `srp_erp_paymentvouchermaster`.`partyID`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_paymentvouchermaster`.`PayVoucherAutoId`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_paymentvouchermaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_paymentvouchermaster.segmentID
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_paymentvouchermaster.transactionCurrencyID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'PV'
                    AND `srp_erp_approvalusers`.`documentID` = 'PV'
                    /*AND `pvType` <> 'SC'*/
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_paymentvouchermaster`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'RJV', $document_codes)) {/*** Recurring Journal Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    `srp_erp_recurringjvmaster`.`RJVMasterAutoId` AS `DocumentAutoID`,
                    `srp_erp_recurringjvmaster`.`documentID` AS `DocumentID`,
                    `RJVcode` AS `DocumentCode`,
                    `RJVNarration` AS Narration,
                    \"-\" AS suppliercustomer,
                    'Recurring Journal Voucher' AS documentName,
                    transactionCurrencyID AS currencyID,
                    `transactionCurrency` AS currency,
                    CurrencyName AS currencyDescription,
                    transactionCurrencyDecimalPlaces,
                    IFNULL( debamt.debitAmount, 0 ) AS Amount,
                    `approvalLevelID` AS LEVEL,
                    srp_erp_recurringjvmaster.companyID AS companyID,
                    srp_erp_recurringjvmaster.confirmedByName,
                    DATE_FORMAT(srp_erp_recurringjvmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_recurringjvmaster' AS tableName,
                   'RJVMasterAutoId' AS feildName
                FROM
                    `srp_erp_recurringjvmaster`
                    LEFT JOIN ( SELECT SUM( debitAmount ) AS debitAmount, RJVMasterAutoId FROM srp_erp_recurringjvdetail GROUP BY RJVMasterAutoId ) debamt ON ( `debamt`.`RJVMasterAutoId` = srp_erp_recurringjvmaster.RJVMasterAutoId )
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_recurringjvmaster`.`RJVMasterAutoId`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_recurringjvmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_recurringjvmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_recurringjvmaster.transactionCurrencyID
                WHERE
                    `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                    AND `srp_erp_recurringjvmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_documentapproved`.`documentID` = 'RJV'
                    AND `srp_erp_approvalusers`.`documentID` = 'RJV'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'RV', $document_codes)) {/*** Receipt Voucher ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        srp_erp_customerreceiptmaster.receiptVoucherAutoId AS DocumentAutoID,
                        srp_erp_customerreceiptmaster.documentID AS DocumentID,
                        RVcode AS DocumentCode,
                        RVNarration AS Narration,
                        IF
                        ( customerID IS NULL OR customerID = 0, 
                        CONCAT(srp_erp_customerreceiptmaster.customerSystemCode,' - ',srp_erp_customerreceiptmaster.customerName), 
                        CONCAT(srp_erp_customermaster.customerSystemCode,' - ',srp_erp_customermaster.customerName) ) AS suppliercustomer,
                        'Receipt Voucher' AS documentName,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        CurrencyName AS currencyDescription,
                        transactionCurrencyDecimalPlaces,
                        (
                        ( ( IFNULL( addondet.taxPercentage, 0 ) / 100 ) * IFNULL( tyepdet.transactionAmount, 0 ) ) + IFNULL( det.transactionAmount, 0 ) - IFNULL( Creditnots.transactionAmount, 0 )
                        ) AS Amount,
                        approvalLevelID AS LEVEL,
                        srp_erp_customerreceiptmaster.companyID AS companyID,
                        srp_erp_customerreceiptmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_customerreceiptmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                       'srp_erp_customerreceiptmaster' AS tableName,
                       'receiptVoucherAutoId' AS feildName
                    FROM
                        `srp_erp_customerreceiptmaster`
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type != \"creditnote\" GROUP BY receiptVoucherAutoId ) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `srp_erp_customerreceiptmaster`.`customerID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_customerreceiptmaster`.`receiptVoucherAutoId`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_customerreceiptmaster`.`currentLevelNo`
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = \"creditnote\" GROUP BY receiptVoucherAutoId ) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
                        LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
                        LEFT JOIN (
                    SELECT
                        SUM( transactionAmount ) AS transactionAmount,
                        receiptVoucherAutoId
                    FROM
                        srp_erp_customerreceiptdetail
                    WHERE
                        srp_erp_customerreceiptdetail.type = \"GL\"
                        OR srp_erp_customerreceiptdetail.type = \"Item\"
                    GROUP BY
                        receiptVoucherAutoId
                        ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_customerreceiptmaster.segmentID
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_customerreceiptmaster.transactionCurrencyID
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'RV'
                        AND `srp_erp_approvalusers`.`documentID` = 'RV'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_customerreceiptmaster`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SA', $document_codes)) {/*** Stock Adjustment ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    stockAdjustmentAutoID AS DocumentAutoID,
                    srp_erp_stockadjustmentmaster.documentID AS DocumentID,
                    stockAdjustmentCode AS DocumentCode,
                    IFNULL( srp_erp_stockadjustmentmaster.`comment`, '-' ) AS Narration,
                    \"-\" AS suppliercustomer,
                    'Stock Adjustment' AS documentName,
                    '' AS currencyID,
                    \" \" AS currency,
                    '' AS currencyDescription,
                    \" \" AS Amount,
                    approvalLevelID AS LEVEL,
                    srp_erp_stockadjustmentmaster.companyID AS companyID,
                    \" \" AS transactionCurrencyDecimalPlaces,
                    srp_erp_stockadjustmentmaster.confirmedByName,
                    DATE_FORMAT(srp_erp_stockadjustmentmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_stockadjustmentmaster' AS tableName,
                   'stockAdjustmentAutoID' AS feildName
                FROM
                    `srp_erp_stockadjustmentmaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockadjustmentmaster`.`stockAdjustmentAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockadjustmentmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_stockadjustmentmaster.segmentID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'SA'
                    AND `srp_erp_approvalusers`.`documentID` = 'SA'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_stockadjustmentmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SAR', $document_codes)) {/*** Salary Advance Request ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT masterTbl.masterID AS DocumentAutoID, masterTbl.documentID AS DocumentID, masterTbl.documentCode AS DocumentCode,
                    narration as Narration, \"-\" as suppliercustomer, 
                    'Salart Advance Request' AS documentName,
                    currencyID AS currencyID,
                    cur_mas.CurrencyCode AS currency,
                    CurrencyName AS currencyDescription,
                    trDPlace AS transactionCurrencyDecimalPlaces, 
                    request_amount as Amount, approvalLevelID AS LEVEL,
                    masterTbl.companyID, masterTbl.confirmedByName,
                    DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`, \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_pay_salaryadvancerequest' AS tableName,
                   'masterID' AS feildName
                    FROM srp_erp_pay_salaryadvancerequest masterTbl	 
                    JOIN srp_erp_documentapproved ON srp_erp_documentapproved.documentSystemCode = masterTbl.masterID
                    JOIN srp_erp_currencymaster AS cur_mas ON cur_mas.currencyID = masterTbl.trCurrencyID
                    AND srp_erp_documentapproved.approvalLevelID = masterTbl.currentLevelNo
                    JOIN srp_erp_approvalusers ON srp_erp_approvalusers.levelNo = masterTbl.currentLevelNo
                    WHERE srp_erp_documentapproved.documentID = 'SAR' AND srp_erp_approvalusers.documentID = 'SAR'
                    AND srp_erp_documentapproved.companyID ='{$companyID}' AND srp_erp_approvalusers.companyID = '{$companyID}'
                    AND (
                        srp_erp_approvalusers.employeeID = '{$userID}'
                        OR (
                            srp_erp_approvalusers.employeeID = - 1
                            AND masterTbl.empID IN (
                                SELECT empmanagers.empID
                                FROM srp_employeesdetails empdetail
                                JOIN srp_erp_employeemanagers empmanagers ON empdetail.EIdNo = empmanagers.empID
                                AND empmanagers.active = 1 WHERE empmanagers.companyID = '{$companyID}' AND empmanagers.managerID = '{$userID}'
                           )
                        )
                    )	
                    AND srp_erp_documentapproved.approvedYN = ''";
        }

        if(in_array( 'SC', $document_codes)) {/*** Sales Commision ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    `srp_erp_salescommisionmaster`.`salesCommisionID` AS `DocumentAutoID`,
                    `srp_erp_salescommisionmaster`.`DocumentID` AS `DocumentID`,
                    `salesCommisionCode` AS DocumentCode,
                    `Description` AS Narration,
                    \"-\" AS suppliercustomer,
                    'Sales Commision' documentName,
                    transactionCurrencyID AS currencyID,
                    `transactionCurrency` AS currency,
                    CurrencyName AS currencyDescription,
                    srp_erp_salescommisionmaster.transactionCurrencyDecimalPlaces,
                    `det2`.`transactionAmount` AS `Amount`,
                    srp_erp_salescommisionmaster.currentLevelNo AS LEVEL,
                    srp_erp_salescommisionmaster.companyID AS companyID,
                    srp_erp_salescommisionmaster.confirmedByName,
                    DATE_FORMAT(srp_erp_salescommisionmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_salescommisionmaster' AS tableName,
                   'salesCommisionID' AS feildName
                FROM
                    `srp_erp_salescommisionmaster`
                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, salesCommisionID FROM srp_erp_salescommisiondetail GROUP BY salesCommisionID ) det ON ( `det`.`salesCommisionID` = srp_erp_salescommisionmaster.salesCommisionID )
                    LEFT JOIN ( SELECT SUM( netCommision ) AS transactionAmount, salesCommisionID FROM srp_erp_salescommisionperson GROUP BY salesCommisionID ) det2 ON ( `det2`.`salesCommisionID` = srp_erp_salescommisionmaster.salesCommisionID )
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_salescommisionmaster`.`salesCommisionID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_salescommisionmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_salescommisionmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_salescommisionmaster.transactionCurrencyID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'SC'
                    AND `srp_erp_approvalusers`.`documentID` = 'SC'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_salescommisionmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SCNT', $document_codes)) {/*** Stock Counting ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    stockCountingAutoID AS DocumentAutoID,
                    srp_erp_stockcountingmaster.documentID AS DocumentID,
                    stockCountingCode AS DocumentCode,
                    IFNULL( srp_erp_stockcountingmaster.`comment`, '-' ) AS Narration,
                    \"-\" AS suppliercustomer,
                    'Stock Counting' AS documentName,
                    '' AS currencyID,
                    \" \" AS currency,
                    '' AS currencyDescription,
                    \" \" AS Amount,
                    approvalLevelID AS LEVEL,
                    srp_erp_stockcountingmaster.companyID AS companyID,
                    \" \" AS transactionCurrencyDecimalPlaces,
                    srp_erp_stockcountingmaster.confirmedByName AS confirmname,
                    DATE_FORMAT(srp_erp_stockcountingmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_stockcountingmaster' AS tableName,
                   'stockCountingAutoID' AS feildName
                FROM
                    `srp_erp_stockcountingmaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockcountingmaster`.`stockCountingAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockcountingmaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockcountingmaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on segmentmaster.segmentID = srp_erp_stockcountingmaster.segmentID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'SCNT'
                    AND `srp_erp_approvalusers`.`documentID` = 'SCNT'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_stockcountingmaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SD', $document_codes)) {/*** Salary Declaration ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        salarydeclarationMasterID AS DocumentAutoID,
                        srp_erp_salarydeclarationmaster.documentID AS DocumentID,
                        srp_erp_salarydeclarationmaster.documentSystemCode AS DocumentCode,
                            CONCAT(\"Date : \",DATE_FORMAT(srp_erp_salarydeclarationmaster.documentDate, '%d-%m-%Y'),' | Currency : ',transactionCurrency, \" | \" ,Description) AS Narration,
                        \"-\" AS suppliercustomer,
                        'Salary Declaration' AS documentName,
                        '' AS currencyID,
                        \" \"  AS currency,
                        '' AS currencyDescription,
                        \" \"  AS Amount,
                        approvalLevelID AS LEVEL,
                    
                        srp_erp_salarydeclarationmaster.companyID AS companyID,
                        srp_erp_salarydeclarationmaster.transactionCurrencyDecimalPlaces,
                        srp_erp_salarydeclarationmaster.confirmedByName,
                        DATE_FORMAT(srp_erp_salarydeclarationmaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_salarydeclarationmaster' AS tableName,
                       'salarydeclarationMasterID' AS feildName
                    FROM
                        `srp_erp_salarydeclarationmaster`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_salarydeclarationmaster`.`salarydeclarationMasterID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_salarydeclarationmaster`.`currentLevelNo`
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'SD'
                        AND `srp_erp_approvalusers`.`documentID` = 'SD'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_salarydeclarationmaster`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` ='{$companyID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = ''";
        }

        if(in_array( 'SLR', $document_codes)) {/*** Sales Return ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                        masterTbl.salesReturnAutoID AS DocumentAutoID,
                        masterTbl.documentID AS DocumentID,
                        salesReturnCode AS DocumentCode,
                        `comment` AS Narration,
                        CONCAT(srp_erp_customermaster.customerSystemCode,' - ',srp_erp_customermaster.customerName) AS suppliercustomer,
                        'Sales Return' AS documentName,
                        transactionCurrencyID AS currencyID,
                        `transactionCurrency` AS currency,
                        CurrencyName AS currencyDescription,
                        masterTbl.transactionCurrencyDecimalPlaces,
                        det.totalValue AS Amount,
                        currentLevelNo AS LEVEL,
                        masterTbl.companyID AS companyID,
                        masterTbl.confirmedByName,
                        DATE_FORMAT(masterTbl.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_salesreturnmaster' AS tableName,
                       'salesReturnAutoID' AS feildName
                    FROM
                        `srp_erp_salesreturnmaster` `masterTbl`
                        LEFT JOIN ( SELECT SUM( totalValue ) AS totalValue, salesReturnAutoID FROM srp_erp_salesreturndetails detailTbl GROUP BY salesReturnAutoID ) det ON ( `det`.`salesReturnAutoID` = masterTbl.salesReturnAutoID )
                        LEFT JOIN `srp_erp_customermaster` ON `srp_erp_customermaster`.`customerAutoID` = `masterTbl`.`customerID`
                        JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `masterTbl`.`salesReturnAutoID`
                        AND `srp_erp_documentapproved`.`approvalLevelID` = `masterTbl`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `masterTbl`.`currentLevelNo`
                        LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = masterTbl.transactionCurrencyID
                    WHERE
                        `srp_erp_documentapproved`.`documentID` = 'SLR'
                        AND `srp_erp_approvalusers`.`documentID` = 'SLR'
                        AND `srp_erp_documentapproved`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `srp_erp_documentapproved`.`approvedYN` = '0'";
        }

        if(in_array( 'SP', $document_codes)) {/*** Salary Process ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                    `payrollMasterID` AS DocumentAutoID,
                    t2.documentID AS DocumentID,
                    `t2`.`documentCode` AS `DocumentCode`,
                    IFNULL( `narration`, '-' ) AS Narration,
                    \"-\" AS suppliercustomer,
                    'Salary Process' AS documentName,
                    '' AS currencyID,
                    \" \" AS currency,
                    '' AS currencyDescription,
                    \"\" AS Amount,
                    `approvalLevelID` AS LEVEL,
                    `t2`.`companyID` AS companyID,
                    \" \" AS transactionCurrencyDecimalPlaces,
                    t2.confirmedByName,
                    DATE_FORMAT(t2.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    `payrollYear`,
                    `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                   'srp_erp_payrollmaster' AS tableName,
                   'payrollMasterID' AS feildName
                FROM
                    `srp_erp_payrollmaster` AS `t2`
                    JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `t2`.`payrollMasterID`
                    AND `approve`.`approvalLevelID` = `t2`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `t2`.`currentLevelNo`
                WHERE
                    `approve`.`documentID` = 'SP'
                    AND `ap`.`documentID` = 'SP'
                    AND `ap`.`employeeID` = '{$userID}'
                    AND `approve`.`approvedYN` = '0'
                    AND `t2`.`companyID` = '{$companyID}'
                    AND `ap`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SPN', $document_codes)) {/*** Non Salary Process ***/
            $query .= ($query != '')? ' UNION ': '';

            $query .= "SELECT
                `payrollMasterID` AS DocumentAutoID,
                t2.documentID AS DocumentID,
                `t2`.`documentCode` AS `DocumentCode`,
                `narration` AS Narration,
                \" \" AS suppliercustomer,
                'Non Salary Process' AS documentName,
                '' AS currencyID,
                \" \" AS currency,
                '' AS currencyDescription,
                \" \" AS Amount,
                approvalLevelID AS LEVEL,
                t2.companyID AS companyID,
                \" \" AS transactionCurrencyDecimalPlaces,
                t2.confirmedByName,
                DATE_FORMAT(t2.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                documentApprovedID,
                \"\" AS `payrollYear`,
                \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
               'srp_erp_non_payrollmaster' AS tableName,
               'payrollMasterID' AS feildName
            FROM
                `srp_erp_non_payrollmaster` AS `t2`
                JOIN `srp_erp_documentapproved` AS `approve` ON `approve`.`documentSystemCode` = `t2`.`payrollMasterID`
                AND `approve`.`approvalLevelID` = `t2`.`currentLevelNo`
                JOIN `srp_erp_approvalusers` AS `ap` ON `ap`.`levelNo` = `t2`.`currentLevelNo`
            WHERE
                `approve`.`documentID` = 'SPN'
                AND `ap`.`documentID` = 'SPN'
                AND `ap`.`employeeID` = '{$userID}'
                AND `approve`.`approvedYN` = '0'
                AND `ap`.`companyID` = '{$companyID}'
                AND `t2`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'SR', $document_codes)) {/*** Purchase Return ***/
            $query .= ($query != '')? ' UNION ': '';
            $query .= "SELECT
                stockReturnAutoID AS DocumentAutoID,
                srp_erp_stockreturnmaster.documentID AS DocumentID,
                stockReturnCode AS DocumentCode,
                IFNULL( srp_erp_stockreturnmaster.`comment`, '-' ) AS Narration,
                \"-\" AS suppliercustomer,
                'Purchase Return' AS documentName,
                transactionCurrencyID AS currencyID,
                transactionCurrency AS currency,
                CurrencyName AS currencyDescription,
                srp_erp_stockreturnmaster.transactionCurrencyDecimalPlaces,
                \" \" AS Amount,
                currentLevelNo AS LEVEL,
                srp_erp_stockreturnmaster.companyID AS companyID,
                confirmedByName,
                DATE_FORMAT(confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                documentApprovedID,
                \"\" AS `payrollYear`,
                \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
               'srp_erp_stockreturnmaster' AS tableName,
               'stockReturnAutoID' AS feildName
            FROM
                `srp_erp_stockreturnmaster`
                JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stockreturnmaster`.`stockReturnAutoID`
                AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stockreturnmaster`.`currentLevelNo`
                LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_stockreturnmaster.transactionCurrencyID
            WHERE
                `srp_erp_documentapproved`.`documentID` = 'SR'
                AND `srp_erp_approvalusers`.`documentID` = 'SR'
                AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                AND `srp_erp_documentapproved`.`approvedYN` = '0'
                AND `srp_erp_stockreturnmaster`.`companyID` = '{$companyID}'
                AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'ST', $document_codes)) {/*** Stock Transfer ***/
            $query .= ($query != '')? ' UNION ': '';
            $query .= "SELECT
                    stockTransferAutoID AS DocumentAutoID,
                    srp_erp_stocktransfermaster.documentID AS DocumentID,
                    stockTransferCode AS DocumentCode,
                    `comment` AS Narration,
                    \"-\" AS suppliercustomer,
                    'Stock Transfer' AS documentName,
                    '' AS currencyID,
                    \" \" AS currency,
                    '' AS currencyDescription, 
                    \" \" AS transactionCurrencyDecimalPlaces,
                    \" \" AS Amount,
                    srp_erp_stocktransfermaster.currentLevelNo AS LEVEL,
                    srp_erp_stocktransfermaster.companyID AS companyID,
                    srp_erp_stocktransfermaster.confirmedByName,
                    DATE_FORMAT(srp_erp_stocktransfermaster.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                    documentApprovedID,
                    \"\" AS `payrollYear`,
                    \"\" AS `payrollMonth`, '' AS bankGLAutoID, IFNULL(segmentmaster.segmentCode,'-') AS segmentcodedes,
                   'srp_erp_stocktransfermaster' AS tableName,
                   'stockTransferAutoID' AS feildName
                FROM
                    `srp_erp_stocktransfermaster`
                    JOIN `srp_erp_documentapproved` ON `srp_erp_documentapproved`.`documentSystemCode` = `srp_erp_stocktransfermaster`.`stockTransferAutoID`
                    AND `srp_erp_documentapproved`.`approvalLevelID` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                    JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `srp_erp_stocktransfermaster`.`currentLevelNo`
                    LEFT JOIN srp_erp_segment segmentmaster on	segmentmaster.segmentID = srp_erp_stocktransfermaster.segmentID
                WHERE
                    `srp_erp_documentapproved`.`documentID` = 'ST'
                    AND `srp_erp_approvalusers`.`documentID` = 'ST'
                    AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                    AND `srp_erp_documentapproved`.`approvedYN` = '0'
                    AND `srp_erp_stocktransfermaster`.`companyID` = '{$companyID}'
                    AND `srp_erp_approvalusers`.`companyID` = '{$companyID}'";
        }

        if(in_array( 'VD', $document_codes)) {/*** Variable Declaration ***/
            $query .= ($query != '')? ' UNION ': '';
            $query .= "SELECT
                        vpMasterID as DocumentAutoID,
                        decMas.documentID as DocumentID,
                        decMas.documentCode AS DocumentCode,
                        CONCAT(\"Currency : \",crMas.CurrencyCode,\" | \",description)  AS Narration,
                        \"-\" as suppliercustomer,
                        'Variable Declaration' AS documentName,
                        '' AS currencyID,
                        \" \" AS currency,
                        '' AS currencyDescription,
                        \" \" AS transactionCurrencyDecimalPlaces,
                        \" \" AS Amount,
                        approvalLevelID AS LEVEL,
                        decMas.companyID AS companyID,
                        emp.Ename2 as confirmedByName,
                        DATE_FORMAT(decMas.confirmedDate, '%Y-%m-%d %H:%i:%s') AS date,
                        documentApprovedID,
                        \"\" AS `payrollYear`,
                        \"\" AS `payrollMonth`, '' AS bankGLAutoID, '' AS segmentcodedes,
                       'srp_erp_variablepaydeclarationmaster' AS tableName,
                       'vpMasterID' AS feildName
                        FROM
                        `srp_erp_variablepaydeclarationmaster` AS `decMas`
                        JOIN `srp_erp_documentapproved` AS `appTB` ON `appTB`.`documentSystemCode` = `decMas`.`vpMasterID`
                        AND `appTB`.`approvalLevelID` = `decMas`.`currentLevelNo`
                        JOIN `srp_erp_approvalusers` ON `srp_erp_approvalusers`.`levelNo` = `decMas`.`currentLevelNo`
                        JOIN `srp_erp_currencymaster` `crMas` ON `decMas`.`trCurrencyID` = `crMas`.`currencyID`
                        LEFT JOIN srp_employeesdetails emp on emp.EIdNo  = decMas.confirmedByEmpID
                    WHERE
                        `appTB`.`documentID` = 'VD'
                        AND `srp_erp_approvalusers`.`documentID` = 'VD'
                        AND `srp_erp_approvalusers`.`employeeID` = '{$userID}'
                        AND `decMas`.`companyID` =  '{$companyID}'
                        AND `srp_erp_approvalusers`.`companyID` =  '{$companyID}'
                        AND `appTB`.`approvedYN` = ''";
        }

        $this->db->select('t1.DocumentAutoID as documentAutoID,
               t1.DocumentID as documentCode, 
               t1.DocumentCode as document,
	           t1.Narration as Narration, 
	           t1.documentName AS documentName,
	           t1.currency as code, 
	           t1.currencyID AS currencyID,
               t1.currencyDescription AS description,
               t1.transactionCurrencyDecimalPlaces as decimalPlaces,
	           t1.Amount as amount, 
	           t1.Level as level, 
	           t1.companyID as companyID, 
	           t1.confirmedByName as confirmedByName, 
	           t1.date as date,
		       t1.segmentcodedes as segment,
		       t1.tableName as tableName,
		       t1.feildName as feildName');
        $this->db->from("({$query}) AS t1");
        if(!empty($filter_doc)){
            $this->db->where_in('t1.DocumentID', $filter_doc);
        }
        $this->db->group_by('t1.DocumentAutoID');
        $this->db->group_by('t1.documentID');
        $documentData = $this->db->get()->result_array();

        foreach ($documentData as $row){
            $x=array();
            $currency_arr=array();
            if(!empty($row)) {
                foreach (array_keys($row) as $item){
                    switch ($item) {
                        CASE 'amount' :
                            $x[$item] = (float)$row[$item];
                            BREAK;

                        CASE 'documentAutoID' : CASE 'level' : CASE 'companyID' :
                        $x[$item] = (int)$row[$item];
                        BREAK;

                        CASE 'currencyID' :
                            if(!empty($row[$item])) {
                                $currency_arr['currencyID'] = (int)$row['currencyID'];
                                $currency_arr['code'] = $row['code'];
                                $currency_arr['description'] = $row['description'];
                                $currency_arr['decimalPlaces'] = (int)$row['decimalPlaces'];
                            } else {
                                $currencyID = current_company_default_currencyID();
                                $currency_arr['currencyID'] = (int)$currencyID;
                                $currency_arr['code'] = fetch_currency_code($currencyID);
                                $currency_arr['description'] = fetch_currency_dec($currency_arr['code']);
                                $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                            }
                            BREAK;

                        CASE 'code' :
                        CASE 'description' :
                        CASE 'decimalPlaces' :
                            break;

                        DEFAULT :
                            $x[$item] = $row[$item];
                    }
                    $x['currency']=$currency_arr;
                }
                array_push($allApproval,$x);
            }
        }

        return $allApproval;
    }

    function get_userNavigation($userType, $isGroupUser, $companyType)
    {
        $companyID = current_companyID();
        $empID = current_userID();
        $documentID = array();
        if ($userType != 1) {

            if ($companyType == 1) {
                if ($isGroupUser == 1) {
                    $db2 = $this->load->database('db2', TRUE);
                    $db2->select('userGroupID');
                    $db2->where("companyID", $companyID);
                    $db2->where("empID", $empID);
                    $groupdetails = $db2->get("groupusercompanies")->row_array();
                    $eidno = $this->db->query("SELECT EIdNo from srp_employeesdetails WHERE Erp_companyID={$companyID} AND isSystemAdmin=1")->row_array();
                    $idno = $eidno['EIdNo'];
                    if (empty($idno)) {
                        $idno = current_userID();
                    }
                    $userGroupID = $groupdetails['userGroupID'];
                    $detail = $this->db->query("SELECT srp_erp_navigationmenus.languageID, srp_erp_navigationusergroupsetup.*,template.TempPageNameLink, srp_erp_navigationmenus.isExternalLink FROM srp_erp_employeenavigation INNER JOIN srp_erp_navigationusergroupsetup ON srp_erp_employeenavigation.userGroupID = srp_erp_navigationusergroupsetup.userGroupID INNER JOIN srp_erp_navigationmenus ON srp_erp_navigationmenus.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID   LEFT JOIN (SELECT srp_erp_templates.TempMasterID,srp_erp_templates.navigationMenuID,srp_erp_templatemaster.TempPageNameLink FROM srp_erp_templates LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_templates.TempMasterID WHERE srp_erp_templates.companyID={$companyID}  ) AS template ON (template.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID) WHERE empID={$empID} AND srp_erp_employeenavigation.companyID={$companyID} AND srp_erp_employeenavigation.userGroupID={$userGroupID} AND srp_erp_navigationmenus.basicYN = 1  Order by levelNo,sortOrder ASC ")->result_array();
                }
                else {
                    $detail = $this->db->query("SELECT srp_erp_navigationmenus.*, template.TempPageNameLink, srp_erp_navigationmenus.isExternalLink 
                                FROM srp_erp_navigationmenus
                                LEFT JOIN (
                                    SELECT srp_erp_templates.TempMasterID, srp_erp_templates.navigationMenuID, srp_erp_templatemaster.TempPageNameLink 
                                    FROM srp_erp_templates
                                    LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_templates.TempMasterID 
                                    WHERE srp_erp_templates.companyID = {$companyID} 
                                ) AS template ON template.navigationMenuID = srp_erp_navigationmenus.navigationMenuID  
                                WHERE srp_erp_navigationmenus.basicYN = 1 
                                ORDER BY levelNo, sortOrder ASC")->result_array();
                }
            }
            else {
                $sql = "SELECT srp_erp_navigationmenus.languageID,srp_erp_companysubgroupnavigationsetup.*,template.TempPageNameLink 
                FROM srp_erp_companysubgroupnavigationsetup 
                LEFT JOIN srp_erp_navigationmenus ON srp_erp_navigationmenus.navigationMenuID = srp_erp_companysubgroupnavigationsetup.navigationMenuID
                LEFT JOIN srp_erp_companysubgroupmaster ON srp_erp_companysubgroupnavigationsetup.compaySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID
                LEFT JOIN srp_erp_companysubgroupemployees ON srp_erp_companysubgroupemployees.companySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID
                LEFT JOIN (
                    SELECT srp_erp_companysubgrouptemplates.TempMasterID,srp_erp_companysubgrouptemplates.navigationMenuID,srp_erp_templatemaster.TempPageNameLink,companySubGroupID 
                    FROM srp_erp_companysubgrouptemplates 
                    LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_companysubgrouptemplates.TempMasterID 
                ) AS template ON (template.navigationMenuID = srp_erp_companysubgroupnavigationsetup.navigationMenuID /*AND template.companySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID*/)
                WHERE srp_erp_companysubgroupemployees.EmpID={$empID} AND companyGroupID={$companyID} AND isGroup = 1 Order by levelNo,sortOrder ASC ";
                $detail = $this->db->query($sql)->result_array();
            }
        }
        else {

            if ($companyType == 1) {
                if ($isGroupUser == 1) {
                    $db2 = $this->load->database('db2', TRUE);
                    $db2->select('userGroupID');
                    $db2->where("companyID", $companyID);
                    $db2->where("empID", $empID);
                    $groupdetails = $db2->get("groupusercompanies")->row_array();
                    $eidno = $this->db->query("SELECT EIdNo from srp_employeesdetails WHERE Erp_companyID={$companyID} AND isSystemAdmin=1")->row_array();
                    $idno = $eidno['EIdNo'];
                    if (empty($idno)) {
                        $idno = current_userID();
                    }
                    $userGroupID = $groupdetails['userGroupID'];
                    $detail = $this->db->query("SELECT srp_erp_navigationmenus.languageID, srp_erp_navigationusergroupsetup.*,template.TempPageNameLink, srp_erp_navigationmenus.isExternalLink FROM srp_erp_employeenavigation INNER JOIN srp_erp_navigationusergroupsetup ON srp_erp_employeenavigation.userGroupID = srp_erp_navigationusergroupsetup.userGroupID INNER JOIN srp_erp_navigationmenus ON srp_erp_navigationmenus.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID   LEFT JOIN (SELECT srp_erp_templates.TempMasterID,srp_erp_templates.navigationMenuID,srp_erp_templatemaster.TempPageNameLink FROM srp_erp_templates LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_templates.TempMasterID WHERE srp_erp_templates.companyID={$companyID}  ) AS template ON (template.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID) WHERE empID={$empID} AND srp_erp_employeenavigation.companyID={$companyID} AND srp_erp_employeenavigation.userGroupID={$userGroupID} Order by levelNo,sortOrder ASC ")->result_array();
                } else {
                    $detail = $this->db->query("SELECT srp_erp_navigationmenus.languageID, srp_erp_navigationusergroupsetup.*,template.TempPageNameLink, srp_erp_navigationmenus.isExternalLink FROM srp_erp_employeenavigation INNER JOIN srp_erp_navigationusergroupsetup ON srp_erp_employeenavigation.userGroupID = srp_erp_navigationusergroupsetup.userGroupID INNER JOIN srp_erp_navigationmenus ON srp_erp_navigationmenus.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID   LEFT JOIN (SELECT srp_erp_templates.TempMasterID,srp_erp_templates.navigationMenuID,srp_erp_templatemaster.TempPageNameLink FROM srp_erp_templates LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_templates.TempMasterID WHERE srp_erp_templates.companyID={$companyID}  ) AS template ON (template.navigationMenuID = srp_erp_navigationusergroupsetup.navigationMenuID) WHERE empID={$empID} AND srp_erp_employeenavigation.companyID={$companyID} AND srp_erp_navigationusergroupsetup.levelNo = 2 Order by sortOrder ASC ")->result_array();
                }
            }
            else {
                $sql = "SELECT srp_erp_navigationmenus.languageID,srp_erp_companysubgroupnavigationsetup.*,template.TempPageNameLink 
                FROM srp_erp_companysubgroupnavigationsetup 
                LEFT JOIN srp_erp_navigationmenus ON srp_erp_navigationmenus.navigationMenuID = srp_erp_companysubgroupnavigationsetup.navigationMenuID
                LEFT JOIN srp_erp_companysubgroupmaster ON srp_erp_companysubgroupnavigationsetup.compaySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID
                LEFT JOIN srp_erp_companysubgroupemployees ON srp_erp_companysubgroupemployees.companySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID
                LEFT JOIN (
                    SELECT srp_erp_companysubgrouptemplates.TempMasterID,srp_erp_companysubgrouptemplates.navigationMenuID,srp_erp_templatemaster.TempPageNameLink,companySubGroupID 
                    FROM srp_erp_companysubgrouptemplates 
                    LEFT JOIN srp_erp_templatemaster ON srp_erp_templatemaster.TempMasterID = srp_erp_companysubgrouptemplates.TempMasterID 
                ) AS template ON (template.navigationMenuID = srp_erp_companysubgroupnavigationsetup.navigationMenuID /*AND template.companySubGroupID = srp_erp_companysubgroupmaster.companySubGroupID*/)
                WHERE srp_erp_companysubgroupemployees.EmpID={$empID} AND companyGroupID={$companyID} AND isGroup = 1 
                Order by levelNo,sortOrder ASC";
                $detail = $this->db->query($sql)->result_array();
            }
        }
        $url = array_column($detail, 'url');

        if(in_array('system/accounts_payable/supplier_invoices_management', $url)) {
            array_push($documentID,'BSI');
        }
        if(in_array('system/accounts_payable/debit_note_management', $url)) {
            array_push($documentID,'DN');
        }
        if(in_array('system/payment_voucher/payment_voucher_management', $url)) {
            array_push($documentID,'PV');
        }
        if(in_array('system/invoices/invoices_management', $url)) {
            array_push($documentID,'CINV');
        }
        if(in_array('system/accounts_receivable/credit_note_management', $url)) {
            array_push($documentID,'CN');
        }
        if(in_array('system/receipt_voucher/receipt_voucher_management', $url)) {
            array_push($documentID,'RV');
        }
        if(in_array('system/quotation_contract/quotation_contract_management', $url)) {
            array_push($documentID,'CNT');
            array_push($documentID,'QUT');
            array_push($documentID,'SO');
        }
        if(in_array('system/delivery_order/delivery-order-master', $url)) {
            array_push($documentID,'DO');
        }
        if(in_array('system/invoices/sales_return', $url)) {
            array_push($documentID,'SLR');
        }
        if(in_array('system/sales/sales_commission', $url)) {
            array_push($documentID,'SC');
        }
        if(in_array('system/PurchaseRequest/erp_purchase_request', $url)) {
            array_push($documentID,'PRQ');
        }
        if(in_array('system/procurement/erp_purchase_order', $url)) {
            array_push($documentID,'PO');
        }
        if(in_array('system/finance/Journal_entry_management', $url)) {
            array_push($documentID,'JV');
        }
        if(in_array('system/recurringJV/recurring_jv_management', $url)) {
            array_push($documentID,'RJV');
        }

        return $documentID;
    }

    function fetch_documentPageView_details()
    {
        $dataReturn = array();
        $companyID = current_companyID();
        $documentID = $this->input->get('documentID');
        $documentAutoID = $this->input->get('documentAutoID');

        switch ($documentID) {
            case 'PRQ' :
                $query = $this->db->query("SELECT
                        purchaseRequestID AS documentAutoID,
                        documentID AS doucmentID,
                        purchaseRequestCode AS documentCode,
                        '' AS documentType,
                        documentDate AS documentDate,
                        '' AS name,
                        '' AS address,
                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                        'srp_erp_purchaserequestmaster' AS tableName,
                        'purchaseRequestID' AS fieldName,
                        transactionAmount AS amount,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                        currentLevelNo AS level,
                        confirmedDate AS confirmedDate,
                        confirmedByEmpID AS confirmedEmpID,
                        confirmedByName AS confirmedEmpName,
                        narration AS narration,
                        '' AS warehouse,
                        '' AS fromWarehouse,
                        '' AS toWarehouse,
                        '' AS fromBank,
                        '' AS toBank,
                        '' AS chequeNo,
                        '' AS chequeDate,
                        '' AS supplierInvoiceNo,
                        '' AS supplierInvoiceDate
                    FROM
                        `srp_erp_purchaserequestmaster` 
                        LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_purchaserequestmaster.segmentID
                    WHERE
                        srp_erp_purchaserequestmaster.companyID = {$companyID} 
                        AND purchaseRequestID = {$documentAutoID}
                        AND confirmedYN = 1
                        AND approvedYN = 0")->row_array();
                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {

                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $itemDetails = $this->db->query("SELECT
                                purchaseRequestDetailsID AS documentDetailAutoID,
                                itemAutoID,
                                itemSystemCode,
                                itemDescription,
                                requestedQty,
                                unitOfMeasureID,
                                unitOfMeasure,
                                unitAmount AS unitAmount,
                                discountPercentage,
                                discountAmount,
                                totalAmount AS totalAmount,
                                comment AS narration,
                                '' AS pulledDocCode,
                                '' AS warehouse,
                                '' AS wareHouseLocation,
                                '' AS taxID,
                                '' AS taxDescription,
                                '' AS taxAmount,
                                '' AS previousStock,
                                '' AS previousWac,
                                '' AS currentStock,
                                '' AS currentWac,
                                '' AS adjustmentStock,
                                '' AS adjustmentWac
                            FROM
                                `srp_erp_purchaserequestdetails`
                                WHERE companyID = {$companyID}
                                AND purchaseRequestID = {$documentAutoID}")->result_array();

                    if(!empty($itemDetails)) {
                        $Itemdetails = array();
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM( totalAmount ) AS transactionAmount FROM srp_erp_purchaserequestdetails WHERE companyID = {$companyID} AND purchaseRequestID = {$documentAutoID} GROUP BY purchaseRequestID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'PO' :
                $query = $this->db->query("SELECT
                            purchaseOrderID AS documentAutoID,
                            documentID AS doucmentID,
                            purchaseOrderCode AS documentCode,
                            purchaseOrderType AS documentType,
                            documentDate AS documentDate,
                            CONCAT(supplierCode, ' - ' ,supplierName) AS name,
                            supplierAddress AS address,
                            CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                            'srp_erp_purchaseordermaster' AS tableName,
                            'purchaseOrderID' AS fieldName,
                            transactionAmount AS amount,
                            transactionCurrencyID AS currencyID,
                            transactionCurrency AS currency,
                            transactionCurrencyDecimalPlaces AS decimalPlaces,
                            currentLevelNo AS level,
                            confirmedDate AS confirmedDate,
                            confirmedByEmpID AS confirmedEmpID,
                            confirmedByName AS confirmedEmpName,
                            narration AS narration,
                            '' AS warehouse,
                            '' AS fromWarehouse,
                            '' AS toWarehouse,
                            '' AS fromBank,
                            '' AS toBank,
                            '' AS chequeNo,
                            '' AS chequeDate,
                            '' AS supplierInvoiceNo,
                            '' AS supplierInvoiceDate
                        FROM
                            `srp_erp_purchaseordermaster` 
                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_purchaseordermaster.segmentID
                        WHERE
                            srp_erp_purchaseordermaster.companyID = {$companyID} 
                            AND purchaseOrderID = {$documentAutoID}
                            AND confirmedYN = 1
                            AND approvedYN = 0")->row_array();
                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                            	purchaseOrderDetailsID AS documentDetailAutoID,
                                                itemAutoID,
                                                itemSystemCode,
                                                itemDescription,
                                                requestedQty,
                                                unitOfMeasureID,
                                                unitOfMeasure,
                                                unitAmount AS unitAmount,
                                                discountPercentage AS discountPercentage,
                                                discountAmount AS discountAmount,
                                                totalAmount AS totalAmount,
                                                comment AS narration,
                                                '' AS pulledDocCode,
                                                '' AS warehouse,
                                                '' AS wareHouseLocation,
                                                taxCalculationformulaID AS taxID,
                                                '' AS taxDescription,
                                                taxAmount AS taxAmount,
                                                '' AS previousStock,
                                                '' AS previousWac,
                                                '' AS currentStock,
                                                '' AS currentWac,
                                                '' AS adjustmentStock,
                                                '' AS adjustmentWac 
                                        FROM
                                            srp_erp_purchaseorderdetails 
                                        WHERE
                                            companyID = {$companyID}
                                            AND purchaseOrderID = {$documentAutoID}")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                        srp_erp_purchaseordertaxdetails.taxDetailAutoID AS taxAutoID,
                                        referenceNo AS narration,
                                        taxDescription AS taxDescription,
                                        taxShortCode,
                                        taxPercentage,
                                        taxleg.amount AS taxAmount
                                    FROM
                                        `srp_erp_purchaseordertaxdetails`
                                            INNER JOIN ( SELECT SUM( amount ) AS amount, taxDetailAutoID FROM srp_erp_taxledger WHERE documentID = 'PO' AND documentMasterAutoID = {$documentAutoID} GROUP BY documentMasterAutoID, taxDetailAutoID ) taxleg ON srp_erp_purchaseordertaxdetails.taxDetailAutoID = taxleg.taxDetailAutoID 
                                    WHERE
                                        companyID = {$companyID} 
                                        AND purchaseOrderAutoID = {$documentAutoID}")->result_array();

                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxAutoID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'taxPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    CASE 'taxAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $discountdetails = array();
                    $discountDetails = $this->db->query("SELECT '' AS discountDescription, generalDiscountPercentage AS discountPercentage, generalDiscountAmount AS discountAmount FROM srp_erp_purchaseordermaster WHERE companyID = {$companyID} AND purchaseOrderID = {$documentAutoID}")->row_array();
                    $discountDetails['discountPercentage'] = (float)$discountDetails['discountPercentage'];
                    $discountDetails['discountAmount'] = (float)$discountDetails['discountAmount'];
                    array_push($discountdetails, $discountDetails);

                      $grandtotal = $this->db->query("SELECT ( det.transactionAmount -( generalDiscountPercentage / 100 )* det.transactionAmount 
                            )+ IFNULL( gentax.gentaxamount, 0 ) AS transactionAmount 
                            FROM
                                srp_erp_purchaseordermaster
                                LEFT JOIN ( SELECT SUM( totalAmount )+ ifnull( SUM( taxAmount ), 0 ) AS transactionAmount, purchaseOrderID FROM srp_erp_purchaseorderdetails GROUP BY purchaseOrderID ) det ON det.purchaseOrderID = srp_erp_purchaseordermaster.purchaseOrderID
                                LEFT JOIN (
                                SELECT
                                    ifnull( SUM( amount ), 0 ) AS gentaxamount,
                                    documentMasterAutoID 
                                FROM
                                    srp_erp_taxledger 
                                WHERE
                                    documentID = 'PO'
                                    AND documentDetailAutoID IS NULL 
                                    AND companyID = {$companyID}
                                GROUP BY
                                    documentMasterAutoID 
                                ) gentax ON gentax.documentMasterAutoID = srp_erp_purchaseordermaster.purchaseOrderID 
                            WHERE
                                srp_erp_purchaseordermaster.companyID = {$companyID} 
                                AND srp_erp_purchaseordermaster.purchaseOrderID = {$documentAutoID}")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  $discountdetails;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'DO' :
                $query = $this->db->query("SELECT
                        DOAutoID AS documentAutoID,
                        documentID AS doucmentID,
                        DOCode AS documentCode,
                        DOType AS documentType,
                        DODate AS documentDate,
                        CONCAT(customerSystemCode,' - ',customerName) AS name,
                        customerAddress AS address,
                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                        'srp_erp_deliveryorder' AS tableName,
                        'DOAutoID' AS fieldName,
                        deliveredTransactionAmount AS amount,
                        transactionCurrencyID AS currencyID,
                        transactionCurrency AS currency,
                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                        currentLevelNo AS level,
                        confirmedDate AS confirmedDate,
                        confirmedByEmpID AS confirmedEmpID,
                        confirmedByName AS confirmedEmpName,
                        narration As narration,
                        '' AS warehouse,
                        '' AS fromWarehouse,
                        '' AS toWarehouse,
                        '' AS fromBank,
                        '' AS toBank,
                        '' AS chequeNo,
                        '' AS chequeDate,
                        '' AS supplierInvoiceNo,
                        '' AS supplierInvoiceDate
                    FROM
                        `srp_erp_deliveryorder` 
                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_deliveryorder.segmentID
                    WHERE
                        srp_erp_deliveryorder.companyID = {$companyID} 
                        AND DOAutoID = {$documentAutoID}
                        AND confirmedYN = 1
                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                                DODetailsAutoID AS documentDetailAutoID,
                                                itemAutoID,
                                                itemSystemCode,
                                                itemDescription,
                                                requestedQty,
                                                unitOfMeasureID,
                                                unitOfMeasure,
                                                unittransactionAmount AS unitAmount,
                                                discountPercentage,
                                                discountAmount,
                                                transactionAmount AS totalAmount,
                                                comment AS narration,
                                                contractCode AS pulledDocCode,
                                                CONCAT(wareHouseCode,' | ',wareHouseDescription) AS warehouse,
                                                wareHouseLocation AS wareHouseLocation,
                                                taxMasterAutoID AS taxID,
                                                taxDescription AS taxDescription,
                                                totalAfterTax AS taxAmount,
                                                '' AS previousStock,
                                                '' AS previousWac,
                                                '' AS currentStock,
                                                '' AS currentWac,
                                                '' AS adjustmentStock,
                                                '' AS adjustmentWac
                                            FROM
                                                srp_erp_deliveryorderdetails 
                                            WHERE
                                                companyID = {$companyID} 
                                                AND DOAutoID = {$documentAutoID}")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                    taxDetailAutoID AS taxAutoID,
                                    referenceNo AS narration,
                                    taxDescription AS taxDescription,
                                    taxShortCode,
                                    taxPercentage,
                                    (taxPercentage/100) * amount AS taxAmount
                                FROM
                                    srp_erp_deliveryordertaxdetails 
                                LEFT JOIN ( SELECT ( SUM( transactionAmount ) - SUM( totalAfterTax )) AS amount, DOAutoID FROM srp_erp_deliveryorderdetails GROUP BY DOAutoID ) doAmount ON doAmount.DOAutoID = srp_erp_deliveryordertaxdetails.DOAutoID
                                WHERE
                                    companyID = {$companyID} 
                                    AND srp_erp_deliveryordertaxdetails.DOAutoID = {$documentAutoID}")->result_array();

                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT ((( IFNULL( addondet.taxPercentage, 0 )/ 100 )*((
				IFNULL( det.transactionAmount, 0 )-(
				IFNULL( det.detailtaxamount, 0 )))))+ IFNULL( det.transactionAmount, 0 )) AS transactionAmount 
                        FROM
                            srp_erp_deliveryorder ordMas
                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, DOAutoID FROM srp_erp_deliveryorderdetails GROUP BY DOAutoID ) det ON det.DOAutoID = ordMas.DOAutoID
                            LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, DOAutoID FROM srp_erp_deliveryordertaxdetails GROUP BY DOAutoID ) addondet ON addondet.DOAutoID = ordMas.DOAutoID 
                        WHERE
                            ordMas.companyID = {$companyID} 
                            AND ordMas.DOAutoID = {$documentAutoID}")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }

                break;

            case 'SO' : case 'CNT' :case 'QUT' :
                $query = $this->db->query("SELECT
                                        contractAutoID AS documentAutoID,
                                        documentID AS doucmentID,
                                        contractCode AS documentCode,
                                        contractType AS documentType,
                                        contractDate AS documentDate,
                                        CONCAT(customerSystemCode, ' - ' ,customerName) AS name,
                                        customerAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        'srp_erp_contractmaster' AS tableName,
                                        'contractAutoID' AS fieldName,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        confirmedDate AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        contractNarration AS narration,
                                        CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        '' AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS supplierInvoiceNo,
                                        '' AS supplierInvoiceDate
                                    FROM
                                        srp_erp_contractmaster
                                        LEFT JOIN srp_erp_warehousemaster ON srp_erp_warehousemaster.wareHouseAutoID = srp_erp_contractmaster.warehouseAutoID 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_contractmaster.segmentID                      
                                    WHERE
                                        srp_erp_contractmaster.companyID = {$companyID} 
                                        AND contractAutoID = {$documentAutoID}
                                        AND confirmedYN = 1
                                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                                    contractDetailsAutoID AS documentDetailAutoID,
                                                    itemAutoID,
                                                    itemSystemCode,
                                                    itemDescription,
                                                    requestedQty,
                                                    unitOfMeasureID,
                                                    unitOfMeasure,
                                                    unittransactionAmount AS unitAmount,
                                                    discountPercentage,
                                                    discountAmount,
                                                    transactionAmount AS totalAmount,
                                                    comment AS narration,
                                                    '' AS pulledDocCode,
                                                    '' AS warehouse,
                                                    '' AS wareHouseLocation,
                                                    '' AS taxID,
                                                    '' AS taxDescription,
                                                    '' AS taxAmount,
                                                    '' AS previousStock,
                                                    '' AS previousWac,
                                                    '' AS currentStock,
                                                    '' AS currentWac,
                                                    '' AS adjustmentStock,
                                                    '' AS adjustmentWac
                                                FROM
                                                    srp_erp_contractdetails 
                                                WHERE
                                                    companyID = {$companyID}
                                                    AND contractAutoID = {$documentAutoID}")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                        taxDetailAutoID AS taxAutoID,
                                        referenceNo AS narration,
                                        taxDescription AS taxDescription,
                                        taxShortCode,
                                        taxPercentage,
                                        (taxPercentage / 100) * amount AS taxAmount
                                    FROM
                                        srp_erp_contracttaxdetails
                                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS amount, contractAutoID FROM srp_erp_contractdetails GROUP BY contractAutoID ) contract ON contract.contractAutoID = srp_erp_contracttaxdetails.contractAutoID
                                    WHERE
                                        companyID = {$companyID} 
                                        AND srp_erp_contracttaxdetails.contractAutoID = {$documentAutoID}")->result_array();

                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM( transactionAmount ) + IFNULL(( taxPercentage / 100 )* SUM( transactionAmount ), 0) AS transactionAmount FROM srp_erp_contractdetails LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, contractAutoID FROM srp_erp_contracttaxdetails GROUP BY contractAutoID ) tax ON tax.contractAutoID = srp_erp_contractdetails.contractAutoID WHERE companyID =  {$companyID} AND srp_erp_contractdetails.contractAutoID = {$documentAutoID} GROUP BY srp_erp_contractdetails.contractAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }

            break;

            case 'SLR' :
                $query = $this->db->query("SELECT
                                    salesReturnAutoID AS documentAutoID,
                                    'SLR' AS doucmentID,
                                    salesReturnCode AS documentCode,
                                    '' AS documentType,
                                    returnDate AS documentDate,
                                    CONCAT(customerSystemCode, ' - ' ,customerName) AS name,
                                    customerAddress AS address,
                                    '' AS segmentCode,
                                    'srp_erp_salesreturnmaster' AS tableName,
                                    'salesReturnAutoID' AS fieldName,
                                    transactionAmount AS amount,
                                    transactionCurrencyID AS currencyID,
                                    transactionCurrency AS currency,
                                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    comment As narration,
                                    '' AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_salesreturnmaster 
                                WHERE
                                    companyID = {$companyID}
                                    AND salesReturnAutoID = {$documentAutoID}
                                    AND confirmedYN = 1
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                                salesReturnDetailsID AS documentDetailAutoID,
                                                itemAutoID,
                                                itemSystemCode,
                                                itemDescription,
                                                return_Qty AS requestedQty,
                                                unitOfMeasureID,
                                                unitOfMeasure,
                                                salesPrice AS unitAmount,
                                                '' AS discountPercentage,
                                                '' AS discountAmount,
                                                totalValue AS totalAmount,
                                                comments AS narration,
                                            CASE
                                                    WHEN srp_erp_salesreturndetails.invoiceAutoID > 0 THEN
                                                    invoiceCode 
                                                    WHEN srp_erp_deliveryorder.DOAutoID > 0 THEN
                                                    DOCode 
                                                END AS pulledDocCode,
                                                '' AS warehouse,
                                                '' AS wareHouseLocation,
                                                '' AS taxID,
                                                '' AS taxDescription,
                                                '' AS taxAmount,
                                                '' AS previousStock,
                                                '' AS previousWac,
                                                '' AS currentStock,
                                                '' AS currentWac,
                                                '' AS adjustmentStock,
                                                '' AS adjustmentWac
                                            FROM
                                                srp_erp_salesreturndetails
                                                LEFT JOIN srp_erp_customerinvoicemaster ON srp_erp_customerinvoicemaster.invoiceAutoID = srp_erp_salesreturndetails.invoiceAutoID
                                                LEFT JOIN srp_erp_deliveryorder ON srp_erp_deliveryorder.DOAutoID = srp_erp_salesreturndetails.DOAutoID 
                                            WHERE
                                                srp_erp_salesreturndetails.companyID = {$companyID} 
                                                AND salesReturnAutoID = {$documentAutoID}")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) AS transactionAmount FROM srp_erp_salesreturndetails WHERE companyID = {$companyID} AND salesReturnAutoID = {$documentAutoID} GROUP BY salesReturnAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }

                break;

            case 'CINV' :
                $query = $this->db->query("SELECT
                                            invoiceAutoID AS documentAutoID,
                                            documentID AS doucmentID,
                                            invoiceCode AS documentCode,
                                            invoiceType AS documentType,
                                            invoiceDate AS documentDate,
                                            CONCAT(customerSystemCode,' - ',customerName) AS name,
                                            customerAddress AS address,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                            'srp_erp_customerinvoicemaster' AS tableName,
                                            'invoiceAutoID' AS fieldName,
                                            transactionAmount AS amount,
                                            transactionCurrencyID AS currencyID,
                                            transactionCurrency AS currency,
                                            transactionCurrencyDecimalPlaces AS decimalPlaces,
                                            currentLevelNo AS level,
                                            confirmedDate AS confirmedDate,
                                            confirmedByEmpID AS confirmedEmpID,
                                            confirmedByName AS confirmedEmpName,
                                            invoiceNarration AS narration,
                                            '' AS warehouse,
                                            '' AS fromWarehouse,
                                            '' AS toWarehouse,
                                            '' AS fromBank,
                                            '' AS toBank,
                                            '' AS chequeNo,
                                            '' AS chequeDate,
                                            '' AS supplierInvoiceNo,
                                            '' AS supplierInvoiceDate
                                        FROM
                                            srp_erp_customerinvoicemaster 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerinvoicemaster.segmentID
                                        WHERE
                                            srp_erp_customerinvoicemaster.companyID = {$companyID}
                                            AND invoiceAutoID = {$documentAutoID}
                                            AND confirmedYN = 1 
                                            AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                            invoiceDetailsAutoID AS documentDetailAutoID,
                                            itemAutoID,
                                            itemSystemCode,
                                            itemDescription,
                                            requestedQty,
                                            unitOfMeasureID,
                                            unitOfMeasure,
                                            unittransactionAmount AS unitAmount,
                                            discountPercentage AS discountPercentage,
                                            discountAmount AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            comment AS narration,
                                            contractCode AS pulledDocCode,
                                            CONCAT(wareHouseCode,' | ',wareHouseDescription) AS warehouse,
                                            wareHouseLocation AS wareHouseLocation,
                                            taxMasterAutoID AS taxID,
                                            taxDescription AS taxDescription,
                                            totalAfterTax AS taxAmount,
                                            '' AS previousStock,
                                            '' AS previousWac,
                                            '' AS currentStock,
                                            '' AS currentWac,
                                            '' AS adjustmentStock,
                                            '' AS adjustmentWac
                                        FROM
                                            srp_erp_customerinvoicedetails 
                                        WHERE
                                            companyID = {$companyID}
                                            AND invoiceAutoID = {$documentAutoID}
                                            AND type = 'Item'")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                                invoiceDetailsAutoID AS documentDetailAutoID,
                                                revenueGLCode AS GLCode,
                                                revenueSystemGLCode AS GLSystemCode,
                                                revenueGLDescription AS GLDescription,
                                                revenueGLType AS GLType,
                                                CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                                unittransactionAmount AS unitAmount,
                                                discountPercentage AS discountPercentage,
                                                discountAmount AS discountAmount,
                                                transactionAmount AS totalAmount,
                                                comment AS narration,
                                                '' AS pulledDocCode,
                                                '' AS debitAmount,
                                                '' AS creditAmount
                                            FROM
                                                srp_erp_customerinvoicedetails 
                                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerinvoicedetails.segmentID
                                            WHERE
                                                srp_erp_customerinvoicedetails.companyID = {$companyID}
                                                AND invoiceAutoID = {$documentAutoID}
                                                AND type = 'GL'")->result_array();

                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' : CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                        taxDetailAutoID AS taxAutoID,
                                        referenceNo AS narration,
                                        taxDescription AS taxDescription,
                                        taxShortCode,
                                        taxPercentage,
                                        ( taxPercentage / 100 ) * ( amount - IFNULL( discountAmount, 0 ) + extracharge ) AS taxAmount
                                    FROM
                                        srp_erp_customerinvoicetaxdetails 
                                    LEFT JOIN (
                                        SELECT
                                            (
                                            SUM( transactionAmount ) - SUM( totalAfterTax )) AS amount,
                                            ( discountPer / 100 )*(
                                            SUM( transactionAmount ) - SUM( totalAfterTax )) AS discountamount,
                                            IFNULL( extracharge, 0 ) AS extracharge,
                                            srp_erp_customerinvoicedetails.invoiceAutoID 
                                        FROM
                                            srp_erp_customerinvoicedetails
                                            LEFT JOIN ( SELECT SUM( discountPercentage ) AS discountPer, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) dis ON dis.invoiceAutoID = srp_erp_customerinvoicedetails.invoiceAutoID
                                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS extracharge, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) excharge ON excharge.invoiceAutoID = srp_erp_customerinvoicedetails.invoiceAutoID 
                                        GROUP BY
                                            srp_erp_customerinvoicedetails.invoiceAutoID 
                                	) cinv ON cinv.invoiceAutoID = srp_erp_customerinvoicetaxdetails.invoiceAutoID 
                                    WHERE
                                        companyID = {$companyID} 
                                        AND srp_erp_customerinvoicetaxdetails.invoiceAutoID = {$documentAutoID}")->result_array();

                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $DiscountDetails = array();
                    $discountDetails = $this->db->query("SELECT
                                    discountDescription, discountPercentage, 
                                    ROUND(transactionAmount, transactionCurrencyDecimalPlaces) AS discountAmount
                                    FROM srp_erp_customerinvoicediscountdetails 
                                    WHERE
                                        companyID = {$companyID}
                                        AND invoiceAutoID = {$documentAutoID}")->result_array();
                    if(!empty($discountDetails)) {
                        foreach ($discountDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'discountPercentage' : CASE 'discountAmount' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DiscountDetails, $a);
                        }
                    }

                    $ExtraCharges = array();
                    $extrachargedetails = $this->db->query("SELECT
                                                    extraChargeDescription,
                                                    transactionAmount AS extraChargeAmount,
                                                    isTaxApplicable AS isTaxApplicable
                                                FROM
                                                    srp_erp_customerinvoiceextrachargedetails 
                                                WHERE
                                                    companyID = {$companyID} 
                                                    AND invoiceAutoID = {$documentAutoID}")->result_array();
                    if(!empty($extrachargedetails)) {
                        foreach ($extrachargedetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'isTaxApplicable' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'extraChargeAmount' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($ExtraCharges, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                    invoiceDetailsAutoID AS documentDetailAutoID,
                                    type AS docType,
                                    'DO' AS documentID,
                                    DOCode AS pulledDocCode,
                                    DODate AS pulledDocDate,
                                    deliveredTransactionAmount AS pulledDocAmount,
                                    due_amount AS dueAmount,
                                    balance_amount AS balanceAmount,
                                    `comment` AS referenceNo,
                                    srp_erp_customerinvoicedetails.transactionAmount AS totalAmount,
                                    CONCAT( srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description ) AS segmentCode,
                                    srp_erp_customerinvoicedetails.unittransactionAmount AS unitAmount,
                                    '' AS item,
                                    '' AS UOM,
                                    '' AS qty,
                                    '' AS party,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS bankCurrencyAmount 
                                FROM
                                    srp_erp_customerinvoicedetails
                                    LEFT JOIN srp_erp_deliveryorder ON srp_erp_deliveryorder.DOAutoID = srp_erp_customerinvoicedetails.DOMasterID
                                    LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_customerinvoicedetails.segmentID 
                                WHERE
                                    srp_erp_customerinvoicedetails.companyID = {$companyID} 
                                    AND invoiceAutoID = {$documentAutoID} 
                                    AND type = 'DO'")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT
                        ( IFNULL( addondet.taxPercentage, 0 )/ 100 )*(IFNULL( det.transactionAmount, 0 )- IFNULL( det.detailtaxamount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexchargistax.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexcharg.transactionAmount, 0 ) - IFNULL( retensionTransactionAmount, 0 ) - IFNULL( rebateAmount, 0 ) AS transactionAmount 
                    FROM srp_erp_customerinvoicemaster
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) det ON det.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID
                        LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON addondet.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( discountPercentage ) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON gendiscount.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON genexchargistax.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON genexcharg.InvoiceAutoID = srp_erp_customerinvoicemaster.InvoiceAutoID 
                    WHERE companyID = {$companyID} AND srp_erp_customerinvoicemaster.InvoiceAutoID = {$documentAutoID} 
                    GROUP BY srp_erp_customerinvoicemaster.InvoiceAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  $DiscountDetails;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  $ExtraCharges;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'CN' :
                $query = $this->db->query("SELECT
                                    creditNoteMasterAutoID AS documentAutoID,
                                    documentID AS doucmentID,
                                    creditNoteCode AS documentCode,
                                    '' AS documentType,
                                    creditNoteDate AS documentDate,
                                    CONCAT(customerCode,' - ',customerName) AS name,
                                    customerAddress AS address,
                                    '' AS segmentCode,
                                    'srp_erp_creditnotemaster' AS tableName,
                                    'creditNoteMasterAutoID' AS fieldName,
                                    transactionAmount AS amount,
                                    transactionCurrencyID AS currencyID,
                                    transactionCurrency AS currency,
                                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    comments AS narration,
                                    '' AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_creditnotemaster 
                                WHERE
                                    companyID = {$companyID} 
                                    AND creditNoteMasterAutoID = {$documentAutoID}
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                            creditNoteDetailsID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            SystemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLType AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            '' AS unitAmount,
                                            '' AS discountPercentage,
                                            '' AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            srp_erp_creditnotedetail.description AS narration,
                                            invoiceSystemCode AS pulledDocCode,
                                            '' AS debitAmount,
                                            '' AS creditAmount
                                        FROM
                                            srp_erp_creditnotedetail 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_creditnotedetail.segmentID
                                        WHERE
                                            srp_erp_creditnotedetail.companyID = {$companyID}
                                            AND creditNoteMasterAutoID = {$documentAutoID}
                                            AND invoiceAutoID  IS NULL")->result_array();
                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :  CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                        creditNoteDetailsID AS documentDetailAutoID,
                                        '' AS docType,
                                        'CINV' AS documentID,
                                        invoiceSystemCode AS pulledDocCode,
                                        '' AS pulledDocDate,
                                        '' AS pulledDocAmount,
                                        '' AS dueAmount,
                                        '' AS balanceAmount,
                                        srp_erp_creditnotedetail.description AS referenceNo,
                                        transactionAmount AS totalAmount,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                        '' AS unitAmount,
                                        '' AS item,
                                        '' AS UOM,
                                        '' AS qty,
                                        '' AS party,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS bankCurrencyAmount 
                                    FROM
                                        srp_erp_creditnotedetail 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_creditnotedetail.segmentID
                                    WHERE
                                        srp_erp_creditnotedetail.companyID = {$companyID} 
                                        AND creditNoteMasterAutoID = {$documentAutoID}
                                        AND invoiceAutoID IS NOT NULL")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM( transactionAmount ) AS transactionAmount FROM srp_erp_creditnotedetail WHERE companyID = {$companyID} AND creditNoteMasterAutoID = {$documentAutoID} GROUP BY creditNoteMasterAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }

                break;

            case 'RV' :
                 //CASE	WHEN CustomerSystemCode IS NULL THEN CustomerName ELSE customerSystemCode END AS name,
                $query = $this->db->query("SELECT
                                        receiptVoucherAutoId AS documentAutoID,
                                        documentID AS doucmentID,
                                        RVcode AS documentCode,
                                        RVType AS documentType,
                                        RVdate AS documentDate,
                                        IF	( LENGTH(customerSystemCode), CONCAT(customerSystemCode,' - ',customerName),customerName  ) AS name,
                                        customerAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        'srp_erp_customerreceiptmaster' AS tableName,
                                        'receiptVoucherAutoId' AS fieldName,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        confirmedDate AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        RVNarration AS narration,
                                        '' AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        '' AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS supplierInvoiceNo,
                                        '' AS supplierInvoiceDate
                                    FROM
                                        srp_erp_customerreceiptmaster 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerreceiptmaster.segmentID
                                    WHERE
                                        srp_erp_customerreceiptmaster.companyID = {$companyID} 
                                        AND receiptVoucherAutoId = {$documentAutoID}
                                        AND confirmedYN = 1 
                                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                        receiptVoucherDetailAutoID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        unittransactionAmount AS unitAmount,
                                        discountPercentage AS discountPercentage,
                                        discountAmount AS discountAmount,
                                        transactionAmount AS totalAmount,
                                        COMMENT AS narration,
                                        '' AS pulledDocCode,
                                        CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                        wareHouseLocation AS wareHouseLocation,
                                        '' AS taxID,
                                        '' AS taxDescription,
                                        '' AS taxAmount,
                                        '' AS previousStock,
                                        '' AS previousWac,
                                        '' AS currentStock,
                                        '' AS currentWac,
                                        '' AS adjustmentStock,
                                        '' AS adjustmentWac
                                    FROM
                                        srp_erp_customerreceiptdetail 
                                    WHERE
                                        companyID = {$companyID}
                                        AND receiptVoucherAutoId = {$documentAutoID}
                                        AND type = 'Item'")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                            receiptVoucherDetailAutoID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            SystemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLType AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            unittransactionAmount AS unitAmount,
                                            discountPercentage AS discountPercentage,
                                            discountAmount AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            comment AS narration,
                                            '' AS pulledDocCode,
                                            '' AS debitAmount,
                                            '' AS creditAmount
                                        FROM
                                            srp_erp_customerreceiptdetail
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerreceiptdetail.segmentID 
                                        WHERE
                                            srp_erp_customerreceiptdetail.companyID = {$companyID} 
                                            AND receiptVoucherAutoId = {$documentAutoID}
                                            AND type = 'GL'")->result_array();
                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' : CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $AdvanceDetails = array();
                    $advancedetails = $this->db->query("SELECT
                                        receiptVoucherDetailAutoID AS documentDetailAutoID,
                                        transactionAmount AS totalAmount,
                                        comment AS narration 
                                    FROM
                                        srp_erp_customerreceiptdetail 
                                    WHERE
                                        companyID = {$companyID} 
                                        AND type = 'Advance' 
                                        AND receiptVoucherAutoId = {$documentAutoID}")->result_array();
                    if(!empty($advancedetails)) {
                        foreach ($advancedetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'totalAmount' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($AdvanceDetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                        taxDetailAutoID AS taxAutoID,
                                        referenceNo AS narration,
                                        taxDescription AS taxDescription,
                                        taxShortCode,
                                        taxPercentage,
                                        (taxPercentage / 100) * amount AS taxAmount 
                                    FROM
                                        srp_erp_customerreceipttaxdetails
                                    LEFT JOIN ( SELECT SUM(transactionAmount) AS amount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE ( type = 'Item' OR type = 'GL' ) GROUP BY receiptVoucherAutoId ) rv ON rv.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
                                    WHERE
                                        companyID = {$companyID}
                                        AND srp_erp_customerreceipttaxdetails.receiptVoucherAutoId = {$documentAutoID}")->result_array();
                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                    receiptVoucherDetailAutoID AS documentDetailAutoID,
                                    type AS docType,
                                    CASE 
                                        WHEN type = 'Invoice' THEN 'INV' 
                                        WHEN type = 'creditnote' THEN 'CN' ELSE 'SLR' 
                                    END AS documentID,
                                    invoiceCode AS pulledDocCode,
                                    invoiceDate AS pulledDocDate,
                                    Invoice_amount AS pulledDocAmount,
                                    due_amount AS dueAmount,
                                    balance_amount AS balanceAmount,
                                    referenceNo AS referenceNo,
                                    transactionAmount AS totalAmount,
                                    CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                    '' AS unitAmount,
                                    '' AS item,
                                    '' AS UOM,
                                    '' AS qty,
                                    '' AS party,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS bankCurrencyAmount 
                                FROM
                                    srp_erp_customerreceiptdetail 
                                LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerreceiptdetail.segmentID
                                WHERE
                                    srp_erp_customerreceiptdetail.companyID = {$companyID} 
                                    AND receiptVoucherAutoId = {$documentAutoID} 
                                    AND (
                                    type = 'Invoice' 
                                    OR type = 'creditnote')")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT ((( IFNULL( addondet.taxPercentage, 0 )/ 100 )* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount 
                                        FROM
                                            srp_erp_customerreceiptmaster
                                            LEFT JOIN (
                                            SELECT
                                                SUM( transactionAmount ) AS transactionAmount,
                                                receiptVoucherAutoId 
                                            FROM
                                                srp_erp_customerreceiptdetail 
                                            WHERE
                                                ( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' ) 
                                            GROUP BY
                                                receiptVoucherAutoId 
                                            ) det ON det.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                                            LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON addondet.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' GROUP BY receiptVoucherAutoId ) tyepdet ON tyepdet.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId
                                            LEFT JOIN (
                                            SELECT
                                                SUM( transactionAmount ) AS transactionAmount,
                                                receiptVoucherAutoId 
                                            FROM
                                                srp_erp_customerreceiptdetail 
                                            WHERE
                                                ( srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR' ) 
                                            GROUP BY
                                                receiptVoucherAutoId 
                                            ) Creditnots ON Creditnots.receiptVoucherAutoId = srp_erp_customerreceiptmaster.receiptVoucherAutoId 
                                        WHERE
                                            srp_erp_customerreceiptmaster.companyID = {$companyID} 
                                            AND srp_erp_customerreceiptmaster.receiptVoucherAutoId = {$documentAutoID}")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  $AdvanceDetails;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'JV' :
                $query = $this->db->query("SELECT
                                    JVMasterAutoId AS documentAutoID,
                                    documentID AS doucmentID,
                                    JVcode AS documentCode,
                                    JVType AS documentType,
                                    JVdate AS documentDate,
                                    '' AS name,
                                    '' AS address,
                                    '' AS segmentCode,
                                    'srp_erp_jvmaster' AS tableName,
                                    'JVMasterAutoId' AS fieldName,
                                    transactionAmount AS amount,
                                    transactionCurrencyID AS currencyID,
                                    transactionCurrency AS currency,
                                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    JVNarration AS narration,
                                    '' AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_jvmaster 
                                WHERE
                                    companyID = {$companyID} 
                                    AND JVMasterAutoId = {$documentAutoID}
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                            JVDetailAutoID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            systemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLType AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            '' AS unitAmount,
                                            '' AS discountPercentage,
                                            '' AS discountAmount,
                                            '' AS totalAmount,
                                            srp_erp_jvdetail.description AS narration,
                                            '' AS pulledDocCode,
                                            debitAmount AS debitAmount,
                                            creditAmount AS creditAmount
                                        FROM
                                            srp_erp_jvdetail 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_jvdetail.segmentID
                                        WHERE
                                            srp_erp_jvdetail.companyID = {$companyID}
                                            AND JVMasterAutoId = {$documentAutoID} 
                                            AND type = 'GL'")->result_array();

                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'totalAmount' :
                                        $a[$det] = null;
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(debitAmount) AS transactionAmount FROM srp_erp_jvdetail WHERE companyID = {$companyID} AND JVMasterAutoId = {$documentAutoID} GROUP BY JVMasterAutoId")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'RJV' :
                $query = $this->db->query("SELECT
                                    RJVMasterAutoId AS documentAutoID,
                                    documentID AS doucmentID,
                                    RJVcode AS documentCode,
                                    '' AS documentType,
                                    CONCAT(RJVStartDate, ' to ', RJVEndDate) AS documentDate,
                                    '' AS name,
                                    '' AS address,
                                    '' AS segmentCode,
                                    'srp_erp_recurringjvmaster' AS tableName,
                                    'RJVMasterAutoId' AS fieldName,
                                    transactionAmount AS amount,
                                    transactionCurrencyID AS currencyID,
                                    transactionCurrency AS currency,
                                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    RJVNarration AS narration,
                                    '' AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_recurringjvmaster 
                                WHERE
                                    companyID = {$companyID} 
                                    AND RJVMasterAutoId = {$documentAutoID}
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                            RJVDetailAutoID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            systemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLCode AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            '' AS unitAmount,
                                            '' AS discountPercentage,
                                            '' AS discountAmount,
                                            '' AS totalAmount,
                                            srp_erp_recurringjvdetail.description AS narration,
                                            '' AS pulledDocCode,
                                            debitAmount AS debitAmount,
                                            creditAmount AS creditAmount 
                                        FROM
                                            srp_erp_recurringjvdetail
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_recurringjvdetail.segmentID
                                        WHERE
                                            srp_erp_recurringjvdetail.companyID = {$companyID} 
                                            AND RJVMasterAutoId = {$documentAutoID} 
                                            AND type = 'GL'")->result_array();

                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' :  CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'totalAmount' :
                                        $a[$det] = null;
                                        BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(debitAmount) as transactionAmount FROM srp_erp_recurringjvdetail WHERE companyID = {$companyID} AND RJVMasterAutoId = {$documentAutoID} GROUP BY RJVMasterAutoId")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'DN' :
                $query = $this->db->query("SELECT
                                        debitNoteMasterAutoID AS documentAutoID,
                                        documentID AS doucmentID,
                                        debitNoteCode AS documentCode,
                                        '' AS documentType,
                                        debitNoteDate AS documentDate,
                                        CONCAT(supplierCode,' - ',supplierName) AS name,
                                        supplierAddress AS address,
                                        '' AS segmentCode,
                                        'srp_erp_debitnotemaster' AS tableName,
                                        'debitNoteMasterAutoID' AS fieldName,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        confirmedDate AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        comments AS narration,
                                        '' AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        '' AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS supplierInvoiceNo,
                                        '' AS supplierInvoiceDate
                                    FROM
                                        srp_erp_debitnotemaster 
                                    WHERE
                                        companyID = {$companyID}
                                        AND debitNoteMasterAutoID = {$documentAutoID}
                                        AND confirmedYN = 1 
                                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                                debitNoteDetailsID AS documentDetailAutoID,
                                                GLCode AS GLCode,
                                                systemGLCode AS GLSystemCode,
                                                GLDescription AS GLDescription,
                                                GLCode AS GLType,
                                                CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                                '' AS unitAmount,
                                                '' AS discountPercentage,
                                                '' AS discountAmount,
                                                transactionAmount AS totalAmount,
                                                srp_erp_debitnotedetail.description AS narration,
                                                bookingInvCode AS pulledDocCode,
                                                '' AS debitAmount,
                                                '' AS creditAmount 
                                            FROM
                                                srp_erp_debitnotedetail 
                                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_debitnotedetail.segmentID
                                            WHERE
                                                srp_erp_debitnotedetail.companyID = {$companyID} 
                                                AND debitNoteMasterAutoID = {$documentAutoID}
                                            AND InvoiceAutoID IS NULL")->result_array();
                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' : CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                            debitNoteDetailsID AS documentDetailAutoID,
                                            '' AS docType,
                                            'BSI' AS documentID,
                                            bookingInvCode AS pulledDocCode,
                                            '' AS pulledDocDate,
                                            '' AS pulledDocAmount,
                                            '' AS dueAmount,
                                            '' AS balanceAmount,
                                            srp_erp_debitnotedetail.description AS referenceNo,
                                            transactionAmount AS totalAmount,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            '' AS unitAmount,
                                            '' AS item,
                                            '' AS UOM,
                                            '' AS qty,
                                            '' AS party,
                                            '' AS chequeNo,
                                            '' AS chequeDate,
                                            '' AS bankCurrencyAmount 
                                        FROM
                                            srp_erp_debitnotedetail 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_debitnotedetail.segmentID
                                        WHERE
                                            srp_erp_debitnotedetail.companyID = {$companyID} 
                                            AND debitNoteMasterAutoID = {$documentAutoID} 
                                            AND InvoiceAutoID IS NOT NULL")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(transactionAmount) as transactionAmount,debitNoteMasterAutoID FROM srp_erp_debitnotedetail WHERE companyID = {$companyID} AND debitNoteMasterAutoID = {$documentAutoID} GROUP BY debitNoteMasterAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'BSI' :
                $query = $this->db->query("SELECT
                                        InvoiceAutoID AS documentAutoID,
                                        documentID AS doucmentID,
                                        bookingInvCode AS documentCode,
                                        invoiceType AS documentType,
                                        bookingDate AS documentDate,
                                        CONCAT(supplierCode,' - ',supplierName) AS name,
                                        supplierAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        'srp_erp_paysupplierinvoicemaster' AS tableName,
                                        'InvoiceAutoID' AS fieldName,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        confirmedDate AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        comments AS narration,
                                        '' AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        '' AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        supplierInvoiceNo,
                                        supplierInvoiceDate
                                    FROM
                                        srp_erp_paysupplierinvoicemaster 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paysupplierinvoicemaster.segmentID
                                    WHERE
                                        srp_erp_paysupplierinvoicemaster.companyID = {$companyID} 
                                        AND InvoiceAutoID = {$documentAutoID}
                                        AND confirmedYN = 1 
                                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                            InvoiceDetailAutoID AS documentDetailAutoID,
                                            itemAutoID,
                                            itemSystemCode,
                                            itemDescription,
                                            requestedQty,
                                            unitOfMeasureID,
                                            unitOfMeasure,
                                            unittransactionAmount AS unitAmount,
                                            discountPercentage AS discountPercentage,
                                            discountAmount AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            grvDocRefNo AS narration,
                                            '' AS pulledDocCode,
                                            CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                            wareHouseLocation AS wareHouseLocation,
                                            '' AS taxID,
                                            '' AS taxDescription,
                                            '' AS taxAmount,
                                            '' AS previousStock,
                                            '' AS previousWac,
                                            '' AS currentStock,
                                            '' AS currentWac,
                                            '' AS adjustmentStock,
                                            '' AS adjustmentWac
                                        FROM
                                            srp_erp_paysupplierinvoicedetail 
                                        WHERE
                                            companyID = {$companyID} 
                                            AND InvoiceAutoID = {$documentAutoID}
                                            AND type = 'Item'")->result_array();

                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                            InvoiceDetailAutoID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            systemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLType AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            unittransactionAmount AS unitAmount,
                                            discountPercentage AS discountPercentage,
                                            discountAmount AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            srp_erp_paysupplierinvoicedetail.description AS narration,
                                            grvPrimaryCode AS pulledDocCode,
                                            '' AS debitAmount,
                                            '' AS creditAmount 
                                        FROM
                                            srp_erp_paysupplierinvoicedetail 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paysupplierinvoicedetail.segmentID
                                        WHERE
                                            srp_erp_paysupplierinvoicedetail.companyID = {$companyID}
                                            AND InvoiceAutoID = {$documentAutoID}
                                            AND type = 'GL' AND grvType = ' Standard'")->result_array();

                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :  CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                                taxDetailAutoID AS taxAutoID,
                                                referenceNo AS narration,
                                                taxDescription AS taxDescription,
                                                taxShortCode,
                                                taxPercentage,
                                                ( taxPercentage / 100 ) * ( amount - discount ) AS taxAmount
                                            FROM
                                                srp_erp_paysupplierinvoicetaxdetails 
                                            LEFT JOIN (
                                                SELECT
                                                    SUM( srp_erp_paysupplierinvoicedetail.transactionAmount ) AS amount,
                                                    ROUND(( generalDiscountPercentage / 100 ) * SUM( srp_erp_paysupplierinvoicedetail.transactionAmount ), 3 ) AS discount,
                                                    srp_erp_paysupplierinvoicedetail.InvoiceAutoID 
                                                FROM
                                                    srp_erp_paysupplierinvoicedetail
                                                    LEFT JOIN srp_erp_paysupplierinvoicemaster ON srp_erp_paysupplierinvoicemaster.InvoiceAutoID = srp_erp_paysupplierinvoicedetail.InvoiceAutoID 
                                                GROUP BY
                                                    invoiceAutoID 
                                            ) bsi ON bsi.InvoiceAutoID = srp_erp_paysupplierinvoicetaxdetails.invoiceAutoID 
                                            WHERE
                                                companyID = {$companyID}
                                                AND srp_erp_paysupplierinvoicetaxdetails.invoiceAutoID = {$documentAutoID}")->result_array();

                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $discountdetails = array();
                    $discountDetails = $this->db->query("SELECT '' AS discountDescription, generalDiscountPercentage AS discountPercentage, generalDiscountAmount AS discountAmount FROM srp_erp_paysupplierinvoicemaster WHERE companyID = {$companyID} AND InvoiceAutoID = {$documentAutoID}")->row_array();
                    $discountDetails['discountPercentage'] = (float)$discountDetails['discountPercentage'];
                    $discountDetails['discountAmount'] = (float)$discountDetails['discountAmount'];
                    array_push($discountdetails, $discountDetails);

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                        InvoiceDetailAutoID AS documentDetailAutoID,
                                        type AS docType,
                                        type AS documentID,
                                        CASE WHEN type = 'PO' THEN purchaseOrderCode ELSE grvPrimaryCode END AS pulledDocCode,
                                        grvDate AS pulledDocDate,
                                        orderedAmount AS pulledDocAmount,
                                        '' AS dueAmount,
                                        '' AS balanceAmount,
                                        srp_erp_paysupplierinvoicedetail.description AS referenceNo,
                                        transactionAmount AS totalAmount,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                        unitTransactionAmount AS unitAmount,
                                        CONCAT( itemSystemCode, ' | ', itemDescription ) AS item,
                                        unitOfMeasure AS UOM,
                                        requestedQty AS qty,
                                        '' AS party,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS bankCurrencyAmount 
                                    FROM
                                        srp_erp_paysupplierinvoicedetail 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paysupplierinvoicedetail.segmentID
                                    WHERE
                                        srp_erp_paysupplierinvoicedetail.companyID = {$companyID} 
                                        AND InvoiceAutoID = {$documentAutoID}
                                        AND (
                                        type = 'PO' 
                                        OR ( type = 'GL' AND grvType = 'GRV Base' ))")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' : CASE 'unitAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'qty' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT
                                        ((((IFNULL( addondet.taxPercentage, 0 )/ 100)*(IFNULL( det.transactionAmount, 0 )-((IFNULL( generalDiscountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))))+ IFNULL( det.transactionAmount, 0 ))-((IFNULL( generalDiscountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))) AS transactionAmount 
                                    FROM srp_erp_paysupplierinvoicemaster
                                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID ) det ON det.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID
                                        LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON addondet.InvoiceAutoID = srp_erp_paysupplierinvoicemaster.InvoiceAutoID 
                                    WHERE companyID = {$companyID} AND srp_erp_paysupplierinvoicemaster.InvoiceAutoID = {$documentAutoID}")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  $GLdetails;
                    $dataReturn['discountDetails'] =  $discountdetails;
                    $dataReturn['taxDetails'] =  $Taxdetails;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'PV' :
                //CASE WHEN partyType = 'DIR' IS NULL THEN partyName ELSE partyCode END AS name,
                $query = $this->db->query("SELECT
                                        payVoucherAutoId AS documentAutoID,
                                        documentID AS doucmentID,
                                        PVcode AS documentCode,
                                        pvType AS documentType,
                                        PVdate AS documentDate,
                                        IF( LENGTH(partyCode), CONCAT(partyCode,' - ',partyName),partyName  ) AS name,
                                        partyAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        'srp_erp_paymentvouchermaster' AS tableName,
                                        'payVoucherAutoId' AS fieldName,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        confirmedDate AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        PVNarration AS narration,
                                        '' AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        '' AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS supplierInvoiceNo,
                                        '' AS supplierInvoiceDate
                                    FROM
                                        srp_erp_paymentvouchermaster 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvouchermaster.segmentID
                                    WHERE
                                        srp_erp_paymentvouchermaster.companyID = {$companyID}
                                        AND payVoucherAutoId = {$documentAutoID}
                                        AND confirmedYN = 1 
                                        AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                        payVoucherDetailAutoID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        unittransactionAmount AS unitAmount,
                                        discountPercentage AS discountPercentage,
                                        discountAmount AS discountAmount,
                                        transactionAmount AS totalAmount,
                                        comment AS narration,
                                        '' AS pulledDocCode,
                                        CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                        wareHouseLocation AS wareHouseLocation,
                                        '' AS taxID,
                                        '' AS taxDescription,
                                        '' AS taxAmount,
                                        '' AS previousStock,
                                        '' AS previousWac,
                                        '' AS currentStock,
                                        '' AS currentWac,
                                        '' AS adjustmentStock,
                                        '' AS adjustmentWac
                                    FROM
                                        srp_erp_paymentvoucherdetail 
                                    WHERE
                                        companyID = {$companyID}
                                        AND payVoucherAutoId = {$documentAutoID}
                                        AND type = 'Item'")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $GLdetails = array();
                    $glDeatils = $this->db->query("SELECT
                                                payVoucherDetailAutoID AS documentDetailAutoID,
                                                GLCode AS GLCode,
                                                SystemGLCode AS GLSystemCode,
                                                GLDescription AS GLDescription,
                                                GLType AS GLType,
                                                CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                                unittransactionAmount AS unitAmount,
                                                discountPercentage AS discountPercentage,
                                                discountAmount AS discountAmount,
                                                transactionAmount AS totalAmount,
                                                comment AS narration,
                                                '' AS pulledDocCode,
                                                '' AS debitAmount,
                                                '' AS creditAmount 
                                            FROM
                                                srp_erp_paymentvoucherdetail
                                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvoucherdetail.segmentID
                                            WHERE
                                                srp_erp_paymentvoucherdetail.companyID = {$companyID}
                                                AND payVoucherAutoId = {$documentAutoID}
                                                AND type = 'GL'")->result_array();
                    if(!empty($glDeatils)) {
                        foreach ($glDeatils AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :  CASE 'debitAmount' : CASE 'creditAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'discountPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($GLdetails, $a);
                        }
                    }

                    $AdvanceDetails = array();
                    $advancedetails = $this->db->query("SELECT
                                                payVoucherDetailAutoID AS documentDetailAutoID,
                                                transactionAmount AS totalAmount,
                                                comment AS narration 
                                            FROM
                                                srp_erp_paymentvoucherdetail 
                                            WHERE
                                                companyID = {$companyID}
                                                AND type = 'Advance' 
                                                AND payVoucherAutoId = {$documentAutoID}")->result_array();
                    if(!empty($advancedetails)) {
                        foreach ($advancedetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'totalAmount' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($AdvanceDetails, $a);
                        }
                    }

                    $Taxdetails = array();
                    $taxDetails = $this->db->query("SELECT
                                            taxDetailAutoID AS taxAutoID,
                                            referenceNo AS narration,
                                            taxDescription AS taxDescription,
                                            taxShortCode,
                                            taxPercentage,
                                            (taxPercentage / 100) * amount AS taxAmount
                                        FROM
                                            srp_erp_paymentvouchertaxdetails 
                                        LEFT JOIN ( SELECT SUM(transactionAmount) AS amount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE (type = 'Item' OR type = 'GL') GROUP BY payVoucherAutoId )pv ON pv.payVoucherAutoId = srp_erp_paymentvouchertaxdetails.payVoucherAutoId 
                                        WHERE
                                            companyID = {$companyID}
                                            AND srp_erp_paymentvouchertaxdetails.payVoucherAutoId = {$documentAutoID}")->result_array();
                    if(!empty($taxDetails)) {
                        foreach ($taxDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'taxAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'taxPercentage' :
                                        $a[$det] = (float)$val[$det];
                                        BREAK;

                                    CASE 'taxAmount' :
                                        $a[$det] = (double)$val[$det];
                                        BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Taxdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                        payVoucherDetailAutoID AS documentDetailAutoID,
                                        type AS docType,
                                    CASE
                                            WHEN type = 'Invoice' THEN
                                            'INV' 
                                            WHEN type = 'debitnote' THEN
                                            'DN'
                                            WHEN type = 'SC' THEN
                                            'SC'
                                            WHEN type = 'SR' THEN
                                            'SR'
                                        END AS documentID,
                                        bookingInvCode AS pulledDocCode,
                                        bookingDate AS pulledDocDate,
                                        Invoice_amount AS pulledDocAmount,
                                        due_amount AS dueAmount,
                                        balance_amount AS balanceAmount,
                                        referenceNo AS referenceNo,
                                        transactionAmount AS totalAmount,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                        unittransactionAmount AS unitAmount,
                                        '' AS item,
                                        '' AS UOM,
                                        '' AS qty,
                                        '' AS party,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS bankCurrencyAmount 
                                    FROM
                                        srp_erp_paymentvoucherdetail
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvoucherdetail.segmentID 
                                    WHERE
                                        srp_erp_paymentvoucherdetail.companyID = {$companyID}
                                        AND payVoucherAutoId = {$documentAutoID}
                                        AND (
                                        type = 'Invoice' OR type = 'debitnote' OR type = 'SC' OR type = 'SR')")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT ((( IFNULL( addondet.taxPercentage, 0 )/ 100 )* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( debitnote.transactionAmount, 0 )- IFNULL( SR.transactionAmount, 0 )) AS transactionAmount 
                                        FROM
                                            srp_erp_paymentvouchermaster
                                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type != 'debitnote' AND srp_erp_paymentvoucherdetail.type != 'SR' GROUP BY payVoucherAutoId ) det ON det.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                            LEFT JOIN (
                                            SELECT
                                                SUM( transactionAmount ) AS transactionAmount,
                                                payVoucherAutoId 
                                            FROM
                                                srp_erp_paymentvoucherdetail 
                                            WHERE
                                                srp_erp_paymentvoucherdetail.type = 'GL' 
                                                OR srp_erp_paymentvoucherdetail.type = 'Item' 
                                                OR srp_erp_paymentvoucherdetail.type = 'PRQ' 
                                            GROUP BY
                                                payVoucherAutoId 
                                            ) tyepdet ON tyepdet.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'debitnote' GROUP BY payVoucherAutoId ) debitnote ON debitnote.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                            LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'SR' GROUP BY payVoucherAutoId ) SR ON SR.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                            LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, payVoucherAutoId FROM srp_erp_paymentvouchertaxdetails GROUP BY payVoucherAutoId ) addondet ON addondet.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId 
                                        WHERE
                                            companyID = {$companyID}
                                            AND srp_erp_paymentvouchermaster.payVoucherAutoId = {$documentAutoID}")->row_array();

                                                            $dataReturn['header'] = $x;
                                                            $dataReturn['itemDetails'] = $Itemdetails;
                                                            $dataReturn['glDetails'] =  $GLdetails;
                                                            $dataReturn['discountDetails'] =  null;
                                                            $dataReturn['taxDetails'] =  $Taxdetails;
                                                            $dataReturn['ExtrachargesDetails'] =  null;
                                                            $dataReturn['AdvanceDetails'] =  $AdvanceDetails;
                                                            $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                                                            $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                                                        }
                                                        break;

                                                    case 'GRV' :
                                                        $query = $this->db->query("SELECT
                                                                                grvAutoID AS documentAutoID,
                                                                                documentID AS doucmentID,
                                                                                grvPrimaryCode AS documentCode,
                                                                                grvType AS documentType,
                                                                                grvDate AS documentDate,
                                                                                CONCAT(supplierSystemCode,' - ',supplierName) AS name,
                                                                                supplierAddress AS address,
                                                                                CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                                                                'srp_erp_grvmaster' AS tableName,
                                                                                'grvAutoID' AS fieldName,
                                                                                transactionAmount AS amount,
                                                                                transactionCurrencyID AS currencyID,
                                                                                transactionCurrency AS currency,
                                                                                transactionCurrencyDecimalPlaces AS decimalPlaces,
                                                                                currentLevelNo AS level,
                                                                                confirmedDate AS confirmedDate,
                                                                                confirmedByEmpID AS confirmedEmpID,
                                                                                confirmedByName AS confirmedEmpName,
                                                                                grvNarration AS narration,
                                                                                CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                                                                '' AS fromWarehouse,
                                                                                '' AS toWarehouse,
                                                                                '' AS fromBank,
                                                                                '' AS toBank,
                                                                                '' AS chequeNo,
                                                                                '' AS chequeDate,
                                                                                '' AS supplierInvoiceNo,
                                                                                '' AS supplierInvoiceDate
                                                                            FROM
                                                                                srp_erp_grvmaster
                                                                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_grvmaster.segmentID
                                                                            WHERE
                                                                                srp_erp_grvmaster.companyID = {$companyID} 
                                                                                AND grvAutoID = {$documentAutoID}
                                                                                AND confirmedYN = 1 
                                                                                AND approvedYN = 0")->row_array();

                                                        $x = array();
                                                        if($query) {
                                                            $currency_arr = array();
                                                            foreach (array_keys($query) as $item) {
                                                                switch ($item) {
                                                                    case 'documentAutoID' :
                                                                    case 'level' :
                                                                    case 'confirmedEmpID' :
                                                                        $x[$item] = (int)$query[$item];
                                                                        break;

                                                                    case 'currencyID' :
                                                                        if (!empty($query[$item])) {
                                                                            $currency_arr['currencyID'] = (int)$query['currencyID'];
                                                                            $currency_arr['currency'] = $query['currency'];
                                                                            $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                                                        } else {
                                                                            $currencyID = current_company_default_currencyID();
                                                                            $currency_arr['currencyID'] = (int)$currencyID;
                                                                            $currency_arr['currency'] = fetch_currency_code($currencyID);
                                                                            $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                                                        }
                                                                        break;

                                                                    case 'currency' :
                                                                    case 'decimalPlaces' :
                                                                        break;

                                                                    default :
                                                                        $x[$item] = $query[$item];
                                                                }
                                                                $x['currency'] = $currency_arr;
                                                            }

                                                            $Itemdetails = array();
                                                            $itemDetails = $this->db->query("SELECT
                                                                                grvDetailsID AS documentDetailAutoID,
                                                                                itemAutoID,
                                                                                itemSystemCode,
                                                                                itemDescription,
                                                                                receivedQty AS requestedQty,
                                                                                unitOfMeasureID,
                                                                                unitOfMeasure,
                                                                                receivedAmount AS unitAmount,
                                                                                '' AS discountPercentage,
                                                                                '' AS discountAmount,
                                                                                receivedTotalAmount AS totalAmount,
                                                                                comment AS narration,
                                                                                '' AS pulledDocCode,
                                                                            '' AS warehouse,
                                                                                '' AS wareHouseLocation,
                                                                                '' AS taxID,
                                                                                '' AS taxDescription,
                                                                                '' AS taxAmount,
                                                                                '' AS previousStock,
                                                                                '' AS previousWac,
                                                                                '' AS currentStock,
                                                                                '' AS currentWac,
                                                                                '' AS adjustmentStock,
                                                                                '' AS adjustmentWac
                                                                            FROM
                                                                                srp_erp_grvdetails	
                                                                                LEFT JOIN srp_erp_grvmaster ON srp_erp_grvmaster.grvAutoID = srp_erp_grvdetails.grvAutoID
                                                                            WHERE
                                                                                srp_erp_grvdetails.companyID = {$companyID}
                                                                                AND srp_erp_grvdetails.grvAutoID = {$documentAutoID}
                                                                                AND grvType = 'Standard'")->result_array();
                                                            if(!empty($itemDetails)) {
                                                                foreach ($itemDetails AS $val){
                                                                    $a = array();
                                                                    foreach (array_keys($val) as $det) {
                                                                        switch ($det) {
                                                                            CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                                                            $a[$det] = (int)$val[$det];
                                                                            BREAK;

                                                                            CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                                                            $a[$det] = (double)$val[$det];
                                                                            BREAK;

                                                                            CASE 'requestedQty' : CASE 'discountPercentage' :
                                                                            $a[$det] = (float)$val[$det];
                                                                            BREAK;

                                                                            DEFAULT :
                                                                                $a[$det] = $val[$det];
                                                                        }
                                                                    }
                                                                    array_push($Itemdetails, $a);
                                                                }
                                                            }

                                                            $DocumentDetails = array();
                                                            $documentdetails = $this->db->query("SELECT
                                                                                    grvDetailsID AS documentDetailAutoID,
                                                                                    'PO Based' AS docType,
                                                                                    'PO' AS documentID,
                                                                                    purchaseOrderCode AS pulledDocCode,
                                                                                    '' AS pulledDocDate,
                                                                                    requestedAmount AS pulledDocAmount,
                                                                                    '' AS dueAmount,
                                                                                    '' AS balanceAmount,
                                                                                    comment AS referenceNo,
                                                                                    receivedTotalAmount AS totalAmount,
                                                                                    '' AS segmentCode,
                                                                                    receivedAmount AS unitAmount,
                                                                                    CONCAT(itemSystemCode, ' | ', itemDescription) AS item,
                                                                                    unitOfMeasure AS UOM,
                                                                                    receivedQty AS qty,
                                                                                    '' AS party,
                                                                                    '' AS chequeNo,
                                                                                    '' AS chequeDate,
                                                                                    '' AS bankCurrencyAmount 
                                                                                FROM
                                                                                    srp_erp_grvdetails 
                                                                                    LEFT JOIN srp_erp_grvmaster ON srp_erp_grvmaster.grvAutoID = srp_erp_grvdetails.grvAutoID
                                                                                WHERE
                                                                                    srp_erp_grvdetails.companyID = {$companyID}
                                                                                    AND srp_erp_grvdetails.grvAutoID = {$documentAutoID}
                                                                                AND grvType = 'PO Base'")->result_array();
                                                            if(!empty($documentdetails)) {
                                                                foreach ($documentdetails AS $val){
                                                                    $a = array();
                                                                    foreach (array_keys($val) as $det) {
                                                                        switch ($det) {
                                                                            CASE 'documentDetailAutoID' :
                                                                            $a[$det] = (int)$val[$det];
                                                                            BREAK;

                                                                            CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                                                            $a[$det] = (double)$val[$det];
                                                                            BREAK;

                                                                            DEFAULT :
                                                                                $a[$det] = $val[$det];
                                                                        }
                                                                    }
                                                                    array_push($DocumentDetails, $a);
                                                                }
                                                            }

                                                            $grandtotal = $this->db->query("SELECT
                                            (IFNULL( det.receivedTotalAmount, 0 )+ IFNULL( addondet.total_amount, 0 )) AS transactionAmount 
                                        FROM
                                            srp_erp_grvmaster
                                            LEFT JOIN ( SELECT SUM( receivedTotalAmount ) AS receivedTotalAmount, grvAutoID FROM srp_erp_grvdetails GROUP BY grvAutoID ) det ON det.grvAutoID = srp_erp_grvmaster.grvAutoID
                                            LEFT JOIN ( SELECT SUM( total_amount ) AS total_amount, grvAutoID FROM srp_erp_grv_addon GROUP BY grvAutoID ) addondet ON addondet.grvAutoID = srp_erp_grvmaster.grvAutoID 
                                        WHERE
                                            companyID = {$companyID}
                                            AND srp_erp_grvmaster.grvAutoID = {$documentAutoID}")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'SR' :
                $query = $this->db->query("SELECT
                                    stockReturnAutoID AS documentAutoID,
                                    documentID AS doucmentID,
                                    stockReturnCode AS documentCode,
                                    '' AS documentType,
                                    returnDate AS documentDate,
                                    CONCAT(supplierSystemCode,' - ',supplierName) AS name,
                                    supplierAddress AS address,
                                    '' AS segmentCode,
                                    'srp_erp_stockreturnmaster' AS tableName,
                                    'stockReturnAutoID' AS fieldName,
                                    transactionAmount AS amount,
                                    transactionCurrencyID AS currencyID,
                                    transactionCurrency AS currency,
                                    transactionCurrencyDecimalPlaces AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    `comment` AS narration,
                                    CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_stockreturnmaster 
                                WHERE
                                    companyID = {$companyID}
                                    AND stockReturnAutoID = {$documentAutoID}
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                        stockReturnDetailsID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        return_Qty AS requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        '' AS unitAmount,
                                        '' AS discountPercentage,
                                        '' AS discountAmount,
                                        totalValue AS totalAmount,
                                        comments AS narration,
                                        '' AS pulledDocCode,
                                        '' AS warehouse,
                                        '' AS wareHouseLocation,
                                        '' AS taxID,
                                        '' AS taxDescription,
                                        '' AS taxAmount,
                                        '' AS previousStock,
                                        '' AS previousWac,
                                        '' AS currentStock,
                                        '' AS currentWac,
                                        '' AS adjustmentStock,
                                        '' AS adjustmentWac
                                    FROM
                                        srp_erp_stockreturndetails
                                    WHERE
                                        stockReturnAutoID = {$documentAutoID}")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) AS transactionAmount, stockReturnAutoID FROM srp_erp_stockreturndetails WHERE stockReturnAutoID = {$documentAutoID} GROUP BY stockReturnAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'MR' :
                $query = $this->db->query("SELECT
                                            mrAutoID AS documentAutoID,
                                            documentID AS doucmentID,
                                            MRCode AS documentCode,
                                            '' AS documentType,
                                            requestedDate AS documentDate,
                                            --CASE WHEN employeeID > 0 THEN employeeCode ELSE employeeName END AS name,
                                            employeeName as name,
                                            '' AS address,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                            'srp_erp_materialrequest' AS tableName,
                                            'mrAutoID' AS fieldName,
                                            '' AS amount,
                                            '' AS currencyID,
                                            '' AS currency,
                                            '' AS decimalPlaces,
                                            currentLevelNo AS level,
                                            confirmedDate AS confirmedDate,
                                            confirmedByEmpID AS confirmedEmpID,
                                            confirmedByName AS confirmedEmpName,
                                            `comment` AS narration,
                                            CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                            '' AS fromWarehouse,
                                            '' AS toWarehouse,
                                            '' AS fromBank,
                                            '' AS toBank,
                                            '' AS chequeNo,
                                            '' AS chequeDate,
                                            '' AS supplierInvoiceNo,
                                            '' AS supplierInvoiceDate
                                        FROM
                                            srp_erp_materialrequest
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_materialrequest.segmentID
                                        WHERE
                                            srp_erp_materialrequest.companyID = {$companyID} 
                                            AND mrAutoID = {$documentAutoID}
                                            AND confirmedYN = 1
                                            AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                        mrDetailID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        qtyRequested AS requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        '' AS unitAmount,
                                        '' AS discountPercentage,
                                        '' AS discountAmount,
                                        totalValue AS totalAmount,
                                        comments AS narration,
                                        '' AS pulledDocCode,
                                        '' AS warehouse,
                                        '' AS wareHouseLocation,
                                        '' AS taxID,
                                        '' AS taxDescription,
                                        '' AS taxAmount,
                                        '' AS previousStock,
                                        '' AS previousWac,
                                        '' AS currentStock,
                                        '' AS currentWac,
                                        '' AS adjustmentStock,
                                        '' AS adjustmentWac
                                    FROM
                                        srp_erp_materialrequestdetails 
                                    WHERE
                                        companyID = {$companyID}
                                        AND mrAutoID = {$documentAutoID}")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  null;
                }
                break;

            case 'MI' :
                $query = $this->db->query("SELECT
                                            itemIssueAutoID AS documentAutoID,
                                            documentID AS doucmentID,
                                            itemIssueCode AS documentCode,
                                            issueType AS documentType,
                                            issueDate AS documentDate,
                                            -- CASE WHEN employeeID > 0 THEN employeeCode ELSE employeeName END AS name,
                                            employeeName as name,
                                            '' AS address,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                            'srp_erp_itemissuemaster' AS tableName,
                                            'itemIssueAutoID' AS fieldName,
                                            '' AS amount,
                                            '' AS currencyID,
                                            '' AS currency,
                                            '' AS decimalPlaces,
                                            currentLevelNo AS level,
                                            confirmedDate AS confirmedDate,
                                            confirmedByEmpID AS confirmedEmpID,
                                            confirmedByName AS confirmedEmpName,
                                            `comment` AS narration,
                                            CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                            '' AS fromWarehouse,
                                            '' AS toWarehouse,
                                            '' AS fromBank,
                                            '' AS toBank,
                                            '' AS chequeNo,
                                            '' AS chequeDate,
                                            '' AS supplierInvoiceNo,
                                            '' AS supplierInvoiceDate
                                        FROM
                                            srp_erp_itemissuemaster
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_itemissuemaster.segmentID
                                        WHERE
                                            srp_erp_itemissuemaster.companyID = {$companyID}
                                            AND itemIssueAutoID = {$documentAutoID}
                                            AND confirmedYN = 1 
                                            AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                    itemIssueDetailID AS documentDetailAutoID,
                                    itemAutoID,
                                    itemSystemCode,
                                    itemDescription,
                                    qtyIssued AS requestedQty,
                                    unitOfMeasureID,
                                    unitOfMeasure,
                                    '' AS unitAmount,
                                    '' AS discountPercentage,
                                    '' AS discountAmount,
                                    totalValue AS totalAmount,
                                    comments AS narration,
                                    '' AS pulledDocCode,
                                    '' AS warehouse,
                                    '' AS wareHouseLocation,
                                    '' AS taxID,
                                    '' AS taxDescription,
                                    '' AS taxAmount,
                                    '' AS previousStock,
                                    '' AS previousWac,
                                    '' AS currentStock,
                                    '' AS currentWac,
                                    '' AS adjustmentStock,
                                    '' AS adjustmentWac
                                FROM
                                    srp_erp_itemissuedetails 
                                WHERE
                                    companyID = {$companyID}
                                    AND itemIssueAutoID = {$documentAutoID}
                                    AND (mrAutoID IS NULL OR mrAutoID = 0)")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                        itemIssueDetailID AS documentDetailAutoID,
                                        'MR Based' AS docType,
                                        'MR' AS documentID,
                                        MRCode AS pulledDocCode,
                                        requestedDate AS pulledDocDate,
                                        qtyRequested AS pulledDocAmount,
                                        '' AS dueAmount,
                                        '' AS balanceAmount,
                                        comments AS referenceNo,
                                        totalValue AS totalAmount,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        '' AS unitAmount,
                                        CONCAT( itemSystemCode, ' | ', itemDescription ) AS item,
                                        unitOfMeasure AS UOM,
                                        qtyIssued AS qty,
                                        '' AS party,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS bankCurrencyAmount 
                                    FROM
                                        srp_erp_itemissuedetails 
                                        LEFT JOIN srp_erp_materialrequest ON srp_erp_materialrequest.mrAutoID = srp_erp_itemissuedetails.mrAutoID
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_itemissuedetails.segmentID
                                    WHERE
                                        srp_erp_itemissuedetails.companyID = {$companyID}
                                        AND itemIssueAutoID = {$documentAutoID}
                                        AND srp_erp_itemissuedetails.mrAutoID IS NOT NULL")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) as transactionAmount FROM srp_erp_itemissuedetails WHERE itemIssueAutoID = {$documentAutoID} GROUP BY itemIssueAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'MRN' :
                $query = $this->db->query("SELECT
                                    mrnAutoID AS documentAutoID,
                                    documentID AS doucmentID,
                                    mrnCode AS documentCode,
                                    receiptType AS documentType,
                                    receivedDate AS documentDate,
                                    -- CASE WHEN employeeID > 0 THEN employeeCode ELSE employeeName END AS name,
                                    employeeName  AS name,
                                    '' AS address,
                                    CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                    'srp_erp_materialreceiptmaster' AS tableName,
                                    'mrnAutoID' AS fieldName,
                                    '' AS amount,
                                    '' AS currencyID,
                                    '' AS currency,
                                    '' AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    `comment` AS narration,
                                    CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_materialreceiptmaster 
                                LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_materialreceiptmaster.segmentID
                                WHERE
                                    srp_erp_materialreceiptmaster.companyID = {$companyID} 
                                    AND mrnAutoID = {$documentAutoID}
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                            mrnDetailID AS documentDetailAutoID,
                                            itemAutoID,
                                            itemSystemCode,
                                            itemDescription,
                                            qtyReceived AS requestedQty,
                                            unitOfMeasureID,
                                            unitOfMeasure,
                                            unitCost AS unitAmount,
                                            '' AS discountPercentage,
                                            '' AS discountAmount,
                                            totalValue AS totalAmount,
                                            comments AS narration,
                                            '' AS pulledDocCode,
                                            '' AS warehouse,
                                            '' AS wareHouseLocation,
                                            '' AS taxID,
                                            '' AS taxDescription,
                                            '' AS taxAmount,
                                            '' AS previousStock,
                                            '' AS previousWac,
                                            '' AS currentStock,
                                            '' AS currentWac,
                                            '' AS adjustmentStock,
                                            '' AS adjustmentWac
                                        FROM
                                            srp_erp_materialreceiptdetails
                                            LEFT JOIN srp_erp_materialreceiptmaster ON srp_erp_materialreceiptmaster.mrnAutoID = srp_erp_materialreceiptdetails.mrnAutoID 
                                        WHERE
                                            srp_erp_materialreceiptdetails.companyID = {$companyID} 
                                            AND srp_erp_materialreceiptdetails.mrnAutoID = {$documentAutoID}
                                            AND receiptType = 'Direct Issue'")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $DocumentDetails = array();
                    $documentdetails = $this->db->query("SELECT
                                        mrnDetailID AS documentDetailAutoID,
                                        'Material Request' AS docType,
                                        'MR' AS documentID,
                                        MRCode AS pulledDocCode,
                                        requestedDate AS pulledDocDate,
                                        qtyRequested AS pulledDocAmount,
                                        '' AS dueAmount,
                                        '' AS balanceAmount,
                                        comments AS referenceNo,
                                        totalValue AS totalAmount,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        unitCost AS unitAmount,
                                        CONCAT( itemSystemCode, ' | ', itemDescription ) AS item,
                                        unitOfMeasure AS UOM,
                                        qtyReceived AS qty,
                                        '' AS party,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        '' AS bankCurrencyAmount 
                                    FROM
                                        srp_erp_materialreceiptdetails
                                        LEFT JOIN srp_erp_materialrequest ON srp_erp_materialrequest.mrAutoID = srp_erp_materialreceiptdetails.mrMasterID 
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_materialreceiptdetails.segmentID
                                    WHERE
                                        srp_erp_materialreceiptdetails.companyID = {$companyID} 
                                        AND mrnAutoID = {$documentAutoID}
                                        AND srp_erp_materialreceiptdetails.mrMasterID IS NOT NULL")->result_array();
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) as transactionAmount FROM srp_erp_materialreceiptdetails WHERE mrnAutoID = {$documentAutoID} GROUP BY mrnAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'ST' :
                $query = $this->db->query("SELECT
                                            stockTransferAutoID AS documentAutoID,
                                            documentID AS doucmentID,
                                            stockTransferCode AS documentCode,
                                            '' AS documentType,
                                            tranferDate AS documentDate,
                                            '' AS name,
                                            '' AS address,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                            'srp_erp_stocktransfermaster' AS tableName,
                                            'stockTransferAutoID' AS fieldName,
                                            '' AS amount,
                                            '' AS currencyID,
                                            '' AS currency,
                                            '' AS decimalPlaces,
                                            currentLevelNo AS level,
                                            confirmedDate AS confirmedDate,
                                            confirmedByEmpID AS confirmedEmpID,
                                            confirmedByName AS confirmedEmpName,
                                            comment AS narration,
                                            '' AS warehouse,
                                            CONCAT( form_wareHouseCode, ' | ', form_wareHouseDescription ) AS fromWarehouse,
                                            CONCAT( to_wareHouseCode, ' | ', to_wareHouseDescription ) AS toWarehouse,
                                            '' AS fromBank,
                                            '' AS toBank,
                                            '' AS chequeNo,
                                            '' AS chequeDate,
                                            '' AS supplierInvoiceNo,
                                            '' AS supplierInvoiceDate
                                        FROM
                                            srp_erp_stocktransfermaster
                                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_stocktransfermaster.segmentID
                                        WHERE
                                            srp_erp_stocktransfermaster.companyID = {$companyID}
                                            AND stockTransferAutoID = {$documentAutoID} 
                                            AND confirmedYN = 1 
                                            AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                        stockTransferDetailsID AS documentDetailAutoID,
                        itemAutoID,
                        itemSystemCode,
                        itemDescription,
                        transfer_QTY AS requestedQty,
                        unitOfMeasureID,
                        unitOfMeasure,
                        '' AS unitAmount,
                        '' AS discountPercentage,
                        '' AS discountAmount,
                        totalValue AS totalAmount,
                        comments AS narration,
                        '' AS pulledDocCode,
                        '' AS warehouse,
                        '' AS wareHouseLocation,
                        '' AS taxID,
                        '' AS taxDescription,
                        '' AS taxAmount,
                        '' AS previousStock,
                        '' AS previousWac,
                        '' AS currentStock,
                        '' AS currentWac,
                        '' AS adjustmentStock,
                        '' AS adjustmentWac
                    FROM
                        srp_erp_stocktransferdetails 
                    WHERE
                        stockTransferAutoID = {$documentAutoID}")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) as transactionAmount FROM srp_erp_stocktransferdetails WHERE stockTransferAutoID = {$documentAutoID} GROUP BY stockTransferAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'SA' :
                $query = $this->db->query("SELECT
                                stockAdjustmentAutoID AS documentAutoID,
                                documentID AS doucmentID,
                                stockAdjustmentCode AS documentCode,
                                '' AS documentType,
                                stockAdjustmentDate AS documentDate,
                                '' AS name,
                                '' AS address,
                                CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                'srp_erp_stockadjustmentmaster' AS tableName,
                                'stockAdjustmentAutoID' AS fieldName,
                                '' AS amount,
                                '' AS currencyID,
                                '' AS currency,
                                '' AS decimalPlaces,
                                currentLevelNo AS level,
                                confirmedDate AS confirmedDate,
                                confirmedByEmpID AS confirmedEmpID,
                                confirmedByName AS confirmedEmpName,
                                comment AS narration,
                                CONCAT(wareHouseCode, ' | ', wareHouseDescription) AS warehouse,
                                '' AS fromWarehouse,
                                '' AS toWarehouse,
                                '' AS fromBank,
                                '' AS toBank,
                                '' AS chequeNo,
                                '' AS chequeDate,
                                '' AS supplierInvoiceNo,
                                '' AS supplierInvoiceDate
                            FROM
                                srp_erp_stockadjustmentmaster 
                                LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_stockadjustmentmaster.segmentID
                            WHERE
                                srp_erp_stockadjustmentmaster.companyID = {$companyID}
                                AND stockAdjustmentAutoID = {$documentAutoID}
                                AND confirmedYN = 1 
                                AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                stockAdjustmentDetailsAutoID AS documentDetailAutoID,
                                itemAutoID,
                                itemSystemCode,
                                itemDescription,
                                '' AS requestedQty,
                                unitOfMeasureID,
                                unitOfMeasure,
                                '' AS unitAmount,
                                '' AS discountPercentage,
                                '' AS discountAmount,
                                totalValue AS totalAmount,
                                comments AS narration,
                                '' AS pulledDocCode,
                                '' AS warehouse,
                                '' AS wareHouseLocation,
                                '' AS taxID,
                                '' AS taxDescription,
                                '' AS taxAmount,
                                previousStock,
                                previousWac,
                                currentStock,
                                currentWac,
                                adjustmentStock,
                                adjustmentWac
                            FROM
                                srp_erp_stockadjustmentdetails 
                            WHERE
                                stockAdjustmentAutoID = {$documentAutoID}")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' : CASE 'adjustmentStock' : CASE 'adjustmentWac' :
                                    CASE 'previousStock' : CASE 'currentStock' : CASE 'previousWac' : CASE 'currentWac' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $grandtotal = $this->db->query("SELECT SUM(totalValue) as transactionAmount FROM srp_erp_stockadjustmentdetails WHERE stockAdjustmentAutoID = {$documentAutoID} GROUP BY stockAdjustmentAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'SCNT' :
                $query = $this->db->query("SELECT
                                    stockCountingAutoID AS documentAutoID,
                                    documentID AS doucmentID,
                                    stockCountingCode AS documentCode,
                                    stockCountingType AS documentType,
                                    stockCountingDate AS documentDate,
                                    '' AS name,
                                    '' AS address,
                                    CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                    'srp_erp_stockcountingmaster' AS tableName,
                                    'stockCountingAutoID' AS fieldName,
                                    '' AS amount,
                                    '' AS currencyID,
                                    '' AS currency,
                                    '' AS decimalPlaces,
                                    currentLevelNo AS level,
                                    confirmedDate AS confirmedDate,
                                    confirmedByEmpID AS confirmedEmpID,
                                    confirmedByName AS confirmedEmpName,
                                    `comment` AS narration,
                                    CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                    '' AS fromWarehouse,
                                    '' AS toWarehouse,
                                    '' AS fromBank,
                                    '' AS toBank,
                                    '' AS chequeNo,
                                    '' AS chequeDate,
                                    '' AS supplierInvoiceNo,
                                    '' AS supplierInvoiceDate
                                FROM
                                    srp_erp_stockcountingmaster 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_stockcountingmaster.segmentID
                                WHERE
                                    srp_erp_stockcountingmaster.companyID = {$companyID}
                                    AND stockCountingAutoID = {$documentAutoID} 
                                    AND confirmedYN = 1 
                                    AND approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $Itemdetails = array();
                    $itemDetails = $this->db->query("SELECT
                                        stockCountingDetailsAutoID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        '' AS requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        '' AS unitAmount,
                                        '' AS discountPercentage,
                                        '' AS discountAmount,
                                        totalValue AS totalAmount,
                                        comments AS narration,
                                        '' AS pulledDocCode,
                                        '' AS warehouse,
                                        '' AS wareHouseLocation,
                                        '' AS taxID,
                                        '' AS taxDescription,
                                        '' AS taxAmount,
                                        previousStock,
                                        previousWac,
                                        currentStock,
                                        currentWac,
                                        adjustmentStock,
                                        adjustmentWac
                                    FROM
                                        srp_erp_stockcountingdetails 
                                    WHERE
                                     stockCountingAutoID = {$documentAutoID}")->result_array();
                    if(!empty($itemDetails)) {
                        foreach ($itemDetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' :
                                    $a[$det] = (int)$val[$det];
                                    BREAK;

                                    CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                                    CASE 'adjustmentStock' : CASE 'adjustmentWac' : CASE 'previousStock' :
                                    CASE 'previousWac' : CASE 'currentStock' : CASE 'currentWac' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    CASE 'requestedQty' : CASE 'discountPercentage' :
                                    $a[$det] = (float)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($Itemdetails, $a);
                        }
                    }

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = $Itemdetails;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  null;
                }
                break;

            case 'BT' :
                $query = $this->db->query("SELECT
                                bankTransferAutoID AS documentAutoID,
                                documentID AS doucmentID,
                                bankTransferCode AS documentCode,
                                CASE WHEN transferType = 1 THEN 'Bank Transfer' ELSE 'Cheque' END AS documentType,
                                transferedDate AS documentDate,
                                '' AS name,
                                '' AS address,
                                CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                'srp_erp_banktransfer' AS tableName,
                                'bankTransferAutoID' AS fieldName,
                                transferedAmount AS amount,
                                fromBankCurrencyID AS currencyID,
                                CurrencyCode AS currency,
                                DecimalPlaces AS decimalPlaces,
                                currentLevelNo AS level,
                                srp_erp_banktransfer.confirmedDate AS confirmedDate,
                                srp_erp_banktransfer.confirmedByEmpID AS confirmedEmpID,
                                srp_erp_banktransfer.confirmedByName AS confirmedEmpName,
                                narration AS narration,
                                '' AS warehouse,
                                '' AS fromWarehouse,
                                '' AS toWarehouse,
                                fromBanktbl.GLDescription AS fromBank,
                                toBanktbl.GLDescription AS toBank,
                               chequeNo,
                                chequeDate,
                                '' AS supplierInvoiceNo,
                                '' AS supplierInvoiceDate
                            FROM
                                srp_erp_banktransfer 
                                LEFT JOIN srp_erp_chartofaccounts fromBanktbl ON fromBanktbl.GLAutoID = srp_erp_banktransfer.fromBankGLAutoID
                                LEFT JOIN srp_erp_chartofaccounts toBanktbl ON toBanktbl.GLAutoID = srp_erp_banktransfer.toBankGLAutoID
                                LEFT JOIN srp_erp_currencymaster ON srp_erp_currencymaster.currencyID = srp_erp_banktransfer.fromBankCurrencyID
                                LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_banktransfer.segmentID
                            WHERE
                                srp_erp_banktransfer.companyID = {$companyID}
                                AND bankTransferAutoID = {$documentAutoID}
                                AND srp_erp_banktransfer.confirmedYN = 1 
                                AND srp_erp_banktransfer.approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $grandtotal = $this->db->query("SELECT transferedAmount AS transactionAmount FROM srp_erp_banktransfer WHERE bankTransferAutoID = {$documentAutoID} GROUP BY bankTransferAutoID")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  null;
                    $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
                }
                break;

            case 'BRC' :
                $query = $this->db->query("SELECT
                                        bankRecAutoID AS documentAutoID,
                                        documentID AS doucmentID,
                                        bankRecPrimaryCode AS documentCode,
                                        '' AS documentType,
                                        bankRecAsOf AS documentDate,
                                        '' AS name,
                                        '' AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                        'srp_erp_bankrecmaster' AS tableName,
                                        'bankRecAutoID' AS fieldName,
                                        '' AS amount,
                                        bankCurrencyID AS currencyID,
                                        bankCurrencyCode AS currency,
                                        bankCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        srp_erp_bankrecmaster.confirmedDate AS confirmedDate,
                                        srp_erp_bankrecmaster.confirmedByEmpID AS confirmedEmpID,
                                        srp_erp_bankrecmaster.confirmedByName AS confirmedEmpName,
                                        srp_erp_bankrecmaster.description AS narration,
                                        '' AS warehouse,
                                        '' AS fromWarehouse,
                                        '' AS toWarehouse,
                                        CONCAT(bankName, ' (', bankBranch, ')') AS fromBank,
                                        '' AS toBank,
                                        '' AS chequeNo,
                                        '' AS chequeDate,
                                        bankGLAutoID,
                                        '' AS supplierInvoiceNo,
                                        '' AS supplierInvoiceDate
                                    FROM
                                    srp_erp_bankrecmaster
                                    LEFT JOIN srp_erp_chartofaccounts ON srp_erp_chartofaccounts.GLAutoID = srp_erp_bankrecmaster.bankGLAutoID
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_bankrecmaster.segmentID
                                    WHERE
                                        srp_erp_bankrecmaster.companyID = {$companyID}
                                        AND bankRecAutoID = {$documentAutoID} 
                                        AND srp_erp_bankrecmaster.confirmedYN = 1 
                                        AND srp_erp_bankrecmaster.approvedYN = 0")->row_array();

                $x = array();
                if($query) {
                    $currency_arr = array();
                    foreach (array_keys($query) as $item) {
                        switch ($item) {
                            case 'documentAutoID' :
                            case 'level' :
                            case 'confirmedEmpID' :
                                $x[$item] = (int)$query[$item];
                                break;

                            case 'currencyID' :
                                if (!empty($query[$item])) {
                                    $currency_arr['currencyID'] = (int)$query['currencyID'];
                                    $currency_arr['currency'] = $query['currency'];
                                    $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                                } else {
                                    $currencyID = current_company_default_currencyID();
                                    $currency_arr['currencyID'] = (int)$currencyID;
                                    $currency_arr['currency'] = fetch_currency_code($currencyID);
                                    $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                                }
                                break;

                            case 'currency' :
                            case 'decimalPlaces' :
                            case 'bankGLAutoID' :
                                break;

                            default :
                                $x[$item] = $query[$item];
                        }
                        $x['currency'] = $currency_arr;
                    }

                    $DocumentDetails = array();
                    $GLAutoID = $query['bankGLAutoID'];
                    $bankRecAsOf = $query['documentDate'];
                    $bankRecAutoID = $query['documentAutoID'];

                    $documentdetails = $this->db->query("SELECT
                                        bankLedgerAutoID AS documentDetailAutoID,
                                        CASE WHEN transactionType = 1 THEN 'Un-Cleared Receipt' ELSE 'Un-Cleared Payment' END AS docType,
                                        '' AS documentID,
                                        documentSystemCode AS pulledDocCode,
                                        documentDate AS pulledDocDate,
                                        '' AS pulledDocAmount,
                                        '' AS dueAmount,
                                        '' AS balanceAmount,
                                        '' AS referenceNo,
                                        bankCurrencyAmount AS totalAmount,
                                        '' AS segmentCode,
                                        '' AS unitAmount,
                                        '' AS item,
                                        '' AS UOM,
                                        '' AS qty,
                                        CONCAT( partyCode, ' | ', partyName ) AS party,
                                        chequeNo,
                                        chequeDate,
                                        bankCurrencyAmount 
                                    FROM
                                        srp_erp_bankledger 
                                    WHERE
                                        bankGLAutoID = {$GLAutoID} 
                                        AND documentDate <= '{$bankRecAsOf}' 
                                        AND (
                                            clearedYN = 0 
                                            OR bankRecMonthID != {$bankRecAutoID} 
                                        AND bankRecMonthID NOT IN ( SELECT bankRecAutoID FROM `srp_erp_bankrecmaster` WHERE companyID = {$companyID} AND bankGLAutoID = {$GLAutoID} AND bankRecAsOf <= '{$bankRecAsOf}' )) 
                                    ORDER BY
                                        documentDate ASC")->result_array();

                    $detReceipt = 0;
                    $detPayment = 0;
                    if(!empty($documentdetails)) {
                        foreach ($documentdetails AS $val){
                            $a = array();
                            foreach (array_keys($val) as $det) {
                                switch ($det) {
                                    CASE 'documentDetailAutoID' :
                                        $a[$det] = (int)$val[$det];
                                        BREAK;

                                    CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' : CASE 'bankCurrencyAmount' :
                                    $a[$det] = (double)$val[$det];
                                    BREAK;

                                    DEFAULT :
                                        $a[$det] = $val[$det];
                                }
                            }
                            array_push($DocumentDetails, $a);

                            if($val['docType'] == 'Un-Cleared Receipt') {
                                $detReceipt += $val['bankCurrencyAmount'];
                            } else {
                                $detPayment += -1 * $val['bankCurrencyAmount'];
                            }
                        }
                    }

                    $openingbalance = $this->db->query( "SELECT receipt, payment, receipt - payment AS balance FROM ( SELECT SUM( IF ( transactionType = 2, bankcurrencyAmount, 0 ) ) payment, SUM( IF ( transactionType = 1, bankcurrencyAmount, 0 ) ) AS receipt FROM srp_erp_bankrecmaster m LEFT JOIN srp_erp_bankledger d ON m.bankRecAutoID = d.bankRecMonthID WHERE m.companyID = {$companyID} AND documentDate <= '{$bankRecAsOf}' AND d.bankGLAutoID = {$GLAutoID} AND ( d.bankRecMonthID IS  NULL OR bankRecMonthID IN ( SELECT bankRecAutoID FROM srp_erp_bankrecmaster WHERE bankGLAutoID = {$GLAutoID} AND bankRecAsOf <= '{$bankRecAsOf}' ) ) ) tt;")->row_array();

                    $dataReturn['header'] = $x;
                    $dataReturn['itemDetails'] = null;
                    $dataReturn['glDetails'] =  null;
                    $dataReturn['discountDetails'] =  null;
                    $dataReturn['taxDetails'] =  null;
                    $dataReturn['ExtrachargesDetails'] =  null;
                    $dataReturn['AdvanceDetails'] =  null;
                    $dataReturn['mergedDocDetails'] =  $DocumentDetails;
                    $dataReturn['documentGrandTotal'] =  (double)$openingbalance['balance'] + $detReceipt + $detPayment;
                }
                break;

            default :

        }

        $this->db->where('documentSystemCode', $documentAutoID);
        $this->db->where('documentID', $documentID);
        $this->db->where('companyID', $companyID);
        $data = $this->db->get('srp_erp_documentattachments')->result_array();

        $attachment_links = array();
        if (!empty($data)) {
            foreach ($data as $val) {
                $attachment = array();

                $attachment['id'] = (int)$val['attachmentID'];
                $attachment['link'] = $this->s3->createPresignedRequest($val['myFileName'], '1 hour');
                $attachment['type'] = $val['fileType'];
                $attachment['fileName'] = $val['myFileName'];
                $attachment['description'] = $val['attachmentDescription'];

                array_push($attachment_links, $attachment);
            }
        }
        $dataReturn['attachments'] = $attachment_links;

        return $dataReturn;
    }

    function generate_paymentVoucher_bsi()
    {
        $invoiceAutoID = $this->input->post('InvoiceID');
        $date_format_policy = date_format_policy();
        $PaymentVoucherdate = $this->input->post('PVdate');
        $PVdate = input_format_date($PaymentVoucherdate, $date_format_policy);
        $PVcheqDate = $this->input->post('PVchequeDate');
        $PVchequeDate = input_format_date($PVcheqDate, $date_format_policy);
        $referenceno = $this->input->post('referenceno');
        $narration = $this->input->post('narration');
        $PVbankCode = $this->input->post('PVbankCode');
        $paymentType = $this->input->post('paymentType');
        $supplierBankMasterID = $this->input->post('supplierBankMasterID');
        $chequeRegisterDetailID = $this->input->post('chequeRegisterDetailID');
        $PVchequeNo = $this->input->post('PVchequeNo');

        $this->db->select('*');
        $this->db->from('srp_erp_paysupplierinvoicemaster');
        $this->db->where('InvoiceAutoID', $invoiceAutoID);
        $invdate=$this->db->get()->row_array();
        if($PVdate >= $invdate['bookingDate']) {
            $financeYearDetails = get_financial_year($PVdate);
            if (empty($financeYearDetails)) {
                return array('e', 'Finance period not found for the selected document date');
            } else {
                $FYBegin = $financeYearDetails['beginingDate'];
                $FYEnd = $financeYearDetails['endingDate'];
                $_POST['companyFinanceYear'] = $FYBegin . ' - ' . $FYEnd;
                $_POST['financeyear'] = $financeYearDetails['companyFinanceYearID'];
            }
            $financePeriodDetails = get_financial_period_date_wise($PVdate);

            if (empty($financePeriodDetails)) {
                return array('e', 'Finance period not found for the selected document date');
            } else {
                $_POST['financeyear_period'] = $financePeriodDetails['companyFinancePeriodID'];
            }

            $accountPayeeOnly = 0;
            if (!empty($this->input->post('accountPayeeOnly'))) {
                $accountPayeeOnly = 1;
            }

            $voucherType = $invdate['invoiceType'];
            $transactionCurrencyID = $invdate['transactionCurrencyID'];
            $this->db->select("segmentCode");
            $this->db->from('srp_erp_segment');
            $this->db->where('segmentID', $invdate['segmentID']);
            $segment = $this->db->get()->row_array();
            $currency_code = fetch_currency_code($transactionCurrencyID);
            $chequeRegister = getPolicyValues('CRE', 'All');

            $data['PVbankCode'] = trim($PVbankCode);
            $bank_detail = fetch_gl_account_desc($data['PVbankCode']);
            $data['documentID'] = 'PV';
            $data['companyFinanceYearID'] = trim($this->input->post('financeyear') ?? '');
            $data['companyFinanceYear'] = trim($this->input->post('companyFinanceYear') ?? '');
            $data['FYBegin'] = trim($FYBegin);
            $data['FYEnd'] = trim($FYEnd);
            $data['companyFinancePeriodID'] = trim($this->input->post('financeyear_period') ?? '');
            $data['PVdate'] = trim($PVdate);
            $data['PVNarration'] = trim_desc($narration);
            $data['accountPayeeOnly'] = $accountPayeeOnly;
            $data['segmentID'] = $invdate['segmentID'];
            $data['segmentCode'] = trim($segment['segmentCode'] ?? '');
            $data['bankGLAutoID'] = $bank_detail['GLAutoID'];
            $data['bankSystemAccountCode'] = $bank_detail['systemAccountCode'];
            $data['bankGLSecondaryCode'] = $bank_detail['GLSecondaryCode'];
            $data['bankCurrencyID'] = $bank_detail['bankCurrencyID'];
            $data['bankCurrency'] = $bank_detail['bankCurrencyCode'];
            $data['PVbank'] = $bank_detail['bankName'];
            $data['PVbankBranch'] = $bank_detail['bankBranch'];
            $data['PVbankSwiftCode'] = $bank_detail['bankSwiftCode'];
            $data['PVbankAccount'] = $bank_detail['bankAccountNumber'];
            $data['PVbankType'] = $bank_detail['subCategory'];
            $data['paymentType'] = $paymentType;
            $data['supplierBankMasterID'] = $supplierBankMasterID;

            if($PVcheqDate == null)
            {
                $data['PVchequeDate'] = null;
            }
            if ($bank_detail['isCash'] == 1) {
                $data['PVchequeNo'] = null;
                $data['chequeRegisterDetailID'] = null;
                $data['PVchequeDate'] = null;
            } else {
                if ($this->input->post('paymentType') == 2 && (($voucherType == 'Supplier') || ($voucherType == 'Direct') || ($voucherType == 'Employee') || ($voucherType == 'PurchaseRequest'))) {
                    $data['PVchequeNo'] = null;
                    $data['chequeRegisterDetailID'] = null;
                    $data['PVchequeDate'] = null;
                } else {
                    if($chequeRegister==1) {
                        $this->db->select('chequeNo');
                        $this->db->where('chequeRegisterDetailID', $chequeRegisterDetailID);
                        $this->db->from('srp_erp_chequeregisterdetails');
                        $chequeRegisterResult= $this->db->get()->row_array();

                        $data['chequeRegisterDetailID'] = trim($chequeRegisterDetailID);
                        $data['PVchequeNo'] = $chequeRegisterResult['chequeNo'];
                    }else{
                        $data['PVchequeNo'] = trim($PVchequeNo);
                        $data['chequeRegisterDetailID'] = null;
                    }
                    $data['PVchequeDate'] = trim($PVchequeDate);
                }
            }
            $data['modeOfPayment'] = ($bank_detail['isCash'] == 1 ? 1 : 2);
            $data['pvType'] = 'SupplierInvoice';
            $data['bankTransferDetails'] = trim($this->input->post('bankTransferDetails') ?? '');
            $data['referenceNo'] = trim_desc($referenceno);
            $data['transactionCurrencyID'] = trim($transactionCurrencyID);
            $data['transactionCurrency'] = $currency_code;
            $data['transactionExchangeRate'] = 1;
            $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
            $data['companyLocalCurrencyID'] = current_company_default_currencyID();
            $data['companyLocalCurrency'] = fetch_currency_code($data['companyLocalCurrencyID']);
            $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
            $data['companyLocalExchangeRate'] = $default_currency['conversion'];
            $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
            $data['companyReportingCurrencyID'] = current_company_reporting_currencyID();
            $data['companyReportingCurrency'] = fetch_currency_code($data['companyReportingCurrencyID']);
            $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
            $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
            $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
            $bank_currency = currency_conversionID($data['transactionCurrencyID'], $data['bankCurrencyID']);
            $data['bankCurrencyExchangeRate'] = $bank_currency['conversion'];
            $data['bankCurrencyDecimalPlaces'] = $bank_currency['DecimalPlaces'];

            $this->db->select('*');
            $this->db->from('srp_erp_suppliermaster');
            $this->db->where('supplierAutoID', $invdate['supplierID']);
            $supplier_arr = $this->db->get()->row_array();

            $data['partyType'] = 'SUP';
            $data['partyID'] = $invdate['supplierID'];
            $data['partyCode'] = $supplier_arr['supplierSystemCode'];
            $data['partyName'] = $supplier_arr['supplierName'];
            $data['partyAddress'] = $supplier_arr['supplierAddress1'] . ' ' . $supplier_arr['supplierAddress2'];
            $data['partyTelephone'] = $supplier_arr['supplierTelephone'];
            $data['partyFax'] = $supplier_arr['supplierFax'];
            $data['partyEmail'] = $supplier_arr['supplierEmail'];
            $data['partyGLAutoID'] = $supplier_arr['liabilityAutoID'];
            $data['partyGLCode'] = $supplier_arr['liabilitySystemGLCode'];
            $data['partyCurrencyID'] = $supplier_arr['supplierCurrencyID'];
            $data['partyCurrency'] = $supplier_arr['supplierCurrency'];
            $data['partyExchangeRate'] = $data['transactionExchangeRate'];
            $partyCurrency = currency_conversionID($data['transactionCurrencyID'], $data['partyCurrencyID']);
            $data['partyExchangeRate'] = $partyCurrency['conversion'];
            $data['partyCurrencyDecimalPlaces'] = $partyCurrency['DecimalPlaces'];
            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $type = substr($data['pvType'], 0, 3);
            $data['PVcode'] = 0;
            $result=$this->db->insert('srp_erp_paymentvouchermaster', $data);
            $last_id = $this->db->insert_id();

            if($result){
                $supplierID = $invdate['supplierID'];
                $currencyID = $transactionCurrencyID;

                $dataw = $this->db->query("SELECT srp_erp_paysupplierinvoicemaster.InvoiceAutoID, bookingInvCode, paymentTotalAmount, advanceMatchedTotal, DebitNoteTotalAmount, RefNo, ( ( ( ( IFNULL( addondet.taxPercentage, 0 ) / 100 ) * ( IFNULL( det.transactionAmount, 0 ) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL( det.transactionAmount, 0 ) ) ) ) + IFNULL( det.transactionAmount, 0 ) ) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL( det.transactionAmount, 0 ) ) ) AS transactionAmount, bookingDate FROM srp_erp_paysupplierinvoicemaster LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID ) det ON ( `det`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID ) LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID ) LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_paysupplierinvoicemaster`.`supplierID` WHERE confirmedYN = 1 AND approvedYN = 1 AND `supplierID` = '$supplierID' AND `transactionCurrencyID` = '$currencyID' AND bookingDate <= '$PVdate' AND srp_erp_paysupplierinvoicemaster.InvoiceAutoID = $invoiceAutoID ")->row_array();
                $balance = $dataw['transactionAmount'] - ($dataw['paymentTotalAmount'] + $dataw['DebitNoteTotalAmount'] + $dataw['advanceMatchedTotal']);
                if ($balance > 0) {
                    update_warehouse_items();
                    update_item_master();
                    $this->db->where('GLAutoID', $data['bankGLAutoID']);
                    $this->db->update('srp_erp_chartofaccounts', array('bankCheckNumber' => $data['PVchequeNo']));

                    $this->load->model('Payable_modal');
                    if(!empty($data['chequeRegisterDetailID'])){
                        $this->Payable_modal->update_cheque_detail($data['chequeRegisterDetailID'],$last_id);
                    }

                    $InvoiceAutoID = $invoiceAutoID;
                    $settlementAmount =  0;
                    $payVoucherAutoId = $last_id;

                    $this->db->select('companyLocalExchangeRate,srp_erp_paysupplierinvoicemaster.transactionCurrencyDecimalPlaces as transactionCurrencyDecimalPlaces,companyReportingExchangeRate,supplierCurrency, supplierCurrencyExchangeRate,srp_erp_paysupplierinvoicemaster.InvoiceAutoID, DebitNoteTotalAmount,supplierliabilityAutoID, supplierliabilitySystemGLCode, supplierliabilityGLAccount,companyReportingCurrency, supplierliabilityDescription , supplierliabilityType,transactionCurrencyID , companyLocalCurrencyID, transactionCurrency,transactionExchangeRate, companyLocalCurrency, bookingInvCode,RefNo,bookingDate,comments,( ( ( ( IFNULL(tax.taxPercentage, 0) / 100 ) * ( IFNULL(sid.transactionAmount, 0) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL(sid.transactionAmount, 0) ) ) ) + IFNULL(sid.transactionAmount, 0) ) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL(sid.transactionAmount, 0) ) ) AS transactionAmount,paymentTotalAmount,DebitNoteTotalAmount,advanceMatchedTotal,companyReportingCurrencyID,supplierCurrencyID');
                    $this->db->from('srp_erp_paysupplierinvoicemaster');
                    $this->db->join('(SELECT invoiceAutoID,IFNULL(SUM( transactionAmount ),0) as transactionAmount FROM srp_erp_paysupplierinvoicedetail GROUP BY invoiceAutoID) sid', 'srp_erp_paysupplierinvoicemaster.invoiceAutoID = sid.invoiceAutoID', 'left');
                    $this->db->join('(SELECT invoiceAutoID,SUM(taxPercentage) as taxPercentage FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY invoiceAutoID) tax', 'tax.invoiceAutoID = srp_erp_paysupplierinvoicemaster.invoiceAutoID', 'left');
                    $this->db->where_in('srp_erp_paysupplierinvoicemaster.InvoiceAutoID', $InvoiceAutoID);
                    $master_recode = $this->db->get()->result_array();
                    $amount = $balance;
                    for ($i = 0; $i < count($master_recode); $i++) {
                        $due_amount = ($master_recode[$i]['transactionAmount'] - ($master_recode[$i]['paymentTotalAmount'] + $master_recode[$i]['DebitNoteTotalAmount'] + $master_recode[$i]['advanceMatchedTotal']));
                        $dataD[$i]['payVoucherAutoId'] = $last_id;
                        $dataD[$i]['InvoiceAutoID'] = $master_recode[$i]['InvoiceAutoID'];
                        $dataD[$i]['type'] = 'Invoice';
                        $dataD[$i]['bookingInvCode'] = $master_recode[$i]['bookingInvCode'];
                        $dataD[$i]['referenceNo'] = $master_recode[$i]['RefNo'];
                        $dataD[$i]['bookingDate'] = $master_recode[$i]['bookingDate'];
                        $dataD[$i]['GLAutoID'] = $master_recode[$i]['supplierliabilityAutoID'];
                        $dataD[$i]['systemGLCode'] = $master_recode[$i]['supplierliabilitySystemGLCode'];
                        $dataD[$i]['GLCode'] = $master_recode[$i]['supplierliabilityGLAccount'];
                        $dataD[$i]['GLDescription'] = $master_recode[$i]['supplierliabilityDescription'];
                        $dataD[$i]['GLType'] = $master_recode[$i]['supplierliabilityType'];
                        $dataD[$i]['description'] = $master_recode[$i]['comments'];
                        $dataD[$i]['Invoice_amount'] = $master_recode[$i]['transactionAmount'];
                        $dataD[$i]['due_amount'] = $due_amount;
                        $dataD[$i]['balance_amount'] = ($dataD[$i]['due_amount'] - round($amount, $master_recode[$i]['transactionCurrencyDecimalPlaces']));
                        $dataD[$i]['transactionCurrencyID'] = $master_recode[$i]['transactionCurrencyID'];
                        $dataD[$i]['transactionCurrency'] = $master_recode[$i]['transactionCurrency'];
                        $dataD[$i]['transactionExchangeRate'] = $master_recode[$i]['transactionExchangeRate'];
                        $dataD[$i]['transactionAmount'] = round($amount, $master_recode[$i]['transactionCurrencyDecimalPlaces']);
                        $dataD[$i]['companyLocalCurrencyID'] = $master_recode[$i]['companyLocalCurrencyID'];
                        $dataD[$i]['companyLocalCurrency'] = $master_recode[$i]['companyLocalCurrency'];
                        $dataD[$i]['companyLocalExchangeRate'] = $master_recode[$i]['companyLocalExchangeRate'];
                        $dataD[$i]['companyLocalAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['companyLocalExchangeRate']);
                        $dataD[$i]['companyReportingCurrencyID'] = $master_recode[$i]['companyReportingCurrencyID'];
                        $dataD[$i]['companyReportingCurrency'] = $master_recode[$i]['companyReportingCurrency'];
                        $dataD[$i]['companyReportingExchangeRate'] = $master_recode[$i]['companyReportingExchangeRate'];
                        $dataD[$i]['companyReportingAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['companyReportingExchangeRate']);
                        $dataD[$i]['partyCurrencyID'] = $master_recode[$i]['supplierCurrencyID'];
                        $dataD[$i]['partyCurrency'] = $master_recode[$i]['supplierCurrency'];
                        $dataD[$i]['partyExchangeRate'] = $master_recode[$i]['supplierCurrencyExchangeRate'];
                        $dataD[$i]['partyAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['supplierCurrencyExchangeRate']);
                        $dataD[$i]['companyCode'] = current_companyCode();
                        $dataD[$i]['companyID'] = current_companyID();
                        $dataD[$i]['modifiedPCID'] = current_pc();
                        $dataD[$i]['modifiedUserID'] = current_userID();
                        $dataD[$i]['modifiedUserName'] = current_user();
                        $dataD[$i]['modifiedDateTime'] = current_date();
                        $dataD[$i]['createdUserGroup'] = current_user_group();
                        $dataD[$i]['createdPCID'] = current_pc();
                        $dataD[$i]['createdUserID'] = current_userID();
                        $dataD[$i]['createdUserName'] = current_user();
                        $dataD[$i]['createdDateTime'] = current_date();

                        $grv_m[$i]['InvoiceAutoID'] = $InvoiceAutoID;
                        $grv_m[$i]['paymentTotalAmount'] = ($master_recode[$i]['paymentTotalAmount'] + $amount);
                        $grv_m[$i]['paymentInvoiceYN'] = 0;
                        if ($dataD[$i]['balance_amount'] <= 0) {
                            $grv_m[$i]['paymentInvoiceYN'] = 1;
                        }
                    }
                    $data_up_settlement['settlementTotal'] = $settlementAmount;
                    $this->db->where('payVoucherAutoId', $payVoucherAutoId);
                    $this->db->update('srp_erp_paymentvouchermaster', $data_up_settlement);

                    if (!empty($dataD)) {
                        $this->db->update_batch('srp_erp_paysupplierinvoicemaster', $grv_m, 'InvoiceAutoID');
                        $this->db->insert_batch('srp_erp_paymentvoucherdetail', $dataD);

                        $confirmPV = $this->confirm_payment_voucher($last_id);
                        return array('s', 'Payment Voucher Saved Successfully.',$last_id);
                    } else {
                        $this->db->delete('srp_erp_paymentvouchermaster',array('payVoucherAutoId' => trim($last_id)));
                        return array('e', 'Payment voucher not Created');
                    }

                }else{
                    $this->db->delete('srp_erp_paymentvouchermaster',array('payVoucherAutoId' => trim($last_id)));
                    return array('e', 'Balance amount should be greater than zero');
                }
            }else {
                return array('e', 'Failed to create Payment Voucher!');
            }
        }else{
            return array('e', 'Payment voucher date should be greater than or equal to invoice date');
        }
    }

    function supp_bank_drop()
    {
        $data = array();
        $invoiceAutoID = $this->input->get('InvoiceAutoID');
        $supplierID = $this->input->get('supplierID');

        if(!empty($invoiceAutoID))
        {
            $date_format_policy = date_format_policy();
            $PVdate = input_format_date(current_date(), $date_format_policy);

            $this->db->select('transactionCurrencyID, supplierID, transactionCurrencyID, transactionCurrency, transactionCurrencyDecimalPlaces');
            $this->db->from('srp_erp_paysupplierinvoicemaster');
            $this->db->where('InvoiceAutoID', $invoiceAutoID);
            $invoice = $this->db->get()->row_array();

            $supplierID = $invoice['supplierID'];
            $currencyID = $invoice['transactionCurrencyID'];

            $dataw = $this->db->query("SELECT srp_erp_paysupplierinvoicemaster.InvoiceAutoID, bookingInvCode, paymentTotalAmount, advanceMatchedTotal, DebitNoteTotalAmount, RefNo, ( ( ( ( IFNULL( addondet.taxPercentage, 0 ) / 100 ) * ( IFNULL( det.transactionAmount, 0 ) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL( det.transactionAmount, 0 ) ) ) ) + IFNULL( det.transactionAmount, 0 ) ) - ( ( IFNULL( generalDiscountPercentage, 0 ) / 100 ) * IFNULL( det.transactionAmount, 0 ) ) ) AS transactionAmount, bookingDate FROM srp_erp_paysupplierinvoicemaster LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, InvoiceAutoID FROM srp_erp_paysupplierinvoicedetail GROUP BY InvoiceAutoID ) det ON ( `det`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID ) LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_paysupplierinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_paysupplierinvoicemaster.InvoiceAutoID ) LEFT JOIN `srp_erp_suppliermaster` ON `srp_erp_suppliermaster`.`supplierAutoID` = `srp_erp_paysupplierinvoicemaster`.`supplierID` WHERE confirmedYN = 1 AND approvedYN = 1 AND `supplierID` = '$supplierID' AND `transactionCurrencyID` = '$currencyID' AND bookingDate <= '$PVdate' AND srp_erp_paysupplierinvoicemaster.InvoiceAutoID = $invoiceAutoID ")->row_array();
            $balance = $dataw['transactionAmount'] - ($dataw['paymentTotalAmount'] + $dataw['DebitNoteTotalAmount'] + $dataw['advanceMatchedTotal']);

            $data['Invoice_balance'] = (double)$balance;
            $data['Currency']['currencyID'] = (int)$invoice['transactionCurrencyID'];
            $data['Currency']['CurrencyCode'] = $invoice['transactionCurrency'];
            $data['Currency']['currencyDecimalPlaces'] = (int)$invoice['transactionCurrencyDecimalPlaces'];
        }

        $data['bank'] = array();
        $bank_acc = company_bank_account_drop(1);

        if($bank_acc) {
            foreach ($bank_acc as $key => $bank)
            {
                $bank_acc[$key]['GLAutoID'] = (int)$bank['GLAutoID'];
                $bank_acc[$key]['isCash'] = (int)$bank['isCash'];

                $this->load->model('Chart_of_acconts_model');
                $_POST['GLAutoID'] = $bank['GLAutoID'];
                $chequeNo = $this->fetch_cheque_number();

                $chequeNo['master']['bankCheckNumber'] = (int)$chequeNo['master']['bankCheckNumber'];
                $chequeNo['master']['isCash'] = (int)$chequeNo['master']['isCash'];

                foreach ($chequeNo['detail'] as $key2 => $row) {
                    $chequeNo['detail'][$key2]['chequeRegisterDetailID'] = (int)$row['chequeRegisterDetailID'];
                    $chequeNo['detail'][$key2]['chequeNo'] = (int)$row['chequeNo'];
                }
                $bank_acc[$key]['cheque_details'] = $chequeNo;
            }
        }
        $data['bank'] = $bank_acc;

        if (!empty($invoiceAutoID) || !empty($supplierID))
        {
            $companyID = current_companyID();
            $supplierCurrencyID = $this->db->query("SELECT supplierCurrencyID FROM srp_erp_suppliermaster WHERE supplierAutoID = {$supplierID} AND companyID = {$companyID}")->row('supplierCurrencyID');
            $data['supplierCurrencyID'] = (int)$supplierCurrencyID;

            $this->db->select('supplierBankMasterID,bankName');
            $this->db->where('supplierAutoID', $supplierID);
            $this->db->where('companyID', $companyID);
            $this->db->from('srp_erp_supplierbankmaster');
            $suppBank = $this->db->get()->result_array();
            foreach ($suppBank as $key3 => $row) {
                $suppBank[$key3]['supplierBankMasterID'] = (int)$row['supplierBankMasterID'];
            }

            $data['supplier_banks'] = $suppBank;
        }

        $data['chequeRegistryPolicy'] = (int)getPolicyValues('CRE', 'All');

        return $data;
    }

    function fetch_cheque_number(){
        $chequeRegisterDetailID = $this->input->post('chequeRegisterDetailID');
        $comapnyID = current_companyID();
        $GLAutoID = $this->input->post('GLAutoID');
        $documentID_filter = '';
        if(($chequeRegisterDetailID!='')&&!empty($chequeRegisterDetailID))
        {
            $documentID_filter = " or ( chequeRegisterDetailID = $chequeRegisterDetailID ) ";
        }
        $this->db->select('bankCheckNumber,isCash');
        $this->db->where('GLAutoID', $this->input->post('GLAutoID'));
        $master= $this->db->get('srp_erp_chartofaccounts')->row_array();

        $detail = $this->db->query("SELECT chequeRegisterDetailID,chequeNo,srp_erp_chequeregister.description FROM `srp_erp_chequeregisterdetails`
                                         LEFT JOIN srp_erp_chequeregister ON srp_erp_chequeregister.chequeRegisterID = srp_erp_chequeregisterdetails.chequeRegisterID
                                         WHERE srp_erp_chequeregisterdetails.companyID =$comapnyID
                                         AND (srp_erp_chequeregisterdetails.status != 2 AND (srp_erp_chequeregisterdetails.STATUS != 1 $documentID_filter) )
                                         AND srp_erp_chequeregister.bankGLAutoID =$GLAutoID ")->result_array();

        $data['master'] = $master;
        $data['detail'] = $detail;

        return $data;
    }

    function save_paymentVoucher_header()
    {
        $payVoucherAutoID = $this->input->post('payVoucherAutoID');
        $date_format_policy = date_format_policy();
        $PaymentVoucherdate = $this->input->post('pvDate');
        $PVdate = input_format_date($PaymentVoucherdate, $date_format_policy);
        $PVcheqDate = $this->input->post('PVchequeDate');
        $PVchequeDate = input_format_date($PVcheqDate, $date_format_policy);
        $voucherType = $this->input->post('type');
        $segmentID = $this->input->post('segmentID');
        $referenceNo = $this->input->post('referenceNo');
        $partyID = $this->input->post('partyID');
        $payeeID = $this->input->post('payeeID');
        $payeeName = $this->input->post('payeeName');
        $currencyID = $this->input->post('currencyID');
        $PVbankCode = $this->input->post('PVbankCode');
        $paymentType = $this->input->post('paymentType');
        $supplierBankMasterID = $this->input->post('supplierBankMasterID');
        $chequeRegisterDetailID = $this->input->post('chequeRegisterDetailID');
        $PVchequeNo = $this->input->post('PVchequeNo');
        $narration = ($this->input->post('narration'));
        $bankTransferDetails = $this->input->post('bankTransferDetails');
        $accountPayeeOnly = 0;
        if (!empty($this->input->post('accountPayeeOnly'))) {
            $accountPayeeOnly = 1;
        }

        $financeYearDetails = get_financial_year($PVdate);
        if (empty($financeYearDetails)) {
            return array('e', 'Finance period not found for the selected document date');
        } else {
            $FYBegin = $financeYearDetails['beginingDate'];
            $FYEnd = $financeYearDetails['endingDate'];
            $_POST['companyFinanceYear'] = $FYBegin . ' - ' . $FYEnd;
            $_POST['financeyear'] = $financeYearDetails['companyFinanceYearID'];
        }
        $financePeriodDetails = get_financial_period_date_wise($PVdate);

        if (empty($financePeriodDetails)) {
            return array('e', 'Finance period not found for the selected document date');
        } else {
            $_POST['financeyear_period'] = $financePeriodDetails['companyFinancePeriodID'];
        }

        $chequeRegister = getPolicyValues('CRE', 'All');
        $data['PVbankCode'] = trim($PVbankCode);
        $bank_detail = fetch_gl_account_desc($data['PVbankCode']);
        $data['documentID'] = 'PV';
        $data['companyFinanceYearID'] = trim($this->input->post('financeyear') ?? '');
        $data['companyFinanceYear'] = trim($this->input->post('companyFinanceYear') ?? '');
        $data['FYBegin'] = trim($FYBegin);
        $data['FYEnd'] = trim($FYEnd);
        $data['companyFinancePeriodID'] = trim($this->input->post('financeyear_period') ?? '');
        $data['PVdate'] = trim($PVdate);
        $data['PVNarration'] = str_replace('<br />', PHP_EOL, $narration);
        $data['accountPayeeOnly'] = $accountPayeeOnly;

        $data['segmentID'] = trim($segmentID);
        $segmentCode = $this->db->query("SELECT segmentCode FROM srp_erp_segment WHERE segmentID = {$segmentID}")->row('segmentCode');
        $data['segmentCode'] = trim($segmentCode);
        $data['bankGLAutoID'] = $bank_detail['GLAutoID'];
        $data['bankSystemAccountCode'] = $bank_detail['systemAccountCode'];
        $data['bankGLSecondaryCode'] = $bank_detail['GLSecondaryCode'];
        $data['bankCurrencyID'] = $bank_detail['bankCurrencyID'];
        $data['bankCurrency'] = $bank_detail['bankCurrencyCode'];
        $data['PVbank'] = $bank_detail['bankName'];
        $data['PVbankBranch'] = $bank_detail['bankBranch'];
        $data['PVbankSwiftCode'] = $bank_detail['bankSwiftCode'];
        $data['PVbankAccount'] = $bank_detail['bankAccountNumber'];
        $data['PVbankType'] = $bank_detail['subCategory'];

        $data['paymentType'] = $paymentType;
        $data['supplierBankMasterID'] = $supplierBankMasterID;
        if($PVcheqDate == null)
        {
            $data['PVchequeDate'] = null;
        }
        if ($bank_detail['isCash'] == 1) {
            $data['PVchequeNo'] = null;
            $data['chequeRegisterDetailID'] = null;
            $data['PVchequeDate'] = null;
        } else {
            if ($paymentType == 2 && (($voucherType == 'Supplier') || ($voucherType == 'SupplierAdvance') || ($voucherType == 'SupplierDebitNote') || ($voucherType == 'SupplierInvoice') || ($voucherType == 'SupplierItem') || ($voucherType == 'SupplierExpense') || ($voucherType == 'Direct') || ($voucherType == 'DirectItem') || ($voucherType == 'DirectExpense') || ($voucherType == 'Employee') || ($voucherType == 'EmployeeExpense') || ($voucherType == 'EmployeeItem') || ($voucherType == 'PurchaseRequest'))) {
                $data['PVchequeNo'] = null;
                $data['chequeRegisterDetailID'] = null;
                $data['PVchequeDate'] = null;
            } else {
                if($chequeRegister==1) {
                    $data['chequeRegisterDetailID'] = trim($this->input->post('chequeRegisterDetailID') ?? '');

                    $this->db->select('chequeNo');
                    $this->db->where('chequeRegisterDetailID', $chequeRegisterDetailID);
                    $this->db->from('srp_erp_chequeregisterdetails');
                    $resultCq= $this->db->get()->row_array();
                    $data['PVchequeNo'] = $resultCq['chequeNo'];
                }else{
                    $data['PVchequeNo'] = trim($PVchequeNo);
                    $data['chequeRegisterDetailID'] = null;
                }
                $data['PVchequeDate'] = trim($PVchequeDate);
            }
        }
        $data['modeOfPayment'] = ($bank_detail['isCash'] == 1 ? 1 : 2);
        $data['pvType'] = trim($voucherType);
        $data['bankTransferDetails'] = trim($bankTransferDetails);
        $data['referenceNo'] = trim_desc($referenceNo);
        $data['modifiedPCID'] = current_pc();
        $data['modifiedUserID'] = current_userID();
        $data['modifiedUserName'] = current_user();
        $data['modifiedDateTime'] = current_date();
        $data['transactionCurrencyID'] = trim($currencyID);
        $transCurrencyCode = fetch_currency_code($currencyID);
        $data['transactionCurrency'] = trim($transCurrencyCode);
        $data['transactionExchangeRate'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = current_company_default_currencyID();
        $data['companyLocalCurrency'] = fetch_currency_code($data['companyLocalCurrencyID']);
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalExchangeRate'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrencyID'] = current_company_reporting_currencyID();
        $data['companyReportingCurrency'] = fetch_currency_code($data['companyReportingCurrencyID']);
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $bank_currency = currency_conversionID($data['transactionCurrencyID'], $data['bankCurrencyID']);
        $data['bankCurrencyExchangeRate'] = $bank_currency['conversion'];
        $data['bankCurrencyDecimalPlaces'] = $bank_currency['DecimalPlaces'];

        if ($data['pvType'] == 'Direct' || $data['pvType'] == 'DirectItem' || $data['pvType'] == 'DirectExpense') {
            $data['partyType'] = 'DIR';
            $data['partyName'] = trim($payeeName);
            $data['partyCurrencyID'] = $data['companyLocalCurrencyID'];
            $data['partyCurrency'] = $data['companyLocalCurrency'];
            $data['partyExchangeRate'] = $data['transactionExchangeRate'];
            $data['partyCurrencyDecimalPlaces'] = $data['transactionCurrencyDecimalPlaces'];
        }elseif ($data['pvType'] == 'PurchaseRequest') {
            $data['partyType'] = 'PRQ';
            $data['partyName'] = trim($payeeName);
            $data['partyID'] = trim($payeeID);
            $data['partyCurrencyID'] = $data['companyLocalCurrencyID'];
            $data['partyCurrency'] = $data['companyLocalCurrency'];
            $data['partyExchangeRate'] = $data['transactionExchangeRate'];
            $data['partyCurrencyDecimalPlaces'] = $data['transactionCurrencyDecimalPlaces'];
            if(!empty($partyID)){
                $this->db->select('*');
                $this->db->from('srp_erp_suppliermaster');
                $this->db->where('supplierAutoID', $partyID);
                $supplier_arr = $this->db->get()->row_array();

                $data['partyCode'] = $supplier_arr['supplierSystemCode'];
                $data['partyName'] = $supplier_arr['supplierName'];
                $data['partyAddress'] = $supplier_arr['supplierAddress1'] . ' ' . $supplier_arr['supplierAddress2'];
                $data['partyTelephone'] = $supplier_arr['supplierTelephone'];
                $data['partyFax'] = $supplier_arr['supplierFax'];
                $data['partyEmail'] = $supplier_arr['supplierEmail'];
                $data['partyGLAutoID'] = $supplier_arr['liabilityAutoID'];
                $data['partyGLCode'] = $supplier_arr['liabilitySystemGLCode'];
                $data['partyCurrencyID'] = $supplier_arr['supplierCurrencyID'];
                $data['partyCurrency'] = $supplier_arr['supplierCurrency'];
                $data['partyExchangeRate'] = $data['transactionExchangeRate'];
                $data['partyCurrencyDecimalPlaces'] = $supplier_arr['supplierCurrencyDecimalPlaces'];
            }

        } elseif ($data['pvType'] == 'Employee' || $data['pvType'] == 'EmployeeExpense' || $data['pvType'] == 'EmployeeItem') {

            $this->db->select('Ename1,Ename2,Ename3,Ename4,ECode,EIdNo,EcAddress1,EcAddress2,EcAddress3,EpTelephone,EpFax,EEmail');
            $this->db->where('EIdNo', $partyID);
            $this->db->from('srp_employeesdetails');
            $emp_arr = $this->db->get()->row_array();

            $data['partyType'] = 'EMP';
            $data['partyID'] = trim($partyID);
            $data['partyCode'] = $emp_arr['ECode'];
            $data['partyName'] = $emp_arr['Ename2'];
            $data['partyAddress'] = $emp_arr['EcAddress1'] . ' ' . $emp_arr['EcAddress2'] . ' ' . $emp_arr['EcAddress3'];
            $data['partyTelephone'] = $emp_arr['EpTelephone'];
            $data['partyFax'] = $emp_arr['EpFax'];
            $data['partyEmail'] = $emp_arr['EEmail'];
            $data['partyGLAutoID'] = '';
            $data['partyGLCode'] = '';
            $data['partyCurrencyID'] = $data['companyLocalCurrencyID'];
            $data['partyCurrency'] = $data['companyLocalCurrency'];
            $data['partyExchangeRate'] = $data['transactionExchangeRate'];
            $data['partyCurrencyDecimalPlaces'] = $data['transactionCurrencyDecimalPlaces'];
        } elseif ($data['pvType'] == 'Supplier' || $data['pvType'] == 'SupplierAdvance' || $data['pvType'] == 'SupplierDebitNote' || $data['pvType'] == 'SupplierInvoice' || $data['pvType'] == 'SupplierItem' || $data['pvType'] == 'SupplierExpense') {
            $this->db->select('*');
            $this->db->from('srp_erp_suppliermaster');
            $this->db->where('supplierAutoID', $partyID);
            $supplier_arr = $this->db->get()->row_array();

            $data['partyType'] = 'SUP';
            $data['partyID'] = $partyID;
            $data['partyCode'] = $supplier_arr['supplierSystemCode'];
            $data['partyName'] = $supplier_arr['supplierName'];
            $data['partyAddress'] = $supplier_arr['supplierAddress1'] . ' ' . $supplier_arr['supplierAddress2'];
            $data['partyTelephone'] = $supplier_arr['supplierTelephone'];
            $data['partyFax'] = $supplier_arr['supplierFax'];
            $data['partyEmail'] = $supplier_arr['supplierEmail'];
            $data['partyGLAutoID'] = $supplier_arr['liabilityAutoID'];
            $data['partyGLCode'] = $supplier_arr['liabilitySystemGLCode'];
            $data['partyCurrencyID'] = $supplier_arr['supplierCurrencyID'];
            $data['partyCurrency'] = $supplier_arr['supplierCurrency'];
            $data['partyExchangeRate'] = $data['transactionExchangeRate'];
            $data['partyCurrencyDecimalPlaces'] = $supplier_arr['supplierCurrencyDecimalPlaces'];
        } elseif ($data['pvType'] == 'SC') {
            $this->db->select('*');
            $this->db->from('srp_erp_salespersonmaster');
            $this->db->where('salesPersonID', $partyID);
            $sales_rep = $this->db->get()->row_array();

            $data['partyType'] = 'SC';
            $data['partyID'] = $partyID;
            $data['partyCode'] = $sales_rep['SalesPersonCode'];
            $data['partyName'] = $sales_rep['SalesPersonName'];
            $data['partyAddress'] = $sales_rep['SalesPersonAddress'];
            $data['partyTelephone'] = $sales_rep['contactNumber'];
            $data['partyEmail'] = $sales_rep['SalesPersonEmail'];
            $data['partyGLAutoID'] = $sales_rep['receivableAutoID'];
            $data['partyGLCode'] = $sales_rep['receivableSystemGLCode'];
            $data['partyCurrencyID'] = $sales_rep['salesPersonCurrencyID'];
            $data['partyCurrency'] = $sales_rep['salesPersonCurrency'];
            $data['partyExchangeRate'] = 0;
            $data['partyCurrencyDecimalPlaces'] = $sales_rep['salesPersonCurrencyDecimalPlaces'];
        }
        $partyCurrency = currency_conversionID($data['transactionCurrencyID'], $data['partyCurrencyID']);
        $data['partyExchangeRate'] = $partyCurrency['conversion'];
        $data['partyCurrencyDecimalPlaces'] = $partyCurrency['DecimalPlaces'];

        if (trim($payVoucherAutoID)) {
            $this->db->where('payVoucherAutoId', trim($payVoucherAutoID));
            $this->db->update('srp_erp_paymentvouchermaster', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Payment Voucher Update Failed ' . $this->db->_error_message());
            } else {
                update_warehouse_items();
                update_item_master();
                if(!empty($data['chequeRegisterDetailID'])){
                    $this->load->model('Payment_voucher_model');
                    $this->Payment_voucher_model->update_cheque_detail($data['chequeRegisterDetailID'],$payVoucherAutoID);
                }
                $this->db->trans_commit();
                $paymentDet = $this->fetch_payment_voucher_header($payVoucherAutoID);
                return array('s', 'Payment Voucher Updated Successfully.', $paymentDet);
            }
        } else {
            $this->db->where('GLAutoID', $data['bankGLAutoID']);
            $this->db->update('srp_erp_chartofaccounts', array('bankCheckNumber' => $data['PVchequeNo']));

            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $type = substr($data['pvType'], 0, 3);
            $data['PVcode'] = 0;
            $this->db->insert('srp_erp_paymentvouchermaster', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Payment Voucher   Saved Failed ' . $this->db->_error_message());
            } else {
                update_warehouse_items();
                update_item_master();
                if(!empty($data['chequeRegisterDetailID'])){
                    $this->load->model('Payment_voucher_model');
                    $this->Payment_voucher_model->update_cheque_detail($data['chequeRegisterDetailID'],$last_id);
                }
                $this->db->trans_commit();
                $paymentDet = $this->fetch_payment_voucher_header($last_id);
                return array('s', 'Payment Voucher Saved Successfully.', $paymentDet);
            }
        }
    }

    function add_payment_voucher_item()
    {
        $this->db->trans_start();
        $payVoucherAutoId = $this->input->post('payVoucherAutoID');
        $payVoucherDetailAutoID = $this->input->post('payVoucherDetailAutoID');
        $itemAutoID = $this->input->post('itemAutoID');
        $wareHouseAutoID = $this->input->post('wareHouseAutoID');
        $UnitOfMeasureID = $this->input->post('UnitOfMeasureID');
        $SUOMID = $this->input->post('SUOMID');
        $SUOMQty = $this->input->post('SUOMQty');
        $quantityRequested = $this->input->post('quantityRequested');
        $estimatedAmount = $this->input->post('estimatedAmount');
        $comment = $this->input->post('comment');

        $this->db->select('transactionCurrencyID,transactionCurrency, transactionExchangeRate, companyLocalCurrency, companyLocalCurrency,companyLocalExchangeRate, companyReportingCurrency ,companyReportingExchangeRate ,partyCurrency,partyExchangeRate,companyReportingCurrencyID,partyCurrencyID,segmentCode,segmentID,companyLocalCurrencyID');
        $this->db->where('payVoucherAutoId', trim($payVoucherAutoId));
        $master_recode = $this->db->get('srp_erp_paymentvouchermaster')->row_array();

        $this->db->select('GLAutoID');
        $this->db->where('controlAccountType', 'ACA');
        $this->db->where('companyID', current_companyID());
        $ACA_ID = $this->db->get('srp_erp_companycontrolaccounts')->row_array();
        $ACA = fetch_gl_account_desc($ACA_ID['GLAutoID']);

        $this->db->select('mainCategory');
        $this->db->from('srp_erp_itemmaster');
        $this->db->where('itemAutoID', $itemAutoID);
        $serviceitm= $this->db->get()->row_array();

        $data['payVoucherAutoId'] = trim($payVoucherAutoId);
        $wareHouse_location = $this->warehouse_details($wareHouseAutoID);
        $item_arr = fetch_item_data($itemAutoID);
        $data['itemAutoID'] = $itemAutoID;
        $data['itemSystemCode'] = $item_arr['itemSystemCode'];
        $data['itemDescription'] = $item_arr['itemDescription'];

        $uomEx = $this->unit_of_measure_details($UnitOfMeasureID);
        $data['unitOfMeasure'] = trim($uomEx['UnitShortCode'] ?? '');
        $data['unitOfMeasureID'] = $UnitOfMeasureID;
        $data['defaultUOM'] = $item_arr['defaultUnitOfMeasure'];
        $data['defaultUOMID'] = $item_arr['defaultUnitOfMeasureID'];
        $data['SUOMID'] = $SUOMID;
        $data['SUOMQty'] = $SUOMQty;
        $data['conversionRateUOM'] = conversionRateUOM_id($data['unitOfMeasureID'], $data['defaultUOMID']);
        $data['requestedQty'] = $quantityRequested;
        $data['unittransactionAmount'] = $estimatedAmount;
        $data['segmentID'] = $master_recode['segmentID'];
        $data['segmentCode'] = $master_recode['segmentCode'];
        $data['transactionCurrencyID'] = $master_recode['transactionCurrencyID'];
        $data['transactionCurrency'] = $master_recode['transactionCurrency'];
        $data['transactionExchangeRate'] = $master_recode['transactionExchangeRate'];
        $data['transactionAmount'] = ($data['unittransactionAmount'] * $data['requestedQty']);
        $data['companyLocalCurrencyID'] = $master_recode['companyLocalCurrencyID'];
        $data['companyLocalCurrency'] = $master_recode['companyLocalCurrency'];
        $data['companyLocalExchangeRate'] = $master_recode['companyLocalExchangeRate'];
        $data['unitcompanyLocalAmount'] = ($data['unittransactionAmount'] / $master_recode['companyLocalExchangeRate']);
        $data['companyLocalAmount'] = ($data['transactionAmount'] / $master_recode['companyLocalExchangeRate']);
        $data['companyReportingCurrencyID'] = $master_recode['companyReportingCurrencyID'];
        $data['companyReportingCurrency'] = $master_recode['companyReportingCurrency'];
        $data['companyReportingExchangeRate'] = $master_recode['companyReportingExchangeRate'];
        $data['unitcompanyReportingAmount'] = ($data['unittransactionAmount'] / $master_recode['companyReportingExchangeRate']);
        $data['companyReportingAmount'] = ($data['transactionAmount'] / $master_recode['companyReportingExchangeRate']);
        $data['partyCurrency'] = $master_recode['partyCurrency'];
        $data['partyCurrencyID'] = $master_recode['partyCurrencyID'];
        $data['partyExchangeRate'] = $master_recode['partyExchangeRate'];
        $data['unitpartyAmount'] = ($data['unittransactionAmount'] / $master_recode['partyExchangeRate']);
        $data['partyAmount'] = ($data['transactionAmount'] / $master_recode['partyExchangeRate']);
        $data['comment'] = $comment;
        $data['remarks'] = '';
        $data['type'] = 'Item';
        $data['wareHouseAutoID'] = $wareHouseAutoID;
        $data['wareHouseCode'] = trim($wareHouse_location['wareHouseCode'] ?? '');
        $data['wareHouseLocation'] = trim($wareHouse_location['wareHouseLocation'] ?? '');
        $data['wareHouseDescription'] = trim($wareHouse_location['wareHouseDescription'] ?? '');
        $item_data = fetch_item_data($data['itemAutoID']);
        if ($item_data['mainCategory'] == 'Inventory') {
            $data['GLAutoID'] = $item_data['assteGLAutoID'];
            $data['systemGLCode'] = $item_data['assteSystemGLCode'];
            $data['GLCode'] = $item_data['assteGLCode'];
            $data['GLDescription'] = $item_data['assteDescription'];
            $data['GLType'] = $item_data['assteType'];
        } else if ($item_data['mainCategory'] == 'Fixed Assets') {
            $data['GLAutoID'] = $ACA_ID['GLAutoID'];
            $data['systemGLCode'] = $ACA['systemAccountCode'];
            $data['GLCode'] = $ACA['GLSecondaryCode'];
            $data['GLDescription'] = $ACA['GLDescription'];
            $data['GLType'] = $ACA['subCategory'];
        } else {
            $data['GLAutoID'] = $item_data['costGLAutoID'];
            $data['systemGLCode'] = $item_data['costSystemGLCode'];
            $data['GLCode'] = $item_data['costGLCode'];
            $data['GLDescription'] = $item_data['costDescription'];
            $data['GLType'] = $item_data['costType'];
        }

        if (!trim($payVoucherDetailAutoID)) {
            /*if($serviceitm['mainCategory']=="Inventory") {
                $this->db->select('itemDescription,itemSystemCode');
                $this->db->from('srp_erp_paymentvoucherdetail');
                $this->db->where('payVoucherAutoId', trim($payVoucherAutoId));
                $this->db->where('itemAutoID', $itemAutoID);
                $this->db->where('wareHouseAutoID', $wareHouseAutoID);
                $order_detail = $this->db->get()->row_array();
                if (!empty($order_detail)) {
                    return array('w', 'Payment Voucher Detail : ' . $order_detail['itemSystemCode'] . ' ' . $order_detail['itemDescription'] . '  already exists . ');
                }
            }*/

            $data['companyID'] = current_companyID();
            $data['companyCode'] = current_companyCode();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $this->db->insert('srp_erp_paymentvoucherdetail', $data);
            $last_id = $this->db->insert_id();

            /** add sub item config*/
            if ($item_data['isSubitemExist'] == 1) {
                $subData['uom'] = $data['unitOfMeasure'];
                $subData['uomID'] = $data['unitOfMeasureID'];
                $subData['pv_detailID'] = $last_id;
                $this->load->model('Payment_voucher_model');
                $this->Payment_voucher_model->add_sub_itemMaster_tmpTbl($quantityRequested, $itemAutoID, $payVoucherAutoId, $last_id, 'PV', $item_data['itemSystemCode'], $subData, $wareHouseAutoID);
            }

            /** End add sub item config*/

            $this->db->select('itemAutoID');
            $this->db->where('itemAutoID', $itemAutoID);
            $this->db->where('wareHouseAutoID', $data['wareHouseAutoID']);
            $this->db->where('companyID', current_companyID());
            $warehouseitems = $this->db->get('srp_erp_warehouseitems')->row_array();
            if (empty($warehouseitems)) {
                $data_arr = array(
                    'wareHouseAutoID' => $data['wareHouseAutoID'],
                    'wareHouseLocation' => $data['wareHouseLocation'],
                    'wareHouseDescription' => $data['wareHouseDescription'],
                    'itemAutoID' => $data['itemAutoID'],
                    'itemSystemCode' => $data['itemSystemCode'],
                    'barCodeNo' => $item_data['barcode'],
                    'salesPrice' => $item_data['companyLocalSellingPrice'],
                    'ActiveYN' => $item_data['isActive'],
                    'itemDescription' => $data['itemDescription'],
                    'unitOfMeasureID' => $data['defaultUOMID'],
                    'unitOfMeasure' => $data['defaultUOM'],
                    'currentStock' => 0,
                    'companyID' => current_companyID(),
                    'companyCode' => current_companyCode(),
                );
                $this->db->insert('srp_erp_warehouseitems', $data_arr);
            }


            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Payment Voucher Details :  Save Failed ' . $this->db->_error_message());
            } else {
                $view = $this->fetch_payment_voucher_item($payVoucherAutoId, $last_id);
                $this->db->trans_commit();
                return array('s', 'Payment Voucher Details : Saved Successfully.', $view);
            }
        } else {
            /*$this->db->select('itemDescription,itemSystemCode');
            $this->db->from('srp_erp_paymentvoucherdetail');
            $this->db->where('payVoucherAutoId', trim($payVoucherAutoId));
            $this->db->where('itemAutoID', trim($itemAutoID));
            $this->db->where('wareHouseAutoID', $wareHouseAutoID);
            $this->db->where('payVoucherDetailAutoID != ', $payVoucherDetailAutoID);
            $order_detail = $this->db->get()->row_array();
            if (!empty($order_detail)) {
                return array('w', 'Payment Voucher Detail : ' . $order_detail['itemSystemCode'] . ' ' . $order_detail['itemDescription'] . '  already exists . ');
            }*/

            /** update sub item master */
            $subData['uom'] = $data['unitOfMeasure'];
            $subData['uomID'] = $data['unitOfMeasureID'];
            $subData['payVoucherDetailAutoID'] = $payVoucherDetailAutoID;

            $this->load->model('Payment_voucher_model');
            $this->Payment_voucher_model->edit_sub_itemMaster_tmpTbl($this->input->post('quantityRequested'), $item_data['itemAutoID'], $data['payVoucherAutoId'], $payVoucherDetailAutoID, 'PV', $data['itemSystemCode'], $subData);

            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedUserName'] = current_user();
            $data['modifiedDateTime'] = current_date();
            $this->db->where('payVoucherDetailAutoID', $payVoucherDetailAutoID);
            $this->db->update('srp_erp_paymentvoucherdetail', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Payment Voucher Detail : ' . $data['itemSystemCode'] . ' Update Failed ' . $this->db->_error_message());
            } else {
                $view = $this->fetch_payment_voucher_item($payVoucherAutoId, $payVoucherDetailAutoID);
                $this->db->trans_commit();
                return array('s', 'Payment Voucher Detail : ' . $data['itemSystemCode'] . ' Updated Successfully .', $view);
            }
        }
    }

    function warehouse_details($wareHouseAutoID)
    {
        $this->db->SELECT("*");
        $this->db->FROM('srp_erp_warehousemaster');
        $this->db->WHERE('wareHouseAutoID', $wareHouseAutoID);
        $this->db->WHERE('companyID', current_companyID());
        $location = $this->db->get()->row_array();

        return $location;
    }
    function unit_of_measure_details($UnitOfMeasureID)
    {
        $this->db->SELECT("UnitID,UnitDes,UnitShortCode");
        $this->db->FROM('srp_erp_unit_of_measure');
        $this->db->WHERE('companyID', current_companyID());
        $this->db->WHERE('UnitID', $UnitOfMeasureID);
        $units = $this->db->get()->row_array();

        return $units;
    }

    function add_payment_voucher_tax()
    {
        $payVoucherAutoId = $this->input->post('payVoucherAutoID');
        $text_type = $this->input->post('text_type');
        $percentage = $this->input->post('percentage');
        $tax_amount = $this->input->post('tax_amount');
        $taxDetailAutoID = $this->input->post('taxDetailAutoID');

        $this->db->select('taxMasterAutoID');
        $this->db->where('payVoucherAutoId', $payVoucherAutoId);
        $this->db->where('taxMasterAutoID', $text_type);
        $tax_detail = $this->db->get('srp_erp_paymentvouchertaxdetails')->row_array();
        if (!empty($tax_detail)) {
            return array('status' => 0, 'data' => ' Tax Detail added already!');
        }

        $this->db->trans_start();
        $this->db->select('*');
        $this->db->where('taxMasterAutoID', $text_type);
        $this->db->from('srp_erp_taxmaster');
        $master = $this->db->get()->row_array();

        $this->db->select('transactionCurrency,transactionExchangeRate,transactionCurrencyDecimalPlaces ,transactionCurrencyID, companyLocalCurrency, companyLocalExchangeRate,companyLocalCurrencyDecimalPlaces, companyReportingCurrency, companyReportingExchangeRate, companyReportingCurrencyDecimalPlaces,companyLocalCurrencyID, companyReportingCurrencyID');
        $this->db->where('payVoucherAutoId', $payVoucherAutoId);
        $inv_master = $this->db->get('srp_erp_paymentvouchermaster')->row_array();

        $data['payVoucherAutoId'] = trim($payVoucherAutoId);
        $data['taxMasterAutoID'] = $master['taxMasterAutoID'];
        $data['taxDescription'] = $master['taxDescription'];
        $data['taxShortCode'] = $master['taxShortCode'];
        $data['supplierAutoID'] = $master['supplierAutoID'];
        $data['supplierSystemCode'] = $master['supplierSystemCode'];
        $data['supplierName'] = $master['supplierName'];
        $data['supplierCurrencyID'] = $master['supplierCurrencyID'];
        $data['supplierCurrency'] = $master['supplierCurrency'];
        $data['supplierCurrencyDecimalPlaces'] = $master['supplierCurrencyDecimalPlaces'];
        $data['GLAutoID'] = $master['supplierGLAutoID'];
        $data['systemGLCode'] = $master['supplierGLSystemGLCode'];
        $data['GLCode'] = $master['supplierGLAccount'];
        $data['GLDescription'] = $master['supplierGLDescription'];
        $data['GLType'] = $master['supplierGLType'];
        $data['taxPercentage'] = trim($percentage);
        $data['transactionAmount'] = trim($tax_amount);
        $data['transactionCurrencyID'] = $inv_master['transactionCurrencyID'];
        $data['transactionCurrency'] = $inv_master['transactionCurrency'];
        $data['transactionExchangeRate'] = $inv_master['transactionExchangeRate'];
        $data['transactionCurrencyDecimalPlaces'] = $inv_master['transactionCurrencyDecimalPlaces'];
        $data['companyLocalCurrencyID'] = $inv_master['companyLocalCurrencyID'];
        $data['companyLocalCurrency'] = $inv_master['companyLocalCurrency'];
        $data['companyLocalExchangeRate'] = $inv_master['companyLocalExchangeRate'];
        $data['companyReportingCurrencyID'] = $inv_master['companyReportingCurrencyID'];
        $data['companyReportingCurrency'] = $inv_master['companyReportingCurrency'];
        $data['companyReportingExchangeRate'] = $inv_master['companyReportingExchangeRate'];

        $supplierCurrency = currency_conversion($data['transactionCurrency'], $data['supplierCurrency']);
        $data['supplierCurrencyExchangeRate'] = $supplierCurrency['conversion'];
        $data['supplierCurrencyDecimalPlaces'] = $supplierCurrency['DecimalPlaces'];


        if (trim($taxDetailAutoID)) {
            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedUserName'] = current_user();
            $data['modifiedDateTime'] = current_date();
            $this->db->where('taxDetailAutoID', trim($taxDetailAutoID));
            $this->db->update('srp_erp_paymentvouchertaxdetails', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === 0) {
                $this->db->trans_rollback();
                return array('status' => 0, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Update Failed ', 'view' => []);
            } else {
                $viewDet = $this->fetch_payment_voucher_tax($payVoucherAutoId,$taxDetailAutoID);
                $this->db->trans_commit();
                return array('status' => 1, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Updated Successfully.', 'view' => $viewDet);
            }
        } else {
            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] =current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $this->db->insert('srp_erp_paymentvouchertaxdetails', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 0, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Save Failed ', 'view' => []);
            } else {
                $viewDet = $this->fetch_payment_voucher_tax($payVoucherAutoId,$last_id);
                $this->db->trans_commit();
                return array('status' => 1, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Saved Successfully.', 'view' => $viewDet);
            }
        }
    }

    function payment_view_document_view()
    {
        $dataReturn = array();
        $companyID = current_companyID();
        $documentID = $this->input->get('documentID');
        $documentAutoID = $this->input->get('documentAutoID');
        $convertFormat = convert_date_format_sql();
        $query = $this->db->query("SELECT
                                        srp_erp_paymentvouchermaster.payVoucherAutoId AS documentAutoID, accountPayeeOnly AS isPayeeOnly,
                                        CASE
                                            WHEN (srp_erp_paymentvouchermaster.isDeleted = 1) THEN 5
                                            WHEN (srp_erp_paymentvouchermaster.confirmedYN = 3) THEN 4
                                            WHEN (srp_erp_paymentvouchermaster.approvedYN = 1 AND srp_erp_paymentvouchermaster.confirmedYN = 1) THEN 3
                                            WHEN (srp_erp_paymentvouchermaster.approvedYN = 0 AND srp_erp_paymentvouchermaster.confirmedYN = 1) THEN 2
                                            ELSE 1
                                        END status,       
                                        CASE
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'DirectItem') THEN 'Direct Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'DirectExpense') THEN 'Direct Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierAdvance') THEN 'Supplier Advance Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierInvoice') THEN 'Supplier Invoice Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierItem') THEN 'Supplier Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierExpense') THEN 'Supplier Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'EmployeeExpense') THEN 'Employee Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'EmployeeItem') THEN 'Employee Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Direct') THEN 'Direct Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Supplier') THEN 'Supplier Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Employee') THEN 'Employee Payment'
                                            ELSE ''
                                        END documentTypeLabel,       
                                        documentID AS doucmentID,
                                        PVcode AS documentCode,
                                        pvType AS documentType,
                                        PVdate AS documentDate,
                                        partyID AS supplierID,
                                        partyName AS name,
                                        srp_erp_paymentvouchermaster.referenceNo AS referenceNo,
                                        partyAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        transactionCurrencyID AS currencyID,
                                        transactionCurrency AS currency,
                                        transactionCurrencyDecimalPlaces AS decimalPlaces,
                                        currentLevelNo AS level,
                                        DATE_FORMAT(srp_erp_paymentvouchermaster.confirmedDate,'{$convertFormat}') AS confirmedDate,
                                        srp_erp_paymentvouchermaster.confirmedByEmpID AS confirmedEmpID,
                                        srp_erp_paymentvouchermaster.confirmedByName AS confirmedEmpName,
                                        PVNarration AS narration,
                                        paymentType AS paymentType,
                                        PVbankCode AS PVbankCode,
                                        modeOfPayment AS modeOfPayment,
                                        srp_erp_paymentvouchermaster.supplierBankMasterID AS supplierBankMasterID,
                                        srp_erp_supplierbankmaster.bankName AS supplierBankName,
                                        bankTransferDetails AS bankTransferDetails ,
                                        bankGLAutoID AS bankGLAutoID,
                                        srp_erp_chartofaccounts.systemAccountCode AS bankGLsystemAccountCode,
                                        srp_erp_chartofaccounts.GLDescription AS bankGLDescription,
                                        srp_erp_chartofaccounts.GLSecondaryCode AS bankGLSecondaryCode,
                                        PVchequeNo AS PVchequeNo,
                                        PVchequeDate AS PVchequeDate,
                                        chequeRegisterDetailID AS chequeRegisterDetailID,
                                        (((IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 ) - IFNULL( debitnote.transactionAmount, 0 )- IFNULL( SR.transactionAmount, 0 )) AS amount
                                    FROM
                                        srp_erp_paymentvouchermaster 
                                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type != 'debitnote' AND srp_erp_paymentvoucherdetail.type != 'SR' GROUP BY payVoucherAutoId ) det ON ( `det`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN (
                                        SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'GL' OR srp_erp_paymentvoucherdetail.type = 'Item' OR srp_erp_paymentvoucherdetail.type = 'PRQ' GROUP BY payVoucherAutoId 
                                    ) tyepdet ON ( `tyepdet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'debitnote' GROUP BY payVoucherAutoId ) debitnote ON ( `debitnote`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'SR' GROUP BY payVoucherAutoId ) SR ON ( `SR`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, payVoucherAutoId FROM srp_erp_paymentvouchertaxdetails GROUP BY payVoucherAutoId ) addondet ON ( `addondet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvouchermaster.segmentID
                                    LEFT JOIN srp_erp_supplierbankmaster On srp_erp_supplierbankmaster.supplierBankMasterID = srp_erp_paymentvouchermaster.supplierBankMasterID
                                    LEFT JOIN srp_erp_chartofaccounts On srp_erp_chartofaccounts.GLAutoID = srp_erp_paymentvouchermaster.bankGLAutoID
                                    WHERE
                                        srp_erp_paymentvouchermaster.companyID = {$companyID}
                                        AND srp_erp_paymentvouchermaster.payVoucherAutoId = {$documentAutoID}")->row_array();

        $x = array();
        if($query) {
            $currency_arr = array();
            foreach (array_keys($query) as $item) {
                switch ($item) {
                    case 'documentAutoID' : case 'level' : case 'confirmedEmpID' : case 'chequeRegisterDetailID' : case 'isPayeeOnly' :
                    case 'status' : case 'paymentType' : case 'modeOfPayment' : case 'supplierID' :
                    case 'supplierBankMasterID' : case 'bankGLAutoID' : case 'PVbankCode' :
                        $x[$item] = (int)$query[$item];
                        break;
                    case 'amount' :
                        $x[$item] = (double)$query[$item];
                        break;
                    case 'currencyID' :
                        if (!empty($query[$item])) {
                            $currency_arr['currencyID'] = (int)$query['currencyID'];
                            $currency_arr['currency'] = $query['currency'];
                            $currency_arr['decimalPlaces'] = (int)$query['decimalPlaces'];
                        } else {
                            $currencyID = current_company_default_currencyID();
                            $currency_arr['currencyID'] = (int)$currencyID;
                            $currency_arr['currency'] = fetch_currency_code($currencyID);
                            $currency_arr['decimalPlaces'] = (int)fetch_currency_desimal_by_id($currencyID);
                        }
                        break;
                        case 'currency' :
                        case 'decimalPlaces' :
                            break;

                        default :
                            $x[$item] = $query[$item];
                }
                $x['currency'] = $currency_arr;
            }

            $Itemdetails = array();
            $itemDetails = $this->db->query("SELECT
                                payVoucherDetailAutoID AS documentDetailAutoID,
                                itemAutoID,
                                itemSystemCode,
                                itemDescription,
                                requestedQty,
                                unitOfMeasureID,
                                unitOfMeasure,
                                unittransactionAmount AS unitAmount,
                                discountPercentage AS discountPercentage,
                                discountAmount AS discountAmount,
                                transactionAmount AS totalAmount,
                                comment AS narration,
                                '' AS pulledDocCode,
                                CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                wareHouseLocation AS wareHouseLocation,
                                wareHouseAutoID AS wareHouseAutoID
                            FROM
                                srp_erp_paymentvoucherdetail 
                            WHERE
                                companyID = {$companyID}
                                AND payVoucherAutoId = {$documentAutoID}
                                AND type = 'Item'")->result_array();

            if(!empty($itemDetails)) {
                foreach ($itemDetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' : CASE 'wareHouseAutoID' :
                            $a[$det] = (int)$val[$det];
                            BREAK;

                            CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            CASE 'requestedQty' : CASE 'discountPercentage' :
                            $a[$det] = (float)$val[$det];
                            BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    $this->db->select('srp_erp_unit_of_measure.UnitID,UnitShortCode,UnitDes,conversion');
                    $this->db->from('srp_erp_unitsconversion');
                    $this->db->join('srp_erp_unit_of_measure', 'srp_erp_unit_of_measure.UnitID = srp_erp_unitsconversion.subUnitID');
                    $this->db->where('masterUnitID',$val['unitOfMeasureID']);
                    $this->db->where('srp_erp_unitsconversion.companyID',$companyID);
                    $a['UOM'] = $this->db->get()->result_array();
                    foreach ($a['UOM'] as $key5 => $uom) {
                        $a['UOM'][$key5]['UnitID'] = (int)$uom['UnitID'];
                        $a['UOM'][$key5]['conversion'] = (double)$uom['conversion'];
                    }
                    array_push($Itemdetails, $a);
                }
            }

            $GLdetails = array();
            $glDeatils = $this->db->query("SELECT
                                        payVoucherDetailAutoID AS documentDetailAutoID,
                                        GLCode AS GLCode,
                                        SystemGLCode AS GLSystemCode,
                                        GLDescription AS GLDescription,
                                        GLType AS GLType,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                        unittransactionAmount AS unitAmount,
                                        discountPercentage AS discountPercentage,
                                        discountAmount AS discountAmount,
                                        transactionAmount AS totalAmount,
                                        comment AS narration
                                    FROM
                                        srp_erp_paymentvoucherdetail
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvoucherdetail.segmentID
                                    WHERE
                                        srp_erp_paymentvoucherdetail.companyID = {$companyID}
                                        AND payVoucherAutoId = {$documentAutoID}
                                        AND type = 'GL'")->result_array();

            if(!empty($glDeatils)) {
                foreach ($glDeatils AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :  CASE 'debitAmount' : CASE 'creditAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            CASE 'discountPercentage' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($GLdetails, $a);
                }
            }

            $AdvanceDetails = array();
            $advancedetails = $this->db->query("SELECT
                                        payVoucherDetailAutoID AS documentDetailAutoID,
                                        transactionAmount AS totalAmount,
                                        comment AS narration 
                                    FROM
                                        srp_erp_paymentvoucherdetail 
                                    WHERE
                                        companyID = {$companyID}
                                        AND type = 'Advance' 
                                        AND payVoucherAutoId = {$documentAutoID}")->result_array();
            if(!empty($advancedetails)) {
                foreach ($advancedetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'totalAmount' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($AdvanceDetails, $a);
                }
            }

            $Taxdetails = array();
            $taxDetails = $this->db->query("SELECT
                                    taxDetailAutoID AS taxAutoID,
                                    referenceNo AS narration,
                                    taxDescription AS taxDescription,
                                    taxShortCode,
                                    taxPercentage,
                                    (taxPercentage / 100) * amount AS taxAmount
                                FROM
                                    srp_erp_paymentvouchertaxdetails 
                                LEFT JOIN ( SELECT SUM(transactionAmount) AS amount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE (type = 'Item' OR type = 'GL') GROUP BY payVoucherAutoId )pv ON pv.payVoucherAutoId = srp_erp_paymentvouchertaxdetails.payVoucherAutoId 
                                WHERE
                                    companyID = {$companyID}
                                    AND srp_erp_paymentvouchertaxdetails.payVoucherAutoId = {$documentAutoID}")->result_array();
            if(!empty($taxDetails)) {
                foreach ($taxDetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'taxAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'taxPercentage' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            CASE 'taxAmount' :
                                $a[$det] = (double)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($Taxdetails, $a);
                }
            }

            $DocumentDetails = array();
            $documentdetails = $this->db->query("SELECT
                                payVoucherDetailAutoID AS documentDetailAutoID,
                                type AS docType,
                            CASE
                                    WHEN type = 'Invoice' THEN
                                    'INV' 
                                    WHEN type = 'debitnote' THEN
                                    'DN'
                                    WHEN type = 'SC' THEN
                                    'SC'
                                    WHEN type = 'SR' THEN
                                    'SR'
                                END AS documentID,
                                bookingInvCode AS pulledDocCode,
                                bookingDate AS pulledDocDate,
                                Invoice_amount AS pulledDocAmount,
                                due_amount AS dueAmount,
                                balance_amount AS balanceAmount,
                                referenceNo AS referenceNo,
                                transactionAmount AS totalAmount,
                                CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                unittransactionAmount AS unitAmount
                            FROM
                                srp_erp_paymentvoucherdetail
                            LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvoucherdetail.segmentID 
                            WHERE
                                srp_erp_paymentvoucherdetail.companyID = {$companyID}
                                AND payVoucherAutoId = {$documentAutoID}
                                AND (
                                type = 'Invoice' OR type = 'debitnote' OR type = 'SC' OR type = 'SR')")->result_array();
            if(!empty($documentdetails)) {
                foreach ($documentdetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($DocumentDetails, $a);
                }
            }

            $grandtotal = $this->db->query("SELECT ((( IFNULL( addondet.taxPercentage, 0 )/ 100 )* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( debitnote.transactionAmount, 0 )- IFNULL( SR.transactionAmount, 0 )) AS transactionAmount 
                                FROM
                                srp_erp_paymentvouchermaster
                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type != 'debitnote' AND srp_erp_paymentvoucherdetail.type != 'SR' GROUP BY payVoucherAutoId ) det ON det.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                LEFT JOIN (
                                SELECT
                                SUM( transactionAmount ) AS transactionAmount,
                                payVoucherAutoId 
                                FROM
                                srp_erp_paymentvoucherdetail 
                                WHERE
                                srp_erp_paymentvoucherdetail.type = 'GL' 
                                OR srp_erp_paymentvoucherdetail.type = 'Item' 
                                OR srp_erp_paymentvoucherdetail.type = 'PRQ' 
                                GROUP BY
                                payVoucherAutoId 
                                ) tyepdet ON tyepdet.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'debitnote' GROUP BY payVoucherAutoId ) debitnote ON debitnote.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'SR' GROUP BY payVoucherAutoId ) SR ON SR.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId
                                LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, payVoucherAutoId FROM srp_erp_paymentvouchertaxdetails GROUP BY payVoucherAutoId ) addondet ON addondet.payVoucherAutoId = srp_erp_paymentvouchermaster.payVoucherAutoId 
                                WHERE
                                companyID = {$companyID}
                                AND srp_erp_paymentvouchermaster.payVoucherAutoId = {$documentAutoID}")->row_array();

            $dataReturn['header'] = $x;
            $dataReturn['itemDetails'] = $Itemdetails;
            $dataReturn['glDetails'] =  $GLdetails;
            $dataReturn['discountDetails'] =  null;
            $dataReturn['taxDetails'] =  $Taxdetails;
            $dataReturn['ExtrachargesDetails'] =  null;
            $dataReturn['AdvanceDetails'] =  $AdvanceDetails;
            $dataReturn['mergedDocDetails'] =  $DocumentDetails;
            $this->load->model('Mobile_leaveApp_Model');
            $dataReturn['approval_details']=$this->Mobile_leaveApp_Model->fetch_all_approval_users_modal(current_companyID(), "PV", $documentAutoID);
            $dataReturn['documentGrandTotal'] =  (double)$grandtotal['transactionAmount'];
        }

        $this->db->where('documentSystemCode', $documentAutoID);
        $this->db->where('documentID', $documentID);
        $this->db->where('companyID', $companyID);
        $data = $this->db->get('srp_erp_documentattachments')->result_array();

        $attachment_links = array();
        if (!empty($data)) {
            foreach ($data as $val) {
                $attachment = array();

                $attachment['id'] = (int)$val['attachmentID'];
                $attachment['link'] = $this->s3->createPresignedRequest($val['myFileName'], '1 hour');
                $attachment['type'] = $val['fileType'];
                $attachment['fileName'] = $val['myFileName'];
                $attachment['description'] = $val['attachmentDescription'];

                array_push($attachment_links, $attachment);
            }
        }
        $dataReturn['attachments'] = $attachment_links;

        return $dataReturn;
    }

    public function fetch_payment_voucher_tax($id = null, $taxDetailAutoID = null)
    {
        $master_id = (!empty($id)) ? $id : $this->get('masterID');
        $companyID = current_companyID();

        $data = $this->db->query("SELECT
                                    taxDetailAutoID AS taxAutoID,
                                    referenceNo AS narration,
                                    taxDescription AS taxDescription,
                                    taxShortCode,
                                    taxPercentage,
                                    (taxPercentage / 100) * amount AS taxAmount
                                FROM
                                    srp_erp_paymentvouchertaxdetails 
                                LEFT JOIN ( SELECT SUM(transactionAmount) AS amount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE (type = 'Item' OR type = 'GL') GROUP BY payVoucherAutoId )pv ON pv.payVoucherAutoId = srp_erp_paymentvouchertaxdetails.payVoucherAutoId 
                                WHERE
                                    companyID = {$companyID}
                                    AND srp_erp_paymentvouchertaxdetails.payVoucherAutoId = {$master_id}
                                    AND srp_erp_paymentvouchertaxdetails.taxDetailAutoID = {$taxDetailAutoID}")->row_array();

        $data['taxAutoID'] = (int)$data['taxAutoID'];
        $data['taxPercentage'] = (float)$data['taxPercentage'];
        $data['taxAmount'] = (float)$data['taxAmount'];

        $rt_data = [
            'success' => true,
            'message' => 'Data Retrieved Successfully!',
            'data' => $data
        ];

        if (!empty($id)) {
            return $data;
        }

        $this->set_response($rt_data, REST_Controller::HTTP_OK);
    }

    public function fetch_payment_voucher_item($id = null, $payVoucherDetailAutoID = null)
    {
        $master_id = (!empty($id)) ? $id : $this->get('masterID');
        $companyID = current_companyID();

        $data = $this->db->query("SELECT
                                payVoucherDetailAutoID AS documentDetailAutoID,
                                itemAutoID,
                                itemSystemCode,
                                itemDescription,
                                requestedQty,
                                unitOfMeasureID,
                                unitOfMeasure,
                                unittransactionAmount AS unitAmount,
                                discountPercentage AS discountPercentage,
                                discountAmount AS discountAmount,
                                transactionAmount AS totalAmount,
                                comment AS narration,
                                CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                wareHouseLocation AS wareHouseLocation
                            FROM
                                srp_erp_paymentvoucherdetail 
                            WHERE
                                companyID = {$companyID}
                                AND payVoucherAutoId = {$master_id}
                                AND payVoucherDetailAutoID = {$payVoucherDetailAutoID}
                                AND type = 'Item'")->row_array();


        $this->db->select('srp_erp_unit_of_measure.UnitID,UnitShortCode,UnitDes,conversion');
        $this->db->from('srp_erp_unitsconversion');
        $this->db->join('srp_erp_unit_of_measure', 'srp_erp_unit_of_measure.UnitID = srp_erp_unitsconversion.subUnitID');
        $this->db->where('masterUnitID',$data['unitOfMeasureID']);
        $this->db->where('srp_erp_unitsconversion.companyID',$companyID);
        $data['UOM'] = $this->db->get()->result_array();

        $data['documentDetailAutoID'] = (int)$data['documentDetailAutoID'];
        $data['itemAutoID'] = (int)$data['itemAutoID'];
        $data['requestedQty'] = (float)$data['requestedQty'];
        $data['unitOfMeasureID'] = (int)$data['unitOfMeasureID'];
        $data['unitAmount'] = (float)$data['unitAmount'];
        $data['discountPercentage'] = (float)$data['discountPercentage'];
        $data['discountAmount'] = (float)$data['discountAmount'];
        $data['totalAmount'] = (float)$data['totalAmount'];

        $rt_data = [
            'success' => true,
            'message' => 'Data Retrieved Successfully!',
            'data' => $data
        ];

        if (!empty($id)) {
            return $data;
        }

        $this->set_response($rt_data, REST_Controller::HTTP_OK);
    }

    function payment_view_document_list_view()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $date_format_policy = date_format_policy();
        $start_date = $this->input->get('date_range_start');
        $start_date = input_format_date($start_date, $date_format_policy);
        $end_date = $this->input->get('date_range_end');
        $end_date = input_format_date($end_date, $date_format_policy);
        $status = $this->input->get('status');
        $where = '';
        if($status == 1) {
            $where = "AND confirmedYN = 0";
        } else if($status == 2) {
            $where = "AND confirmedYN = 1 AND approvedYN = 0";
        } else if($status == 3) {
            $where = "AND confirmedYN = 1 AND approvedYN = 1";
        } else if($status == 4) {
            $where = "AND confirmedYN = 3";
        } else if($status == 5) {
            $where = "AND isDeleted = 1";
        }
        $query = $this->db->query("SELECT
                                        srp_erp_paymentvouchermaster.payVoucherAutoId AS documentAutoID,
                                        CASE
                                            WHEN (isDeleted = 1) THEN 5
                                            WHEN (confirmedYN = 3) THEN 4
                                            WHEN (approvedYN = 1 AND confirmedYN = 1) THEN 3
                                            WHEN (approvedYN = 0 AND confirmedYN = 1) THEN 2
                                            ELSE 1
                                        END status,    
                                        CASE
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'DirectItem') THEN 'Direct Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'DirectExpense') THEN 'Direct Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierAdvance') THEN 'Supplier Advance Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierInvoice') THEN 'Supplier Invoice Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierItem') THEN 'Supplier Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'SupplierExpense') THEN 'Supplier Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'EmployeeExpense') THEN 'Employee Expense Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'EmployeeItem') THEN 'Employee Item Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Direct') THEN 'Direct Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Supplier') THEN 'Supplier Payment'
                                            WHEN (srp_erp_paymentvouchermaster.PVtype = 'Employee') THEN 'Employee Payment'
                                            ELSE ''
                                        END documentTypeLabel,        
                                        documentID AS doucmentID,
                                        PVcode AS documentCode,
                                        pvType AS documentType,
                                        PVdate AS documentDate,
                                        srp_erp_paymentvouchermaster.referenceNo AS referenceNo,
                                        partyName AS name,
                                        partyAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        transactionCurrencyID AS currency,
                                        currentLevelNo AS level,
                                        DATE_FORMAT(srp_erp_paymentvouchermaster.confirmedDate,'{$convertFormat}') AS confirmedDate,
                                        confirmedByEmpID AS confirmedEmpID,
                                        confirmedByName AS confirmedEmpName,
                                        PVNarration AS narration,
                                        paymentType AS paymentType,
                                        PVbankCode AS PVbankCode,
                                        modeOfPayment AS modeOfPayment,
                                        supplierBankMasterID AS supplierBankMasterID,
                                        bankTransferDetails AS bankTransferDetails ,
                                        bankGLAutoID AS bankGLAutoID,
                                        PVchequeNo AS PVchequeNo,
                                        PVchequeDate AS PVchequeDate,
                                        chequeRegisterDetailID AS chequeRegisterDetailID,
                                        (((IFNULL( addondet.taxPercentage, 0 )/ 100)* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 ) - IFNULL( debitnote.transactionAmount, 0 )- IFNULL( SR.transactionAmount, 0 )) AS amount
                                    FROM
                                        srp_erp_paymentvouchermaster 
                                    LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type != 'debitnote' AND srp_erp_paymentvoucherdetail.type != 'SR' GROUP BY payVoucherAutoId ) det ON ( `det`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
				LEFT JOIN (
				SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'GL' OR srp_erp_paymentvoucherdetail.type = 'Item' OR srp_erp_paymentvoucherdetail.type = 'PRQ' GROUP BY payVoucherAutoId 
				) tyepdet ON ( `tyepdet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
				LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'debitnote' GROUP BY payVoucherAutoId ) debitnote ON ( `debitnote`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
				LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, payVoucherAutoId FROM srp_erp_paymentvoucherdetail WHERE srp_erp_paymentvoucherdetail.type = 'SR' GROUP BY payVoucherAutoId ) SR ON ( `SR`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
				LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, payVoucherAutoId FROM srp_erp_paymentvouchertaxdetails GROUP BY payVoucherAutoId ) addondet ON ( `addondet`.`payVoucherAutoId` = srp_erp_paymentvouchermaster.payVoucherAutoId )
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvouchermaster.segmentID
                                    WHERE
                                        srp_erp_paymentvouchermaster.companyID = {$companyID}
                                        AND PVdate BETWEEN '{$start_date} 00:00:00' AND '{$end_date} 23:59:00'
                                        $where
                                        ORDER BY DATE(PVdate) DESC")->result_array();

        foreach ($query as $key2 => $row) {
            $query[$key2]['documentAutoID'] = (int)$row['documentAutoID'];
            $query[$key2]['documentAutoID'] = (int)$row['documentAutoID'];
            $query[$key2]['status'] = (int)$row['status'];
            $query[$key2]['paymentType'] = (int)$row['paymentType'];
            $query[$key2]['modeOfPayment'] = (int)$row['modeOfPayment'];
            $query[$key2]['PVbankCode'] = (int)$row['PVbankCode'];
            $query[$key2]['supplierBankMasterID'] = (int)$row['supplierBankMasterID'];
            $query[$key2]['bankGLAutoID'] = (int)$row['bankGLAutoID'];
//            $query[$key2]['PVchequeNo'] = (int)$row['PVchequeNo'];
            $query[$key2]['chequeRegisterDetailID'] = (int)$row['chequeRegisterDetailID'];
            $query[$key2]['amount'] = (double)$row['amount'];

            $currencyID = $row['currency'];
            $currency = $this->db->query("SELECT CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();

            $currencyDet = [];
            if ($currency != null) {
                $currencyDet['currencyID'] = (int)$row['currency'];
                $currencyDet['code'] = $currency['code'];
                $currencyDet['description'] = $currency['description'];
                $currencyDet['decimals'] = (int)$currency['decimals'];
            }
            $query[$key2]['currency'] = $currencyDet;
            $query[$key2]['level'] = (int)$row['level'];
        }
        return $query;
    }

    function confirm_payment_voucher($id=null)
    {
        if(!empty($id)) {
            $master_id = $id;
        } else {
            $master_id = $this->input->post('master_id');
        }
        $locationwisecodegenerate = getPolicyValues('LDG', 'All');
        $companyID = current_companyID();
        $currentuser = current_userID();
        $emplocation = current_emp_location();

        $this->db->select('payVoucherDetailAutoID');
        $this->db->where('payVoucherAutoId', $master_id);
        $this->db->from('srp_erp_paymentvoucherdetail');
        $results = $this->db->get()->result_array();

        $this->db->select('confirmedYN');
        $this->db->where('payVoucherAutoId', $master_id);
        $this->db->from('srp_erp_paymentvouchermaster');
        $confirmed = $this->db->get()->row_array();

        $currentdate = current_date(false);
        $PostDatedChequeManagement = getPolicyValues('PDC', 'All'); // policy for post dated cheque

        $mastertbl = $this->db->query("SELECT PVdate,PVchequeDate FROM `srp_erp_paymentvouchermaster` where companyID = $companyID And payVoucherAutoId = $master_id ")->row_array();
        $mastertbldetail = $this->db->query("SELECT payVoucherAutoId,type  FROM `srp_erp_paymentvoucherdetail` where companyID = $companyID And type = 'Item' And payVoucherAutoId = $master_id")->row_array();

        if (empty($results)) {
            return array('error' => '2', 'message' => 'There are no records to confirm this document!');
        } else {
            if($confirmed['confirmedYN'] == 1) {
                return array('error' => '2', 'message' => 'Document Already Confirmed!');
            } else {
                $pvid = $master_id;
                $taxamnt = 0;
                $GL = $this->db->query("SELECT SUM(transactionAmount) as transactionAmount FROM srp_erp_paymentvoucherdetail WHERE payVoucherAutoId = $pvid AND type='GL' GROUP BY payVoucherAutoId")->row_array();
                if (empty($GL)) {
                    $GL = 0;
                } else {
                    $GL = $GL['transactionAmount'];
                }

                $Item = $this->db->query("SELECT SUM(transactionAmount) as transactionAmount FROM srp_erp_paymentvoucherdetail WHERE payVoucherAutoId = $pvid AND type='Item' GROUP BY payVoucherAutoId")->row_array();
                if (empty($Item)) {
                    $Item = 0;
                } else {
                    $Item = $Item['transactionAmount'];
                }

                $debitnote = $this->db->query("SELECT SUM(transactionAmount) as transactionAmount FROM srp_erp_paymentvoucherdetail WHERE payVoucherAutoId = $pvid AND type='debitnote' GROUP BY payVoucherAutoId")->row_array();
                if (empty($debitnote)) {
                    $debitnote = 0;
                } else {
                    $debitnote = $debitnote['transactionAmount'];
                }

                $Advance = $this->db->query("SELECT	SUM(transactionAmount) as transactionAmount FROM srp_erp_paymentvoucherdetail WHERE	payVoucherAutoId = $pvid AND type='Advance' GROUP BY payVoucherAutoId")->row_array();
                if (empty($Advance)) {
                    $Advance = 0;
                } else {
                    $Advance = $Advance['transactionAmount'];
                }

                $Invoice = $this->db->query("SELECT	SUM(transactionAmount) as transactionAmount FROM srp_erp_paymentvoucherdetail WHERE payVoucherAutoId = $pvid AND type='Invoice' GROUP BY payVoucherAutoId")->row_array();
                if (empty($Invoice)) {
                    $Invoice = 0;
                } else {
                    $Invoice = $Invoice['transactionAmount'];
                }

                $tax = $this->db->query("SELECT	SUM(taxPercentage) as taxPercentage FROM srp_erp_paymentvouchertaxdetails WHERE payVoucherAutoId = $pvid GROUP BY payVoucherAutoId")->row_array();
                if (empty($tax)) {
                    $tax = 0;
                } else {
                    $tax = $tax['taxPercentage'];
                    $taxamnt = (($Item + $GL) / 100) * $tax;
                }

                $totalamnt = ($Item + $GL + $Invoice + $Advance + $taxamnt) - $debitnote;
                if ($totalamnt < 0) {
                    return array('error' => '2', 'message' => 'Grand total should be greater than 0.');
                } else {
                    $this->db->select('PayVoucherAutoId');
                    $this->db->where('PayVoucherAutoId', trim($master_id));
                    $this->db->where('confirmedYN', 1);
                    $this->db->from('srp_erp_paymentvouchermaster');
                    $Confirmed = $this->db->get()->row_array();
                    if (!empty($Confirmed)) {
                        return array('error' => '2', 'message' => 'Document already confirmed');
                    } else {
                        $subItemNullCount = $this->db->query("SELECT
                                        count(im.isSubitemExist) AS countAll
                                    FROM
                                        srp_erp_paymentvouchermaster masterTbl
                                    LEFT JOIN srp_erp_paymentvoucherdetail detailTbl ON masterTbl.payVoucherAutoId = detailTbl.payVoucherAutoId
                                    LEFT JOIN srp_erp_itemmaster im ON im.itemAutoID = detailTbl.itemAutoID
                                    LEFT JOIN srp_erp_itemmaster_subtemp itemMaster ON itemMaster.receivedDocumentDetailID = detailTbl.payVoucherDetailAutoID
                                    WHERE
                                        masterTbl.payVoucherAutoId = '" . $master_id . "'
                                    AND im.isSubitemExist = 1
                                    AND (
                                        ISNULL(itemMaster.productReferenceNo )
                                        OR itemMaster.productReferenceNo = ''
)")->row_array();
                        $isProductReference_completed = isMandatory_completed_document($master_id, 'PV');
                        if ($isProductReference_completed == 0) {
                            $this->db->select('documentID, PVcode,DATE_FORMAT(PVdate, "%Y") as invYear,DATE_FORMAT(PVdate, "%m") as invMonth,companyFinanceYearID,PVdate');
                            $this->db->where('PayVoucherAutoId', $master_id);
                            $this->db->from('srp_erp_paymentvouchermaster');
                            $master_dt = $this->db->get()->row_array();
                            $this->load->library('sequence');
                            if ($master_dt['PVcode'] == "0") {
                                if ($locationwisecodegenerate == 1) {
                                    $this->db->select('locationID');
                                    $this->db->where('EIdNo', $currentuser);
                                    $this->db->where('Erp_companyID', $companyID);
                                    $this->db->from('srp_employeesdetails');
                                    $location = $this->db->get()->row_array();
                                    if ((empty($location)) || ($location == '')) {
                                        return array('error' => '2', 'message' => 'Location is not assigned for current employee');
                                    } else {
                                        if ($emplocation != '') {
                                            $codegeratorpv = $this->sequence->sequence_generator_location($master_dt['documentID'], $master_dt['companyFinanceYearID'], $emplocation, $master_dt['invYear'], $master_dt['invMonth']);
                                        } else {
                                            return array('error' => '2', 'message' => 'Location is not assigned for current employee');
                                        }
                                    }
                                } else {
                                    $codegeratorpv = $this->sequence->sequence_generator_fin($master_dt['documentID'], $master_dt['companyFinanceYearID'], $master_dt['invYear'], $master_dt['invMonth']);
                                }

                                $pvCd = array(
                                    'PVcode' => $codegeratorpv
                                );
                                $this->db->where('PayVoucherAutoId', trim($master_id));
                                $this->db->update('srp_erp_paymentvouchermaster', $pvCd);
                            }
                            $this->load->library('Approvals_mobile');
                            $this->db->select('documentID,PayVoucherAutoId, PVcode,DATE_FORMAT(PVdate, "%Y") as invYear,DATE_FORMAT(PVdate, "%m") as invMonth,companyFinanceYearID,PVdate');
                            $this->db->where('PayVoucherAutoId', $master_id);
                            $this->db->from('srp_erp_paymentvouchermaster');
                            $app_data = $this->db->get()->row_array();

                            $autoApproval = get_document_auto_approval('PV');
                            if ($autoApproval == 0) {
                                if($mastertbldetail['type']!='Item') {
                                    if ($PostDatedChequeManagement == 1 && ($mastertbl['PVchequeDate'] != '' || !empty($mastertbl['PVchequeDate'])) && (empty($mastertbldetail['payVoucherAutoId']) || $mastertbldetail['payVoucherAutoId']==' ')) {
                                        if ($mastertbl['PVchequeDate'] > $mastertbl['PVdate']) {
                                            if ($currentdate >= $mastertbl['PVchequeDate']) {
                                                $approvals_status = $this->approvals_mobile->auto_approve($app_data['PayVoucherAutoId'], 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 'PV', $app_data['PVcode'], $app_data['PVdate']);
                                            } else {
                                                return array('error' => '1', 'message' => 'This is a post dated cheque document. you cannot approve this document before the cheque date!');
                                            }
                                        } else {
                                            $approvals_status = $this->approvals_mobile->auto_approve($app_data['PayVoucherAutoId'], 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 'PV', $app_data['PVcode'], $app_data['PVdate']);
                                        }

                                    }else
                                    {
                                        $approvals_status = $this->approvals_mobile->approvals_mobile($app_data['PayVoucherAutoId'], 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 'PV', $app_data['PVcode'], $app_data['PVdate']);
                                    }
                                }
                                else {
                                    $approvals_status = $this->approvals_mobile->approvals_mobile($app_data['PayVoucherAutoId'], 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 'PV', $app_data['PVcode'], $app_data['PVdate']);
                                }
                            } elseif ($autoApproval == 1) {
                                $approvals_status = $this->approvals_mobile->CreateApproval('PV', $app_data['PayVoucherAutoId'], $app_data['PVcode'], 'Payment Voucher', 'srp_erp_paymentvouchermaster', 'PayVoucherAutoId', 0, $app_data['PVdate'], 0, $app_data['PVdate']);
                            } else {
                                return array('error' => '2', 'message' => 'Approval levels are not set for this document');
                            }
                            if ($approvals_status == 1) {
                                $autoApproval = get_document_auto_approval('PV');
                                if ($autoApproval == 0) {
                                    $this->load->model('ApproveOther_Model');
                                    $result = $this->approveOther_Model->save_pv_approval(0, $app_data['PayVoucherAutoId'], 1, 'Auto Approved');
                                    if ($result) {
                                        $this->db->trans_commit();
                                        return array('error' => '0', 'message' => 'Document confirmed successfully.', 'code' => $app_data['PVcode']);
                                    }
                                } else {
                                    $data = array(
                                        'confirmedYN' => 1,
                                        'confirmedDate' => current_date(),
                                        'confirmedByEmpID' => current_userID(),
                                        'confirmedByName' => current_user()
                                    );
                                    $this->db->where('PayVoucherAutoId', trim($master_id));
                                    $this->db->update('srp_erp_paymentvouchermaster', $data);
                                    return array('error' => '0', 'message' => 'Document confirmed successfully.', 'code' => $app_data['PVcode']);
                                }
                            } else if ($approvals_status == 3) {
                                return array('error' => '2', 'message' => 'There are no users exist to perform approval for this document.');
                            } else {
                                return array('error' => '1', 'message' => 'oops, something went wrong!');
                            }
                        } else {
                            return array('error' => '1', 'message' => 'Please complete you sub item configuration, fill all the mandatory fields!');
                        }
                    }
                }
            }
        }
    }

    function fetch_payment_voucher_header($documentAutoID)
    {
        $companyID = current_companyID();
        $query = $this->db->query("SELECT
                                        payVoucherAutoId AS documentAutoID,
                                        documentID AS doucmentID,
                                        PVcode AS documentCode,
                                        pvType AS documentType,
                                        PVdate AS documentDate,
                                        CASE WHEN partyType = 'DIR' IS NULL THEN partyName ELSE partyCode END AS name,
                                        partyAddress AS address,
                                        CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode,
                                        transactionAmount AS amount,
                                        transactionCurrencyID AS currency
                                    FROM
                                        srp_erp_paymentvouchermaster 
                                    LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_paymentvouchermaster.segmentID
                                    WHERE
                                        srp_erp_paymentvouchermaster.companyID = {$companyID}
                                        AND payVoucherAutoId = {$documentAutoID}")->row_array();

        $query['documentAutoID'] = (int)$query['documentAutoID'];
        $currencyID = $query['currency'];
        $currency = $this->db->query("SELECT CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();

        $currencyDet = [];
        if ($currency != null) {
            $currencyDet['currencyID'] = (int)$query['currency'];
            $currencyDet['code'] = $currency['code'];
            $currencyDet['description'] = $currency['description'];
            $currencyDet['decimals'] = (int)$currency['decimals'];
        }
        $query['currency'] = $currencyDet;
        return $query;
    }

    function load_receipt_vouchers()
    {
        $companyID = current_companyID();
        $date_format_policy = date_format_policy();
        $start_date = $this->input->get('date_range_start');
        $start_date = input_format_date($start_date, $date_format_policy);
        $end_date = $this->input->get('date_range_end');
        $end_date = input_format_date($end_date, $date_format_policy);
        $status = $this->input->get('status');

        $this->db->select('masTB.receiptVoucherAutoId AS masterID, RVType AS documentType, RVcode AS documentCode, RVdate AS documentDate, isSystemGenerated, referanceNo, paymentType, modeOfPayment,
                                        RVbankCode, bankGLAutoID, bankSystemAccountCode, bankGLSecondaryCode, RVbank, segmentID, segmentCode, RVchequeNo, RVchequeDate,
                                        CASE
                                            WHEN ( isDeleted = 1 ) THEN 5 
                                            WHEN ( confirmedYN = 3 ) THEN 4 
                                            WHEN ( approvedYN = 1 AND confirmedYN = 1 ) THEN 3 
                                            WHEN ( approvedYN = 0 AND confirmedYN = 1 ) THEN 2 
                                            ELSE 1 
                                        END documentStatus,
                                        CASE
                                            WHEN ( RVType = "DirectItem" ) THEN "Direct Item Receipt" 
                                            WHEN ( RVType = "DirectIncome" ) THEN "Direct Income Receipt" 
                                            WHEN ( RVType = "InvoicesAdvance" ) THEN "Customer Advance Receipt" 
                                            WHEN ( RVType = "CustomerInvoices" ) THEN "Customer Invoice Receipt" 
                                            WHEN ( RVType = "InvoicesItem" ) THEN "Customer Item Receipt" 
                                            WHEN ( RVType = "InvoicesIncome" ) THEN "Customer Income Receipt" 
                                            WHEN ( RVType = "Invoices" ) THEN "Customer Receipt" 
                                            ELSE "Direct Receipt"
                                        END documentTypeLabel, RVNarration AS narration, customerID, customerSystemCode, customerName, transactionCurrencyID as Currency,
                                        (((IFNULL(addondet.taxPercentage,0)/100)*IFNULL(tyepdet.transactionAmount,0))+IFNULL(det.transactionAmount,0)-IFNULL(Creditnots.transactionAmount,0)) as amount')
            ->from('srp_erp_customerreceiptmaster AS masTB')->where('masTB.companyID', $companyID)
            ->join('(SELECT SUM(transactionAmount) as transactionAmount,receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE (srp_erp_customerreceiptdetail.type!="creditnote" AND srp_erp_customerreceiptdetail.type!="SLR") GROUP BY receiptVoucherAutoId) det', '(det.receiptVoucherAutoId = masTB.receiptVoucherAutoId)', 'left')
            ->join('(SELECT SUM(taxPercentage) as taxPercentage ,receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails  GROUP BY receiptVoucherAutoId) addondet', '(addondet.receiptVoucherAutoId = masTB.receiptVoucherAutoId)', 'left')
            ->join('(SELECT SUM(transactionAmount) as transactionAmount,receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type="GL" OR srp_erp_customerreceiptdetail.type="Item"  GROUP BY receiptVoucherAutoId) tyepdet', '(tyepdet.receiptVoucherAutoId = masTB.receiptVoucherAutoId)', 'left')
            ->join('(SELECT SUM(transactionAmount) as transactionAmount,receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE (srp_erp_customerreceiptdetail.type="creditnote" OR srp_erp_customerreceiptdetail.type="SLR")  GROUP BY receiptVoucherAutoId) Creditnots', '(Creditnots.receiptVoucherAutoId = masTB.receiptVoucherAutoId)', 'left')
            ->where("RVdate BETWEEN '{$start_date} 00:00:00' AND '{$end_date} 23:59:00'");
        switch ($status) {
            case 1:
                $this->db->where('confirmedYN', 0);
                break;
            case 2:
                $this->db->where("confirmedYN = 1 AND approvedYN = 0");
                break;
            case 3:
                $this->db->where('approvedYN', 1);
                break;
            case 4:
                $this->db->where('confirmedYN', 3);
                break;
            case 5:
                $this->db->where('isDeleted', 1);
                break;
        }
        $data = $this->db->order_by('masTB.RVdate', 'DESC')->get()->result_array();

        foreach ($data as $key => $row) {
            $data[$key]['masterID'] = (int)$row['masterID'];
            $data[$key]['isSystemGenerated'] = (int)$row['isSystemGenerated'];
            $data[$key]['paymentType'] = (int)$row['paymentType'];
            $data[$key]['modeOfPayment'] = (int)$row['modeOfPayment'];
            $data[$key]['bankGLAutoID'] = (int)$row['bankGLAutoID'];
            $data[$key]['documentStatus'] = (int)$row['documentStatus'];
            $data[$key]['customerID'] = (int)$row['customerID'];
            $data[$key]['segmentID'] = (int)$row['segmentID'];
            $data[$key]['amount'] = (double)$row['amount'];
            $currencyID = (int)$row['Currency'];
            $currency = $this->db->query("SELECT currencyID AS currencyID, CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description
                                           FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
            if ($currency != null) {
                $currency['decimals'] = (int)$currency['decimals'];
                $currency['currencyID'] = (int)$currency['currencyID'];
            }
            $data[$key]['Currency'] = $currency;
        }

        return $data;
    }

    function save_receipt_header()
    {
        $this->db->trans_start();
        $date_format_policy = date_format_policy();
        $financeyearperiodYN = getPolicyValues('FPC', 'All');
        $RVdates = $this->input->post('RVdate');
        $RVdate = input_format_date($RVdates, $date_format_policy);
        $RVcheqDate = $this->input->post('RVchequeDate');
        $RVchequeDate = input_format_date($RVcheqDate, $date_format_policy);
        $segmentID = trim($this->input->post('segment') ?? '');
        $RVbankCode = $this->input->post('RVbankCode');
        $currencyID = $this->input->post('transactionCurrencyID');

        $financeYearDetails = get_financial_year($RVdate);
        if (empty($financeYearDetails)) {
            return array('status' => 'e', 'message' => 'Finance Year not found for the selected document date!', 'last_id'=> null);
        } else {
            $FYBegin = $financeYearDetails['beginingDate'];
            $FYEnd = $financeYearDetails['endingDate'];
            $_POST['companyFinanceYear'] = $FYBegin . ' - ' . $FYEnd;
            $_POST['financeyear'] = $financeYearDetails['companyFinanceYearID'];
        }
        $financePeriodDetails = get_financial_period_date_wise($RVdate);

        if (empty($financePeriodDetails)) {
            return array('status' => 'e', 'message' => 'Finance period not found for the selected document date!', 'last_id'=> null);
        } else {
            $_POST['financeyear_period'] = $financePeriodDetails['companyFinancePeriodID'];
        }

        $bank_detail = fetch_gl_account_desc(trim($RVbankCode));
        $data['documentID'] = 'RV';
        $data['companyFinanceYearID'] = trim($this->input->post('financeyear') ?? '');
        $data['companyFinanceYear'] = trim($this->input->post('companyFinanceYear') ?? '');
        $data['FYBegin'] = trim($FYBegin);
        $data['FYEnd'] = trim($FYEnd);
        $data['companyFinancePeriodID'] = trim($this->input->post('financeyear_period') ?? '');
        $data['RVdate'] = trim($RVdate);
        $narration= ($this->input->post('RVNarration'));
        $data['RVNarration'] = str_replace('<br />', PHP_EOL, $narration);
        $data['segmentID'] = trim($segmentID);
        $segmentCode = $this->db->query("SELECT segmentCode FROM srp_erp_segment WHERE segmentID = {$segmentID}")->row('segmentCode');
        $data['segmentCode'] = trim($segmentCode);
        $data['bankGLAutoID'] = $bank_detail['GLAutoID'];
        $data['bankSystemAccountCode'] = $bank_detail['systemAccountCode'];
        $data['bankGLSecondaryCode'] = $bank_detail['GLSecondaryCode'];
        $data['bankCurrencyID'] = $bank_detail['bankCurrencyID'];
        $data['bankCurrency'] = $bank_detail['bankCurrencyCode'];
        $data['RVbank'] = $bank_detail['bankName'];
        $data['RVbankBranch'] = $bank_detail['bankBranch'];
        $data['RVbankSwiftCode'] = $bank_detail['bankSwiftCode'];
        $data['RVbankAccount'] = $bank_detail['bankAccountNumber'];
        $data['RVbankType'] = $bank_detail['subCategory'];
        $data['modeOfPayment'] = ($bank_detail['isCash'] == 1 ? 1 : 2);
        $data['RVchequeNo'] = trim($this->input->post('RVchequeNo') ?? '');
        if ($bank_detail['isCash'] == 0) {
            $paymentMode =$this->input->post('paymentMode');
            $data['paymentType'] = trim($this->input->post('paymentMode') ?? '');
            if($paymentMode == 1) {
                $data['RVchequeDate'] = trim($RVchequeDate);
                $data['bankTransferDetails'] = null;
            } else {
                $data['bankTransferDetails'] = trim($this->input->post('bankTransferDetails') ?? '');
                $data['RVchequeDate'] = null;
            }
        } else {
            $data['RVchequeDate'] = null;
        }
        $data['RvType'] = trim($this->input->post('vouchertype') ?? '');
        $data['referanceNo'] = trim_desc($this->input->post('referenceno'));
        $data['RVbankCode'] = trim($RVbankCode);
        if ($data['RvType'] == 'Direct' || $data['RvType'] == 'DirectItem' || $data['RvType'] == 'DirectIncome') {
            $data['customerName'] = trim($this->input->post('customerName') ?? '');
            $data['customerID'] = '';
            $data['customerAddress'] = '';
            $data['customerTelephone'] = '';
            $data['customerFax'] = '';
            $data['customerEmail'] = '';
            $transCurrencyCode = fetch_currency_code($currencyID);
            $data['customerCurrency'] = trim($transCurrencyCode);
            $data['customerCurrencyID'] = trim($currencyID);
            $data['customerCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['customerCurrencyID']);
        } else {
            $this->db->select('*');
            $this->db->from('srp_erp_customermaster');
            $this->db->where('customerAutoID', trim($this->input->post('customerID') ?? ''));
            $customer_arr = $this->db->get()->row_array();
            $data['customerID'] = $customer_arr['customerAutoID'];
            $data['customerSystemCode'] = $customer_arr['customerSystemCode'];
            $data['customerName'] = $customer_arr['customerName'];
            $data['customerAddress'] = $customer_arr['customerAddress1'] . ' ' . $customer_arr['customerAddress2'];
            $data['customerTelephone'] = $customer_arr['customerTelephone'];
            $data['customerFax'] = $customer_arr['customerFax'];
            $data['customerEmail'] = $customer_arr['customerEmail'];
            $data['customerreceivableAutoID'] = $customer_arr['receivableAutoID'];
            $data['customerreceivableSystemGLCode'] = $customer_arr['receivableSystemGLCode'];
            $data['customerreceivableGLAccount'] = $customer_arr['receivableGLAccount'];
            $data['customerreceivableDescription'] = $customer_arr['receivableDescription'];
            $data['customerreceivableType'] = $customer_arr['receivableType'];
            $data['customerCurrency'] = $customer_arr['customerCurrency'];
            $data['customerCurrencyID'] = $customer_arr['customerCurrencyID'];
            $data['customerCurrencyDecimalPlaces'] = $customer_arr['customerCurrencyDecimalPlaces'];
        }

        $data['transactionCurrencyID'] = trim($currencyID);
        $transCurrencyCode = fetch_currency_code($currencyID);
        $data['transactionCurrency'] = trim($transCurrencyCode);
        $data['transactionExchangeRate'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = current_company_default_currencyID();
        $data['companyLocalCurrency'] = fetch_currency_code($data['companyLocalCurrencyID']);
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalExchangeRate'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrencyID'] = current_company_reporting_currencyID();
        $data['companyReportingCurrency'] = fetch_currency_code($data['companyReportingCurrencyID']);
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $customer_currency = currency_conversionID($data['transactionCurrencyID'], $data['customerCurrencyID']);
        $data['customerExchangeRate'] = $customer_currency['conversion'];
        $data['customerCurrencyDecimalPlaces'] = $customer_currency['DecimalPlaces'];
        $bank_currency = currency_conversionID($data['transactionCurrencyID'], $data['bankCurrencyID']);
        $data['bankCurrencyExchangeRate'] = $bank_currency['conversion'];
        $data['bankCurrencyDecimalPlaces'] = $bank_currency['DecimalPlaces'];
        if (trim($this->input->post('receiptVoucherAutoId') ?? '')) {
            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedUserName'] = current_user();
            $data['modifiedDateTime'] = current_date();

            $this->db->where('receiptVoucherAutoId', trim($this->input->post('receiptVoucherAutoId') ?? ''));
            $this->db->update('srp_erp_customerreceiptmaster', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 'e', 'message' => 'Receipt Voucher Update Failed ' . $this->db->_error_message(), 'last_id' => '');
            } else {
                update_warehouse_items();
                update_item_master();
                $this->session->set_flashdata('s', '.');
                $this->db->trans_commit();
                return array('status' => 's', 'message' => 'Receipt Voucher Updated Successfully!', 'last_id'=> (int)$this->input->post('receiptVoucherAutoId'));
            }
        } else {
            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $data['RVcode'] = 0;

            $this->db->insert('srp_erp_customerreceiptmaster', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 'e', 'message' => 'Receipt Voucher   Saved Failed ' . $this->db->_error_message(), 'last_id'=> '');
            } else {
                update_warehouse_items();
                update_item_master();
                $this->db->trans_commit();
                return array('status' => 's', 'message' => 'Receipt Voucher Saved Successfully!', 'last_id'=> $last_id);
            }
        }
    }

    function create_receipt_item()
    {
        $receiptVoucherAutoId = $this->input->post('receiptVoucherAutoId');
        $itemAutoID = $this->input->post('itemAutoID');
        $wareHouseAutoID = $this->input->post('wareHouseAutoID');
        $ProjectCategory = $this->input->post('project_categoryID');
        $ProjectSubcategory = $this->input->post('project_subCategoryID');
        $projectExist = project_is_exist();
        $UnitOfMeasureID = $this->input->post('UnitOfMeasureID');
        $quantityRequested = $this->input->post('quantityRequested');
        $estimatedAmount = $this->input->post('estimatedAmount');
        $projectID = $this->input->post('projectID');
        $comment = $this->input->post('comment');
        $remarks = $this->input->post('remarks');
        $SUOMQty = $this->input->post('SUOMQty');
        $SUOMID = $this->input->post('SUOMIDhn');

        $this->db->select('transactionCurrency, transactionExchangeRate, transactionCurrencyID,companyLocalCurrencyID, companyLocalCurrency,companyLocalExchangeRate, companyReportingCurrency ,companyReportingExchangeRate, customerCurrency,customerExchangeRate,customerCurrencyID,companyReportingCurrencyID,segmentID,segmentCode');
        $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
        $this->db->from('srp_erp_customerreceiptmaster');
        $master = $this->db->get()->row_array();

        $this->db->trans_start();

        $this->db->select('mainCategory');
        $this->db->from('srp_erp_itemmaster');
        $this->db->where('itemAutoID', $itemAutoID);
        $serviceitm = $this->db->get()->row_array();

        $wareHouse_location = $this->warehouse_details($wareHouseAutoID);
        $item_data = fetch_item_data(trim($itemAutoID));

        if ($item_data['mainCategory'] == 'Inventory' or $item_data['mainCategory'] == 'Non Inventory') {
            $this->db->select('itemAutoID');
            $this->db->where('itemAutoID', $item_data['itemAutoID']);
            $this->db->where('wareHouseAutoID', $wareHouseAutoID);
            $this->db->where('companyID', current_companyID());
            $warehouseitems = $this->db->get('srp_erp_warehouseitems')->row_array();

            if (empty($warehouseitems)) {
                $data_arr = array(
                    'wareHouseAutoID' => $wareHouseAutoID,
                    'wareHouseLocation' => $wareHouse_location['wareHouseLocation'],
                    'wareHouseDescription' => $wareHouse_location['wareHouseDescription'],
                    'itemAutoID' => $item_data['itemAutoID'],
                    'barCodeNo' => $item_data['barcode'],
                    'salesPrice' => $item_data['companyLocalSellingPrice'],
                    'ActiveYN' => $item_data['isActive'],
                    'itemSystemCode' => $item_data['itemSystemCode'],
                    'itemDescription' => $item_data['itemDescription'],
                    'unitOfMeasureID' => $item_data['defaultUnitOfMeasureID'],
                    'unitOfMeasure' => $item_data['defaultUnitOfMeasure'],
                    'currentStock' => 0,
                    'companyID' => current_companyID(),
                    'companyCode' => current_companyCode(),
                );
                $this->db->insert('srp_erp_warehouseitems', $data_arr);
            }
        }
        $data['receiptVoucherAutoId'] = trim($receiptVoucherAutoId);
        $data['itemAutoID'] = trim($itemAutoID);
        $data['itemSystemCode'] = $item_data['itemSystemCode'];
        $data['itemDescription'] = $item_data['itemDescription'];
        if ($projectExist == 1) {
            $projectCurrency = project_currency($projectID);
            $projectCurrencyExchangerate = currency_conversionID($master['transactionCurrencyID'], $projectCurrency);
            $data['projectID'] = $projectID;
            $data['projectExchangeRate'] = $projectCurrencyExchangerate['conversion'];
            $data['project_categoryID'] = $ProjectCategory;
            $data['project_subCategoryID'] = $ProjectSubcategory;
        }
        $data['SUOMID'] = $SUOMID;
        $data['SUOMQty'] = $SUOMQty;
        $data['unitOfMeasureID'] = trim($UnitOfMeasureID);
        $uom = $this->unit_of_measure_details($UnitOfMeasureID);
        $data['unitOfMeasure'] = trim($uom['UnitShortCode'] ?? '');
        $data['defaultUOM'] = $item_data['defaultUnitOfMeasure'];
        $data['defaultUOMID'] = $item_data['defaultUnitOfMeasureID'];
        $data['conversionRateUOM'] = conversionRateUOM_id($data['unitOfMeasureID'], $data['defaultUOMID']);
        $data['requestedQty'] = trim($quantityRequested);
        $data['unittransactionAmount'] = trim($estimatedAmount);
        $data['transactionAmount'] = ($data['unittransactionAmount'] * trim($quantityRequested));
        $data['comment'] = trim($comment);
        $data['remarks'] = trim($remarks);
        $data['type'] = 'Item';
        if ($serviceitm['mainCategory'] != 'Service') {
            $data['wareHouseAutoID'] = trim($wareHouseAutoID);
            $data['wareHouseCode'] = trim($wareHouse_location['wareHouseCode'] ?? '');
            $data['wareHouseLocation'] = trim($wareHouse_location['wareHouseLocation'] ?? '');
            $data['wareHouseDescription'] = trim($wareHouse_location['wareHouseDescription'] ?? '');
        } else {
            $data['wareHouseAutoID'] = null;
            $data['wareHouseCode'] = null;
            $data['wareHouseLocation'] = null;
            $data['wareHouseDescription'] = null;
        }
        $data['companyLocalExchangeRate'] = $master['companyLocalExchangeRate'];
        $data['companyReportingExchangeRate'] = $master['companyReportingExchangeRate'];
        $data['customerCurrencyExchangeRate'] = $master['customerExchangeRate'];
        $data['companyLocalAmount'] = ($data['transactionAmount'] / $data['companyLocalExchangeRate']);
        $data['companyReportingAmount'] = ($data['transactionAmount'] / $data['companyReportingExchangeRate']);

        $data['customerAmount'] = 0;
        if ($data['customerCurrencyExchangeRate']) {
            $data['customerAmount'] = ($data['transactionAmount'] / $data['customerCurrencyExchangeRate']);
        }

        $data['unitcompanyLocalAmount'] = ($data['unittransactionAmount'] / $data['companyLocalExchangeRate']);
        $data['unitcompanyReportingAmount'] = ($data['unittransactionAmount'] / $data['companyReportingExchangeRate']);

        $data['unitpartyAmount'] = 0;
        if ($data['customerCurrencyExchangeRate']) {
            $data['unitpartyAmount'] = ($data['unittransactionAmount'] / $data['customerCurrencyExchangeRate']);
        }

        $data['segmentID'] = $master['segmentID'];
        $data['segmentCode'] = $master['segmentCode'];
        $data['GLAutoID'] = $item_data['revanueGLAutoID'];
        $data['systemGLCode'] = $item_data['revanueSystemGLCode'];
        $data['GLCode'] = $item_data['revanueGLCode'];
        $data['GLDescription'] = $item_data['revanueDescription'];
        $data['GLType'] = $item_data['revanueType'];
        $data['expenseGLAutoID'] = $item_data['costGLAutoID'];
        $data['expenseGLCode'] = $item_data['costGLCode'];
        $data['expenseSystemGLCode'] = $item_data['costSystemGLCode'];
        $data['expenseGLDescription'] = $item_data['costDescription'];
        $data['expenseGLType'] = $item_data['costType'];
        $data['revenueGLAutoID'] = $item_data['revanueGLAutoID'];
        $data['revenueGLCode'] = $item_data['revanueGLCode'];
        $data['revenueSystemGLCode'] = $item_data['revanueSystemGLCode'];
        $data['revenueGLDescription'] = $item_data['revanueDescription'];
        $data['revenueGLType'] = $item_data['revanueType'];
        $data['assetGLAutoID'] = $item_data['assteGLAutoID'];
        $data['assetGLCode'] = $item_data['assteGLCode'];
        $data['assetSystemGLCode'] = $item_data['assteSystemGLCode'];
        $data['assetGLDescription'] = $item_data['assteDescription'];
        $data['assetGLType'] = $item_data['assteType'];
        $data['companyLocalWacAmount'] = $item_data['companyLocalWacAmount'];
        $data['itemCategory'] = $item_data['mainCategory'];

        if (trim($this->input->post('receiptVoucherDetailAutoID') ?? '')) {
            $data['modifiedPCID'] = current_pc();
            $data['modifiedUserID'] = current_userID();
            $data['modifiedUserName'] = current_user();
            $data['modifiedDateTime'] = current_date();

            $this->db->where('receiptVoucherDetailAutoID', trim($this->input->post('receiptVoucherDetailAutoID') ?? ''));
            $this->db->update('srp_erp_customerreceiptdetail', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Receipt Voucher Details :  Save Failed ' . $this->db->_error_message());
            } else {
                $view = $this->fetch_receipt_voucher_item($this->input->post('receiptVoucherDetailAutoID'));
                $this->db->trans_commit();
                return array('s', 'Receipt Voucher Details : Saved Successfully.', $view);
            }

        } else {
            $data['companyID'] = current_companyID();
            $data['companyCode'] = current_companyCode();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $this->db->insert('srp_erp_customerreceiptdetail', $data);
            $last_id = $this->db->insert_id();

            $this->db->select('itemAutoID');
            $this->db->where('itemAutoID', trim($itemAutoID));
            $this->db->where('wareHouseAutoID', $data['wareHouseAutoID']);
            $this->db->where('companyID', current_companyID());
            $warehouseitems = $this->db->get('srp_erp_warehouseitems')->row_array();

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('e', 'Receipt Voucher Detail : ' . $data['itemSystemCode'] . ' Update Failed ' . $this->db->_error_message());
            } else {
                $view = $this->fetch_receipt_voucher_item($last_id);
                $this->db->trans_commit();
                return array('s', 'Receipt Voucher Detail : ' . $data['itemSystemCode'] . ' Updated Successfully .', $view);
            }
        }
    }

    function fetch_receipt_voucher_item($receiptVoucherDetailAutoID = null)
    {
        $detail_id = (!empty($receiptVoucherDetailAutoID)) ? $receiptVoucherDetailAutoID : $this->get('receiptVoucherDetailAutoID');

        $data = $this->db->select('receiptVoucherDetailAutoID, receiptVoucherAutoId, requestedQty, unittransactionAmount, transactionAmount')
            ->from('srp_erp_customerreceiptdetail')
            ->where('companyID', current_companyID())
            ->where('receiptVoucherDetailAutoID', $detail_id)->get()->row_array();

        $data['receiptVoucherDetailAutoID'] = (int)$data['receiptVoucherDetailAutoID'];
        $data['receiptVoucherAutoId'] = (int)$data['receiptVoucherAutoId'];
        $data['requestedQty'] = (float)$data['requestedQty'];
        $data['unittransactionAmount'] = (float)$data['unittransactionAmount'];
        $data['transactionAmount'] = (float)$data['transactionAmount'];

        return $data;
    }

    function save_receipt_general_tax()
    {
        $this->db->select('taxMasterAutoID');
        $this->db->where('receiptVoucherAutoId', $this->input->post('receiptVoucherAutoId'));
        $this->db->where('taxMasterAutoID', $this->input->post('text_type'));
        $tax_detail = $this->db->get('srp_erp_customerreceipttaxdetails')->row_array();
        if (!empty($tax_detail)) {
            return array('status' => 0, 'data' => ' Tax Detail added already!');
        }

        $this->db->trans_start();
        $this->db->select('*');
        $this->db->where('taxMasterAutoID', $this->input->post('text_type'));
        $this->db->from('srp_erp_taxmaster');
        $master = $this->db->get()->row_array();

        $this->db->select('transactionCurrency,transactionExchangeRate,transactionCurrencyDecimalPlaces ,transactionCurrencyID, companyLocalCurrency, companyLocalExchangeRate,companyLocalCurrencyDecimalPlaces, companyReportingCurrency, companyReportingExchangeRate, companyReportingCurrencyDecimalPlaces,companyLocalCurrencyID, companyReportingCurrencyID');
        $this->db->where('receiptVoucherAutoId', $this->input->post('receiptVoucherAutoId'));
        $inv_master = $this->db->get('srp_erp_customerreceiptmaster')->row_array();

        $data['receiptVoucherAutoId'] = trim($this->input->post('receiptVoucherAutoId') ?? '');
        $data['taxMasterAutoID'] = $master['taxMasterAutoID'];
        $data['taxDescription'] = $master['taxDescription'];
        $data['taxShortCode'] = $master['taxShortCode'];
        $data['supplierAutoID'] = $master['supplierAutoID'];
        $data['supplierSystemCode'] = $master['supplierSystemCode'];
        $data['supplierName'] = $master['supplierName'];
        $data['supplierCurrencyID'] = $master['supplierCurrencyID'];
        $data['supplierCurrency'] = $master['supplierCurrency'];
        $data['supplierCurrencyDecimalPlaces'] = $master['supplierCurrencyDecimalPlaces'];
        $data['GLAutoID'] = $master['supplierGLAutoID'];
        $data['systemGLCode'] = $master['supplierGLSystemGLCode'];
        $data['GLCode'] = $master['supplierGLAccount'];
        $data['GLDescription'] = $master['supplierGLDescription'];
        $data['GLType'] = $master['supplierGLType'];
        $data['taxPercentage'] = trim($this->input->post('percentage') ?? '');
        $data['transactionAmount'] = trim($this->input->post('amount') ?? '');
        $data['transactionCurrencyID'] = $inv_master['transactionCurrencyID'];
        $data['transactionCurrency'] = $inv_master['transactionCurrency'];
        $data['transactionExchangeRate'] = $inv_master['transactionExchangeRate'];
        $data['transactionCurrencyDecimalPlaces'] = $inv_master['transactionCurrencyDecimalPlaces'];
        $data['companyLocalCurrencyID'] = $inv_master['companyLocalCurrencyID'];
        $data['companyLocalCurrency'] = $inv_master['companyLocalCurrency'];
        $data['companyLocalExchangeRate'] = $inv_master['companyLocalExchangeRate'];
        $data['companyReportingCurrencyID'] = $inv_master['companyReportingCurrencyID'];
        $data['companyReportingCurrency'] = $inv_master['companyReportingCurrency'];
        $data['companyReportingExchangeRate'] = $inv_master['companyReportingExchangeRate'];

        $supplierCurrency = currency_conversion($data['transactionCurrency'], $data['supplierCurrency']);
        $data['supplierCurrencyExchangeRate'] = $supplierCurrency['conversion'];
        $data['supplierCurrencyDecimalPlaces'] = $supplierCurrency['DecimalPlaces'];
        $data['modifiedPCID'] = current_pc();
        $data['modifiedUserID'] = current_userID();
        $data['modifiedUserName'] = current_user();
        $data['modifiedDateTime'] = current_date();

        if (trim($this->input->post('taxDetailAutoID') ?? '')) {
            $this->db->where('taxDetailAutoID', trim($this->input->post('taxDetailAutoID') ?? ''));
            $this->db->update('srp_erp_customerreceipttaxdetails', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === 0) {
                $this->db->trans_rollback();
                return array('status' => 0, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Update Failed ');
            } else {
                $this->db->trans_commit();
                $view = $this->fetch_receipt_general_tax($this->input->post('receiptVoucherAutoId'),$this->input->post('taxDetailAutoID'));
                return array('status' => 1, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Updated Successfully.', 'view' => $view);
            }
        } else {
            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = current_pc();
            $data['createdUserID'] = current_userID();
            $data['createdUserName'] = current_user();
            $data['createdDateTime'] = current_date();
            $this->db->insert('srp_erp_customerreceipttaxdetails', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 0, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Save Failed ');
            } else {
                $this->db->trans_commit();
                $view = $this->fetch_receipt_general_tax($this->input->post('receiptVoucherAutoId'), $last_id);
                return array('status' => 1, 'data' => 'Tax Detail : ' . $data['GLDescription'] . ' Saved Successfully.', 'view' => $view);
            }
        }
    }

    function fetch_receipt_general_tax($master_id = null, $taxDetailAutoID = null)
    {
        $companyID = current_companyID();
        $data = $this->db->query("SELECT
                                    taxDetailAutoID AS taxAutoID,
                                    referenceNo AS narration,
                                    taxDescription AS taxDescription,
                                    taxShortCode,
                                    taxPercentage
                                FROM
                                    srp_erp_customerreceipttaxdetails 
                                WHERE
                                    companyID = {$companyID}
                                    AND srp_erp_customerreceipttaxdetails.receiptVoucherAutoId = {$master_id}
                                    AND srp_erp_customerreceipttaxdetails.taxDetailAutoID = {$taxDetailAutoID}")->row_array();

        $data['taxAutoID'] = (int)$data['taxAutoID'];
        $data['taxPercentage'] = (float)$data['taxPercentage'];
        return $data;
    }

    function confirm_receipt_voucher($id = null)
    {
        if(!empty($id)) {
            $receiptVoucherAutoId = $id;
        } else {
            $receiptVoucherAutoId = $this->input->post('receiptVoucherAutoId');
        }
        $locationwisecodegenerate = getPolicyValues('LDG', 'All');
        $companyID = current_companyID();
        $currentuser = current_userID();
        $emplocationid = current_emp_location();

        $mastertbl = $this->db->query("SELECT RVdate, RVchequeDate FROM `srp_erp_customerreceiptmaster` where companyID = $companyID And receiptVoucherAutoId = $receiptVoucherAutoId ")->row_array();
        $mastertbldetail = $this->db->query("SELECT receiptVoucherAutoId FROM `srp_erp_customerreceiptdetail` WHERE companyID = $companyID AND type = 'Item' AND receiptVoucherAutoId = $receiptVoucherAutoId")->row_array();
        $PostDatedChequeManagement = getPolicyValues('PDC', 'All'); // policy for post dated cheque
        $currentdate = current_date(false);
        $this->load->library('Approvals_mobile');
        $this->db->select('receiptVoucherAutoId');
        $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
        $this->db->from('srp_erp_customerreceiptdetail');
        $results = $this->db->get()->row_array();

        $this->db->select('confirmedYN');
        $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
        $this->db->from('srp_erp_customerreceiptmaster');
        $confirmed = $this->db->get()->row_array();
        if (empty($results)) {
            return array('error' => 1, 'message' => 'There are no records to confirm this document!');
        } else {
            if($confirmed['confirmedYN'] == 1){
                return array('error' => 1, 'message' => 'Document Already Confirmed!');
            } else {

                $receiptvoucherDetails = $this->db->query("select
                GROUP_CONCAT(itemAutoID) as itemAutoID
                from 
                srp_erp_customerreceiptdetail
                where 
                companyID = $companyID 
                AND receiptVoucherAutoId = $receiptVoucherAutoId")->row("itemAutoID");

if(!empty($receiptvoucherDetails)){ 
$wacTransactionAmountValidation  = fetch_itemledger_transactionAmount_validation("$receiptvoucherDetails");
if(!empty($wacTransactionAmountValidation)){ 
    return array('error' => 1, 'message' => 'You cannot approve this document. Some document are having items with minus wac');
}

}


                $taxamnt = 0;
                $GL = $this->db->query("SELECT SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.receiptVoucherAutoId = {$receiptVoucherAutoId} AND srp_erp_customerreceiptdetail.type='GL' GROUP BY receiptVoucherAutoId")->row_array();

                if (empty($GL)) {
                    $GL = 0;
                } else {
                    $GL = $GL['transactionAmount'];
                }
                $Item = $this->db->query("SELECT SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.receiptVoucherAutoId = {$receiptVoucherAutoId} AND srp_erp_customerreceiptdetail.type='Item' GROUP BY receiptVoucherAutoId")->row_array();
                if (empty($Item)) {
                    $Item = 0;
                } else {
                    $Item = $Item['transactionAmount'];
                }
                $creditnote = $this->db->query("SELECT SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.receiptVoucherAutoId = {$receiptVoucherAutoId} AND srp_erp_customerreceiptdetail.type='creditnote' GROUP BY receiptVoucherAutoId")->row_array();
                if (empty($creditnote)) {
                    $creditnote = 0;
                } else {
                    $creditnote = $creditnote['transactionAmount'];
                }
                $Advance = $this->db->query("SELECT	SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.receiptVoucherAutoId = {$receiptVoucherAutoId} AND srp_erp_customerreceiptdetail.type='Advance' GROUP BY receiptVoucherAutoId")->row_array();
                if (empty($Advance)) {
                    $Advance = 0;
                } else {
                    $Advance = $Advance['transactionAmount'];
                }
                $Invoice = $this->db->query("SELECT	SUM(srp_erp_customerreceiptdetail.transactionAmount) as transactionAmount FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.receiptVoucherAutoId = {$receiptVoucherAutoId} AND srp_erp_customerreceiptdetail.type='Invoice' GROUP BY receiptVoucherAutoId")->row_array();
                if (empty($Invoice)) {
                    $Invoice = 0;
                } else {
                    $Invoice = $Invoice['transactionAmount'];
                }
                $tax = $this->db->query("SELECT	SUM(srp_erp_customerreceipttaxdetails.taxPercentage) as taxPercentage FROM srp_erp_customerreceipttaxdetails WHERE srp_erp_customerreceipttaxdetails.receiptVoucherAutoId = {$receiptVoucherAutoId} GROUP BY receiptVoucherAutoId")->row_array();
                if (empty($tax)) {
                    $tax = 0;
                } else {
                    $tax = $tax['taxPercentage'];
                    $taxamnt = (($Item + $GL) / 100) * $tax;
                }
                $totalamnt = ($Item + $GL + $Invoice + $Advance + $taxamnt) - $creditnote;

                if ($totalamnt < 0) {
                    return array('error' => 1, 'message' => 'Grand total should be greater than 0');
                } else {
                    $this->db->select('documentID, RVcode,DATE_FORMAT(RVdate, "%Y") as invYear,DATE_FORMAT(RVdate, "%m") as invMonth,companyFinanceYearID');
                    $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
                    $this->db->from('srp_erp_customerreceiptmaster');
                    $master_dt = $this->db->get()->row_array();
                    $this->load->library('sequence');
                    if ($master_dt['RVcode'] == "0") {
                        if ($locationwisecodegenerate == 1) {
                            $this->db->select('locationID');
                            $this->db->where('EIdNo', $currentuser);
                            $this->db->where('Erp_companyID', $companyID);
                            $this->db->from('srp_employeesdetails');
                            $location = $this->db->get()->row_array();
                            if ((empty($location)) || ($location == '')) {
                                return array('error' => 1, 'message' => 'Location is not assigned for current employee');
                            } else {
                                if ($emplocationid != '') {
                                    $RVcode = $this->sequence->sequence_generator_location($master_dt['documentID'], $master_dt['companyFinanceYearID'], current_emp_location(), $master_dt['invYear'], $master_dt['invMonth']);
                                } else {
                                    return array('error' => 1, 'message' => 'Location is not assigned for current employee');
                                }
                            }
                        } else {
                            $RVcode = $this->sequence->sequence_generator_fin($master_dt['documentID'], $master_dt['companyFinanceYearID'], $master_dt['invYear'], $master_dt['invMonth']);
                        }
                        $rvcd = array(
                            'RVcode' => $RVcode
                        );
                        $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
                        $this->db->update('srp_erp_customerreceiptmaster', $rvcd);
                    }

                    $tamount = array(
                        'transactionAmount' => $totalamnt
                    );
                    $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
                    $this->db->update('srp_erp_customerreceiptmaster', $tamount);

                    $this->db->select('documentID,receiptVoucherAutoId, RVcode,DATE_FORMAT(RVdate, "%Y") as invYear,DATE_FORMAT(RVdate, "%m") as invMonth,companyFinanceYearID,RVdate');
                    $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
                    $this->db->from('srp_erp_customerreceiptmaster');
                    $app_data = $this->db->get()->row_array();

                    $sql = "SELECT SUM(srp_erp_customerreceiptdetail.requestedQty / srp_erp_customerreceiptdetail.conversionRateUOM) AS qty,srp_erp_warehouseitems.currentStock,
                        (srp_erp_warehouseitems.currentStock - SUM(srp_erp_customerreceiptdetail.requestedQty / srp_erp_customerreceiptdetail.conversionRateUOM)) as stock ,
                        srp_erp_warehouseitems.itemAutoID as itemAutoID ,srp_erp_customerreceiptdetail.wareHouseAutoID 
                        FROM srp_erp_customerreceiptdetail 
                        INNER JOIN srp_erp_warehouseitems ON srp_erp_warehouseitems.itemAutoID = srp_erp_customerreceiptdetail.itemAutoID 
                        AND srp_erp_customerreceiptdetail.wareHouseAutoID = srp_erp_warehouseitems.wareHouseAutoID 
                        where receiptVoucherAutoId = '{$receiptVoucherAutoId}' AND itemCategory != 'Service' AND 
                        itemCategory != 'Non Inventory'  
                        GROUP BY itemAutoID
                        Having stock < 0";
                    $item_low_qty = $this->db->query($sql)->result_array();
                    if (!empty($item_low_qty)) {
                        return array('error' => 1, 'message' => 'Some Item quantities are not sufficient to confirm this transaction', 'itemAutoID' => $item_low_qty);
                    }

                    $autoApproval = get_document_auto_approval('RV');
                    if ($autoApproval == 0) {
                        if ($PostDatedChequeManagement == 1 && ($mastertbl['RVchequeDate'] != '' || !empty($mastertbl['RVchequeDate'])) && (empty($mastertbldetail['payVoucherAutoId']) || $mastertbldetail['payVoucherAutoId']==' ')) {
                            if ($mastertbl['RVchequeDate'] > $mastertbl['RVdate']) {
                                if ($currentdate >= $mastertbl['RVchequeDate']) {
                                    $approvals_status = $this->approvals_mobile->auto_approve($app_data['receiptVoucherAutoId'], 'srp_erp_customerreceiptmaster', 'receiptVoucherAutoId', 'RV', $app_data['RVcode'], $app_data['RVdate']);
                                } else {
                                    return array('error' => 1, 'message' => 'This is a post dated cheque document. you cannot approve this document before the cheque date.');
                                }
                            } else {
                                $approvals_status = $this->approvals_mobile->auto_approve($app_data['receiptVoucherAutoId'], 'srp_erp_customerreceiptmaster', 'receiptVoucherAutoId', 'RV', $app_data['RVcode'], $app_data['RVdate']);
                            }
                        } else {
                            $approvals_status = $this->approvals_mobile->auto_approve($app_data['receiptVoucherAutoId'], 'srp_erp_customerreceiptmaster', 'receiptVoucherAutoId', 'RV', $app_data['RVcode'], $app_data['RVdate']);
                        }
                    } elseif ($autoApproval == 1) {
                        $approvals_status = $this->approvals_mobile->CreateApproval('RV', $app_data['receiptVoucherAutoId'], $app_data['RVcode'], 'Receipt Voucher', 'srp_erp_customerreceiptmaster', 'receiptVoucherAutoId', 0, $app_data['RVdate']);
                    } else {
                        return array('error' => 1, 'message' => 'Approval levels are not set for this document');
                        exit;
                    }
                    if ($approvals_status == 1) {
                        /** item Master Sub check */
                        $documentID = trim($receiptVoucherAutoId);
                        $this->load->model('Receipt_voucher_model');
                        $validate = $this->Receipt_voucher_model->validate_itemMasterSub($documentID);
                        /** end of item master sub */
                        if ($validate) {
                            $autoApproval = get_document_auto_approval('RV');
                            if ($autoApproval == 0) {
                                $this->load->model('ApproveOther_Model');
                                $result = $this->approveOther_Model->save_rv_approval(0, $app_data['receiptVoucherAutoId'], 1, 'Auto Approved');
                                if ($result) {
                                    return array('error' => 0, 'message' => 'Document Confirmed Successfully!');
                                }
                            } else {
                                $data = array(
                                    'confirmedYN' => 1,
                                    'confirmedDate' => current_date(),
                                    'confirmedByEmpID' => current_userID(),
                                    'confirmedByName' => current_user()
                                );
                                $this->db->where('receiptVoucherAutoId', trim($receiptVoucherAutoId));
                                $this->db->update('srp_erp_customerreceiptmaster', $data);
                                return array('error' => 0, 'message' => 'Document Confirmed Successfully!');
                            }
                        } else {
                            return array('error' => 1, 'message' => 'Please complete your sub item configurations<br/><br/> Please add sub item/s before confirm this document.');
                        }
                    } else if ($approvals_status == 3) {
                        return array('error' => 1, 'message' => 'There are no users exist to perform approval for this document');
                    } else {
                        return array('error' => 1, 'message' => 'Confirm this transaction');
                    }
                }
            }
        }
    }

    function receipt_view()
    {
        $receiptVoucherAutoId = $this->input->get('receiptVoucherAutoId');
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $master = $this->db->query("SELECT
                                    srp_erp_customerreceiptmaster.receiptVoucherAutoId AS documentAutoID,
                                    RVcode AS documentCode, 
                                    DATE_FORMAT(RVdate,'{$convertFormat}') AS  documentDate,
                                    DATE_FORMAT(RVchequeDate,'{$convertFormat}') AS  RVchequeDate,
                                    RVType AS documentType, referanceNo, paymentType, modeOfPayment, 
                                    SalesPersonCode,
                                    RVbankCode, 
                                    bankGLAutoID, 
                                    bankSystemAccountCode, 
                                    bankGLSecondaryCode,
                                    RVbankAccount,
	                                RVchequeNo, 
	                                bankTransferDetails, 
	                                RVNarration, 
	                                customerID,
	                                customerName, 
	                                transactionCurrencyID AS currency, 
	                                isDeleted, 
	                                (((IFNULL( addondet.taxPercentage, 0 )/ 100 )* IFNULL( tyepdet.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )- IFNULL( Creditnots.transactionAmount, 0 )) AS transactionAmount,
                                     CASE
                                        WHEN (srp_erp_customerreceiptmaster.isDeleted = 1) THEN 5
                                        WHEN (srp_erp_customerreceiptmaster.confirmedYN = 3) THEN 4
                                        WHEN (srp_erp_customerreceiptmaster.approvedYN = 1 AND srp_erp_customerreceiptmaster.confirmedYN = 1) THEN 3
                                        WHEN (srp_erp_customerreceiptmaster.approvedYN = 0 AND srp_erp_customerreceiptmaster.confirmedYN = 1) THEN 2
                                        ELSE 1
                                    END status,
                                    CASE
                                            WHEN ( RVType = 'DirectItem' ) THEN 'Direct Item Receipt'
                                            WHEN ( RVType = 'DirectIncome' ) THEN 'Direct Income Receipt' 
                                            WHEN ( RVType = 'InvoicesAdvance' ) THEN 'Customer Advance Receipt' 
                                            WHEN ( RVType = 'CustomerInvoices' ) THEN 'Customer Invoice Receipt' 
                                            WHEN ( RVType = 'InvoicesItem' ) THEN 'Customer Item Receipt' 
                                            WHEN ( RVType = 'InvoicesIncome' ) THEN 'Customer Income Receipt' 
                                            WHEN ( RVType = 'Invoices' ) THEN 'Customer Receipt' 
                                            ELSE 'Direct Receipt'
                                        END documentTypeLabel,
                                    CONCAT(srp_erp_segment.segmentCode, ' - ', description) AS segmentCode
                                    FROM `srp_erp_customerreceiptmaster`
                                    LEFT JOIN srp_erp_segment on srp_erp_segment.segmentID = srp_erp_customerreceiptmaster.segmentID
	                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE ( srp_erp_customerreceiptdetail.type != 'creditnote' AND srp_erp_customerreceiptdetail.type != 'SLR' ) GROUP BY receiptVoucherAutoId ) det ON ( `det`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	                                LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, receiptVoucherAutoId FROM srp_erp_customerreceipttaxdetails GROUP BY receiptVoucherAutoId ) addondet ON ( `addondet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE srp_erp_customerreceiptdetail.type = 'GL' OR srp_erp_customerreceiptdetail.type = 'Item' GROUP BY receiptVoucherAutoId ) tyepdet ON ( `tyepdet`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId )
	                                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE (srp_erp_customerreceiptdetail.type = 'creditnote' OR srp_erp_customerreceiptdetail.type = 'SLR') GROUP BY receiptVoucherAutoId ) Creditnots ON ( `Creditnots`.`receiptVoucherAutoId` = srp_erp_customerreceiptmaster.receiptVoucherAutoId ) 
                                    WHERE `srp_erp_customerreceiptmaster`.`companyID` = {$companyID} ANd srp_erp_customerreceiptmaster.receiptVoucherAutoId = {$receiptVoucherAutoId}")->row_array();

        if(!empty($master)) {
            $master['documentAutoID'] = (int)$master['documentAutoID'];
            $master['customerID'] = (int)$master['customerID'];
            $master['status'] = (int)$master['status'];
            $master['paymentType'] = (int)$master['paymentType'];
            $master['modeOfPayment'] = (int)$master['modeOfPayment'];
            $master['isDeleted'] = (int)$master['isDeleted'];
            $master['bankGLAutoID'] = (int)$master['bankGLAutoID'];
            $master['RVbankAccount'] = (int)$master['RVbankAccount'];
            $master['transactionAmount'] = (double)$master['transactionAmount'];
            $currencyID = $master['currency'];
            $currency = $this->db->query("SELECT currencyID, CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
            if ($currency != null) {
                $currency['currencyID'] = (int)$currency['currencyID'];
                $currency['decimals'] = (int)$currency['decimals'];
            }
            $master['currency'] = $currency;

            $Itemdetails = array();
            $itemDetails = $this->db->query("SELECT
                                        receiptVoucherDetailAutoID AS documentDetailAutoID,
                                        itemAutoID,
                                        itemSystemCode,
                                        itemDescription,
                                        requestedQty,
                                        unitOfMeasureID,
                                        unitOfMeasure,
                                        unittransactionAmount AS unitAmount,
                                        discountPercentage AS discountPercentage,
                                        discountAmount AS discountAmount,
                                        transactionAmount AS totalAmount,
                                        COMMENT AS narration,
                                        CONCAT( wareHouseCode, ' | ', wareHouseDescription ) AS warehouse,
                                        wareHouseLocation AS wareHouseLocation,
                                        wareHouseAutoID AS wareHouseAutoID
                                    FROM
                                        srp_erp_customerreceiptdetail 
                                    WHERE
                                        companyID = {$companyID}
                                        AND receiptVoucherAutoId = {$receiptVoucherAutoId}
                                        AND type = 'Item'")->result_array();
            if(!empty($itemDetails)) {
                foreach ($itemDetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' : CASE 'itemAutoID' : CASE 'unitOfMeasureID' : CASE 'wareHouseAutoID' :
                            $a[$det] = (int)$val[$det];
                            BREAK;

                            CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            CASE 'requestedQty' : CASE 'discountPercentage' :
                            $a[$det] = (float)$val[$det];
                            BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    $this->db->select('srp_erp_unit_of_measure.UnitID,UnitShortCode,UnitDes,conversion');
                    $this->db->from('srp_erp_unitsconversion');
                    $this->db->join('srp_erp_unit_of_measure', 'srp_erp_unit_of_measure.UnitID = srp_erp_unitsconversion.subUnitID');
                    $this->db->where('masterUnitID',$val['unitOfMeasureID']);
                    $this->db->where('srp_erp_unitsconversion.companyID',$companyID);
                    $a['UOM'] = $this->db->get()->result_array();
                    foreach ($a['UOM'] as $key5 => $uom) {
                        $a['UOM'][$key5]['UnitID'] = (int)$uom['UnitID'];
                        $a['UOM'][$key5]['conversion'] = (double)$uom['conversion'];
                    }
                    array_push($Itemdetails, $a);
                }
            }
            $master['itemDetails'] = $Itemdetails;

            $GLdetails = array();
            $glDeatils = $this->db->query("SELECT
                                            receiptVoucherDetailAutoID AS documentDetailAutoID,
                                            GLCode AS GLCode,
                                            SystemGLCode AS GLSystemCode,
                                            GLDescription AS GLDescription,
                                            GLType AS GLType,
                                            CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                                            unittransactionAmount AS unitAmount,
                                            discountPercentage AS discountPercentage,
                                            discountAmount AS discountAmount,
                                            transactionAmount AS totalAmount,
                                            comment AS narration
                                        FROM
                                            srp_erp_customerreceiptdetail
                                        LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerreceiptdetail.segmentID 
                                        WHERE
                                            srp_erp_customerreceiptdetail.companyID = {$companyID} 
                                            AND receiptVoucherAutoId = {$receiptVoucherAutoId}
                                            AND type = 'GL'")->result_array();
            if(!empty($glDeatils)) {
                foreach ($glDeatils AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'unitAmount' : CASE 'discountAmount' : CASE 'totalAmount' : CASE 'debitAmount' : CASE 'creditAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            CASE 'discountPercentage' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($GLdetails, $a);
                }
            }
            $master['GLDetails'] = $GLdetails;

            $AdvanceDetails = array();
            $advancedetails = $this->db->query("SELECT
                                        receiptVoucherDetailAutoID AS documentDetailAutoID,
                                        transactionAmount AS totalAmount,
                                        comment AS narration 
                                    FROM
                                        srp_erp_customerreceiptdetail 
                                    WHERE
                                        companyID = {$companyID} 
                                        AND type = 'Advance' 
                                        AND receiptVoucherAutoId = {$receiptVoucherAutoId}")->result_array();
            if(!empty($advancedetails)) {
                foreach ($advancedetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'totalAmount' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($AdvanceDetails, $a);
                }
            }
            $master['AdvanceDetails'] = $GLdetails;

            $DocumentDetails = array();
            $documentdetails = $this->db->query("SELECT
                                    receiptVoucherDetailAutoID AS documentDetailAutoID,
                                    type AS docType,
                                    CASE 
                                        WHEN type = 'Invoice' THEN 'INV' 
                                        WHEN type = 'creditnote' THEN 'CN' ELSE 'SLR' 
                                    END AS documentID,
                                    invoiceCode AS pulledDocCode,
                                    invoiceDate AS pulledDocDate,
                                    Invoice_amount AS pulledDocAmount,
                                    due_amount AS dueAmount,
                                    balance_amount AS balanceAmount,
                                    referenceNo AS referenceNo,
                                    transactionAmount AS totalAmount,
                                    CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode
                                FROM
                                    srp_erp_customerreceiptdetail 
                                LEFT JOIN srp_erp_segment On srp_erp_segment.segmentID = srp_erp_customerreceiptdetail.segmentID
                                WHERE
                                    srp_erp_customerreceiptdetail.companyID = {$companyID} 
                                    AND receiptVoucherAutoId = {$receiptVoucherAutoId} 
                                    AND (
                                    type = 'Invoice' 
                                    OR type = 'creditnote')")->result_array();
            if(!empty($documentdetails)) {
                foreach ($documentdetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'documentDetailAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'pulledDocAmount' : CASE 'dueAmount' : CASE 'balanceAmount' : CASE 'totalAmount' :
                            $a[$det] = (double)$val[$det];
                            BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($DocumentDetails, $a);
                }
            }
            $master['DocumentDetails'] = $DocumentDetails;

            $Taxdetails = array();
            $taxDetails = $this->db->query("SELECT
                                        taxDetailAutoID AS taxAutoID,
                                        referenceNo AS narration,
                                        taxDescription AS taxDescription,
                                        taxShortCode,
                                        taxPercentage,
                                        (taxPercentage / 100) * amount AS taxAmount 
                                    FROM
                                        srp_erp_customerreceipttaxdetails
                                    LEFT JOIN ( SELECT SUM(transactionAmount) AS amount, receiptVoucherAutoId FROM srp_erp_customerreceiptdetail WHERE ( type = 'Item' OR type = 'GL' ) GROUP BY receiptVoucherAutoId ) rv ON rv.receiptVoucherAutoId = srp_erp_customerreceipttaxdetails.receiptVoucherAutoId
                                    WHERE
                                        companyID = {$companyID}
                                        AND srp_erp_customerreceipttaxdetails.receiptVoucherAutoId = {$receiptVoucherAutoId}")->result_array();
            if(!empty($taxDetails)) {
                foreach ($taxDetails AS $val){
                    $a = array();
                    foreach (array_keys($val) as $det) {
                        switch ($det) {
                            CASE 'taxAutoID' :
                                $a[$det] = (int)$val[$det];
                                BREAK;

                            CASE 'taxPercentage' :
                                $a[$det] = (float)$val[$det];
                                BREAK;

                            CASE 'taxAmount' :
                                $a[$det] = (double)$val[$det];
                                BREAK;

                            DEFAULT :
                                $a[$det] = $val[$det];
                        }
                    }
                    array_push($Taxdetails, $a);
                }
            }
            $master['addonTax'] = $Taxdetails;

            $this->db->where('documentSystemCode', $receiptVoucherAutoId);
            $this->db->where('documentID', 'RV');
            $this->db->where('companyID', $companyID);
            $data = $this->db->get('srp_erp_documentattachments')->result_array();
            $x = 1;
            $attachment_links = array();
            if (!empty($data)) {
                foreach ($data as $val) {
                    $attachment = array();

                    $attachment['id'] = (int)$val['attachmentID'];
                    $attachment['link'] = $this->s3->createPresignedRequest($val['myFileName'], '1 hour');
                    $attachment['type'] = $val['fileType'];
                    $attachment['fileName'] = $val['myFileName'];
                    $attachment['description'] = $val['attachmentDescription'];
                    array_push($attachment_links, $attachment);
                    $x++;
                }
            }
            $master['attachments'] = $attachment_links;

            $this->load->model('Mobile_leaveApp_Model');
            $master['approval_details']=$this->Mobile_leaveApp_Model->fetch_all_approval_users_modal($companyID, "RV", $receiptVoucherAutoId);
        }
        return $master;
    }

    /** Customer Invoice Codes*/
    function create_customer_invoice_header()
    {
        $this->db->trans_start();
        $date_format_policy = date_format_policy();
        $invDueDate = $this->input->post('invoiceDueDate');
        $invoiceDueDate = input_format_date($invDueDate, $date_format_policy);
        $invDate = $this->input->post('invoiceDate');
        $invoiceDate = input_format_date($invDate, $date_format_policy);
        $customerDate = $this->input->post('customerInvoiceDate');
        $customerInvoiceDate = input_format_date($customerDate, $date_format_policy);
        $customerID = $this->input->post('customerID');
        $invoicetype = $this->input->post('invoiceType');
        $invoiceAutoID = $this->input->post('invoiceAutoID');
        $projectID =  $this->input->post('projectID');
        if($invoiceAutoID) {
            $projectID_detail = $this->db->query("SELECT projectID FROM srp_erp_customerinvoicemaster WHERE invoiceAutoID = {$invoiceAutoID}")->row_array();
            $detailexist = $this->db->query("SELECT invoiceDetailsAutoID FROM`srp_erp_customerinvoicedetails` where invoiceAutoID = {$invoiceAutoID} AND type = 'Project'")->result_array();
        }
        if(($invoicetype =='Project')&&(!empty($invoiceAutoID))&&($projectID!=$projectID_detail['projectID']&&$projectID_detail['projectID']!=''))
        {
            if((!empty($detailexist)&&($detailexist!='')))
            {
                return array('status' => 'error', 'message' => 'Please delete all the records and change the project!', 'view'=> null);
            }
        }

        $rebate = getPolicyValues('CRP', 'All');
        if($rebate == 1) {
            $rebateDet = $this->db->query("SELECT rebatePercentage, rebateGLAutoID FROM `srp_erp_customermaster` WHERE customerAutoID = {$customerID}")->row_array();
            if(!empty($rebate)) {
                $data['rebateGLAutoID'] = $rebateDet['rebateGLAutoID'];
                $data['rebatePercentage'] = $rebateDet['rebatePercentage'];
            }
        } else {
            $data['rebateGLAutoID'] = null;
            $data['rebatePercentage'] = null;
        }
        $financeYearDetails=get_financial_year($invoiceDate);
        if(empty($financeYearDetails)){
            return array('status' => 'error', 'message' => 'Finance Year not found for the selected document date!', 'view'=> null);
        }else{
            $FYBegin=$financeYearDetails['beginingDate'];
            $FYEnd=$financeYearDetails['endingDate'];
            $_POST['companyFinanceYear'] = $FYBegin.' - '.$FYEnd;
            $_POST['financeyear'] = $financeYearDetails['companyFinanceYearID'];
        }
        $financePeriodDetails=get_financial_period_date_wise($invoiceDate);

        if(empty($financePeriodDetails)){
            return array('status' => 'error', 'message' => 'Finance period not found for the selected document date!', 'view'=> null);
        }else{
            $_POST['financeyear_period'] = $financePeriodDetails['companyFinancePeriodID'];
        }

        $segmentID = trim($this->input->post('segmentID') ?? '');
        $segmentCode = $this->db->query("SELECT segmentCode FROM srp_erp_segment WHERE segmentID = {$segmentID}")->row('segmentCode');

        $this->db->select('*');
        $this->db->from('srp_erp_customermaster');
        $this->db->where('customerAutoID', trim($this->input->post('customerID') ?? ''));
        $customer_arr = $this->db->get()->row_array();
//        $customer_arr = $this->fetch_customer_data(trim($this->input->post('customerID') ?? ''));
        $transactionCurrencyID = trim($this->input->post('transactionCurrencyID') ?? '');
        $transCurrencyCode = fetch_currency_code($transactionCurrencyID);

        if ($this->input->post('RVbankCode')) {
            $bank_detail = fetch_gl_account_desc(trim($this->input->post('RVbankCode') ?? ''));
            $data['bankGLAutoID'] = $bank_detail['GLAutoID'];
            $data['bankSystemAccountCode'] = $bank_detail['systemAccountCode'];
            $data['bankGLSecondaryCode'] = $bank_detail['GLSecondaryCode'];
            $data['bankCurrencyID'] = $bank_detail['bankCurrencyID'];
            $data['bankCurrency'] = $bank_detail['bankCurrencyCode'];
            $data['invoicebank'] = $bank_detail['bankName'];
            $data['invoicebankBranch'] = $bank_detail['bankBranch'];
            $data['invoicebankSwiftCode'] = $bank_detail['bankSwiftCode'];
            $data['invoicebankAccount'] = $bank_detail['bankAccountNumber'];
            $data['invoicebankType'] = $bank_detail['subCategory'];
        }
        $data['documentID'] = 'CINV';
        $data['companyFinanceYearID'] = trim($this->input->post('financeyear') ?? '');
        $data['companyFinanceYear'] = trim($this->input->post('companyFinanceYear') ?? '');
        $data['contactPersonName'] = trim($this->input->post('contactPersonName') ?? '');
        $data['contactPersonNumber'] = trim($this->input->post('contactPersonNumber') ?? '');
        $data['FYBegin'] = trim($FYBegin);
        $data['FYEnd'] = trim($FYEnd);
        $data['companyFinancePeriodID'] = trim($this->input->post('financeyear_period') ?? '');
        $data['projectID'] = $projectID;
        $data['invoiceDate'] = trim($invoiceDate);
        $data['customerInvoiceDate'] = trim($customerInvoiceDate);
        $data['invoiceDueDate'] = trim($invoiceDueDate);

        $invoiceNarration = ($this->input->post('invoiceNarration'));
        $data['invoiceNarration'] = str_replace('<br />', PHP_EOL, $invoiceNarration);
        //$data['invoiceNarration'] = trim_desc($this->input->post('invoiceNarration'));
        $data['invoiceNote'] = trim($this->input->post('invoiceNote') ?? '');
        $data['segmentID'] = trim($segmentID);
        $data['segmentCode'] = trim($segmentCode);
        $data['salesPersonID'] = trim($this->input->post('salesPersonID') ?? '');
        if ($data['salesPersonID']) {
            $salesPersonID = trim($this->input->post('salesPersonID') ?? '');
            $this->db->select("SalesPersonCode");
            $this->db->from('srp_erp_salespersonmaster');
            $this->db->where('companyID', current_companyID());
            $this->db->where('salesPersonID', $salesPersonID);
            $sales_person = $this->db->get()->row('SalesPersonCode');

            $data['SalesPersonCode'] = trim($sales_person);
        }
        // $data['wareHouseCode'] = trim($location[0] ?? '');
        // $data['wareHouseLocation'] = trim($location[1] ?? '');
        // $data['wareHouseDescription'] = trim($location[2] ?? '');
        $data['invoiceType'] = trim($this->input->post('invoiceType') ?? '');
        if($this->input->post('invoiceType')=='Operation'){
            $data['isOpYN'] =1;
        }
        $data['referenceNo'] = trim($this->input->post('referenceNo') ?? '');
        $data['isPrintDN'] = trim($this->input->post('isPrintDN') ?? '');
        $data['customerID'] = $customer_arr['customerAutoID'];
        $data['customerSystemCode'] = $customer_arr['customerSystemCode'];
        $data['customerName'] = $customer_arr['customerName'];
        $data['customerAddress'] = $customer_arr['customerAddress1'] . ' ' . $customer_arr['customerAddress2'];
        $data['customerTelephone'] = $customer_arr['customerTelephone'];
        $data['customerFax'] = $customer_arr['customerFax'];
        $data['customerEmail'] = $customer_arr['customerEmail'];
        $data['customerReceivableAutoID'] = $customer_arr['receivableAutoID'];
        $data['customerReceivableSystemGLCode'] = $customer_arr['receivableSystemGLCode'];
        $data['customerReceivableGLAccount'] = $customer_arr['receivableGLAccount'];
        $data['customerReceivableDescription'] = $customer_arr['receivableDescription'];
        $data['customerReceivableType'] = $customer_arr['receivableType'];
        $data['customerCurrency'] = $customer_arr['customerCurrency'];
        $data['customerCurrencyID'] = $customer_arr['customerCurrencyID'];
        $data['customerCurrencyDecimalPlaces'] = $customer_arr['customerCurrencyDecimalPlaces'];

        $current_pc = current_pc();
        $current_userID = current_userID();
        $current_user = current_user();
        $current_date = current_date();

        $data['transactionCurrencyID'] = trim($this->input->post('transactionCurrencyID') ?? '');
        $data['transactionCurrency'] = trim($transCurrencyCode);
        $data['transactionExchangeRate'] = 1;
        $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
        $data['companyLocalCurrencyID'] = current_company_default_currencyID();
        $data['companyLocalCurrency'] = fetch_currency_code($data['companyLocalCurrencyID']);
        $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
        $data['companyLocalExchangeRate'] = $default_currency['conversion'];
        $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
        $data['companyReportingCurrencyID'] = current_company_reporting_currencyID();
        $data['companyReportingCurrency'] = fetch_currency_code($data['companyReportingCurrencyID']);
        $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
        $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
        $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
        $customer_currency = currency_conversionID($data['transactionCurrencyID'], $data['customerCurrencyID']);
        $data['customerCurrencyExchangeRate'] = $customer_currency['conversion'];
        $data['customerCurrencyDecimalPlaces'] = $customer_currency['DecimalPlaces'];

        if (trim($this->input->post('invoiceAutoID') ?? '')) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $current_userID;
            $data['modifiedUserName'] = $current_user;
            $data['modifiedDateTime'] = $current_date;

            if($projectID_detail['projectID'] != $projectID)
            {
                $invoiceExist = $this->db->query("SELECT invoiceAutoID,invoiceCode,IF(referenceNo = '','-',referenceNo) as referenceNo FROM
	                                             `srp_erp_customerinvoicemaster` WHERE approvedYN = 0 AND projectID = {$projectID}")->row_array();
                if((!empty($invoiceExist))&&($invoicetype == 'Project'))
                {
                    return array('status' => 'error', 'message' => 'There is an unapproved invoice exist for selected project!', 'view'=> null);
                }
            }
            $this->db->where('invoiceAutoID', trim($this->input->post('invoiceAutoID') ?? ''));
            $this->db->update('srp_erp_customerinvoicemaster', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 'error', 'message' => 'Invoice Update Failed!', 'view'=> null);
            } else {
                /*if(($invoicetype == 'Project'))
                {
                    $cutomerinvoiceexist = $this->db->query("SELECT srp_erp_customerinvoicedetails.invoiceDetailsAutoID FROM `srp_erp_customerinvoicedetails`
                LEFT JOIN srp_erp_customerinvoicemaster invoicemaster on invoicemaster.invoiceAutoID = srp_erp_customerinvoicedetails.invoiceAutoID
	            where type = 'Project' AND invoicemaster.InvoiceAutoID = {$invoiceAutoID}  AND invoicemaster.projectID = {$projectID}")->row_array();

                    if(($invoicetype == 'Project')&&((empty($cutomerinvoiceexist['invoiceDetailsAutoID']))||($cutomerinvoiceexist['invoiceDetailsAutoID'] == '')))
                    {

                        $this->save_project_detail($invoiceAutoID,$projectID);
                    }
                }*/

                update_warehouse_items();
                update_item_master();
                $this->db->trans_commit();
                return array('status' => 'success', 'message' => 'Invoice Updated Successfully!', 'view'=> (int)$this->input->post('invoiceAutoID'));
//                return array('status' => true, 'last_id' => $this->input->post('invoiceAutoID'));
            }
        } else {
            /*if($invoicetype == 'Project')
            {
                $invoiceExist = $this->db->query("SELECT invoiceAutoID,invoiceCode,IF(referenceNo = '','-',referenceNo) as referenceNo FROM
	                                         `srp_erp_customerinvoicemaster` WHERE  approvedYN = 0 AND projectID = $projectID")->row_array();
                if((!empty($invoiceExist))&&($invoicetype == 'Project'))
                {
                    $this->session->set_flashdata('e', 'There is an unapproved invoice exist for selected project');
                    return array('status' => false);
                    exit;
                }

            }*/

            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $current_userID;
            $data['createdUserName'] = $current_user;
            $data['createdDateTime'] = $current_date;
            $data['invoiceCode'] = 0;
            //if ($data['isPrintDN']==1) {
            $data['deliveryNoteSystemCode'] = $this->sequence->sequence_generator('DLN');
            //}

            $this->db->insert('srp_erp_customerinvoicemaster', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('status' => 'error', 'message' => 'Invoice Saved Failed!', 'view'=> null);
            } else {
                update_warehouse_items();
                update_item_master();
               /* if(($invoicetype == 'Project'))
                {
                    $this->save_project_detail($last_id,$projectID);
                }*/
                $this->db->trans_commit();
                return array('status' => 'success', 'message' => 'Invoice Saved Successfully!', 'view'=> (int)$last_id);
            }
        }
    }

    function fetch_customer_invoices()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $date_format_policy = date_format_policy();
        $start_date = $this->input->get('date_range_start');
        $start_date = input_format_date($start_date, $date_format_policy);
        $end_date = $this->input->get('date_range_end');
        $end_date = input_format_date($end_date, $date_format_policy);
        $status = $this->input->get('status');

        $where = "";
        switch ($status) {
            case 1:
                $where = "AND confirmedYN = 0 AND isDeleted != 1";
                break;
            case 2:
                $where = "AND confirmedYN = 1 AND approvedYN = 0";
                break;
            case 3:
                $where = "AND approvedYN = 1";
                break;
            case 4:
                $where = "AND confirmedYN = 3 AND isDeleted != 1";
                break;
            case 5:
                $where = "AND isDeleted = 1";
                break;
        }

        $data = $this->db->query("SELECT isDeleted,srp_erp_customerinvoicemaster.invoiceAutoID AS documentAutoID, invoiceType, documentID, isSytemGenerated, invoiceCode AS documentCode, referenceNo,
                        invoiceNarration AS Narration, salesPersonID, SalesPersonCode, invoiceNote, contactPersonName, contactPersonNumber, customerID, customerSystemCode,
	                    customerName, segmentID, segmentCode, isPrintDN, transactionCurrencyID AS currency,
	                    DATE_FORMAT(invoiceDate,'{$convertFormat}') AS invoiceDate,
	                    DATE_FORMAT(invoiceDueDate,'{$convertFormat}') AS invoiceDueDate,
	                    DATE_FORMAT(customerInvoiceDate,'{$convertFormat}') AS customerInvoiceDate,
                        CASE
                                WHEN ( isDeleted = 1 ) THEN 5 
                                WHEN ( confirmedYN = 3 ) THEN 4 
                                WHEN ( approvedYN = 1 AND confirmedYN = 1 ) THEN 3 
                                WHEN ( approvedYN = 0 AND confirmedYN = 1 ) THEN 2 
                                ELSE 1 
                        END documentStatus,
                        CASE
                                WHEN ( invoiceType = 'DeliveryOrder' ) THEN 'Delivery Order' 
                                WHEN ( invoiceType = 'DirectItem' ) THEN 'Direct Item' 
                                WHEN ( invoiceType = 'DirectIncome' ) THEN 'Direct Income' 
                                WHEN ( invoiceType = 'Quotation' ) THEN 'Quotation Based' 
                                WHEN ( invoiceType = 'Contract' ) THEN 'Contract Based' 
                                WHEN ( invoiceType = 'Sales Order' ) THEN 'Sales Order Based' 
                                WHEN ( invoiceType = 'Manufacturing' ) THEN 'Manufacturing' 
                                WHEN ( invoiceType = 'Operation' ) THEN 'Operation' 
                                WHEN ( invoiceType = 'Project' ) THEN 'Project' 
                                ELSE 'Direct'
                        END documentTypeLabel,
                        ( IFNULL( addondet.taxPercentage, 0 )/ 100 )*(IFNULL( det.transactionAmount, 0 )- IFNULL( det.detailtaxamount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100 )* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexchargistax.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexcharg.transactionAmount, 0 ) - IFNULL( retensionTransactionAmount, 0 ) - IFNULL( rebateAmount, 0 ) AS total_value
                        FROM srp_erp_customerinvoicemaster
                        LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) det ON ( `det`.`invoiceAutoID` = srp_erp_customerinvoicemaster.invoiceAutoID )
	LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
	LEFT JOIN ( SELECT SUM( discountPercentage ) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON ( `gendiscount`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
	LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON ( `genexchargistax`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
	LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON ( `genexcharg`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
                        WHERE companyID = {$companyID} AND invoiceDate BETWEEN '{$start_date} 00:00:00' AND '{$end_date} 23:59:00' {$where} ORDER BY srp_erp_customerinvoicemaster.invoiceAutoID DESC")->result_array();

        foreach ($data as $key=> $row)
        {
            $data[$key]['documentAutoID'] = (int)$row['documentAutoID'];
            $data[$key]['isSytemGenerated'] = (int)$row['isSytemGenerated'];
            $data[$key]['salesPersonID'] = (int)$row['salesPersonID'];
            $data[$key]['customerID'] = (int)$row['customerID'];
            $data[$key]['segmentID'] = (int)$row['segmentID'];
            $data[$key]['isPrintDN'] = (int)$row['isPrintDN'];
            $data[$key]['documentStatus'] = (int)$row['documentStatus'];
            $data[$key]['contactPersonNumber'] = (int)$row['contactPersonNumber'];
            $data[$key]['amount'] = (double)$row['total_value'];
            $currencyID = (int)$row['currency'];
            $currency = $this->db->query("SELECT CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description
                                           FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
            if ($currency != null) {
                $currency['decimals'] = (int)$currency['decimals'];
            }
            $data[$key]['currency'] = $currency;
        }
        return $data;
    }

    function delete_customerInvoice($invoiceAutoID)
    {
        $this->db->select('*');
        $this->db->from('srp_erp_customerinvoicedetails');
        $this->db->where('invoiceAutoID', trim($invoiceAutoID));
        $datas = $this->db->get()->row_array();

        $this->db->select('invoiceCode');
        $this->db->from('srp_erp_customerinvoicemaster');
        $this->db->where('invoiceAutoID', trim($invoiceAutoID));
        $master = $this->db->get()->row_array();

        if ($datas) {
            return array('type' => false, 'message' => 'please delete all detail records before delete this document!');
        } else {
            $lenth=strlen($master['invoiceCode']);
            if($lenth > 1){
                $data = array(
                    'isDeleted' => 1,
                    'deletedEmpID' => current_userID(),
                    'deletedDate' => current_date(),
                );
                $this->db->where('invoiceAutoID', trim($invoiceAutoID));
                $this->db->update('srp_erp_customerinvoicemaster', $data);
                return array('type' => true, 'message' => 'Invoice Deleted Successfully!');
            }else{
                $this->db->where('invoiceAutoID', $invoiceAutoID);
                $results = $this->db->delete('srp_erp_customerinvoicemaster');
                if ($results) {
                    $this->db->where('InvoiceAutoID', $invoiceAutoID);
                    $this->db->delete('srp_erp_customerinvoicedetails');
                    return array('type' => true, 'message' => 'Invoice Deleted Successfully!');
                }
            }

        }
    }

    function create_customer_invoice_item()
    {
//        $projectExist = project_is_exist();
        $companyID = current_companyID();
        $current_pc = current_pc();
        $current_user = current_user();
        $current_userID = current_userID();
        $current_date = current_date();
        $invoiceDetailsAutoID = $this->input->post('invoiceDetailsAutoID');
        $invoiceAutoID = $this->input->post('invoiceAutoID');
        $itemAutoID = $this->input->post('itemAutoID');
        $item_tax = $this->input->post('item_tax');
        $UnitOfMeasureID = $this->input->post('UnitOfMeasureID');
        $projectID = $this->input->post('projectID');
        $quantityRequested = $this->input->post('quantityRequested');
        $item_taxPercentage = $this->input->post('item_taxPercentage');
        $comment = $this->input->post('comment');
        $remarks = $this->input->post('remarks');
        $wareHouseAutoID = $this->input->post('wareHouseAutoID');
        $estimatedAmount = $this->input->post('estimatedAmount');
        $discount = $this->input->post('discount');
        $discount_amount = $this->input->post('discount_amount');
        $SUOMQty = $this->input->post('SUOMQty');
        $SUOMIDhn = $this->input->post('SUOMIDhn');

        $noOfItems = $this->input->post('noOfItems');
        $grossQty = $this->input->post('grossQty');
        $noOfUnits = $this->input->post('noOfUnits');
        $deduction = $this->input->post('deduction');

        $this->db->trans_start();
        $this->db->select('companyLocalExchangeRate,companyReportingExchangeRate,customerCurrencyExchangeRate ,transactionCurrency,segmentID,segmentCode,transactionCurrencyDecimalPlaces,companyLocalCurrencyDecimalPlaces,companyReportingCurrencyDecimalPlaces,customerCurrencyDecimalPlaces,transactionCurrencyID');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $master = $this->db->get('srp_erp_customerinvoicemaster')->row_array();

        $tax_master = array();
        $this->db->select('mainCategory');
        $this->db->from('srp_erp_itemmaster');
        $this->db->where('itemAutoID', $itemAutoID);
        $serviceitm= $this->db->get()->row_array();

        if (isset($item_tax)) {
            $this->db->select('*');
            $this->db->where('taxMasterAutoID', $item_tax);
            $tax_master = $this->db->get('srp_erp_taxmaster')->row_array();

            $this->db->select('*');
            $this->db->where('supplierSystemCode', $tax_master['supplierSystemCode']);
            $Supplier_master = $this->db->get('srp_erp_suppliermaster')->row_array();

            $this->db->select('srp_erp_taxmaster.*,srp_erp_chartofaccounts.GLAutoID as liabilityAutoID,srp_erp_chartofaccounts.systemAccountCode as liabilitySystemGLCode,srp_erp_chartofaccounts.GLSecondaryCode as liabilityGLAccount,srp_erp_chartofaccounts.GLDescription as liabilityDescription,srp_erp_chartofaccounts.CategoryTypeDescription as liabilityType,srp_erp_currencymaster.CurrencyCode,srp_erp_currencymaster.DecimalPlaces');
            $this->db->where('taxMasterAutoID', $item_tax);
            $this->db->from('srp_erp_taxmaster');
            $this->db->join('srp_erp_chartofaccounts', 'srp_erp_chartofaccounts.GLAutoID = srp_erp_taxmaster.supplierGLAutoID');
            $this->db->join('srp_erp_currencymaster', 'srp_erp_currencymaster.currencyID = srp_erp_taxmaster.supplierCurrencyID');
            $tax_master = $this->db->get()->row_array();
        }

        $item_arr = fetch_item_data($itemAutoID);

        $wareHouse_location = $this->warehouse_details($wareHouseAutoID);
        $uom = $this->unit_of_measure_details($UnitOfMeasureID);
        $project_categoryID = $this->input->post('project_categoryID');
        $project_subCategoryID = $this->input->post('project_subCategoryID');

        $data['invoiceAutoID'] = trim($invoiceAutoID);
        $data['itemAutoID'] = $itemAutoID;
        $data['itemSystemCode'] = $item_arr['itemSystemCode'];
        $projectExist = 0;
        if ($projectExist == 1) {
            $projectCurrency = project_currency($projectID);
            $projectCurrencyExchangerate = currency_conversionID($master['transactionCurrencyID'], $projectCurrency);
            $data['projectID'] = $projectID;
            $data['projectExchangeRate'] = $projectCurrencyExchangerate['conversion'];
            $data['project_categoryID'] = $project_categoryID;
            $data['project_subCategoryID'] = $project_subCategoryID;
        }
        $data['itemDescription'] = $item_arr['itemDescription'];

        $data['SUOMQty'] = $SUOMQty;
        $data['SUOMID'] = $SUOMIDhn;
        $data['unitOfMeasure'] = trim($uom['UnitShortCode'] ?? '');
        $data['unitOfMeasureID'] = $UnitOfMeasureID;
        $data['defaultUOM'] = $item_arr['defaultUnitOfMeasure'];
        $data['defaultUOMID'] = $item_arr['defaultUnitOfMeasureID'];
        $data['conversionRateUOM'] = conversionRateUOM_id($data['unitOfMeasureID'], $data['defaultUOMID']);
        $data['requestedQty'] = $quantityRequested;
        $data['discountPercentage'] = $discount;
        $data['discountAmount'] = $discount_amount;

        $amountafterdiscount = $estimatedAmount - $data['discountAmount'];
        $data['unittransactionAmount'] = round($estimatedAmount, $master['transactionCurrencyDecimalPlaces']);
        $data['taxPercentage'] = $item_taxPercentage;
        $taxAmount = ($data['taxPercentage'] / 100) * $amountafterdiscount;
        $data['taxAmount'] = round($taxAmount, $master['transactionCurrencyDecimalPlaces']);
        $totalAfterTax = $data['taxAmount'] * $data['requestedQty'];
        $data['totalAfterTax'] = round($totalAfterTax, $master['transactionCurrencyDecimalPlaces']);
        $transactionAmount = ($data['taxAmount'] + $amountafterdiscount) * $quantityRequested;
        $data['transactionAmount'] = round($transactionAmount, $master['transactionCurrencyDecimalPlaces']);
        $companyLocalAmount = $data['transactionAmount'] / $master['companyLocalExchangeRate'];
        $data['companyLocalAmount'] = round($companyLocalAmount, $master['companyLocalCurrencyDecimalPlaces']);
        $companyReportingAmount = $data['transactionAmount'] / $master['companyReportingExchangeRate'];
        $data['companyReportingAmount'] = round($companyReportingAmount, $master['companyReportingCurrencyDecimalPlaces']);
        $customerAmount = $data['transactionAmount'] / $master['customerCurrencyExchangeRate'];
        $data['customerAmount'] = round($customerAmount, $master['customerCurrencyDecimalPlaces']);
        $data['comment'] = $comment;
        $data['remarks'] = $remarks;
        $data['type'] = 'Item';

//        $item_data = fetch_item_data($data['itemAutoID']);
        $item_data = $item_arr;
        if($serviceitm['mainCategory']=="Service") {
            $data['wareHouseAutoID'] = 0;
            $data['wareHouseCode'] = null;
            $data['wareHouseLocation'] = null;
            $data['wareHouseDescription'] = null;
        }else{
            $data['wareHouseAutoID'] = $wareHouseAutoID;
            $data['wareHouseCode'] = trim($wareHouse_location['wareHouseCode'] ?? '');
            $data['wareHouseLocation'] = trim($wareHouse_location['wareHouseLocation'] ?? '');
            $data['wareHouseDescription'] = trim($wareHouse_location['wareHouseDescription'] ?? '');
        }

        $data['segmentID'] = $master['segmentID'];
        $data['segmentCode'] = $master['segmentCode'];
        $data['expenseGLAutoID'] = $item_data['costGLAutoID'];
        $data['expenseGLCode'] = $item_data['costGLCode'];
        $data['expenseSystemGLCode'] = $item_data['costSystemGLCode'];
        $data['expenseGLDescription'] = $item_data['costDescription'];
        $data['expenseGLType'] = $item_data['costType'];
        $data['revenueGLAutoID'] = $item_data['revanueGLAutoID'];
        $data['revenueGLCode'] = $item_data['revanueGLCode'];
        $data['revenueSystemGLCode'] = $item_data['revanueSystemGLCode'];
        $data['revenueGLDescription'] = $item_data['revanueDescription'];
        $data['revenueGLType'] = $item_data['revanueType'];
        $data['assetGLAutoID'] = $item_data['assteGLAutoID'];
        $data['assetGLCode'] = $item_data['assteGLCode'];
        $data['assetSystemGLCode'] = $item_data['assteSystemGLCode'];
        $data['assetGLDescription'] = $item_data['assteDescription'];
        $data['assetGLType'] = $item_data['assteType'];
        $data['companyLocalWacAmount'] = $item_data['companyLocalWacAmount'];
        $data['itemCategory'] = $item_data['mainCategory'];

        $data['noOfItems'] = $noOfItems;
        $data['grossQty'] = $grossQty;
        $data['noOfUnits'] = $noOfUnits;
        $data['deduction'] = $deduction;

        if (!empty($tax_master)) {
            $data['taxMasterAutoID'] = $tax_master['taxMasterAutoID'];
            $data['taxDescription'] = $tax_master['taxDescription'];
            $data['taxShortCode'] = $tax_master['taxShortCode'];
            $data['taxSupplierAutoID'] = $tax_master['supplierAutoID'];
            $data['taxSupplierSystemCode'] = $tax_master['supplierSystemCode'];
            $data['taxSupplierName'] = $tax_master['supplierName'];
            $data['taxSupplierCurrencyID'] = $tax_master['supplierCurrencyID'];
            $data['taxSupplierCurrency'] = $tax_master['CurrencyCode'];
            $data['taxSupplierCurrencyDecimalPlaces'] = $tax_master['DecimalPlaces'];
            $data['taxSupplierliabilityAutoID'] = $tax_master['liabilityAutoID'];
            $data['taxSupplierliabilitySystemGLCode'] = $tax_master['liabilitySystemGLCode'];
            $data['taxSupplierliabilityGLAccount'] = $tax_master['liabilityGLAccount'];
            $data['taxSupplierliabilityDescription'] = $tax_master['liabilityDescription'];
            $data['taxSupplierliabilityType'] = $tax_master['liabilityType'];
            $supplierCurrency = currency_conversion($master['transactionCurrency'], $data['taxSupplierCurrency']);
            $data['taxSupplierCurrencyExchangeRate'] = $supplierCurrency['conversion'];
            $data['taxSupplierCurrencyDecimalPlaces'] = $supplierCurrency['DecimalPlaces'];
            $data['taxSupplierCurrencyAmount'] = ($data['transactionAmount'] / $data['taxSupplierCurrencyExchangeRate']);
        } else {
            $data['taxSupplierCurrencyExchangeRate'] = 1;
            $data['taxSupplierCurrencyDecimalPlaces'] = 2;
            $data['taxSupplierCurrencyAmount'] = 0;
        }


        if ($item_data['mainCategory'] == 'Inventory' or $item_data['mainCategory'] == 'Non Inventory') {
            $this->db->select('itemAutoID');
            $this->db->where('itemAutoID', $itemAutoID);
            $this->db->where('wareHouseAutoID', $data['wareHouseAutoID']);
            $this->db->where('companyID', $companyID);
            $warehouseitems = $this->db->get('srp_erp_warehouseitems')->row_array();

            if (empty($warehouseitems)) {
                $data_arr = array(
                    'wareHouseAutoID' => $data['wareHouseAutoID'],
                    'wareHouseLocation' => $data['wareHouseLocation'],
                    'wareHouseDescription' => $data['wareHouseDescription'],
                    'itemAutoID' => $data['itemAutoID'],
                    'itemSystemCode' => $data['itemSystemCode'],
                    'barCodeNo' => $item_data['barcode'],
                    'salesPrice' => $item_data['companyLocalSellingPrice'],
                    'ActiveYN' => $item_data['isActive'],
                    'itemDescription' => $data['itemDescription'],
                    'unitOfMeasureID' => $data['defaultUOMID'],
                    'unitOfMeasure' => $data['defaultUOM'],
                    'currentStock' => 0,
                    'companyID' => $companyID,
                    'companyCode' => current_companyCode(),
                );
                $this->db->insert('srp_erp_warehouseitems', $data_arr);
            }
        }
        $message = '';
        if ($invoiceDetailsAutoID) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $current_userID;
            $data['modifiedUserName'] = $current_user;
            $data['modifiedDateTime'] = $current_date;

            $contractID = $this->db->query("SELECT contractDetailsAutoID FROM srp_erp_customerinvoicedetails WHERE invoiceDetailsAutoID = {$invoiceDetailsAutoID}")->row_array();
            if(isset($contractID['contractDetailsAutoID'])){
                $contractedTotal = $this->db->query("SELECT	(IFNULL(deliveredQty, 0) + IFNULL(invoiced.requestedQty, 0)) AS totalDeliveredQty, srp_erp_contractdetails.requestedQty 
                    FROM srp_erp_contractdetails
                        LEFT JOIN ( SELECT SUM( deliveredQty ) AS deliveredQty, contractDetailsAutoID FROM srp_erp_deliveryorderdetails GROUP BY contractDetailsAutoID ) delivered ON delivered.contractDetailsAutoID = srp_erp_contractdetails.contractDetailsAutoID
                        LEFT JOIN ( SELECT SUM( requestedQty ) AS requestedQty, contractDetailsAutoID FROM srp_erp_customerinvoicedetails WHERE invoiceDetailsAutoID != {$invoiceDetailsAutoID} GROUP BY contractDetailsAutoID ) invoiced ON invoiced.contractDetailsAutoID = srp_erp_contractdetails.contractDetailsAutoID 
                    WHERE companyID = {$companyID} AND srp_erp_contractdetails.contractDetailsAutoID = {$contractID['contractDetailsAutoID']}")->row_array();

                $deliveredTot = $contractedTotal['totalDeliveredQty'] + $quantityRequested;
                if ($deliveredTot >= $contractedTotal['requestedQty'])
                {
                    $cont_data['invoicedYN'] = 1;
                    $this->db->where('contractDetailsAutoID', $contractID['contractDetailsAutoID']);
                    $this->db->update('srp_erp_contractdetails', $cont_data);
                } else {
                    $cont_data['invoicedYN'] = 0;
                    $this->db->where('contractDetailsAutoID', $contractID['contractDetailsAutoID']);
                    $this->db->update('srp_erp_contractdetails', $cont_data);
                }
            }

            $this->db->where('invoiceDetailsAutoID', trim($invoiceDetailsAutoID));
            $this->db->update('srp_erp_customerinvoicedetails', $data);

            $message = "Item Detail Updated Successfully";
            $last_id = (int)$invoiceDetailsAutoID;
        } else {
            $data['companyID'] = $companyID;
            $data['companyCode'] = current_companyCode();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $current_userID;
            $data['createdUserName'] = $current_user;
            $data['createdDateTime'] = $current_date;
            $this->db->insert('srp_erp_customerinvoicedetails', $data);
            $last_id = $this->db->insert_id();

            $message = "Item Detail Added Successfully";
        }
        /** Added (SME-2299)*/
        $rebate = $this->db->query("SELECT rebatePercentage FROM srp_erp_customerinvoicemaster WHERE invoiceAutoID = {$invoiceAutoID}")->row_array();
        if(!empty($rebate['rebatePercentage'])) {
            $this->load->model('Invoice_model');
            $this->Invoice_model->calculate_rebate_amount($invoiceAutoID);
        }
        /** End (SME-2299)*/

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('type' => false, 'message' => 'Invoice Detail : Save Failed ', 'detailID'=> null);
        } else {
            $viewDetails = $this->fetch_customer_invoice_item($last_id);
            $this->db->trans_commit();
            return array('type' => true, 'message' => $message, 'detailID'=> $viewDetails);
        }
    }

    function fetch_customer_invoice_item($invoiceDetailID)
    {
        $companyID = current_companyID();
        $details = null;
        if ($invoiceDetailID) {
            $details = $this->db->query("SELECT invoiceAutoID AS documentAutoID,invoiceDetailsAutoID AS documentDetailID,type,itemAutoID,itemSystemCode,itemDescription,
                                    wareHouseAutoID,wareHouseCode,wareHouseDescription,unitOfMeasureID,unitOfMeasure, requestedQty, unittransactionAmount, transactionAmount, 
                                    discountPercentage, discountAmount, taxMasterAutoID, taxPercentage, taxAmount, totalAfterTax, segmentID, segmentCode, description
                        FROM srp_erp_customerinvoicedetails 
                        WHERE invoiceDetailsAutoID = {$invoiceDetailID} AND companyID = {$companyID}")->row_array();
            $details['documentAutoID'] = (int)$details['documentAutoID'];
            $details['documentDetailID'] = (int)$details['documentDetailID'];
            $details['itemAutoID'] = (int)$details['itemAutoID'];
            $details['wareHouseAutoID'] = (int)$details['wareHouseAutoID'];
            $details['unitOfMeasureID'] = (int)$details['unitOfMeasureID'];
            $details['taxMasterAutoID'] = (int)$details['taxMasterAutoID'];
            $details['segmentID'] = (int)$details['segmentID'];
            $details['discountPercentage'] = (float)$details['discountPercentage'];
            $details['taxPercentage'] = (float)$details['taxPercentage'];
            $details['requestedQty'] = (float)$details['requestedQty'];
            $details['unittransactionAmount'] = (float)$details['unittransactionAmount'];
            $details['transactionAmount'] = (float)$details['transactionAmount'];
            $details['discountAmount'] = (float)$details['discountAmount'];
            $details['taxAmount'] = (float)$details['taxAmount'];
            $details['totalAfterTax'] = (float)$details['totalAfterTax'];
        }
        return $details;
    }

    function create_customer_invoice_income()
    {
        $current_pc = current_pc();
        $current_user = current_user();
        $current_userID = current_userID();
        $current_date = current_date();
//        $projectExist = project_is_exist();
        $projectExist = 0;
        $segmentID = $this->input->post('segmentID');
        $invoiceAutoID = $this->input->post('invoiceAutoID');
        $invoiceDetailsAutoID = $this->input->post('invoiceDetailsAutoID');
        $gl_code = $this->input->post('gl_code');
        $projectID = $this->input->post('projectID');
        $amount = $this->input->post('amount');
        $description = $this->input->post('description');
        $discountPercentage = $this->input->post('discountPercentage');
        $project_categoryID = $this->input->post('project_categoryID');
        $project_subCategoryID = $this->input->post('project_subCategoryID');

        $this->db->trans_start();
        $this->db->select('companyLocalExchangeRate,companyReportingExchangeRate,customerCurrencyExchangeRate,transactionCurrencyDecimalPlaces,companyLocalCurrencyDecimalPlaces,companyReportingCurrencyDecimalPlaces,customerCurrencyDecimalPlaces,transactionCurrencyID');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $master = $this->db->get('srp_erp_customerinvoicemaster')->row_array();

        $data['invoiceAutoID'] = trim($invoiceAutoID);
        $data['description'] = trim($description);
        $data['type'] = 'GL';
        if ($projectExist == 1) {
            $projectCurrency = project_currency($projectID);
            $projectCurrencyExchangerate = currency_conversionID($master['transactionCurrencyID'], $projectCurrency);
            $data['projectID'] = $projectID;
            $data['projectExchangeRate'] = $projectCurrencyExchangerate['conversion'];
            $data['project_categoryID'] = $project_categoryID;
            $data['project_subCategoryID'] = $project_subCategoryID;
        }
        $data['revenueGLAutoID'] = $gl_code;
        $gl_code_de = fetch_gl_account_desc($gl_code);
        $data['revenueSystemGLCode'] = trim($gl_code_de['systemAccountCode'] ?? '');
        $data['revenueGLCode'] = trim($gl_code_de['GLSecondaryCode'] ?? '');
        $data['revenueGLDescription'] = trim($gl_code_de['GLDescription'] ?? '');
        $data['revenueGLType'] = trim($gl_code_de['subCategory'] ?? '');

        $data['segmentID'] = trim($segmentID);
        $segmentCode = $this->db->query("SELECT segmentCode FROM srp_erp_segment WHERE segmentID = {$segmentID}")->row('segmentCode');
        $data['segmentCode'] = trim($segmentCode);
        $data['discountPercentage'] = trim($discountPercentage);
        $data['discountAmount'] = trim(($amount*$discountPercentage)/100);
        $data['transactionAmount'] = round($amount-$data['discountAmount'], $master['transactionCurrencyDecimalPlaces']);
        $companyLocalAmount = $data['transactionAmount'] / $master['companyLocalExchangeRate'];
        $data['companyLocalAmount'] = round($companyLocalAmount, $master['companyLocalCurrencyDecimalPlaces']);
        $companyReportingAmount = $data['transactionAmount'] / $master['companyReportingExchangeRate'];
        $data['companyReportingAmount'] = round($companyReportingAmount, $master['companyReportingCurrencyDecimalPlaces']);
        $customerAmount = $data['transactionAmount'] / $master['customerCurrencyExchangeRate'];
        $data['customerAmount'] = round($customerAmount, $master['customerCurrencyDecimalPlaces']);

        if (trim($this->input->post('invoiceDetailsAutoID') ?? '')) {
            $data['modifiedPCID'] = $current_pc;
            $data['modifiedUserID'] = $current_userID;
            $data['modifiedUserName'] = $current_user;
            $data['modifiedDateTime'] = $current_date;

            $this->db->where('invoiceDetailsAutoID', trim($invoiceDetailsAutoID));
            $this->db->update('srp_erp_customerinvoicedetails', $data);

            $last_id = (int)trim($invoiceDetailsAutoID);
            $message = "Income Detail Updated Successfully";
        } else {
            $data['companyCode'] = current_companyCode();
            $data['companyID'] = current_companyID();
            $data['createdUserGroup'] = current_user_group();
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $current_userID;
            $data['createdUserName'] = $current_user;
            $data['createdDateTime'] = $current_date;

            $this->db->insert('srp_erp_customerinvoicedetails', $data);
            $last_id = $this->db->insert_id();
            $message = "Income Detail Added Successfully";
        }

        /** Added (SME-2299)*/
        $rebate = $this->db->query("SELECT rebatePercentage FROM srp_erp_customerinvoicemaster WHERE invoiceAutoID = {$invoiceAutoID}")->row_array();
        if(!empty($rebate['rebatePercentage'])) {
            $this->load->model('Invoice_model');
            $this->Invoice_model->calculate_rebate_amount($invoiceAutoID);
        }
        /** End (SME-2299)*/

        $this->db->trans_complete();
        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return array('type' => false, 'message' => 'Invoice Detail : Save Failed ',  'detailID'=> null);
        } else {
            $viewDetails = $this->fetch_customer_invoice_item($last_id);
            $this->db->trans_commit();
            return array('type' => true, 'message' => $message, 'detailID'=> $viewDetails);
        }
    }

    function create_customer_invoice_tax()
    {
        $InvoiceAutoID = trim($this->input->post('InvoiceAutoID') ?? '');
        $this->db->select('*');
        $this->db->where('invoiceAutoID', $this->input->post('InvoiceAutoID'));
        $this->db->where('taxMasterAutoID', $this->input->post('text_type'));
        $tax_detail = $this->db->get('srp_erp_customerinvoicetaxdetails')->row_array();
        if (!empty($tax_detail)) {
            return array('type' => false, 'message' => 'Tax Detail added already!', 'view'=>null);
        }
        $this->db->select('*');
        $this->db->where('taxMasterAutoID', $this->input->post('text_type'));
        $master = $this->db->get('srp_erp_taxmaster')->row_array();

        $this->db->select('transactionCurrency,transactionExchangeRate,transactionCurrencyDecimalPlaces ,transactionCurrencyID,companyLocalCurrency, companyLocalExchangeRate,companyLocalCurrencyDecimalPlaces,companyReportingCurrency,companyReportingExchangeRate, companyReportingCurrencyDecimalPlaces,companyLocalCurrencyID, companyReportingCurrencyID');
        $this->db->where('invoiceAutoID', $this->input->post('InvoiceAutoID'));
        $inv_master = $this->db->get('srp_erp_customerinvoicemaster')->row_array();

        $data['invoiceAutoID']                   = trim($this->input->post('InvoiceAutoID') ?? '');
        $data['taxMasterAutoID']                 = $master['taxMasterAutoID'];
        $data['taxDescription']                  = $master['taxDescription'];
        $data['taxShortCode']                    = $master['taxShortCode'];
        $data['supplierAutoID']                  = $master['supplierAutoID'];
        $data['supplierSystemCode']              = $master['supplierSystemCode'];
        $data['supplierName']                    = $master['supplierName'];
        $data['supplierCurrencyID']              = $master['supplierCurrencyID'];
        $data['supplierCurrency']                = $master['supplierCurrency'];
        $data['supplierCurrencyDecimalPlaces']   = $master['supplierCurrencyDecimalPlaces'];
        $data['GLAutoID']                        = $master['supplierGLAutoID'];
        $data['systemGLCode']                    = $master['supplierGLSystemGLCode'];
        $data['GLCode']                          = $master['supplierGLAccount'];
        $data['GLDescription']                   = $master['supplierGLDescription'];
        $data['GLType']                          = $master['supplierGLType'];
        $data['taxPercentage']                   = trim($this->input->post('percentage') ?? '');
        $data['transactionAmount']               = trim($this->input->post('amount') ?? '');
        $data['transactionCurrencyID']           = $inv_master['transactionCurrencyID'];
        $data['transactionCurrency']             = $inv_master['transactionCurrency'];
        $data['transactionExchangeRate']         = $inv_master['transactionExchangeRate'];
        $data['transactionCurrencyDecimalPlaces']= $inv_master['transactionCurrencyDecimalPlaces'];
        $data['companyLocalCurrencyID']          = $inv_master['companyLocalCurrencyID'];
        $data['companyLocalCurrency']            = $inv_master['companyLocalCurrency'];
        $data['companyLocalExchangeRate']        = $inv_master['companyLocalExchangeRate'];
        $data['companyReportingCurrencyID']      = $inv_master['companyReportingCurrencyID'];
        $data['companyReportingCurrency']        = $inv_master['companyReportingCurrency'];
        $data['companyReportingExchangeRate']    = $inv_master['companyReportingExchangeRate'];

        $supplierCurrency      = currency_conversion($data['transactionCurrency'],$data['supplierCurrency']);
        $data['supplierCurrencyExchangeRate']    = $supplierCurrency['conversion'];
        $data['supplierCurrencyDecimalPlaces']   = $supplierCurrency['DecimalPlaces'];

        if (trim($this->input->post('taxDetailAutoID') ?? '')) {
            $data['modifiedPCID']                    = current_pc();
            $data['modifiedUserID']                  = current_userID();
            $data['modifiedUserName']                = current_user();
            $data['modifiedDateTime']                = current_date();
            $this->db->where('taxDetailAutoID', trim($this->input->post('taxDetailAutoID') ?? ''));
            $this->db->update('srp_erp_customerinvoicetaxdetails', $data);
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('type' => false, 'message' => 'Tax Detail : ' . $data['GLDescription'] . ' Update Failed', 'view'=>null);
            } else {
                $view = $this->fetch_customer_invoice_tax($InvoiceAutoID, $this->input->post('taxDetailAutoID'));
                $this->db->trans_commit();
                return array('type' => true, 'message' => 'Tax Detail : ' . $data['GLDescription'] . ' Updated Successfully', 'view'=>$this->input->post('taxDetailAutoID'));
            }
        } else {
            $data['companyCode']        = current_companyCode();
            $data['companyID']          = current_companyID();
            $data['createdUserGroup']   = current_user_group();
            $data['createdPCID']        = current_pc();
            $data['createdUserID']      = current_userID();
            $data['createdUserName']    = current_user();
            $data['createdDateTime']    = current_date();
            $this->db->insert('srp_erp_customerinvoicetaxdetails', $data);
            $last_id = $this->db->insert_id();
            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('type' => false, 'message' => 'Tax Detail : ' . $data['GLDescription'] . ' Save Failed', 'view'=>null);
            } else {
                $view = $this->fetch_customer_invoice_tax($InvoiceAutoID, $last_id);
                $this->db->trans_commit();
                return array('type' => true, 'message' => 'Tax Detail : ' . $data['GLDescription'] . ' Saved Successfully', 'view'=>$view);
            }
        }
    }

    function fetch_customer_invoice_tax($id = null, $taxDetailAutoID = null)
    {
        $master_id = (!empty($id)) ? $id : $this->input->get('masterID');

        $this->db->select('taxDetailAutoID, invoiceAutoID, taxMasterAutoID, taxDescription, taxShortCode, taxPercentage, transactionAmount AS taxAmount');
        $this->db->where('invoiceAutoID', $master_id);
        if(!empty($taxDetailAutoID)) {
            $this->db->where('taxDetailAutoID', $taxDetailAutoID);
        }
        $data = $this->db->get('srp_erp_customerinvoicetaxdetails')->row_array();

        $data['taxDetailAutoID'] = (int)$data['taxDetailAutoID'];
        $data['taxMasterAutoID'] = (int)$data['taxMasterAutoID'];
        $data['invoiceAutoID'] = (int)$data['invoiceAutoID'];
        $data['taxPercentage'] = (float)$data['taxPercentage'];
        $data['taxAmount'] = (float)$data['taxAmount'];
        return $data;
    }

    function fetch_all_gl_codes($code = NULL, $category = NULL)
    {
        $this->db->SELECT("GLAutoID,systemAccountCode,GLSecondaryCode,GLDescription,systemAccountCode,subCategory,accountCategoryTypeID");
        $this->db->from('srp_erp_chartofaccounts');
        if ($code) {
            $this->db->where('subCategory', $code);
        }
        if ($category) {
            $this->db->where('subCategory !=', $category);
        }
        $this->db->where('controllAccountYN', 0);
        $this->db->WHERE('masterAccountYN', 0);
        $this->db->WHERE('accountCategoryTypeID !=', 4);
        $this->db->where('approvedYN', 1);
        $this->db->where('isActive', 1);
        $this->db->where('isBank', 0);
        $this->db->where('companyID', current_companyID());
        $data = $this->db->get()->result_array();

        foreach ($data as $key => $row) {
            $data[$key]['GLAutoID'] = (int)$row['GLAutoID'];
            $data[$key]['accountCategoryTypeID'] = (int)$row['accountCategoryTypeID'];
        }
        return $data;
    }

    function customer_invoice_view()
    {
        $companyID = current_companyID();
        $convertFormat = convert_date_format_sql();
        $invoiceAutoID = $this->input->get('invoiceAutoID');

        $master = $this->db->query("SELECT srp_erp_customerinvoicemaster.invoiceAutoID AS documentAutoID, documentID,invoiceType,isSytemGenerated AS isSystemGenerated,
                         DATE_FORMAT(invoiceDate,'{$convertFormat}') AS invoiceDate,
                         DATE_FORMAT(customerInvoiceDate,'{$convertFormat}') AS customerInvoiceDate,
                         DATE_FORMAT(invoiceDueDate,'{$convertFormat}') AS invoiceDueDate,
                         invoiceCode,referenceNo,invoiceNarration,salesPersonID,SalesPersonCode,bankGLAutoID,bankSystemAccountCode,bankGLSecondaryCode,contactPersonName,
                         contactPersonNumber,customerID,customerSystemCode,customerName,deliveryNoteSystemCode,isPrintDN,transactionCurrencyID AS currency,
                         srp_erp_customerinvoicemaster.segmentID As segmentID,CONCAT(srp_erp_segment.segmentCode, ' - ', srp_erp_segment.description) AS segmentCode,
                        CASE
                            WHEN ( isDeleted = 1 ) THEN 5 
                            WHEN ( confirmedYN = 3 ) THEN 4 
                            WHEN ( approvedYN = 1 AND confirmedYN = 1 ) THEN 3 
                            WHEN ( approvedYN = 0 AND confirmedYN = 1 ) THEN 2 
                            ELSE 1 
                        END documentStatus,
                        CASE
                            WHEN ( invoiceType = 'DeliveryOrder' ) THEN 'Delivery Order' 
                            WHEN ( invoiceType = 'DirectItem' ) THEN 'Direct Item' 
                            WHEN ( invoiceType = 'DirectIncome' ) THEN 'Direct Income' 
                            WHEN ( invoiceType = 'Quotation' ) THEN 'Quotation Based' 
                            WHEN ( invoiceType = 'Contract' ) THEN 'Contract Based' 
                            WHEN ( invoiceType = 'Sales Order' ) THEN 'Sales Order Based' 
                            WHEN ( invoiceType = 'Manufacturing' ) THEN 'Manufacturing' 
                            WHEN ( invoiceType = 'Operation' ) THEN 'Operation' 
                            WHEN ( invoiceType = 'Project' ) THEN 'Project' 
                            ELSE 'Direct'
                        END documentTypeLabel,
                        ( IFNULL( addondet.taxPercentage, 0 )/ 100 )*(IFNULL( det.transactionAmount, 0 )- IFNULL( det.detailtaxamount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100 )* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexchargistax.transactionAmount, 0 ))+ IFNULL( det.transactionAmount, 0 )-((IFNULL( gendiscount.discountPercentage, 0 )/ 100)* IFNULL( det.transactionAmount, 0 ))+ IFNULL( genexcharg.transactionAmount, 0 ) - IFNULL( retensionTransactionAmount, 0 ) - IFNULL( rebateAmount, 0 ) AS total_value
                FROM srp_erp_customerinvoicemaster
                LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_customerinvoicemaster.segmentID
                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, sum( totalafterTax ) AS detailtaxamount, invoiceAutoID FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) det ON ( `det`.`invoiceAutoID` = srp_erp_customerinvoicemaster.invoiceAutoID)
                LEFT JOIN ( SELECT SUM( taxPercentage ) AS taxPercentage, InvoiceAutoID FROM srp_erp_customerinvoicetaxdetails GROUP BY InvoiceAutoID ) addondet ON ( `addondet`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
                LEFT JOIN ( SELECT SUM( discountPercentage ) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON ( `gendiscount`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON ( `genexchargistax`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
                LEFT JOIN ( SELECT SUM( transactionAmount ) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON ( `genexcharg`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID )
                WHERE srp_erp_customerinvoicemaster.companyID = {$companyID} AND srp_erp_customerinvoicemaster.invoiceAutoID = {$invoiceAutoID}")->row_array();
        $master['documentAutoID'] = (int)$master['documentAutoID'];
        $master['isSystemGenerated'] = (int)$master['isSystemGenerated'];
        $master['salesPersonID'] = (int)$master['salesPersonID'];
        $master['bankGLAutoID'] = (int)$master['bankGLAutoID'];
        $master['customerID'] = (int)$master['customerID'];
        $master['isPrintDN'] = (int)$master['isPrintDN'];
        $master['segmentID'] = (int)$master['segmentID'];
        $master['documentStatus'] = (int)$master['documentStatus'];
        $master['total_value'] = (double)$master['total_value'];
        $currencyID = (int)$master['currency'];
        $currency = $this->db->query("SELECT currencyID, CurrencyCode AS code, DecimalPlaces AS decimals, CurrencyName AS description 
                                           FROM srp_erp_currencymaster WHERE currencyID = {$currencyID}")->row_array();
        if ($currency != null) {
            $currency['decimals'] = (int)$currency['decimals'];
        }
        $master['currency'] = $currency;

        $details = $this->db->query("SELECT invoiceAutoID,invoiceDetailsAutoID, type,itemAutoID, wareHouseAutoID,wareHouseCode,wareHouseLocation,wareHouseDescription,unitOfMeasureID,unitOfMeasure, UnitDes, conversionRateUOM, requestedQty, unittransactionAmount, transactionAmount, revenueGLAutoID, revenueSystemGLCode,revenueGLCode,revenueGLDescription,revenueGLType, discountPercentage, discountAmount, taxMasterAutoID, taxPercentage, taxAmount, totalAfterTax, srp_erp_segment.segmentID, srp_erp_segment.segmentCode, srp_erp_customerinvoicedetails.description, srp_erp_segment.description AS segment FROM srp_erp_customerinvoicedetails LEFT JOIN srp_erp_unit_of_measure ON srp_erp_unit_of_measure.UnitID = srp_erp_customerinvoicedetails.unitOfMeasureID LEFT JOIN srp_erp_segment ON srp_erp_segment.segmentID = srp_erp_customerinvoicedetails.segmentID WHERE invoiceAutoID = {$invoiceAutoID} AND srp_erp_customerinvoicedetails.companyID = {$companyID}")->result_array();

        $b = array();
        foreach ($details AS $val){
            $a = array();
            $currency_arr = $master['currency'];
            $segment_arr = array();
            $warehouse_arr = array();
            $uom_arr = array();
            $glCode_arr = array();
            $item_arr = array();
            foreach (array_keys($val) as $det) {
                switch ($det) {
                    CASE 'invoiceAutoID' : CASE 'invoiceDetailsAutoID' :
                    $a[$det] = (int)$val[$det];
                    BREAK;

                    CASE 'segmentID' :
                        if(!empty($val['segmentID'])) {
                            $segment_arr['segmentID'] = (int)$val['segmentID'];
                            $segment_arr['segmentCode'] = $val['segmentCode'];
                            $segment_arr['description'] = $val['segment'];
                        } else {
                            $segment_arr = null;
                        }
                        BREAK;

                    CASE 'wareHouseAutoID' :
                        if(!empty($val['wareHouseAutoID'])) {
                            $warehouse_arr['wareHouseAutoID'] = (int)$val['wareHouseAutoID'];
                            $warehouse_arr['wareHouseCode'] = $val['wareHouseCode'];
                            $warehouse_arr['wareHouseLocation'] = $val['wareHouseLocation'];
                            $warehouse_arr['wareHouseDescription'] = $val['wareHouseDescription'];
                        } else {
                            $warehouse_arr = null;
                        }
                        BREAK;

                    CASE 'type' :
                        if(trim($val['type'] ?? '') == 'GL') {
                            $item_arr = null;

                            $a[$det] = $val[$det];
                            $glCode_arr['GLAutoID'] = (int)$val['revenueGLAutoID'];
                            $glCode_arr['systemAccountCode'] = $val['revenueSystemGLCode'];
                            $glCode_arr['GLSecondaryCode'] = $val['revenueGLCode'];
                            $glCode_arr['GLDescription'] = $val['revenueGLDescription'];
                            $glCode_arr['subCategory'] = $val['revenueGLType'];
                        } else if(trim($val['type'] ?? '') == 'Item') {
                            $glCode_arr = null;

                            $a[$det] = $val[$det];
                            $itemData = $this->db->query("SELECT
                            srp_erp_itemmaster.mainCategory as mainCategory,mainCategoryID,subcategoryID,seconeryItemCode,subSubCategoryID,
                            CONCAT( IFNULL(itemDescription,'empty'), ' - ', IFNULL(itemSystemCode,'empty'), ' - ', IFNULL(partNo,'empty')  , ' - ', IFNULL(seconeryItemCode,'empty')) AS 'Match',
                            revanueGLCode,itemSystemCode,costGLCode,assteGLCode,defaultUnitOfMeasure,defaultUnitOfMeasureID,itemDescription,
                            srp_erp_itemmaster.itemAutoID,srp_erp_itemmaster.currentStock,companyLocalWacAmount,companyLocalSellingPrice,
                            isSubitemExist,
                            srp_erp_itemcategory.categoryTypeID,
                            srp_erp_itemmaster.secondaryUOMID as secondaryUOMID,
                            itemledgercurrent.currentstock AS itemledgstock 
                    FROM srp_erp_itemmaster
                    LEFT JOIN srp_erp_itemcategory ON srp_erp_itemmaster.mainCategoryID = srp_erp_itemcategory.itemCategoryID
                    LEFT JOIN (SELECT IF (mainCategory = 'Inventory',(TRIM(TRAILING '.' FROM TRIM(TRAILING 0 FROM(ROUND(SUM(transactionQTY / convertionRate), 4))))), ' ') AS currentstock, srp_erp_itemledger.itemAutoID FROM `srp_erp_itemledger`
                    LEFT JOIN srp_erp_itemmaster on srp_erp_itemmaster.itemAutoID = srp_erp_itemledger.itemAutoID
                                        GROUP BY srp_erp_itemledger.itemAutoID)itemledgercurrent on itemledgercurrent.itemAutoID = srp_erp_itemmaster.itemAutoID
                    WHERE srp_erp_itemmaster.itemAutoID = {$val['itemAutoID']}")->row_array();

                            $item_arr['itemAutoID'] = (int)$val['itemAutoID'];
                            $item_arr['requestedQty'] = (float)$val['requestedQty'];
                            $item_arr['unittransactionAmount'] = (double)$val['unittransactionAmount'];
                            $item_arr['mainCategory'] = $itemData['mainCategory'];
                            $item_arr['mainCategoryID'] = (int)$itemData['mainCategoryID'];
                            $item_arr['subcategoryID'] = (int)$itemData['subcategoryID'];
                            $item_arr['secondaryItemCode'] = $itemData['seconeryItemCode'];
                            $item_arr['subSubCategoryID'] = (int)$itemData['subSubCategoryID'];
                            $item_arr['revanueGLCode'] = $itemData['revanueGLCode'];
                            $item_arr['itemSystemCode'] = $itemData['itemSystemCode'];
                            $item_arr['costGLCode'] = $itemData['costGLCode'];
                            $item_arr['assteGLCode'] = $itemData['assteGLCode'];
                            $item_arr['defaultUnitOfMeasure'] = $itemData['defaultUnitOfMeasure'];
                            $item_arr['defaultUnitOfMeasureID'] = (int)$itemData['defaultUnitOfMeasureID'];
                            $item_arr['itemDescription'] = $itemData['itemDescription'];
                            $item_arr['currentStock'] = (float)$itemData['currentStock'];
                            $item_arr['companyLocalWacAmount'] = $itemData['companyLocalWacAmount'];
                            $item_arr['companyLocalSellingPrice'] = (float)$itemData['companyLocalSellingPrice'];
                            $item_arr['Match'] = $itemData['Match'];
                            $item_arr['isSubitemExist'] = $itemData['isSubitemExist'];
                            $item_arr['categoryTypeID'] = $itemData['categoryTypeID'];
                            $item_arr['secondaryUOMID'] = $itemData['secondaryUOMID'];
                            $item_arr['itemledgstock'] = $itemData['itemledgstock'];

                            $this->db->select('srp_erp_unit_of_measure.UnitID,UnitShortCode,UnitDes,conversion');
                            $this->db->from('srp_erp_unitsconversion');
                            $this->db->join('srp_erp_unit_of_measure', 'srp_erp_unit_of_measure.UnitID = srp_erp_unitsconversion.subUnitID');
                            $this->db->where('masterUnitID',$itemData['defaultUnitOfMeasureID']);
                            $this->db->where('srp_erp_unitsconversion.companyID', $companyID);
                            $item_arr['UOM'] = $this->db->get()->result_array();
                        }
                        BREAK;

                    CASE 'unitOfMeasureID' :
                        if(!empty($val['unitOfMeasureID'])) {
                            $uom_arr['UnitID'] = (int)$val['unitOfMeasureID'];
                            $uom_arr['UnitShortCode'] = $val['unitOfMeasure'];
                            $uom_arr['UnitDes'] = $val['UnitDes'];
                            $uom_arr['conversion'] = (float)$val['conversionRateUOM'];
                        } else {
                            $uom_arr = null;
                        }
                        BREAK;

                    CASE 'discountPercentage' : CASE 'taxPercentage' :
                        $a[$det] = (float)$val[$det];
                        BREAK;

                    CASE 'discountAmount' : CASE 'totalAfterTax' : CASE 'taxAmount' : CASE 'transactionAmount' :
                        $a[$det] = (double)$val[$det];
                        BREAK;

                    CASE 'segmentCode' :  CASE 'segment' :
                    CASE 'itemAutoID' : CASE 'requestedQty' : CASE 'unittransactionAmount' :
                    CASE 'wareHouseCode' : CASE 'wareHouseLocation' : CASE 'wareHouseDescription' :
                    CASE 'unitOfMeasure' : CASE 'conversionRateUOM' :
                    CASE 'revenueGLAutoID' : CASE 'revenueSystemGLCode' : CASE 'revenueGLCode' : CASE 'revenueGLDescription' : CASE 'revenueGLType' :
                    break;

                    DEFAULT :
                        $a[$det] = $val[$det];
                }
                $a['currency'] = $currency_arr;
                $a['segmentCode'] = $segment_arr;
                $a['warehouse'] = $warehouse_arr;
                $a['selectedUOM'] = $uom_arr;
                $a['GLCode'] = $glCode_arr;
                $a['itemCode'] = $item_arr;
            }
            array_push($b, $a);
        }
        $master['details'] = $b;

        $this->db->select('taxDetailAutoID, invoiceAutoID, taxMasterAutoID, taxDescription, taxShortCode, taxPercentage, transactionAmount AS taxAmount');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $tax = $this->db->get('srp_erp_customerinvoicetaxdetails')->result_array();
        foreach ($tax as $key => $details) {
            $tax[$key]['taxDetailAutoID'] = (int)$details['taxDetailAutoID'];
            $tax[$key]['taxMasterAutoID'] = (int)$details['taxMasterAutoID'];
            $tax[$key]['invoiceAutoID'] = (int)$details['invoiceAutoID'];
            $tax[$key]['taxPercentage'] = (float)$details['taxPercentage'];
            $tax[$key]['taxAmount'] = (float)$details['taxAmount'];
        }
        $master['tax'] = $tax;

        $this->db->select('discountDetailID, invoiceAutoID, discountMasterAutoID, discountDescription, discountPercentage, transactionAmount AS discountAmount');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $discount = $this->db->get('srp_erp_customerinvoicediscountdetails')->result_array();
        foreach ($discount as $key => $details) {
            $discount[$key]['discountDetailID'] = (int)$details['discountDetailID'];
            $discount[$key]['invoiceAutoID'] = (int)$details['invoiceAutoID'];
            $discount[$key]['discountMasterAutoID'] = (int)$details['discountMasterAutoID'];
            $discount[$key]['discountPercentage'] = (float)$details['discountPercentage'];
            $discount[$key]['discountAmount'] = (float)$details['discountAmount'];
        }
        $master['discount'] = $discount;

        $this->db->select('extraChargeDetailID, invoiceAutoID, isTaxApplicable, extraChargeMasterAutoID, extraChargeDescription, transactionAmount AS extraCharge');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $extraCharges = $this->db->get('srp_erp_customerinvoiceextrachargedetails')->result_array();
        foreach ($extraCharges as $key => $details) {
            $extraCharges[$key]['extraChargeDetailID'] = (int)$details['extraChargeDetailID'];
            $extraCharges[$key]['isTaxApplicable'] = (int)$details['isTaxApplicable'];
            $extraCharges[$key]['invoiceAutoID'] = (int)$details['invoiceAutoID'];
            $extraCharges[$key]['extraChargeMasterAutoID'] = (int)$details['extraChargeMasterAutoID'];
            $extraCharges[$key]['extraCharge'] = (float)$details['extraCharge'];
        }
        $master['extraCharges'] = $extraCharges;

        $this->db->where('documentSystemCode', $invoiceAutoID);
        $this->db->where('documentID', 'CINV');
        $this->db->where('companyID', $companyID);
        $data = $this->db->get('srp_erp_documentattachments')->result_array();
        $x = 1;
        $attachment_links = array();
        if (!empty($data)) {
            foreach ($data as $val) {
                $attachment = array();

                $attachment['id'] = (int)$val['attachmentID'];
                $attachment['link'] = $this->s3->createPresignedRequest($val['myFileName'], '1 hour');
                $attachment['type'] = $val['fileType'];
                $attachment['fileName'] = $val['myFileName'];
                $attachment['description'] = $val['attachmentDescription'];
                array_push($attachment_links, $attachment);
                $x++;
            }
        }
        $master['attachments'] = $attachment_links;

        $this->load->model('Mobile_leaveApp_Model');
        $master['approval_details']=$this->Mobile_leaveApp_Model->fetch_all_approval_users_modal($companyID, "CINV", $invoiceAutoID);

        $RVdate = current_date();
        $customerID = $master['customerID'];
        $balanceDet = $this->db->query("SELECT srp_erp_customerinvoicemaster.invoiceAutoID, invoiceCode, receiptTotalAmount, advanceMatchedTotal, creditNoteTotalAmount, referenceNo, (( ( ( cid.transactionAmount - cid.totalAfterTax ) - ( ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) )+ IFNULL( genexchargistax.transactionAmount, 0 ) ) * ( IFNULL(tax.taxPercentage, 0) / 100 ) + IFNULL(cid.transactionAmount, 0) ) - ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) + IFNULL( genexcharg.transactionAmount, 0 )) AS transactionAmount, invoiceDate, slr.returnsalesvalue as salesreturnvalue FROM srp_erp_customerinvoicemaster LEFT JOIN ( SELECT invoiceAutoID, IFNULL(SUM(transactionAmount), 0) AS transactionAmount, IFNULL(SUM(totalAfterTax), 0) AS totalAfterTax FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) cid ON srp_erp_customerinvoicemaster.invoiceAutoID = cid.invoiceAutoID LEFT JOIN ( SELECT invoiceAutoID, SUM(taxPercentage) AS taxPercentage FROM srp_erp_customerinvoicetaxdetails GROUP BY invoiceAutoID ) tax ON tax.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(discountPercentage) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON gendiscount.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(transactionAmount) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON genexchargistax.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(transactionAmount) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON genexcharg.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT invoiceAutoID, IFNULL( SUM(slaesdetail.totalValue), 0 ) AS returnsalesvalue FROM srp_erp_salesreturndetails slaesdetail GROUP BY invoiceAutoID ) slr ON slr.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID WHERE confirmedYN = 1 AND approvedYN = 1 AND receiptInvoiceYN = 0 AND `customerID` = '{$customerID}' AND `transactionCurrencyID` = '{$currencyID}' AND invoiceDate <= '{$RVdate}' AND srp_erp_customerinvoicemaster.invoiceAutoID = $invoiceAutoID ")->row_array();
        $master['balance'] = (double)$balanceDet['transactionAmount'] - ($balanceDet['receiptTotalAmount'] + $balanceDet['creditNoteTotalAmount'] + $balanceDet['advanceMatchedTotal'] + $balanceDet['salesreturnvalue']);


        return $master;
    }

    function confirm_customer_invoice()
    {
        if(empty($invoiceAutoID)) {
            $invoiceAutoID = trim($this->input->post('invoiceAutoID') ?? '');
        }

        $this->db->trans_start();
        $total_amount = 0;
        $tax_total = 0;
        $t_arr = array();
        $companyID = current_companyID();
        $currentuser  = current_userID();
        $locationwisecodegenerate = getPolicyValues('LDG', 'All');
        $locationemployee = $this->common_data['emplanglocationid'];

        $this->db->select('invoiceDetailsAutoID');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $this->db->from('srp_erp_customerinvoicedetails');
        $results = $this->db->get()->result_array();
        if (empty($results)) {
            return array('type' => false, 'message' => 'There are no records to confirm this document!');
        } else {

            $customerInvoiceDetail = $this->db->query("SELECT
            GROUP_CONCAT( itemAutoID ) AS itemAutoID 
            FROM
            srp_erp_customerinvoicedetails 
            WHERE
            companyID = $companyID
            AND invoiceAutoID = $invoiceAutoID")->row('itemAutoID');
            if(!empty($customerInvoiceDetail)){ 
                    $wacTransactionAmountValidation  = fetch_itemledger_transactionAmount_validation("$customerInvoiceDetail");
                    if(!empty($wacTransactionAmountValidation)){ 
                        return array('type' => false, 'message' => 'You cannot approve this document. Some document are having items with minus wac');
                       
                    }
                 
            } 


            $this->db->select('invoiceAutoID');
            $this->db->where('invoiceAutoID', $invoiceAutoID);
            $this->db->where('confirmedYN', 1);
            $this->db->from('srp_erp_customerinvoicemaster');
            $Confirmed = $this->db->get()->row_array();
            if (!empty($Confirmed)) {
                return array('type' => false, 'message' => 'Document already confirmed!');
            }
            else {
                $this->load->library('Approvals_mobile');
                $this->db->select('documentID,invoiceCode,DATE_FORMAT(invoiceDate, "%Y") as invYear,DATE_FORMAT(invoiceDate, "%m") as invMonth,companyFinanceYearID,invoiceType');
                $this->db->where('invoiceAutoID', $invoiceAutoID);
                $this->db->from('srp_erp_customerinvoicemaster');
                $master_dt = $this->db->get()->row_array();
                $this->load->library('sequence');
                $lenth=strlen($master_dt['invoiceCode']);
                if($lenth == 1){
                    if($locationwisecodegenerate == 1)
                    {
                        $this->db->select('locationID');
                        $this->db->where('Erp_companyID', $companyID);
                        $this->db->where('EIdNo', $currentuser);
                        $this->db->from('srp_employeesdetails');
                        $location = $this->db->get()->row_array();
                        if ((empty($location)) || ($location ==' ')) {
                            return array('type' => false, 'message' => 'Location is not assigned for current employee!');
                        }else
                        {
                            if($locationemployee!='')
                            {
                                $codegerator = $this->sequence->sequence_generator_location($master_dt['documentID'],$master_dt['companyFinanceYearID'], $locationemployee,$master_dt['invYear'],$master_dt['invMonth']);
                            }else
                            {
                                return array('type' => false, 'message' => 'Location is not assigned for current employee!');
                            }
                        }
                    }
                    else
                    {
                        $codegerator = $this->sequence->sequence_generator_fin($master_dt['documentID'],$master_dt['companyFinanceYearID'],$master_dt['invYear'],$master_dt['invMonth']);
                    }
                    $invcod = array(
                        'invoiceCode' => $codegerator,
                    );
                    $this->db->where('invoiceAutoID', $invoiceAutoID);
                    $this->db->update('srp_erp_customerinvoicemaster', $invcod);
                }


                $this->db->select('invoiceAutoID, invoiceCode, documentID,transactionCurrency, transactionExchangeRate, companyLocalExchangeRate, companyReportingExchangeRate,customerCurrencyExchangeRate,DATE_FORMAT(invoiceDate, "%Y") as invYear,DATE_FORMAT(invoiceDate, "%m") as invMonth,companyFinanceYearID,invoiceDate ');
                $this->db->where('invoiceAutoID', $invoiceAutoID);
                $this->db->from('srp_erp_customerinvoicemaster');
                $master_data = $this->db->get()->row_array();

                //$sql = "SELECT (srp_erp_customerinvoicedetails.requestedQty / srp_erp_customerinvoicedetails.conversionRateUOM) AS qty,srp_erp_warehouseitems.currentStock,(srp_erp_warehouseitems.currentStock-(srp_erp_customerinvoicedetails.requestedQty / srp_erp_customerinvoicedetails.conversionRateUOM)) as stock ,srp_erp_warehouseitems.itemAutoID,srp_erp_customerinvoicedetails.wareHouseAutoID FROM srp_erp_customerinvoicedetails INNER JOIN srp_erp_warehouseitems ON srp_erp_warehouseitems.itemAutoID = srp_erp_customerinvoicedetails.itemAutoID AND srp_erp_customerinvoicedetails.wareHouseAutoID = srp_erp_warehouseitems.wareHouseAutoID where invoiceAutoID = '{$this->input->post('invoiceAutoID')}' AND (itemCategory != 'Service' AND itemCategory != 'Non Inventory')   Having stock < 0";
                $sql = "SELECT
	SUM(
		srp_erp_customerinvoicedetails.requestedQty / srp_erp_customerinvoicedetails.conversionRateUOM
	) AS qty,
	srp_erp_warehouseitems.currentStock,
	(
		srp_erp_warehouseitems.currentStock - SUM(
			srp_erp_customerinvoicedetails.requestedQty / srp_erp_customerinvoicedetails.conversionRateUOM
		)
	) AS stock,
	srp_erp_warehouseitems.itemAutoID,
	srp_erp_customerinvoicedetails.wareHouseAutoID
FROM
	srp_erp_customerinvoicedetails
INNER JOIN srp_erp_warehouseitems ON srp_erp_warehouseitems.itemAutoID = srp_erp_customerinvoicedetails.itemAutoID
JOIN `srp_erp_itemmaster` ON `srp_erp_customerinvoicedetails`.`itemAutoID` = `srp_erp_itemmaster`.`itemAutoID`
AND srp_erp_customerinvoicedetails.wareHouseAutoID = srp_erp_warehouseitems.wareHouseAutoID
WHERE
	invoiceAutoID = '{$invoiceAutoID}'
AND (
	mainCategory != 'Service'
	AND mainCategory != 'Non Inventory'
)
GROUP BY itemAutoID
HAVING
	stock < 0";

                $item_low_qty = $this->db->query($sql)->result_array();
                if (!empty($item_low_qty)) {
                    return array('type' => false, 'message' => 'Some Item quantities are not sufficient to confirm this transaction!', 'qty'=>$item_low_qty);
                }

                $autoApproval= get_document_auto_approval('CINV');

                if($autoApproval==0){
                    $approvals_status = $this->approvals_mobile->auto_approve($master_data['invoiceAutoID'], 'srp_erp_customerinvoicemaster','invoiceAutoID', 'CINV',$master_data['invoiceCode'],$master_data['invoiceDate']);
                }elseif($autoApproval==1){
                    $approvals_status = $this->approvals_mobile->CreateApproval($master_data['documentID'], $master_data['invoiceAutoID'], $master_data['invoiceCode'], 'Invoice', 'srp_erp_customerinvoicemaster', 'invoiceAutoID',0,$master_data['invoiceDate']);
                }else{
                    return array('type' => false, 'message' => 'Approval levels are not set for this document!');
                    exit;
                }
                if ($approvals_status == 1) {
                    /** item Master Sub check */
                    $this->load->model('Invoice_model');
                    $validate = $this->Invoice_model->validate_itemMasterSub($invoiceAutoID);

                    /** end of item master sub */
                    if ($validate) {
                        $this->db->select_sum('transactionAmount');
                        $this->db->where('InvoiceAutoID', $master_data['invoiceAutoID']);
                        $transaction_total_amount = $this->db->get('srp_erp_customerinvoicedetails')->row('transactionAmount');

                        $this->db->select_sum('totalAfterTax');
                        $this->db->where('InvoiceAutoID', $master_data['invoiceAutoID']);
                        $item_tax = $this->db->get('srp_erp_customerinvoicedetails')->row('totalAfterTax');
                        $total_amount = ($transaction_total_amount - $item_tax);
                        $this->db->select('taxDetailAutoID,supplierCurrencyExchangeRate,companyReportingExchangeRate ,companyLocalExchangeRate ,taxPercentage');
                        $this->db->where('InvoiceAutoID', $master_data['invoiceAutoID']);
                        $tax_arr = $this->db->get('srp_erp_customerinvoicetaxdetails')->result_array();
                        for ($x = 0; $x < count($tax_arr); $x++) {
                            $tax_total_amount = (($tax_arr[$x]['taxPercentage'] / 100) * $total_amount);
                            $t_arr[$x]['taxDetailAutoID'] = $tax_arr[$x]['taxDetailAutoID'];
                            $t_arr[$x]['transactionAmount'] = $tax_total_amount;
                            $t_arr[$x]['supplierCurrencyAmount'] = ($t_arr[$x]['transactionAmount'] / $tax_arr[$x]['supplierCurrencyExchangeRate']);
                            $t_arr[$x]['companyLocalAmount'] = ($t_arr[$x]['transactionAmount'] / $tax_arr[$x]['companyLocalExchangeRate']);
                            $t_arr[$x]['companyReportingAmount'] = ($t_arr[$x]['transactionAmount'] / $tax_arr[$x]['companyReportingExchangeRate']);
                            $tax_total = $t_arr[$x]['transactionAmount'];
                        }
                        /*updating transaction amount using the query used in the master data table */
                        $companyID=current_companyID();
                        $invautoid=$invoiceAutoID;
                        $r1 = "SELECT
	`srp_erp_customerinvoicemaster`.`invoiceAutoID` AS `invoiceAutoID`,
	`srp_erp_customerinvoicemaster`.`companyLocalExchangeRate` AS `companyLocalExchangeRate`,
	`srp_erp_customerinvoicemaster`.`companyLocalCurrencyDecimalPlaces` AS `companyLocalCurrencyDecimalPlaces`,
	`srp_erp_customerinvoicemaster`.`companyReportingExchangeRate` AS `companyReportingExchangeRate`,
	`srp_erp_customerinvoicemaster`.`companyReportingCurrencyDecimalPlaces` AS `companyReportingCurrencyDecimalPlaces`,
	`srp_erp_customerinvoicemaster`.`customerCurrencyExchangeRate` AS `customerCurrencyExchangeRate`,
	`srp_erp_customerinvoicemaster`.`customerCurrencyDecimalPlaces` AS `customerCurrencyDecimalPlaces`,
	`srp_erp_customerinvoicemaster`.`transactionCurrencyDecimalPlaces` AS `transactionCurrencyDecimalPlaces`,

	(
		IFNULL(addondet.taxPercentage, 0) / 100
	) * (
		IFNULL(det.transactionAmount, 0) - IFNULL(det.detailtaxamount, 0) - (
			(
				IFNULL(
					gendiscount.discountPercentage,
					0
				) / 100
			) * IFNULL(det.transactionAmount, 0)
		) + IFNULL(
			genexchargistax.transactionAmount,
			0
		)
	) + IFNULL(det.transactionAmount, 0) - (
		(
			IFNULL(
				gendiscount.discountPercentage,
				0
			) / 100
		) * IFNULL(det.transactionAmount, 0)
	) + IFNULL(
		genexcharg.transactionAmount,
		0
	) AS total_value

FROM
	`srp_erp_customerinvoicemaster`
LEFT JOIN (
	SELECT
		SUM(transactionAmount) AS transactionAmount,
		sum(totalafterTax) AS detailtaxamount,
		invoiceAutoID
	FROM
		srp_erp_customerinvoicedetails
	GROUP BY
		invoiceAutoID
) det ON (
	`det`.`invoiceAutoID` = srp_erp_customerinvoicemaster.invoiceAutoID
)
LEFT JOIN (
	SELECT
		SUM(taxPercentage) AS taxPercentage,
		InvoiceAutoID
	FROM
		srp_erp_customerinvoicetaxdetails
	GROUP BY
		InvoiceAutoID
) addondet ON (
	`addondet`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID
)
LEFT JOIN (
	SELECT
		SUM(discountPercentage) AS discountPercentage,
		invoiceAutoID
	FROM
		srp_erp_customerinvoicediscountdetails
	GROUP BY
		invoiceAutoID
) gendiscount ON (
	`gendiscount`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID
)
LEFT JOIN (
	SELECT
		SUM(transactionAmount) AS transactionAmount,
		invoiceAutoID
	FROM
		srp_erp_customerinvoiceextrachargedetails
	WHERE
		isTaxApplicable = 1
	GROUP BY
		invoiceAutoID
) genexchargistax ON (
	`genexchargistax`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID
)
LEFT JOIN (
	SELECT
		SUM(transactionAmount) AS transactionAmount,
		invoiceAutoID
	FROM
		srp_erp_customerinvoiceextrachargedetails
	GROUP BY
		invoiceAutoID
) genexcharg ON (
	`genexcharg`.`InvoiceAutoID` = srp_erp_customerinvoicemaster.InvoiceAutoID
)
WHERE
	`companyID` = $companyID
and srp_erp_customerinvoicemaster.invoiceAutoID= $invautoid ";
                        $totalValue = $this->db->query($r1)->row_array();

                        $retentionPercentage = 0;
                        $retensionTransactionAmount = '';
                        $retensionLocalAmount = '';
                        $retensionReportingAmount = '';
                        if($master_dt['invoiceType'] == 'Project')
                        {
                            $retentiondetail = $this->db->query("SELECT retensionPercentage, (SUM(srp_erp_customerinvoicedetails.transactionAmount) *(retensionPercentage/100))as Invoice_amount FROM
	`srp_erp_customerinvoicedetails` LEFT JOIN srp_erp_customerinvoicemaster invoicemater on srp_erp_customerinvoicedetails.invoiceAutoID = invoicemater.invoiceAutoID
	LEFT JOIN srp_erp_boq_header boqheader on boqheader.projectID = invoicemater.projectID where  invoicemater.invoiceAutoID = $invautoid  AND type ='Project'")->row_array();

                            $retentionPercentage =  $retentiondetail['retensionPercentage'];
                            $retensionTransactionAmount = (round($retentiondetail['Invoice_amount'],$totalValue['transactionCurrencyDecimalPlaces']));
                            $retensionLocalAmount =(round($retentiondetail['Invoice_amount'] / $totalValue['companyLocalExchangeRate'],$totalValue['companyLocalCurrencyDecimalPlaces']));
                            $retensionReportingAmount = (round($retentiondetail['Invoice_amount'] / $totalValue['companyLocalExchangeRate'],$totalValue['companyLocalCurrencyDecimalPlaces']));

                        }else if($master_dt['invoiceType'] == 'Operation')
                        {
                            $this->db->select('retentionPercentage,retensionTransactionAmount,retensionLocalAmount,retensionReportingAmount');
                            $this->db->where('invoiceAutoID', $invoiceAutoID);
                            $this->db->from('srp_erp_customerinvoicemaster');
                            $retntn_data = $this->db->get()->row_array();

                            if(!empty($retntn_data)){
                                $retentionPercentage =  $retntn_data['retentionPercentage'];
                                $retensionTransactionAmount = $retntn_data['retensionTransactionAmount'];
                                $retensionLocalAmount =$retntn_data['retensionLocalAmount'];
                                $retensionReportingAmount = $retntn_data['retensionReportingAmount'];
                            }
                        }

                        $data = array(
                            'confirmedYN' => 1,
                            'confirmedDate' => current_date(),
                            'confirmedByEmpID' => current_userID(),
                            'confirmedByName' => current_user(),
                            'transactionAmount' => (round($totalValue['total_value'],$totalValue['transactionCurrencyDecimalPlaces'])),
                            'companyLocalAmount' => (round($totalValue['total_value'] / $totalValue['companyLocalExchangeRate'],$totalValue['companyLocalCurrencyDecimalPlaces'])),
                            'companyReportingAmount' => (round($totalValue['total_value'] / $totalValue['companyReportingExchangeRate'],$totalValue['companyReportingCurrencyDecimalPlaces'])),
                            'customerCurrencyAmount' => (round($totalValue['total_value'] / $totalValue['customerCurrencyExchangeRate'],$totalValue['customerCurrencyDecimalPlaces'])),
                            'retentionPercentage' =>$retentionPercentage,
                            'retensionTransactionAmount' =>  $retensionTransactionAmount,
                            'retensionLocalAmount' =>  $retensionLocalAmount,
                            'retensionReportingAmount' => $retensionReportingAmount,
                        );
                        $this->db->where('invoiceAutoID', $invoiceAutoID);
                        $this->db->update('srp_erp_customerinvoicemaster', $data);
                        if (!empty($t_arr)) {
                            $this->db->update_batch('srp_erp_customerinvoicetaxdetails', $t_arr, 'taxDetailAutoID');
                        }
                    } else {
                        return array('type' => false, 'message' => 'Please complete your sub item configurations!');
//                        return array('e', 'Please complete your sub item configurations<br/><br/> Please add sub item/s before confirm this document.');
                        /*return array('error' => 1, 'message' => 'Please complete your sub item configurations<br/><br/> Please add sub item/s before confirm this document.');*//*return array('error' => 1, 'message' => 'Please complete your sub item configurations<br/><br/> Please add sub item/s before confirm this document.');*/
                    }
                }elseif($approvals_status == 3){
                    return array('type' => false, 'message' => 'There are no users exist to perform approval for this document!');
                }
            }

            $this->db->trans_complete();
            if ($this->db->trans_status() === FALSE) {
                $this->db->trans_rollback();
                return array('type' => false, 'message' => 'Supplier Invoice Detail : ' . $data['GLDescription'] . '  Saved Failed!');
            } else {
                $autoApproval= get_document_auto_approval('CINV');

                if($autoApproval==0) {
                    $this->load->model('ApproveOther_Model');
                    $result = $this->ApproveOther_Model->save_invoice_approval(0, $master_data['invoiceAutoID'], 1, 'Auto Approved');
                    if($result){
                        $this->db->trans_commit();
                        return array('type' => true, 'message' => 'Document confirmed successfully!');
                    }
                }else{
                    $this->db->trans_commit();
                    return array('type' => true, 'message' => 'Document confirmed successfully!');
                }
            }
        }
    }

    function refer_back_customer_invoice()
    {
        $invoiceAutoID = $this->input->post('invoiceAutoID');
        $this->db->select('approvedYN,invoiceCode');
        $this->db->where('invoiceAutoID', trim($invoiceAutoID));
        $this->db->where('approvedYN', 1);
        $this->db->where('confirmedYN', 1);
        $this->db->from('srp_erp_customerinvoicemaster');
        $approved_custmoer_invoice = $this->db->get()->row_array();
        if (!empty($approved_custmoer_invoice)) {
            return array('type' => false, 'message' => 'The document already approved - ' . $approved_custmoer_invoice['invoiceCode']);
        } else {
            $this->load->library('Approvals_mobile');
            $status = $this->approvals_mobile->approve_delete($invoiceAutoID, 'CINV');
            if ($status == 1) {
                return array('type' => true, 'message' => 'Referred Back Successfully.');
            } else {
                return array('type' => false, 'message' => ' Error in refer back.');
            }
        }
    }

    function generate_RV_from_CINV()
    {
        $companyCode =  current_companyCode();
        $current_companyID =  current_companyID();
        $current_user_group =  current_user_group();
        $current_pc =  current_pc();
        $current_userID =  current_userID();
        $current_user =  current_user();
        $current_date =  current_date();
        $invoiceAutoID=$this->input->post('invoiceAutoID');
        $date_format_policy = date_format_policy();
        $RVdates = $this->input->post('RVdate');
        $RVdate = input_format_date($RVdates, $date_format_policy);
        $RVcheqDate = $this->input->post('RVchequeDate');
        $RVchequeDate = input_format_date($RVcheqDate, $date_format_policy);
        $this->db->select('*');
        $this->db->from('srp_erp_customerinvoicemaster');
        $this->db->where('invoiceAutoID', $invoiceAutoID);
        $invdate=$this->db->get()->row_array();

        if($RVdate>=$invdate['invoiceDate']){
            $financeYearDetails = get_financial_year($RVdate);
            if (empty($financeYearDetails)) {
                return array('type' => false, 'message' => ' Finance Year not found for the selected document date.');
            } else {
                $FYBegin = $financeYearDetails['beginingDate'];
                $FYEnd = $financeYearDetails['endingDate'];
                $_POST['companyFinanceYear'] = $FYBegin . ' - ' . $FYEnd;
                $_POST['financeyear'] = $financeYearDetails['companyFinanceYearID'];
            }
            $financePeriodDetails = get_financial_period_date_wise($RVdate);

            if (empty($financePeriodDetails)) {
                return array('type' => false, 'message' => ' Finance period not found for the selected document date.');
            } else {
                $_POST['financeyear_period'] = $financePeriodDetails['companyFinancePeriodID'];
            }

            $this->db->select("segmentCode");
            $this->db->from('srp_erp_segment');
            $this->db->where('segmentID', $invdate['segmentID']);
            $segment = $this->db->get()->row_array();

            $currency_code = fetch_currency_code($invdate['transactionCurrencyID']);


            $bank_detail = fetch_gl_account_desc(trim($this->input->post('RVbankCode') ?? ''));
            $data['documentID'] = 'RV';
            $data['companyFinanceYearID'] = trim($this->input->post('financeyear') ?? '');
            $data['companyFinanceYear'] = trim($this->input->post('companyFinanceYear') ?? '');
            $data['FYBegin'] = trim($FYBegin);
            $data['FYEnd'] = trim($FYEnd);
            $data['companyFinancePeriodID'] = trim($this->input->post('financeyear_period') ?? '');

            $data['RVdate'] = trim($RVdate);
            $data['RVNarration'] = trim_desc($this->input->post('RVNarration'));
            $data['segmentID'] = trim($invdate['segmentID'] ?? '');
            $data['segmentCode'] = trim($invdate['segmentCode'] ?? '');
            $data['bankGLAutoID'] = $bank_detail['GLAutoID'];
            $data['bankSystemAccountCode'] = $bank_detail['systemAccountCode'];
            $data['bankGLSecondaryCode'] = $bank_detail['GLSecondaryCode'];
            $data['bankCurrencyID'] = $bank_detail['bankCurrencyID'];
            $data['bankCurrency'] = $bank_detail['bankCurrencyCode'];
            $data['RVbank'] = $bank_detail['bankName'];
            $data['RVbankBranch'] = $bank_detail['bankBranch'];
            $data['RVbankSwiftCode'] = $bank_detail['bankSwiftCode'];
            $data['RVbankAccount'] = $bank_detail['bankAccountNumber'];
            $data['RVbankType'] = $bank_detail['subCategory'];
            $data['modeOfPayment'] = ($bank_detail['isCash'] == 1 ? 1 : 2);
            $data['RVchequeNo'] = trim($this->input->post('RVchequeNo') ?? '');
            if ($bank_detail['isCash'] == 0) {
                $data['RVchequeDate'] = trim($RVchequeDate);
            } else {
                $data['RVchequeDate'] = null;
            }

            $data['RvType'] = 'CustomerInvoices';
            $data['referanceNo'] = trim_desc($this->input->post('referenceno'));
            $data['RVbankCode'] = trim($this->input->post('RVbankCode') ?? '');

            $this->db->select('*');
            $this->db->from('srp_erp_customermaster');
            $this->db->where('customerAutoID', trim($invdate['customerID'] ?? ''));
            $customer_arr = $this->db->get()->row_array();

            $data['customerID'] = $customer_arr['customerAutoID'];
            $data['customerSystemCode'] = $customer_arr['customerSystemCode'];
            $data['customerName'] = $customer_arr['customerName'];
            $data['customerAddress'] = $customer_arr['customerAddress1'] . ' ' . $customer_arr['customerAddress2'];
            $data['customerTelephone'] = $customer_arr['customerTelephone'];
            $data['customerFax'] = $customer_arr['customerFax'];
            $data['customerEmail'] = $customer_arr['customerEmail'];
            $data['customerreceivableAutoID'] = $customer_arr['receivableAutoID'];
            $data['customerreceivableSystemGLCode'] = $customer_arr['receivableSystemGLCode'];
            $data['customerreceivableGLAccount'] = $customer_arr['receivableGLAccount'];
            $data['customerreceivableDescription'] = $customer_arr['receivableDescription'];
            $data['customerreceivableType'] = $customer_arr['receivableType'];
            $data['customerCurrency'] = $customer_arr['customerCurrency'];
            $data['customerCurrencyID'] = $customer_arr['customerCurrencyID'];
            $data['customerCurrencyDecimalPlaces'] = $customer_arr['customerCurrencyDecimalPlaces'];

            $data['transactionCurrencyID'] = trim(trim($invdate['transactionCurrencyID'] ?? ''));
            $data['transactionCurrency'] = trim($currency_code);
            $data['transactionExchangeRate'] = 1;
            $data['transactionCurrencyDecimalPlaces'] = fetch_currency_desimal_by_id($data['transactionCurrencyID']);
            $data['companyLocalCurrencyID'] = current_company_default_currencyID();
            $data['companyLocalCurrency'] = fetch_currency_code($data['companyLocalCurrencyID']);
            $default_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyLocalCurrencyID']);
            $data['companyLocalExchangeRate'] = $default_currency['conversion'];
            $data['companyLocalCurrencyDecimalPlaces'] = $default_currency['DecimalPlaces'];
            $data['companyReportingCurrencyID'] = current_company_reporting_currencyID();
            $data['companyReportingCurrency'] = fetch_currency_code($data['companyReportingCurrencyID']);
            $reporting_currency = currency_conversionID($data['transactionCurrencyID'], $data['companyReportingCurrencyID']);
            $data['companyReportingExchangeRate'] = $reporting_currency['conversion'];
            $data['companyReportingCurrencyDecimalPlaces'] = $reporting_currency['DecimalPlaces'];
            $customer_currency = currency_conversionID($data['transactionCurrencyID'], $data['customerCurrencyID']);
            $data['customerExchangeRate'] = $customer_currency['conversion'];
            $data['customerCurrencyDecimalPlaces'] = $customer_currency['DecimalPlaces'];
            $bank_currency = currency_conversionID($data['transactionCurrencyID'], $data['bankCurrencyID']);
            $data['bankCurrencyExchangeRate'] = $bank_currency['conversion'];
            $data['bankCurrencyDecimalPlaces'] = $bank_currency['DecimalPlaces'];
            $data['companyCode'] = $companyCode;
            $data['companyID'] = $current_companyID;
            $data['createdUserGroup'] = $current_user_group;
            $data['createdPCID'] = $current_pc;
            $data['createdUserID'] = $current_userID;
            $data['createdUserName'] = $current_user;
            $data['createdDateTime'] = $current_date;
            $data['RVcode'] = 0;

            $result=$this->db->insert('srp_erp_customerreceiptmaster', $data);
            $last_id = $this->db->insert_id();
            if ($result) {
                update_warehouse_items();
                update_item_master();
                $currencyID= $invdate['transactionCurrencyID'];
                $customerID= $invdate['customerID'];

                $this->db->select('transactionAmount');
                $this->db->from('srp_erp_customerinvoicemaster');
                $this->db->where('invoiceAutoID', $invoiceAutoID);
                $invAmount=$this->db->get()->row_array();

                $data = $this->db->query("SELECT srp_erp_customerinvoicemaster.invoiceAutoID, invoiceCode, receiptTotalAmount, advanceMatchedTotal, creditNoteTotalAmount, referenceNo, (( ( ( cid.transactionAmount - cid.totalAfterTax ) - ( ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) )+ IFNULL( genexchargistax.transactionAmount, 0 ) ) * ( IFNULL(tax.taxPercentage, 0) / 100 ) + IFNULL(cid.transactionAmount, 0) ) - ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) + IFNULL( genexcharg.transactionAmount, 0 )) AS transactionAmount, invoiceDate, slr.returnsalesvalue as salesreturnvalue FROM srp_erp_customerinvoicemaster LEFT JOIN ( SELECT invoiceAutoID, IFNULL(SUM(transactionAmount), 0) AS transactionAmount, IFNULL(SUM(totalAfterTax), 0) AS totalAfterTax FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID ) cid ON srp_erp_customerinvoicemaster.invoiceAutoID = cid.invoiceAutoID LEFT JOIN ( SELECT invoiceAutoID, SUM(taxPercentage) AS taxPercentage FROM srp_erp_customerinvoicetaxdetails GROUP BY invoiceAutoID ) tax ON tax.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(discountPercentage) AS discountPercentage, invoiceAutoID FROM srp_erp_customerinvoicediscountdetails GROUP BY invoiceAutoID ) gendiscount ON gendiscount.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(transactionAmount) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails WHERE isTaxApplicable = 1 GROUP BY invoiceAutoID ) genexchargistax ON genexchargistax.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT SUM(transactionAmount) AS transactionAmount, invoiceAutoID FROM srp_erp_customerinvoiceextrachargedetails GROUP BY invoiceAutoID ) genexcharg ON genexcharg.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID LEFT JOIN ( SELECT invoiceAutoID, IFNULL( SUM(slaesdetail.totalValue), 0 ) AS returnsalesvalue FROM srp_erp_salesreturndetails slaesdetail GROUP BY invoiceAutoID ) slr ON slr.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID WHERE confirmedYN = 1 AND approvedYN = 1 AND receiptInvoiceYN = 0 AND `customerID` = '{$customerID}' AND `transactionCurrencyID` = '{$currencyID}' AND invoiceDate <= '{$RVdate}' AND srp_erp_customerinvoicemaster.invoiceAutoID = $invoiceAutoID ")->row_array();
                $balance = $data['transactionAmount'] - ($data['receiptTotalAmount'] + $data['creditNoteTotalAmount'] + $data['advanceMatchedTotal'] + $data['salesreturnvalue']);

                if ($balance > 0) {
                    $receiptVoucherAutoID =  $last_id;
                    $settlementAmount =  0;
                    $this->db->select('customerReceivableAutoID,slr.returnsalesvalue as returnsalesvalue,companyLocalExchangeRate,companyReportingExchangeRate,customerCurrencyExchangeRate ,srp_erp_customerinvoicemaster.invoiceAutoID,invoiceCode,referenceNo,invoiceDate,invoiceNarration,(( ( ( cid.transactionAmount - cid.totalAfterTax ) - ( ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) )+ IFNULL( genexchargistax.transactionAmount, 0 ) ) * ( IFNULL(tax.taxPercentage, 0) / 100 ) + IFNULL(cid.transactionAmount, 0) ) - ( ( IFNULL( gendiscount.discountPercentage, 0 ) / 100 ) * IFNULL(cid.transactionAmount, 0) ) + IFNULL( genexcharg.transactionAmount, 0 )) AS transactionAmount,receiptTotalAmount,advanceMatchedTotal,creditNoteTotalAmount,customerReceivableSystemGLCode,customerReceivableGLAccount,customerReceivableDescription,customerReceivableType,segmentID,segmentCode,transactionCurrencyDecimalPlaces');
                    $this->db->from('srp_erp_customerinvoicemaster');
                    $this->db->join('(SELECT invoiceAutoID,IFNULL(SUM( transactionAmount ),0) as transactionAmount,IFNULL(SUM(totalAfterTax ),0) as totalAfterTax FROM srp_erp_customerinvoicedetails GROUP BY invoiceAutoID) cid', 'srp_erp_customerinvoicemaster.invoiceAutoID = cid.invoiceAutoID', 'left');
                    $this->db->join('(SELECT
	invoiceAutoID,
	IFNULL( SUM(slaesdetail.totalValue), 0 ) AS returnsalesvalue
	from
	srp_erp_salesreturndetails slaesdetail
	GROUP BY invoiceAutoID) slr', 'srp_erp_customerinvoicemaster.invoiceAutoID = slr.invoiceAutoID', 'left');
                    $this->db->join('(SELECT
	SUM(discountPercentage) AS discountPercentage,
		invoiceAutoID
	from
	srp_erp_customerinvoicediscountdetails
	GROUP BY invoiceAutoID) gendiscount', 'srp_erp_customerinvoicemaster.invoiceAutoID = gendiscount.invoiceAutoID', 'left');
                    $this->db->join('(SELECT
	SUM(transactionAmount) AS transactionAmount,
		invoiceAutoID
	from
	srp_erp_customerinvoiceextrachargedetails
	WHERE
		isTaxApplicable = 1
	GROUP BY invoiceAutoID) genexchargistax', 'srp_erp_customerinvoicemaster.invoiceAutoID = genexchargistax.invoiceAutoID', 'left');
                    $this->db->join('(SELECT
	SUM(transactionAmount) AS transactionAmount,
		invoiceAutoID
	from
	srp_erp_customerinvoiceextrachargedetails
	GROUP BY invoiceAutoID) genexcharg', 'srp_erp_customerinvoicemaster.invoiceAutoID = genexcharg.invoiceAutoID', 'left');
                    $this->db->join('(SELECT invoiceAutoID,SUM(taxPercentage) as taxPercentage FROM srp_erp_customerinvoicetaxdetails GROUP BY invoiceAutoID) tax', 'tax.invoiceAutoID = srp_erp_customerinvoicemaster.invoiceAutoID', 'left');
                    $this->db->where_in('srp_erp_customerinvoicemaster.invoiceAutoID', $this->input->post('invoiceAutoID'));
                    $master_recode = $this->db->get()->result_array();
                    $amount = $balance;
                    for ($i = 0; $i < count($master_recode); $i++) {
                        $dataD[$i]['receiptVoucherAutoId'] = $last_id;
                        $dataD[$i]['invoiceAutoID'] = $master_recode[$i]['invoiceAutoID'];
                        $dataD[$i]['type'] = 'Invoice';
                        $dataD[$i]['invoiceCode'] = $master_recode[$i]['invoiceCode'];
                        $dataD[$i]['referenceNo'] = $master_recode[$i]['referenceNo'];
                        $dataD[$i]['invoiceDate'] = $master_recode[$i]['invoiceDate'];
                        $dataD[$i]['GLAutoID'] = $master_recode[$i]['customerReceivableAutoID'];
                        $dataD[$i]['systemGLCode'] = $master_recode[$i]['customerReceivableSystemGLCode'];
                        $dataD[$i]['GLCode'] = $master_recode[$i]['customerReceivableGLAccount'];
                        $dataD[$i]['GLDescription'] = $master_recode[$i]['customerReceivableDescription'];
                        $dataD[$i]['GLType'] = $master_recode[$i]['customerReceivableType'];
                        $dataD[$i]['description'] = $master_recode[$i]['invoiceNarration'];
                        $dataD[$i]['Invoice_amount'] = $master_recode[$i]['transactionAmount'];
                        $dataD[$i]['segmentID'] = $master_recode[$i]['segmentID'];
                        $dataD[$i]['segmentCode'] = $master_recode[$i]['segmentCode'];
                        $dataD[$i]['due_amount'] = ($master_recode[$i]['transactionAmount'] - ($master_recode[$i]['receiptTotalAmount'] + $master_recode[$i]['advanceMatchedTotal'] + $master_recode[$i]['creditNoteTotalAmount'] + $master_recode[$i]['returnsalesvalue']));
                        $dataD[$i]['balance_amount'] = ($dataD[$i]['due_amount'] - round($amount, $master_recode[$i]['transactionCurrencyDecimalPlaces']));
                        $dataD[$i]['transactionAmount'] = round($amount, $master_recode[$i]['transactionCurrencyDecimalPlaces']);
                        $dataD[$i]['companyLocalAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['companyLocalExchangeRate']);
                        $dataD[$i]['companyLocalExchangeRate'] = $master_recode[$i]['companyLocalExchangeRate'];
                        $dataD[$i]['companyReportingAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['companyReportingExchangeRate']);
                        $dataD[$i]['companyReportingExchangeRate'] = $master_recode[$i]['companyReportingExchangeRate'];
                        $dataD[$i]['customerAmount'] = ($dataD[$i]['transactionAmount'] / $master_recode[$i]['customerCurrencyExchangeRate']);
                        $dataD[$i]['customerCurrencyExchangeRate'] = $master_recode[$i]['customerCurrencyExchangeRate'];
                        $dataD[$i]['companyCode'] = $companyCode;
                        $dataD[$i]['companyID'] = $current_companyID;
                        $dataD[$i]['modifiedPCID'] = $current_pc;
                        $dataD[$i]['modifiedUserID'] = $current_userID;
                        $dataD[$i]['modifiedUserName'] = $current_user;
                        $dataD[$i]['modifiedDateTime'] = $current_date;
                        $dataD[$i]['createdUserGroup'] = $current_user_group;
                        $dataD[$i]['createdPCID'] = $current_pc;
                        $dataD[$i]['createdUserID'] = $current_userID;
                        $dataD[$i]['createdUserName'] = $current_user;
                        $dataD[$i]['createdDateTime'] = $current_date;

                        $grv_m[$i]['invoiceAutoID'] = $invoiceAutoID;
                        $grv_m[$i]['receiptTotalAmount'] = ($master_recode[$i]['receiptTotalAmount'] + $amount);
                        $grv_m[$i]['receiptInvoiceYN'] = 0;
                        if ($dataD[$i]['balance_amount'] <= 0) {
                            $grv_m[$i]['receiptInvoiceYN'] = 1;
                        }
                    }
                    $data_up_settlement['settlementTotal'] =$settlementAmount;
                    $this->db->where('receiptVoucherAutoId', $receiptVoucherAutoID);
                    $this->db->update('srp_erp_customerreceiptmaster', $data_up_settlement);

                    if (!empty($dataD)) {
                        $this->db->update_batch('srp_erp_customerinvoicemaster', $grv_m, 'invoiceAutoID');
                        $this->db->insert_batch('srp_erp_customerreceiptdetail', $dataD);

                        $confirmRV = $this->confirm_receipt_voucher($last_id);
                        return array('type' => true, 'message' => ' Receipt Voucher Saved Successfully.', 'RV_ID'=>$last_id);
                    } else {
                        $this->db->delete('srp_erp_customerreceiptmaster',array('receiptVoucherAutoId' => trim($last_id)));
                        return array('type' => false, 'message' => ' Receipt voucher not Created.');
                    }
                }else{
                    $this->db->delete('srp_erp_customerreceiptmaster',array('receiptVoucherAutoId' => trim($last_id)));
                    return array('type' => false, 'message' => ' Balance amount should be greater than zero.');
                }
            } else {
                return array('type' => false, 'message' => ' Receipt Voucher   Saved Failed.');
            }
        }else{
            return array('type' => false, 'message' => ' Receipt voucher date should be greater than or equal to invoice date.');
        }
    }

    function warehouse_qty()
    {
        $companyID = current_companyID();
        $itemAutoID = $this->input->get('itemAutoID');
        $wareHouseAutoID = $this->input->get('wareHouseAutoID');
        $currentStock = 0;
        $stock = $this->db->query("SELECT SUM(transactionQTY/convertionRate) as currentStock FROM `srp_erp_itemledger` where companyID = {$companyID} AND wareHouseAutoID = {$wareHouseAutoID} AND itemAutoID = {$itemAutoID}")->row_array();
        if (!empty($stock['currentStock'])) {
            $currentStock = (float)$stock['currentStock'];
        }
        return $currentStock;
    }
}